
Motor_Driver_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001106c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0801133c  0801133c  0002133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011488  08011488  00021488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801148c  0801148c  0002148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000168  24000000  08011490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00006ab4  24000168  080115f8  00030168  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24006c1c  080115f8  00036c1c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003863c  00000000  00000000  00030196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006439  00000000  00000000  000687d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002b38  00000000  00000000  0006ec10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000028b0  00000000  00000000  00071748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00009b6a  00000000  00000000  00073ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00034047  00000000  00000000  0007db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0017bf39  00000000  00000000  000b1ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0022dae2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000bea4  00000000  00000000  0022db34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000168 	.word	0x24000168
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011324 	.word	0x08011324

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400016c 	.word	0x2400016c
 800030c:	08011324 	.word	0x08011324

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000316:	4b48      	ldr	r3, [pc, #288]	; (8000438 <main+0x128>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800031e:	2b00      	cmp	r3, #0
 8000320:	d11b      	bne.n	800035a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000322:	f3bf 8f4f 	dsb	sy
}
 8000326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000328:	f3bf 8f6f 	isb	sy
}
 800032c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800032e:	4b42      	ldr	r3, [pc, #264]	; (8000438 <main+0x128>)
 8000330:	2200      	movs	r2, #0
 8000332:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000336:	f3bf 8f4f 	dsb	sy
}
 800033a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800033c:	f3bf 8f6f 	isb	sy
}
 8000340:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000342:	4b3d      	ldr	r3, [pc, #244]	; (8000438 <main+0x128>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a3c      	ldr	r2, [pc, #240]	; (8000438 <main+0x128>)
 8000348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800034c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800034e:	f3bf 8f4f 	dsb	sy
}
 8000352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000354:	f3bf 8f6f 	isb	sy
}
 8000358:	e000      	b.n	800035c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800035a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800035c:	4b36      	ldr	r3, [pc, #216]	; (8000438 <main+0x128>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d138      	bne.n	80003da <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <main+0x128>)
 800036a:	2200      	movs	r2, #0
 800036c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000370:	f3bf 8f4f 	dsb	sy
}
 8000374:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000376:	4b30      	ldr	r3, [pc, #192]	; (8000438 <main+0x128>)
 8000378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800037c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	0b5b      	lsrs	r3, r3, #13
 8000382:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000386:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	08db      	lsrs	r3, r3, #3
 800038c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000390:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	015a      	lsls	r2, r3, #5
 8000396:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800039a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80003a0:	4925      	ldr	r1, [pc, #148]	; (8000438 <main+0x128>)
 80003a2:	4313      	orrs	r3, r2
 80003a4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	607a      	str	r2, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d1ef      	bne.n	8000392 <main+0x82>
    } while(sets-- != 0U);
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	60ba      	str	r2, [r7, #8]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d1e5      	bne.n	8000388 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80003bc:	f3bf 8f4f 	dsb	sy
}
 80003c0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <main+0x128>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <main+0x128>)
 80003c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ce:	f3bf 8f4f 	dsb	sy
}
 80003d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003d4:	f3bf 8f6f 	isb	sy
}
 80003d8:	e000      	b.n	80003dc <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003da:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003dc:	f001 fb20 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e0:	f000 f832 	bl	8000448 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e4:	f000 f89e 	bl	8000524 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 fcee 	bl	8000dc8 <MX_GPIO_Init>
  MX_DTS_Init();
 80003ec:	f000 f9e2 	bl	80007b4 <MX_DTS_Init>
  MX_FDCAN1_Init();
 80003f0:	f000 fa0a 	bl	8000808 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 80003f4:	f000 fa6c 	bl	80008d0 <MX_I2C2_Init>
  MX_DAC1_Init();
 80003f8:	f000 f9aa 	bl	8000750 <MX_DAC1_Init>
  MX_I2C3_Init();
 80003fc:	f000 faa8 	bl	8000950 <MX_I2C3_Init>
  MX_ADC3_Init();
 8000400:	f000 f938 	bl	8000674 <MX_ADC3_Init>
  MX_I2C4_Init();
 8000404:	f000 fae4 	bl	80009d0 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000408:	f000 f8bc 	bl	8000584 <MX_ADC1_Init>
  MX_TIM1_Init();
 800040c:	f000 fb76 	bl	8000afc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000410:	f000 fc10 	bl	8000c34 <MX_TIM2_Init>
  MX_TIM12_Init();
 8000414:	f000 fc72 	bl	8000cfc <MX_TIM12_Init>
  MX_SPI4_Init();
 8000418:	f000 fb1a 	bl	8000a50 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800041c:	f00d fc1c 	bl	800dc58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <main+0x12c>)
 8000422:	2100      	movs	r1, #0
 8000424:	4806      	ldr	r0, [pc, #24]	; (8000440 <main+0x130>)
 8000426:	f00d fc61 	bl	800dcec <osThreadNew>
 800042a:	4603      	mov	r3, r0
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <main+0x134>)
 800042e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000430:	f00d fc36 	bl	800dca0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000434:	e7fe      	b.n	8000434 <main+0x124>
 8000436:	bf00      	nop
 8000438:	e000ed00 	.word	0xe000ed00
 800043c:	080113f4 	.word	0x080113f4
 8000440:	08000f25 	.word	0x08000f25
 8000444:	240005a4 	.word	0x240005a4

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b09c      	sub	sp, #112	; 0x70
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000452:	224c      	movs	r2, #76	; 0x4c
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f010 fe9a 	bl	8011190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f010 fe94 	bl	8011190 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000468:	2002      	movs	r0, #2
 800046a:	f005 fb63 	bl	8005b34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <SystemClock_Config+0xd8>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <SystemClock_Config+0xd8>)
 8000478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b28      	ldr	r3, [pc, #160]	; (8000520 <SystemClock_Config+0xd8>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800048a:	bf00      	nop
 800048c:	4b24      	ldr	r3, [pc, #144]	; (8000520 <SystemClock_Config+0xd8>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000498:	d1f8      	bne.n	800048c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800049a:	2301      	movs	r3, #1
 800049c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800049e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	2302      	movs	r3, #2
 80004a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a8:	2302      	movs	r3, #2
 80004aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80004b0:	232c      	movs	r3, #44	; 0x2c
 80004b2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80004b4:	2301      	movs	r3, #1
 80004b6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004b8:	2305      	movs	r3, #5
 80004ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004bc:	2302      	movs	r3, #2
 80004be:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004c0:	230c      	movs	r3, #12
 80004c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004d0:	4618      	mov	r0, r3
 80004d2:	f005 fb79 	bl	8005bc8 <HAL_RCC_OscConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80004dc:	f000 fd3e 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e0:	233f      	movs	r3, #63	; 0x3f
 80004e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e4:	2303      	movs	r3, #3
 80004e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80004ec:	2308      	movs	r3, #8
 80004ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004f0:	2340      	movs	r3, #64	; 0x40
 80004f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004f4:	2340      	movs	r3, #64	; 0x40
 80004f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004fe:	2340      	movs	r3, #64	; 0x40
 8000500:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2103      	movs	r1, #3
 8000506:	4618      	mov	r0, r3
 8000508:	f005 ff38 	bl	800637c <HAL_RCC_ClockConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000512:	f000 fd23 	bl	8000f5c <Error_Handler>
  }
}
 8000516:	bf00      	nop
 8000518:	3770      	adds	r7, #112	; 0x70
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	58024800 	.word	0x58024800

08000524 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0ae      	sub	sp, #184	; 0xb8
 8000528:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800052a:	463b      	mov	r3, r7
 800052c:	22b8      	movs	r2, #184	; 0xb8
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f010 fe2d 	bl	8011190 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000536:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000542:	2320      	movs	r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000546:	2381      	movs	r3, #129	; 0x81
 8000548:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000556:	23c0      	movs	r3, #192	; 0xc0
 8000558:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800055a:	2300      	movs	r3, #0
 800055c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000568:	463b      	mov	r3, r7
 800056a:	4618      	mov	r0, r3
 800056c:	f006 fabe 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000576:	f000 fcf1 	bl	8000f5c <Error_Handler>
  }
}
 800057a:	bf00      	nop
 800057c:	37b8      	adds	r7, #184	; 0xb8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800058a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2224      	movs	r2, #36	; 0x24
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f010 fdf7 	bl	8011190 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a2:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005a4:	4a31      	ldr	r2, [pc, #196]	; (800066c <MX_ADC1_Init+0xe8>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b4:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005bc:	2204      	movs	r2, #4
 80005be:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005cc:	4b26      	ldr	r3, [pc, #152]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005e6:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005ec:	4b1e      	ldr	r3, [pc, #120]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	4819      	ldr	r0, [pc, #100]	; (8000668 <MX_ADC1_Init+0xe4>)
 8000602:	f001 fd1f 	bl	8002044 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800060c:	f000 fca6 	bl	8000f5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	4619      	mov	r1, r3
 800061a:	4813      	ldr	r0, [pc, #76]	; (8000668 <MX_ADC1_Init+0xe4>)
 800061c:	f002 fd5a 	bl	80030d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000626:	f000 fc99 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0xec>)
 800062c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800062e:	2306      	movs	r3, #6
 8000630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000636:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800063c:	2304      	movs	r3, #4
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	4619      	mov	r1, r3
 800064e:	4806      	ldr	r0, [pc, #24]	; (8000668 <MX_ADC1_Init+0xe4>)
 8000650:	f001 ff00 	bl	8002454 <HAL_ADC_ConfigChannel>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800065a:	f000 fc7f 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	3730      	adds	r7, #48	; 0x30
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	24000184 	.word	0x24000184
 800066c:	40022000 	.word	0x40022000
 8000670:	0c900008 	.word	0x0c900008

08000674 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2224      	movs	r2, #36	; 0x24
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f010 fd85 	bl	8011190 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000686:	4b2f      	ldr	r3, [pc, #188]	; (8000744 <MX_ADC3_Init+0xd0>)
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <MX_ADC3_Init+0xd4>)
 800068a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800068c:	4b2d      	ldr	r3, [pc, #180]	; (8000744 <MX_ADC3_Init+0xd0>)
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000692:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <MX_ADC3_Init+0xd0>)
 8000694:	2208      	movs	r2, #8
 8000696:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <MX_ADC3_Init+0xd0>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800069e:	4b29      	ldr	r3, [pc, #164]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <MX_ADC3_Init+0xd0>)
 80006fa:	f001 fca3 	bl	8002044 <HAL_ADC_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000704:	f000 fc2a 	bl	8000f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000708:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_ADC3_Init+0xd8>)
 800070a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070c:	2306      	movs	r3, #6
 800070e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000714:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800071a:	2304      	movs	r3, #4
 800071c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4619      	mov	r1, r3
 800072a:	4806      	ldr	r0, [pc, #24]	; (8000744 <MX_ADC3_Init+0xd0>)
 800072c:	f001 fe92 	bl	8002454 <HAL_ADC_ConfigChannel>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000736:	f000 fc11 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	3728      	adds	r7, #40	; 0x28
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	240001f4 	.word	0x240001f4
 8000748:	58026000 	.word	0x58026000
 800074c:	cb840000 	.word	0xcb840000

08000750 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2224      	movs	r2, #36	; 0x24
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f010 fd17 	bl	8011190 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_DAC1_Init+0x5c>)
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_DAC1_Init+0x60>)
 8000766:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_DAC1_Init+0x5c>)
 800076a:	f002 fe75 	bl	8003458 <HAL_DAC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000774:	f000 fbf2 	bl	8000f5c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000784:	2301      	movs	r3, #1
 8000786:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2200      	movs	r2, #0
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_DAC1_Init+0x5c>)
 8000794:	f002 fee6 	bl	8003564 <HAL_DAC_ConfigChannel>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 fbdd 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24000264 	.word	0x24000264
 80007b0:	40007400 	.word	0x40007400

080007b4 <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_DTS_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_DTS_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DTS_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 80007c4:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_DTS_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DTS_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_DTS_Init+0x4c>)
 80007d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007d6:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_DTS_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_DTS_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_DTS_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_DTS_Init+0x4c>)
 80007ec:	f003 f802 	bl	80037f4 <HAL_DTS_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_DTS_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 fbb1 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	24000278 	.word	0x24000278
 8000804:	58006800 	.word	0x58006800

08000808 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <MX_FDCAN1_Init+0xc4>)
 8000810:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000826:	2200      	movs	r2, #0
 8000828:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000832:	2210      	movs	r2, #16
 8000834:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800083e:	2202      	movs	r2, #2
 8000840:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000844:	2202      	movs	r2, #2
 8000846:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000856:	2201      	movs	r2, #1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800085c:	2201      	movs	r2, #1
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000892:	2204      	movs	r2, #4
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_FDCAN1_Init+0xc0>)
 80008b6:	f003 f837 	bl	8003928 <HAL_FDCAN_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008c0:	f000 fb4c 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2400029c 	.word	0x2400029c
 80008cc:	4000a000 	.word	0x4000a000

080008d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C2_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C2_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C2_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C2_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 108;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e2:	226c      	movs	r2, #108	; 0x6c
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C2_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C2_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C2_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C2_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C2_Init+0x74>)
 800090c:	f003 fd32 	bl	8004374 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 fb21 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C2_Init+0x74>)
 800091e:	f003 fdb9 	bl	8004494 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 fb18 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C2_Init+0x74>)
 8000930:	f003 fdfb 	bl	800452a <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fb0f 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2400033c 	.word	0x2400033c
 8000948:	40005800 	.word	0x40005800
 800094c:	60404e72 	.word	0x60404e72

08000950 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x60404E72;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C3_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C3_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 108;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000962:	226c      	movs	r2, #108	; 0x6c
 8000964:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C3_Init+0x74>)
 800098c:	f003 fcf2 	bl	8004374 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000996:	f000 fae1 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C3_Init+0x74>)
 800099e:	f003 fd79 	bl	8004494 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f000 fad8 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C3_Init+0x74>)
 80009b0:	f003 fdbb 	bl	800452a <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f000 facf 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000390 	.word	0x24000390
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	60404e72 	.word	0x60404e72

080009d0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C4_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C4_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C4_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C4_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C4_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C4_Init+0x74>)
 8000a0c:	f003 fcb2 	bl	8004374 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 faa1 	bl	8000f5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C4_Init+0x74>)
 8000a1e:	f003 fd39 	bl	8004494 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fa98 	bl	8000f5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C4_Init+0x74>)
 8000a30:	f003 fd7b 	bl	800452a <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fa8f 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	240003e4 	.word	0x240003e4
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	60404e72 	.word	0x60404e72

08000a50 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a56:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <MX_SPI4_Init+0xa8>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a5c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a60:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a7c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a80:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000aa2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_SPI4_Init+0xa4>)
 8000ae0:	f008 fbea 	bl	80092b8 <HAL_SPI_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000aea:	f000 fa37 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24000438 	.word	0x24000438
 8000af8:	40013400 	.word	0x40013400

08000afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b098      	sub	sp, #96	; 0x60
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
 8000b20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2234      	movs	r2, #52	; 0x34
 8000b26:	2100      	movs	r1, #0
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f010 fb31 	bl	8011190 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2e:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b30:	4a3f      	ldr	r2, [pc, #252]	; (8000c30 <MX_TIM1_Init+0x134>)
 8000b32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b34:	4b3d      	ldr	r3, [pc, #244]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b40:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b48:	4b38      	ldr	r3, [pc, #224]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b5a:	4834      	ldr	r0, [pc, #208]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b5c:	f008 fdd2 	bl	8009704 <HAL_TIM_PWM_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f9f9 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	482b      	ldr	r0, [pc, #172]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000b7e:	f009 fbef 	bl	800a360 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b88:	f000 f9e8 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8c:	2360      	movs	r3, #96	; 0x60
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bac:	2200      	movs	r2, #0
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481e      	ldr	r0, [pc, #120]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000bb2:	f008 ff1d 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bbc:	f000 f9ce 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc4:	2204      	movs	r2, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000bca:	f008 ff11 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bd4:	f000 f9c2 	bl	8000f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000c0e:	f009 fc43 	bl	800a498 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000c18:	f000 f9a0 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x130>)
 8000c1e:	f000 fd31 	bl	8001684 <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3760      	adds	r7, #96	; 0x60
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	240004c0 	.word	0x240004c0
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c6c:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b1f      	ldr	r3, [pc, #124]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c80:	481d      	ldr	r0, [pc, #116]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c82:	f008 fd3f 	bl	8009704 <HAL_TIM_PWM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f000 f966 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4816      	ldr	r0, [pc, #88]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000ca0:	f009 fb5e 	bl	800a360 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000caa:	f000 f957 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000cc6:	f008 fe93 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cd0:	f000 f944 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000cdc:	f008 fe88 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ce6:	f000 f939 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000cec:	f000 fcca 	bl	8001684 <HAL_TIM_MspPostInit>

}
 8000cf0:	bf00      	nop
 8000cf2:	3728      	adds	r7, #40	; 0x28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2400050c 	.word	0x2400050c

08000cfc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <MX_TIM12_Init+0xc8>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d32:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d38:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d46:	481e      	ldr	r0, [pc, #120]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d48:	f008 fcdc 	bl	8009704 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM12_Init+0x5a>
  {
    Error_Handler();
 8000d52:	f000 f903 	bl	8000f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d66:	f009 fafb 	bl	800a360 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000d70:	f000 f8f4 	bl	8000f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	; 0x60
 8000d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000d8c:	f008 fe30 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM12_Init+0x9e>
  {
    Error_Handler();
 8000d96:	f000 f8e1 	bl	8000f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000da2:	f008 fe25 	bl	80099f0 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM12_Init+0xb4>
  {
    Error_Handler();
 8000dac:	f000 f8d6 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM12_Init+0xc4>)
 8000db2:	f000 fc67 	bl	8001684 <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3728      	adds	r7, #40	; 0x28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	24000558 	.word	0x24000558
 8000dc4:	40001800 	.word	0x40001800

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	; 0x30
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dde:	4b4e      	ldr	r3, [pc, #312]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b4a      	ldr	r3, [pc, #296]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	4b46      	ldr	r3, [pc, #280]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e04:	f043 0304 	orr.w	r3, r3, #4
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b42      	ldr	r3, [pc, #264]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	4b3f      	ldr	r3, [pc, #252]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a3d      	ldr	r2, [pc, #244]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	4a36      	ldr	r2, [pc, #216]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a27      	ldr	r2, [pc, #156]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e7c:	f043 0320 	orr.w	r3, r3, #32
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000e9a:	f043 0308 	orr.w	r3, r3, #8
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_GPIO_Init+0x150>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0308 	and.w	r3, r3, #8
 8000eac:	603b      	str	r3, [r7, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb6:	4819      	ldr	r0, [pc, #100]	; (8000f1c <MX_GPIO_Init+0x154>)
 8000eb8:	f003 fa42 	bl	8004340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000ebc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_GPIO_Init+0x158>)
 8000ed2:	f003 f88d 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <MX_GPIO_Init+0x154>)
 8000ef0:	f003 f87e 	bl	8003ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ef4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4804      	ldr	r0, [pc, #16]	; (8000f1c <MX_GPIO_Init+0x154>)
 8000f0a:	f003 f871 	bl	8003ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0e:	bf00      	nop
 8000f10:	3730      	adds	r7, #48	; 0x30
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020c00 	.word	0x58020c00
 8000f20:	58020400 	.word	0x58020400

08000f24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f2c:	f00f fc0e 	bl	801074c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f00c ff6d 	bl	800de10 <osDelay>
 8000f36:	e7fb      	b.n	8000f30 <StartDefaultTask+0xc>

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f000 fda5 	bl	8001a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40001000 	.word	0x40001000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <HAL_MspInit+0x68>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f74:	4a16      	ldr	r2, [pc, #88]	; (8000fd0 <HAL_MspInit+0x68>)
 8000f76:	f043 0302 	orr.w	r3, r3, #2
 8000f7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_MspInit+0x68>)
 8000f80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f06f 0001 	mvn.w	r0, #1
 8000f94:	f002 fa38 	bl	8003408 <HAL_NVIC_SetPriority>

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_MspInit+0x68>)
 8000f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_MspInit+0x68>)
 8000fa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x68>)
 8000faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 fdb2 	bl	8001b20 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000fbc:	f000 fdd8 	bl	8001b70 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fdc1 	bl	8001b48 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	; 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a3e      	ldr	r2, [pc, #248]	; (80010ec <HAL_ADC_MspInit+0x118>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d161      	bne.n	80010ba <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ff6:	4b3e      	ldr	r3, [pc, #248]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8000ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ffc:	4a3c      	ldr	r2, [pc, #240]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8000ffe:	f043 0320 	orr.w	r3, r3, #32
 8001002:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001006:	4b3a      	ldr	r3, [pc, #232]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b36      	ldr	r3, [pc, #216]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	4a35      	ldr	r2, [pc, #212]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001038:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001042:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001056:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001058:	f043 0320 	orr.w	r3, r3, #32
 800105c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PB0     ------> ADC1_INP9
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	481c      	ldr	r0, [pc, #112]	; (80010f4 <HAL_ADC_MspInit+0x120>)
 8001082:	f002 ffb5 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 031c 	add.w	r3, r7, #28
 8001096:	4619      	mov	r1, r3
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <HAL_ADC_MspInit+0x124>)
 800109a:	f002 ffa9 	bl	8003ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800109e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a4:	2303      	movs	r3, #3
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4812      	ldr	r0, [pc, #72]	; (80010fc <HAL_ADC_MspInit+0x128>)
 80010b4:	f002 ff9c 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010b8:	e013      	b.n	80010e2 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a10      	ldr	r2, [pc, #64]	; (8001100 <HAL_ADC_MspInit+0x12c>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d10e      	bne.n	80010e2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 80010cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_ADC_MspInit+0x11c>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
}
 80010e2:	bf00      	nop
 80010e4:	3730      	adds	r7, #48	; 0x30
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020000 	.word	0x58020000
 80010f8:	58020400 	.word	0x58020400
 80010fc:	58021400 	.word	0x58021400
 8001100:	58026000 	.word	0x58026000

08001104 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_DAC_MspInit+0x90>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d131      	bne.n	800118a <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_DAC_MspInit+0x94>)
 8001128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_DAC_MspInit+0x94>)
 800112e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_DAC_MspInit+0x94>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_DAC_MspInit+0x94>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_DAC_MspInit+0x94>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <HAL_DAC_MspInit+0x94>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001162:	2310      	movs	r3, #16
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <HAL_DAC_MspInit+0x98>)
 8001176:	f002 ff3b 	bl	8003ff0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	2036      	movs	r0, #54	; 0x36
 8001180:	f002 f942 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001184:	2036      	movs	r0, #54	; 0x36
 8001186:	f002 f959 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40007400 	.word	0x40007400
 8001198:	58024400 	.word	0x58024400
 800119c:	58020000 	.word	0x58020000

080011a0 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_DTS_MspInit+0x3c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10e      	bne.n	80011d0 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <HAL_DTS_MspInit+0x40>)
 80011b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011b8:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_DTS_MspInit+0x40>)
 80011ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_DTS_MspInit+0x40>)
 80011c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	58006800 	.word	0x58006800
 80011e0:	58024400 	.word	0x58024400

080011e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b0b8      	sub	sp, #224	; 0xe0
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	22b8      	movs	r2, #184	; 0xb8
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f00f ffc3 	bl	8011190 <memset>
  if(hfdcan->Instance==FDCAN1)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_FDCAN_MspInit+0xc4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d145      	bne.n	80012a0 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001214:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001224:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fc5e 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8001236:	f7ff fe91 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 800123c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 8001242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001246:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 800124c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 800125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001268:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_FDCAN_MspInit+0xc8>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001276:	2303      	movs	r3, #3
 8001278:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800128e:	2309      	movs	r3, #9
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001294:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_FDCAN_MspInit+0xcc>)
 800129c:	f002 fea8 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80012a0:	bf00      	nop
 80012a2:	37e0      	adds	r7, #224	; 0xe0
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	4000a000 	.word	0x4000a000
 80012ac:	58024400 	.word	0x58024400
 80012b0:	58020c00 	.word	0x58020c00

080012b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0be      	sub	sp, #248	; 0xf8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d0:	22b8      	movs	r2, #184	; 0xb8
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00f ff5b 	bl	8011190 <memset>
  if(hi2c->Instance==I2C2)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a86      	ldr	r2, [pc, #536]	; (80014f8 <HAL_I2C_MspInit+0x244>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d147      	bne.n	8001374 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012e4:	f04f 0208 	mov.w	r2, #8
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 fbf6 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001306:	f7ff fe29 	bl	8000f5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001310:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_I2C_MspInit+0x248>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001328:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800132c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001342:	2304      	movs	r3, #4
 8001344:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800134c:	4619      	mov	r1, r3
 800134e:	486c      	ldr	r0, [pc, #432]	; (8001500 <HAL_I2C_MspInit+0x24c>)
 8001350:	f002 fe4e 	bl	8003ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <HAL_I2C_MspInit+0x248>)
 8001356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135a:	4a68      	ldr	r2, [pc, #416]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800135c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001360:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_I2C_MspInit+0x248>)
 8001366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	623b      	str	r3, [r7, #32]
 8001370:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001372:	e0bd      	b.n	80014f0 <HAL_I2C_MspInit+0x23c>
  else if(hi2c->Instance==I2C3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a62      	ldr	r2, [pc, #392]	; (8001504 <HAL_I2C_MspInit+0x250>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d16c      	bne.n	8001458 <HAL_I2C_MspInit+0x1a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800137e:	f04f 0208 	mov.w	r2, #8
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800138a:	2300      	movs	r3, #0
 800138c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001394:	4618      	mov	r0, r3
 8001396:	f005 fba9 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80013a0:	f7ff fddc 	bl	8000f5c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a4:	4b55      	ldr	r3, [pc, #340]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e8:	2312      	movs	r3, #18
 80013ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013fa:	2304      	movs	r3, #4
 80013fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001400:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001404:	4619      	mov	r1, r3
 8001406:	4840      	ldr	r0, [pc, #256]	; (8001508 <HAL_I2C_MspInit+0x254>)
 8001408:	f002 fdf2 	bl	8003ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800140c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001410:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001426:	2304      	movs	r3, #4
 8001428:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001430:	4619      	mov	r1, r3
 8001432:	4836      	ldr	r0, [pc, #216]	; (800150c <HAL_I2C_MspInit+0x258>)
 8001434:	f002 fddc 	bl	8003ff0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800143a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143e:	4a2f      	ldr	r2, [pc, #188]	; (80014fc <HAL_I2C_MspInit+0x248>)
 8001440:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800144a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
}
 8001456:	e04b      	b.n	80014f0 <HAL_I2C_MspInit+0x23c>
  else if(hi2c->Instance==I2C4)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <HAL_I2C_MspInit+0x25c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d146      	bne.n	80014f0 <HAL_I2C_MspInit+0x23c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001462:	f04f 0210 	mov.w	r2, #16
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fb37 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2C_MspInit+0x1d4>
      Error_Handler();
 8001484:	f7ff fd6a 	bl	8000f5c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <HAL_I2C_MspInit+0x248>)
 8001490:	f043 0320 	orr.w	r3, r3, #32
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_I2C_MspInit+0x248>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	f003 0320 	and.w	r3, r3, #32
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80014a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80014aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ae:	2312      	movs	r3, #18
 80014b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014ca:	4619      	mov	r1, r3
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <HAL_I2C_MspInit+0x260>)
 80014ce:	f002 fd8f 	bl	8003ff0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80014d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d8:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80014da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_I2C_MspInit+0x248>)
 80014e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	bf00      	nop
 80014f2:	37f8      	adds	r7, #248	; 0xf8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40005800 	.word	0x40005800
 80014fc:	58024400 	.word	0x58024400
 8001500:	58020400 	.word	0x58020400
 8001504:	40005c00 	.word	0x40005c00
 8001508:	58020800 	.word	0x58020800
 800150c:	58020000 	.word	0x58020000
 8001510:	58001c00 	.word	0x58001c00
 8001514:	58021400 	.word	0x58021400

08001518 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0b8      	sub	sp, #224	; 0xe0
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	22b8      	movs	r2, #184	; 0xb8
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f00f fe29 	bl	8011190 <memset>
  if(hspi->Instance==SPI4)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_SPI_MspInit+0xc4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d145      	bne.n	80015d4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fac5 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001568:	f7ff fcf8 	bl	8000f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800156c:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 800156e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 8001574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 800157e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <HAL_SPI_MspInit+0xc8>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    PE4     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80015a8:	f247 0310 	movw	r3, #28688	; 0x7010
 80015ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015c2:	2305      	movs	r3, #5
 80015c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_SPI_MspInit+0xcc>)
 80015d0:	f002 fd0e 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	37e0      	adds	r7, #224	; 0xe0
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40013400 	.word	0x40013400
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58021000 	.word	0x58021000

080015e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <HAL_TIM_PWM_MspInit+0x90>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d10f      	bne.n	800161a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 80015fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001600:	4a1e      	ldr	r2, [pc, #120]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 800160c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001618:	e028      	b.n	800166c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001622:	d10f      	bne.n	8001644 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
}
 8001642:	e013      	b.n	800166c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM12)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <HAL_TIM_PWM_MspInit+0x98>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10e      	bne.n	800166c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800164e:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001654:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_TIM_PWM_MspInit+0x94>)
 8001660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	bf00      	nop
 800166e:	371c      	adds	r7, #28
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	58024400 	.word	0x58024400
 8001680:	40001800 	.word	0x40001800

08001684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_TIM_MspPostInit+0x100>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d120      	bne.n	80016e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a6:	4b38      	ldr	r3, [pc, #224]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	4a36      	ldr	r2, [pc, #216]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 80016ae:	f043 0310 	orr.w	r3, r3, #16
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80016c4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	482a      	ldr	r0, [pc, #168]	; (800178c <HAL_TIM_MspPostInit+0x108>)
 80016e2:	f002 fc85 	bl	8003ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80016e6:	e049      	b.n	800177c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f0:	d11f      	bne.n	8001732 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b25      	ldr	r3, [pc, #148]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001710:	2303      	movs	r3, #3
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4819      	ldr	r0, [pc, #100]	; (8001790 <HAL_TIM_MspPostInit+0x10c>)
 800172c:	f002 fc60 	bl	8003ff0 <HAL_GPIO_Init>
}
 8001730:	e024      	b.n	800177c <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM12)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a17      	ldr	r2, [pc, #92]	; (8001794 <HAL_TIM_MspPostInit+0x110>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d11f      	bne.n	800177c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	4a11      	ldr	r2, [pc, #68]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_TIM_MspPostInit+0x104>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800175a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800176c:	2302      	movs	r3, #2
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <HAL_TIM_MspPostInit+0x114>)
 8001778:	f002 fc3a 	bl	8003ff0 <HAL_GPIO_Init>
}
 800177c:	bf00      	nop
 800177e:	3728      	adds	r7, #40	; 0x28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40010000 	.word	0x40010000
 8001788:	58024400 	.word	0x58024400
 800178c:	58021000 	.word	0x58021000
 8001790:	58020000 	.word	0x58020000
 8001794:	40001800 	.word	0x40001800
 8001798:	58020400 	.word	0x58020400

0800179c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b090      	sub	sp, #64	; 0x40
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	d827      	bhi.n	80017fa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017aa:	2200      	movs	r2, #0
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	2036      	movs	r0, #54	; 0x36
 80017b0:	f001 fe2a 	bl	8003408 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b4:	2036      	movs	r0, #54	; 0x36
 80017b6:	f001 fe41 	bl	800343c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017ba:	4a29      	ldr	r2, [pc, #164]	; (8001860 <HAL_InitTick+0xc4>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_InitTick+0xc8>)
 80017c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c6:	4a27      	ldr	r2, [pc, #156]	; (8001864 <HAL_InitTick+0xc8>)
 80017c8:	f043 0310 	orr.w	r3, r3, #16
 80017cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_InitTick+0xc8>)
 80017d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017de:	f107 0210 	add.w	r2, r7, #16
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	4611      	mov	r1, r2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f005 f93d 	bl	8006a68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d106      	bne.n	8001806 <HAL_InitTick+0x6a>
 80017f8:	e001      	b.n	80017fe <HAL_InitTick+0x62>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e02b      	b.n	8001856 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fe:	f005 f91d 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 8001802:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001804:	e004      	b.n	8001810 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001806:	f005 f919 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <HAL_InitTick+0xcc>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	3b01      	subs	r3, #1
 800181c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_InitTick+0xd0>)
 8001820:	4a13      	ldr	r2, [pc, #76]	; (8001870 <HAL_InitTick+0xd4>)
 8001822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0xd0>)
 8001826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800182c:	4a0f      	ldr	r2, [pc, #60]	; (800186c <HAL_InitTick+0xd0>)
 800182e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001830:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_InitTick+0xd0>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <HAL_InitTick+0xd0>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800183e:	480b      	ldr	r0, [pc, #44]	; (800186c <HAL_InitTick+0xd0>)
 8001840:	f007 fe79 	bl	8009536 <HAL_TIM_Base_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d104      	bne.n	8001854 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800184a:	4808      	ldr	r0, [pc, #32]	; (800186c <HAL_InitTick+0xd0>)
 800184c:	f007 fed4 	bl	80095f8 <HAL_TIM_Base_Start_IT>
 8001850:	4603      	mov	r3, r0
 8001852:	e000      	b.n	8001856 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	3740      	adds	r7, #64	; 0x40
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	24000008 	.word	0x24000008
 8001864:	58024400 	.word	0x58024400
 8001868:	431bde83 	.word	0x431bde83
 800186c:	240005a8 	.word	0x240005a8
 8001870:	40001000 	.word	0x40001000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <TIM6_DAC_IRQHandler+0x20>)
 80018a6:	791b      	ldrb	r3, [r3, #4]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <TIM6_DAC_IRQHandler+0x20>)
 80018b0:	f001 fdf4 	bl	800349c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4803      	ldr	r0, [pc, #12]	; (80018c4 <TIM6_DAC_IRQHandler+0x24>)
 80018b6:	f007 ff7c 	bl	80097b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	24000264 	.word	0x24000264
 80018c4:	240005a8 	.word	0x240005a8

080018c8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <OTG_HS_IRQHandler+0x10>)
 80018ce:	f002 ffd1 	bl	8004874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	240064e8 	.word	0x240064e8

080018dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018e0:	4b32      	ldr	r3, [pc, #200]	; (80019ac <SystemInit+0xd0>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	4a31      	ldr	r2, [pc, #196]	; (80019ac <SystemInit+0xd0>)
 80018e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018f0:	4b2f      	ldr	r3, [pc, #188]	; (80019b0 <SystemInit+0xd4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	2b06      	cmp	r3, #6
 80018fa:	d807      	bhi.n	800190c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018fc:	4b2c      	ldr	r3, [pc, #176]	; (80019b0 <SystemInit+0xd4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	4a2a      	ldr	r2, [pc, #168]	; (80019b0 <SystemInit+0xd4>)
 8001906:	f043 0307 	orr.w	r3, r3, #7
 800190a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800190c:	4b29      	ldr	r3, [pc, #164]	; (80019b4 <SystemInit+0xd8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <SystemInit+0xd8>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <SystemInit+0xd8>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <SystemInit+0xd8>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4924      	ldr	r1, [pc, #144]	; (80019b4 <SystemInit+0xd8>)
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <SystemInit+0xdc>)
 8001926:	4013      	ands	r3, r2
 8001928:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <SystemInit+0xd4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <SystemInit+0xd4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 030f 	bic.w	r3, r3, #15
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <SystemInit+0xd4>)
 8001940:	f043 0307 	orr.w	r3, r3, #7
 8001944:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <SystemInit+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <SystemInit+0xd8>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001952:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <SystemInit+0xd8>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <SystemInit+0xd8>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <SystemInit+0xe0>)
 800195c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <SystemInit+0xd8>)
 8001960:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <SystemInit+0xe4>)
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <SystemInit+0xd8>)
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <SystemInit+0xe8>)
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SystemInit+0xd8>)
 800196c:	2200      	movs	r2, #0
 800196e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <SystemInit+0xd8>)
 8001972:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <SystemInit+0xe8>)
 8001974:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SystemInit+0xd8>)
 8001978:	2200      	movs	r2, #0
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <SystemInit+0xd8>)
 800197e:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <SystemInit+0xe8>)
 8001980:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001982:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <SystemInit+0xd8>)
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <SystemInit+0xd8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <SystemInit+0xd8>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <SystemInit+0xd8>)
 8001996:	2200      	movs	r2, #0
 8001998:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <SystemInit+0xec>)
 800199c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80019a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	52002000 	.word	0x52002000
 80019b4:	58024400 	.word	0x58024400
 80019b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80019bc:	02020200 	.word	0x02020200
 80019c0:	01ff0000 	.word	0x01ff0000
 80019c4:	01010280 	.word	0x01010280
 80019c8:	52004000 	.word	0x52004000

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019d0:	f7ff ff84 	bl	80018dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	; (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	; (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019fa:	f00f fb95 	bl	8011128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7fe fc87 	bl	8000310 <main>
  bx  lr
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001a08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a0c:	24000168 	.word	0x24000168
  ldr r2, =_sidata
 8001a10:	08011490 	.word	0x08011490
  ldr r2, =_sbss
 8001a14:	24000168 	.word	0x24000168
  ldr r4, =_ebss
 8001a18:	24006c1c 	.word	0x24006c1c

08001a1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC3_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a26:	2003      	movs	r0, #3
 8001a28:	f001 fce3 	bl	80033f2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001a2c:	f004 fe5c 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_Init+0x68>)
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	0a1b      	lsrs	r3, r3, #8
 8001a38:	f003 030f 	and.w	r3, r3, #15
 8001a3c:	4913      	ldr	r1, [pc, #76]	; (8001a8c <HAL_Init+0x6c>)
 8001a3e:	5ccb      	ldrb	r3, [r1, r3]
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	fa22 f303 	lsr.w	r3, r2, r3
 8001a48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001a4a:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <HAL_Init+0x68>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <HAL_Init+0x6c>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_Init+0x70>)
 8001a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <HAL_Init+0x74>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f7ff fe96 	bl	800179c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e002      	b.n	8001a80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a7a:	f7ff fa75 	bl	8000f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	58024400 	.word	0x58024400
 8001a8c:	08011418 	.word	0x08011418
 8001a90:	24000004 	.word	0x24000004
 8001a94:	24000000 	.word	0x24000000

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	2400000c 	.word	0x2400000c
 8001abc:	240005f4 	.word	0x240005f4

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	240005f4 	.word	0x240005f4

08001ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ffee 	bl	8001ac0 <HAL_GetTick>
 8001ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d005      	beq.n	8001afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af2:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <HAL_Delay+0x44>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001afe:	bf00      	nop
 8001b00:	f7ff ffde 	bl	8001ac0 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d8f7      	bhi.n	8001b00 <HAL_Delay+0x28>
  {
  }
}
 8001b10:	bf00      	nop
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2400000c 	.word	0x2400000c

08001b20 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.5 V.
  *                                                This requires VDDA equal to or higher than 1.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	58003c00 	.word	0x58003c00

08001b48 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 0202 	bic.w	r2, r3, #2
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	58003c00 	.word	0x58003c00

08001b70 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001b76:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b82:	f7ff ff9d 	bl	8001ac0 <HAL_GetTick>
 8001b86:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001b88:	e008      	b.n	8001b9c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001b8a:	f7ff ff99 	bl	8001ac0 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b0a      	cmp	r3, #10
 8001b96:	d901      	bls.n	8001b9c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e006      	b.n	8001baa <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0308 	and.w	r3, r3, #8
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0f0      	beq.n	8001b8a <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58003c00 	.word	0x58003c00

08001bb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
 8001c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3360      	adds	r3, #96	; 0x60
 8001c32:	461a      	mov	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <LL_ADC_SetOffset+0x60>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10b      	bne.n	8001c5c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c5a:	e00b      	b.n	8001c74 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	58026000 	.word	0x58026000

08001c84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3360      	adds	r3, #96	; 0x60
 8001c92:	461a      	mov	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	611a      	str	r2, [r3, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d00e      	beq.n	8001d16 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3360      	adds	r3, #96	; 0x60
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
  }
}
 8001d16:	bf00      	nop
 8001d18:	371c      	adds	r7, #28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	58026000 	.word	0x58026000

08001d28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <LL_ADC_SetOffsetSaturation+0x40>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10e      	bne.n	8001d5a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3360      	adds	r3, #96	; 0x60
 8001d40:	461a      	mov	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	371c      	adds	r7, #28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	58026000 	.word	0x58026000

08001d6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <LL_ADC_SetOffsetSign+0x40>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d10e      	bne.n	8001d9e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3360      	adds	r3, #96	; 0x60
 8001d84:	461a      	mov	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001d9e:	bf00      	nop
 8001da0:	371c      	adds	r7, #28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	58026000 	.word	0x58026000

08001db0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b087      	sub	sp, #28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3360      	adds	r3, #96	; 0x60
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <LL_ADC_SetOffsetState+0x50>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001de2:	e007      	b.n	8001df4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	601a      	str	r2, [r3, #0]
}
 8001df4:	bf00      	nop
 8001df6:	371c      	adds	r7, #28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	58026000 	.word	0x58026000

08001e04 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3330      	adds	r3, #48	; 0x30
 8001e14:	461a      	mov	r2, r3
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	4413      	add	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	211f      	movs	r1, #31
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	f003 011f 	and.w	r1, r3, #31
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e50:	bf00      	nop
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3314      	adds	r3, #20
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0e5b      	lsrs	r3, r3, #25
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0d1b      	lsrs	r3, r3, #20
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2107      	movs	r1, #7
 8001e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	401a      	ands	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	0d1b      	lsrs	r3, r3, #20
 8001e96:	f003 031f 	and.w	r3, r3, #31
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ea6:	bf00      	nop
 8001ea8:	371c      	adds	r7, #28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d115      	bne.n	8001ef4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0318 	and.w	r3, r3, #24
 8001ede:	4914      	ldr	r1, [pc, #80]	; (8001f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001ee0:	40d9      	lsrs	r1, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eea:	431a      	orrs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001ef2:	e014      	b.n	8001f1e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f00:	43db      	mvns	r3, r3
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f003 0318 	and.w	r3, r3, #24
 8001f0a:	4909      	ldr	r1, [pc, #36]	; (8001f30 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001f0c:	40d9      	lsrs	r1, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	400b      	ands	r3, r1
 8001f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	58026000 	.word	0x58026000
 8001f30:	000fffff 	.word	0x000fffff

08001f34 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6093      	str	r3, [r2, #8]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	5fffffc0 	.word	0x5fffffc0

08001f58 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f6c:	d101      	bne.n	8001f72 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	6fffffc0 	.word	0x6fffffc0

08001fa8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fbc:	d101      	bne.n	8001fc2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <LL_ADC_IsEnabled+0x18>
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e000      	b.n	8001fea <LL_ADC_IsEnabled+0x1a>
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d101      	bne.n	800200e <LL_ADC_REG_IsConversionOngoing+0x18>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b08      	cmp	r3, #8
 800202e:	d101      	bne.n	8002034 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
	...

08002044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002050:	2300      	movs	r3, #0
 8002052:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e1ee      	b.n	800243c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7fe ffb1 	bl	8000fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff67 	bl	8001f58 <LL_ADC_IsDeepPowerDownEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff4d 	bl	8001f34 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff ff82 	bl	8001fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d114      	bne.n	80020d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ff66 	bl	8001f80 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020b4:	4b8e      	ldr	r3, [pc, #568]	; (80022f0 <HAL_ADC_Init+0x2ac>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	099b      	lsrs	r3, r3, #6
 80020ba:	4a8e      	ldr	r2, [pc, #568]	; (80022f4 <HAL_ADC_Init+0x2b0>)
 80020bc:	fba2 2303 	umull	r2, r3, r2, r3
 80020c0:	099b      	lsrs	r3, r3, #6
 80020c2:	3301      	adds	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020c6:	e002      	b.n	80020ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f9      	bne.n	80020c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff65 	bl	8001fa8 <LL_ADC_IsInternalRegulatorEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10d      	bne.n	8002100 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff76 	bl	8001ff6 <LL_ADC_REG_IsConversionOngoing>
 800210a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	f040 8188 	bne.w	800242a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8184 	bne.w	800242a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800212a:	f043 0202 	orr.w	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff ff4a 	bl	8001fd0 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d136      	bne.n	80021b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6c      	ldr	r2, [pc, #432]	; (80022f8 <HAL_ADC_Init+0x2b4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d004      	beq.n	8002156 <HAL_ADC_Init+0x112>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a6a      	ldr	r2, [pc, #424]	; (80022fc <HAL_ADC_Init+0x2b8>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10e      	bne.n	8002174 <HAL_ADC_Init+0x130>
 8002156:	4868      	ldr	r0, [pc, #416]	; (80022f8 <HAL_ADC_Init+0x2b4>)
 8002158:	f7ff ff3a 	bl	8001fd0 <LL_ADC_IsEnabled>
 800215c:	4604      	mov	r4, r0
 800215e:	4867      	ldr	r0, [pc, #412]	; (80022fc <HAL_ADC_Init+0x2b8>)
 8002160:	f7ff ff36 	bl	8001fd0 <LL_ADC_IsEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	4323      	orrs	r3, r4
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	e008      	b.n	8002186 <HAL_ADC_Init+0x142>
 8002174:	4862      	ldr	r0, [pc, #392]	; (8002300 <HAL_ADC_Init+0x2bc>)
 8002176:	f7ff ff2b 	bl	8001fd0 <LL_ADC_IsEnabled>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d012      	beq.n	80021b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a5a      	ldr	r2, [pc, #360]	; (80022f8 <HAL_ADC_Init+0x2b4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_ADC_Init+0x15a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_ADC_Init+0x2b8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_Init+0x15e>
 800219e:	4a59      	ldr	r2, [pc, #356]	; (8002304 <HAL_ADC_Init+0x2c0>)
 80021a0:	e000      	b.n	80021a4 <HAL_ADC_Init+0x160>
 80021a2:	4a59      	ldr	r2, [pc, #356]	; (8002308 <HAL_ADC_Init+0x2c4>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7ff fd04 	bl	8001bb8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_ADC_Init+0x2bc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d129      	bne.n	800220e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7e5b      	ldrb	r3, [r3, #25]
 80021be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80021c4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80021ca:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d013      	beq.n	80021fc <HAL_ADC_Init+0x1b8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d00d      	beq.n	80021f8 <HAL_ADC_Init+0x1b4>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b1c      	cmp	r3, #28
 80021e2:	d007      	beq.n	80021f4 <HAL_ADC_Init+0x1b0>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_Init+0x1ac>
 80021ec:	2318      	movs	r3, #24
 80021ee:	e006      	b.n	80021fe <HAL_ADC_Init+0x1ba>
 80021f0:	2300      	movs	r3, #0
 80021f2:	e004      	b.n	80021fe <HAL_ADC_Init+0x1ba>
 80021f4:	2310      	movs	r3, #16
 80021f6:	e002      	b.n	80021fe <HAL_ADC_Init+0x1ba>
 80021f8:	2308      	movs	r3, #8
 80021fa:	e000      	b.n	80021fe <HAL_ADC_Init+0x1ba>
 80021fc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80021fe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002206:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e00e      	b.n	800222c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7e5b      	ldrb	r3, [r3, #25]
 8002212:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002218:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800221e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002226:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	3b01      	subs	r3, #1
 800223c:	045b      	lsls	r3, r3, #17
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	2b00      	cmp	r3, #0
 800224a:	d009      	beq.n	8002260 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a26      	ldr	r2, [pc, #152]	; (8002300 <HAL_ADC_Init+0x2bc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d115      	bne.n	8002296 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	4b26      	ldr	r3, [pc, #152]	; (800230c <HAL_ADC_Init+0x2c8>)
 8002272:	4013      	ands	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	69b9      	ldr	r1, [r7, #24]
 800227a:	430b      	orrs	r3, r1
 800227c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	e009      	b.n	80022aa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_ADC_Init+0x2cc>)
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	430b      	orrs	r3, r1
 80022a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fea1 	bl	8001ff6 <LL_ADC_REG_IsConversionOngoing>
 80022b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff feae 	bl	800201c <LL_ADC_INJ_IsConversionOngoing>
 80022c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 808e 	bne.w	80023e6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f040 808a 	bne.w	80023e6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <HAL_ADC_Init+0x2bc>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d11b      	bne.n	8002314 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7e1b      	ldrb	r3, [r3, #24]
 80022e0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	e018      	b.n	8002322 <HAL_ADC_Init+0x2de>
 80022f0:	24000000 	.word	0x24000000
 80022f4:	053e2d63 	.word	0x053e2d63
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40022100 	.word	0x40022100
 8002300:	58026000 	.word	0x58026000
 8002304:	40022300 	.word	0x40022300
 8002308:	58026300 	.word	0x58026300
 800230c:	fff04007 	.word	0xfff04007
 8002310:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7e1b      	ldrb	r3, [r3, #24]
 8002318:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_ADC_Init+0x400>)
 800232a:	4013      	ands	r3, r2
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	69b9      	ldr	r1, [r7, #24]
 8002332:	430b      	orrs	r3, r1
 8002334:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800233c:	2b01      	cmp	r3, #1
 800233e:	d137      	bne.n	80023b0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a3f      	ldr	r2, [pc, #252]	; (8002448 <HAL_ADC_Init+0x404>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d116      	bne.n	800237e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <HAL_ADC_Init+0x408>)
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002362:	4311      	orrs	r1, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002368:	4311      	orrs	r1, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800236e:	430a      	orrs	r2, r1
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	611a      	str	r2, [r3, #16]
 800237c:	e020      	b.n	80023c0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_ADC_Init+0x40c>)
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800238c:	3a01      	subs	r2, #1
 800238e:	0411      	lsls	r1, r2, #16
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002394:	4311      	orrs	r1, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800239a:	4311      	orrs	r1, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80023a0:	430a      	orrs	r2, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
 80023ae:	e007      	b.n	80023c0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1b      	ldr	r2, [pc, #108]	; (8002448 <HAL_ADC_Init+0x404>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d002      	beq.n	80023e6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fd63 	bl	8002eac <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10c      	bne.n	8002408 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	f023 010f 	bic.w	r1, r3, #15
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	1e5a      	subs	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
 8002406:	e007      	b.n	8002418 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 020f 	bic.w	r2, r2, #15
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241c:	f023 0303 	bic.w	r3, r3, #3
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	661a      	str	r2, [r3, #96]	; 0x60
 8002428:	e007      	b.n	800243a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242e:	f043 0210 	orr.w	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800243a:	7ffb      	ldrb	r3, [r7, #31]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3724      	adds	r7, #36	; 0x24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	ffffbffc 	.word	0xffffbffc
 8002448:	58026000 	.word	0x58026000
 800244c:	fc00f81f 	.word	0xfc00f81f
 8002450:	fc00f81e 	.word	0xfc00f81e

08002454 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b0b9      	sub	sp, #228	; 0xe4
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800246e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4aa9      	ldr	r2, [pc, #676]	; (800271c <HAL_ADC_ConfigChannel+0x2c8>)
 8002476:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d102      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x34>
 8002482:	2302      	movs	r3, #2
 8002484:	f000 bcfa 	b.w	8002e7c <HAL_ADC_ConfigChannel+0xa28>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fdae 	bl	8001ff6 <LL_ADC_REG_IsConversionOngoing>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	f040 84de 	bne.w	8002e5e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a9e      	ldr	r2, [pc, #632]	; (8002720 <HAL_ADC_ConfigChannel+0x2cc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d033      	beq.n	8002514 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x76>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0e9b      	lsrs	r3, r3, #26
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	e01d      	b.n	8002506 <HAL_ADC_ConfigChannel+0xb2>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80024ee:	2320      	movs	r3, #32
 80024f0:	e004      	b.n	80024fc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80024f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	2201      	movs	r2, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	69d1      	ldr	r1, [r2, #28]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6859      	ldr	r1, [r3, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	f7ff fc6f 	bl	8001e04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fd63 	bl	8001ff6 <LL_ADC_REG_IsConversionOngoing>
 8002530:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd6f 	bl	800201c <LL_ADC_INJ_IsConversionOngoing>
 800253e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 8270 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002550:	2b00      	cmp	r3, #0
 8002552:	f040 826b 	bne.w	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	461a      	mov	r2, r3
 8002564:	f7ff fc7a 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6c      	ldr	r2, [pc, #432]	; (8002720 <HAL_ADC_ConfigChannel+0x2cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10d      	bne.n	800258e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800258c:	e032      	b.n	80025f4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800258e:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_ADC_ConfigChannel+0x2d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800259a:	d10b      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x160>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	695a      	ldr	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	e01d      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x19c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_ADC_ConfigChannel+0x186>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	e00a      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x19c>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	695a      	ldr	r2, [r3, #20]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d048      	beq.n	800268e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6919      	ldr	r1, [r3, #16]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800260c:	f7ff fb08 	bl	8001c20 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a42      	ldr	r2, [pc, #264]	; (8002720 <HAL_ADC_ConfigChannel+0x2cc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d119      	bne.n	800264e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6919      	ldr	r1, [r3, #16]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	461a      	mov	r2, r3
 8002628:	f7ff fba0 	bl	8001d6c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	6919      	ldr	r1, [r3, #16]
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f893 3020 	ldrb.w	r3, [r3, #32]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d102      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x1f0>
 800263e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002642:	e000      	b.n	8002646 <HAL_ADC_ConfigChannel+0x1f2>
 8002644:	2300      	movs	r3, #0
 8002646:	461a      	mov	r2, r3
 8002648:	f7ff fb6e 	bl	8001d28 <LL_ADC_SetOffsetSaturation>
 800264c:	e1ee      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6919      	ldr	r1, [r3, #16]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800265c:	2b01      	cmp	r3, #1
 800265e:	d102      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x212>
 8002660:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002664:	e000      	b.n	8002668 <HAL_ADC_ConfigChannel+0x214>
 8002666:	2300      	movs	r3, #0
 8002668:	461a      	mov	r2, r3
 800266a:	f7ff fb3b 	bl	8001ce4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6919      	ldr	r1, [r3, #16]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7e1b      	ldrb	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x230>
 800267e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002682:	e000      	b.n	8002686 <HAL_ADC_ConfigChannel+0x232>
 8002684:	2300      	movs	r3, #0
 8002686:	461a      	mov	r2, r3
 8002688:	f7ff fb12 	bl	8001cb0 <LL_ADC_SetDataRightShift>
 800268c:	e1ce      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_ADC_ConfigChannel+0x2cc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	f040 8181 	bne.w	800299c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff faef 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10a      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x272>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff fae4 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80026bc:	4603      	mov	r3, r0
 80026be:	0e9b      	lsrs	r3, r3, #26
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	e01e      	b.n	8002704 <HAL_ADC_ConfigChannel+0x2b0>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2100      	movs	r1, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fad9 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80026e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80026e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80026ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80026f4:	2320      	movs	r3, #32
 80026f6:	e004      	b.n	8002702 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80026f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80026fc:	fab3 f383 	clz	r3, r3
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10b      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x2d4>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	0e9b      	lsrs	r3, r3, #26
 8002716:	f003 031f 	and.w	r3, r3, #31
 800271a:	e01e      	b.n	800275a <HAL_ADC_ConfigChannel+0x306>
 800271c:	47ff0000 	.word	0x47ff0000
 8002720:	58026000 	.word	0x58026000
 8002724:	5c001000 	.word	0x5c001000
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800273c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002744:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800274c:	2320      	movs	r3, #32
 800274e:	e004      	b.n	800275a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	429a      	cmp	r2, r3
 800275c:	d106      	bne.n	800276c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fb22 	bl	8001db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fa86 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x344>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fa7b 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	0e9b      	lsrs	r3, r3, #26
 8002792:	f003 021f 	and.w	r2, r3, #31
 8002796:	e01e      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x382>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fa70 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80027b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80027be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80027c6:	2320      	movs	r3, #32
 80027c8:	e004      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80027ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x39a>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	e018      	b.n	8002820 <HAL_ADC_ConfigChannel+0x3cc>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002802:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800280a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e004      	b.n	8002820 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002816:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fabf 	bl	8001db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2102      	movs	r1, #2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa23 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 800283e:	4603      	mov	r3, r0
 8002840:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <HAL_ADC_ConfigChannel+0x40a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa18 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	0e9b      	lsrs	r3, r3, #26
 8002858:	f003 021f 	and.w	r2, r3, #31
 800285c:	e01e      	b.n	800289c <HAL_ADC_ConfigChannel+0x448>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2102      	movs	r1, #2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fa0d 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 800286a:	4603      	mov	r3, r0
 800286c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800287c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800288c:	2320      	movs	r3, #32
 800288e:	e004      	b.n	800289a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_ConfigChannel+0x460>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	0e9b      	lsrs	r3, r3, #26
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	e014      	b.n	80028de <HAL_ADC_ConfigChannel+0x48a>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80028c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80028c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80028d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa60 	bl	8001db0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2103      	movs	r1, #3
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff f9c4 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x4c8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2103      	movs	r1, #3
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f9b9 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	e017      	b.n	800294c <HAL_ADC_ConfigChannel+0x4f8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2103      	movs	r1, #3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f9ae 	bl	8001c84 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e003      	b.n	800294a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x510>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	e011      	b.n	8002988 <HAL_ADC_ConfigChannel+0x534>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002974:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800297c:	2320      	movs	r3, #32
 800297e:	e003      	b.n	8002988 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	429a      	cmp	r2, r3
 800298a:	d14f      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2200      	movs	r2, #0
 8002992:	2103      	movs	r1, #3
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fa0b 	bl	8001db0 <LL_ADC_SetOffsetState>
 800299a:	e047      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	069b      	lsls	r3, r3, #26
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d107      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029be:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	069b      	lsls	r3, r3, #26
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80029e2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d107      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a06:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d107      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a2a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff facd 	bl	8001fd0 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f040 8219 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6819      	ldr	r1, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff fa32 	bl	8001eb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4aa1      	ldr	r2, [pc, #644]	; (8002cdc <HAL_ADC_ConfigChannel+0x888>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	f040 812e 	bne.w	8002cb8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x630>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	0e9b      	lsrs	r3, r3, #26
 8002a72:	3301      	adds	r3, #1
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	bf94      	ite	ls
 8002a7c:	2301      	movls	r3, #1
 8002a7e:	2300      	movhi	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e019      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x664>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002a9c:	2320      	movs	r3, #32
 8002a9e:	e003      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	bf94      	ite	ls
 8002ab2:	2301      	movls	r3, #1
 8002ab4:	2300      	movhi	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d079      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d107      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x684>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	069b      	lsls	r3, r3, #26
 8002ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ad6:	e015      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x6b0>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae0:	fa93 f3a3 	rbit	r3, r3
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002aea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002af0:	2320      	movs	r3, #32
 8002af2:	e003      	b.n	8002afc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	fab3 f383 	clz	r3, r3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	069b      	lsls	r3, r3, #26
 8002b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x6d0>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	e017      	b.n	8002b54 <HAL_ADC_ConfigChannel+0x700>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	e003      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	2101      	movs	r1, #1
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	ea42 0103 	orr.w	r1, r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_ADC_ConfigChannel+0x726>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	0e9b      	lsrs	r3, r3, #26
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f003 021f 	and.w	r2, r3, #31
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	051b      	lsls	r3, r3, #20
 8002b78:	e018      	b.n	8002bac <HAL_ADC_ConfigChannel+0x758>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	fa93 f3a3 	rbit	r3, r3
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e003      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	fab3 f383 	clz	r3, r3
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bac:	430b      	orrs	r3, r1
 8002bae:	e07e      	b.n	8002cae <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d107      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x778>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	069b      	lsls	r3, r3, #26
 8002bc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bca:	e015      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x7a4>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	fa93 f3a3 	rbit	r3, r3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e003      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	069b      	lsls	r3, r3, #26
 8002bf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x7c4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2101      	movs	r1, #1
 8002c12:	fa01 f303 	lsl.w	r3, r1, r3
 8002c16:	e017      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x7f4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	61bb      	str	r3, [r7, #24]
  return result;
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8002c30:	2320      	movs	r3, #32
 8002c32:	e003      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	fab3 f383 	clz	r3, r3
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2101      	movs	r1, #1
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	ea42 0103 	orr.w	r1, r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10d      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x820>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f003 021f 	and.w	r2, r3, #31
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b1e      	subs	r3, #30
 8002c6c:	051b      	lsls	r3, r3, #20
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	e01b      	b.n	8002cac <HAL_ADC_ConfigChannel+0x858>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	60fb      	str	r3, [r7, #12]
  return result;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	051b      	lsls	r3, r3, #20
 8002ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cac:	430b      	orrs	r3, r1
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	6892      	ldr	r2, [r2, #8]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f7ff f8d2 	bl	8001e5c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f280 80d7 	bge.w	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <HAL_ADC_ConfigChannel+0x88c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_ADC_ConfigChannel+0x882>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_ADC_ConfigChannel+0x890>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d10a      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x898>
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <HAL_ADC_ConfigChannel+0x894>)
 8002cd8:	e009      	b.n	8002cee <HAL_ADC_ConfigChannel+0x89a>
 8002cda:	bf00      	nop
 8002cdc:	47ff0000 	.word	0x47ff0000
 8002ce0:	40022000 	.word	0x40022000
 8002ce4:	40022100 	.word	0x40022100
 8002ce8:	40022300 	.word	0x40022300
 8002cec:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_ADC_ConfigChannel+0xa30>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff88 	bl	8001c04 <LL_ADC_GetCommonPathInternalCh>
 8002cf4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a62      	ldr	r2, [pc, #392]	; (8002e88 <HAL_ADC_ConfigChannel+0xa34>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d004      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x8b8>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a61      	ldr	r2, [pc, #388]	; (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d10e      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x8d6>
 8002d0c:	485e      	ldr	r0, [pc, #376]	; (8002e88 <HAL_ADC_ConfigChannel+0xa34>)
 8002d0e:	f7ff f95f 	bl	8001fd0 <LL_ADC_IsEnabled>
 8002d12:	4604      	mov	r4, r0
 8002d14:	485d      	ldr	r0, [pc, #372]	; (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002d16:	f7ff f95b 	bl	8001fd0 <LL_ADC_IsEnabled>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4323      	orrs	r3, r4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	e008      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x8e8>
 8002d2a:	4859      	ldr	r0, [pc, #356]	; (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d2c:	f7ff f950 	bl	8001fd0 <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 8084 	beq.w	8002e4a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a53      	ldr	r2, [pc, #332]	; (8002e94 <HAL_ADC_ConfigChannel+0xa40>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d132      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x95e>
 8002d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d12c      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a4c      	ldr	r2, [pc, #304]	; (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f040 8086 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a47      	ldr	r2, [pc, #284]	; (8002e88 <HAL_ADC_ConfigChannel+0xa34>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_ConfigChannel+0x924>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a46      	ldr	r2, [pc, #280]	; (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x928>
 8002d78:	4a47      	ldr	r2, [pc, #284]	; (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002d7a:	e000      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x92a>
 8002d7c:	4a41      	ldr	r2, [pc, #260]	; (8002e84 <HAL_ADC_ConfigChannel+0xa30>)
 8002d7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d86:	4619      	mov	r1, r3
 8002d88:	4610      	mov	r0, r2
 8002d8a:	f7fe ff28 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <HAL_ADC_ConfigChannel+0xa48>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	4a42      	ldr	r2, [pc, #264]	; (8002ea0 <HAL_ADC_ConfigChannel+0xa4c>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002da2:	e002      	b.n	8002daa <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f9      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db0:	e05e      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a3b      	ldr	r2, [pc, #236]	; (8002ea4 <HAL_ADC_ConfigChannel+0xa50>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d120      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x9aa>
 8002dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a30      	ldr	r2, [pc, #192]	; (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d14e      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <HAL_ADC_ConfigChannel+0xa34>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d004      	beq.n	8002de6 <HAL_ADC_ConfigChannel+0x992>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a2a      	ldr	r2, [pc, #168]	; (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x996>
 8002de6:	4a2c      	ldr	r2, [pc, #176]	; (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002de8:	e000      	b.n	8002dec <HAL_ADC_ConfigChannel+0x998>
 8002dea:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_ADC_ConfigChannel+0xa30>)
 8002dec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fe fef1 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfc:	e038      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a29      	ldr	r2, [pc, #164]	; (8002ea8 <HAL_ADC_ConfigChannel+0xa54>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d133      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
 8002e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d12d      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_ADC_ConfigChannel+0xa3c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d128      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_ADC_ConfigChannel+0xa34>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_ADC_ConfigChannel+0x9de>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_ADC_ConfigChannel+0xa38>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x9e2>
 8002e32:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_ADC_ConfigChannel+0xa44>)
 8002e34:	e000      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x9e4>
 8002e36:	4a13      	ldr	r2, [pc, #76]	; (8002e84 <HAL_ADC_ConfigChannel+0xa30>)
 8002e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e40:	4619      	mov	r1, r3
 8002e42:	4610      	mov	r0, r2
 8002e44:	f7fe fecb 	bl	8001bde <LL_ADC_SetCommonPathInternalCh>
 8002e48:	e012      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8002e5c:	e008      	b.n	8002e70 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e62:	f043 0220 	orr.w	r2, r3, #32
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002e78:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	37e4      	adds	r7, #228	; 0xe4
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}
 8002e84:	58026300 	.word	0x58026300
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	40022100 	.word	0x40022100
 8002e90:	58026000 	.word	0x58026000
 8002e94:	c7520000 	.word	0xc7520000
 8002e98:	40022300 	.word	0x40022300
 8002e9c:	24000000 	.word	0x24000000
 8002ea0:	053e2d63 	.word	0x053e2d63
 8002ea4:	c3210000 	.word	0xc3210000
 8002ea8:	cb840000 	.word	0xcb840000

08002eac <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6c      	ldr	r2, [pc, #432]	; (800306c <ADC_ConfigureBoostMode+0x1c0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d004      	beq.n	8002ec8 <ADC_ConfigureBoostMode+0x1c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <ADC_ConfigureBoostMode+0x1c4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d109      	bne.n	8002edc <ADC_ConfigureBoostMode+0x30>
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	; (8003074 <ADC_ConfigureBoostMode+0x1c8>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e008      	b.n	8002eee <ADC_ConfigureBoostMode+0x42>
 8002edc:	4b66      	ldr	r3, [pc, #408]	; (8003078 <ADC_ConfigureBoostMode+0x1cc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01c      	beq.n	8002f2c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002ef2:	f003 fd73 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 8002ef6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f00:	d010      	beq.n	8002f24 <ADC_ConfigureBoostMode+0x78>
 8002f02:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f06:	d873      	bhi.n	8002ff0 <ADC_ConfigureBoostMode+0x144>
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d002      	beq.n	8002f14 <ADC_ConfigureBoostMode+0x68>
 8002f0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f12:	d16d      	bne.n	8002ff0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	60fb      	str	r3, [r7, #12]
        break;
 8002f22:	e068      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	60fb      	str	r3, [r7, #12]
        break;
 8002f2a:	e064      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002f2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	f004 ff7a 	bl	8007e2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002f38:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f42:	d051      	beq.n	8002fe8 <ADC_ConfigureBoostMode+0x13c>
 8002f44:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002f48:	d854      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f4a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f4e:	d047      	beq.n	8002fe0 <ADC_ConfigureBoostMode+0x134>
 8002f50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002f54:	d84e      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f56:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f5a:	d03d      	beq.n	8002fd8 <ADC_ConfigureBoostMode+0x12c>
 8002f5c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002f60:	d848      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f66:	d033      	beq.n	8002fd0 <ADC_ConfigureBoostMode+0x124>
 8002f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f6c:	d842      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f6e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f72:	d029      	beq.n	8002fc8 <ADC_ConfigureBoostMode+0x11c>
 8002f74:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002f78:	d83c      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f7a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f7e:	d01a      	beq.n	8002fb6 <ADC_ConfigureBoostMode+0x10a>
 8002f80:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002f84:	d836      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f86:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f8a:	d014      	beq.n	8002fb6 <ADC_ConfigureBoostMode+0x10a>
 8002f8c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002f90:	d830      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f96:	d00e      	beq.n	8002fb6 <ADC_ConfigureBoostMode+0x10a>
 8002f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f9c:	d82a      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002f9e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fa2:	d008      	beq.n	8002fb6 <ADC_ConfigureBoostMode+0x10a>
 8002fa4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002fa8:	d824      	bhi.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
 8002faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fae:	d002      	beq.n	8002fb6 <ADC_ConfigureBoostMode+0x10a>
 8002fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fb4:	d11e      	bne.n	8002ff4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
        break;
 8002fc6:	e016      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	091b      	lsrs	r3, r3, #4
 8002fcc:	60fb      	str	r3, [r7, #12]
        break;
 8002fce:	e012      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	60fb      	str	r3, [r7, #12]
        break;
 8002fd6:	e00e      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	099b      	lsrs	r3, r3, #6
 8002fdc:	60fb      	str	r3, [r7, #12]
        break;
 8002fde:	e00a      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	09db      	lsrs	r3, r3, #7
 8002fe4:	60fb      	str	r3, [r7, #12]
        break;
 8002fe6:	e006      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	60fb      	str	r3, [r7, #12]
        break;
 8002fee:	e002      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002ff0:	bf00      	nop
 8002ff2:	e000      	b.n	8002ff6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ff4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a1f      	ldr	r2, [pc, #124]	; (800307c <ADC_ConfigureBoostMode+0x1d0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d808      	bhi.n	8003016 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003012:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003014:	e025      	b.n	8003062 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <ADC_ConfigureBoostMode+0x1d4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d80a      	bhi.n	8003034 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003030:	609a      	str	r2, [r3, #8]
}
 8003032:	e016      	b.n	8003062 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <ADC_ConfigureBoostMode+0x1d8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d80a      	bhi.n	8003052 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	e007      	b.n	8003062 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003060:	609a      	str	r2, [r3, #8]
}
 8003062:	bf00      	nop
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40022000 	.word	0x40022000
 8003070:	40022100 	.word	0x40022100
 8003074:	40022300 	.word	0x40022300
 8003078:	58026300 	.word	0x58026300
 800307c:	005f5e10 	.word	0x005f5e10
 8003080:	00bebc20 	.word	0x00bebc20
 8003084:	017d7840 	.word	0x017d7840

08003088 <LL_ADC_IsEnabled>:
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_REG_IsConversionOngoing>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b0a3      	sub	sp, #140	; 0x8c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0c1      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80030fe:	2300      	movs	r3, #0
 8003100:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5e      	ldr	r2, [pc, #376]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800310c:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e001      	b.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0a0      	b.n	8003276 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ffb9 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 800313c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ffb2 	bl	80030ae <LL_ADC_REG_IsConversionOngoing>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	f040 8081 	bne.w	8003254 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003152:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d17c      	bne.n	8003254 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a48      	ldr	r2, [pc, #288]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a46      	ldr	r2, [pc, #280]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800316e:	4b46      	ldr	r3, [pc, #280]	; (8003288 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003170:	e000      	b.n	8003174 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003172:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003174:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d039      	beq.n	80031f2 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800317e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	431a      	orrs	r2, r3
 800318c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800318e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a3a      	ldr	r2, [pc, #232]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a39      	ldr	r2, [pc, #228]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10e      	bne.n	80031c2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80031a4:	4836      	ldr	r0, [pc, #216]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80031a6:	f7ff ff6f 	bl	8003088 <LL_ADC_IsEnabled>
 80031aa:	4604      	mov	r4, r0
 80031ac:	4835      	ldr	r0, [pc, #212]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80031ae:	f7ff ff6b 	bl	8003088 <LL_ADC_IsEnabled>
 80031b2:	4603      	mov	r3, r0
 80031b4:	4323      	orrs	r3, r4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf0c      	ite	eq
 80031ba:	2301      	moveq	r3, #1
 80031bc:	2300      	movne	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e008      	b.n	80031d4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80031c2:	4833      	ldr	r0, [pc, #204]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80031c4:	f7ff ff60 	bl	8003088 <LL_ADC_IsEnabled>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d047      	beq.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80031de:	4013      	ands	r3, r2
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	6811      	ldr	r1, [r2, #0]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	6892      	ldr	r2, [r2, #8]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	431a      	orrs	r2, r3
 80031ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f0:	e03a      	b.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1f      	ldr	r2, [pc, #124]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10e      	bne.n	8003230 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003212:	481b      	ldr	r0, [pc, #108]	; (8003280 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003214:	f7ff ff38 	bl	8003088 <LL_ADC_IsEnabled>
 8003218:	4604      	mov	r4, r0
 800321a:	481a      	ldr	r0, [pc, #104]	; (8003284 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800321c:	f7ff ff34 	bl	8003088 <LL_ADC_IsEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	4323      	orrs	r3, r4
 8003224:	2b00      	cmp	r3, #0
 8003226:	bf0c      	ite	eq
 8003228:	2301      	moveq	r3, #1
 800322a:	2300      	movne	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e008      	b.n	8003242 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003230:	4817      	ldr	r0, [pc, #92]	; (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003232:	f7ff ff29 	bl	8003088 <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d010      	beq.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800324c:	4013      	ands	r3, r2
 800324e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003250:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003252:	e009      	b.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003266:	e000      	b.n	800326a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003272:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003276:	4618      	mov	r0, r3
 8003278:	378c      	adds	r7, #140	; 0x8c
 800327a:	46bd      	mov	sp, r7
 800327c:	bd90      	pop	{r4, r7, pc}
 800327e:	bf00      	nop
 8003280:	40022000 	.word	0x40022000
 8003284:	40022100 	.word	0x40022100
 8003288:	40022300 	.word	0x40022300
 800328c:	58026300 	.word	0x58026300
 8003290:	58026000 	.word	0x58026000
 8003294:	fffff0e0 	.word	0xfffff0e0

08003298 <__NVIC_SetPriorityGrouping>:
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032b4:	4013      	ands	r3, r2
 80032b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032c0:	4b06      	ldr	r3, [pc, #24]	; (80032dc <__NVIC_SetPriorityGrouping+0x44>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032c6:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <__NVIC_SetPriorityGrouping+0x40>)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	60d3      	str	r3, [r2, #12]
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000ed00 	.word	0xe000ed00
 80032dc:	05fa0000 	.word	0x05fa0000

080032e0 <__NVIC_GetPriorityGrouping>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <__NVIC_GetPriorityGrouping+0x18>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0a1b      	lsrs	r3, r3, #8
 80032ea:	f003 0307 	and.w	r3, r3, #7
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_EnableIRQ>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	4603      	mov	r3, r0
 8003304:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800330a:	2b00      	cmp	r3, #0
 800330c:	db0b      	blt.n	8003326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800330e:	88fb      	ldrh	r3, [r7, #6]
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4907      	ldr	r1, [pc, #28]	; (8003334 <__NVIC_EnableIRQ+0x38>)
 8003316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	2001      	movs	r0, #1
 800331e:	fa00 f202 	lsl.w	r2, r0, r2
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e100 	.word	0xe000e100

08003338 <__NVIC_SetPriority>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	6039      	str	r1, [r7, #0]
 8003342:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003348:	2b00      	cmp	r3, #0
 800334a:	db0a      	blt.n	8003362 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <__NVIC_SetPriority+0x4c>)
 8003352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	440b      	add	r3, r1
 800335c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003360:	e00a      	b.n	8003378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4908      	ldr	r1, [pc, #32]	; (8003388 <__NVIC_SetPriority+0x50>)
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3b04      	subs	r3, #4
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	440b      	add	r3, r1
 8003376:	761a      	strb	r2, [r3, #24]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000e100 	.word	0xe000e100
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <NVIC_EncodePriority>:
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f1c3 0307 	rsb	r3, r3, #7
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	bf28      	it	cs
 80033aa:	2304      	movcs	r3, #4
 80033ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d902      	bls.n	80033bc <NVIC_EncodePriority+0x30>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3b03      	subs	r3, #3
 80033ba:	e000      	b.n	80033be <NVIC_EncodePriority+0x32>
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	401a      	ands	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033d4:	f04f 31ff 	mov.w	r1, #4294967295
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa01 f303 	lsl.w	r3, r1, r3
 80033de:	43d9      	mvns	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e4:	4313      	orrs	r3, r2
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3724      	adds	r7, #36	; 0x24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ff4c 	bl	8003298 <__NVIC_SetPriorityGrouping>
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003416:	f7ff ff63 	bl	80032e0 <__NVIC_GetPriorityGrouping>
 800341a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	6978      	ldr	r0, [r7, #20]
 8003422:	f7ff ffb3 	bl	800338c <NVIC_EncodePriority>
 8003426:	4602      	mov	r2, r0
 8003428:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff ff82 	bl	8003338 <__NVIC_SetPriority>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ff56 	bl	80032fc <__NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e014      	b.n	8003494 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	791b      	ldrb	r3, [r3, #4]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d105      	bne.n	8003480 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7fd fe42 	bl	8001104 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034b2:	d120      	bne.n	80034f6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d118      	bne.n	80034f6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2204      	movs	r2, #4
 80034c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f043 0201 	orr.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f82d 	bl	8003550 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003504:	d120      	bne.n	8003548 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800350c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003514:	d118      	bne.n	8003548 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	f043 0202 	orr.w	r2, r3, #2
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003530:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003540:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f94c 	bl	80037e0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	795b      	ldrb	r3, [r3, #5]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d101      	bne.n	800357c <HAL_DAC_ConfigChannel+0x18>
 8003578:	2302      	movs	r3, #2
 800357a:	e12a      	b.n	80037d2 <HAL_DAC_ConfigChannel+0x26e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2201      	movs	r2, #1
 8003580:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2202      	movs	r2, #2
 8003586:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b04      	cmp	r3, #4
 800358e:	f040 8081 	bne.w	8003694 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003592:	f7fe fa95 	bl	8001ac0 <HAL_GetTick>
 8003596:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d140      	bne.n	8003620 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800359e:	e018      	b.n	80035d2 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035a0:	f7fe fa8e 	bl	8001ac0 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d911      	bls.n	80035d2 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b4:	4b89      	ldr	r3, [pc, #548]	; (80037dc <HAL_DAC_ConfigChannel+0x278>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f043 0208 	orr.w	r2, r3, #8
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2203      	movs	r2, #3
 80035cc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e0ff      	b.n	80037d2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035d8:	4b80      	ldr	r3, [pc, #512]	; (80037dc <HAL_DAC_ConfigChannel+0x278>)
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1df      	bne.n	80035a0 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f7fe fa79 	bl	8001ad8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	6992      	ldr	r2, [r2, #24]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
 80035f0:	e023      	b.n	800363a <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80035f2:	f7fe fa65 	bl	8001ac0 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d90f      	bls.n	8003620 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003606:	2b00      	cmp	r3, #0
 8003608:	da0a      	bge.n	8003620 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f043 0208 	orr.w	r2, r3, #8
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2203      	movs	r2, #3
 800361a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e0d8      	b.n	80037d2 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	dbe3      	blt.n	80035f2 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800362a:	2001      	movs	r0, #1
 800362c:	f7fe fa54 	bl	8001ad8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	6992      	ldr	r2, [r2, #24]
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43db      	mvns	r3, r3
 8003650:	ea02 0103 	and.w	r1, r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	21ff      	movs	r1, #255	; 0xff
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	ea02 0103 	and.w	r1, r2, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d11d      	bne.n	80036d8 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f003 0310 	and.w	r3, r3, #16
 80036aa:	221f      	movs	r2, #31
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	43db      	mvns	r3, r3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2207      	movs	r2, #7
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
 8003700:	e00f      	b.n	8003722 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d102      	bne.n	8003710 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800370a:	2301      	movs	r3, #1
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e008      	b.n	8003722 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003718:	2301      	movs	r3, #1
 800371a:	61fb      	str	r3, [r7, #28]
 800371c:	e001      	b.n	8003722 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4313      	orrs	r3, r2
 800372c:	69fa      	ldr	r2, [r7, #28]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6819      	ldr	r1, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43da      	mvns	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	400a      	ands	r2, r1
 8003768:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	f640 72fe 	movw	r2, #4094	; 0xffe
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4013      	ands	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6819      	ldr	r1, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	22c0      	movs	r2, #192	; 0xc0
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	400a      	ands	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3720      	adds	r7, #32
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20008000 	.word	0x20008000

080037e0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e089      	b.n	800391a <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d102      	bne.n	8003818 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7fd fcc4 	bl	80011a0 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e075      	b.n	800391a <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e06e      	b.n	800391a <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d108      	bne.n	8003856 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	e00e      	b.n	8003874 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d001      	beq.n	8003864 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e05a      	b.n	800391a <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003872:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800387c:	d108      	bne.n	8003890 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	e007      	b.n	80038a0 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800389e:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	061a      	lsls	r2, r3, #24
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68da      	ldr	r2, [r3, #12]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	b299      	uxth	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	041a      	lsls	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <HAL_DTS_Init+0x130>)
 8003902:	4013      	ands	r3, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	69d1      	ldr	r1, [r2, #28]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	430b      	orrs	r3, r1
 800390e:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	ffff0000 	.word	0xffff0000

08003928 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b098      	sub	sp, #96	; 0x60
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003930:	4a84      	ldr	r2, [pc, #528]	; (8003b44 <HAL_FDCAN_Init+0x21c>)
 8003932:	f107 030c 	add.w	r3, r7, #12
 8003936:	4611      	mov	r1, r2
 8003938:	224c      	movs	r2, #76	; 0x4c
 800393a:	4618      	mov	r0, r3
 800393c:	f00d fc1a 	bl	8011174 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e1c6      	b.n	8003cd8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a7e      	ldr	r2, [pc, #504]	; (8003b48 <HAL_FDCAN_Init+0x220>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d106      	bne.n	8003962 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fd fc34 	bl	80011e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699a      	ldr	r2, [r3, #24]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0210 	bic.w	r2, r2, #16
 800398a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800398c:	f7fe f898 	bl	8001ac0 <HAL_GetTick>
 8003990:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003992:	e014      	b.n	80039be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003994:	f7fe f894 	bl	8001ac0 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b0a      	cmp	r3, #10
 80039a0:	d90d      	bls.n	80039be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2203      	movs	r2, #3
 80039b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e18c      	b.n	8003cd8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0308 	and.w	r3, r3, #8
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d0e3      	beq.n	8003994 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039dc:	f7fe f870 	bl	8001ac0 <HAL_GetTick>
 80039e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80039e2:	e014      	b.n	8003a0e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80039e4:	f7fe f86c 	bl	8001ac0 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b0a      	cmp	r3, #10
 80039f0:	d90d      	bls.n	8003a0e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2203      	movs	r2, #3
 8003a06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e164      	b.n	8003cd8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0e3      	beq.n	80039e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0202 	orr.w	r2, r2, #2
 8003a2a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	7c1b      	ldrb	r3, [r3, #16]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	e007      	b.n	8003a56 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a54:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	7c5b      	ldrb	r3, [r3, #17]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d108      	bne.n	8003a70 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699a      	ldr	r2, [r3, #24]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a6c:	619a      	str	r2, [r3, #24]
 8003a6e:	e007      	b.n	8003a80 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699a      	ldr	r2, [r3, #24]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	7c9b      	ldrb	r3, [r3, #18]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d108      	bne.n	8003a9a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a96:	619a      	str	r2, [r3, #24]
 8003a98:	e007      	b.n	8003aaa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003aa8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003ace:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0210 	bic.w	r2, r2, #16
 8003ade:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d108      	bne.n	8003afa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0204 	orr.w	r2, r2, #4
 8003af6:	619a      	str	r2, [r3, #24]
 8003af8:	e030      	b.n	8003b5c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d02c      	beq.n	8003b5c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d020      	beq.n	8003b4c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b18:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0210 	orr.w	r2, r2, #16
 8003b28:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b03      	cmp	r3, #3
 8003b30:	d114      	bne.n	8003b5c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0220 	orr.w	r2, r2, #32
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e00b      	b.n	8003b5c <HAL_FDCAN_Init+0x234>
 8003b44:	08011348 	.word	0x08011348
 8003b48:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699a      	ldr	r2, [r3, #24]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0220 	orr.w	r2, r2, #32
 8003b5a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b6c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003b74:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003b84:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003b86:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b90:	d115      	bne.n	8003bbe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003ba0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003baa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003bba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003bbc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be4:	4413      	add	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003bf2:	f023 0107 	bic.w	r1, r3, #7
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	443b      	add	r3, r7
 8003c00:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c1e:	f023 0107 	bic.w	r1, r3, #7
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3360      	adds	r3, #96	; 0x60
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c4a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3360      	adds	r3, #96	; 0x60
 8003c56:	443b      	add	r3, r7
 8003c58:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003c5c:	011a      	lsls	r2, r3, #4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d012      	beq.n	8003c96 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c78:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	3360      	adds	r3, #96	; 0x60
 8003c84:	443b      	add	r3, r7
 8003c86:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003c8a:	021a      	lsls	r2, r3, #8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a11      	ldr	r2, [pc, #68]	; (8003ce0 <HAL_FDCAN_Init+0x3b8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d107      	bne.n	8003cb0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f022 0203 	bic.w	r2, r2, #3
 8003cae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f80b 	bl	8003ce4 <FDCAN_CalcultateRamBlockAddresses>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003cd4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3760      	adds	r7, #96	; 0x60
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	4000a000 	.word	0x4000a000

08003ce4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003cfa:	4ba7      	ldr	r3, [pc, #668]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	0091      	lsls	r1, r2, #2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	430b      	orrs	r3, r1
 8003d08:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d14:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	4413      	add	r3, r2
 8003d30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d3a:	4b97      	ldr	r3, [pc, #604]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	0091      	lsls	r1, r2, #2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	430b      	orrs	r3, r1
 8003d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	4413      	add	r3, r2
 8003d72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003d7c:	4b86      	ldr	r3, [pc, #536]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	0091      	lsls	r1, r2, #2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d96:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	041a      	lsls	r2, r3, #16
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4413      	add	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dc4:	4b74      	ldr	r3, [pc, #464]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	0091      	lsls	r1, r2, #2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dde:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	041a      	lsls	r2, r3, #16
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	4413      	add	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003e0c:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	0091      	lsls	r1, r2, #2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	6812      	ldr	r2, [r2, #0]
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e26:	fb02 f303 	mul.w	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003e38:	4b57      	ldr	r3, [pc, #348]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	0091      	lsls	r1, r2, #2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	430b      	orrs	r3, r1
 8003e46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e52:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	041a      	lsls	r2, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4413      	add	r3, r2
 8003e70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0091      	lsls	r1, r2, #2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	430b      	orrs	r3, r1
 8003e88:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e94:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	041a      	lsls	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003eb0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb8:	061a      	lsls	r2, r3, #24
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	009a      	lsls	r2, r3, #2
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	441a      	add	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003f2e:	fb01 f303 	mul.w	r3, r1, r3
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003f7a:	fb01 f303 	mul.w	r3, r1, r3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	4a04      	ldr	r2, [pc, #16]	; (8003fa0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d915      	bls.n	8003fc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003f94:	e006      	b.n	8003fa4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003f96:	bf00      	nop
 8003f98:	ffff0003 	.word	0xffff0003
 8003f9c:	10002b00 	.word	0x10002b00
 8003fa0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e010      	b.n	8003fe2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e005      	b.n	8003fd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3f3      	bcc.n	8003fc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop

08003ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003ffe:	4b86      	ldr	r3, [pc, #536]	; (8004218 <HAL_GPIO_Init+0x228>)
 8004000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004002:	e18c      	b.n	800431e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2101      	movs	r1, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 817e 	beq.w	8004318 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0303 	and.w	r3, r3, #3
 8004024:	2b01      	cmp	r3, #1
 8004026:	d005      	beq.n	8004034 <HAL_GPIO_Init+0x44>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 0303 	and.w	r3, r3, #3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d130      	bne.n	8004096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800406a:	2201      	movs	r2, #1
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 0201 	and.w	r2, r3, #1
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d017      	beq.n	80040d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	2203      	movs	r2, #3
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d123      	bne.n	8004126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	08da      	lsrs	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3208      	adds	r2, #8
 80040e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	220f      	movs	r2, #15
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	fa02 f303 	lsl.w	r3, r2, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	08da      	lsrs	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3208      	adds	r2, #8
 8004120:	69b9      	ldr	r1, [r7, #24]
 8004122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	2203      	movs	r2, #3
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43db      	mvns	r3, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4013      	ands	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 80d8 	beq.w	8004318 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004168:	4b2c      	ldr	r3, [pc, #176]	; (800421c <HAL_GPIO_Init+0x22c>)
 800416a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <HAL_GPIO_Init+0x22c>)
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004178:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_GPIO_Init+0x22c>)
 800417a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <HAL_GPIO_Init+0x230>)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3302      	adds	r3, #2
 800418e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	220f      	movs	r2, #15
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_GPIO_Init+0x234>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d04a      	beq.n	8004248 <HAL_GPIO_Init+0x258>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a1c      	ldr	r2, [pc, #112]	; (8004228 <HAL_GPIO_Init+0x238>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d02b      	beq.n	8004212 <HAL_GPIO_Init+0x222>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1b      	ldr	r2, [pc, #108]	; (800422c <HAL_GPIO_Init+0x23c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d025      	beq.n	800420e <HAL_GPIO_Init+0x21e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1a      	ldr	r2, [pc, #104]	; (8004230 <HAL_GPIO_Init+0x240>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01f      	beq.n	800420a <HAL_GPIO_Init+0x21a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a19      	ldr	r2, [pc, #100]	; (8004234 <HAL_GPIO_Init+0x244>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d019      	beq.n	8004206 <HAL_GPIO_Init+0x216>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_GPIO_Init+0x248>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_GPIO_Init+0x212>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a17      	ldr	r2, [pc, #92]	; (800423c <HAL_GPIO_Init+0x24c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00d      	beq.n	80041fe <HAL_GPIO_Init+0x20e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a16      	ldr	r2, [pc, #88]	; (8004240 <HAL_GPIO_Init+0x250>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <HAL_GPIO_Init+0x20a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a15      	ldr	r2, [pc, #84]	; (8004244 <HAL_GPIO_Init+0x254>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_GPIO_Init+0x206>
 80041f2:	2309      	movs	r3, #9
 80041f4:	e029      	b.n	800424a <HAL_GPIO_Init+0x25a>
 80041f6:	230a      	movs	r3, #10
 80041f8:	e027      	b.n	800424a <HAL_GPIO_Init+0x25a>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e025      	b.n	800424a <HAL_GPIO_Init+0x25a>
 80041fe:	2306      	movs	r3, #6
 8004200:	e023      	b.n	800424a <HAL_GPIO_Init+0x25a>
 8004202:	2305      	movs	r3, #5
 8004204:	e021      	b.n	800424a <HAL_GPIO_Init+0x25a>
 8004206:	2304      	movs	r3, #4
 8004208:	e01f      	b.n	800424a <HAL_GPIO_Init+0x25a>
 800420a:	2303      	movs	r3, #3
 800420c:	e01d      	b.n	800424a <HAL_GPIO_Init+0x25a>
 800420e:	2302      	movs	r3, #2
 8004210:	e01b      	b.n	800424a <HAL_GPIO_Init+0x25a>
 8004212:	2301      	movs	r3, #1
 8004214:	e019      	b.n	800424a <HAL_GPIO_Init+0x25a>
 8004216:	bf00      	nop
 8004218:	58000080 	.word	0x58000080
 800421c:	58024400 	.word	0x58024400
 8004220:	58000400 	.word	0x58000400
 8004224:	58020000 	.word	0x58020000
 8004228:	58020400 	.word	0x58020400
 800422c:	58020800 	.word	0x58020800
 8004230:	58020c00 	.word	0x58020c00
 8004234:	58021000 	.word	0x58021000
 8004238:	58021400 	.word	0x58021400
 800423c:	58021800 	.word	0x58021800
 8004240:	58021c00 	.word	0x58021c00
 8004244:	58022400 	.word	0x58022400
 8004248:	2300      	movs	r3, #0
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4093      	lsls	r3, r2
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800425a:	4938      	ldr	r1, [pc, #224]	; (800433c <HAL_GPIO_Init+0x34c>)
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	089b      	lsrs	r3, r3, #2
 8004260:	3302      	adds	r3, #2
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	43db      	mvns	r3, r3
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4013      	ands	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800428e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	3301      	adds	r3, #1
 800431c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	f47f ae6b 	bne.w	8004004 <HAL_GPIO_Init+0x14>
  }
}
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	3724      	adds	r7, #36	; 0x24
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	58000400 	.word	0x58000400

08004340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
 800434c:	4613      	mov	r3, r2
 800434e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004350:	787b      	ldrb	r3, [r7, #1]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800435c:	e003      	b.n	8004366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	041a      	lsls	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	619a      	str	r2, [r3, #24]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7fc ff8a 	bl	80012b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2224      	movs	r2, #36	; 0x24
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	e006      	b.n	80043fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d104      	bne.n	800440e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b1d      	ldr	r3, [pc, #116]	; (8004490 <HAL_I2C_Init+0x11c>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800442c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1a      	ldr	r2, [r3, #32]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	02008000 	.word	0x02008000

08004494 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	d138      	bne.n	800451c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e032      	b.n	800451e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b20      	cmp	r3, #32
 800453e:	d139      	bne.n	80045b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800454a:	2302      	movs	r3, #2
 800454c:	e033      	b.n	80045b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2224      	movs	r2, #36	; 0x24
 800455a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800457c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0201 	orr.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
  }
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c4:	b08f      	sub	sp, #60	; 0x3c
 80045c6:	af0a      	add	r7, sp, #40	; 0x28
 80045c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e116      	b.n	8004802 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f00c fa8e 	bl	8010b10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2203      	movs	r2, #3
 80045f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f006 f91f 	bl	800a856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	687e      	ldr	r6, [r7, #4]
 8004620:	466d      	mov	r5, sp
 8004622:	f106 0410 	add.w	r4, r6, #16
 8004626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004632:	e885 0003 	stmia.w	r5, {r0, r1}
 8004636:	1d33      	adds	r3, r6, #4
 8004638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800463a:	6838      	ldr	r0, [r7, #0]
 800463c:	f005 ffea 	bl	800a614 <USB_CoreInit>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0d7      	b.n	8004802 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f006 f90d 	bl	800a878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e04a      	b.n	80046fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	333d      	adds	r3, #61	; 0x3d
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	333c      	adds	r3, #60	; 0x3c
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	b298      	uxth	r0, r3
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3356      	adds	r3, #86	; 0x56
 80046a0:	4602      	mov	r2, r0
 80046a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3340      	adds	r3, #64	; 0x40
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3344      	adds	r3, #68	; 0x44
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3348      	adds	r3, #72	; 0x48
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334c      	adds	r3, #76	; 0x4c
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	3301      	adds	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d3af      	bcc.n	8004664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e044      	b.n	8004794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3301      	adds	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d3b5      	bcc.n	800470a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	687e      	ldr	r6, [r7, #4]
 80047a6:	466d      	mov	r5, sp
 80047a8:	f106 0410 	add.w	r4, r6, #16
 80047ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047bc:	1d33      	adds	r3, r6, #4
 80047be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	f006 f8a5 	bl	800a910 <USB_DevInit>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e014      	b.n	8004802 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d102      	bne.n	80047f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 f96f 	bl	8005ad4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f007 f8e7 	bl	800b9ce <USB_DevDisconnect>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800480a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b084      	sub	sp, #16
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_PCD_Start+0x1c>
 8004822:	2302      	movs	r3, #2
 8004824:	e022      	b.n	800486c <HAL_PCD_Start+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 ffee 	bl	800a834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f007 f895 	bl	800b98c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b08d      	sub	sp, #52	; 0x34
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f007 f953 	bl	800bb36 <USB_GetMode>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	f040 84b7 	bne.w	8005206 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f007 f8b7 	bl	800ba10 <USB_ReadInterrupts>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 84ad 	beq.w	8005204 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a1b      	lsrs	r3, r3, #8
 80048b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f007 f8a4 	bl	800ba10 <USB_ReadInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d107      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f002 0202 	and.w	r2, r2, #2
 80048e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f007 f892 	bl	800ba10 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d161      	bne.n	80049ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699a      	ldr	r2, [r3, #24]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0210 	bic.w	r2, r2, #16
 8004904:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 020f 	and.w	r2, r3, #15
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	4413      	add	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	0c5b      	lsrs	r3, r3, #17
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	2b02      	cmp	r3, #2
 8004930:	d124      	bne.n	800497c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d035      	beq.n	80049aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	6a38      	ldr	r0, [r7, #32]
 8004952:	f006 fec9 	bl	800b6e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004962:	441a      	add	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	091b      	lsrs	r3, r3, #4
 8004970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004974:	441a      	add	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	615a      	str	r2, [r3, #20]
 800497a:	e016      	b.n	80049aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	0c5b      	lsrs	r3, r3, #17
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	2b06      	cmp	r3, #6
 8004986:	d110      	bne.n	80049aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800498e:	2208      	movs	r2, #8
 8004990:	4619      	mov	r1, r3
 8004992:	6a38      	ldr	r0, [r7, #32]
 8004994:	f006 fea8 	bl	800b6e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	091b      	lsrs	r3, r3, #4
 80049a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049a4:	441a      	add	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699a      	ldr	r2, [r3, #24]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0210 	orr.w	r2, r2, #16
 80049b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f007 f826 	bl	800ba10 <USB_ReadInterrupts>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80049ce:	f040 80a7 	bne.w	8004b20 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f007 f82b 	bl	800ba36 <USB_ReadDevAllOutEpInterrupt>
 80049e0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80049e2:	e099      	b.n	8004b18 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 808e 	beq.w	8004b0c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f007 f84f 	bl	800ba9e <USB_ReadDevOutEPInterrupt>
 8004a00:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004a1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fed1 	bl	80057c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00c      	beq.n	8004a4a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2308      	movs	r3, #8
 8004a40:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 ffa7 	bl	8005998 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d008      	beq.n	8004a66 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	461a      	mov	r2, r3
 8004a62:	2310      	movs	r3, #16
 8004a64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d030      	beq.n	8004ad2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d109      	bne.n	8004a90 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	78db      	ldrb	r3, [r3, #3]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d108      	bne.n	8004ac0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	4619      	mov	r1, r3
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f00c f920 	bl	8010d00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004acc:	461a      	mov	r2, r3
 8004ace:	2302      	movs	r3, #2
 8004ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2320      	movs	r3, #32
 8004aec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d009      	beq.n	8004b0c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b04:	461a      	mov	r2, r3
 8004b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b0a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	3301      	adds	r3, #1
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f47f af62 	bne.w	80049e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f006 ff73 	bl	800ba10 <USB_ReadInterrupts>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b34:	f040 80db 	bne.w	8004cee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f006 ff94 	bl	800ba6a <USB_ReadDevAllInEpInterrupt>
 8004b42:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004b48:	e0cd      	b.n	8004ce6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80c2 	beq.w	8004cda <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4618      	mov	r0, r3
 8004b62:	f006 ffba 	bl	800bada <USB_ReadDevInEPInterrupt>
 8004b66:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d057      	beq.n	8004c22 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	f003 030f 	and.w	r3, r3, #15
 8004b78:	2201      	movs	r2, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	69f9      	ldr	r1, [r7, #28]
 8004b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b92:	4013      	ands	r3, r2
 8004b94:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d132      	bne.n	8004c16 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	00db      	lsls	r3, r3, #3
 8004bb8:	4413      	add	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3348      	adds	r3, #72	; 0x48
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4403      	add	r3, r0
 8004bd0:	3344      	adds	r3, #68	; 0x44
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4419      	add	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4403      	add	r3, r0
 8004be4:	3348      	adds	r3, #72	; 0x48
 8004be6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d113      	bne.n	8004c16 <HAL_PCD_IRQHandler+0x3a2>
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	334c      	adds	r3, #76	; 0x4c
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d108      	bne.n	8004c16 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2101      	movs	r1, #1
 8004c12:	f006 ffc3 	bl	800bb9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f00b ffea 	bl	8010bf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	461a      	mov	r2, r3
 8004c56:	2310      	movs	r3, #16
 8004c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	015a      	lsls	r2, r3, #5
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c70:	461a      	mov	r2, r3
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d023      	beq.n	8004cc8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c82:	6a38      	ldr	r0, [r7, #32]
 8004c84:	f005 ffa2 	bl	800abcc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	3338      	adds	r3, #56	; 0x38
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	3304      	adds	r3, #4
 8004c9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	78db      	ldrb	r3, [r3, #3]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d108      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f00c f837 	bl	8010d24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004cd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fcea 	bl	80056ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	3301      	adds	r3, #1
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f47f af2e 	bne.w	8004b4a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f006 fe8c 	bl	800ba10 <USB_ReadInterrupts>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d02:	d122      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	69fa      	ldr	r2, [r7, #28]
 8004d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d108      	bne.n	8004d34 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fef5 	bl	8005b1c <HAL_PCDEx_LPM_Callback>
 8004d32:	e002      	b.n	8004d3a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f00b ffd5 	bl	8010ce4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f006 fe5e 	bl	800ba10 <USB_ReadInterrupts>
 8004d54:	4603      	mov	r3, r0
 8004d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d5e:	d112      	bne.n	8004d86 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d102      	bne.n	8004d76 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f00b ff91 	bl	8010c98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695a      	ldr	r2, [r3, #20]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004d84:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f006 fe40 	bl	800ba10 <USB_ReadInterrupts>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9a:	d121      	bne.n	8004de0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004daa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d111      	bne.n	8004dda <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	f003 020f 	and.w	r2, r3, #15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fea2 	bl	8005b1c <HAL_PCDEx_LPM_Callback>
 8004dd8:	e002      	b.n	8004de0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f00b ff5c 	bl	8010c98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f006 fe13 	bl	800ba10 <USB_ReadInterrupts>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df4:	f040 80b7 	bne.w	8004f66 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e06:	f023 0301 	bic.w	r3, r3, #1
 8004e0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2110      	movs	r1, #16
 8004e12:	4618      	mov	r0, r3
 8004e14:	f005 feda 	bl	800abcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1c:	e046      	b.n	8004eac <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e64:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e84:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d3b3      	bcc.n	8004e1e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	69fa      	ldr	r2, [r7, #28]
 8004ec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004ec8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee2:	f043 030b 	orr.w	r3, r3, #11
 8004ee6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ef8:	f043 030b 	orr.w	r3, r3, #11
 8004efc:	6453      	str	r3, [r2, #68]	; 0x44
 8004efe:	e015      	b.n	8004f2c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0e:	4619      	mov	r1, r3
 8004f10:	f242 032b 	movw	r3, #8235	; 0x202b
 8004f14:	4313      	orrs	r3, r2
 8004f16:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	69fa      	ldr	r2, [r7, #28]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f043 030b 	orr.w	r3, r3, #11
 8004f2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004f3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004f50:	461a      	mov	r2, r3
 8004f52:	f006 fe23 	bl	800bb9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f006 fd50 	bl	800ba10 <USB_ReadInterrupts>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7a:	d124      	bne.n	8004fc6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f006 fde7 	bl	800bb54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f005 fe9b 	bl	800acc6 <USB_GetDevSpeed>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681c      	ldr	r4, [r3, #0]
 8004f9c:	f001 fd1e 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 8004fa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4620      	mov	r0, r4
 8004fac:	f005 fba0 	bl	800a6f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f00b fe48 	bl	8010c46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695a      	ldr	r2, [r3, #20]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f006 fd20 	bl	800ba10 <USB_ReadInterrupts>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f00b fe25 	bl	8010c2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f002 0208 	and.w	r2, r2, #8
 8004fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f006 fd0b 	bl	800ba10 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d122      	bne.n	800504a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005010:	2301      	movs	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	; 0x24
 8005014:	e014      	b.n	8005040 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005016:	6879      	ldr	r1, [r7, #4]
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	4613      	mov	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4413      	add	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	440b      	add	r3, r1
 8005024:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d105      	bne.n	800503a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	b2db      	uxtb	r3, r3
 8005032:	4619      	mov	r1, r3
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fb09 	bl	800564c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	429a      	cmp	r2, r3
 8005048:	d3e5      	bcc.n	8005016 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f006 fcde 	bl	800ba10 <USB_ReadInterrupts>
 8005054:	4603      	mov	r3, r0
 8005056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505e:	d13b      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005060:	2301      	movs	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
 8005064:	e02b      	b.n	80050be <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	4613      	mov	r3, r2
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3340      	adds	r3, #64	; 0x40
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d115      	bne.n	80050b8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800508c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800508e:	2b00      	cmp	r3, #0
 8005090:	da12      	bge.n	80050b8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	333f      	adds	r3, #63	; 0x3f
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 faca 	bl	800564c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	3301      	adds	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d3ce      	bcc.n	8005066 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80050d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f006 fc97 	bl	800ba10 <USB_ReadInterrupts>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d155      	bne.n	800519a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050ee:	2301      	movs	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e045      	b.n	8005180 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	4613      	mov	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4413      	add	r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800511c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800511e:	2b00      	cmp	r3, #0
 8005120:	da2b      	bge.n	800517a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800512e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005132:	429a      	cmp	r2, r3
 8005134:	d121      	bne.n	800517a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	69fa      	ldr	r2, [r7, #28]
 800516e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005176:	6053      	str	r3, [r2, #4]
            break;
 8005178:	e007      	b.n	800518a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	3301      	adds	r3, #1
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005186:	429a      	cmp	r2, r3
 8005188:	d3b4      	bcc.n	80050f4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695a      	ldr	r2, [r3, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f006 fc36 	bl	800ba10 <USB_ReadInterrupts>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d10a      	bne.n	80051c6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f00b fdc9 	bl	8010d48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80051c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f006 fc20 	bl	800ba10 <USB_ReadInterrupts>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d115      	bne.n	8005206 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f00b fdb9 	bl	8010d64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6859      	ldr	r1, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	e000      	b.n	8005206 <HAL_PCD_IRQHandler+0x992>
      return;
 8005204:	bf00      	nop
    }
  }
}
 8005206:	3734      	adds	r7, #52	; 0x34
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}

0800520c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_PCD_SetAddress+0x1a>
 8005222:	2302      	movs	r3, #2
 8005224:	e013      	b.n	800524e <HAL_PCD_SetAddress+0x42>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	4611      	mov	r1, r2
 800523e:	4618      	mov	r0, r3
 8005240:	f006 fb7e 	bl	800b940 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	461a      	mov	r2, r3
 8005264:	4603      	mov	r3, r0
 8005266:	70fb      	strb	r3, [r7, #3]
 8005268:	460b      	mov	r3, r1
 800526a:	803b      	strh	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005278:	2b00      	cmp	r3, #0
 800527a:	da0f      	bge.n	800529c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	f003 020f 	and.w	r2, r3, #15
 8005282:	4613      	mov	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	3338      	adds	r3, #56	; 0x38
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	4413      	add	r3, r2
 8005290:	3304      	adds	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	705a      	strb	r2, [r3, #1]
 800529a:	e00f      	b.n	80052bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	f003 020f 	and.w	r2, r3, #15
 80052a2:	4613      	mov	r3, r2
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052c8:	883a      	ldrh	r2, [r7, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	78ba      	ldrb	r2, [r7, #2]
 80052d2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052e6:	78bb      	ldrb	r3, [r7, #2]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d102      	bne.n	80052f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_EP_Open+0xaa>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e00e      	b.n	800531e <HAL_PCD_EP_Open+0xc8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68f9      	ldr	r1, [r7, #12]
 800530e:	4618      	mov	r0, r3
 8005310:	f005 fcfe 	bl	800ad10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800531c:	7afb      	ldrb	r3, [r7, #11]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005336:	2b00      	cmp	r3, #0
 8005338:	da0f      	bge.n	800535a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	f003 020f 	and.w	r2, r3, #15
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	3338      	adds	r3, #56	; 0x38
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	4413      	add	r3, r2
 800534e:	3304      	adds	r3, #4
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	705a      	strb	r2, [r3, #1]
 8005358:	e00f      	b.n	800537a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	f003 030f 	and.w	r3, r3, #15
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_PCD_EP_Close+0x6e>
 8005390:	2302      	movs	r3, #2
 8005392:	e00e      	b.n	80053b2 <HAL_PCD_EP_Close+0x8c>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f005 fd3c 	bl	800ae20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b086      	sub	sp, #24
 80053be:	af00      	add	r7, sp, #0
 80053c0:	60f8      	str	r0, [r7, #12]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
 80053c6:	460b      	mov	r3, r1
 80053c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053ca:	7afb      	ldrb	r3, [r7, #11]
 80053cc:	f003 020f 	and.w	r2, r3, #15
 80053d0:	4613      	mov	r3, r2
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	3304      	adds	r3, #4
 80053e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2200      	movs	r2, #0
 80053f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2200      	movs	r2, #0
 80053fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053fc:	7afb      	ldrb	r3, [r7, #11]
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	b2da      	uxtb	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d102      	bne.n	8005416 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6979      	ldr	r1, [r7, #20]
 8005424:	f005 fdd8 	bl	800afd8 <USB_EPStartXfer>

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8005454:	681b      	ldr	r3, [r3, #0]
}
 8005456:	4618      	mov	r0, r3
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	460b      	mov	r3, r1
 8005470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005472:	7afb      	ldrb	r3, [r7, #11]
 8005474:	f003 020f 	and.w	r2, r3, #15
 8005478:	4613      	mov	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	3304      	adds	r3, #4
 8005488:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2200      	movs	r2, #0
 800549a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2201      	movs	r2, #1
 80054a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054a2:	7afb      	ldrb	r3, [r7, #11]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d102      	bne.n	80054bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	6979      	ldr	r1, [r7, #20]
 80054ca:	f005 fd85 	bl	800afd8 <USB_EPStartXfer>

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d901      	bls.n	80054f6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e050      	b.n	8005598 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	da0f      	bge.n	800551e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	f003 020f 	and.w	r2, r3, #15
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	3338      	adds	r3, #56	; 0x38
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	3304      	adds	r3, #4
 8005514:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	705a      	strb	r2, [r3, #1]
 800551c:	e00d      	b.n	800553a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800551e:	78fa      	ldrb	r2, [r7, #3]
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	3304      	adds	r3, #4
 8005532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	b2da      	uxtb	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_PCD_EP_SetStall+0x82>
 8005556:	2302      	movs	r3, #2
 8005558:	e01e      	b.n	8005598 <HAL_PCD_EP_SetStall+0xc0>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	4618      	mov	r0, r3
 800556a:	f006 f915 	bl	800b798 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f003 030f 	and.w	r3, r3, #15
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6818      	ldr	r0, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	b2d9      	uxtb	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005588:	461a      	mov	r2, r3
 800558a:	f006 fb07 	bl	800bb9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	f003 020f 	and.w	r2, r3, #15
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d901      	bls.n	80055be <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e042      	b.n	8005644 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da0f      	bge.n	80055e6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	3338      	adds	r3, #56	; 0x38
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	3304      	adds	r3, #4
 80055dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	705a      	strb	r2, [r3, #1]
 80055e4:	e00f      	b.n	8005606 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	f003 020f 	and.w	r2, r3, #15
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	4413      	add	r3, r2
 80055fc:	3304      	adds	r3, #4
 80055fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_PCD_EP_ClrStall+0x86>
 8005622:	2302      	movs	r3, #2
 8005624:	e00e      	b.n	8005644 <HAL_PCD_EP_ClrStall+0xa4>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	4618      	mov	r0, r3
 8005636:	f006 f91d 	bl	800b874 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800565c:	2b00      	cmp	r3, #0
 800565e:	da0c      	bge.n	800567a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	3338      	adds	r3, #56	; 0x38
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e00c      	b.n	8005694 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	4613      	mov	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4413      	add	r3, r2
 8005690:	3304      	adds	r3, #4
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68f9      	ldr	r1, [r7, #12]
 800569a:	4618      	mov	r0, r3
 800569c:	f005 ff3c 	bl	800b518 <USB_EPStopXfer>
 80056a0:	4603      	mov	r3, r0
 80056a2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80056a4:	7afb      	ldrb	r3, [r7, #11]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b08a      	sub	sp, #40	; 0x28
 80056b2:	af02      	add	r7, sp, #8
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	4613      	mov	r3, r2
 80056c6:	00db      	lsls	r3, r3, #3
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	3338      	adds	r3, #56	; 0x38
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	3304      	adds	r3, #4
 80056d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d901      	bls.n	80056e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e06c      	b.n	80057c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d902      	bls.n	8005702 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3303      	adds	r3, #3
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800570a:	e02b      	b.n	8005764 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	429a      	cmp	r2, r3
 8005720:	d902      	bls.n	8005728 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3303      	adds	r3, #3
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68d9      	ldr	r1, [r3, #12]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005740:	b2db      	uxtb	r3, r3
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	4603      	mov	r3, r0
 8005746:	6978      	ldr	r0, [r7, #20]
 8005748:	f005 ff90 	bl	800b66c <USB_WritePacket>

    ep->xfer_buff  += len;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	441a      	add	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	b29b      	uxth	r3, r3
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	429a      	cmp	r2, r3
 8005778:	d809      	bhi.n	800578e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	695a      	ldr	r2, [r3, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005782:	429a      	cmp	r2, r3
 8005784:	d203      	bcs.n	800578e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1be      	bne.n	800570c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	429a      	cmp	r2, r3
 8005798:	d811      	bhi.n	80057be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	f003 030f 	and.w	r3, r3, #15
 80057a0:	2201      	movs	r2, #1
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	43db      	mvns	r3, r3
 80057b4:	6939      	ldr	r1, [r7, #16]
 80057b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ba:	4013      	ands	r3, r2
 80057bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b088      	sub	sp, #32
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	333c      	adds	r3, #60	; 0x3c
 80057e0:	3304      	adds	r3, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d17b      	bne.n	80058f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	4a61      	ldr	r2, [pc, #388]	; (8005990 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	f240 80b9 	bls.w	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80b3 	beq.w	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	461a      	mov	r2, r3
 800582c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005830:	6093      	str	r3, [r2, #8]
 8005832:	e0a7      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	d009      	beq.n	8005852 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	461a      	mov	r2, r3
 800584c:	2320      	movs	r3, #32
 800584e:	6093      	str	r3, [r2, #8]
 8005850:	e098      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 8093 	bne.w	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4a4b      	ldr	r2, [pc, #300]	; (8005990 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d90f      	bls.n	8005886 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00a      	beq.n	8005886 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587c:	461a      	mov	r2, r3
 800587e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005882:	6093      	str	r3, [r2, #8]
 8005884:	e07e      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	0159      	lsls	r1, r3, #5
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	440b      	add	r3, r1
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d114      	bne.n	80058e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d109      	bne.n	80058da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058d0:	461a      	mov	r2, r3
 80058d2:	2101      	movs	r1, #1
 80058d4:	f006 f962 	bl	800bb9c <USB_EP0_OutStart>
 80058d8:	e006      	b.n	80058e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	441a      	add	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f00b f966 	bl	8010bc0 <HAL_PCD_DataOutStageCallback>
 80058f4:	e046      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d124      	bne.n	8005948 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	461a      	mov	r2, r3
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	6093      	str	r3, [r2, #8]
 800591c:	e032      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005934:	461a      	mov	r2, r3
 8005936:	2320      	movs	r3, #32
 8005938:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f00b f93d 	bl	8010bc0 <HAL_PCD_DataOutStageCallback>
 8005946:	e01d      	b.n	8005984 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d114      	bne.n	8005978 <PCD_EP_OutXfrComplete_int+0x1b0>
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4413      	add	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d108      	bne.n	8005978 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005970:	461a      	mov	r2, r3
 8005972:	2100      	movs	r1, #0
 8005974:	f006 f912 	bl	800bb9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f00b f91e 	bl	8010bc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	4f54300a 	.word	0x4f54300a
 8005994:	4f54310a 	.word	0x4f54310a

08005998 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	333c      	adds	r3, #60	; 0x3c
 80059b0:	3304      	adds	r3, #4
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d90e      	bls.n	80059ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d009      	beq.n	80059ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e4:	461a      	mov	r2, r3
 80059e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f00b f8d5 	bl	8010b9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <PCD_EP_OutSetupPacket_int+0x88>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d90c      	bls.n	8005a14 <PCD_EP_OutSetupPacket_int+0x7c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d108      	bne.n	8005a14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2101      	movs	r1, #1
 8005a10:	f006 f8c4 	bl	800bb9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	4f54300a 	.word	0x4f54300a

08005a24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
 8005a30:	4613      	mov	r3, r2
 8005a32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005a42:	883b      	ldrh	r3, [r7, #0]
 8005a44:	0419      	lsls	r1, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a50:	e028      	b.n	8005aa4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	0c1b      	lsrs	r3, r3, #16
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a60:	2300      	movs	r3, #0
 8005a62:	73fb      	strb	r3, [r7, #15]
 8005a64:	e00d      	b.n	8005a82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	3340      	adds	r3, #64	; 0x40
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	4413      	add	r3, r2
 8005a7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d3ec      	bcc.n	8005a66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a8c:	883b      	ldrh	r3, [r7, #0]
 8005a8e:	0418      	lsls	r0, r3, #16
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4302      	orrs	r2, r0
 8005a9c:	3340      	adds	r3, #64	; 0x40
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	460b      	mov	r3, r1
 8005abc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	887a      	ldrh	r2, [r7, #2]
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_PCDEx_ActivateLPM+0x44>)
 8005b04:	4313      	orrs	r3, r2
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	10000003 	.word	0x10000003

08005b1c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005b3c:	4b19      	ldr	r3, [pc, #100]	; (8005ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d00a      	beq.n	8005b5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005b48:	4b16      	ldr	r3, [pc, #88]	; (8005ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d001      	beq.n	8005b5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e01f      	b.n	8005b9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e01d      	b.n	8005b9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b5e:	4b11      	ldr	r3, [pc, #68]	; (8005ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f023 0207 	bic.w	r2, r3, #7
 8005b66:	490f      	ldr	r1, [pc, #60]	; (8005ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b6e:	f7fb ffa7 	bl	8001ac0 <HAL_GetTick>
 8005b72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b74:	e009      	b.n	8005b8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b76:	f7fb ffa3 	bl	8001ac0 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b84:	d901      	bls.n	8005b8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e007      	b.n	8005b9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <HAL_PWREx_ConfigSupply+0x70>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b96:	d1ee      	bne.n	8005b76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	58024800 	.word	0x58024800

08005ba8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	60d3      	str	r3, [r2, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	58024800 	.word	0x58024800

08005bc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08c      	sub	sp, #48	; 0x30
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e3c8      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8087 	beq.w	8005cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be8:	4b88      	ldr	r3, [pc, #544]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bf2:	4b86      	ldr	r3, [pc, #536]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCC_OscConfig+0x46>
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b18      	cmp	r3, #24
 8005c02:	d110      	bne.n	8005c26 <HAL_RCC_OscConfig+0x5e>
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d10b      	bne.n	8005c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c0e:	4b7f      	ldr	r3, [pc, #508]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d06c      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x12c>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d168      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e3a2      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2e:	d106      	bne.n	8005c3e <HAL_RCC_OscConfig+0x76>
 8005c30:	4b76      	ldr	r3, [pc, #472]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a75      	ldr	r2, [pc, #468]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e02e      	b.n	8005c9c <HAL_RCC_OscConfig+0xd4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10c      	bne.n	8005c60 <HAL_RCC_OscConfig+0x98>
 8005c46:	4b71      	ldr	r3, [pc, #452]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a70      	ldr	r2, [pc, #448]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	4b6e      	ldr	r3, [pc, #440]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a6d      	ldr	r2, [pc, #436]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	e01d      	b.n	8005c9c <HAL_RCC_OscConfig+0xd4>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c68:	d10c      	bne.n	8005c84 <HAL_RCC_OscConfig+0xbc>
 8005c6a:	4b68      	ldr	r3, [pc, #416]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a67      	ldr	r2, [pc, #412]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b65      	ldr	r3, [pc, #404]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a64      	ldr	r2, [pc, #400]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e00b      	b.n	8005c9c <HAL_RCC_OscConfig+0xd4>
 8005c84:	4b61      	ldr	r3, [pc, #388]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a60      	ldr	r2, [pc, #384]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	4b5e      	ldr	r3, [pc, #376]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a5d      	ldr	r2, [pc, #372]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d013      	beq.n	8005ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca4:	f7fb ff0c 	bl	8001ac0 <HAL_GetTick>
 8005ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fb ff08 	bl	8001ac0 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e356      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cbe:	4b53      	ldr	r3, [pc, #332]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0f0      	beq.n	8005cac <HAL_RCC_OscConfig+0xe4>
 8005cca:	e014      	b.n	8005cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fb fef8 	bl	8001ac0 <HAL_GetTick>
 8005cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cd4:	f7fb fef4 	bl	8001ac0 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b64      	cmp	r3, #100	; 0x64
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e342      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ce6:	4b49      	ldr	r3, [pc, #292]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f0      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x10c>
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 808c 	beq.w	8005e1c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d04:	4b41      	ldr	r3, [pc, #260]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d0e:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d007      	beq.n	8005d2a <HAL_RCC_OscConfig+0x162>
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	2b18      	cmp	r3, #24
 8005d1e:	d137      	bne.n	8005d90 <HAL_RCC_OscConfig+0x1c8>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d132      	bne.n	8005d90 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d2a:	4b38      	ldr	r3, [pc, #224]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <HAL_RCC_OscConfig+0x17a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e314      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d42:	4b32      	ldr	r3, [pc, #200]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f023 0219 	bic.w	r2, r3, #25
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	492f      	ldr	r1, [pc, #188]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d50:	4313      	orrs	r3, r2
 8005d52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fb feb4 	bl	8001ac0 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d5c:	f7fb feb0 	bl	8001ac0 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e2fe      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d6e:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f0      	beq.n	8005d5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	4920      	ldr	r1, [pc, #128]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d8e:	e045      	b.n	8005e1c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d026      	beq.n	8005de6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d98:	4b1c      	ldr	r3, [pc, #112]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 0219 	bic.w	r2, r3, #25
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	4919      	ldr	r1, [pc, #100]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005daa:	f7fb fe89 	bl	8001ac0 <HAL_GetTick>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db2:	f7fb fe85 	bl	8001ac0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e2d3      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	490b      	ldr	r1, [pc, #44]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	604b      	str	r3, [r1, #4]
 8005de4:	e01a      	b.n	8005e1c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de6:	4b09      	ldr	r3, [pc, #36]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a08      	ldr	r2, [pc, #32]	; (8005e0c <HAL_RCC_OscConfig+0x244>)
 8005dec:	f023 0301 	bic.w	r3, r3, #1
 8005df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df2:	f7fb fe65 	bl	8001ac0 <HAL_GetTick>
 8005df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005df8:	e00a      	b.n	8005e10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dfa:	f7fb fe61 	bl	8001ac0 <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d903      	bls.n	8005e10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e2af      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
 8005e0c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e10:	4b96      	ldr	r3, [pc, #600]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ee      	bne.n	8005dfa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0310 	and.w	r3, r3, #16
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d06a      	beq.n	8005efe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e28:	4b90      	ldr	r3, [pc, #576]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e30:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e32:	4b8e      	ldr	r3, [pc, #568]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e36:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d007      	beq.n	8005e4e <HAL_RCC_OscConfig+0x286>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b18      	cmp	r3, #24
 8005e42:	d11b      	bne.n	8005e7c <HAL_RCC_OscConfig+0x2b4>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d116      	bne.n	8005e7c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e4e:	4b87      	ldr	r3, [pc, #540]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_RCC_OscConfig+0x29e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	2b80      	cmp	r3, #128	; 0x80
 8005e60:	d001      	beq.n	8005e66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e282      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e66:	4b81      	ldr	r3, [pc, #516]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	061b      	lsls	r3, r3, #24
 8005e74:	497d      	ldr	r1, [pc, #500]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e7a:	e040      	b.n	8005efe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69db      	ldr	r3, [r3, #28]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d023      	beq.n	8005ecc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e84:	4b79      	ldr	r3, [pc, #484]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a78      	ldr	r2, [pc, #480]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fb fe16 	bl	8001ac0 <HAL_GetTick>
 8005e94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005e98:	f7fb fe12 	bl	8001ac0 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e260      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eaa:	4b70      	ldr	r3, [pc, #448]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb6:	4b6d      	ldr	r3, [pc, #436]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	061b      	lsls	r3, r3, #24
 8005ec4:	4969      	ldr	r1, [pc, #420]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60cb      	str	r3, [r1, #12]
 8005eca:	e018      	b.n	8005efe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005ecc:	4b67      	ldr	r3, [pc, #412]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a66      	ldr	r2, [pc, #408]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fb fdf2 	bl	8001ac0 <HAL_GetTick>
 8005edc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ee0:	f7fb fdee 	bl	8001ac0 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e23c      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ef2:	4b5e      	ldr	r3, [pc, #376]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0308 	and.w	r3, r3, #8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d036      	beq.n	8005f78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d019      	beq.n	8005f46 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f12:	4b56      	ldr	r3, [pc, #344]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f16:	4a55      	ldr	r2, [pc, #340]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1e:	f7fb fdcf 	bl	8001ac0 <HAL_GetTick>
 8005f22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f26:	f7fb fdcb 	bl	8001ac0 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e219      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005f38:	4b4c      	ldr	r3, [pc, #304]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0f0      	beq.n	8005f26 <HAL_RCC_OscConfig+0x35e>
 8005f44:	e018      	b.n	8005f78 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f46:	4b49      	ldr	r3, [pc, #292]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4a:	4a48      	ldr	r2, [pc, #288]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fb fdb5 	bl	8001ac0 <HAL_GetTick>
 8005f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5a:	f7fb fdb1 	bl	8001ac0 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1ff      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005f6c:	4b3f      	ldr	r3, [pc, #252]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0320 	and.w	r3, r3, #32
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d036      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d019      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f8c:	4b37      	ldr	r3, [pc, #220]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a36      	ldr	r2, [pc, #216]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005f92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005f98:	f7fb fd92 	bl	8001ac0 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fa0:	f7fb fd8e 	bl	8001ac0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e1dc      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005fb2:	4b2e      	ldr	r3, [pc, #184]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x3d8>
 8005fbe:	e018      	b.n	8005ff2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fc0:	4b2a      	ldr	r3, [pc, #168]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a29      	ldr	r2, [pc, #164]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005fcc:	f7fb fd78 	bl	8001ac0 <HAL_GetTick>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fd4:	f7fb fd74 	bl	8001ac0 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e1c2      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f0      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8086 	beq.w	800610c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006000:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <HAL_RCC_OscConfig+0x4a8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a1a      	ldr	r2, [pc, #104]	; (8006070 <HAL_RCC_OscConfig+0x4a8>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800600c:	f7fb fd58 	bl	8001ac0 <HAL_GetTick>
 8006010:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006014:	f7fb fd54 	bl	8001ac0 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b64      	cmp	r3, #100	; 0x64
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e1a2      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006026:	4b12      	ldr	r3, [pc, #72]	; (8006070 <HAL_RCC_OscConfig+0x4a8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0f0      	beq.n	8006014 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d106      	bne.n	8006048 <HAL_RCC_OscConfig+0x480>
 800603a:	4b0c      	ldr	r3, [pc, #48]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 800603c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603e:	4a0b      	ldr	r2, [pc, #44]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	6713      	str	r3, [r2, #112]	; 0x70
 8006046:	e032      	b.n	80060ae <HAL_RCC_OscConfig+0x4e6>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d111      	bne.n	8006074 <HAL_RCC_OscConfig+0x4ac>
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4a05      	ldr	r2, [pc, #20]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
 800605c:	4b03      	ldr	r3, [pc, #12]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4a02      	ldr	r2, [pc, #8]	; (800606c <HAL_RCC_OscConfig+0x4a4>)
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	6713      	str	r3, [r2, #112]	; 0x70
 8006068:	e021      	b.n	80060ae <HAL_RCC_OscConfig+0x4e6>
 800606a:	bf00      	nop
 800606c:	58024400 	.word	0x58024400
 8006070:	58024800 	.word	0x58024800
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b05      	cmp	r3, #5
 800607a:	d10c      	bne.n	8006096 <HAL_RCC_OscConfig+0x4ce>
 800607c:	4b83      	ldr	r3, [pc, #524]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800607e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006080:	4a82      	ldr	r2, [pc, #520]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006082:	f043 0304 	orr.w	r3, r3, #4
 8006086:	6713      	str	r3, [r2, #112]	; 0x70
 8006088:	4b80      	ldr	r3, [pc, #512]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	4a7f      	ldr	r2, [pc, #508]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800608e:	f043 0301 	orr.w	r3, r3, #1
 8006092:	6713      	str	r3, [r2, #112]	; 0x70
 8006094:	e00b      	b.n	80060ae <HAL_RCC_OscConfig+0x4e6>
 8006096:	4b7d      	ldr	r3, [pc, #500]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	4a7c      	ldr	r2, [pc, #496]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800609c:	f023 0301 	bic.w	r3, r3, #1
 80060a0:	6713      	str	r3, [r2, #112]	; 0x70
 80060a2:	4b7a      	ldr	r3, [pc, #488]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a79      	ldr	r2, [pc, #484]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80060a8:	f023 0304 	bic.w	r3, r3, #4
 80060ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d015      	beq.n	80060e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b6:	f7fb fd03 	bl	8001ac0 <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060bc:	e00a      	b.n	80060d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fb fcff 	bl	8001ac0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e14b      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060d4:	4b6d      	ldr	r3, [pc, #436]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80060d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d0ee      	beq.n	80060be <HAL_RCC_OscConfig+0x4f6>
 80060e0:	e014      	b.n	800610c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060e2:	f7fb fced 	bl	8001ac0 <HAL_GetTick>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80060e8:	e00a      	b.n	8006100 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ea:	f7fb fce9 	bl	8001ac0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d901      	bls.n	8006100 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e135      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006100:	4b62      	ldr	r3, [pc, #392]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1ee      	bne.n	80060ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 812a 	beq.w	800636a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006116:	4b5d      	ldr	r3, [pc, #372]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800611e:	2b18      	cmp	r3, #24
 8006120:	f000 80ba 	beq.w	8006298 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	2b02      	cmp	r3, #2
 800612a:	f040 8095 	bne.w	8006258 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800612e:	4b57      	ldr	r3, [pc, #348]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a56      	ldr	r2, [pc, #344]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb fcc1 	bl	8001ac0 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006142:	f7fb fcbd 	bl	8001ac0 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e10b      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006154:	4b4d      	ldr	r3, [pc, #308]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f0      	bne.n	8006142 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006160:	4b4a      	ldr	r3, [pc, #296]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006164:	4b4a      	ldr	r3, [pc, #296]	; (8006290 <HAL_RCC_OscConfig+0x6c8>)
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006170:	0112      	lsls	r2, r2, #4
 8006172:	430a      	orrs	r2, r1
 8006174:	4945      	ldr	r1, [pc, #276]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	628b      	str	r3, [r1, #40]	; 0x28
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	3b01      	subs	r3, #1
 8006180:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006188:	3b01      	subs	r3, #1
 800618a:	025b      	lsls	r3, r3, #9
 800618c:	b29b      	uxth	r3, r3
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006194:	3b01      	subs	r3, #1
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a2:	3b01      	subs	r3, #1
 80061a4:	061b      	lsls	r3, r3, #24
 80061a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061aa:	4938      	ldr	r1, [pc, #224]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80061b0:	4b36      	ldr	r3, [pc, #216]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a35      	ldr	r2, [pc, #212]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061b6:	f023 0301 	bic.w	r3, r3, #1
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061bc:	4b33      	ldr	r3, [pc, #204]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c0:	4b34      	ldr	r3, [pc, #208]	; (8006294 <HAL_RCC_OscConfig+0x6cc>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061c8:	00d2      	lsls	r2, r2, #3
 80061ca:	4930      	ldr	r1, [pc, #192]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80061d0:	4b2e      	ldr	r3, [pc, #184]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f023 020c 	bic.w	r2, r3, #12
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	492b      	ldr	r1, [pc, #172]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80061e2:	4b2a      	ldr	r3, [pc, #168]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e6:	f023 0202 	bic.w	r2, r3, #2
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	4927      	ldr	r1, [pc, #156]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061f4:	4b25      	ldr	r3, [pc, #148]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4a24      	ldr	r2, [pc, #144]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006200:	4b22      	ldr	r3, [pc, #136]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	4a21      	ldr	r2, [pc, #132]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	4a1e      	ldr	r2, [pc, #120]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006212:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006218:	4b1c      	ldr	r3, [pc, #112]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006224:	4b19      	ldr	r3, [pc, #100]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a18      	ldr	r2, [pc, #96]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800622a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800622e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fb fc46 	bl	8001ac0 <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fb fc42 	bl	8001ac0 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e090      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x670>
 8006256:	e088      	b.n	800636a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006258:	4b0c      	ldr	r3, [pc, #48]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a0b      	ldr	r2, [pc, #44]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 800625e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006264:	f7fb fc2c 	bl	8001ac0 <HAL_GetTick>
 8006268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800626a:	e008      	b.n	800627e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626c:	f7fb fc28 	bl	8001ac0 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e076      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800627e:	4b03      	ldr	r3, [pc, #12]	; (800628c <HAL_RCC_OscConfig+0x6c4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f0      	bne.n	800626c <HAL_RCC_OscConfig+0x6a4>
 800628a:	e06e      	b.n	800636a <HAL_RCC_OscConfig+0x7a2>
 800628c:	58024400 	.word	0x58024400
 8006290:	fffffc0c 	.word	0xfffffc0c
 8006294:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006298:	4b36      	ldr	r3, [pc, #216]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 800629a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800629e:	4b35      	ldr	r3, [pc, #212]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d031      	beq.n	8006310 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f003 0203 	and.w	r2, r3, #3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d12a      	bne.n	8006310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	091b      	lsrs	r3, r3, #4
 80062be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d122      	bne.n	8006310 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d11a      	bne.n	8006310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	0a5b      	lsrs	r3, r3, #9
 80062de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d111      	bne.n	8006310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	0c1b      	lsrs	r3, r3, #16
 80062f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d108      	bne.n	8006310 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	0e1b      	lsrs	r3, r3, #24
 8006302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800630c:	429a      	cmp	r2, r3
 800630e:	d001      	beq.n	8006314 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e02b      	b.n	800636c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006314:	4b17      	ldr	r3, [pc, #92]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 8006316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800631e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	429a      	cmp	r2, r3
 8006328:	d01f      	beq.n	800636a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	4a11      	ldr	r2, [pc, #68]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 8006330:	f023 0301 	bic.w	r3, r3, #1
 8006334:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006336:	f7fb fbc3 	bl	8001ac0 <HAL_GetTick>
 800633a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800633c:	bf00      	nop
 800633e:	f7fb fbbf 	bl	8001ac0 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	4293      	cmp	r3, r2
 8006348:	d0f9      	beq.n	800633e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800634a:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 800634c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634e:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <HAL_RCC_OscConfig+0x7b0>)
 8006350:	4013      	ands	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006356:	00d2      	lsls	r2, r2, #3
 8006358:	4906      	ldr	r1, [pc, #24]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 800635a:	4313      	orrs	r3, r2
 800635c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800635e:	4b05      	ldr	r3, [pc, #20]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 8006360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <HAL_RCC_OscConfig+0x7ac>)
 8006364:	f043 0301 	orr.w	r3, r3, #1
 8006368:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3730      	adds	r7, #48	; 0x30
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	58024400 	.word	0x58024400
 8006378:	ffff0007 	.word	0xffff0007

0800637c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e19c      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006390:	4b8a      	ldr	r3, [pc, #552]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d910      	bls.n	80063c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639e:	4b87      	ldr	r3, [pc, #540]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 020f 	bic.w	r2, r3, #15
 80063a6:	4985      	ldr	r1, [pc, #532]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ae:	4b83      	ldr	r3, [pc, #524]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 030f 	and.w	r3, r3, #15
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e184      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	691a      	ldr	r2, [r3, #16]
 80063d0:	4b7b      	ldr	r3, [pc, #492]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063d8:	429a      	cmp	r2, r3
 80063da:	d908      	bls.n	80063ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80063dc:	4b78      	ldr	r3, [pc, #480]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	4975      	ldr	r1, [pc, #468]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0308 	and.w	r3, r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695a      	ldr	r2, [r3, #20]
 80063fe:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006406:	429a      	cmp	r2, r3
 8006408:	d908      	bls.n	800641c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800640a:	4b6d      	ldr	r3, [pc, #436]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	496a      	ldr	r1, [pc, #424]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006418:	4313      	orrs	r3, r2
 800641a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b00      	cmp	r3, #0
 8006426:	d010      	beq.n	800644a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699a      	ldr	r2, [r3, #24]
 800642c:	4b64      	ldr	r3, [pc, #400]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006434:	429a      	cmp	r2, r3
 8006436:	d908      	bls.n	800644a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006438:	4b61      	ldr	r3, [pc, #388]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800643a:	69db      	ldr	r3, [r3, #28]
 800643c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	495e      	ldr	r1, [pc, #376]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006446:	4313      	orrs	r3, r2
 8006448:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d010      	beq.n	8006478 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	4b59      	ldr	r3, [pc, #356]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006462:	429a      	cmp	r2, r3
 8006464:	d908      	bls.n	8006478 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006466:	4b56      	ldr	r3, [pc, #344]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	4953      	ldr	r1, [pc, #332]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006474:	4313      	orrs	r3, r2
 8006476:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d010      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	4b4d      	ldr	r3, [pc, #308]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	429a      	cmp	r2, r3
 8006492:	d908      	bls.n	80064a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006494:	4b4a      	ldr	r3, [pc, #296]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	f023 020f 	bic.w	r2, r3, #15
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	4947      	ldr	r1, [pc, #284]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d055      	beq.n	800655e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80064b2:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4940      	ldr	r1, [pc, #256]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d107      	bne.n	80064dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064cc:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d121      	bne.n	800651c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e0f6      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d107      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064e4:	4b36      	ldr	r3, [pc, #216]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d115      	bne.n	800651c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0ea      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d107      	bne.n	800650c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d109      	bne.n	800651c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e0de      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800650c:	4b2c      	ldr	r3, [pc, #176]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0d6      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800651c:	4b28      	ldr	r3, [pc, #160]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f023 0207 	bic.w	r2, r3, #7
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4925      	ldr	r1, [pc, #148]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800652a:	4313      	orrs	r3, r2
 800652c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800652e:	f7fb fac7 	bl	8001ac0 <HAL_GetTick>
 8006532:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006534:	e00a      	b.n	800654c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006536:	f7fb fac3 	bl	8001ac0 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	f241 3288 	movw	r2, #5000	; 0x1388
 8006544:	4293      	cmp	r3, r2
 8006546:	d901      	bls.n	800654c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e0be      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654c:	4b1c      	ldr	r3, [pc, #112]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	429a      	cmp	r2, r3
 800655c:	d1eb      	bne.n	8006536 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d010      	beq.n	800658c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f003 030f 	and.w	r3, r3, #15
 8006576:	429a      	cmp	r2, r3
 8006578:	d208      	bcs.n	800658c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800657a:	4b11      	ldr	r3, [pc, #68]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	f023 020f 	bic.w	r2, r3, #15
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	490e      	ldr	r1, [pc, #56]	; (80065c0 <HAL_RCC_ClockConfig+0x244>)
 8006588:	4313      	orrs	r3, r2
 800658a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 030f 	and.w	r3, r3, #15
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d214      	bcs.n	80065c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f023 020f 	bic.w	r2, r3, #15
 80065a2:	4906      	ldr	r1, [pc, #24]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065aa:	4b04      	ldr	r3, [pc, #16]	; (80065bc <HAL_RCC_ClockConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d005      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e086      	b.n	80066ca <HAL_RCC_ClockConfig+0x34e>
 80065bc:	52002000 	.word	0x52002000
 80065c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d010      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691a      	ldr	r2, [r3, #16]
 80065d4:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065dc:	429a      	cmp	r2, r3
 80065de:	d208      	bcs.n	80065f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065e0:	4b3c      	ldr	r3, [pc, #240]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 80065e2:	699b      	ldr	r3, [r3, #24]
 80065e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	4939      	ldr	r1, [pc, #228]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	4b34      	ldr	r3, [pc, #208]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800660a:	429a      	cmp	r2, r3
 800660c:	d208      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800660e:	4b31      	ldr	r3, [pc, #196]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	492e      	ldr	r1, [pc, #184]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 800661c:	4313      	orrs	r3, r2
 800661e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d010      	beq.n	800664e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006632:	69db      	ldr	r3, [r3, #28]
 8006634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006638:	429a      	cmp	r2, r3
 800663a:	d208      	bcs.n	800664e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800663c:	4b25      	ldr	r3, [pc, #148]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	4922      	ldr	r1, [pc, #136]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 800664a:	4313      	orrs	r3, r2
 800664c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d010      	beq.n	800667c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006666:	429a      	cmp	r2, r3
 8006668:	d208      	bcs.n	800667c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800666a:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	4917      	ldr	r1, [pc, #92]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006678:	4313      	orrs	r3, r2
 800667a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800667c:	f000 f834 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 8006680:	4602      	mov	r2, r0
 8006682:	4b14      	ldr	r3, [pc, #80]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	4912      	ldr	r1, [pc, #72]	; (80066d8 <HAL_RCC_ClockConfig+0x35c>)
 800668e:	5ccb      	ldrb	r3, [r1, r3]
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
 8006698:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800669a:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <HAL_RCC_ClockConfig+0x358>)
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	4a0d      	ldr	r2, [pc, #52]	; (80066d8 <HAL_RCC_ClockConfig+0x35c>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
 80066a6:	f003 031f 	and.w	r3, r3, #31
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <HAL_RCC_ClockConfig+0x360>)
 80066b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80066b4:	4a0a      	ldr	r2, [pc, #40]	; (80066e0 <HAL_RCC_ClockConfig+0x364>)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <HAL_RCC_ClockConfig+0x368>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fb f86c 	bl	800179c <HAL_InitTick>
 80066c4:	4603      	mov	r3, r0
 80066c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400
 80066d8:	08011418 	.word	0x08011418
 80066dc:	24000004 	.word	0x24000004
 80066e0:	24000000 	.word	0x24000000
 80066e4:	24000008 	.word	0x24000008

080066e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b089      	sub	sp, #36	; 0x24
 80066ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066ee:	4bb3      	ldr	r3, [pc, #716]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f6:	2b18      	cmp	r3, #24
 80066f8:	f200 8155 	bhi.w	80069a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <HAL_RCC_GetSysClockFreq+0x1c>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006769 	.word	0x08006769
 8006708:	080069a7 	.word	0x080069a7
 800670c:	080069a7 	.word	0x080069a7
 8006710:	080069a7 	.word	0x080069a7
 8006714:	080069a7 	.word	0x080069a7
 8006718:	080069a7 	.word	0x080069a7
 800671c:	080069a7 	.word	0x080069a7
 8006720:	080069a7 	.word	0x080069a7
 8006724:	0800678f 	.word	0x0800678f
 8006728:	080069a7 	.word	0x080069a7
 800672c:	080069a7 	.word	0x080069a7
 8006730:	080069a7 	.word	0x080069a7
 8006734:	080069a7 	.word	0x080069a7
 8006738:	080069a7 	.word	0x080069a7
 800673c:	080069a7 	.word	0x080069a7
 8006740:	080069a7 	.word	0x080069a7
 8006744:	08006795 	.word	0x08006795
 8006748:	080069a7 	.word	0x080069a7
 800674c:	080069a7 	.word	0x080069a7
 8006750:	080069a7 	.word	0x080069a7
 8006754:	080069a7 	.word	0x080069a7
 8006758:	080069a7 	.word	0x080069a7
 800675c:	080069a7 	.word	0x080069a7
 8006760:	080069a7 	.word	0x080069a7
 8006764:	0800679b 	.word	0x0800679b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006768:	4b94      	ldr	r3, [pc, #592]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d009      	beq.n	8006788 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006774:	4b91      	ldr	r3, [pc, #580]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	08db      	lsrs	r3, r3, #3
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	4a90      	ldr	r2, [pc, #576]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006780:	fa22 f303 	lsr.w	r3, r2, r3
 8006784:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006786:	e111      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006788:	4b8d      	ldr	r3, [pc, #564]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800678a:	61bb      	str	r3, [r7, #24]
      break;
 800678c:	e10e      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800678e:	4b8d      	ldr	r3, [pc, #564]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006790:	61bb      	str	r3, [r7, #24]
      break;
 8006792:	e10b      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006794:	4b8c      	ldr	r3, [pc, #560]	; (80069c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006796:	61bb      	str	r3, [r7, #24]
      break;
 8006798:	e108      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800679a:	4b88      	ldr	r3, [pc, #544]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80067a4:	4b85      	ldr	r3, [pc, #532]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80067b0:	4b82      	ldr	r3, [pc, #520]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	f003 0301 	and.w	r3, r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80067ba:	4b80      	ldr	r3, [pc, #512]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067be:	08db      	lsrs	r3, r3, #3
 80067c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	fb02 f303 	mul.w	r3, r2, r3
 80067ca:	ee07 3a90 	vmov	s15, r3
 80067ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 80e1 	beq.w	80069a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	f000 8083 	beq.w	80068ec <HAL_RCC_GetSysClockFreq+0x204>
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	f200 80a1 	bhi.w	8006930 <HAL_RCC_GetSysClockFreq+0x248>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_RCC_GetSysClockFreq+0x114>
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d056      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80067fa:	e099      	b.n	8006930 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067fc:	4b6f      	ldr	r3, [pc, #444]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02d      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006808:	4b6c      	ldr	r3, [pc, #432]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	08db      	lsrs	r3, r3, #3
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	4a6b      	ldr	r2, [pc, #428]	; (80069c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b62      	ldr	r3, [pc, #392]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a02 	vldr	s12, [r7, #8]
 8006846:	eddf 5a61 	vldr	s11, [pc, #388]	; 80069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006862:	e087      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	ee07 3a90 	vmov	s15, r3
 800686a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800686e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80069d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006876:	4b51      	ldr	r3, [pc, #324]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	ed97 6a02 	vldr	s12, [r7, #8]
 800688a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800688e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800689e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068a6:	e065      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80069d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b40      	ldr	r3, [pc, #256]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80068ea:	e043      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80069d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b2f      	ldr	r3, [pc, #188]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006912:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800692e:	e021      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80069d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800693e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006942:	4b1e      	ldr	r3, [pc, #120]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006952:	ed97 6a02 	vldr	s12, [r7, #8]
 8006956:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80069cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800695a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800696a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006972:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006974:	4b11      	ldr	r3, [pc, #68]	; (80069bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	0a5b      	lsrs	r3, r3, #9
 800697a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697e:	3301      	adds	r3, #1
 8006980:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	ee07 3a90 	vmov	s15, r3
 8006988:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800698c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006998:	ee17 3a90 	vmov	r3, s15
 800699c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800699e:	e005      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61bb      	str	r3, [r7, #24]
      break;
 80069a4:	e002      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069a8:	61bb      	str	r3, [r7, #24]
      break;
 80069aa:	bf00      	nop
  }

  return sysclockfreq;
 80069ac:	69bb      	ldr	r3, [r7, #24]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3724      	adds	r7, #36	; 0x24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	58024400 	.word	0x58024400
 80069c0:	03d09000 	.word	0x03d09000
 80069c4:	003d0900 	.word	0x003d0900
 80069c8:	017d7840 	.word	0x017d7840
 80069cc:	46000000 	.word	0x46000000
 80069d0:	4c742400 	.word	0x4c742400
 80069d4:	4a742400 	.word	0x4a742400
 80069d8:	4bbebc20 	.word	0x4bbebc20

080069dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069e2:	f7ff fe81 	bl	80066e8 <HAL_RCC_GetSysClockFreq>
 80069e6:	4602      	mov	r2, r0
 80069e8:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <HAL_RCC_GetHCLKFreq+0x50>)
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	0a1b      	lsrs	r3, r3, #8
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	490f      	ldr	r1, [pc, #60]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x54>)
 80069f4:	5ccb      	ldrb	r3, [r1, r3]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <HAL_RCC_GetHCLKFreq+0x50>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	4a09      	ldr	r2, [pc, #36]	; (8006a30 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a0a:	5cd3      	ldrb	r3, [r2, r3]
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	4a07      	ldr	r2, [pc, #28]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a1a:	4a07      	ldr	r2, [pc, #28]	; (8006a38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006a20:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x58>)
 8006a22:	681b      	ldr	r3, [r3, #0]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	58024400 	.word	0x58024400
 8006a30:	08011418 	.word	0x08011418
 8006a34:	24000004 	.word	0x24000004
 8006a38:	24000000 	.word	0x24000000

08006a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006a40:	f7ff ffcc 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 8006a44:	4602      	mov	r2, r0
 8006a46:	4b06      	ldr	r3, [pc, #24]	; (8006a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	091b      	lsrs	r3, r3, #4
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4904      	ldr	r1, [pc, #16]	; (8006a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	f003 031f 	and.w	r3, r3, #31
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	58024400 	.word	0x58024400
 8006a64:	08011418 	.word	0x08011418

08006a68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	223f      	movs	r2, #63	; 0x3f
 8006a76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a78:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	f003 0207 	and.w	r2, r3, #7
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006a84:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006a90:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006ac0:	4b08      	ldr	r3, [pc, #32]	; (8006ae4 <HAL_RCC_GetClockConfig+0x7c>)
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_RCC_GetClockConfig+0x80>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 020f 	and.w	r2, r3, #15
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	601a      	str	r2, [r3, #0]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	58024400 	.word	0x58024400
 8006ae8:	52002000 	.word	0x52002000

08006aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006af0:	b0c6      	sub	sp, #280	; 0x118
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006afe:	2300      	movs	r3, #0
 8006b00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006b10:	2500      	movs	r5, #0
 8006b12:	ea54 0305 	orrs.w	r3, r4, r5
 8006b16:	d049      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b22:	d02f      	beq.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b28:	d828      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b2e:	d01a      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b34:	d822      	bhi.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b3e:	d007      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b40:	e01c      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b42:	4bab      	ldr	r3, [pc, #684]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b46:	4aaa      	ldr	r2, [pc, #680]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b4e:	e01a      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b54:	3308      	adds	r3, #8
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 fa49 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b64:	e00f      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	3328      	adds	r3, #40	; 0x28
 8006b6c:	2102      	movs	r1, #2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 faf0 	bl	8009154 <RCCEx_PLL3_Config>
 8006b74:	4603      	mov	r3, r0
 8006b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b7a:	e004      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b82:	e000      	b.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006b8e:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b9c:	4a94      	ldr	r2, [pc, #592]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	6513      	str	r3, [r2, #80]	; 0x50
 8006ba2:	e003      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ba8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006bb8:	f04f 0900 	mov.w	r9, #0
 8006bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8006bc0:	d047      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d82a      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006bcc:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd2:	bf00      	nop
 8006bd4:	08006be9 	.word	0x08006be9
 8006bd8:	08006bf7 	.word	0x08006bf7
 8006bdc:	08006c0d 	.word	0x08006c0d
 8006be0:	08006c2b 	.word	0x08006c2b
 8006be4:	08006c2b 	.word	0x08006c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006be8:	4b81      	ldr	r3, [pc, #516]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bec:	4a80      	ldr	r2, [pc, #512]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006bf4:	e01a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f002 f9f6 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006c04:	4603      	mov	r3, r0
 8006c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c0a:	e00f      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c10:	3328      	adds	r3, #40	; 0x28
 8006c12:	2100      	movs	r1, #0
 8006c14:	4618      	mov	r0, r3
 8006c16:	f002 fa9d 	bl	8009154 <RCCEx_PLL3_Config>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c20:	e004      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c28:	e000      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c34:	4b6e      	ldr	r3, [pc, #440]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c38:	f023 0107 	bic.w	r1, r3, #7
 8006c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c42:	4a6b      	ldr	r2, [pc, #428]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6513      	str	r3, [r2, #80]	; 0x50
 8006c48:	e003      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c66:	d05b      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c70:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c74:	d03b      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006c76:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006c7a:	d834      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c80:	d037      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006c82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c86:	d82e      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c8c:	d033      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006c8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006c92:	d828      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006c94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c98:	d01a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c9e:	d822      	bhi.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ca8:	d007      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8006caa:	e01c      	b.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cac:	4b50      	ldr	r3, [pc, #320]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a4f      	ldr	r2, [pc, #316]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006cb8:	e01e      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f002 f994 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006cce:	e013      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cd4:	3328      	adds	r3, #40	; 0x28
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f002 fa3b 	bl	8009154 <RCCEx_PLL3_Config>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cec:	e004      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006d00:	4b3b      	ldr	r3, [pc, #236]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d04:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d10:	4a37      	ldr	r2, [pc, #220]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d12:	430b      	orrs	r3, r1
 8006d14:	6593      	str	r3, [r2, #88]	; 0x58
 8006d16:	e003      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006d36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	d05d      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006d48:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006d4c:	d03b      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006d4e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006d52:	d834      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d58:	d037      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d5e:	d82e      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d64:	d033      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006d66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d6a:	d828      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d70:	d01a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d822      	bhi.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d003      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d80:	d007      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006d82:	e01c      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d84:	4b1a      	ldr	r3, [pc, #104]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006d8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006d90:	e01e      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d96:	3308      	adds	r3, #8
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f002 f928 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006da6:	e013      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dac:	3328      	adds	r3, #40	; 0x28
 8006dae:	2100      	movs	r1, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 f9cf 	bl	8009154 <RCCEx_PLL3_Config>
 8006db6:	4603      	mov	r3, r0
 8006db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006dc4:	e004      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dc6:	bf00      	nop
 8006dc8:	e002      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dca:	bf00      	nop
 8006dcc:	e000      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006dce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10d      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ddc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006de8:	4a01      	ldr	r2, [pc, #4]	; (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006dea:	430b      	orrs	r3, r1
 8006dec:	6593      	str	r3, [r2, #88]	; 0x58
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006df0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006df8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006e08:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e12:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	d03a      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e22:	2b30      	cmp	r3, #48	; 0x30
 8006e24:	d01f      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006e26:	2b30      	cmp	r3, #48	; 0x30
 8006e28:	d819      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e2a:	2b20      	cmp	r3, #32
 8006e2c:	d00c      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d815      	bhi.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e36:	2b10      	cmp	r3, #16
 8006e38:	d111      	bne.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e3a:	4baa      	ldr	r3, [pc, #680]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4aa9      	ldr	r2, [pc, #676]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e46:	e011      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4c:	3308      	adds	r3, #8
 8006e4e:	2102      	movs	r1, #2
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 f8cd 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006e5c:	e006      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e64:	e002      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e66:	bf00      	nop
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006e74:	4b9b      	ldr	r3, [pc, #620]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e78:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	4a98      	ldr	r2, [pc, #608]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e84:	430b      	orrs	r3, r1
 8006e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e88:	e003      	b.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006eac:	460b      	mov	r3, r1
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	d051      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ebc:	d035      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec2:	d82e      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ec4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ec8:	d031      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006eca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ece:	d828      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed4:	d01a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eda:	d822      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006ee6:	e01c      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee8:	4b7e      	ldr	r3, [pc, #504]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	4a7d      	ldr	r2, [pc, #500]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ef4:	e01c      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efa:	3308      	adds	r3, #8
 8006efc:	2100      	movs	r1, #0
 8006efe:	4618      	mov	r0, r3
 8006f00:	f002 f876 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006f04:	4603      	mov	r3, r0
 8006f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f10:	3328      	adds	r3, #40	; 0x28
 8006f12:	2100      	movs	r1, #0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 f91d 	bl	8009154 <RCCEx_PLL3_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006f20:	e006      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006f38:	4b6a      	ldr	r3, [pc, #424]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f3c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f46:	4a67      	ldr	r2, [pc, #412]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006f48:	430b      	orrs	r3, r1
 8006f4a:	6513      	str	r3, [r2, #80]	; 0x50
 8006f4c:	e003      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f66:	2300      	movs	r3, #0
 8006f68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f6c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d053      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f80:	d033      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f86:	d82c      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f8c:	d02f      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f92:	d826      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f98:	d02b      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f9e:	d820      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fa4:	d012      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006faa:	d81a      	bhi.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d022      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb4:	d115      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fba:	3308      	adds	r3, #8
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f002 f816 	bl	8008ff0 <RCCEx_PLL2_Config>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fca:	e015      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd0:	3328      	adds	r3, #40	; 0x28
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f002 f8bd 	bl	8009154 <RCCEx_PLL3_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fe8:	e006      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fea:	bf00      	nop
 8006fec:	e004      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006fee:	bf00      	nop
 8006ff0:	e002      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10a      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007000:	4b38      	ldr	r3, [pc, #224]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800700c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800700e:	4a35      	ldr	r2, [pc, #212]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6513      	str	r3, [r2, #80]	; 0x50
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800701a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800701e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800702a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800702e:	2300      	movs	r3, #0
 8007030:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007034:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007038:	460b      	mov	r3, r1
 800703a:	4313      	orrs	r3, r2
 800703c:	d058      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800704a:	d033      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800704c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007050:	d82c      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d02f      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800705c:	d826      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800705e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007062:	d02b      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007068:	d820      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800706a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706e:	d012      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007074:	d81a      	bhi.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d022      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800707a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707e:	d115      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007084:	3308      	adds	r3, #8
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f001 ffb1 	bl	8008ff0 <RCCEx_PLL2_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007094:	e015      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800709a:	3328      	adds	r3, #40	; 0x28
 800709c:	2101      	movs	r1, #1
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 f858 	bl	8009154 <RCCEx_PLL3_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80070aa:	e00a      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070b2:	e006      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070b4:	bf00      	nop
 80070b6:	e004      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070b8:	bf00      	nop
 80070ba:	e002      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070bc:	bf00      	nop
 80070be:	e000      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80070c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10e      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80070ca:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80070da:	4a02      	ldr	r2, [pc, #8]	; (80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80070dc:	430b      	orrs	r3, r1
 80070de:	6593      	str	r3, [r2, #88]	; 0x58
 80070e0:	e006      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80070e2:	bf00      	nop
 80070e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80070fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007100:	2300      	movs	r3, #0
 8007102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007106:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800710a:	460b      	mov	r3, r1
 800710c:	4313      	orrs	r3, r2
 800710e:	d037      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711a:	d00e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800711c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007120:	d816      	bhi.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d018      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800712a:	d111      	bne.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4bc4      	ldr	r3, [pc, #784]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4ac3      	ldr	r2, [pc, #780]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007138:	e00f      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	3308      	adds	r3, #8
 8007140:	2101      	movs	r1, #1
 8007142:	4618      	mov	r0, r3
 8007144:	f001 ff54 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007162:	4bb7      	ldr	r3, [pc, #732]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007166:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007170:	4ab3      	ldr	r2, [pc, #716]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007172:	430b      	orrs	r3, r1
 8007174:	6513      	str	r3, [r2, #80]	; 0x50
 8007176:	e003      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800717c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800718c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007196:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800719a:	460b      	mov	r3, r1
 800719c:	4313      	orrs	r3, r2
 800719e:	d039      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d81c      	bhi.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071c1 	.word	0x080071c1
 80071b8:	080071cf 	.word	0x080071cf
 80071bc:	080071ed 	.word	0x080071ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071c0:	4b9f      	ldr	r3, [pc, #636]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a9e      	ldr	r2, [pc, #632]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071cc:	e00f      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d2:	3308      	adds	r3, #8
 80071d4:	2102      	movs	r1, #2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f001 ff0a 	bl	8008ff0 <RCCEx_PLL2_Config>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80071e2:	e004      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80071ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071f6:	4b92      	ldr	r3, [pc, #584]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	f023 0103 	bic.w	r1, r3, #3
 80071fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007202:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007204:	4a8e      	ldr	r2, [pc, #568]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007206:	430b      	orrs	r3, r1
 8007208:	64d3      	str	r3, [r2, #76]	; 0x4c
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007210:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007220:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800722a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	f000 8099 	beq.w	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007236:	4b83      	ldr	r3, [pc, #524]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a82      	ldr	r2, [pc, #520]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800723c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007242:	f7fa fc3d 	bl	8001ac0 <HAL_GetTick>
 8007246:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724a:	e00b      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800724c:	f7fa fc38 	bl	8001ac0 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b64      	cmp	r3, #100	; 0x64
 800725a:	d903      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007262:	e005      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007264:	4b77      	ldr	r3, [pc, #476]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ed      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007274:	2b00      	cmp	r3, #0
 8007276:	d173      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007278:	4b71      	ldr	r3, [pc, #452]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800727a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007280:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007284:	4053      	eors	r3, r2
 8007286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800728e:	4b6c      	ldr	r3, [pc, #432]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007296:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800729a:	4b69      	ldr	r3, [pc, #420]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	4a68      	ldr	r2, [pc, #416]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a6:	4b66      	ldr	r3, [pc, #408]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	4a65      	ldr	r2, [pc, #404]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80072b2:	4a63      	ldr	r2, [pc, #396]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80072ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c6:	d118      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c8:	f7fa fbfa 	bl	8001ac0 <HAL_GetTick>
 80072cc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d0:	e00d      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d2:	f7fa fbf5 	bl	8001ac0 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80072dc:	1ad2      	subs	r2, r2, r3
 80072de:	f241 3388 	movw	r3, #5000	; 0x1388
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d903      	bls.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80072ec:	e005      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ee:	4b54      	ldr	r3, [pc, #336]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0eb      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80072fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d129      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007306:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007312:	d10e      	bne.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007314:	4b4a      	ldr	r3, [pc, #296]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007324:	091a      	lsrs	r2, r3, #4
 8007326:	4b48      	ldr	r3, [pc, #288]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007328:	4013      	ands	r3, r2
 800732a:	4a45      	ldr	r2, [pc, #276]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800732c:	430b      	orrs	r3, r1
 800732e:	6113      	str	r3, [r2, #16]
 8007330:	e005      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007332:	4b43      	ldr	r3, [pc, #268]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	4a42      	ldr	r2, [pc, #264]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007338:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800733c:	6113      	str	r3, [r2, #16]
 800733e:	4b40      	ldr	r3, [pc, #256]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007340:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800734a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800734e:	4a3c      	ldr	r2, [pc, #240]	; (8007440 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6713      	str	r3, [r2, #112]	; 0x70
 8007354:	e008      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800735a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800735e:	e003      	b.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007364:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	f002 0301 	and.w	r3, r2, #1
 8007374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800737e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007382:	460b      	mov	r3, r1
 8007384:	4313      	orrs	r3, r2
 8007386:	f000 808f 	beq.w	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007390:	2b28      	cmp	r3, #40	; 0x28
 8007392:	d871      	bhi.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	08007481 	.word	0x08007481
 80073a0:	08007479 	.word	0x08007479
 80073a4:	08007479 	.word	0x08007479
 80073a8:	08007479 	.word	0x08007479
 80073ac:	08007479 	.word	0x08007479
 80073b0:	08007479 	.word	0x08007479
 80073b4:	08007479 	.word	0x08007479
 80073b8:	08007479 	.word	0x08007479
 80073bc:	0800744d 	.word	0x0800744d
 80073c0:	08007479 	.word	0x08007479
 80073c4:	08007479 	.word	0x08007479
 80073c8:	08007479 	.word	0x08007479
 80073cc:	08007479 	.word	0x08007479
 80073d0:	08007479 	.word	0x08007479
 80073d4:	08007479 	.word	0x08007479
 80073d8:	08007479 	.word	0x08007479
 80073dc:	08007463 	.word	0x08007463
 80073e0:	08007479 	.word	0x08007479
 80073e4:	08007479 	.word	0x08007479
 80073e8:	08007479 	.word	0x08007479
 80073ec:	08007479 	.word	0x08007479
 80073f0:	08007479 	.word	0x08007479
 80073f4:	08007479 	.word	0x08007479
 80073f8:	08007479 	.word	0x08007479
 80073fc:	08007481 	.word	0x08007481
 8007400:	08007479 	.word	0x08007479
 8007404:	08007479 	.word	0x08007479
 8007408:	08007479 	.word	0x08007479
 800740c:	08007479 	.word	0x08007479
 8007410:	08007479 	.word	0x08007479
 8007414:	08007479 	.word	0x08007479
 8007418:	08007479 	.word	0x08007479
 800741c:	08007481 	.word	0x08007481
 8007420:	08007479 	.word	0x08007479
 8007424:	08007479 	.word	0x08007479
 8007428:	08007479 	.word	0x08007479
 800742c:	08007479 	.word	0x08007479
 8007430:	08007479 	.word	0x08007479
 8007434:	08007479 	.word	0x08007479
 8007438:	08007479 	.word	0x08007479
 800743c:	08007481 	.word	0x08007481
 8007440:	58024400 	.word	0x58024400
 8007444:	58024800 	.word	0x58024800
 8007448:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800744c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007450:	3308      	adds	r3, #8
 8007452:	2101      	movs	r1, #1
 8007454:	4618      	mov	r0, r3
 8007456:	f001 fdcb 	bl	8008ff0 <RCCEx_PLL2_Config>
 800745a:	4603      	mov	r3, r0
 800745c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007460:	e00f      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007466:	3328      	adds	r3, #40	; 0x28
 8007468:	2101      	movs	r1, #1
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fe72 	bl	8009154 <RCCEx_PLL3_Config>
 8007470:	4603      	mov	r3, r0
 8007472:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007476:	e004      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800747e:	e000      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007482:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10a      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800748a:	4bbf      	ldr	r3, [pc, #764]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007492:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007496:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007498:	4abb      	ldr	r2, [pc, #748]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800749a:	430b      	orrs	r3, r1
 800749c:	6553      	str	r3, [r2, #84]	; 0x54
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f002 0302 	and.w	r3, r2, #2
 80074b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074be:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80074c2:	460b      	mov	r3, r1
 80074c4:	4313      	orrs	r3, r2
 80074c6:	d041      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ce:	2b05      	cmp	r3, #5
 80074d0:	d824      	bhi.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	08007525 	.word	0x08007525
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	08007507 	.word	0x08007507
 80074e4:	08007525 	.word	0x08007525
 80074e8:	08007525 	.word	0x08007525
 80074ec:	08007525 	.word	0x08007525
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074f4:	3308      	adds	r3, #8
 80074f6:	2101      	movs	r1, #1
 80074f8:	4618      	mov	r0, r3
 80074fa:	f001 fd79 	bl	8008ff0 <RCCEx_PLL2_Config>
 80074fe:	4603      	mov	r3, r0
 8007500:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007504:	e00f      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800750a:	3328      	adds	r3, #40	; 0x28
 800750c:	2101      	movs	r1, #1
 800750e:	4618      	mov	r0, r3
 8007510:	f001 fe20 	bl	8009154 <RCCEx_PLL3_Config>
 8007514:	4603      	mov	r3, r0
 8007516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800752e:	4b96      	ldr	r3, [pc, #600]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007532:	f023 0107 	bic.w	r1, r3, #7
 8007536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753c:	4a92      	ldr	r2, [pc, #584]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800753e:	430b      	orrs	r3, r1
 8007540:	6553      	str	r3, [r2, #84]	; 0x54
 8007542:	e003      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007544:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007548:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800754c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	f002 0304 	and.w	r3, r2, #4
 8007558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800755c:	2300      	movs	r3, #0
 800755e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007562:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007566:	460b      	mov	r3, r1
 8007568:	4313      	orrs	r3, r2
 800756a:	d044      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800756c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007574:	2b05      	cmp	r3, #5
 8007576:	d825      	bhi.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8007578:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075cd 	.word	0x080075cd
 8007584:	08007599 	.word	0x08007599
 8007588:	080075af 	.word	0x080075af
 800758c:	080075cd 	.word	0x080075cd
 8007590:	080075cd 	.word	0x080075cd
 8007594:	080075cd 	.word	0x080075cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	3308      	adds	r3, #8
 800759e:	2101      	movs	r1, #1
 80075a0:	4618      	mov	r0, r3
 80075a2:	f001 fd25 	bl	8008ff0 <RCCEx_PLL2_Config>
 80075a6:	4603      	mov	r3, r0
 80075a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075ac:	e00f      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	3328      	adds	r3, #40	; 0x28
 80075b4:	2101      	movs	r1, #1
 80075b6:	4618      	mov	r0, r3
 80075b8:	f001 fdcc 	bl	8009154 <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80075c2:	e004      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80075ca:	e000      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80075cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075d6:	4b6c      	ldr	r3, [pc, #432]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075da:	f023 0107 	bic.w	r1, r3, #7
 80075de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	4a68      	ldr	r2, [pc, #416]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	6593      	str	r3, [r2, #88]	; 0x58
 80075ec:	e003      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f002 0320 	and.w	r3, r2, #32
 8007602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007606:	2300      	movs	r3, #0
 8007608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800760c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007610:	460b      	mov	r3, r1
 8007612:	4313      	orrs	r3, r2
 8007614:	d055      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800761e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007622:	d033      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007628:	d82c      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800762e:	d02f      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007634:	d826      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800763a:	d02b      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800763c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007640:	d820      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007646:	d012      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8007648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764c:	d81a      	bhi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d022      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007656:	d115      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800765c:	3308      	adds	r3, #8
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fcc5 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800766c:	e015      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800766e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007672:	3328      	adds	r3, #40	; 0x28
 8007674:	2102      	movs	r1, #2
 8007676:	4618      	mov	r0, r3
 8007678:	f001 fd6c 	bl	8009154 <RCCEx_PLL3_Config>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007682:	e00a      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800768a:	e006      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800768c:	bf00      	nop
 800768e:	e004      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007690:	bf00      	nop
 8007692:	e002      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007694:	bf00      	nop
 8007696:	e000      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800769a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10b      	bne.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076a2:	4b39      	ldr	r3, [pc, #228]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b2:	4a35      	ldr	r2, [pc, #212]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80076b4:	430b      	orrs	r3, r1
 80076b6:	6553      	str	r3, [r2, #84]	; 0x54
 80076b8:	e003      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80076ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076d2:	2300      	movs	r3, #0
 80076d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076d8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80076dc:	460b      	mov	r3, r1
 80076de:	4313      	orrs	r3, r2
 80076e0:	d058      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80076e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076ee:	d033      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80076f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076f4:	d82c      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80076f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fa:	d02f      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80076fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007700:	d826      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007706:	d02b      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007708:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800770c:	d820      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800770e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007712:	d012      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007718:	d81a      	bhi.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d022      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800771e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007722:	d115      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007728:	3308      	adds	r3, #8
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f001 fc5f 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007732:	4603      	mov	r3, r0
 8007734:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007738:	e015      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800773a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800773e:	3328      	adds	r3, #40	; 0x28
 8007740:	2102      	movs	r1, #2
 8007742:	4618      	mov	r0, r3
 8007744:	f001 fd06 	bl	8009154 <RCCEx_PLL3_Config>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800774e:	e00a      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007756:	e006      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007758:	bf00      	nop
 800775a:	e004      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800775c:	bf00      	nop
 800775e:	e002      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007764:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007766:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10e      	bne.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800776e:	4b06      	ldr	r3, [pc, #24]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007772:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800777a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800777e:	4a02      	ldr	r2, [pc, #8]	; (8007788 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007780:	430b      	orrs	r3, r1
 8007782:	6593      	str	r3, [r2, #88]	; 0x58
 8007784:	e006      	b.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8007786:	bf00      	nop
 8007788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800778c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007790:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80077a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80077ae:	460b      	mov	r3, r1
 80077b0:	4313      	orrs	r3, r2
 80077b2:	d055      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80077b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077c0:	d033      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80077c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80077c6:	d82c      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077cc:	d02f      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80077ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d2:	d826      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077d8:	d02b      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80077da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80077de:	d820      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e4:	d012      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80077e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ea:	d81a      	bhi.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d022      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077f4:	d115      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077fa:	3308      	adds	r3, #8
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 fbf6 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007804:	4603      	mov	r3, r0
 8007806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800780a:	e015      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	3328      	adds	r3, #40	; 0x28
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f001 fc9d 	bl	8009154 <RCCEx_PLL3_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007820:	e00a      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007828:	e006      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800782a:	bf00      	nop
 800782c:	e004      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800782e:	bf00      	nop
 8007830:	e002      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007832:	bf00      	nop
 8007834:	e000      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007836:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10b      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007840:	4ba0      	ldr	r3, [pc, #640]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007844:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800784c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007850:	4a9c      	ldr	r2, [pc, #624]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007852:	430b      	orrs	r3, r1
 8007854:	6593      	str	r3, [r2, #88]	; 0x58
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800785c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f002 0308 	and.w	r3, r2, #8
 800786c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007876:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	d01e      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d10c      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800788e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007892:	3328      	adds	r3, #40	; 0x28
 8007894:	2102      	movs	r1, #2
 8007896:	4618      	mov	r0, r3
 8007898:	f001 fc5c 	bl	8009154 <RCCEx_PLL3_Config>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80078a8:	4b86      	ldr	r3, [pc, #536]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078b8:	4a82      	ldr	r2, [pc, #520]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80078ba:	430b      	orrs	r3, r1
 80078bc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c6:	f002 0310 	and.w	r3, r2, #16
 80078ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078ce:	2300      	movs	r3, #0
 80078d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078d4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80078d8:	460b      	mov	r3, r1
 80078da:	4313      	orrs	r3, r2
 80078dc:	d01e      	beq.n	800791c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ea:	d10c      	bne.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80078ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078f0:	3328      	adds	r3, #40	; 0x28
 80078f2:	2102      	movs	r1, #2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 fc2d 	bl	8009154 <RCCEx_PLL3_Config>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007906:	4b6f      	ldr	r3, [pc, #444]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800790e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007916:	4a6b      	ldr	r2, [pc, #428]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007918:	430b      	orrs	r3, r1
 800791a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800791c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007924:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007928:	67bb      	str	r3, [r7, #120]	; 0x78
 800792a:	2300      	movs	r3, #0
 800792c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800792e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007932:	460b      	mov	r3, r1
 8007934:	4313      	orrs	r3, r2
 8007936:	d03e      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800793c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007940:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007944:	d022      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800794a:	d81b      	bhi.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007954:	d00b      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8007956:	e015      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795c:	3308      	adds	r3, #8
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f001 fb45 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007966:	4603      	mov	r3, r0
 8007968:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800796c:	e00f      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800796e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007972:	3328      	adds	r3, #40	; 0x28
 8007974:	2102      	movs	r1, #2
 8007976:	4618      	mov	r0, r3
 8007978:	f001 fbec 	bl	8009154 <RCCEx_PLL3_Config>
 800797c:	4603      	mov	r3, r0
 800797e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007982:	e004      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800798a:	e000      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800798c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800798e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10b      	bne.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007996:	4b4b      	ldr	r3, [pc, #300]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800799a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079a6:	4a47      	ldr	r2, [pc, #284]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079a8:	430b      	orrs	r3, r1
 80079aa:	6593      	str	r3, [r2, #88]	; 0x58
 80079ac:	e003      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80079b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80079b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80079c2:	673b      	str	r3, [r7, #112]	; 0x70
 80079c4:	2300      	movs	r3, #0
 80079c6:	677b      	str	r3, [r7, #116]	; 0x74
 80079c8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80079cc:	460b      	mov	r3, r1
 80079ce:	4313      	orrs	r3, r2
 80079d0:	d03b      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079de:	d01f      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80079e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e4:	d818      	bhi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80079e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ea:	d003      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80079ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f0:	d007      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80079f2:	e011      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f4:	4b33      	ldr	r3, [pc, #204]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f8:	4a32      	ldr	r2, [pc, #200]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80079fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a00:	e00f      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a06:	3328      	adds	r3, #40	; 0x28
 8007a08:	2101      	movs	r1, #1
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f001 fba2 	bl	8009154 <RCCEx_PLL3_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8007a16:	e004      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007a1e:	e000      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007a2a:	4b26      	ldr	r3, [pc, #152]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3a:	4a22      	ldr	r2, [pc, #136]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6553      	str	r3, [r2, #84]	; 0x54
 8007a40:	e003      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007a46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8007a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a58:	2300      	movs	r3, #0
 8007a5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a5c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007a60:	460b      	mov	r3, r1
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d034      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a74:	d007      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8007a76:	e011      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a78:	4b12      	ldr	r3, [pc, #72]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a84:	e00e      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f001 faae 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007a9a:	e003      	b.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ab0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aba:	4a02      	ldr	r2, [pc, #8]	; (8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007abc:	430b      	orrs	r3, r1
 8007abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ac0:	e006      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007ac2:	bf00      	nop
 8007ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007acc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007adc:	663b      	str	r3, [r7, #96]	; 0x60
 8007ade:	2300      	movs	r3, #0
 8007ae0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ae2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	d00c      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007af0:	3328      	adds	r3, #40	; 0x28
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f001 fb2d 	bl	8009154 <RCCEx_PLL3_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007b12:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b14:	2300      	movs	r3, #0
 8007b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b18:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	d036      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b2c:	d018      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007b2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b32:	d811      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b38:	d014      	beq.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b3e:	d80b      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d011      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b48:	d106      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b4a:	4bb7      	ldr	r3, [pc, #732]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4e:	4ab6      	ldr	r2, [pc, #728]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007b56:	e008      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007b5e:	e004      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b60:	bf00      	nop
 8007b62:	e002      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b64:	bf00      	nop
 8007b66:	e000      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b72:	4bad      	ldr	r3, [pc, #692]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b80:	4aa9      	ldr	r2, [pc, #676]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007b82:	430b      	orrs	r3, r1
 8007b84:	6553      	str	r3, [r2, #84]	; 0x54
 8007b86:	e003      	b.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007b8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8007ba2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	d009      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bac:	4b9e      	ldr	r3, [pc, #632]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	4a9b      	ldr	r2, [pc, #620]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bbc:	430b      	orrs	r3, r1
 8007bbe:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007bcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bce:	2300      	movs	r3, #0
 8007bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d009      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007bdc:	4b92      	ldr	r3, [pc, #584]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bea:	4a8f      	ldr	r2, [pc, #572]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8007bfe:	2300      	movs	r3, #0
 8007c00:	647b      	str	r3, [r7, #68]	; 0x44
 8007c02:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007c06:	460b      	mov	r3, r1
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	d00e      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c0c:	4b86      	ldr	r3, [pc, #536]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	4a85      	ldr	r2, [pc, #532]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c16:	6113      	str	r3, [r2, #16]
 8007c18:	4b83      	ldr	r3, [pc, #524]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c1a:	6919      	ldr	r1, [r3, #16]
 8007c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c24:	4a80      	ldr	r2, [pc, #512]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c26:	430b      	orrs	r3, r1
 8007c28:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c32:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c38:	2300      	movs	r3, #0
 8007c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c3c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007c40:	460b      	mov	r3, r1
 8007c42:	4313      	orrs	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c46:	4b78      	ldr	r3, [pc, #480]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c54:	4a74      	ldr	r2, [pc, #464]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c56:	430b      	orrs	r3, r1
 8007c58:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007c66:	633b      	str	r3, [r7, #48]	; 0x30
 8007c68:	2300      	movs	r3, #0
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007c70:	460b      	mov	r3, r1
 8007c72:	4313      	orrs	r3, r2
 8007c74:	d00a      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c76:	4b6c      	ldr	r3, [pc, #432]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c86:	4a68      	ldr	r2, [pc, #416]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007c88:	430b      	orrs	r3, r1
 8007c8a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	2100      	movs	r1, #0
 8007c96:	62b9      	str	r1, [r7, #40]	; 0x28
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	d011      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cac:	3308      	adds	r3, #8
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f99d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007cc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6239      	str	r1, [r7, #32]
 8007cd8:	f003 0302 	and.w	r3, r3, #2
 8007cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cde:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	d011      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007cec:	3308      	adds	r3, #8
 8007cee:	2101      	movs	r1, #1
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f001 f97d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007cfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	2100      	movs	r1, #0
 8007d16:	61b9      	str	r1, [r7, #24]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007d22:	460b      	mov	r3, r1
 8007d24:	4313      	orrs	r3, r2
 8007d26:	d011      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f001 f95d 	bl	8008ff0 <RCCEx_PLL2_Config>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d003      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	2100      	movs	r1, #0
 8007d56:	6139      	str	r1, [r7, #16]
 8007d58:	f003 0308 	and.w	r3, r3, #8
 8007d5c:	617b      	str	r3, [r7, #20]
 8007d5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007d62:	460b      	mov	r3, r1
 8007d64:	4313      	orrs	r3, r2
 8007d66:	d011      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d6c:	3328      	adds	r3, #40	; 0x28
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f001 f9ef 	bl	8009154 <RCCEx_PLL3_Config>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007d88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	2100      	movs	r1, #0
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	f003 0310 	and.w	r3, r3, #16
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d011      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dac:	3328      	adds	r3, #40	; 0x28
 8007dae:	2101      	movs	r1, #1
 8007db0:	4618      	mov	r0, r3
 8007db2:	f001 f9cf 	bl	8009154 <RCCEx_PLL3_Config>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007dc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6039      	str	r1, [r7, #0]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	607b      	str	r3, [r7, #4]
 8007dde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007de2:	460b      	mov	r3, r1
 8007de4:	4313      	orrs	r3, r2
 8007de6:	d011      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dec:	3328      	adds	r3, #40	; 0x28
 8007dee:	2102      	movs	r1, #2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f001 f9af 	bl	8009154 <RCCEx_PLL3_Config>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007dfc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007e0c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007e14:	2300      	movs	r3, #0
 8007e16:	e000      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e26:	bf00      	nop
 8007e28:	58024400 	.word	0x58024400

08007e2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b090      	sub	sp, #64	; 0x40
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007e36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e3a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007e3e:	430b      	orrs	r3, r1
 8007e40:	f040 8094 	bne.w	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007e44:	4b9b      	ldr	r3, [pc, #620]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	f200 8087 	bhi.w	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007e56:	a201      	add	r2, pc, #4	; (adr r2, 8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5c:	08007e71 	.word	0x08007e71
 8007e60:	08007e99 	.word	0x08007e99
 8007e64:	08007ec1 	.word	0x08007ec1
 8007e68:	08007f5d 	.word	0x08007f5d
 8007e6c:	08007ee9 	.word	0x08007ee9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007e70:	4b90      	ldr	r3, [pc, #576]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e7c:	d108      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 ff62 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8c:	f000 bc93 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e94:	f000 bc8f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e98:	4b86      	ldr	r3, [pc, #536]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea4:	d108      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 fca6 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eb4:	f000 bc7f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ebc:	f000 bc7b 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ec0:	4b7c      	ldr	r3, [pc, #496]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ecc:	d108      	bne.n	8007ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fde6 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007edc:	f000 bc6b 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee4:	f000 bc67 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ee8:	4b72      	ldr	r3, [pc, #456]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ef2:	4b70      	ldr	r3, [pc, #448]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d109      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f04:	4b6b      	ldr	r3, [pc, #428]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	08db      	lsrs	r3, r3, #3
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	4a6a      	ldr	r2, [pc, #424]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
 8007f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f16:	e01f      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f18:	4b66      	ldr	r3, [pc, #408]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f24:	d106      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f2c:	d102      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f2e:	4b63      	ldr	r3, [pc, #396]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f32:	e011      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f34:	4b5f      	ldr	r3, [pc, #380]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f40:	d106      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f48:	d102      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f4a:	4b5d      	ldr	r3, [pc, #372]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007f54:	f000 bc2f 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007f58:	f000 bc2d 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007f5c:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f60:	f000 bc29 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f68:	f000 bc25 	b.w	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f70:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007f74:	430b      	orrs	r3, r1
 8007f76:	f040 80a7 	bne.w	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007f7a:	4b4e      	ldr	r3, [pc, #312]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007f82:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f8a:	d054      	beq.n	8008036 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f92:	f200 808b 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f9c:	f000 8083 	beq.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007fa6:	f200 8081 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fb0:	d02f      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fb8:	d878      	bhi.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fc6:	d012      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007fc8:	e070      	b.n	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fca:	4b3a      	ldr	r3, [pc, #232]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fd6:	d107      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 feb5 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fe6:	e3e6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fec:	e3e3      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fee:	4b31      	ldr	r3, [pc, #196]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ffa:	d107      	bne.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffc:	f107 0318 	add.w	r3, r7, #24
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fbfb 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800800a:	e3d4      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008010:	e3d1      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008012:	4b28      	ldr	r3, [pc, #160]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800801a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800801e:	d107      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008020:	f107 030c 	add.w	r3, r7, #12
 8008024:	4618      	mov	r0, r3
 8008026:	f000 fd3d 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800802e:	e3c2      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008034:	e3bf      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008036:	4b1f      	ldr	r3, [pc, #124]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800803e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008040:	4b1c      	ldr	r3, [pc, #112]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b04      	cmp	r3, #4
 800804a:	d10c      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008052:	4b18      	ldr	r3, [pc, #96]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	08db      	lsrs	r3, r3, #3
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	4a16      	ldr	r2, [pc, #88]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800805e:	fa22 f303 	lsr.w	r3, r2, r3
 8008062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008064:	e01e      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008072:	d106      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8008074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800807a:	d102      	bne.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800807e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008080:	e010      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008082:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800808a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800808e:	d106      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008096:	d102      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008098:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800809c:	e002      	b.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80080a2:	e388      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080a4:	e387      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80080a6:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080aa:	e384      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080b0:	e381      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080b2:	bf00      	nop
 80080b4:	58024400 	.word	0x58024400
 80080b8:	03d09000 	.word	0x03d09000
 80080bc:	003d0900 	.word	0x003d0900
 80080c0:	017d7840 	.word	0x017d7840
 80080c4:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80080c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080cc:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80080d0:	430b      	orrs	r3, r1
 80080d2:	f040 809c 	bne.w	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80080d6:	4b9e      	ldr	r3, [pc, #632]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80080d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80080de:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080e6:	d054      	beq.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080ee:	f200 808b 	bhi.w	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80080f8:	f000 8083 	beq.w	8008202 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80080fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008102:	f200 8081 	bhi.w	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800810c:	d02f      	beq.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008114:	d878      	bhi.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800811c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008122:	d012      	beq.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008124:	e070      	b.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008126:	4b8a      	ldr	r3, [pc, #552]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008132:	d107      	bne.n	8008144 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008138:	4618      	mov	r0, r3
 800813a:	f000 fe07 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008142:	e338      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008148:	e335      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800814a:	4b81      	ldr	r3, [pc, #516]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008156:	d107      	bne.n	8008168 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008158:	f107 0318 	add.w	r3, r7, #24
 800815c:	4618      	mov	r0, r3
 800815e:	f000 fb4d 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008166:	e326      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800816c:	e323      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800816e:	4b78      	ldr	r3, [pc, #480]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800817a:	d107      	bne.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800817c:	f107 030c 	add.w	r3, r7, #12
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fc8f 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800818a:	e314      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800818c:	2300      	movs	r3, #0
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008190:	e311      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008192:	4b6f      	ldr	r3, [pc, #444]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800819a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800819c:	4b6c      	ldr	r3, [pc, #432]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d10c      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d109      	bne.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ae:	4b68      	ldr	r3, [pc, #416]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	08db      	lsrs	r3, r3, #3
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	4a66      	ldr	r2, [pc, #408]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80081ba:	fa22 f303 	lsr.w	r3, r2, r3
 80081be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c0:	e01e      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80081c2:	4b63      	ldr	r3, [pc, #396]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d106      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80081d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081d6:	d102      	bne.n	80081de <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081d8:	4b5f      	ldr	r3, [pc, #380]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80081da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081dc:	e010      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081de:	4b5c      	ldr	r3, [pc, #368]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ea:	d106      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80081ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f2:	d102      	bne.n	80081fa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081f4:	4b59      	ldr	r3, [pc, #356]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80081f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f8:	e002      	b.n	8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081fa:	2300      	movs	r3, #0
 80081fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80081fe:	e2da      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008200:	e2d9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008202:	4b57      	ldr	r3, [pc, #348]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008206:	e2d6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800820c:	e2d3      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800820e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008212:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008216:	430b      	orrs	r3, r1
 8008218:	f040 80a7 	bne.w	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800821c:	4b4c      	ldr	r3, [pc, #304]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800821e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008220:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008224:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800822c:	d055      	beq.n	80082da <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008234:	f200 8096 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800823e:	f000 8084 	beq.w	800834a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008248:	f200 808c 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008252:	d030      	beq.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800825a:	f200 8083 	bhi.w	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800825e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826a:	d012      	beq.n	8008292 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800826c:	e07a      	b.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800826e:	4b38      	ldr	r3, [pc, #224]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800827a:	d107      	bne.n	800828c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800827c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fd63 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800828a:	e294      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008290:	e291      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008292:	4b2f      	ldr	r3, [pc, #188]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800829a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800829e:	d107      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a0:	f107 0318 	add.w	r3, r7, #24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 faa9 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ae:	e282      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082b4:	e27f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80082b6:	4b26      	ldr	r3, [pc, #152]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082c2:	d107      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082c4:	f107 030c 	add.w	r3, r7, #12
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fbeb 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082d2:	e270      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082d8:	e26d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082da:	4b1d      	ldr	r3, [pc, #116]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082e4:	4b1a      	ldr	r3, [pc, #104]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d10c      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80082f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d109      	bne.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082f6:	4b16      	ldr	r3, [pc, #88]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	08db      	lsrs	r3, r3, #3
 80082fc:	f003 0303 	and.w	r3, r3, #3
 8008300:	4a14      	ldr	r2, [pc, #80]	; (8008354 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8008302:	fa22 f303 	lsr.w	r3, r2, r3
 8008306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008308:	e01e      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800830a:	4b11      	ldr	r3, [pc, #68]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008316:	d106      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8008318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800831e:	d102      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008320:	4b0d      	ldr	r3, [pc, #52]	; (8008358 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8008322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008324:	e010      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800832e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008332:	d106      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800833a:	d102      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800833c:	4b07      	ldr	r3, [pc, #28]	; (800835c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800833e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008346:	e236      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008348:	e235      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800834a:	4b05      	ldr	r3, [pc, #20]	; (8008360 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800834e:	e232      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008350:	58024400 	.word	0x58024400
 8008354:	03d09000 	.word	0x03d09000
 8008358:	003d0900 	.word	0x003d0900
 800835c:	017d7840 	.word	0x017d7840
 8008360:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008368:	e225      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800836a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800836e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008372:	430b      	orrs	r3, r1
 8008374:	f040 8085 	bne.w	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008378:	4b9c      	ldr	r3, [pc, #624]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800837a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800837c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008380:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008388:	d06b      	beq.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008390:	d874      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008398:	d056      	beq.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083a0:	d86c      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083a8:	d03b      	beq.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083b0:	d864      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083b8:	d021      	beq.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083c0:	d85c      	bhi.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d004      	beq.n	80083d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ce:	d004      	beq.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80083d0:	e054      	b.n	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80083d2:	f7fe fb33 	bl	8006a3c <HAL_RCC_GetPCLK1Freq>
 80083d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80083d8:	e1ed      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083da:	4b84      	ldr	r3, [pc, #528]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083e6:	d107      	bne.n	80083f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e8:	f107 0318 	add.w	r3, r7, #24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f000 fa05 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083f6:	e1de      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80083fc:	e1db      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083fe:	4b7b      	ldr	r3, [pc, #492]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840a:	d107      	bne.n	800841c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fb47 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800841a:	e1cc      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008420:	e1c9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008422:	4b72      	ldr	r3, [pc, #456]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0304 	and.w	r3, r3, #4
 800842a:	2b04      	cmp	r3, #4
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800842e:	4b6f      	ldr	r3, [pc, #444]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a6d      	ldr	r2, [pc, #436]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008440:	e1b9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008446:	e1b6      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008448:	4b68      	ldr	r3, [pc, #416]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008454:	d102      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8008456:	4b67      	ldr	r3, [pc, #412]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800845a:	e1ac      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e1a9      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008462:	4b62      	ldr	r3, [pc, #392]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800846e:	d102      	bne.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8008470:	4b61      	ldr	r3, [pc, #388]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008474:	e19f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008476:	2300      	movs	r3, #0
 8008478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800847a:	e19c      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008480:	e199      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008482:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008486:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800848a:	430b      	orrs	r3, r1
 800848c:	d173      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800848e:	4b57      	ldr	r3, [pc, #348]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008496:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800849e:	d02f      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a6:	d863      	bhi.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084b4:	d012      	beq.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80084b6:	e05b      	b.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084b8:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084c4:	d107      	bne.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c6:	f107 0318 	add.w	r3, r7, #24
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f996 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084d4:	e16f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084da:	e16c      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084dc:	4b43      	ldr	r3, [pc, #268]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e8:	d107      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084ea:	f107 030c 	add.w	r3, r7, #12
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fad8 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084f8:	e15d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084fe:	e15a      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008500:	4b3a      	ldr	r3, [pc, #232]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008508:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800850a:	4b38      	ldr	r3, [pc, #224]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0304 	and.w	r3, r3, #4
 8008512:	2b04      	cmp	r3, #4
 8008514:	d10c      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800851c:	4b33      	ldr	r3, [pc, #204]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	08db      	lsrs	r3, r3, #3
 8008522:	f003 0303 	and.w	r3, r3, #3
 8008526:	4a32      	ldr	r2, [pc, #200]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
 800852c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852e:	e01e      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008530:	4b2e      	ldr	r3, [pc, #184]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800853c:	d106      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800853e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008544:	d102      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008546:	4b2b      	ldr	r3, [pc, #172]	; (80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800854a:	e010      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800854c:	4b27      	ldr	r3, [pc, #156]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008560:	d102      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008562:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008566:	e002      	b.n	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800856c:	e123      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800856e:	e122      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008574:	e11f      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800857e:	430b      	orrs	r3, r1
 8008580:	d13c      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800858a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008598:	d012      	beq.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800859a:	e023      	b.n	80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800859c:	4b13      	ldr	r3, [pc, #76]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085a8:	d107      	bne.n	80085ba <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fbcc 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085b8:	e0fd      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085ba:	2300      	movs	r3, #0
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085be:	e0fa      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085cc:	d107      	bne.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ce:	f107 0318 	add.w	r3, r7, #24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 f912 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085dc:	e0eb      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80085de:	2300      	movs	r3, #0
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e2:	e0e8      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085e8:	e0e5      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
 80085f0:	03d09000 	.word	0x03d09000
 80085f4:	003d0900 	.word	0x003d0900
 80085f8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80085fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008600:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008604:	430b      	orrs	r3, r1
 8008606:	f040 8085 	bne.w	8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800860a:	4b6d      	ldr	r3, [pc, #436]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008612:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800861a:	d06b      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008622:	d874      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800862a:	d056      	beq.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800862c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008632:	d86c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800863a:	d03b      	beq.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008642:	d864      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800864a:	d021      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800864c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008652:	d85c      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d004      	beq.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008660:	d004      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008662:	e054      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008664:	f000 f8b4 	bl	80087d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008668:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800866a:	e0a4      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866c:	4b54      	ldr	r3, [pc, #336]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867a:	f107 0318 	add.w	r3, r7, #24
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f8bc 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008688:	e095      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868e:	e092      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008690:	4b4b      	ldr	r3, [pc, #300]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800869c:	d107      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800869e:	f107 030c 	add.w	r3, r7, #12
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f9fe 	bl	8008aa4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ac:	e083      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086b2:	e080      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b4:	4b42      	ldr	r3, [pc, #264]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d109      	bne.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c0:	4b3f      	ldr	r3, [pc, #252]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	08db      	lsrs	r3, r3, #3
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	4a3e      	ldr	r2, [pc, #248]	; (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d2:	e070      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086d8:	e06d      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086da:	4b39      	ldr	r3, [pc, #228]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e6:	d102      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80086e8:	4b37      	ldr	r3, [pc, #220]	; (80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80086ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ec:	e063      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086f2:	e060      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086f4:	4b32      	ldr	r3, [pc, #200]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008700:	d102      	bne.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008702:	4b32      	ldr	r3, [pc, #200]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008706:	e056      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870c:	e053      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008712:	e050      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008714:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008718:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800871c:	430b      	orrs	r3, r1
 800871e:	d148      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008724:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008730:	d02a      	beq.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008738:	d838      	bhi.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	2b00      	cmp	r3, #0
 800873e:	d004      	beq.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008746:	d00d      	beq.n	8008764 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008748:	e030      	b.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008756:	d102      	bne.n	800875e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8008758:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800875a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875c:	e02b      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800875e:	2300      	movs	r3, #0
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008762:	e028      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008770:	d107      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fae8 	bl	8008d4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800877c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008780:	e019      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008782:	2300      	movs	r3, #0
 8008784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008786:	e016      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008788:	4b0d      	ldr	r3, [pc, #52]	; (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008794:	d107      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008796:	f107 0318 	add.w	r3, r7, #24
 800879a:	4618      	mov	r0, r3
 800879c:	f000 f82e 	bl	80087fc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a4:	e007      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80087a6:	2300      	movs	r3, #0
 80087a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087aa:	e004      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b0:	e001      	b.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80087b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3740      	adds	r7, #64	; 0x40
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	58024400 	.word	0x58024400
 80087c4:	03d09000 	.word	0x03d09000
 80087c8:	003d0900 	.word	0x003d0900
 80087cc:	017d7840 	.word	0x017d7840

080087d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80087d4:	f7fe f902 	bl	80069dc <HAL_RCC_GetHCLKFreq>
 80087d8:	4602      	mov	r2, r0
 80087da:	4b06      	ldr	r3, [pc, #24]	; (80087f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80087dc:	6a1b      	ldr	r3, [r3, #32]
 80087de:	091b      	lsrs	r3, r3, #4
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	4904      	ldr	r1, [pc, #16]	; (80087f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80087e6:	5ccb      	ldrb	r3, [r1, r3]
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	58024400 	.word	0x58024400
 80087f8:	08011418 	.word	0x08011418

080087fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b089      	sub	sp, #36	; 0x24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008804:	4ba1      	ldr	r3, [pc, #644]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f003 0303 	and.w	r3, r3, #3
 800880c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800880e:	4b9f      	ldr	r3, [pc, #636]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008812:	0b1b      	lsrs	r3, r3, #12
 8008814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008818:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800881a:	4b9c      	ldr	r3, [pc, #624]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800881c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881e:	091b      	lsrs	r3, r3, #4
 8008820:	f003 0301 	and.w	r3, r3, #1
 8008824:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008826:	4b99      	ldr	r3, [pc, #612]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882a:	08db      	lsrs	r3, r3, #3
 800882c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	fb02 f303 	mul.w	r3, r2, r3
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 8111 	beq.w	8008a6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	2b02      	cmp	r3, #2
 800884e:	f000 8083 	beq.w	8008958 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	2b02      	cmp	r3, #2
 8008856:	f200 80a1 	bhi.w	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d056      	beq.n	8008914 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008866:	e099      	b.n	800899c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008868:	4b88      	ldr	r3, [pc, #544]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	d02d      	beq.n	80088d0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008874:	4b85      	ldr	r3, [pc, #532]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	08db      	lsrs	r3, r3, #3
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	4a84      	ldr	r2, [pc, #528]	; (8008a90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008880:	fa22 f303 	lsr.w	r3, r2, r3
 8008884:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	ee07 3a90 	vmov	s15, r3
 800888c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889e:	4b7b      	ldr	r3, [pc, #492]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80088ce:	e087      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80088de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e2:	4b6a      	ldr	r3, [pc, #424]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008912:	e065      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008926:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008936:	ed97 6a03 	vldr	s12, [r7, #12]
 800893a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800893e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800894e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008956:	e043      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896a:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800896c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800897a:	ed97 6a03 	vldr	s12, [r7, #12]
 800897e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800898a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800898e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008996:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800899a:	e021      	b.n	80089e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	ee07 3a90 	vmov	s15, r3
 80089a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80089aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ae:	4b37      	ldr	r3, [pc, #220]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089b6:	ee07 3a90 	vmov	s15, r3
 80089ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089be:	ed97 6a03 	vldr	s12, [r7, #12]
 80089c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089de:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80089e0:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ea:	ee07 3a90 	vmov	s15, r3
 80089ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a06:	ee17 2a90 	vmov	r2, s15
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008a0e:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	ee07 3a90 	vmov	s15, r3
 8008a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a34:	ee17 2a90 	vmov	r2, s15
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008a3c:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	0e1b      	lsrs	r3, r3, #24
 8008a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a46:	ee07 3a90 	vmov	s15, r3
 8008a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a62:	ee17 2a90 	vmov	r2, s15
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008a6a:	e008      	b.n	8008a7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	609a      	str	r2, [r3, #8]
}
 8008a7e:	bf00      	nop
 8008a80:	3724      	adds	r7, #36	; 0x24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	03d09000 	.word	0x03d09000
 8008a94:	46000000 	.word	0x46000000
 8008a98:	4c742400 	.word	0x4c742400
 8008a9c:	4a742400 	.word	0x4a742400
 8008aa0:	4bbebc20 	.word	0x4bbebc20

08008aa4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b089      	sub	sp, #36	; 0x24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008aac:	4ba1      	ldr	r3, [pc, #644]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	f003 0303 	and.w	r3, r3, #3
 8008ab4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ab6:	4b9f      	ldr	r3, [pc, #636]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	0d1b      	lsrs	r3, r3, #20
 8008abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ac2:	4b9c      	ldr	r3, [pc, #624]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	0a1b      	lsrs	r3, r3, #8
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008ace:	4b99      	ldr	r3, [pc, #612]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8111 	beq.w	8008d14 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f000 8083 	beq.w	8008c00 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	f200 80a1 	bhi.w	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d056      	beq.n	8008bbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008b0e:	e099      	b.n	8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b10:	4b88      	ldr	r3, [pc, #544]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0320 	and.w	r3, r3, #32
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d02d      	beq.n	8008b78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b1c:	4b85      	ldr	r3, [pc, #532]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	08db      	lsrs	r3, r3, #3
 8008b22:	f003 0303 	and.w	r3, r3, #3
 8008b26:	4a84      	ldr	r2, [pc, #528]	; (8008d38 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008b28:	fa22 f303 	lsr.w	r3, r2, r3
 8008b2c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b46:	4b7b      	ldr	r3, [pc, #492]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b4e:	ee07 3a90 	vmov	s15, r3
 8008b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b76:	e087      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008d40 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b8a:	4b6a      	ldr	r3, [pc, #424]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b92:	ee07 3a90 	vmov	s15, r3
 8008b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008baa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bba:	e065      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	ee07 3a90 	vmov	s15, r3
 8008bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bce:	4b59      	ldr	r3, [pc, #356]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bd6:	ee07 3a90 	vmov	s15, r3
 8008bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bfe:	e043      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	ee07 3a90 	vmov	s15, r3
 8008c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008d48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c12:	4b48      	ldr	r3, [pc, #288]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c1a:	ee07 3a90 	vmov	s15, r3
 8008c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c26:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c42:	e021      	b.n	8008c88 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008d44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c56:	4b37      	ldr	r3, [pc, #220]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c5e:	ee07 3a90 	vmov	s15, r3
 8008c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008d3c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c86:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008c88:	4b2a      	ldr	r3, [pc, #168]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	0a5b      	lsrs	r3, r3, #9
 8008c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cae:	ee17 2a90 	vmov	r2, s15
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008cb6:	4b1f      	ldr	r3, [pc, #124]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc0:	ee07 3a90 	vmov	s15, r3
 8008cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ccc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cdc:	ee17 2a90 	vmov	r2, s15
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008ce4:	4b13      	ldr	r3, [pc, #76]	; (8008d34 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	0e1b      	lsrs	r3, r3, #24
 8008cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d0a:	ee17 2a90 	vmov	r2, s15
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008d12:	e008      	b.n	8008d26 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	609a      	str	r2, [r3, #8]
}
 8008d26:	bf00      	nop
 8008d28:	3724      	adds	r7, #36	; 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	58024400 	.word	0x58024400
 8008d38:	03d09000 	.word	0x03d09000
 8008d3c:	46000000 	.word	0x46000000
 8008d40:	4c742400 	.word	0x4c742400
 8008d44:	4a742400 	.word	0x4a742400
 8008d48:	4bbebc20 	.word	0x4bbebc20

08008d4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b089      	sub	sp, #36	; 0x24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d54:	4ba0      	ldr	r3, [pc, #640]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008d5e:	4b9e      	ldr	r3, [pc, #632]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d62:	091b      	lsrs	r3, r3, #4
 8008d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d68:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008d6a:	4b9b      	ldr	r3, [pc, #620]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008d74:	4b98      	ldr	r3, [pc, #608]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d78:	08db      	lsrs	r3, r3, #3
 8008d7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d7e:	693a      	ldr	r2, [r7, #16]
 8008d80:	fb02 f303 	mul.w	r3, r2, r3
 8008d84:	ee07 3a90 	vmov	s15, r3
 8008d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d8c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 8111 	beq.w	8008fba <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	f000 8083 	beq.w	8008ea6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	f200 80a1 	bhi.w	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d003      	beq.n	8008db6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d056      	beq.n	8008e62 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008db4:	e099      	b.n	8008eea <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008db6:	4b88      	ldr	r3, [pc, #544]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d02d      	beq.n	8008e1e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dc2:	4b85      	ldr	r3, [pc, #532]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	08db      	lsrs	r3, r3, #3
 8008dc8:	f003 0303 	and.w	r3, r3, #3
 8008dcc:	4a83      	ldr	r2, [pc, #524]	; (8008fdc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008dce:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	ee07 3a90 	vmov	s15, r3
 8008dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	ee07 3a90 	vmov	s15, r3
 8008de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dec:	4b7a      	ldr	r3, [pc, #488]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e00:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e18:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e1c:	e087      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	ee07 3a90 	vmov	s15, r3
 8008e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e30:	4b69      	ldr	r3, [pc, #420]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e44:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e60:	e065      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	ee07 3a90 	vmov	s15, r3
 8008e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e74:	4b58      	ldr	r3, [pc, #352]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7c:	ee07 3a90 	vmov	s15, r3
 8008e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e84:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e88:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ea4:	e043      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	ee07 3a90 	vmov	s15, r3
 8008eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008fec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb8:	4b47      	ldr	r3, [pc, #284]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ec0:	ee07 3a90 	vmov	s15, r3
 8008ec4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec8:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ecc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008ed0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ed4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008edc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ee4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ee8:	e021      	b.n	8008f2e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	ee07 3a90 	vmov	s15, r3
 8008ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ef4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008ef8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efc:	4b36      	ldr	r3, [pc, #216]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f10:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fe0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008f14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f2c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008f2e:	4b2a      	ldr	r3, [pc, #168]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f32:	0a5b      	lsrs	r3, r3, #9
 8008f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f38:	ee07 3a90 	vmov	s15, r3
 8008f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f54:	ee17 2a90 	vmov	r2, s15
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008f5c:	4b1e      	ldr	r3, [pc, #120]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f82:	ee17 2a90 	vmov	r2, s15
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008f8a:	4b13      	ldr	r3, [pc, #76]	; (8008fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f8e:	0e1b      	lsrs	r3, r3, #24
 8008f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f94:	ee07 3a90 	vmov	s15, r3
 8008f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb0:	ee17 2a90 	vmov	r2, s15
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008fb8:	e008      	b.n	8008fcc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	609a      	str	r2, [r3, #8]
}
 8008fcc:	bf00      	nop
 8008fce:	3724      	adds	r7, #36	; 0x24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	03d09000 	.word	0x03d09000
 8008fe0:	46000000 	.word	0x46000000
 8008fe4:	4c742400 	.word	0x4c742400
 8008fe8:	4a742400 	.word	0x4a742400
 8008fec:	4bbebc20 	.word	0x4bbebc20

08008ff0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ffe:	4b53      	ldr	r3, [pc, #332]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d101      	bne.n	800900e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e099      	b.n	8009142 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800900e:	4b4f      	ldr	r3, [pc, #316]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a4e      	ldr	r2, [pc, #312]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009014:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800901a:	f7f8 fd51 	bl	8001ac0 <HAL_GetTick>
 800901e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009020:	e008      	b.n	8009034 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009022:	f7f8 fd4d 	bl	8001ac0 <HAL_GetTick>
 8009026:	4602      	mov	r2, r0
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	1ad3      	subs	r3, r2, r3
 800902c:	2b02      	cmp	r3, #2
 800902e:	d901      	bls.n	8009034 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e086      	b.n	8009142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009034:	4b45      	ldr	r3, [pc, #276]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f0      	bne.n	8009022 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009040:	4b42      	ldr	r3, [pc, #264]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009044:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	031b      	lsls	r3, r3, #12
 800904e:	493f      	ldr	r1, [pc, #252]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009050:	4313      	orrs	r3, r2
 8009052:	628b      	str	r3, [r1, #40]	; 0x28
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	3b01      	subs	r3, #1
 800905a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	025b      	lsls	r3, r3, #9
 8009066:	b29b      	uxth	r3, r3
 8009068:	431a      	orrs	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	3b01      	subs	r3, #1
 8009070:	041b      	lsls	r3, r3, #16
 8009072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	061b      	lsls	r3, r3, #24
 8009080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009084:	4931      	ldr	r1, [pc, #196]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009086:	4313      	orrs	r3, r2
 8009088:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800908a:	4b30      	ldr	r3, [pc, #192]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 800908c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	492d      	ldr	r1, [pc, #180]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009098:	4313      	orrs	r3, r2
 800909a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800909c:	4b2b      	ldr	r3, [pc, #172]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	f023 0220 	bic.w	r2, r3, #32
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	4928      	ldr	r1, [pc, #160]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80090ae:	4b27      	ldr	r3, [pc, #156]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	4a26      	ldr	r2, [pc, #152]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090b4:	f023 0310 	bic.w	r3, r3, #16
 80090b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80090ba:	4b24      	ldr	r3, [pc, #144]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090be:	4b24      	ldr	r3, [pc, #144]	; (8009150 <RCCEx_PLL2_Config+0x160>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	69d2      	ldr	r2, [r2, #28]
 80090c6:	00d2      	lsls	r2, r2, #3
 80090c8:	4920      	ldr	r1, [pc, #128]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090ca:	4313      	orrs	r3, r2
 80090cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80090ce:	4b1f      	ldr	r3, [pc, #124]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d2:	4a1e      	ldr	r2, [pc, #120]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090d4:	f043 0310 	orr.w	r3, r3, #16
 80090d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80090e0:	4b1a      	ldr	r3, [pc, #104]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	4a19      	ldr	r2, [pc, #100]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090ec:	e00f      	b.n	800910e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d106      	bne.n	8009102 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80090f4:	4b15      	ldr	r3, [pc, #84]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f8:	4a14      	ldr	r2, [pc, #80]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 80090fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009100:	e005      	b.n	800910e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009102:	4b12      	ldr	r3, [pc, #72]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4a11      	ldr	r2, [pc, #68]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800910c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800910e:	4b0f      	ldr	r3, [pc, #60]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a0e      	ldr	r2, [pc, #56]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911a:	f7f8 fcd1 	bl	8001ac0 <HAL_GetTick>
 800911e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009120:	e008      	b.n	8009134 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009122:	f7f8 fccd 	bl	8001ac0 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	2b02      	cmp	r3, #2
 800912e:	d901      	bls.n	8009134 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e006      	b.n	8009142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <RCCEx_PLL2_Config+0x15c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f0      	beq.n	8009122 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	58024400 	.word	0x58024400
 8009150:	ffff0007 	.word	0xffff0007

08009154 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009162:	4b53      	ldr	r3, [pc, #332]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b03      	cmp	r3, #3
 800916c:	d101      	bne.n	8009172 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e099      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009172:	4b4f      	ldr	r3, [pc, #316]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a4e      	ldr	r2, [pc, #312]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800917c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917e:	f7f8 fc9f 	bl	8001ac0 <HAL_GetTick>
 8009182:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009184:	e008      	b.n	8009198 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009186:	f7f8 fc9b 	bl	8001ac0 <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d901      	bls.n	8009198 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e086      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009198:	4b45      	ldr	r3, [pc, #276]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1f0      	bne.n	8009186 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80091a4:	4b42      	ldr	r3, [pc, #264]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	051b      	lsls	r3, r3, #20
 80091b2:	493f      	ldr	r1, [pc, #252]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	628b      	str	r3, [r1, #40]	; 0x28
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	3b01      	subs	r3, #1
 80091be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	025b      	lsls	r3, r3, #9
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	431a      	orrs	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	041b      	lsls	r3, r3, #16
 80091d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091da:	431a      	orrs	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091e8:	4931      	ldr	r1, [pc, #196]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80091ee:	4b30      	ldr	r3, [pc, #192]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	492d      	ldr	r1, [pc, #180]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 80091fc:	4313      	orrs	r3, r2
 80091fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009200:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	4928      	ldr	r1, [pc, #160]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800920e:	4313      	orrs	r3, r2
 8009210:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009212:	4b27      	ldr	r3, [pc, #156]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	4a26      	ldr	r2, [pc, #152]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800921e:	4b24      	ldr	r3, [pc, #144]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009222:	4b24      	ldr	r3, [pc, #144]	; (80092b4 <RCCEx_PLL3_Config+0x160>)
 8009224:	4013      	ands	r3, r2
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	69d2      	ldr	r2, [r2, #28]
 800922a:	00d2      	lsls	r2, r2, #3
 800922c:	4920      	ldr	r1, [pc, #128]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800922e:	4313      	orrs	r3, r2
 8009230:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009232:	4b1f      	ldr	r3, [pc, #124]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	4a1e      	ldr	r2, [pc, #120]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800923c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d106      	bne.n	8009252 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009244:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	4a19      	ldr	r2, [pc, #100]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800924a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800924e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009250:	e00f      	b.n	8009272 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d106      	bne.n	8009266 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009258:	4b15      	ldr	r3, [pc, #84]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	4a14      	ldr	r2, [pc, #80]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800925e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009262:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009264:	e005      	b.n	8009272 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	4a11      	ldr	r2, [pc, #68]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800926c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009270:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009272:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a0e      	ldr	r2, [pc, #56]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 8009278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800927c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800927e:	f7f8 fc1f 	bl	8001ac0 <HAL_GetTick>
 8009282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009284:	e008      	b.n	8009298 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009286:	f7f8 fc1b 	bl	8001ac0 <HAL_GetTick>
 800928a:	4602      	mov	r2, r0
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	1ad3      	subs	r3, r2, r3
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009294:	2303      	movs	r3, #3
 8009296:	e006      	b.n	80092a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009298:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <RCCEx_PLL3_Config+0x15c>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0f0      	beq.n	8009286 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	58024400 	.word	0x58024400
 80092b4:	ffff0007 	.word	0xffff0007

080092b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e10f      	b.n	80094ea <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a87      	ldr	r2, [pc, #540]	; (80094f4 <HAL_SPI_Init+0x23c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00f      	beq.n	80092fa <HAL_SPI_Init+0x42>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a86      	ldr	r2, [pc, #536]	; (80094f8 <HAL_SPI_Init+0x240>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00a      	beq.n	80092fa <HAL_SPI_Init+0x42>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a84      	ldr	r2, [pc, #528]	; (80094fc <HAL_SPI_Init+0x244>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d005      	beq.n	80092fa <HAL_SPI_Init+0x42>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	d901      	bls.n	80092fa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e0f7      	b.n	80094ea <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f900 	bl	8009500 <SPI_GetPacketSize>
 8009300:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a7b      	ldr	r2, [pc, #492]	; (80094f4 <HAL_SPI_Init+0x23c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d00c      	beq.n	8009326 <HAL_SPI_Init+0x6e>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a79      	ldr	r2, [pc, #484]	; (80094f8 <HAL_SPI_Init+0x240>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d007      	beq.n	8009326 <HAL_SPI_Init+0x6e>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a78      	ldr	r2, [pc, #480]	; (80094fc <HAL_SPI_Init+0x244>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d002      	beq.n	8009326 <HAL_SPI_Init+0x6e>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b08      	cmp	r3, #8
 8009324:	d811      	bhi.n	800934a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800932a:	4a72      	ldr	r2, [pc, #456]	; (80094f4 <HAL_SPI_Init+0x23c>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d009      	beq.n	8009344 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a70      	ldr	r2, [pc, #448]	; (80094f8 <HAL_SPI_Init+0x240>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d004      	beq.n	8009344 <HAL_SPI_Init+0x8c>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a6f      	ldr	r2, [pc, #444]	; (80094fc <HAL_SPI_Init+0x244>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d104      	bne.n	800934e <HAL_SPI_Init+0x96>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2b10      	cmp	r3, #16
 8009348:	d901      	bls.n	800934e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e0cd      	b.n	80094ea <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d106      	bne.n	8009368 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7f8 f8d8 	bl	8001518 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800938a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009394:	d119      	bne.n	80093ca <HAL_SPI_Init+0x112>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800939e:	d103      	bne.n	80093a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d008      	beq.n	80093ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10c      	bne.n	80093ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80093b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093b8:	d107      	bne.n	80093ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00f      	beq.n	80093f6 <HAL_SPI_Init+0x13e>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	2b06      	cmp	r3, #6
 80093dc:	d90b      	bls.n	80093f6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	601a      	str	r2, [r3, #0]
 80093f4:	e007      	b.n	8009406 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009404:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940e:	431a      	orrs	r2, r3
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	431a      	orrs	r2, r3
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009418:	ea42 0103 	orr.w	r1, r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	431a      	orrs	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	431a      	orrs	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	431a      	orrs	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	431a      	orrs	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009466:	ea42 0103 	orr.w	r1, r2, r3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d113      	bne.n	80094a6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009490:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0201 	bic.w	r2, r2, #1
 80094b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40013000 	.word	0x40013000
 80094f8:	40003800 	.word	0x40003800
 80094fc:	40003c00 	.word	0x40003c00

08009500 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950c:	095b      	lsrs	r3, r3, #5
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	3307      	adds	r3, #7
 800951e:	08db      	lsrs	r3, r3, #3
 8009520:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	fb02 f303 	mul.w	r3, r2, r3
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr

08009536 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e049      	b.n	80095dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f841 	bl	80095e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2202      	movs	r2, #2
 8009566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3304      	adds	r3, #4
 8009572:	4619      	mov	r1, r3
 8009574:	4610      	mov	r0, r2
 8009576:	f000 fb77 	bl	8009c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b01      	cmp	r3, #1
 800960a:	d001      	beq.n	8009610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e05e      	b.n	80096ce <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2202      	movs	r2, #2
 8009614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <HAL_TIM_Base_Start_IT+0xe4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02c      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963a:	d027      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a27      	ldr	r2, [pc, #156]	; (80096e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d022      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a26      	ldr	r2, [pc, #152]	; (80096e4 <HAL_TIM_Base_Start_IT+0xec>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d01d      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a24      	ldr	r2, [pc, #144]	; (80096e8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d018      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a23      	ldr	r2, [pc, #140]	; (80096ec <HAL_TIM_Base_Start_IT+0xf4>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d013      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a21      	ldr	r2, [pc, #132]	; (80096f0 <HAL_TIM_Base_Start_IT+0xf8>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00e      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a20      	ldr	r2, [pc, #128]	; (80096f4 <HAL_TIM_Base_Start_IT+0xfc>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d009      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a1e      	ldr	r2, [pc, #120]	; (80096f8 <HAL_TIM_Base_Start_IT+0x100>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x94>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a1d      	ldr	r2, [pc, #116]	; (80096fc <HAL_TIM_Base_Start_IT+0x104>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d115      	bne.n	80096b8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689a      	ldr	r2, [r3, #8]
 8009692:	4b1b      	ldr	r3, [pc, #108]	; (8009700 <HAL_TIM_Base_Start_IT+0x108>)
 8009694:	4013      	ands	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b06      	cmp	r3, #6
 800969c:	d015      	beq.n	80096ca <HAL_TIM_Base_Start_IT+0xd2>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096a4:	d011      	beq.n	80096ca <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f042 0201 	orr.w	r2, r2, #1
 80096b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b6:	e008      	b.n	80096ca <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0201 	orr.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e000      	b.n	80096cc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40010000 	.word	0x40010000
 80096e0:	40000400 	.word	0x40000400
 80096e4:	40000800 	.word	0x40000800
 80096e8:	40000c00 	.word	0x40000c00
 80096ec:	40010400 	.word	0x40010400
 80096f0:	40001800 	.word	0x40001800
 80096f4:	40014000 	.word	0x40014000
 80096f8:	4000e000 	.word	0x4000e000
 80096fc:	4000e400 	.word	0x4000e400
 8009700:	00010007 	.word	0x00010007

08009704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d101      	bne.n	8009716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e049      	b.n	80097aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d106      	bne.n	8009730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f7f7 ff5c 	bl	80015e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f000 fa90 	bl	8009c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2201      	movs	r2, #1
 8009754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2201      	movs	r2, #1
 800975c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	691b      	ldr	r3, [r3, #16]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d122      	bne.n	800980e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	f003 0302 	and.w	r3, r3, #2
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d11b      	bne.n	800980e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f06f 0202 	mvn.w	r2, #2
 80097de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 0303 	and.w	r3, r3, #3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fa19 	bl	8009c2c <HAL_TIM_IC_CaptureCallback>
 80097fa:	e005      	b.n	8009808 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 fa0b 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa1c 	bl	8009c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b04      	cmp	r3, #4
 800981a:	d122      	bne.n	8009862 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b04      	cmp	r3, #4
 8009828:	d11b      	bne.n	8009862 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f06f 0204 	mvn.w	r2, #4
 8009832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 f9ef 	bl	8009c2c <HAL_TIM_IC_CaptureCallback>
 800984e:	e005      	b.n	800985c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f9e1 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f9f2 	bl	8009c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0308 	and.w	r3, r3, #8
 800986c:	2b08      	cmp	r3, #8
 800986e:	d122      	bne.n	80098b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0308 	and.w	r3, r3, #8
 800987a:	2b08      	cmp	r3, #8
 800987c:	d11b      	bne.n	80098b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0208 	mvn.w	r2, #8
 8009886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2204      	movs	r2, #4
 800988c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	69db      	ldr	r3, [r3, #28]
 8009894:	f003 0303 	and.w	r3, r3, #3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f9c5 	bl	8009c2c <HAL_TIM_IC_CaptureCallback>
 80098a2:	e005      	b.n	80098b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f9b7 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9c8 	bl	8009c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	2b10      	cmp	r3, #16
 80098c2:	d122      	bne.n	800990a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0310 	and.w	r3, r3, #16
 80098ce:	2b10      	cmp	r3, #16
 80098d0:	d11b      	bne.n	800990a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f06f 0210 	mvn.w	r2, #16
 80098da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2208      	movs	r2, #8
 80098e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d003      	beq.n	80098f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f99b 	bl	8009c2c <HAL_TIM_IC_CaptureCallback>
 80098f6:	e005      	b.n	8009904 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f98d 	bl	8009c18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f99e 	bl	8009c40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	691b      	ldr	r3, [r3, #16]
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	2b01      	cmp	r3, #1
 8009916:	d10e      	bne.n	8009936 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	f003 0301 	and.w	r3, r3, #1
 8009922:	2b01      	cmp	r3, #1
 8009924:	d107      	bne.n	8009936 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f06f 0201 	mvn.w	r2, #1
 800992e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7f7 fb01 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009940:	2b80      	cmp	r3, #128	; 0x80
 8009942:	d10e      	bne.n	8009962 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b80      	cmp	r3, #128	; 0x80
 8009950:	d107      	bne.n	8009962 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800995a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fe45 	bl	800a5ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800996c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009970:	d10e      	bne.n	8009990 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997c:	2b80      	cmp	r3, #128	; 0x80
 800997e:	d107      	bne.n	8009990 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fe38 	bl	800a600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b40      	cmp	r3, #64	; 0x40
 800999c:	d10e      	bne.n	80099bc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a8:	2b40      	cmp	r3, #64	; 0x40
 80099aa:	d107      	bne.n	80099bc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f94c 	bl	8009c54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f003 0320 	and.w	r3, r3, #32
 80099c6:	2b20      	cmp	r3, #32
 80099c8:	d10e      	bne.n	80099e8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	f003 0320 	and.w	r3, r3, #32
 80099d4:	2b20      	cmp	r3, #32
 80099d6:	d107      	bne.n	80099e8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f06f 0220 	mvn.w	r2, #32
 80099e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fdf8 	bl	800a5d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	60f8      	str	r0, [r7, #12]
 80099f8:	60b9      	str	r1, [r7, #8]
 80099fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e0ff      	b.n	8009c0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b14      	cmp	r3, #20
 8009a1a:	f200 80f0 	bhi.w	8009bfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	08009bff 	.word	0x08009bff
 8009a2c:	08009bff 	.word	0x08009bff
 8009a30:	08009bff 	.word	0x08009bff
 8009a34:	08009ab9 	.word	0x08009ab9
 8009a38:	08009bff 	.word	0x08009bff
 8009a3c:	08009bff 	.word	0x08009bff
 8009a40:	08009bff 	.word	0x08009bff
 8009a44:	08009afb 	.word	0x08009afb
 8009a48:	08009bff 	.word	0x08009bff
 8009a4c:	08009bff 	.word	0x08009bff
 8009a50:	08009bff 	.word	0x08009bff
 8009a54:	08009b3b 	.word	0x08009b3b
 8009a58:	08009bff 	.word	0x08009bff
 8009a5c:	08009bff 	.word	0x08009bff
 8009a60:	08009bff 	.word	0x08009bff
 8009a64:	08009b7d 	.word	0x08009b7d
 8009a68:	08009bff 	.word	0x08009bff
 8009a6c:	08009bff 	.word	0x08009bff
 8009a70:	08009bff 	.word	0x08009bff
 8009a74:	08009bbd 	.word	0x08009bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f998 	bl	8009db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0208 	orr.w	r2, r2, #8
 8009a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0204 	bic.w	r2, r2, #4
 8009aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6999      	ldr	r1, [r3, #24]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	619a      	str	r2, [r3, #24]
      break;
 8009ab6:	e0a5      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68b9      	ldr	r1, [r7, #8]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fa08 	bl	8009ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6999      	ldr	r1, [r3, #24]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	021a      	lsls	r2, r3, #8
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	619a      	str	r2, [r3, #24]
      break;
 8009af8:	e084      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fa71 	bl	8009fe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69da      	ldr	r2, [r3, #28]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f042 0208 	orr.w	r2, r2, #8
 8009b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 0204 	bic.w	r2, r2, #4
 8009b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69d9      	ldr	r1, [r3, #28]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	61da      	str	r2, [r3, #28]
      break;
 8009b38:	e064      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fad9 	bl	800a0f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69da      	ldr	r2, [r3, #28]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69d9      	ldr	r1, [r3, #28]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	021a      	lsls	r2, r3, #8
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	61da      	str	r2, [r3, #28]
      break;
 8009b7a:	e043      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 fb22 	bl	800a1cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0208 	orr.w	r2, r2, #8
 8009b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0204 	bic.w	r2, r2, #4
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bba:	e023      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fb66 	bl	800a294 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	021a      	lsls	r2, r3, #8
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bfc:	e002      	b.n	8009c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	75fb      	strb	r3, [r7, #23]
      break;
 8009c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop

08009c18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a44      	ldr	r2, [pc, #272]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d013      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c86:	d00f      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a41      	ldr	r2, [pc, #260]	; (8009d90 <TIM_Base_SetConfig+0x128>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00b      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a40      	ldr	r2, [pc, #256]	; (8009d94 <TIM_Base_SetConfig+0x12c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d007      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a3f      	ldr	r2, [pc, #252]	; (8009d98 <TIM_Base_SetConfig+0x130>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <TIM_Base_SetConfig+0x40>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a3e      	ldr	r2, [pc, #248]	; (8009d9c <TIM_Base_SetConfig+0x134>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d108      	bne.n	8009cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	68fa      	ldr	r2, [r7, #12]
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a33      	ldr	r2, [pc, #204]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d027      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc8:	d023      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a30      	ldr	r2, [pc, #192]	; (8009d90 <TIM_Base_SetConfig+0x128>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d01f      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a2f      	ldr	r2, [pc, #188]	; (8009d94 <TIM_Base_SetConfig+0x12c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d01b      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2e      	ldr	r2, [pc, #184]	; (8009d98 <TIM_Base_SetConfig+0x130>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d017      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a2d      	ldr	r2, [pc, #180]	; (8009d9c <TIM_Base_SetConfig+0x134>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d013      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a2c      	ldr	r2, [pc, #176]	; (8009da0 <TIM_Base_SetConfig+0x138>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d00f      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a2b      	ldr	r2, [pc, #172]	; (8009da4 <TIM_Base_SetConfig+0x13c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00b      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a2a      	ldr	r2, [pc, #168]	; (8009da8 <TIM_Base_SetConfig+0x140>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d007      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a29      	ldr	r2, [pc, #164]	; (8009dac <TIM_Base_SetConfig+0x144>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d003      	beq.n	8009d12 <TIM_Base_SetConfig+0xaa>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <TIM_Base_SetConfig+0x148>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d108      	bne.n	8009d24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68fa      	ldr	r2, [r7, #12]
 8009d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	689a      	ldr	r2, [r3, #8]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a10      	ldr	r2, [pc, #64]	; (8009d8c <TIM_Base_SetConfig+0x124>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00f      	beq.n	8009d70 <TIM_Base_SetConfig+0x108>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a12      	ldr	r2, [pc, #72]	; (8009d9c <TIM_Base_SetConfig+0x134>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <TIM_Base_SetConfig+0x108>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a11      	ldr	r2, [pc, #68]	; (8009da0 <TIM_Base_SetConfig+0x138>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d007      	beq.n	8009d70 <TIM_Base_SetConfig+0x108>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a10      	ldr	r2, [pc, #64]	; (8009da4 <TIM_Base_SetConfig+0x13c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_Base_SetConfig+0x108>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a0f      	ldr	r2, [pc, #60]	; (8009da8 <TIM_Base_SetConfig+0x140>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d103      	bne.n	8009d78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	615a      	str	r2, [r3, #20]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40010000 	.word	0x40010000
 8009d90:	40000400 	.word	0x40000400
 8009d94:	40000800 	.word	0x40000800
 8009d98:	40000c00 	.word	0x40000c00
 8009d9c:	40010400 	.word	0x40010400
 8009da0:	40014000 	.word	0x40014000
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800
 8009dac:	4000e000 	.word	0x4000e000
 8009db0:	4000e400 	.word	0x4000e400

08009db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b087      	sub	sp, #28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	f023 0201 	bic.w	r2, r3, #1
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	4b37      	ldr	r3, [pc, #220]	; (8009ebc <TIM_OC1_SetConfig+0x108>)
 8009de0:	4013      	ands	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 0303 	bic.w	r3, r3, #3
 8009dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	f023 0302 	bic.w	r3, r3, #2
 8009dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a2d      	ldr	r2, [pc, #180]	; (8009ec0 <TIM_OC1_SetConfig+0x10c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d00f      	beq.n	8009e30 <TIM_OC1_SetConfig+0x7c>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a2c      	ldr	r2, [pc, #176]	; (8009ec4 <TIM_OC1_SetConfig+0x110>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00b      	beq.n	8009e30 <TIM_OC1_SetConfig+0x7c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a2b      	ldr	r2, [pc, #172]	; (8009ec8 <TIM_OC1_SetConfig+0x114>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d007      	beq.n	8009e30 <TIM_OC1_SetConfig+0x7c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a2a      	ldr	r2, [pc, #168]	; (8009ecc <TIM_OC1_SetConfig+0x118>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d003      	beq.n	8009e30 <TIM_OC1_SetConfig+0x7c>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a29      	ldr	r2, [pc, #164]	; (8009ed0 <TIM_OC1_SetConfig+0x11c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d10c      	bne.n	8009e4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	f023 0308 	bic.w	r3, r3, #8
 8009e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f023 0304 	bic.w	r3, r3, #4
 8009e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a1c      	ldr	r2, [pc, #112]	; (8009ec0 <TIM_OC1_SetConfig+0x10c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00f      	beq.n	8009e72 <TIM_OC1_SetConfig+0xbe>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a1b      	ldr	r2, [pc, #108]	; (8009ec4 <TIM_OC1_SetConfig+0x110>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00b      	beq.n	8009e72 <TIM_OC1_SetConfig+0xbe>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a1a      	ldr	r2, [pc, #104]	; (8009ec8 <TIM_OC1_SetConfig+0x114>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <TIM_OC1_SetConfig+0xbe>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a19      	ldr	r2, [pc, #100]	; (8009ecc <TIM_OC1_SetConfig+0x118>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_OC1_SetConfig+0xbe>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a18      	ldr	r2, [pc, #96]	; (8009ed0 <TIM_OC1_SetConfig+0x11c>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d111      	bne.n	8009e96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	699b      	ldr	r3, [r3, #24]
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	621a      	str	r2, [r3, #32]
}
 8009eb0:	bf00      	nop
 8009eb2:	371c      	adds	r7, #28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	fffeff8f 	.word	0xfffeff8f
 8009ec0:	40010000 	.word	0x40010000
 8009ec4:	40010400 	.word	0x40010400
 8009ec8:	40014000 	.word	0x40014000
 8009ecc:	40014400 	.word	0x40014400
 8009ed0:	40014800 	.word	0x40014800

08009ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	f023 0210 	bic.w	r2, r3, #16
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	699b      	ldr	r3, [r3, #24]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4b34      	ldr	r3, [pc, #208]	; (8009fd0 <TIM_OC2_SetConfig+0xfc>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	021b      	lsls	r3, r3, #8
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f023 0320 	bic.w	r3, r3, #32
 8009f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	011b      	lsls	r3, r3, #4
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a29      	ldr	r2, [pc, #164]	; (8009fd4 <TIM_OC2_SetConfig+0x100>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC2_SetConfig+0x68>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a28      	ldr	r2, [pc, #160]	; (8009fd8 <TIM_OC2_SetConfig+0x104>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d10d      	bne.n	8009f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a1e      	ldr	r2, [pc, #120]	; (8009fd4 <TIM_OC2_SetConfig+0x100>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00f      	beq.n	8009f80 <TIM_OC2_SetConfig+0xac>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a1d      	ldr	r2, [pc, #116]	; (8009fd8 <TIM_OC2_SetConfig+0x104>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <TIM_OC2_SetConfig+0xac>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a1c      	ldr	r2, [pc, #112]	; (8009fdc <TIM_OC2_SetConfig+0x108>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d007      	beq.n	8009f80 <TIM_OC2_SetConfig+0xac>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <TIM_OC2_SetConfig+0x10c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_OC2_SetConfig+0xac>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a1a      	ldr	r2, [pc, #104]	; (8009fe4 <TIM_OC2_SetConfig+0x110>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d113      	bne.n	8009fa8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	695b      	ldr	r3, [r3, #20]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	699b      	ldr	r3, [r3, #24]
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	621a      	str	r2, [r3, #32]
}
 8009fc2:	bf00      	nop
 8009fc4:	371c      	adds	r7, #28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	feff8fff 	.word	0xfeff8fff
 8009fd4:	40010000 	.word	0x40010000
 8009fd8:	40010400 	.word	0x40010400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800

08009fe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b087      	sub	sp, #28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	69db      	ldr	r3, [r3, #28]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b33      	ldr	r3, [pc, #204]	; (800a0e0 <TIM_OC3_SetConfig+0xf8>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f023 0303 	bic.w	r3, r3, #3
 800a01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a28      	ldr	r2, [pc, #160]	; (800a0e4 <TIM_OC3_SetConfig+0xfc>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_OC3_SetConfig+0x66>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a27      	ldr	r2, [pc, #156]	; (800a0e8 <TIM_OC3_SetConfig+0x100>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d10d      	bne.n	800a06a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	021b      	lsls	r3, r3, #8
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a1d      	ldr	r2, [pc, #116]	; (800a0e4 <TIM_OC3_SetConfig+0xfc>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00f      	beq.n	800a092 <TIM_OC3_SetConfig+0xaa>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a1c      	ldr	r2, [pc, #112]	; (800a0e8 <TIM_OC3_SetConfig+0x100>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00b      	beq.n	800a092 <TIM_OC3_SetConfig+0xaa>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a1b      	ldr	r2, [pc, #108]	; (800a0ec <TIM_OC3_SetConfig+0x104>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <TIM_OC3_SetConfig+0xaa>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a1a      	ldr	r2, [pc, #104]	; (800a0f0 <TIM_OC3_SetConfig+0x108>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d003      	beq.n	800a092 <TIM_OC3_SetConfig+0xaa>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a19      	ldr	r2, [pc, #100]	; (800a0f4 <TIM_OC3_SetConfig+0x10c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d113      	bne.n	800a0ba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	693a      	ldr	r2, [r7, #16]
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	621a      	str	r2, [r3, #32]
}
 800a0d4:	bf00      	nop
 800a0d6:	371c      	adds	r7, #28
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	fffeff8f 	.word	0xfffeff8f
 800a0e4:	40010000 	.word	0x40010000
 800a0e8:	40010400 	.word	0x40010400
 800a0ec:	40014000 	.word	0x40014000
 800a0f0:	40014400 	.word	0x40014400
 800a0f4:	40014800 	.word	0x40014800

0800a0f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b087      	sub	sp, #28
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	69db      	ldr	r3, [r3, #28]
 800a11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4b24      	ldr	r3, [pc, #144]	; (800a1b4 <TIM_OC4_SetConfig+0xbc>)
 800a124:	4013      	ands	r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	021b      	lsls	r3, r3, #8
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	031b      	lsls	r3, r3, #12
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	4313      	orrs	r3, r2
 800a14e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a19      	ldr	r2, [pc, #100]	; (800a1b8 <TIM_OC4_SetConfig+0xc0>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00f      	beq.n	800a178 <TIM_OC4_SetConfig+0x80>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <TIM_OC4_SetConfig+0xc4>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00b      	beq.n	800a178 <TIM_OC4_SetConfig+0x80>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a17      	ldr	r2, [pc, #92]	; (800a1c0 <TIM_OC4_SetConfig+0xc8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d007      	beq.n	800a178 <TIM_OC4_SetConfig+0x80>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a16      	ldr	r2, [pc, #88]	; (800a1c4 <TIM_OC4_SetConfig+0xcc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_OC4_SetConfig+0x80>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a15      	ldr	r2, [pc, #84]	; (800a1c8 <TIM_OC4_SetConfig+0xd0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d109      	bne.n	800a18c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a17e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	019b      	lsls	r3, r3, #6
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	4313      	orrs	r3, r2
 800a18a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	621a      	str	r2, [r3, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	feff8fff 	.word	0xfeff8fff
 800a1b8:	40010000 	.word	0x40010000
 800a1bc:	40010400 	.word	0x40010400
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40014400 	.word	0x40014400
 800a1c8:	40014800 	.word	0x40014800

0800a1cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	4b21      	ldr	r3, [pc, #132]	; (800a27c <TIM_OC5_SetConfig+0xb0>)
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	4313      	orrs	r3, r2
 800a204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a20c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	693a      	ldr	r2, [r7, #16]
 800a216:	4313      	orrs	r3, r2
 800a218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a18      	ldr	r2, [pc, #96]	; (800a280 <TIM_OC5_SetConfig+0xb4>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00f      	beq.n	800a242 <TIM_OC5_SetConfig+0x76>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a17      	ldr	r2, [pc, #92]	; (800a284 <TIM_OC5_SetConfig+0xb8>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00b      	beq.n	800a242 <TIM_OC5_SetConfig+0x76>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a16      	ldr	r2, [pc, #88]	; (800a288 <TIM_OC5_SetConfig+0xbc>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d007      	beq.n	800a242 <TIM_OC5_SetConfig+0x76>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a15      	ldr	r2, [pc, #84]	; (800a28c <TIM_OC5_SetConfig+0xc0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d003      	beq.n	800a242 <TIM_OC5_SetConfig+0x76>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a14      	ldr	r2, [pc, #80]	; (800a290 <TIM_OC5_SetConfig+0xc4>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d109      	bne.n	800a256 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	621a      	str	r2, [r3, #32]
}
 800a270:	bf00      	nop
 800a272:	371c      	adds	r7, #28
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr
 800a27c:	fffeff8f 	.word	0xfffeff8f
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400
 800a288:	40014000 	.word	0x40014000
 800a28c:	40014400 	.word	0x40014400
 800a290:	40014800 	.word	0x40014800

0800a294 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a294:	b480      	push	{r7}
 800a296:	b087      	sub	sp, #28
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	4b22      	ldr	r3, [pc, #136]	; (800a348 <TIM_OC6_SetConfig+0xb4>)
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	68fa      	ldr	r2, [r7, #12]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	4a19      	ldr	r2, [pc, #100]	; (800a34c <TIM_OC6_SetConfig+0xb8>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d00f      	beq.n	800a30c <TIM_OC6_SetConfig+0x78>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a18      	ldr	r2, [pc, #96]	; (800a350 <TIM_OC6_SetConfig+0xbc>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00b      	beq.n	800a30c <TIM_OC6_SetConfig+0x78>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a17      	ldr	r2, [pc, #92]	; (800a354 <TIM_OC6_SetConfig+0xc0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <TIM_OC6_SetConfig+0x78>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a16      	ldr	r2, [pc, #88]	; (800a358 <TIM_OC6_SetConfig+0xc4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d003      	beq.n	800a30c <TIM_OC6_SetConfig+0x78>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a15      	ldr	r2, [pc, #84]	; (800a35c <TIM_OC6_SetConfig+0xc8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d109      	bne.n	800a320 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	029b      	lsls	r3, r3, #10
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	697a      	ldr	r2, [r7, #20]
 800a324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	621a      	str	r2, [r3, #32]
}
 800a33a:	bf00      	nop
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop
 800a348:	feff8fff 	.word	0xfeff8fff
 800a34c:	40010000 	.word	0x40010000
 800a350:	40010400 	.word	0x40010400
 800a354:	40014000 	.word	0x40014000
 800a358:	40014400 	.word	0x40014400
 800a35c:	40014800 	.word	0x40014800

0800a360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a370:	2b01      	cmp	r3, #1
 800a372:	d101      	bne.n	800a378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a374:	2302      	movs	r3, #2
 800a376:	e077      	b.n	800a468 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2202      	movs	r2, #2
 800a384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a35      	ldr	r2, [pc, #212]	; (800a474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d004      	beq.n	800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a34      	ldr	r2, [pc, #208]	; (800a478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d108      	bne.n	800a3be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a25      	ldr	r2, [pc, #148]	; (800a474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d02c      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ea:	d027      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a22      	ldr	r2, [pc, #136]	; (800a47c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d022      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a21      	ldr	r2, [pc, #132]	; (800a480 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d01d      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1f      	ldr	r2, [pc, #124]	; (800a484 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d018      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a1a      	ldr	r2, [pc, #104]	; (800a478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d013      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00e      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d009      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a18      	ldr	r2, [pc, #96]	; (800a490 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d004      	beq.n	800a43c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a17      	ldr	r2, [pc, #92]	; (800a494 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d10c      	bne.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2201      	movs	r2, #1
 800a45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3714      	adds	r7, #20
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	40010000 	.word	0x40010000
 800a478:	40010400 	.word	0x40010400
 800a47c:	40000400 	.word	0x40000400
 800a480:	40000800 	.word	0x40000800
 800a484:	40000c00 	.word	0x40000c00
 800a488:	40001800 	.word	0x40001800
 800a48c:	40014000 	.word	0x40014000
 800a490:	4000e000 	.word	0x4000e000
 800a494:	4000e400 	.word	0x4000e400

0800a498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	e087      	b.n	800a5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	695b      	ldr	r3, [r3, #20]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51a:	4313      	orrs	r3, r2
 800a51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	041b      	lsls	r3, r3, #16
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a27      	ldr	r2, [pc, #156]	; (800a5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d004      	beq.n	800a542 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a25      	ldr	r2, [pc, #148]	; (800a5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d106      	bne.n	800a550 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	69db      	ldr	r3, [r3, #28]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d004      	beq.n	800a564 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1d      	ldr	r2, [pc, #116]	; (800a5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d126      	bne.n	800a5b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56e:	051b      	lsls	r3, r3, #20
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	6a1b      	ldr	r3, [r3, #32]
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a0e      	ldr	r2, [pc, #56]	; (800a5d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d004      	beq.n	800a5a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a0d      	ldr	r2, [pc, #52]	; (800a5d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d106      	bne.n	800a5b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	40010000 	.word	0x40010000
 800a5d4:	40010400 	.word	0x40010400

0800a5d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a614:	b084      	sub	sp, #16
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
 800a61e:	f107 001c 	add.w	r0, r7, #28
 800a622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d120      	bne.n	800a66e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	4b2a      	ldr	r3, [pc, #168]	; (800a6e8 <USB_CoreInit+0xd4>)
 800a63e:	4013      	ands	r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a652:	2b01      	cmp	r3, #1
 800a654:	d105      	bne.n	800a662 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f001 faf8 	bl	800bc58 <USB_CoreReset>
 800a668:	4603      	mov	r3, r0
 800a66a:	73fb      	strb	r3, [r7, #15]
 800a66c:	e01a      	b.n	800a6a4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 faec 	bl	800bc58 <USB_CoreReset>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	639a      	str	r2, [r3, #56]	; 0x38
 800a696:	e005      	b.n	800a6a4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d116      	bne.n	800a6d8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <USB_CoreInit+0xd8>)
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f043 0206 	orr.w	r2, r3, #6
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f043 0220 	orr.w	r2, r3, #32
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6e4:	b004      	add	sp, #16
 800a6e6:	4770      	bx	lr
 800a6e8:	ffbdffbf 	.word	0xffbdffbf
 800a6ec:	03ee0000 	.word	0x03ee0000

0800a6f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d165      	bne.n	800a7d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4a41      	ldr	r2, [pc, #260]	; (800a80c <USB_SetTurnaroundTime+0x11c>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d906      	bls.n	800a71a <USB_SetTurnaroundTime+0x2a>
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	4a40      	ldr	r2, [pc, #256]	; (800a810 <USB_SetTurnaroundTime+0x120>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d202      	bcs.n	800a71a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a714:	230f      	movs	r3, #15
 800a716:	617b      	str	r3, [r7, #20]
 800a718:	e062      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	4a3c      	ldr	r2, [pc, #240]	; (800a810 <USB_SetTurnaroundTime+0x120>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d306      	bcc.n	800a730 <USB_SetTurnaroundTime+0x40>
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	4a3b      	ldr	r2, [pc, #236]	; (800a814 <USB_SetTurnaroundTime+0x124>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d202      	bcs.n	800a730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a72a:	230e      	movs	r3, #14
 800a72c:	617b      	str	r3, [r7, #20]
 800a72e:	e057      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4a38      	ldr	r2, [pc, #224]	; (800a814 <USB_SetTurnaroundTime+0x124>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d306      	bcc.n	800a746 <USB_SetTurnaroundTime+0x56>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	4a37      	ldr	r2, [pc, #220]	; (800a818 <USB_SetTurnaroundTime+0x128>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d202      	bcs.n	800a746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a740:	230d      	movs	r3, #13
 800a742:	617b      	str	r3, [r7, #20]
 800a744:	e04c      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	4a33      	ldr	r2, [pc, #204]	; (800a818 <USB_SetTurnaroundTime+0x128>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d306      	bcc.n	800a75c <USB_SetTurnaroundTime+0x6c>
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	4a32      	ldr	r2, [pc, #200]	; (800a81c <USB_SetTurnaroundTime+0x12c>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d802      	bhi.n	800a75c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a756:	230c      	movs	r3, #12
 800a758:	617b      	str	r3, [r7, #20]
 800a75a:	e041      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4a2f      	ldr	r2, [pc, #188]	; (800a81c <USB_SetTurnaroundTime+0x12c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d906      	bls.n	800a772 <USB_SetTurnaroundTime+0x82>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	4a2e      	ldr	r2, [pc, #184]	; (800a820 <USB_SetTurnaroundTime+0x130>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d802      	bhi.n	800a772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a76c:	230b      	movs	r3, #11
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e036      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	4a2a      	ldr	r2, [pc, #168]	; (800a820 <USB_SetTurnaroundTime+0x130>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d906      	bls.n	800a788 <USB_SetTurnaroundTime+0x98>
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	4a29      	ldr	r2, [pc, #164]	; (800a824 <USB_SetTurnaroundTime+0x134>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d802      	bhi.n	800a788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a782:	230a      	movs	r3, #10
 800a784:	617b      	str	r3, [r7, #20]
 800a786:	e02b      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	4a26      	ldr	r2, [pc, #152]	; (800a824 <USB_SetTurnaroundTime+0x134>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d906      	bls.n	800a79e <USB_SetTurnaroundTime+0xae>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4a25      	ldr	r2, [pc, #148]	; (800a828 <USB_SetTurnaroundTime+0x138>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d202      	bcs.n	800a79e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a798:	2309      	movs	r3, #9
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e020      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	4a21      	ldr	r2, [pc, #132]	; (800a828 <USB_SetTurnaroundTime+0x138>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d306      	bcc.n	800a7b4 <USB_SetTurnaroundTime+0xc4>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	4a20      	ldr	r2, [pc, #128]	; (800a82c <USB_SetTurnaroundTime+0x13c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d802      	bhi.n	800a7b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a7ae:	2308      	movs	r3, #8
 800a7b0:	617b      	str	r3, [r7, #20]
 800a7b2:	e015      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4a1d      	ldr	r2, [pc, #116]	; (800a82c <USB_SetTurnaroundTime+0x13c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d906      	bls.n	800a7ca <USB_SetTurnaroundTime+0xda>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	4a1c      	ldr	r2, [pc, #112]	; (800a830 <USB_SetTurnaroundTime+0x140>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d202      	bcs.n	800a7ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7c4:	2307      	movs	r3, #7
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e00a      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7ca:	2306      	movs	r3, #6
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	e007      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7d0:	79fb      	ldrb	r3, [r7, #7]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d102      	bne.n	800a7dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7d6:	2309      	movs	r3, #9
 800a7d8:	617b      	str	r3, [r7, #20]
 800a7da:	e001      	b.n	800a7e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7dc:	2309      	movs	r3, #9
 800a7de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	029b      	lsls	r3, r3, #10
 800a7f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7f8:	431a      	orrs	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	00d8acbf 	.word	0x00d8acbf
 800a810:	00e4e1c0 	.word	0x00e4e1c0
 800a814:	00f42400 	.word	0x00f42400
 800a818:	01067380 	.word	0x01067380
 800a81c:	011a499f 	.word	0x011a499f
 800a820:	01312cff 	.word	0x01312cff
 800a824:	014ca43f 	.word	0x014ca43f
 800a828:	016e3600 	.word	0x016e3600
 800a82c:	01a6ab1f 	.word	0x01a6ab1f
 800a830:	01e84800 	.word	0x01e84800

0800a834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f043 0201 	orr.w	r2, r3, #1
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a856:	b480      	push	{r7}
 800a858:	b083      	sub	sp, #12
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a894:	78fb      	ldrb	r3, [r7, #3]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d115      	bne.n	800a8c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8a6:	2001      	movs	r0, #1
 800a8a8:	f7f7 f916 	bl	8001ad8 <HAL_Delay>
      ms++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f001 f93f 	bl	800bb36 <USB_GetMode>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d01e      	beq.n	800a8fc <USB_SetCurrentMode+0x84>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2b31      	cmp	r3, #49	; 0x31
 800a8c2:	d9f0      	bls.n	800a8a6 <USB_SetCurrentMode+0x2e>
 800a8c4:	e01a      	b.n	800a8fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8c6:	78fb      	ldrb	r3, [r7, #3]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d115      	bne.n	800a8f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8d8:	2001      	movs	r0, #1
 800a8da:	f7f7 f8fd 	bl	8001ad8 <HAL_Delay>
      ms++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 f926 	bl	800bb36 <USB_GetMode>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d005      	beq.n	800a8fc <USB_SetCurrentMode+0x84>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b31      	cmp	r3, #49	; 0x31
 800a8f4:	d9f0      	bls.n	800a8d8 <USB_SetCurrentMode+0x60>
 800a8f6:	e001      	b.n	800a8fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e005      	b.n	800a908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b32      	cmp	r3, #50	; 0x32
 800a900:	d101      	bne.n	800a906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e000      	b.n	800a908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a910:	b084      	sub	sp, #16
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a91e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a92a:	2300      	movs	r3, #0
 800a92c:	613b      	str	r3, [r7, #16]
 800a92e:	e009      	b.n	800a944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	3340      	adds	r3, #64	; 0x40
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	3301      	adds	r3, #1
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b0e      	cmp	r3, #14
 800a948:	d9f2      	bls.n	800a930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11c      	bne.n	800a98a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95e:	f043 0302 	orr.w	r3, r3, #2
 800a962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	e005      	b.n	800a996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a99c:	461a      	mov	r2, r3
 800a99e:	2300      	movs	r3, #0
 800a9a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a8:	4619      	mov	r1, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	680b      	ldr	r3, [r1, #0]
 800a9b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d10c      	bne.n	800a9d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d104      	bne.n	800a9cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f965 	bl	800ac94 <USB_SetDevSpeed>
 800a9ca:	e008      	b.n	800a9de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f960 	bl	800ac94 <USB_SetDevSpeed>
 800a9d4:	e003      	b.n	800a9de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9d6:	2103      	movs	r1, #3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f95b 	bl	800ac94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9de:	2110      	movs	r1, #16
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f8f3 	bl	800abcc <USB_FlushTxFifo>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 f91f 	bl	800ac34 <USB_FlushRxFifo>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	461a      	mov	r2, r3
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa12:	461a      	mov	r2, r3
 800aa14:	2300      	movs	r3, #0
 800aa16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1e:	461a      	mov	r2, r3
 800aa20:	2300      	movs	r3, #0
 800aa22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	e043      	b.n	800aab2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa40:	d118      	bne.n	800aa74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa54:	461a      	mov	r2, r3
 800aa56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	e013      	b.n	800aa86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	e008      	b.n	800aa86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa80:	461a      	mov	r2, r3
 800aa82:	2300      	movs	r3, #0
 800aa84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa92:	461a      	mov	r2, r3
 800aa94:	2300      	movs	r3, #0
 800aa96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aaaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	3301      	adds	r3, #1
 800aab0:	613b      	str	r3, [r7, #16]
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	693a      	ldr	r2, [r7, #16]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d3b7      	bcc.n	800aa2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaba:	2300      	movs	r3, #0
 800aabc:	613b      	str	r3, [r7, #16]
 800aabe:	e043      	b.n	800ab48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aad6:	d118      	bne.n	800ab0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10a      	bne.n	800aaf4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaea:	461a      	mov	r2, r3
 800aaec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	e013      	b.n	800ab1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	015a      	lsls	r2, r3, #5
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4413      	add	r3, r2
 800aafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab00:	461a      	mov	r2, r3
 800ab02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab06:	6013      	str	r3, [r2, #0]
 800ab08:	e008      	b.n	800ab1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab16:	461a      	mov	r2, r3
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	461a      	mov	r2, r3
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	015a      	lsls	r2, r3, #5
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	4413      	add	r3, r2
 800ab36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	3301      	adds	r3, #1
 800ab46:	613b      	str	r3, [r7, #16]
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d3b7      	bcc.n	800aac0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d105      	bne.n	800ab84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f043 0210 	orr.w	r2, r3, #16
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	699a      	ldr	r2, [r3, #24]
 800ab88:	4b0e      	ldr	r3, [pc, #56]	; (800abc4 <USB_DevInit+0x2b4>)
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d005      	beq.n	800aba2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	f043 0208 	orr.w	r2, r3, #8
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d105      	bne.n	800abb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	699a      	ldr	r2, [r3, #24]
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <USB_DevInit+0x2b8>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abc0:	b004      	add	sp, #16
 800abc2:	4770      	bx	lr
 800abc4:	803c3800 	.word	0x803c3800
 800abc8:	40000004 	.word	0x40000004

0800abcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3301      	adds	r3, #1
 800abde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <USB_FlushTxFifo+0x64>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d901      	bls.n	800abec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e01b      	b.n	800ac24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	daf2      	bge.n	800abda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	019b      	lsls	r3, r3, #6
 800abfc:	f043 0220 	orr.w	r2, r3, #32
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	4a08      	ldr	r2, [pc, #32]	; (800ac30 <USB_FlushTxFifo+0x64>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d901      	bls.n	800ac16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e006      	b.n	800ac24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	f003 0320 	and.w	r3, r3, #32
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d0f0      	beq.n	800ac04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3714      	adds	r7, #20
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	00030d40 	.word	0x00030d40

0800ac34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	3301      	adds	r3, #1
 800ac44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4a11      	ldr	r2, [pc, #68]	; (800ac90 <USB_FlushRxFifo+0x5c>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d901      	bls.n	800ac52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	e018      	b.n	800ac84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	daf2      	bge.n	800ac40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2210      	movs	r2, #16
 800ac62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3301      	adds	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	4a08      	ldr	r2, [pc, #32]	; (800ac90 <USB_FlushRxFifo+0x5c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d901      	bls.n	800ac76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e006      	b.n	800ac84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0310 	and.w	r3, r3, #16
 800ac7e:	2b10      	cmp	r3, #16
 800ac80:	d0f0      	beq.n	800ac64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr
 800ac90:	00030d40 	.word	0x00030d40

0800ac94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	68f9      	ldr	r1, [r7, #12]
 800acb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acb4:	4313      	orrs	r3, r2
 800acb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr

0800acc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800acc6:	b480      	push	{r7}
 800acc8:	b087      	sub	sp, #28
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 0306 	and.w	r3, r3, #6
 800acde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ace6:	2300      	movs	r3, #0
 800ace8:	75fb      	strb	r3, [r7, #23]
 800acea:	e00a      	b.n	800ad02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d002      	beq.n	800acf8 <USB_GetDevSpeed+0x32>
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2b06      	cmp	r3, #6
 800acf6:	d102      	bne.n	800acfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800acf8:	2302      	movs	r3, #2
 800acfa:	75fb      	strb	r3, [r7, #23]
 800acfc:	e001      	b.n	800ad02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acfe:	230f      	movs	r3, #15
 800ad00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	371c      	adds	r7, #28
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	785b      	ldrb	r3, [r3, #1]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d139      	bne.n	800ada0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	f003 030f 	and.w	r3, r3, #15
 800ad3c:	2101      	movs	r1, #1
 800ad3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	68f9      	ldr	r1, [r7, #12]
 800ad46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d153      	bne.n	800ae0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	791b      	ldrb	r3, [r3, #4]
 800ad7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	059b      	lsls	r3, r3, #22
 800ad86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad88:	431a      	orrs	r2, r3
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	0159      	lsls	r1, r3, #5
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	440b      	add	r3, r1
 800ad92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad96:	4619      	mov	r1, r3
 800ad98:	4b20      	ldr	r3, [pc, #128]	; (800ae1c <USB_ActivateEndpoint+0x10c>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	600b      	str	r3, [r1, #0]
 800ad9e:	e035      	b.n	800ae0c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada6:	69da      	ldr	r2, [r3, #28]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	2101      	movs	r1, #1
 800adb2:	fa01 f303 	lsl.w	r3, r1, r3
 800adb6:	041b      	lsls	r3, r3, #16
 800adb8:	68f9      	ldr	r1, [r7, #12]
 800adba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adbe:	4313      	orrs	r3, r2
 800adc0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d119      	bne.n	800ae0c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	791b      	ldrb	r3, [r3, #4]
 800adf2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adf4:	430b      	orrs	r3, r1
 800adf6:	431a      	orrs	r2, r3
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	0159      	lsls	r1, r3, #5
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	440b      	add	r3, r1
 800ae00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae04:	4619      	mov	r1, r3
 800ae06:	4b05      	ldr	r3, [pc, #20]	; (800ae1c <USB_ActivateEndpoint+0x10c>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3714      	adds	r7, #20
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	10008000 	.word	0x10008000

0800ae20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	785b      	ldrb	r3, [r3, #1]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d161      	bne.n	800af00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae52:	d11f      	bne.n	800ae94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	015a      	lsls	r2, r3, #5
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	0151      	lsls	r1, r2, #5
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	440a      	add	r2, r1
 800ae6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	015a      	lsls	r2, r3, #5
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	0151      	lsls	r1, r2, #5
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	440a      	add	r2, r1
 800ae8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	43db      	mvns	r3, r3
 800aeae:	68f9      	ldr	r1, [r7, #12]
 800aeb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aebe:	69da      	ldr	r2, [r3, #28]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	f003 030f 	and.w	r3, r3, #15
 800aec8:	2101      	movs	r1, #1
 800aeca:	fa01 f303 	lsl.w	r3, r1, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	43db      	mvns	r3, r3
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aed8:	4013      	ands	r3, r2
 800aeda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	0159      	lsls	r1, r3, #5
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	440b      	add	r3, r1
 800aef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef6:	4619      	mov	r1, r3
 800aef8:	4b35      	ldr	r3, [pc, #212]	; (800afd0 <USB_DeactivateEndpoint+0x1b0>)
 800aefa:	4013      	ands	r3, r2
 800aefc:	600b      	str	r3, [r1, #0]
 800aefe:	e060      	b.n	800afc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	015a      	lsls	r2, r3, #5
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af16:	d11f      	bne.n	800af58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	0151      	lsls	r1, r2, #5
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	440a      	add	r2, r1
 800af2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	2101      	movs	r1, #1
 800af6a:	fa01 f303 	lsl.w	r3, r1, r3
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	43db      	mvns	r3, r3
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af78:	4013      	ands	r3, r2
 800af7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af82:	69da      	ldr	r2, [r3, #28]
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 030f 	and.w	r3, r3, #15
 800af8c:	2101      	movs	r1, #1
 800af8e:	fa01 f303 	lsl.w	r3, r1, r3
 800af92:	041b      	lsls	r3, r3, #16
 800af94:	43db      	mvns	r3, r3
 800af96:	68f9      	ldr	r1, [r7, #12]
 800af98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af9c:	4013      	ands	r3, r2
 800af9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	015a      	lsls	r2, r3, #5
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	4413      	add	r3, r2
 800afa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	0159      	lsls	r1, r3, #5
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	440b      	add	r3, r1
 800afb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afba:	4619      	mov	r1, r3
 800afbc:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <USB_DeactivateEndpoint+0x1b4>)
 800afbe:	4013      	ands	r3, r2
 800afc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	ec337800 	.word	0xec337800
 800afd4:	eff37800 	.word	0xeff37800

0800afd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08a      	sub	sp, #40	; 0x28
 800afdc:	af02      	add	r7, sp, #8
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	785b      	ldrb	r3, [r3, #1]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	f040 8181 	bne.w	800b2fc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d132      	bne.n	800b068 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00e:	691a      	ldr	r2, [r3, #16]
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	0159      	lsls	r1, r3, #5
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	440b      	add	r3, r1
 800b018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b01c:	4619      	mov	r1, r3
 800b01e:	4ba5      	ldr	r3, [pc, #660]	; (800b2b4 <USB_EPStartXfer+0x2dc>)
 800b020:	4013      	ands	r3, r2
 800b022:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	69ba      	ldr	r2, [r7, #24]
 800b034:	0151      	lsls	r1, r2, #5
 800b036:	69fa      	ldr	r2, [r7, #28]
 800b038:	440a      	add	r2, r1
 800b03a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b03e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	015a      	lsls	r2, r3, #5
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	4413      	add	r3, r2
 800b04c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	0159      	lsls	r1, r3, #5
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	440b      	add	r3, r1
 800b05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05e:	4619      	mov	r1, r3
 800b060:	4b95      	ldr	r3, [pc, #596]	; (800b2b8 <USB_EPStartXfer+0x2e0>)
 800b062:	4013      	ands	r3, r2
 800b064:	610b      	str	r3, [r1, #16]
 800b066:	e092      	b.n	800b18e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	0159      	lsls	r1, r3, #5
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	440b      	add	r3, r1
 800b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b082:	4619      	mov	r1, r3
 800b084:	4b8c      	ldr	r3, [pc, #560]	; (800b2b8 <USB_EPStartXfer+0x2e0>)
 800b086:	4013      	ands	r3, r2
 800b088:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	015a      	lsls	r2, r3, #5
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4413      	add	r3, r2
 800b092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b096:	691a      	ldr	r2, [r3, #16]
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	0159      	lsls	r1, r3, #5
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	440b      	add	r3, r1
 800b0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4b83      	ldr	r3, [pc, #524]	; (800b2b4 <USB_EPStartXfer+0x2dc>)
 800b0a8:	4013      	ands	r3, r2
 800b0aa:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11a      	bne.n	800b0e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d903      	bls.n	800b0c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	69fb      	ldr	r3, [r7, #28]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d2:	691b      	ldr	r3, [r3, #16]
 800b0d4:	69ba      	ldr	r2, [r7, #24]
 800b0d6:	0151      	lsls	r1, r2, #5
 800b0d8:	69fa      	ldr	r2, [r7, #28]
 800b0da:	440a      	add	r2, r1
 800b0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0e4:	6113      	str	r3, [r2, #16]
 800b0e6:	e01b      	b.n	800b120 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	6919      	ldr	r1, [r3, #16]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	440b      	add	r3, r1
 800b100:	1e59      	subs	r1, r3, #1
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	689b      	ldr	r3, [r3, #8]
 800b106:	fbb1 f3f3 	udiv	r3, r1, r3
 800b10a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b10c:	4b6b      	ldr	r3, [pc, #428]	; (800b2bc <USB_EPStartXfer+0x2e4>)
 800b10e:	400b      	ands	r3, r1
 800b110:	69b9      	ldr	r1, [r7, #24]
 800b112:	0148      	lsls	r0, r1, #5
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	4401      	add	r1, r0
 800b118:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b11c:	4313      	orrs	r3, r2
 800b11e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b136:	69b9      	ldr	r1, [r7, #24]
 800b138:	0148      	lsls	r0, r1, #5
 800b13a:	69f9      	ldr	r1, [r7, #28]
 800b13c:	4401      	add	r1, r0
 800b13e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b142:	4313      	orrs	r3, r2
 800b144:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	791b      	ldrb	r3, [r3, #4]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d11f      	bne.n	800b18e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	015a      	lsls	r2, r3, #5
 800b152:	69fb      	ldr	r3, [r7, #28]
 800b154:	4413      	add	r3, r2
 800b156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	69ba      	ldr	r2, [r7, #24]
 800b15e:	0151      	lsls	r1, r2, #5
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	440a      	add	r2, r1
 800b164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b168:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b16c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	440a      	add	r2, r1
 800b184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b18c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	2b01      	cmp	r3, #1
 800b192:	d14b      	bne.n	800b22c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	69db      	ldr	r3, [r3, #28]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	69db      	ldr	r3, [r3, #28]
 800b1ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	791b      	ldrb	r3, [r3, #4]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d128      	bne.n	800b20a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d110      	bne.n	800b1ea <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	015a      	lsls	r2, r3, #5
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	0151      	lsls	r1, r2, #5
 800b1da:	69fa      	ldr	r2, [r7, #28]
 800b1dc:	440a      	add	r2, r1
 800b1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1e6:	6013      	str	r3, [r2, #0]
 800b1e8:	e00f      	b.n	800b20a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	015a      	lsls	r2, r3, #5
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	0151      	lsls	r1, r2, #5
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	440a      	add	r2, r1
 800b200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b208:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	015a      	lsls	r2, r3, #5
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	4413      	add	r3, r2
 800b212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	0151      	lsls	r1, r2, #5
 800b21c:	69fa      	ldr	r2, [r7, #28]
 800b21e:	440a      	add	r2, r1
 800b220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	e16a      	b.n	800b502 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69ba      	ldr	r2, [r7, #24]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	69fa      	ldr	r2, [r7, #28]
 800b240:	440a      	add	r2, r1
 800b242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b24a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	791b      	ldrb	r3, [r3, #4]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d015      	beq.n	800b280 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	691b      	ldr	r3, [r3, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f000 8152 	beq.w	800b502 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	2101      	movs	r1, #1
 800b270:	fa01 f303 	lsl.w	r3, r1, r3
 800b274:	69f9      	ldr	r1, [r7, #28]
 800b276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b27a:	4313      	orrs	r3, r2
 800b27c:	634b      	str	r3, [r1, #52]	; 0x34
 800b27e:	e140      	b.n	800b502 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d117      	bne.n	800b2c0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	0151      	lsls	r1, r2, #5
 800b2a2:	69fa      	ldr	r2, [r7, #28]
 800b2a4:	440a      	add	r2, r1
 800b2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	e016      	b.n	800b2e0 <USB_EPStartXfer+0x308>
 800b2b2:	bf00      	nop
 800b2b4:	e007ffff 	.word	0xe007ffff
 800b2b8:	fff80000 	.word	0xfff80000
 800b2bc:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2de:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	68d9      	ldr	r1, [r3, #12]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	781a      	ldrb	r2, [r3, #0]
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	691b      	ldr	r3, [r3, #16]
 800b2ec:	b298      	uxth	r0, r3
 800b2ee:	79fb      	ldrb	r3, [r7, #7]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 f9b9 	bl	800b66c <USB_WritePacket>
 800b2fa:	e102      	b.n	800b502 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	0159      	lsls	r1, r3, #5
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	440b      	add	r3, r1
 800b312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b316:	4619      	mov	r1, r3
 800b318:	4b7c      	ldr	r3, [pc, #496]	; (800b50c <USB_EPStartXfer+0x534>)
 800b31a:	4013      	ands	r3, r2
 800b31c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	4413      	add	r3, r2
 800b326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	0159      	lsls	r1, r3, #5
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	440b      	add	r3, r1
 800b334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b338:	4619      	mov	r1, r3
 800b33a:	4b75      	ldr	r3, [pc, #468]	; (800b510 <USB_EPStartXfer+0x538>)
 800b33c:	4013      	ands	r3, r2
 800b33e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d12f      	bne.n	800b3a6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	689a      	ldr	r2, [r3, #8]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	689a      	ldr	r2, [r3, #8]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36a:	691a      	ldr	r2, [r3, #16]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b374:	69b9      	ldr	r1, [r7, #24]
 800b376:	0148      	lsls	r0, r1, #5
 800b378:	69f9      	ldr	r1, [r7, #28]
 800b37a:	4401      	add	r1, r0
 800b37c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b380:	4313      	orrs	r3, r2
 800b382:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	69ba      	ldr	r2, [r7, #24]
 800b394:	0151      	lsls	r1, r2, #5
 800b396:	69fa      	ldr	r2, [r7, #28]
 800b398:	440a      	add	r2, r1
 800b39a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b39e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3a2:	6113      	str	r3, [r2, #16]
 800b3a4:	e05f      	b.n	800b466 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d123      	bne.n	800b3f6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c4:	69b9      	ldr	r1, [r7, #24]
 800b3c6:	0148      	lsls	r0, r1, #5
 800b3c8:	69f9      	ldr	r1, [r7, #28]
 800b3ca:	4401      	add	r1, r0
 800b3cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	69ba      	ldr	r2, [r7, #24]
 800b3e4:	0151      	lsls	r1, r2, #5
 800b3e6:	69fa      	ldr	r2, [r7, #28]
 800b3e8:	440a      	add	r2, r1
 800b3ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3f2:	6113      	str	r3, [r2, #16]
 800b3f4:	e037      	b.n	800b466 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	691a      	ldr	r2, [r3, #16]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	4413      	add	r3, r2
 800b400:	1e5a      	subs	r2, r3, #1
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	fbb2 f3f3 	udiv	r3, r2, r3
 800b40a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	8afa      	ldrh	r2, [r7, #22]
 800b412:	fb03 f202 	mul.w	r2, r3, r2
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b426:	691a      	ldr	r2, [r3, #16]
 800b428:	8afb      	ldrh	r3, [r7, #22]
 800b42a:	04d9      	lsls	r1, r3, #19
 800b42c:	4b39      	ldr	r3, [pc, #228]	; (800b514 <USB_EPStartXfer+0x53c>)
 800b42e:	400b      	ands	r3, r1
 800b430:	69b9      	ldr	r1, [r7, #24]
 800b432:	0148      	lsls	r0, r1, #5
 800b434:	69f9      	ldr	r1, [r7, #28]
 800b436:	4401      	add	r1, r0
 800b438:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b43c:	4313      	orrs	r3, r2
 800b43e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	015a      	lsls	r2, r3, #5
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	4413      	add	r3, r2
 800b448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44c:	691a      	ldr	r2, [r3, #16]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	6a1b      	ldr	r3, [r3, #32]
 800b452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b456:	69b9      	ldr	r1, [r7, #24]
 800b458:	0148      	lsls	r0, r1, #5
 800b45a:	69f9      	ldr	r1, [r7, #28]
 800b45c:	4401      	add	r1, r0
 800b45e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b462:	4313      	orrs	r3, r2
 800b464:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b466:	79fb      	ldrb	r3, [r7, #7]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d10d      	bne.n	800b488 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	68d9      	ldr	r1, [r3, #12]
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	69fb      	ldr	r3, [r7, #28]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b484:	460a      	mov	r2, r1
 800b486:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	791b      	ldrb	r3, [r3, #4]
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d128      	bne.n	800b4e2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d110      	bne.n	800b4c2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	69ba      	ldr	r2, [r7, #24]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	69fa      	ldr	r2, [r7, #28]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	e00f      	b.n	800b4e2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4e0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	015a      	lsls	r2, r3, #5
 800b4e6:	69fb      	ldr	r3, [r7, #28]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	0151      	lsls	r1, r2, #5
 800b4f4:	69fa      	ldr	r2, [r7, #28]
 800b4f6:	440a      	add	r2, r1
 800b4f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b500:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b502:	2300      	movs	r3, #0
}
 800b504:	4618      	mov	r0, r3
 800b506:	3720      	adds	r7, #32
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	fff80000 	.word	0xfff80000
 800b510:	e007ffff 	.word	0xe007ffff
 800b514:	1ff80000 	.word	0x1ff80000

0800b518 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b518:	b480      	push	{r7}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b526:	2300      	movs	r3, #0
 800b528:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d14a      	bne.n	800b5cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	015a      	lsls	r2, r3, #5
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	4413      	add	r3, r2
 800b540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b54a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b54e:	f040 8086 	bne.w	800b65e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	015a      	lsls	r2, r3, #5
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	4413      	add	r3, r2
 800b55c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	7812      	ldrb	r2, [r2, #0]
 800b566:	0151      	lsls	r1, r2, #5
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	440a      	add	r2, r1
 800b56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b570:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b574:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	683a      	ldr	r2, [r7, #0]
 800b588:	7812      	ldrb	r2, [r2, #0]
 800b58a:	0151      	lsls	r1, r2, #5
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	440a      	add	r2, r1
 800b590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b598:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3301      	adds	r3, #1
 800b59e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f242 7210 	movw	r2, #10000	; 0x2710
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d902      	bls.n	800b5b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	75fb      	strb	r3, [r7, #23]
          break;
 800b5ae:	e056      	b.n	800b65e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5c8:	d0e7      	beq.n	800b59a <USB_EPStopXfer+0x82>
 800b5ca:	e048      	b.n	800b65e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	015a      	lsls	r2, r3, #5
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5e4:	d13b      	bne.n	800b65e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	015a      	lsls	r2, r3, #5
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	7812      	ldrb	r2, [r2, #0]
 800b5fa:	0151      	lsls	r1, r2, #5
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	440a      	add	r2, r1
 800b600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b604:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b608:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	015a      	lsls	r2, r3, #5
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	4413      	add	r3, r2
 800b614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	7812      	ldrb	r2, [r2, #0]
 800b61e:	0151      	lsls	r1, r2, #5
 800b620:	693a      	ldr	r2, [r7, #16]
 800b622:	440a      	add	r2, r1
 800b624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b62c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	3301      	adds	r3, #1
 800b632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f242 7210 	movw	r2, #10000	; 0x2710
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d902      	bls.n	800b644 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	75fb      	strb	r3, [r7, #23]
          break;
 800b642:	e00c      	b.n	800b65e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	015a      	lsls	r2, r3, #5
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	4413      	add	r3, r2
 800b64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b65c:	d0e7      	beq.n	800b62e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b660:	4618      	mov	r0, r3
 800b662:	371c      	adds	r7, #28
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b089      	sub	sp, #36	; 0x24
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	4611      	mov	r1, r2
 800b678:	461a      	mov	r2, r3
 800b67a:	460b      	mov	r3, r1
 800b67c:	71fb      	strb	r3, [r7, #7]
 800b67e:	4613      	mov	r3, r2
 800b680:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b68a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d123      	bne.n	800b6da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b692:	88bb      	ldrh	r3, [r7, #4]
 800b694:	3303      	adds	r3, #3
 800b696:	089b      	lsrs	r3, r3, #2
 800b698:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b69a:	2300      	movs	r3, #0
 800b69c:	61bb      	str	r3, [r7, #24]
 800b69e:	e018      	b.n	800b6d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b6a0:	79fb      	ldrb	r3, [r7, #7]
 800b6a2:	031a      	lsls	r2, r3, #12
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	61bb      	str	r3, [r7, #24]
 800b6d2:	69ba      	ldr	r2, [r7, #24]
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d3e2      	bcc.n	800b6a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3724      	adds	r7, #36	; 0x24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b08b      	sub	sp, #44	; 0x2c
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b6fe:	88fb      	ldrh	r3, [r7, #6]
 800b700:	089b      	lsrs	r3, r3, #2
 800b702:	b29b      	uxth	r3, r3
 800b704:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b706:	88fb      	ldrh	r3, [r7, #6]
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b70e:	2300      	movs	r3, #0
 800b710:	623b      	str	r3, [r7, #32]
 800b712:	e014      	b.n	800b73e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	601a      	str	r2, [r3, #0]
    pDest++;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	3301      	adds	r3, #1
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b728:	3301      	adds	r3, #1
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	3301      	adds	r3, #1
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	3301      	adds	r3, #1
 800b736:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	3301      	adds	r3, #1
 800b73c:	623b      	str	r3, [r7, #32]
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	429a      	cmp	r2, r3
 800b744:	d3e6      	bcc.n	800b714 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b746:	8bfb      	ldrh	r3, [r7, #30]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d01e      	beq.n	800b78a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b74c:	2300      	movs	r3, #0
 800b74e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b756:	461a      	mov	r2, r3
 800b758:	f107 0310 	add.w	r3, r7, #16
 800b75c:	6812      	ldr	r2, [r2, #0]
 800b75e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	6a3b      	ldr	r3, [r7, #32]
 800b764:	b2db      	uxtb	r3, r3
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	fa22 f303 	lsr.w	r3, r2, r3
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	701a      	strb	r2, [r3, #0]
      i++;
 800b772:	6a3b      	ldr	r3, [r7, #32]
 800b774:	3301      	adds	r3, #1
 800b776:	623b      	str	r3, [r7, #32]
      pDest++;
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	3301      	adds	r3, #1
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b77e:	8bfb      	ldrh	r3, [r7, #30]
 800b780:	3b01      	subs	r3, #1
 800b782:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b784:	8bfb      	ldrh	r3, [r7, #30]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d1ea      	bne.n	800b760 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	372c      	adds	r7, #44	; 0x2c
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr

0800b798 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b798:	b480      	push	{r7}
 800b79a:	b085      	sub	sp, #20
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	2b01      	cmp	r3, #1
 800b7b2:	d12c      	bne.n	800b80e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	db12      	blt.n	800b7ec <USB_EPSetStall+0x54>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00f      	beq.n	800b7ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	0151      	lsls	r1, r2, #5
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	440a      	add	r2, r1
 800b7e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b7ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b806:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b80a:	6013      	str	r3, [r2, #0]
 800b80c:	e02b      	b.n	800b866 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db12      	blt.n	800b846 <USB_EPSetStall+0xae>
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00f      	beq.n	800b846 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	015a      	lsls	r2, r3, #5
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	0151      	lsls	r1, r2, #5
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	440a      	add	r2, r1
 800b83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b844:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	015a      	lsls	r2, r3, #5
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	4413      	add	r3, r2
 800b84e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	0151      	lsls	r1, r2, #5
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	440a      	add	r2, r1
 800b85c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b860:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3714      	adds	r7, #20
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d128      	bne.n	800b8e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	791b      	ldrb	r3, [r3, #4]
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d003      	beq.n	800b8c0 <USB_EPClearStall+0x4c>
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	791b      	ldrb	r3, [r3, #4]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d138      	bne.n	800b932 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	e027      	b.n	800b932 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	0151      	lsls	r1, r2, #5
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	440a      	add	r2, r1
 800b8f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b900:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	791b      	ldrb	r3, [r3, #4]
 800b906:	2b03      	cmp	r3, #3
 800b908:	d003      	beq.n	800b912 <USB_EPClearStall+0x9e>
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	791b      	ldrb	r3, [r3, #4]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d10f      	bne.n	800b932 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	015a      	lsls	r2, r3, #5
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4413      	add	r3, r2
 800b91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68ba      	ldr	r2, [r7, #8]
 800b922:	0151      	lsls	r1, r2, #5
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	440a      	add	r2, r1
 800b928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b92c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b930:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b95e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b962:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b96a:	681a      	ldr	r2, [r3, #0]
 800b96c:	78fb      	ldrb	r3, [r7, #3]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b974:	68f9      	ldr	r1, [r7, #12]
 800b976:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b97a:	4313      	orrs	r3, r2
 800b97c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9a6:	f023 0303 	bic.w	r3, r3, #3
 800b9aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9ba:	f023 0302 	bic.w	r3, r3, #2
 800b9be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9e8:	f023 0303 	bic.w	r3, r3, #3
 800b9ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9fc:	f043 0302 	orr.w	r3, r3, #2
 800ba00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4013      	ands	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba28:	68fb      	ldr	r3, [r7, #12]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b085      	sub	sp, #20
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	68ba      	ldr	r2, [r7, #8]
 800ba56:	4013      	ands	r3, r2
 800ba58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	0c1b      	lsrs	r3, r3, #16
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3714      	adds	r7, #20
 800ba62:	46bd      	mov	sp, r7
 800ba64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba68:	4770      	bx	lr

0800ba6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba6a:	b480      	push	{r7}
 800ba6c:	b085      	sub	sp, #20
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	b29b      	uxth	r3, r3
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b085      	sub	sp, #20
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	4013      	ands	r3, r2
 800baca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bacc:	68bb      	ldr	r3, [r7, #8]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr

0800bada <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bada:	b480      	push	{r7}
 800badc:	b087      	sub	sp, #28
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	460b      	mov	r3, r1
 800bae4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	fa22 f303 	lsr.w	r3, r2, r3
 800bb0a:	01db      	lsls	r3, r3, #7
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	693a      	ldr	r2, [r7, #16]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bb14:	78fb      	ldrb	r3, [r7, #3]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4013      	ands	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb28:	68bb      	ldr	r3, [r7, #8]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	371c      	adds	r7, #28
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	695b      	ldr	r3, [r3, #20]
 800bb42:	f003 0301 	and.w	r3, r3, #1
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr
	...

0800bb54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb6e:	4619      	mov	r1, r3
 800bb70:	4b09      	ldr	r3, [pc, #36]	; (800bb98 <USB_ActivateSetup+0x44>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	68fa      	ldr	r2, [r7, #12]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr
 800bb98:	fffff800 	.word	0xfffff800

0800bb9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	460b      	mov	r3, r1
 800bba6:	607a      	str	r2, [r7, #4]
 800bba8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	333c      	adds	r3, #60	; 0x3c
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	4a26      	ldr	r2, [pc, #152]	; (800bc54 <USB_EP0_OutStart+0xb8>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d90a      	bls.n	800bbd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbd0:	d101      	bne.n	800bbd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	e037      	b.n	800bc46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbdc:	461a      	mov	r2, r3
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	697a      	ldr	r2, [r7, #20]
 800bbec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bbf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc04:	f043 0318 	orr.w	r3, r3, #24
 800bc08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc10:	691b      	ldr	r3, [r3, #16]
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bc1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bc1e:	7afb      	ldrb	r3, [r7, #11]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10f      	bne.n	800bc44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bc42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	371c      	adds	r7, #28
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	4f54300a 	.word	0x4f54300a

0800bc58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc60:	2300      	movs	r3, #0
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	3301      	adds	r3, #1
 800bc68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	4a13      	ldr	r2, [pc, #76]	; (800bcbc <USB_CoreReset+0x64>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d901      	bls.n	800bc76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc72:	2303      	movs	r3, #3
 800bc74:	e01b      	b.n	800bcae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	daf2      	bge.n	800bc64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	691b      	ldr	r3, [r3, #16]
 800bc86:	f043 0201 	orr.w	r2, r3, #1
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	3301      	adds	r3, #1
 800bc92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4a09      	ldr	r2, [pc, #36]	; (800bcbc <USB_CoreReset+0x64>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d901      	bls.n	800bca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e006      	b.n	800bcae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d0f0      	beq.n	800bc8e <USB_CoreReset+0x36>

  return HAL_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3714      	adds	r7, #20
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr
 800bcba:	bf00      	nop
 800bcbc:	00030d40 	.word	0x00030d40

0800bcc0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	460b      	mov	r3, r1
 800bcca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bccc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bcd0:	f005 f9e6 	bl	80110a0 <USBD_static_malloc>
 800bcd4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d109      	bne.n	800bcf0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	32b0      	adds	r2, #176	; 0xb0
 800bce6:	2100      	movs	r1, #0
 800bce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bcec:	2302      	movs	r3, #2
 800bcee:	e0d4      	b.n	800be9a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bcf0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f005 fa4a 	bl	8011190 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	32b0      	adds	r2, #176	; 0xb0
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	32b0      	adds	r2, #176	; 0xb0
 800bd16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	7c1b      	ldrb	r3, [r3, #16]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d138      	bne.n	800bd9a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd28:	4b5e      	ldr	r3, [pc, #376]	; (800bea4 <USBD_CDC_Init+0x1e4>)
 800bd2a:	7819      	ldrb	r1, [r3, #0]
 800bd2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd30:	2202      	movs	r2, #2
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f005 f891 	bl	8010e5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd38:	4b5a      	ldr	r3, [pc, #360]	; (800bea4 <USBD_CDC_Init+0x1e4>)
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 020f 	and.w	r2, r3, #15
 800bd40:	6879      	ldr	r1, [r7, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	440b      	add	r3, r1
 800bd4c:	3324      	adds	r3, #36	; 0x24
 800bd4e:	2201      	movs	r2, #1
 800bd50:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd52:	4b55      	ldr	r3, [pc, #340]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800bd54:	7819      	ldrb	r1, [r3, #0]
 800bd56:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f005 f87c 	bl	8010e5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd62:	4b51      	ldr	r3, [pc, #324]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	f003 020f 	and.w	r2, r3, #15
 800bd6a:	6879      	ldr	r1, [r7, #4]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd7e:	4b4b      	ldr	r3, [pc, #300]	; (800beac <USBD_CDC_Init+0x1ec>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	f003 020f 	and.w	r2, r3, #15
 800bd86:	6879      	ldr	r1, [r7, #4]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	009b      	lsls	r3, r3, #2
 800bd8c:	4413      	add	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	440b      	add	r3, r1
 800bd92:	3326      	adds	r3, #38	; 0x26
 800bd94:	2210      	movs	r2, #16
 800bd96:	801a      	strh	r2, [r3, #0]
 800bd98:	e035      	b.n	800be06 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd9a:	4b42      	ldr	r3, [pc, #264]	; (800bea4 <USBD_CDC_Init+0x1e4>)
 800bd9c:	7819      	ldrb	r1, [r3, #0]
 800bd9e:	2340      	movs	r3, #64	; 0x40
 800bda0:	2202      	movs	r2, #2
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f005 f859 	bl	8010e5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bda8:	4b3e      	ldr	r3, [pc, #248]	; (800bea4 <USBD_CDC_Init+0x1e4>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 020f 	and.w	r2, r3, #15
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	4613      	mov	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	4413      	add	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	440b      	add	r3, r1
 800bdbc:	3324      	adds	r3, #36	; 0x24
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bdc2:	4b39      	ldr	r3, [pc, #228]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800bdc4:	7819      	ldrb	r1, [r3, #0]
 800bdc6:	2340      	movs	r3, #64	; 0x40
 800bdc8:	2202      	movs	r2, #2
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f005 f845 	bl	8010e5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bdd0:	4b35      	ldr	r3, [pc, #212]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	f003 020f 	and.w	r2, r3, #15
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4613      	mov	r3, r2
 800bddc:	009b      	lsls	r3, r3, #2
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	440b      	add	r3, r1
 800bde4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bde8:	2201      	movs	r2, #1
 800bdea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdec:	4b2f      	ldr	r3, [pc, #188]	; (800beac <USBD_CDC_Init+0x1ec>)
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	f003 020f 	and.w	r2, r3, #15
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	009b      	lsls	r3, r3, #2
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	440b      	add	r3, r1
 800be00:	3326      	adds	r3, #38	; 0x26
 800be02:	2210      	movs	r2, #16
 800be04:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be06:	4b29      	ldr	r3, [pc, #164]	; (800beac <USBD_CDC_Init+0x1ec>)
 800be08:	7819      	ldrb	r1, [r3, #0]
 800be0a:	2308      	movs	r3, #8
 800be0c:	2203      	movs	r2, #3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f005 f823 	bl	8010e5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800be14:	4b25      	ldr	r3, [pc, #148]	; (800beac <USBD_CDC_Init+0x1ec>)
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	f003 020f 	and.w	r2, r3, #15
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	440b      	add	r3, r1
 800be28:	3324      	adds	r3, #36	; 0x24
 800be2a:	2201      	movs	r2, #1
 800be2c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2200      	movs	r2, #0
 800be32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	33b0      	adds	r3, #176	; 0xb0
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2200      	movs	r2, #0
 800be56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800be60:	2b00      	cmp	r3, #0
 800be62:	d101      	bne.n	800be68 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800be64:	2302      	movs	r3, #2
 800be66:	e018      	b.n	800be9a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	7c1b      	ldrb	r3, [r3, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10a      	bne.n	800be86 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be70:	4b0d      	ldr	r3, [pc, #52]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800be72:	7819      	ldrb	r1, [r3, #0]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f005 f8da 	bl	8011038 <USBD_LL_PrepareReceive>
 800be84:	e008      	b.n	800be98 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be86:	4b08      	ldr	r3, [pc, #32]	; (800bea8 <USBD_CDC_Init+0x1e8>)
 800be88:	7819      	ldrb	r1, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800be90:	2340      	movs	r3, #64	; 0x40
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f005 f8d0 	bl	8011038 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3710      	adds	r7, #16
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	24000097 	.word	0x24000097
 800bea8:	24000098 	.word	0x24000098
 800beac:	24000099 	.word	0x24000099

0800beb0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	460b      	mov	r3, r1
 800beba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bebc:	4b3a      	ldr	r3, [pc, #232]	; (800bfa8 <USBD_CDC_DeInit+0xf8>)
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f004 ffef 	bl	8010ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bec8:	4b37      	ldr	r3, [pc, #220]	; (800bfa8 <USBD_CDC_DeInit+0xf8>)
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	f003 020f 	and.w	r2, r3, #15
 800bed0:	6879      	ldr	r1, [r7, #4]
 800bed2:	4613      	mov	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	440b      	add	r3, r1
 800bedc:	3324      	adds	r3, #36	; 0x24
 800bede:	2200      	movs	r2, #0
 800bee0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bee2:	4b32      	ldr	r3, [pc, #200]	; (800bfac <USBD_CDC_DeInit+0xfc>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	4619      	mov	r1, r3
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f004 ffdc 	bl	8010ea6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800beee:	4b2f      	ldr	r3, [pc, #188]	; (800bfac <USBD_CDC_DeInit+0xfc>)
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	f003 020f 	and.w	r2, r3, #15
 800bef6:	6879      	ldr	r1, [r7, #4]
 800bef8:	4613      	mov	r3, r2
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	440b      	add	r3, r1
 800bf02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf06:	2200      	movs	r2, #0
 800bf08:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bf0a:	4b29      	ldr	r3, [pc, #164]	; (800bfb0 <USBD_CDC_DeInit+0x100>)
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f004 ffc8 	bl	8010ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bf16:	4b26      	ldr	r3, [pc, #152]	; (800bfb0 <USBD_CDC_DeInit+0x100>)
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	f003 020f 	and.w	r2, r3, #15
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	4613      	mov	r3, r2
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	440b      	add	r3, r1
 800bf2a:	3324      	adds	r3, #36	; 0x24
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bf30:	4b1f      	ldr	r3, [pc, #124]	; (800bfb0 <USBD_CDC_DeInit+0x100>)
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 020f 	and.w	r2, r3, #15
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	440b      	add	r3, r1
 800bf44:	3326      	adds	r3, #38	; 0x26
 800bf46:	2200      	movs	r2, #0
 800bf48:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	32b0      	adds	r2, #176	; 0xb0
 800bf54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01f      	beq.n	800bf9c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf62:	687a      	ldr	r2, [r7, #4]
 800bf64:	33b0      	adds	r3, #176	; 0xb0
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	32b0      	adds	r2, #176	; 0xb0
 800bf7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f005 f89c 	bl	80110bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	32b0      	adds	r2, #176	; 0xb0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3708      	adds	r7, #8
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	24000097 	.word	0x24000097
 800bfac:	24000098 	.word	0x24000098
 800bfb0:	24000099 	.word	0x24000099

0800bfb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b086      	sub	sp, #24
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	32b0      	adds	r2, #176	; 0xb0
 800bfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfcc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d101      	bne.n	800bfe4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e0bf      	b.n	800c164 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d050      	beq.n	800c092 <USBD_CDC_Setup+0xde>
 800bff0:	2b20      	cmp	r3, #32
 800bff2:	f040 80af 	bne.w	800c154 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88db      	ldrh	r3, [r3, #6]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d03a      	beq.n	800c074 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b25b      	sxtb	r3, r3
 800c004:	2b00      	cmp	r3, #0
 800c006:	da1b      	bge.n	800c040 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	33b0      	adds	r3, #176	; 0xb0
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	683a      	ldr	r2, [r7, #0]
 800c01c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c01e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c020:	683a      	ldr	r2, [r7, #0]
 800c022:	88d2      	ldrh	r2, [r2, #6]
 800c024:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	88db      	ldrh	r3, [r3, #6]
 800c02a:	2b07      	cmp	r3, #7
 800c02c:	bf28      	it	cs
 800c02e:	2307      	movcs	r3, #7
 800c030:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	89fa      	ldrh	r2, [r7, #14]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 fd49 	bl	800dad0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c03e:	e090      	b.n	800c162 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	785a      	ldrb	r2, [r3, #1]
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	88db      	ldrh	r3, [r3, #6]
 800c04e:	2b3f      	cmp	r3, #63	; 0x3f
 800c050:	d803      	bhi.n	800c05a <USBD_CDC_Setup+0xa6>
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	88db      	ldrh	r3, [r3, #6]
 800c056:	b2da      	uxtb	r2, r3
 800c058:	e000      	b.n	800c05c <USBD_CDC_Setup+0xa8>
 800c05a:	2240      	movs	r2, #64	; 0x40
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c062:	6939      	ldr	r1, [r7, #16]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c06a:	461a      	mov	r2, r3
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f001 fd5b 	bl	800db28 <USBD_CtlPrepareRx>
      break;
 800c072:	e076      	b.n	800c162 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	33b0      	adds	r3, #176	; 0xb0
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	7850      	ldrb	r0, [r2, #1]
 800c08a:	2200      	movs	r2, #0
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	4798      	blx	r3
      break;
 800c090:	e067      	b.n	800c162 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	2b0b      	cmp	r3, #11
 800c098:	d851      	bhi.n	800c13e <USBD_CDC_Setup+0x18a>
 800c09a:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <USBD_CDC_Setup+0xec>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0d1 	.word	0x0800c0d1
 800c0a4:	0800c14d 	.word	0x0800c14d
 800c0a8:	0800c13f 	.word	0x0800c13f
 800c0ac:	0800c13f 	.word	0x0800c13f
 800c0b0:	0800c13f 	.word	0x0800c13f
 800c0b4:	0800c13f 	.word	0x0800c13f
 800c0b8:	0800c13f 	.word	0x0800c13f
 800c0bc:	0800c13f 	.word	0x0800c13f
 800c0c0:	0800c13f 	.word	0x0800c13f
 800c0c4:	0800c13f 	.word	0x0800c13f
 800c0c8:	0800c0fb 	.word	0x0800c0fb
 800c0cc:	0800c125 	.word	0x0800c125
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	2b03      	cmp	r3, #3
 800c0da:	d107      	bne.n	800c0ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c0dc:	f107 030a 	add.w	r3, r7, #10
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 fcf3 	bl	800dad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0ea:	e032      	b.n	800c152 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 fc7d 	bl	800d9ee <USBD_CtlError>
            ret = USBD_FAIL;
 800c0f4:	2303      	movs	r3, #3
 800c0f6:	75fb      	strb	r3, [r7, #23]
          break;
 800c0f8:	e02b      	b.n	800c152 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c100:	b2db      	uxtb	r3, r3
 800c102:	2b03      	cmp	r3, #3
 800c104:	d107      	bne.n	800c116 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c106:	f107 030d 	add.w	r3, r7, #13
 800c10a:	2201      	movs	r2, #1
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f001 fcde 	bl	800dad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c114:	e01d      	b.n	800c152 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 fc68 	bl	800d9ee <USBD_CtlError>
            ret = USBD_FAIL;
 800c11e:	2303      	movs	r3, #3
 800c120:	75fb      	strb	r3, [r7, #23]
          break;
 800c122:	e016      	b.n	800c152 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b03      	cmp	r3, #3
 800c12e:	d00f      	beq.n	800c150 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f001 fc5b 	bl	800d9ee <USBD_CtlError>
            ret = USBD_FAIL;
 800c138:	2303      	movs	r3, #3
 800c13a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c13c:	e008      	b.n	800c150 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 fc54 	bl	800d9ee <USBD_CtlError>
          ret = USBD_FAIL;
 800c146:	2303      	movs	r3, #3
 800c148:	75fb      	strb	r3, [r7, #23]
          break;
 800c14a:	e002      	b.n	800c152 <USBD_CDC_Setup+0x19e>
          break;
 800c14c:	bf00      	nop
 800c14e:	e008      	b.n	800c162 <USBD_CDC_Setup+0x1ae>
          break;
 800c150:	bf00      	nop
      }
      break;
 800c152:	e006      	b.n	800c162 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f001 fc49 	bl	800d9ee <USBD_CtlError>
      ret = USBD_FAIL;
 800c15c:	2303      	movs	r3, #3
 800c15e:	75fb      	strb	r3, [r7, #23]
      break;
 800c160:	bf00      	nop
  }

  return (uint8_t)ret;
 800c162:	7dfb      	ldrb	r3, [r7, #23]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c17e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	32b0      	adds	r2, #176	; 0xb0
 800c18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d101      	bne.n	800c196 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	e065      	b.n	800c262 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	32b0      	adds	r2, #176	; 0xb0
 800c1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c1a6:	78fb      	ldrb	r3, [r7, #3]
 800c1a8:	f003 020f 	and.w	r2, r3, #15
 800c1ac:	6879      	ldr	r1, [r7, #4]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	440b      	add	r3, r1
 800c1b8:	3318      	adds	r3, #24
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d02f      	beq.n	800c220 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	f003 020f 	and.w	r2, r3, #15
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	440b      	add	r3, r1
 800c1d2:	3318      	adds	r3, #24
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	78fb      	ldrb	r3, [r7, #3]
 800c1d8:	f003 010f 	and.w	r1, r3, #15
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	440b      	add	r3, r1
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	4403      	add	r3, r0
 800c1e8:	3344      	adds	r3, #68	; 0x44
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1f0:	fb01 f303 	mul.w	r3, r1, r3
 800c1f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d112      	bne.n	800c220 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c1fa:	78fb      	ldrb	r3, [r7, #3]
 800c1fc:	f003 020f 	and.w	r2, r3, #15
 800c200:	6879      	ldr	r1, [r7, #4]
 800c202:	4613      	mov	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	440b      	add	r3, r1
 800c20c:	3318      	adds	r3, #24
 800c20e:	2200      	movs	r2, #0
 800c210:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c212:	78f9      	ldrb	r1, [r7, #3]
 800c214:	2300      	movs	r3, #0
 800c216:	2200      	movs	r2, #0
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f004 feec 	bl	8010ff6 <USBD_LL_Transmit>
 800c21e:	e01f      	b.n	800c260 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2200      	movs	r2, #0
 800c224:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	33b0      	adds	r3, #176	; 0xb0
 800c232:	009b      	lsls	r3, r3, #2
 800c234:	4413      	add	r3, r2
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d010      	beq.n	800c260 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	33b0      	adds	r3, #176	; 0xb0
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4413      	add	r3, r2
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c256:	68ba      	ldr	r2, [r7, #8]
 800c258:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c25c:	78fa      	ldrb	r2, [r7, #3]
 800c25e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3710      	adds	r7, #16
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b084      	sub	sp, #16
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	460b      	mov	r3, r1
 800c274:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	32b0      	adds	r2, #176	; 0xb0
 800c280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c284:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	32b0      	adds	r2, #176	; 0xb0
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c298:	2303      	movs	r3, #3
 800c29a:	e01a      	b.n	800c2d2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c29c:	78fb      	ldrb	r3, [r7, #3]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f004 feea 	bl	801107a <USBD_LL_GetRxDataSize>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	33b0      	adds	r3, #176	; 0xb0
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	32b0      	adds	r2, #176	; 0xb0
 800c2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d101      	bne.n	800c2fc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e025      	b.n	800c348 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	33b0      	adds	r3, #176	; 0xb0
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	4413      	add	r3, r2
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d01a      	beq.n	800c346 <USBD_CDC_EP0_RxReady+0x6c>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c316:	2bff      	cmp	r3, #255	; 0xff
 800c318:	d015      	beq.n	800c346 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	33b0      	adds	r3, #176	; 0xb0
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c332:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c33a:	b292      	uxth	r2, r2
 800c33c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	22ff      	movs	r2, #255	; 0xff
 800c342:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c346:	2300      	movs	r3, #0
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c358:	2182      	movs	r1, #130	; 0x82
 800c35a:	4818      	ldr	r0, [pc, #96]	; (800c3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c35c:	f000 fd0f 	bl	800cd7e <USBD_GetEpDesc>
 800c360:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c362:	2101      	movs	r1, #1
 800c364:	4815      	ldr	r0, [pc, #84]	; (800c3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c366:	f000 fd0a 	bl	800cd7e <USBD_GetEpDesc>
 800c36a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c36c:	2181      	movs	r1, #129	; 0x81
 800c36e:	4813      	ldr	r0, [pc, #76]	; (800c3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c370:	f000 fd05 	bl	800cd7e <USBD_GetEpDesc>
 800c374:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2210      	movs	r2, #16
 800c380:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d006      	beq.n	800c396 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c390:	711a      	strb	r2, [r3, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3a4:	711a      	strb	r2, [r3, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2243      	movs	r2, #67	; 0x43
 800c3ae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3b0:	4b02      	ldr	r3, [pc, #8]	; (800c3bc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	24000054 	.word	0x24000054

0800c3c0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3c8:	2182      	movs	r1, #130	; 0x82
 800c3ca:	4818      	ldr	r0, [pc, #96]	; (800c42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3cc:	f000 fcd7 	bl	800cd7e <USBD_GetEpDesc>
 800c3d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	4815      	ldr	r0, [pc, #84]	; (800c42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3d6:	f000 fcd2 	bl	800cd7e <USBD_GetEpDesc>
 800c3da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3dc:	2181      	movs	r1, #129	; 0x81
 800c3de:	4813      	ldr	r0, [pc, #76]	; (800c42c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3e0:	f000 fccd 	bl	800cd7e <USBD_GetEpDesc>
 800c3e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	2210      	movs	r2, #16
 800c3f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	711a      	strb	r2, [r3, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f042 0202 	orr.w	r2, r2, #2
 800c404:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	711a      	strb	r2, [r3, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	f042 0202 	orr.w	r2, r2, #2
 800c418:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2243      	movs	r2, #67	; 0x43
 800c41e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c420:	4b02      	ldr	r3, [pc, #8]	; (800c42c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c422:	4618      	mov	r0, r3
 800c424:	3718      	adds	r7, #24
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	24000054 	.word	0x24000054

0800c430 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c438:	2182      	movs	r1, #130	; 0x82
 800c43a:	4818      	ldr	r0, [pc, #96]	; (800c49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c43c:	f000 fc9f 	bl	800cd7e <USBD_GetEpDesc>
 800c440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c442:	2101      	movs	r1, #1
 800c444:	4815      	ldr	r0, [pc, #84]	; (800c49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c446:	f000 fc9a 	bl	800cd7e <USBD_GetEpDesc>
 800c44a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c44c:	2181      	movs	r1, #129	; 0x81
 800c44e:	4813      	ldr	r0, [pc, #76]	; (800c49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c450:	f000 fc95 	bl	800cd7e <USBD_GetEpDesc>
 800c454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2210      	movs	r2, #16
 800c460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d006      	beq.n	800c476 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c470:	711a      	strb	r2, [r3, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d006      	beq.n	800c48a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c484:	711a      	strb	r2, [r3, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2243      	movs	r2, #67	; 0x43
 800c48e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c490:	4b02      	ldr	r3, [pc, #8]	; (800c49c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	24000054 	.word	0x24000054

0800c4a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	220a      	movs	r2, #10
 800c4ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c4ae:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	24000010 	.word	0x24000010

0800c4c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d101      	bne.n	800c4d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e009      	b.n	800c4e8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	33b0      	adds	r3, #176	; 0xb0
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	4413      	add	r3, r2
 800c4e2:	683a      	ldr	r2, [r7, #0]
 800c4e4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b087      	sub	sp, #28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	32b0      	adds	r2, #176	; 0xb0
 800c50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c50e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d101      	bne.n	800c51a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c516:	2303      	movs	r3, #3
 800c518:	e008      	b.n	800c52c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c51a:	697b      	ldr	r3, [r7, #20]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	371c      	adds	r7, #28
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr

0800c538 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	32b0      	adds	r2, #176	; 0xb0
 800c54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c550:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c558:	2303      	movs	r3, #3
 800c55a:	e004      	b.n	800c566 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c564:	2300      	movs	r3, #0
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr
	...

0800c574 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	32b0      	adds	r2, #176	; 0xb0
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32b0      	adds	r2, #176	; 0xb0
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d101      	bne.n	800c5a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	e018      	b.n	800c5d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7c1b      	ldrb	r3, [r3, #16]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10a      	bne.n	800c5c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5aa:	4b0c      	ldr	r3, [pc, #48]	; (800c5dc <USBD_CDC_ReceivePacket+0x68>)
 800c5ac:	7819      	ldrb	r1, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f004 fd3d 	bl	8011038 <USBD_LL_PrepareReceive>
 800c5be:	e008      	b.n	800c5d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5c0:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <USBD_CDC_ReceivePacket+0x68>)
 800c5c2:	7819      	ldrb	r1, [r3, #0]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5ca:	2340      	movs	r3, #64	; 0x40
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f004 fd33 	bl	8011038 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5d2:	2300      	movs	r3, #0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3710      	adds	r7, #16
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	24000098 	.word	0x24000098

0800c5e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e01f      	b.n	800c638 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d003      	beq.n	800c61e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	79fa      	ldrb	r2, [r7, #7]
 800c62a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f004 fba7 	bl	8010d80 <USBD_LL_Init>
 800c632:	4603      	mov	r3, r0
 800c634:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c636:	7dfb      	ldrb	r3, [r7, #23]
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3718      	adds	r7, #24
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c654:	2303      	movs	r3, #3
 800c656:	e025      	b.n	800c6a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	683a      	ldr	r2, [r7, #0]
 800c65c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	32ae      	adds	r2, #174	; 0xae
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00f      	beq.n	800c694 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	32ae      	adds	r2, #174	; 0xae
 800c67e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c684:	f107 020e 	add.w	r2, r7, #14
 800c688:	4610      	mov	r0, r2
 800c68a:	4798      	blx	r3
 800c68c:	4602      	mov	r2, r0
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b082      	sub	sp, #8
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f004 fbb5 	bl	8010e24 <USBD_LL_Start>
 800c6ba:	4603      	mov	r3, r0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	370c      	adds	r7, #12
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d009      	beq.n	800c708 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	78fa      	ldrb	r2, [r7, #3]
 800c6fe:	4611      	mov	r1, r2
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	4798      	blx	r3
 800c704:	4603      	mov	r3, r0
 800c706:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c708:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3710      	adds	r7, #16
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b084      	sub	sp, #16
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	460b      	mov	r3, r1
 800c71c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c728:	685b      	ldr	r3, [r3, #4]
 800c72a:	78fa      	ldrb	r2, [r7, #3]
 800c72c:	4611      	mov	r1, r2
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d001      	beq.n	800c73c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c738:	2303      	movs	r3, #3
 800c73a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b084      	sub	sp, #16
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	4618      	mov	r0, r3
 800c75a:	f001 f90e 	bl	800d97a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2201      	movs	r2, #1
 800c762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c76c:	461a      	mov	r2, r3
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c77a:	f003 031f 	and.w	r3, r3, #31
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d01a      	beq.n	800c7b8 <USBD_LL_SetupStage+0x72>
 800c782:	2b02      	cmp	r3, #2
 800c784:	d822      	bhi.n	800c7cc <USBD_LL_SetupStage+0x86>
 800c786:	2b00      	cmp	r3, #0
 800c788:	d002      	beq.n	800c790 <USBD_LL_SetupStage+0x4a>
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d00a      	beq.n	800c7a4 <USBD_LL_SetupStage+0x5e>
 800c78e:	e01d      	b.n	800c7cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 fb65 	bl	800ce68 <USBD_StdDevReq>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a2:	e020      	b.n	800c7e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fbcd 	bl	800cf4c <USBD_StdItfReq>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b6:	e016      	b.n	800c7e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fc2f 	bl	800d024 <USBD_StdEPReq>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ca:	e00c      	b.n	800c7e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f004 fb82 	bl	8010ee4 <USBD_LL_StallEP>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e4:	bf00      	nop
  }

  return ret;
 800c7e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	607a      	str	r2, [r7, #4]
 800c7fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c802:	7afb      	ldrb	r3, [r7, #11]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d16e      	bne.n	800c8e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c80e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c816:	2b03      	cmp	r3, #3
 800c818:	f040 8098 	bne.w	800c94c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	689a      	ldr	r2, [r3, #8]
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	429a      	cmp	r2, r3
 800c826:	d913      	bls.n	800c850 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	689a      	ldr	r2, [r3, #8]
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	1ad2      	subs	r2, r2, r3
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	68da      	ldr	r2, [r3, #12]
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	4293      	cmp	r3, r2
 800c840:	bf28      	it	cs
 800c842:	4613      	movcs	r3, r2
 800c844:	461a      	mov	r2, r3
 800c846:	6879      	ldr	r1, [r7, #4]
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f001 f98a 	bl	800db62 <USBD_CtlContinueRx>
 800c84e:	e07d      	b.n	800c94c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c856:	f003 031f 	and.w	r3, r3, #31
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d014      	beq.n	800c888 <USBD_LL_DataOutStage+0x98>
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d81d      	bhi.n	800c89e <USBD_LL_DataOutStage+0xae>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d002      	beq.n	800c86c <USBD_LL_DataOutStage+0x7c>
 800c866:	2b01      	cmp	r3, #1
 800c868:	d003      	beq.n	800c872 <USBD_LL_DataOutStage+0x82>
 800c86a:	e018      	b.n	800c89e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c86c:	2300      	movs	r3, #0
 800c86e:	75bb      	strb	r3, [r7, #22]
            break;
 800c870:	e018      	b.n	800c8a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	4619      	mov	r1, r3
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f000 fa64 	bl	800cd4a <USBD_CoreFindIF>
 800c882:	4603      	mov	r3, r0
 800c884:	75bb      	strb	r3, [r7, #22]
            break;
 800c886:	e00d      	b.n	800c8a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	4619      	mov	r1, r3
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f000 fa66 	bl	800cd64 <USBD_CoreFindEP>
 800c898:	4603      	mov	r3, r0
 800c89a:	75bb      	strb	r3, [r7, #22]
            break;
 800c89c:	e002      	b.n	800c8a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c8a4:	7dbb      	ldrb	r3, [r7, #22]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d119      	bne.n	800c8de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d113      	bne.n	800c8de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c8b6:	7dba      	ldrb	r2, [r7, #22]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	32ae      	adds	r2, #174	; 0xae
 800c8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8c0:	691b      	ldr	r3, [r3, #16]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00b      	beq.n	800c8de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c8c6:	7dba      	ldrb	r2, [r7, #22]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c8ce:	7dba      	ldrb	r2, [r7, #22]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	32ae      	adds	r2, #174	; 0xae
 800c8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f001 f950 	bl	800db84 <USBD_CtlSendStatus>
 800c8e4:	e032      	b.n	800c94c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c8e6:	7afb      	ldrb	r3, [r7, #11]
 800c8e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 fa37 	bl	800cd64 <USBD_CoreFindEP>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c8fa:	7dbb      	ldrb	r3, [r7, #22]
 800c8fc:	2bff      	cmp	r3, #255	; 0xff
 800c8fe:	d025      	beq.n	800c94c <USBD_LL_DataOutStage+0x15c>
 800c900:	7dbb      	ldrb	r3, [r7, #22]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d122      	bne.n	800c94c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d117      	bne.n	800c942 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c912:	7dba      	ldrb	r2, [r7, #22]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	32ae      	adds	r2, #174	; 0xae
 800c918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00f      	beq.n	800c942 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c922:	7dba      	ldrb	r2, [r7, #22]
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c92a:	7dba      	ldrb	r2, [r7, #22]
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	32ae      	adds	r2, #174	; 0xae
 800c930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	7afa      	ldrb	r2, [r7, #11]
 800c938:	4611      	mov	r1, r2
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	4798      	blx	r3
 800c93e:	4603      	mov	r3, r0
 800c940:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c942:	7dfb      	ldrb	r3, [r7, #23]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d001      	beq.n	800c94c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c948:	7dfb      	ldrb	r3, [r7, #23]
 800c94a:	e000      	b.n	800c94e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b086      	sub	sp, #24
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	60f8      	str	r0, [r7, #12]
 800c95e:	460b      	mov	r3, r1
 800c960:	607a      	str	r2, [r7, #4]
 800c962:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c964:	7afb      	ldrb	r3, [r7, #11]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d16f      	bne.n	800ca4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	3314      	adds	r3, #20
 800c96e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c976:	2b02      	cmp	r3, #2
 800c978:	d15a      	bne.n	800ca30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	689a      	ldr	r2, [r3, #8]
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	429a      	cmp	r2, r3
 800c984:	d914      	bls.n	800c9b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	689a      	ldr	r2, [r3, #8]
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	1ad2      	subs	r2, r2, r3
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	461a      	mov	r2, r3
 800c99a:	6879      	ldr	r1, [r7, #4]
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f001 f8b2 	bl	800db06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f004 fb45 	bl	8011038 <USBD_LL_PrepareReceive>
 800c9ae:	e03f      	b.n	800ca30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	68da      	ldr	r2, [r3, #12]
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d11c      	bne.n	800c9f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d316      	bcc.n	800c9f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d20f      	bcs.n	800c9f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	2100      	movs	r1, #0
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f001 f893 	bl	800db06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f004 fb22 	bl	8011038 <USBD_LL_PrepareReceive>
 800c9f4:	e01c      	b.n	800ca30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d10f      	bne.n	800ca22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d009      	beq.n	800ca22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	68f8      	ldr	r0, [r7, #12]
 800ca20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca22:	2180      	movs	r1, #128	; 0x80
 800ca24:	68f8      	ldr	r0, [r7, #12]
 800ca26:	f004 fa5d 	bl	8010ee4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f001 f8bd 	bl	800dbaa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d03a      	beq.n	800cab0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f7ff fe42 	bl	800c6c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ca48:	e032      	b.n	800cab0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ca4a:	7afb      	ldrb	r3, [r7, #11]
 800ca4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	4619      	mov	r1, r3
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f000 f985 	bl	800cd64 <USBD_CoreFindEP>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	2bff      	cmp	r3, #255	; 0xff
 800ca62:	d025      	beq.n	800cab0 <USBD_LL_DataInStage+0x15a>
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d122      	bne.n	800cab0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d11c      	bne.n	800cab0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ca76:	7dfa      	ldrb	r2, [r7, #23]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	32ae      	adds	r2, #174	; 0xae
 800ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca80:	695b      	ldr	r3, [r3, #20]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d014      	beq.n	800cab0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ca86:	7dfa      	ldrb	r2, [r7, #23]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ca8e:	7dfa      	ldrb	r2, [r7, #23]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	32ae      	adds	r2, #174	; 0xae
 800ca94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	7afa      	ldrb	r2, [r7, #11]
 800ca9c:	4611      	mov	r1, r2
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	4798      	blx	r3
 800caa2:	4603      	mov	r3, r0
 800caa4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800caa6:	7dbb      	ldrb	r3, [r7, #22]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d001      	beq.n	800cab0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800caac:	7dbb      	ldrb	r3, [r7, #22]
 800caae:	e000      	b.n	800cab2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b084      	sub	sp, #16
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2200      	movs	r2, #0
 800cada:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2200      	movs	r2, #0
 800cae0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d014      	beq.n	800cb20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00e      	beq.n	800cb20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	6852      	ldr	r2, [r2, #4]
 800cb0e:	b2d2      	uxtb	r2, r2
 800cb10:	4611      	mov	r1, r2
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	4798      	blx	r3
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d001      	beq.n	800cb20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb20:	2340      	movs	r3, #64	; 0x40
 800cb22:	2200      	movs	r2, #0
 800cb24:	2100      	movs	r1, #0
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f004 f997 	bl	8010e5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2240      	movs	r2, #64	; 0x40
 800cb38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2180      	movs	r1, #128	; 0x80
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f004 f989 	bl	8010e5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2240      	movs	r2, #64	; 0x40
 800cb52:	621a      	str	r2, [r3, #32]

  return ret;
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b083      	sub	sp, #12
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	78fa      	ldrb	r2, [r7, #3]
 800cb6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	370c      	adds	r7, #12
 800cb76:	46bd      	mov	sp, r7
 800cb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7c:	4770      	bx	lr

0800cb7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cb7e:	b480      	push	{r7}
 800cb80:	b083      	sub	sp, #12
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	2b04      	cmp	r3, #4
 800cb90:	d006      	beq.n	800cba0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2204      	movs	r2, #4
 800cba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	d106      	bne.n	800cbd8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cbd0:	b2da      	uxtb	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr

0800cbe6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b082      	sub	sp, #8
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d110      	bne.n	800cc1c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0a:	69db      	ldr	r3, [r3, #28]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d005      	beq.n	800cc1c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc16:	69db      	ldr	r3, [r3, #28]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b082      	sub	sp, #8
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	460b      	mov	r3, r1
 800cc30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	32ae      	adds	r2, #174	; 0xae
 800cc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d101      	bne.n	800cc48 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc44:	2303      	movs	r3, #3
 800cc46:	e01c      	b.n	800cc82 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b03      	cmp	r3, #3
 800cc52:	d115      	bne.n	800cc80 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	32ae      	adds	r2, #174	; 0xae
 800cc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc62:	6a1b      	ldr	r3, [r3, #32]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	32ae      	adds	r2, #174	; 0xae
 800cc72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc76:	6a1b      	ldr	r3, [r3, #32]
 800cc78:	78fa      	ldrb	r2, [r7, #3]
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc80:	2300      	movs	r3, #0
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}

0800cc8a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cc8a:	b580      	push	{r7, lr}
 800cc8c:	b082      	sub	sp, #8
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	32ae      	adds	r2, #174	; 0xae
 800cca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e01c      	b.n	800cce6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	2b03      	cmp	r3, #3
 800ccb6:	d115      	bne.n	800cce4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	32ae      	adds	r2, #174	; 0xae
 800ccc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d00b      	beq.n	800cce4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	32ae      	adds	r2, #174	; 0xae
 800ccd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccdc:	78fa      	ldrb	r2, [r7, #3]
 800ccde:	4611      	mov	r1, r2
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cce4:	2300      	movs	r3, #0
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00e      	beq.n	800cd40 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	6852      	ldr	r2, [r2, #4]
 800cd2e:	b2d2      	uxtb	r2, r2
 800cd30:	4611      	mov	r1, r2
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	4798      	blx	r3
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b083      	sub	sp, #12
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	460b      	mov	r3, r1
 800cd54:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd56:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b083      	sub	sp, #12
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cd70:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	370c      	adds	r7, #12
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr

0800cd7e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b086      	sub	sp, #24
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
 800cd86:	460b      	mov	r3, r1
 800cd88:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cd92:	2300      	movs	r3, #0
 800cd94:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	885b      	ldrh	r3, [r3, #2]
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d920      	bls.n	800cde8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cdae:	e013      	b.n	800cdd8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cdb0:	f107 030a 	add.w	r3, r7, #10
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6978      	ldr	r0, [r7, #20]
 800cdb8:	f000 f81b 	bl	800cdf2 <USBD_GetNextDesc>
 800cdbc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	785b      	ldrb	r3, [r3, #1]
 800cdc2:	2b05      	cmp	r3, #5
 800cdc4:	d108      	bne.n	800cdd8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	789b      	ldrb	r3, [r3, #2]
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d008      	beq.n	800cde6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	885b      	ldrh	r3, [r3, #2]
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	897b      	ldrh	r3, [r7, #10]
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d8e5      	bhi.n	800cdb0 <USBD_GetEpDesc+0x32>
 800cde4:	e000      	b.n	800cde8 <USBD_GetEpDesc+0x6a>
          break;
 800cde6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cde8:	693b      	ldr	r3, [r7, #16]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	881a      	ldrh	r2, [r3, #0]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	4413      	add	r3, r2
 800ce0c:	b29a      	uxth	r2, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	781b      	ldrb	r3, [r3, #0]
 800ce16:	461a      	mov	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	3301      	adds	r3, #1
 800ce42:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce4a:	8a3b      	ldrh	r3, [r7, #16]
 800ce4c:	021b      	lsls	r3, r3, #8
 800ce4e:	b21a      	sxth	r2, r3
 800ce50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce54:	4313      	orrs	r3, r2
 800ce56:	b21b      	sxth	r3, r3
 800ce58:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce5a:	89fb      	ldrh	r3, [r7, #14]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	371c      	adds	r7, #28
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce7e:	2b40      	cmp	r3, #64	; 0x40
 800ce80:	d005      	beq.n	800ce8e <USBD_StdDevReq+0x26>
 800ce82:	2b40      	cmp	r3, #64	; 0x40
 800ce84:	d857      	bhi.n	800cf36 <USBD_StdDevReq+0xce>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d00f      	beq.n	800ceaa <USBD_StdDevReq+0x42>
 800ce8a:	2b20      	cmp	r3, #32
 800ce8c:	d153      	bne.n	800cf36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	32ae      	adds	r2, #174	; 0xae
 800ce98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	4798      	blx	r3
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
      break;
 800cea8:	e04a      	b.n	800cf40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	785b      	ldrb	r3, [r3, #1]
 800ceae:	2b09      	cmp	r3, #9
 800ceb0:	d83b      	bhi.n	800cf2a <USBD_StdDevReq+0xc2>
 800ceb2:	a201      	add	r2, pc, #4	; (adr r2, 800ceb8 <USBD_StdDevReq+0x50>)
 800ceb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb8:	0800cf0d 	.word	0x0800cf0d
 800cebc:	0800cf21 	.word	0x0800cf21
 800cec0:	0800cf2b 	.word	0x0800cf2b
 800cec4:	0800cf17 	.word	0x0800cf17
 800cec8:	0800cf2b 	.word	0x0800cf2b
 800cecc:	0800ceeb 	.word	0x0800ceeb
 800ced0:	0800cee1 	.word	0x0800cee1
 800ced4:	0800cf2b 	.word	0x0800cf2b
 800ced8:	0800cf03 	.word	0x0800cf03
 800cedc:	0800cef5 	.word	0x0800cef5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f000 fa3c 	bl	800d360 <USBD_GetDescriptor>
          break;
 800cee8:	e024      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ceea:	6839      	ldr	r1, [r7, #0]
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 fba1 	bl	800d634 <USBD_SetAddress>
          break;
 800cef2:	e01f      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f000 fbe0 	bl	800d6bc <USBD_SetConfig>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
          break;
 800cf00:	e018      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f000 fc83 	bl	800d810 <USBD_GetConfig>
          break;
 800cf0a:	e013      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fcb4 	bl	800d87c <USBD_GetStatus>
          break;
 800cf14:	e00e      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf16:	6839      	ldr	r1, [r7, #0]
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 fce3 	bl	800d8e4 <USBD_SetFeature>
          break;
 800cf1e:	e009      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 fd07 	bl	800d936 <USBD_ClrFeature>
          break;
 800cf28:	e004      	b.n	800cf34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf2a:	6839      	ldr	r1, [r7, #0]
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 fd5e 	bl	800d9ee <USBD_CtlError>
          break;
 800cf32:	bf00      	nop
      }
      break;
 800cf34:	e004      	b.n	800cf40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fd58 	bl	800d9ee <USBD_CtlError>
      break;
 800cf3e:	bf00      	nop
  }

  return ret;
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop

0800cf4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf62:	2b40      	cmp	r3, #64	; 0x40
 800cf64:	d005      	beq.n	800cf72 <USBD_StdItfReq+0x26>
 800cf66:	2b40      	cmp	r3, #64	; 0x40
 800cf68:	d852      	bhi.n	800d010 <USBD_StdItfReq+0xc4>
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <USBD_StdItfReq+0x26>
 800cf6e:	2b20      	cmp	r3, #32
 800cf70:	d14e      	bne.n	800d010 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	2b02      	cmp	r3, #2
 800cf7e:	d840      	bhi.n	800d002 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	889b      	ldrh	r3, [r3, #4]
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d836      	bhi.n	800cff8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	889b      	ldrh	r3, [r3, #4]
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	4619      	mov	r1, r3
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f7ff fed9 	bl	800cd4a <USBD_CoreFindIF>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf9c:	7bbb      	ldrb	r3, [r7, #14]
 800cf9e:	2bff      	cmp	r3, #255	; 0xff
 800cfa0:	d01d      	beq.n	800cfde <USBD_StdItfReq+0x92>
 800cfa2:	7bbb      	ldrb	r3, [r7, #14]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d11a      	bne.n	800cfde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cfa8:	7bba      	ldrb	r2, [r7, #14]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	32ae      	adds	r2, #174	; 0xae
 800cfae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d00f      	beq.n	800cfd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cfb8:	7bba      	ldrb	r2, [r7, #14]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cfc0:	7bba      	ldrb	r2, [r7, #14]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	32ae      	adds	r2, #174	; 0xae
 800cfc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfca:	689b      	ldr	r3, [r3, #8]
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	4798      	blx	r3
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfd6:	e004      	b.n	800cfe2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cfd8:	2303      	movs	r3, #3
 800cfda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cfdc:	e001      	b.n	800cfe2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cfde:	2303      	movs	r3, #3
 800cfe0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	88db      	ldrh	r3, [r3, #6]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d110      	bne.n	800d00c <USBD_StdItfReq+0xc0>
 800cfea:	7bfb      	ldrb	r3, [r7, #15]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10d      	bne.n	800d00c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fdc7 	bl	800db84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cff6:	e009      	b.n	800d00c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fcf7 	bl	800d9ee <USBD_CtlError>
          break;
 800d000:	e004      	b.n	800d00c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d002:	6839      	ldr	r1, [r7, #0]
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f000 fcf2 	bl	800d9ee <USBD_CtlError>
          break;
 800d00a:	e000      	b.n	800d00e <USBD_StdItfReq+0xc2>
          break;
 800d00c:	bf00      	nop
      }
      break;
 800d00e:	e004      	b.n	800d01a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d010:	6839      	ldr	r1, [r7, #0]
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fceb 	bl	800d9ee <USBD_CtlError>
      break;
 800d018:	bf00      	nop
  }

  return ret;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d02e:	2300      	movs	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	889b      	ldrh	r3, [r3, #4]
 800d036:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	d007      	beq.n	800d054 <USBD_StdEPReq+0x30>
 800d044:	2b40      	cmp	r3, #64	; 0x40
 800d046:	f200 817f 	bhi.w	800d348 <USBD_StdEPReq+0x324>
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d02a      	beq.n	800d0a4 <USBD_StdEPReq+0x80>
 800d04e:	2b20      	cmp	r3, #32
 800d050:	f040 817a 	bne.w	800d348 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d054:	7bbb      	ldrb	r3, [r7, #14]
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7ff fe83 	bl	800cd64 <USBD_CoreFindEP>
 800d05e:	4603      	mov	r3, r0
 800d060:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d062:	7b7b      	ldrb	r3, [r7, #13]
 800d064:	2bff      	cmp	r3, #255	; 0xff
 800d066:	f000 8174 	beq.w	800d352 <USBD_StdEPReq+0x32e>
 800d06a:	7b7b      	ldrb	r3, [r7, #13]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f040 8170 	bne.w	800d352 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d072:	7b7a      	ldrb	r2, [r7, #13]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d07a:	7b7a      	ldrb	r2, [r7, #13]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	32ae      	adds	r2, #174	; 0xae
 800d080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d084:	689b      	ldr	r3, [r3, #8]
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 8163 	beq.w	800d352 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d08c:	7b7a      	ldrb	r2, [r7, #13]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	32ae      	adds	r2, #174	; 0xae
 800d092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d096:	689b      	ldr	r3, [r3, #8]
 800d098:	6839      	ldr	r1, [r7, #0]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	4798      	blx	r3
 800d09e:	4603      	mov	r3, r0
 800d0a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0a2:	e156      	b.n	800d352 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	785b      	ldrb	r3, [r3, #1]
 800d0a8:	2b03      	cmp	r3, #3
 800d0aa:	d008      	beq.n	800d0be <USBD_StdEPReq+0x9a>
 800d0ac:	2b03      	cmp	r3, #3
 800d0ae:	f300 8145 	bgt.w	800d33c <USBD_StdEPReq+0x318>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f000 809b 	beq.w	800d1ee <USBD_StdEPReq+0x1ca>
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d03c      	beq.n	800d136 <USBD_StdEPReq+0x112>
 800d0bc:	e13e      	b.n	800d33c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d002      	beq.n	800d0d0 <USBD_StdEPReq+0xac>
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d016      	beq.n	800d0fc <USBD_StdEPReq+0xd8>
 800d0ce:	e02c      	b.n	800d12a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0d0:	7bbb      	ldrb	r3, [r7, #14]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d00d      	beq.n	800d0f2 <USBD_StdEPReq+0xce>
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	2b80      	cmp	r3, #128	; 0x80
 800d0da:	d00a      	beq.n	800d0f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f003 feff 	bl	8010ee4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0e6:	2180      	movs	r1, #128	; 0x80
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f003 fefb 	bl	8010ee4 <USBD_LL_StallEP>
 800d0ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0f0:	e020      	b.n	800d134 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d0f2:	6839      	ldr	r1, [r7, #0]
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fc7a 	bl	800d9ee <USBD_CtlError>
              break;
 800d0fa:	e01b      	b.n	800d134 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	885b      	ldrh	r3, [r3, #2]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10e      	bne.n	800d122 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00b      	beq.n	800d122 <USBD_StdEPReq+0xfe>
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	2b80      	cmp	r3, #128	; 0x80
 800d10e:	d008      	beq.n	800d122 <USBD_StdEPReq+0xfe>
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	88db      	ldrh	r3, [r3, #6]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d104      	bne.n	800d122 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d118:	7bbb      	ldrb	r3, [r7, #14]
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f003 fee1 	bl	8010ee4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fd2e 	bl	800db84 <USBD_CtlSendStatus>

              break;
 800d128:	e004      	b.n	800d134 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d12a:	6839      	ldr	r1, [r7, #0]
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 fc5e 	bl	800d9ee <USBD_CtlError>
              break;
 800d132:	bf00      	nop
          }
          break;
 800d134:	e107      	b.n	800d346 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d002      	beq.n	800d148 <USBD_StdEPReq+0x124>
 800d142:	2b03      	cmp	r3, #3
 800d144:	d016      	beq.n	800d174 <USBD_StdEPReq+0x150>
 800d146:	e04b      	b.n	800d1e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d148:	7bbb      	ldrb	r3, [r7, #14]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00d      	beq.n	800d16a <USBD_StdEPReq+0x146>
 800d14e:	7bbb      	ldrb	r3, [r7, #14]
 800d150:	2b80      	cmp	r3, #128	; 0x80
 800d152:	d00a      	beq.n	800d16a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d154:	7bbb      	ldrb	r3, [r7, #14]
 800d156:	4619      	mov	r1, r3
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f003 fec3 	bl	8010ee4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d15e:	2180      	movs	r1, #128	; 0x80
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f003 febf 	bl	8010ee4 <USBD_LL_StallEP>
 800d166:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d168:	e040      	b.n	800d1ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d16a:	6839      	ldr	r1, [r7, #0]
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 fc3e 	bl	800d9ee <USBD_CtlError>
              break;
 800d172:	e03b      	b.n	800d1ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	885b      	ldrh	r3, [r3, #2]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d136      	bne.n	800d1ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
 800d17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d182:	2b00      	cmp	r3, #0
 800d184:	d004      	beq.n	800d190 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d186:	7bbb      	ldrb	r3, [r7, #14]
 800d188:	4619      	mov	r1, r3
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	f003 fec9 	bl	8010f22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fcf7 	bl	800db84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	4619      	mov	r1, r3
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f7ff fde2 	bl	800cd64 <USBD_CoreFindEP>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1a4:	7b7b      	ldrb	r3, [r7, #13]
 800d1a6:	2bff      	cmp	r3, #255	; 0xff
 800d1a8:	d01f      	beq.n	800d1ea <USBD_StdEPReq+0x1c6>
 800d1aa:	7b7b      	ldrb	r3, [r7, #13]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d11c      	bne.n	800d1ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d1b0:	7b7a      	ldrb	r2, [r7, #13]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d1b8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	32ae      	adds	r2, #174	; 0xae
 800d1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d010      	beq.n	800d1ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d1c8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	32ae      	adds	r2, #174	; 0xae
 800d1ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d2:	689b      	ldr	r3, [r3, #8]
 800d1d4:	6839      	ldr	r1, [r7, #0]
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	4798      	blx	r3
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d1de:	e004      	b.n	800d1ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 fc03 	bl	800d9ee <USBD_CtlError>
              break;
 800d1e8:	e000      	b.n	800d1ec <USBD_StdEPReq+0x1c8>
              break;
 800d1ea:	bf00      	nop
          }
          break;
 800d1ec:	e0ab      	b.n	800d346 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d002      	beq.n	800d200 <USBD_StdEPReq+0x1dc>
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d032      	beq.n	800d264 <USBD_StdEPReq+0x240>
 800d1fe:	e097      	b.n	800d330 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d007      	beq.n	800d216 <USBD_StdEPReq+0x1f2>
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	2b80      	cmp	r3, #128	; 0x80
 800d20a:	d004      	beq.n	800d216 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 fbed 	bl	800d9ee <USBD_CtlError>
                break;
 800d214:	e091      	b.n	800d33a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	da0b      	bge.n	800d236 <USBD_StdEPReq+0x212>
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
 800d220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d224:	4613      	mov	r3, r2
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	4413      	add	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	3310      	adds	r3, #16
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	4413      	add	r3, r2
 800d232:	3304      	adds	r3, #4
 800d234:	e00b      	b.n	800d24e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d236:	7bbb      	ldrb	r3, [r7, #14]
 800d238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d23c:	4613      	mov	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4413      	add	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	4413      	add	r3, r2
 800d24c:	3304      	adds	r3, #4
 800d24e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2202      	movs	r2, #2
 800d25a:	4619      	mov	r1, r3
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fc37 	bl	800dad0 <USBD_CtlSendData>
              break;
 800d262:	e06a      	b.n	800d33a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d264:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	da11      	bge.n	800d290 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d26c:	7bbb      	ldrb	r3, [r7, #14]
 800d26e:	f003 020f 	and.w	r2, r3, #15
 800d272:	6879      	ldr	r1, [r7, #4]
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	440b      	add	r3, r1
 800d27e:	3324      	adds	r3, #36	; 0x24
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d117      	bne.n	800d2b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fbb0 	bl	800d9ee <USBD_CtlError>
                  break;
 800d28e:	e054      	b.n	800d33a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	f003 020f 	and.w	r2, r3, #15
 800d296:	6879      	ldr	r1, [r7, #4]
 800d298:	4613      	mov	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	440b      	add	r3, r1
 800d2a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d104      	bne.n	800d2b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fb9d 	bl	800d9ee <USBD_CtlError>
                  break;
 800d2b4:	e041      	b.n	800d33a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	da0b      	bge.n	800d2d6 <USBD_StdEPReq+0x2b2>
 800d2be:	7bbb      	ldrb	r3, [r7, #14]
 800d2c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	3310      	adds	r3, #16
 800d2ce:	687a      	ldr	r2, [r7, #4]
 800d2d0:	4413      	add	r3, r2
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	e00b      	b.n	800d2ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
 800d2d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2dc:	4613      	mov	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d2f0:	7bbb      	ldrb	r3, [r7, #14]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <USBD_StdEPReq+0x2d8>
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	2b80      	cmp	r3, #128	; 0x80
 800d2fa:	d103      	bne.n	800d304 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	601a      	str	r2, [r3, #0]
 800d302:	e00e      	b.n	800d322 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f003 fe29 	bl	8010f60 <USBD_LL_IsStallEP>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2201      	movs	r2, #1
 800d318:	601a      	str	r2, [r3, #0]
 800d31a:	e002      	b.n	800d322 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	2200      	movs	r2, #0
 800d320:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	2202      	movs	r2, #2
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 fbd1 	bl	800dad0 <USBD_CtlSendData>
              break;
 800d32e:	e004      	b.n	800d33a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fb5b 	bl	800d9ee <USBD_CtlError>
              break;
 800d338:	bf00      	nop
          }
          break;
 800d33a:	e004      	b.n	800d346 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 fb55 	bl	800d9ee <USBD_CtlError>
          break;
 800d344:	bf00      	nop
      }
      break;
 800d346:	e005      	b.n	800d354 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d348:	6839      	ldr	r1, [r7, #0]
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fb4f 	bl	800d9ee <USBD_CtlError>
      break;
 800d350:	e000      	b.n	800d354 <USBD_StdEPReq+0x330>
      break;
 800d352:	bf00      	nop
  }

  return ret;
 800d354:	7bfb      	ldrb	r3, [r7, #15]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
	...

0800d360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d36a:	2300      	movs	r3, #0
 800d36c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d36e:	2300      	movs	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d372:	2300      	movs	r3, #0
 800d374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	885b      	ldrh	r3, [r3, #2]
 800d37a:	0a1b      	lsrs	r3, r3, #8
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	3b01      	subs	r3, #1
 800d380:	2b06      	cmp	r3, #6
 800d382:	f200 8128 	bhi.w	800d5d6 <USBD_GetDescriptor+0x276>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <USBD_GetDescriptor+0x2c>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d3a9 	.word	0x0800d3a9
 800d390:	0800d3c1 	.word	0x0800d3c1
 800d394:	0800d401 	.word	0x0800d401
 800d398:	0800d5d7 	.word	0x0800d5d7
 800d39c:	0800d5d7 	.word	0x0800d5d7
 800d3a0:	0800d577 	.word	0x0800d577
 800d3a4:	0800d5a3 	.word	0x0800d5a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	7c12      	ldrb	r2, [r2, #16]
 800d3b4:	f107 0108 	add.w	r1, r7, #8
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	4798      	blx	r3
 800d3bc:	60f8      	str	r0, [r7, #12]
      break;
 800d3be:	e112      	b.n	800d5e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7c1b      	ldrb	r3, [r3, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d10d      	bne.n	800d3e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d0:	f107 0208 	add.w	r2, r7, #8
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4798      	blx	r3
 800d3d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	2202      	movs	r2, #2
 800d3e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3e2:	e100      	b.n	800d5e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	f107 0208 	add.w	r2, r7, #8
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	4798      	blx	r3
 800d3f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	701a      	strb	r2, [r3, #0]
      break;
 800d3fe:	e0f2      	b.n	800d5e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	885b      	ldrh	r3, [r3, #2]
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b05      	cmp	r3, #5
 800d408:	f200 80ac 	bhi.w	800d564 <USBD_GetDescriptor+0x204>
 800d40c:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <USBD_GetDescriptor+0xb4>)
 800d40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d412:	bf00      	nop
 800d414:	0800d42d 	.word	0x0800d42d
 800d418:	0800d461 	.word	0x0800d461
 800d41c:	0800d495 	.word	0x0800d495
 800d420:	0800d4c9 	.word	0x0800d4c9
 800d424:	0800d4fd 	.word	0x0800d4fd
 800d428:	0800d531 	.word	0x0800d531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d432:	685b      	ldr	r3, [r3, #4]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00b      	beq.n	800d450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d43e:	685b      	ldr	r3, [r3, #4]
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	7c12      	ldrb	r2, [r2, #16]
 800d444:	f107 0108 	add.w	r1, r7, #8
 800d448:	4610      	mov	r0, r2
 800d44a:	4798      	blx	r3
 800d44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d44e:	e091      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 facb 	bl	800d9ee <USBD_CtlError>
            err++;
 800d458:	7afb      	ldrb	r3, [r7, #11]
 800d45a:	3301      	adds	r3, #1
 800d45c:	72fb      	strb	r3, [r7, #11]
          break;
 800d45e:	e089      	b.n	800d574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d00b      	beq.n	800d484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	7c12      	ldrb	r2, [r2, #16]
 800d478:	f107 0108 	add.w	r1, r7, #8
 800d47c:	4610      	mov	r0, r2
 800d47e:	4798      	blx	r3
 800d480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d482:	e077      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fab1 	bl	800d9ee <USBD_CtlError>
            err++;
 800d48c:	7afb      	ldrb	r3, [r7, #11]
 800d48e:	3301      	adds	r3, #1
 800d490:	72fb      	strb	r3, [r7, #11]
          break;
 800d492:	e06f      	b.n	800d574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00b      	beq.n	800d4b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	7c12      	ldrb	r2, [r2, #16]
 800d4ac:	f107 0108 	add.w	r1, r7, #8
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4798      	blx	r3
 800d4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4b6:	e05d      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 fa97 	bl	800d9ee <USBD_CtlError>
            err++;
 800d4c0:	7afb      	ldrb	r3, [r7, #11]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4c6:	e055      	b.n	800d574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4da:	691b      	ldr	r3, [r3, #16]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	7c12      	ldrb	r2, [r2, #16]
 800d4e0:	f107 0108 	add.w	r1, r7, #8
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ea:	e043      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fa7d 	bl	800d9ee <USBD_CtlError>
            err++;
 800d4f4:	7afb      	ldrb	r3, [r7, #11]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4fa:	e03b      	b.n	800d574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	7c12      	ldrb	r2, [r2, #16]
 800d514:	f107 0108 	add.w	r1, r7, #8
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d51e:	e029      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa63 	bl	800d9ee <USBD_CtlError>
            err++;
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	3301      	adds	r3, #1
 800d52c:	72fb      	strb	r3, [r7, #11]
          break;
 800d52e:	e021      	b.n	800d574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d536:	699b      	ldr	r3, [r3, #24]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 0108 	add.w	r1, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d552:	e00f      	b.n	800d574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa49 	bl	800d9ee <USBD_CtlError>
            err++;
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	3301      	adds	r3, #1
 800d560:	72fb      	strb	r3, [r7, #11]
          break;
 800d562:	e007      	b.n	800d574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fa41 	bl	800d9ee <USBD_CtlError>
          err++;
 800d56c:	7afb      	ldrb	r3, [r7, #11]
 800d56e:	3301      	adds	r3, #1
 800d570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d572:	bf00      	nop
      }
      break;
 800d574:	e037      	b.n	800d5e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7c1b      	ldrb	r3, [r3, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d109      	bne.n	800d592 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	f107 0208 	add.w	r2, r7, #8
 800d58a:	4610      	mov	r0, r2
 800d58c:	4798      	blx	r3
 800d58e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d590:	e029      	b.n	800d5e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d592:	6839      	ldr	r1, [r7, #0]
 800d594:	6878      	ldr	r0, [r7, #4]
 800d596:	f000 fa2a 	bl	800d9ee <USBD_CtlError>
        err++;
 800d59a:	7afb      	ldrb	r3, [r7, #11]
 800d59c:	3301      	adds	r3, #1
 800d59e:	72fb      	strb	r3, [r7, #11]
      break;
 800d5a0:	e021      	b.n	800d5e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7c1b      	ldrb	r3, [r3, #16]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10d      	bne.n	800d5c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5b2:	f107 0208 	add.w	r2, r7, #8
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	4798      	blx	r3
 800d5ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	2207      	movs	r2, #7
 800d5c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5c4:	e00f      	b.n	800d5e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 fa10 	bl	800d9ee <USBD_CtlError>
        err++;
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5d4:	e007      	b.n	800d5e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d5d6:	6839      	ldr	r1, [r7, #0]
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f000 fa08 	bl	800d9ee <USBD_CtlError>
      err++;
 800d5de:	7afb      	ldrb	r3, [r7, #11]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	72fb      	strb	r3, [r7, #11]
      break;
 800d5e4:	bf00      	nop
  }

  if (err != 0U)
 800d5e6:	7afb      	ldrb	r3, [r7, #11]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d11e      	bne.n	800d62a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	88db      	ldrh	r3, [r3, #6]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d016      	beq.n	800d622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d5f4:	893b      	ldrh	r3, [r7, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00e      	beq.n	800d618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	88da      	ldrh	r2, [r3, #6]
 800d5fe:	893b      	ldrh	r3, [r7, #8]
 800d600:	4293      	cmp	r3, r2
 800d602:	bf28      	it	cs
 800d604:	4613      	movcs	r3, r2
 800d606:	b29b      	uxth	r3, r3
 800d608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d60a:	893b      	ldrh	r3, [r7, #8]
 800d60c:	461a      	mov	r2, r3
 800d60e:	68f9      	ldr	r1, [r7, #12]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 fa5d 	bl	800dad0 <USBD_CtlSendData>
 800d616:	e009      	b.n	800d62c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f9e7 	bl	800d9ee <USBD_CtlError>
 800d620:	e004      	b.n	800d62c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 faae 	bl	800db84 <USBD_CtlSendStatus>
 800d628:	e000      	b.n	800d62c <USBD_GetDescriptor+0x2cc>
    return;
 800d62a:	bf00      	nop
  }
}
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop

0800d634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	889b      	ldrh	r3, [r3, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d131      	bne.n	800d6aa <USBD_SetAddress+0x76>
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	88db      	ldrh	r3, [r3, #6]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d12d      	bne.n	800d6aa <USBD_SetAddress+0x76>
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	885b      	ldrh	r3, [r3, #2]
 800d652:	2b7f      	cmp	r3, #127	; 0x7f
 800d654:	d829      	bhi.n	800d6aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	885b      	ldrh	r3, [r3, #2]
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d104      	bne.n	800d678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f9bc 	bl	800d9ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d676:	e01d      	b.n	800d6b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	7bfa      	ldrb	r2, [r7, #15]
 800d67c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f003 fc97 	bl	8010fb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fa7a 	bl	800db84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d690:	7bfb      	ldrb	r3, [r7, #15]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d004      	beq.n	800d6a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d69e:	e009      	b.n	800d6b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6a8:	e004      	b.n	800d6b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f000 f99e 	bl	800d9ee <USBD_CtlError>
  }
}
 800d6b2:	bf00      	nop
 800d6b4:	bf00      	nop
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	885b      	ldrh	r3, [r3, #2]
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b4e      	ldr	r3, [pc, #312]	; (800d80c <USBD_SetConfig+0x150>)
 800d6d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6d4:	4b4d      	ldr	r3, [pc, #308]	; (800d80c <USBD_SetConfig+0x150>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d905      	bls.n	800d6e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f985 	bl	800d9ee <USBD_CtlError>
    return USBD_FAIL;
 800d6e4:	2303      	movs	r3, #3
 800d6e6:	e08c      	b.n	800d802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	2b02      	cmp	r3, #2
 800d6f2:	d002      	beq.n	800d6fa <USBD_SetConfig+0x3e>
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d029      	beq.n	800d74c <USBD_SetConfig+0x90>
 800d6f8:	e075      	b.n	800d7e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d6fa:	4b44      	ldr	r3, [pc, #272]	; (800d80c <USBD_SetConfig+0x150>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d020      	beq.n	800d744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d702:	4b42      	ldr	r3, [pc, #264]	; (800d80c <USBD_SetConfig+0x150>)
 800d704:	781b      	ldrb	r3, [r3, #0]
 800d706:	461a      	mov	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d70c:	4b3f      	ldr	r3, [pc, #252]	; (800d80c <USBD_SetConfig+0x150>)
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7fe ffe1 	bl	800c6da <USBD_SetClassConfig>
 800d718:	4603      	mov	r3, r0
 800d71a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d008      	beq.n	800d734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d722:	6839      	ldr	r1, [r7, #0]
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 f962 	bl	800d9ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2202      	movs	r2, #2
 800d72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d732:	e065      	b.n	800d800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fa25 	bl	800db84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2203      	movs	r2, #3
 800d73e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d742:	e05d      	b.n	800d800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fa1d 	bl	800db84 <USBD_CtlSendStatus>
      break;
 800d74a:	e059      	b.n	800d800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d74c:	4b2f      	ldr	r3, [pc, #188]	; (800d80c <USBD_SetConfig+0x150>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d112      	bne.n	800d77a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d75c:	4b2b      	ldr	r3, [pc, #172]	; (800d80c <USBD_SetConfig+0x150>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	461a      	mov	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d766:	4b29      	ldr	r3, [pc, #164]	; (800d80c <USBD_SetConfig+0x150>)
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	4619      	mov	r1, r3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7fe ffd0 	bl	800c712 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 fa06 	bl	800db84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d778:	e042      	b.n	800d800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d77a:	4b24      	ldr	r3, [pc, #144]	; (800d80c <USBD_SetConfig+0x150>)
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	461a      	mov	r2, r3
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d02a      	beq.n	800d7de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	685b      	ldr	r3, [r3, #4]
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4619      	mov	r1, r3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7fe ffbe 	bl	800c712 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d796:	4b1d      	ldr	r3, [pc, #116]	; (800d80c <USBD_SetConfig+0x150>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	461a      	mov	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7a0:	4b1a      	ldr	r3, [pc, #104]	; (800d80c <USBD_SetConfig+0x150>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7fe ff97 	bl	800c6da <USBD_SetClassConfig>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00f      	beq.n	800d7d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f918 	bl	800d9ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7fe ffa3 	bl	800c712 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2202      	movs	r2, #2
 800d7d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7d4:	e014      	b.n	800d800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f9d4 	bl	800db84 <USBD_CtlSendStatus>
      break;
 800d7dc:	e010      	b.n	800d800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f9d0 	bl	800db84 <USBD_CtlSendStatus>
      break;
 800d7e4:	e00c      	b.n	800d800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d7e6:	6839      	ldr	r1, [r7, #0]
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f000 f900 	bl	800d9ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7ee:	4b07      	ldr	r3, [pc, #28]	; (800d80c <USBD_SetConfig+0x150>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f7fe ff8c 	bl	800c712 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d7fe:	bf00      	nop
  }

  return ret;
 800d800:	7bfb      	ldrb	r3, [r7, #15]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3710      	adds	r7, #16
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	240005f8 	.word	0x240005f8

0800d810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	88db      	ldrh	r3, [r3, #6]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d004      	beq.n	800d82c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d822:	6839      	ldr	r1, [r7, #0]
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 f8e2 	bl	800d9ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d82a:	e023      	b.n	800d874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b02      	cmp	r3, #2
 800d836:	dc02      	bgt.n	800d83e <USBD_GetConfig+0x2e>
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dc03      	bgt.n	800d844 <USBD_GetConfig+0x34>
 800d83c:	e015      	b.n	800d86a <USBD_GetConfig+0x5a>
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d00b      	beq.n	800d85a <USBD_GetConfig+0x4a>
 800d842:	e012      	b.n	800d86a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	3308      	adds	r3, #8
 800d84e:	2201      	movs	r2, #1
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f93c 	bl	800dad0 <USBD_CtlSendData>
        break;
 800d858:	e00c      	b.n	800d874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3304      	adds	r3, #4
 800d85e:	2201      	movs	r2, #1
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f934 	bl	800dad0 <USBD_CtlSendData>
        break;
 800d868:	e004      	b.n	800d874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f8be 	bl	800d9ee <USBD_CtlError>
        break;
 800d872:	bf00      	nop
}
 800d874:	bf00      	nop
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	3b01      	subs	r3, #1
 800d890:	2b02      	cmp	r3, #2
 800d892:	d81e      	bhi.n	800d8d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	88db      	ldrh	r3, [r3, #6]
 800d898:	2b02      	cmp	r3, #2
 800d89a:	d004      	beq.n	800d8a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 f8a5 	bl	800d9ee <USBD_CtlError>
        break;
 800d8a4:	e01a      	b.n	800d8dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d005      	beq.n	800d8c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f043 0202 	orr.w	r2, r3, #2
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	330c      	adds	r3, #12
 800d8c6:	2202      	movs	r2, #2
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f900 	bl	800dad0 <USBD_CtlSendData>
      break;
 800d8d0:	e004      	b.n	800d8dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f88a 	bl	800d9ee <USBD_CtlError>
      break;
 800d8da:	bf00      	nop
  }
}
 800d8dc:	bf00      	nop
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	885b      	ldrh	r3, [r3, #2]
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d107      	bne.n	800d906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f940 	bl	800db84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d904:	e013      	b.n	800d92e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	885b      	ldrh	r3, [r3, #2]
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d10b      	bne.n	800d926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	889b      	ldrh	r3, [r3, #4]
 800d912:	0a1b      	lsrs	r3, r3, #8
 800d914:	b29b      	uxth	r3, r3
 800d916:	b2da      	uxtb	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f930 	bl	800db84 <USBD_CtlSendStatus>
}
 800d924:	e003      	b.n	800d92e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d926:	6839      	ldr	r1, [r7, #0]
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 f860 	bl	800d9ee <USBD_CtlError>
}
 800d92e:	bf00      	nop
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
 800d93e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d946:	b2db      	uxtb	r3, r3
 800d948:	3b01      	subs	r3, #1
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d80b      	bhi.n	800d966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	885b      	ldrh	r3, [r3, #2]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d10c      	bne.n	800d970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f910 	bl	800db84 <USBD_CtlSendStatus>
      }
      break;
 800d964:	e004      	b.n	800d970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f840 	bl	800d9ee <USBD_CtlError>
      break;
 800d96e:	e000      	b.n	800d972 <USBD_ClrFeature+0x3c>
      break;
 800d970:	bf00      	nop
  }
}
 800d972:	bf00      	nop
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}

0800d97a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b084      	sub	sp, #16
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
 800d982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	781a      	ldrb	r2, [r3, #0]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	3301      	adds	r3, #1
 800d994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	781a      	ldrb	r2, [r3, #0]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d9a4:	68f8      	ldr	r0, [r7, #12]
 800d9a6:	f7ff fa41 	bl	800ce2c <SWAPBYTE>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d9be:	68f8      	ldr	r0, [r7, #12]
 800d9c0:	f7ff fa34 	bl	800ce2c <SWAPBYTE>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f7ff fa27 	bl	800ce2c <SWAPBYTE>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	80da      	strh	r2, [r3, #6]
}
 800d9e6:	bf00      	nop
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}

0800d9ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9ee:	b580      	push	{r7, lr}
 800d9f0:	b082      	sub	sp, #8
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
 800d9f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9f8:	2180      	movs	r1, #128	; 0x80
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f003 fa72 	bl	8010ee4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da00:	2100      	movs	r1, #0
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f003 fa6e 	bl	8010ee4 <USBD_LL_StallEP>
}
 800da08:	bf00      	nop
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da1c:	2300      	movs	r3, #0
 800da1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d036      	beq.n	800da94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800da2a:	6938      	ldr	r0, [r7, #16]
 800da2c:	f000 f836 	bl	800da9c <USBD_GetLen>
 800da30:	4603      	mov	r3, r0
 800da32:	3301      	adds	r3, #1
 800da34:	b29b      	uxth	r3, r3
 800da36:	005b      	lsls	r3, r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800da3e:	7dfb      	ldrb	r3, [r7, #23]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	4413      	add	r3, r2
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	7812      	ldrb	r2, [r2, #0]
 800da48:	701a      	strb	r2, [r3, #0]
  idx++;
 800da4a:	7dfb      	ldrb	r3, [r7, #23]
 800da4c:	3301      	adds	r3, #1
 800da4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800da50:	7dfb      	ldrb	r3, [r7, #23]
 800da52:	68ba      	ldr	r2, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	2203      	movs	r2, #3
 800da58:	701a      	strb	r2, [r3, #0]
  idx++;
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	3301      	adds	r3, #1
 800da5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da60:	e013      	b.n	800da8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	4413      	add	r3, r2
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	7812      	ldrb	r2, [r2, #0]
 800da6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	3301      	adds	r3, #1
 800da72:	613b      	str	r3, [r7, #16]
    idx++;
 800da74:	7dfb      	ldrb	r3, [r7, #23]
 800da76:	3301      	adds	r3, #1
 800da78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da7a:	7dfb      	ldrb	r3, [r7, #23]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	4413      	add	r3, r2
 800da80:	2200      	movs	r2, #0
 800da82:	701a      	strb	r2, [r3, #0]
    idx++;
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	3301      	adds	r3, #1
 800da88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1e7      	bne.n	800da62 <USBD_GetString+0x52>
 800da92:	e000      	b.n	800da96 <USBD_GetString+0x86>
    return;
 800da94:	bf00      	nop
  }
}
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800daa4:	2300      	movs	r3, #0
 800daa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800daac:	e005      	b.n	800daba <USBD_GetLen+0x1e>
  {
    len++;
 800daae:	7bfb      	ldrb	r3, [r7, #15]
 800dab0:	3301      	adds	r3, #1
 800dab2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f5      	bne.n	800daae <USBD_GetLen+0x12>
  }

  return len;
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	2202      	movs	r2, #2
 800dae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	2100      	movs	r1, #0
 800daf6:	68f8      	ldr	r0, [r7, #12]
 800daf8:	f003 fa7d 	bl	8010ff6 <USBD_LL_Transmit>

  return USBD_OK;
 800dafc:	2300      	movs	r3, #0
}
 800dafe:	4618      	mov	r0, r3
 800db00:	3710      	adds	r7, #16
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	60f8      	str	r0, [r7, #12]
 800db0e:	60b9      	str	r1, [r7, #8]
 800db10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	2100      	movs	r1, #0
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f003 fa6c 	bl	8010ff6 <USBD_LL_Transmit>

  return USBD_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3710      	adds	r7, #16
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	60f8      	str	r0, [r7, #12]
 800db30:	60b9      	str	r1, [r7, #8]
 800db32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2203      	movs	r2, #3
 800db38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	2100      	movs	r1, #0
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f003 fa70 	bl	8011038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db58:	2300      	movs	r3, #0
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}

0800db62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	68ba      	ldr	r2, [r7, #8]
 800db72:	2100      	movs	r1, #0
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f003 fa5f 	bl	8011038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db7a:	2300      	movs	r3, #0
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2204      	movs	r2, #4
 800db90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db94:	2300      	movs	r3, #0
 800db96:	2200      	movs	r2, #0
 800db98:	2100      	movs	r1, #0
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f003 fa2b 	bl	8010ff6 <USBD_LL_Transmit>

  return USBD_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2205      	movs	r2, #5
 800dbb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dbba:	2300      	movs	r3, #0
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f003 fa39 	bl	8011038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <__NVIC_SetPriority>:
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800dbdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	db0a      	blt.n	800dbfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	b2da      	uxtb	r2, r3
 800dbe8:	490c      	ldr	r1, [pc, #48]	; (800dc1c <__NVIC_SetPriority+0x4c>)
 800dbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dbee:	0112      	lsls	r2, r2, #4
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	440b      	add	r3, r1
 800dbf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800dbf8:	e00a      	b.n	800dc10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	b2da      	uxtb	r2, r3
 800dbfe:	4908      	ldr	r1, [pc, #32]	; (800dc20 <__NVIC_SetPriority+0x50>)
 800dc00:	88fb      	ldrh	r3, [r7, #6]
 800dc02:	f003 030f 	and.w	r3, r3, #15
 800dc06:	3b04      	subs	r3, #4
 800dc08:	0112      	lsls	r2, r2, #4
 800dc0a:	b2d2      	uxtb	r2, r2
 800dc0c:	440b      	add	r3, r1
 800dc0e:	761a      	strb	r2, [r3, #24]
}
 800dc10:	bf00      	nop
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	e000e100 	.word	0xe000e100
 800dc20:	e000ed00 	.word	0xe000ed00

0800dc24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dc24:	b580      	push	{r7, lr}
 800dc26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <SysTick_Handler+0x1c>)
 800dc2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dc2c:	f001 fd28 	bl	800f680 <xTaskGetSchedulerState>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d001      	beq.n	800dc3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dc36:	f002 fb0f 	bl	8010258 <xPortSysTickHandler>
  }
}
 800dc3a:	bf00      	nop
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	e000e010 	.word	0xe000e010

0800dc44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dc44:	b580      	push	{r7, lr}
 800dc46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dc48:	2100      	movs	r1, #0
 800dc4a:	f06f 0004 	mvn.w	r0, #4
 800dc4e:	f7ff ffbf 	bl	800dbd0 <__NVIC_SetPriority>
#endif
}
 800dc52:	bf00      	nop
 800dc54:	bd80      	pop	{r7, pc}
	...

0800dc58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc5e:	f3ef 8305 	mrs	r3, IPSR
 800dc62:	603b      	str	r3, [r7, #0]
  return(result);
 800dc64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d003      	beq.n	800dc72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dc6a:	f06f 0305 	mvn.w	r3, #5
 800dc6e:	607b      	str	r3, [r7, #4]
 800dc70:	e00c      	b.n	800dc8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dc72:	4b0a      	ldr	r3, [pc, #40]	; (800dc9c <osKernelInitialize+0x44>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d105      	bne.n	800dc86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dc7a:	4b08      	ldr	r3, [pc, #32]	; (800dc9c <osKernelInitialize+0x44>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dc80:	2300      	movs	r3, #0
 800dc82:	607b      	str	r3, [r7, #4]
 800dc84:	e002      	b.n	800dc8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc8c:	687b      	ldr	r3, [r7, #4]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	240005fc 	.word	0x240005fc

0800dca0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dca6:	f3ef 8305 	mrs	r3, IPSR
 800dcaa:	603b      	str	r3, [r7, #0]
  return(result);
 800dcac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <osKernelStart+0x1a>
    stat = osErrorISR;
 800dcb2:	f06f 0305 	mvn.w	r3, #5
 800dcb6:	607b      	str	r3, [r7, #4]
 800dcb8:	e010      	b.n	800dcdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dcba:	4b0b      	ldr	r3, [pc, #44]	; (800dce8 <osKernelStart+0x48>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d109      	bne.n	800dcd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dcc2:	f7ff ffbf 	bl	800dc44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dcc6:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <osKernelStart+0x48>)
 800dcc8:	2202      	movs	r2, #2
 800dcca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dccc:	f001 f87c 	bl	800edc8 <vTaskStartScheduler>
      stat = osOK;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	607b      	str	r3, [r7, #4]
 800dcd4:	e002      	b.n	800dcdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dcd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dcdc:	687b      	ldr	r3, [r7, #4]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	240005fc 	.word	0x240005fc

0800dcec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08e      	sub	sp, #56	; 0x38
 800dcf0:	af04      	add	r7, sp, #16
 800dcf2:	60f8      	str	r0, [r7, #12]
 800dcf4:	60b9      	str	r1, [r7, #8]
 800dcf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dcfc:	f3ef 8305 	mrs	r3, IPSR
 800dd00:	617b      	str	r3, [r7, #20]
  return(result);
 800dd02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d17e      	bne.n	800de06 <osThreadNew+0x11a>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d07b      	beq.n	800de06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dd0e:	2380      	movs	r3, #128	; 0x80
 800dd10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dd12:	2318      	movs	r3, #24
 800dd14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800dd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d045      	beq.n	800ddb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d002      	beq.n	800dd34 <osThreadNew+0x48>
        name = attr->name;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d002      	beq.n	800dd42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	699b      	ldr	r3, [r3, #24]
 800dd40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d008      	beq.n	800dd5a <osThreadNew+0x6e>
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	2b38      	cmp	r3, #56	; 0x38
 800dd4c:	d805      	bhi.n	800dd5a <osThreadNew+0x6e>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <osThreadNew+0x72>
        return (NULL);
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	e054      	b.n	800de08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d003      	beq.n	800dd6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	695b      	ldr	r3, [r3, #20]
 800dd6a:	089b      	lsrs	r3, r3, #2
 800dd6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <osThreadNew+0xa8>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	2bbb      	cmp	r3, #187	; 0xbb
 800dd7c:	d90a      	bls.n	800dd94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d006      	beq.n	800dd94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <osThreadNew+0xa8>
        mem = 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	e010      	b.n	800ddb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10c      	bne.n	800ddb6 <osThreadNew+0xca>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	68db      	ldr	r3, [r3, #12]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d108      	bne.n	800ddb6 <osThreadNew+0xca>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	691b      	ldr	r3, [r3, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <osThreadNew+0xca>
          mem = 0;
 800ddac:	2300      	movs	r3, #0
 800ddae:	61bb      	str	r3, [r7, #24]
 800ddb0:	e001      	b.n	800ddb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ddb6:	69bb      	ldr	r3, [r7, #24]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d110      	bne.n	800ddde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ddc4:	9202      	str	r2, [sp, #8]
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	6a3a      	ldr	r2, [r7, #32]
 800ddd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f000 fe0c 	bl	800e9f0 <xTaskCreateStatic>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	613b      	str	r3, [r7, #16]
 800dddc:	e013      	b.n	800de06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d110      	bne.n	800de06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dde4:	6a3b      	ldr	r3, [r7, #32]
 800dde6:	b29a      	uxth	r2, r3
 800dde8:	f107 0310 	add.w	r3, r7, #16
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 fe57 	bl	800eaaa <xTaskCreate>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d001      	beq.n	800de06 <osThreadNew+0x11a>
            hTask = NULL;
 800de02:	2300      	movs	r3, #0
 800de04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800de06:	693b      	ldr	r3, [r7, #16]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3728      	adds	r7, #40	; 0x28
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de18:	f3ef 8305 	mrs	r3, IPSR
 800de1c:	60bb      	str	r3, [r7, #8]
  return(result);
 800de1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <osDelay+0x1c>
    stat = osErrorISR;
 800de24:	f06f 0305 	mvn.w	r3, #5
 800de28:	60fb      	str	r3, [r7, #12]
 800de2a:	e007      	b.n	800de3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <osDelay+0x2c>
      vTaskDelay(ticks);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 ff92 	bl	800ed60 <vTaskDelay>
    }
  }

  return (stat);
 800de3c:	68fb      	ldr	r3, [r7, #12]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
	...

0800de48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	60b9      	str	r1, [r7, #8]
 800de52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	4a07      	ldr	r2, [pc, #28]	; (800de74 <vApplicationGetIdleTaskMemory+0x2c>)
 800de58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	4a06      	ldr	r2, [pc, #24]	; (800de78 <vApplicationGetIdleTaskMemory+0x30>)
 800de5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2280      	movs	r2, #128	; 0x80
 800de64:	601a      	str	r2, [r3, #0]
}
 800de66:	bf00      	nop
 800de68:	3714      	adds	r7, #20
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr
 800de72:	bf00      	nop
 800de74:	24000600 	.word	0x24000600
 800de78:	240006bc 	.word	0x240006bc

0800de7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de7c:	b480      	push	{r7}
 800de7e:	b085      	sub	sp, #20
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	4a07      	ldr	r2, [pc, #28]	; (800dea8 <vApplicationGetTimerTaskMemory+0x2c>)
 800de8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	4a06      	ldr	r2, [pc, #24]	; (800deac <vApplicationGetTimerTaskMemory+0x30>)
 800de92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de9a:	601a      	str	r2, [r3, #0]
}
 800de9c:	bf00      	nop
 800de9e:	3714      	adds	r7, #20
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr
 800dea8:	240008bc 	.word	0x240008bc
 800deac:	24000978 	.word	0x24000978

0800deb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f103 0208 	add.w	r2, r3, #8
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f04f 32ff 	mov.w	r2, #4294967295
 800dec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f103 0208 	add.w	r2, r3, #8
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f103 0208 	add.w	r2, r3, #8
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dee4:	bf00      	nop
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800defe:	bf00      	nop
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df0a:	b480      	push	{r7}
 800df0c:	b085      	sub	sp, #20
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	683a      	ldr	r2, [r7, #0]
 800df2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	1c5a      	adds	r2, r3, #1
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	601a      	str	r2, [r3, #0]
}
 800df46:	bf00      	nop
 800df48:	3714      	adds	r7, #20
 800df4a:	46bd      	mov	sp, r7
 800df4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df50:	4770      	bx	lr

0800df52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800df52:	b480      	push	{r7}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df68:	d103      	bne.n	800df72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	60fb      	str	r3, [r7, #12]
 800df70:	e00c      	b.n	800df8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3308      	adds	r3, #8
 800df76:	60fb      	str	r3, [r7, #12]
 800df78:	e002      	b.n	800df80 <vListInsert+0x2e>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68ba      	ldr	r2, [r7, #8]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d2f6      	bcs.n	800df7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	683a      	ldr	r2, [r7, #0]
 800df9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	683a      	ldr	r2, [r7, #0]
 800dfa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	687a      	ldr	r2, [r7, #4]
 800dfac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	1c5a      	adds	r2, r3, #1
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	601a      	str	r2, [r3, #0]
}
 800dfb8:	bf00      	nop
 800dfba:	3714      	adds	r7, #20
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	6892      	ldr	r2, [r2, #8]
 800dfda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	6852      	ldr	r2, [r2, #4]
 800dfe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d103      	bne.n	800dff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	1e5a      	subs	r2, r3, #1
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3714      	adds	r7, #20
 800e010:	46bd      	mov	sp, r7
 800e012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e016:	4770      	bx	lr

0800e018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10a      	bne.n	800e042 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e042:	f002 f877 	bl	8010134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e04e:	68f9      	ldr	r1, [r7, #12]
 800e050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e052:	fb01 f303 	mul.w	r3, r1, r3
 800e056:	441a      	add	r2, r3
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2200      	movs	r2, #0
 800e060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681a      	ldr	r2, [r3, #0]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e072:	3b01      	subs	r3, #1
 800e074:	68f9      	ldr	r1, [r7, #12]
 800e076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e078:	fb01 f303 	mul.w	r3, r1, r3
 800e07c:	441a      	add	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	22ff      	movs	r2, #255	; 0xff
 800e086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	22ff      	movs	r2, #255	; 0xff
 800e08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d114      	bne.n	800e0c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	691b      	ldr	r3, [r3, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d01a      	beq.n	800e0d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3310      	adds	r3, #16
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f001 f929 	bl	800f2fc <xTaskRemoveFromEventList>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d012      	beq.n	800e0d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e0b0:	4b0c      	ldr	r3, [pc, #48]	; (800e0e4 <xQueueGenericReset+0xcc>)
 800e0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	e009      	b.n	800e0d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	3310      	adds	r3, #16
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fef2 	bl	800deb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	3324      	adds	r3, #36	; 0x24
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff feed 	bl	800deb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e0d6:	f002 f85d 	bl	8010194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e0da:	2301      	movs	r3, #1
}
 800e0dc:	4618      	mov	r0, r3
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	e000ed04 	.word	0xe000ed04

0800e0e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b08e      	sub	sp, #56	; 0x38
 800e0ec:	af02      	add	r7, sp, #8
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	607a      	str	r2, [r7, #4]
 800e0f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10a      	bne.n	800e112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e100:	f383 8811 	msr	BASEPRI, r3
 800e104:	f3bf 8f6f 	isb	sy
 800e108:	f3bf 8f4f 	dsb	sy
 800e10c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e10e:	bf00      	nop
 800e110:	e7fe      	b.n	800e110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10a      	bne.n	800e12e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e11c:	f383 8811 	msr	BASEPRI, r3
 800e120:	f3bf 8f6f 	isb	sy
 800e124:	f3bf 8f4f 	dsb	sy
 800e128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e12a:	bf00      	nop
 800e12c:	e7fe      	b.n	800e12c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <xQueueGenericCreateStatic+0x52>
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <xQueueGenericCreateStatic+0x56>
 800e13a:	2301      	movs	r3, #1
 800e13c:	e000      	b.n	800e140 <xQueueGenericCreateStatic+0x58>
 800e13e:	2300      	movs	r3, #0
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10a      	bne.n	800e15a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	623b      	str	r3, [r7, #32]
}
 800e156:	bf00      	nop
 800e158:	e7fe      	b.n	800e158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d102      	bne.n	800e166 <xQueueGenericCreateStatic+0x7e>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d101      	bne.n	800e16a <xQueueGenericCreateStatic+0x82>
 800e166:	2301      	movs	r3, #1
 800e168:	e000      	b.n	800e16c <xQueueGenericCreateStatic+0x84>
 800e16a:	2300      	movs	r3, #0
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d10a      	bne.n	800e186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e174:	f383 8811 	msr	BASEPRI, r3
 800e178:	f3bf 8f6f 	isb	sy
 800e17c:	f3bf 8f4f 	dsb	sy
 800e180:	61fb      	str	r3, [r7, #28]
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e186:	2350      	movs	r3, #80	; 0x50
 800e188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b50      	cmp	r3, #80	; 0x50
 800e18e:	d00a      	beq.n	800e1a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	61bb      	str	r3, [r7, #24]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e1a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00d      	beq.n	800e1ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	9300      	str	r3, [sp, #0]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	68b9      	ldr	r1, [r7, #8]
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f805 	bl	800e1d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3730      	adds	r7, #48	; 0x30
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b084      	sub	sp, #16
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]
 800e1e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d103      	bne.n	800e1f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	601a      	str	r2, [r3, #0]
 800e1f2:	e002      	b.n	800e1fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e1f4:	69bb      	ldr	r3, [r7, #24]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e206:	2101      	movs	r1, #1
 800e208:	69b8      	ldr	r0, [r7, #24]
 800e20a:	f7ff ff05 	bl	800e018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	78fa      	ldrb	r2, [r7, #3]
 800e212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e216:	bf00      	nop
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b08e      	sub	sp, #56	; 0x38
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	607a      	str	r2, [r7, #4]
 800e22c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e22e:	2300      	movs	r3, #0
 800e230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d10a      	bne.n	800e252 <xQueueGenericSend+0x32>
	__asm volatile
 800e23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e240:	f383 8811 	msr	BASEPRI, r3
 800e244:	f3bf 8f6f 	isb	sy
 800e248:	f3bf 8f4f 	dsb	sy
 800e24c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e24e:	bf00      	nop
 800e250:	e7fe      	b.n	800e250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <xQueueGenericSend+0x40>
 800e258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <xQueueGenericSend+0x44>
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <xQueueGenericSend+0x46>
 800e264:	2300      	movs	r3, #0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d10a      	bne.n	800e280 <xQueueGenericSend+0x60>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b02      	cmp	r3, #2
 800e284:	d103      	bne.n	800e28e <xQueueGenericSend+0x6e>
 800e286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d101      	bne.n	800e292 <xQueueGenericSend+0x72>
 800e28e:	2301      	movs	r3, #1
 800e290:	e000      	b.n	800e294 <xQueueGenericSend+0x74>
 800e292:	2300      	movs	r3, #0
 800e294:	2b00      	cmp	r3, #0
 800e296:	d10a      	bne.n	800e2ae <xQueueGenericSend+0x8e>
	__asm volatile
 800e298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29c:	f383 8811 	msr	BASEPRI, r3
 800e2a0:	f3bf 8f6f 	isb	sy
 800e2a4:	f3bf 8f4f 	dsb	sy
 800e2a8:	623b      	str	r3, [r7, #32]
}
 800e2aa:	bf00      	nop
 800e2ac:	e7fe      	b.n	800e2ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2ae:	f001 f9e7 	bl	800f680 <xTaskGetSchedulerState>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d102      	bne.n	800e2be <xQueueGenericSend+0x9e>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <xQueueGenericSend+0xa2>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e000      	b.n	800e2c4 <xQueueGenericSend+0xa4>
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d10a      	bne.n	800e2de <xQueueGenericSend+0xbe>
	__asm volatile
 800e2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2cc:	f383 8811 	msr	BASEPRI, r3
 800e2d0:	f3bf 8f6f 	isb	sy
 800e2d4:	f3bf 8f4f 	dsb	sy
 800e2d8:	61fb      	str	r3, [r7, #28]
}
 800e2da:	bf00      	nop
 800e2dc:	e7fe      	b.n	800e2dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2de:	f001 ff29 	bl	8010134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d302      	bcc.n	800e2f4 <xQueueGenericSend+0xd4>
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d129      	bne.n	800e348 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	68b9      	ldr	r1, [r7, #8]
 800e2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2fa:	f000 fa0b 	bl	800e714 <prvCopyDataToQueue>
 800e2fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e304:	2b00      	cmp	r3, #0
 800e306:	d010      	beq.n	800e32a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30a:	3324      	adds	r3, #36	; 0x24
 800e30c:	4618      	mov	r0, r3
 800e30e:	f000 fff5 	bl	800f2fc <xTaskRemoveFromEventList>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d013      	beq.n	800e340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e318:	4b3f      	ldr	r3, [pc, #252]	; (800e418 <xQueueGenericSend+0x1f8>)
 800e31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e31e:	601a      	str	r2, [r3, #0]
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	f3bf 8f6f 	isb	sy
 800e328:	e00a      	b.n	800e340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d007      	beq.n	800e340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e330:	4b39      	ldr	r3, [pc, #228]	; (800e418 <xQueueGenericSend+0x1f8>)
 800e332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e336:	601a      	str	r2, [r3, #0]
 800e338:	f3bf 8f4f 	dsb	sy
 800e33c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e340:	f001 ff28 	bl	8010194 <vPortExitCritical>
				return pdPASS;
 800e344:	2301      	movs	r3, #1
 800e346:	e063      	b.n	800e410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d103      	bne.n	800e356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e34e:	f001 ff21 	bl	8010194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e352:	2300      	movs	r3, #0
 800e354:	e05c      	b.n	800e410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d106      	bne.n	800e36a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e35c:	f107 0314 	add.w	r3, r7, #20
 800e360:	4618      	mov	r0, r3
 800e362:	f001 f82f 	bl	800f3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e366:	2301      	movs	r3, #1
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e36a:	f001 ff13 	bl	8010194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e36e:	f000 fd9b 	bl	800eea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e372:	f001 fedf 	bl	8010134 <vPortEnterCritical>
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e382:	d103      	bne.n	800e38c <xQueueGenericSend+0x16c>
 800e384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e386:	2200      	movs	r2, #0
 800e388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e392:	b25b      	sxtb	r3, r3
 800e394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e398:	d103      	bne.n	800e3a2 <xQueueGenericSend+0x182>
 800e39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3a2:	f001 fef7 	bl	8010194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3a6:	1d3a      	adds	r2, r7, #4
 800e3a8:	f107 0314 	add.w	r3, r7, #20
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f001 f81e 	bl	800f3f0 <xTaskCheckForTimeOut>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d124      	bne.n	800e404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3bc:	f000 faa2 	bl	800e904 <prvIsQueueFull>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d018      	beq.n	800e3f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c8:	3310      	adds	r3, #16
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	4611      	mov	r1, r2
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f000 ff44 	bl	800f25c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d6:	f000 fa2d 	bl	800e834 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3da:	f000 fd73 	bl	800eec4 <xTaskResumeAll>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f47f af7c 	bne.w	800e2de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e3e6:	4b0c      	ldr	r3, [pc, #48]	; (800e418 <xQueueGenericSend+0x1f8>)
 800e3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ec:	601a      	str	r2, [r3, #0]
 800e3ee:	f3bf 8f4f 	dsb	sy
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	e772      	b.n	800e2de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3fa:	f000 fa1b 	bl	800e834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3fe:	f000 fd61 	bl	800eec4 <xTaskResumeAll>
 800e402:	e76c      	b.n	800e2de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e406:	f000 fa15 	bl	800e834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e40a:	f000 fd5b 	bl	800eec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e40e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e410:	4618      	mov	r0, r3
 800e412:	3738      	adds	r7, #56	; 0x38
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	e000ed04 	.word	0xe000ed04

0800e41c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b090      	sub	sp, #64	; 0x40
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	607a      	str	r2, [r7, #4]
 800e428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	2b00      	cmp	r3, #0
 800e432:	d10a      	bne.n	800e44a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e446:	bf00      	nop
 800e448:	e7fe      	b.n	800e448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d103      	bne.n	800e458 <xQueueGenericSendFromISR+0x3c>
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <xQueueGenericSendFromISR+0x40>
 800e458:	2301      	movs	r3, #1
 800e45a:	e000      	b.n	800e45e <xQueueGenericSendFromISR+0x42>
 800e45c:	2300      	movs	r3, #0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10a      	bne.n	800e478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e474:	bf00      	nop
 800e476:	e7fe      	b.n	800e476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d103      	bne.n	800e486 <xQueueGenericSendFromISR+0x6a>
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e482:	2b01      	cmp	r3, #1
 800e484:	d101      	bne.n	800e48a <xQueueGenericSendFromISR+0x6e>
 800e486:	2301      	movs	r3, #1
 800e488:	e000      	b.n	800e48c <xQueueGenericSendFromISR+0x70>
 800e48a:	2300      	movs	r3, #0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10a      	bne.n	800e4a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e494:	f383 8811 	msr	BASEPRI, r3
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	f3bf 8f4f 	dsb	sy
 800e4a0:	623b      	str	r3, [r7, #32]
}
 800e4a2:	bf00      	nop
 800e4a4:	e7fe      	b.n	800e4a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a6:	f001 ff27 	bl	80102f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e4aa:	f3ef 8211 	mrs	r2, BASEPRI
 800e4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b2:	f383 8811 	msr	BASEPRI, r3
 800e4b6:	f3bf 8f6f 	isb	sy
 800e4ba:	f3bf 8f4f 	dsb	sy
 800e4be:	61fa      	str	r2, [r7, #28]
 800e4c0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e4c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d302      	bcc.n	800e4d8 <xQueueGenericSendFromISR+0xbc>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d12f      	bne.n	800e538 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4e8:	683a      	ldr	r2, [r7, #0]
 800e4ea:	68b9      	ldr	r1, [r7, #8]
 800e4ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4ee:	f000 f911 	bl	800e714 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fa:	d112      	bne.n	800e522 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e500:	2b00      	cmp	r3, #0
 800e502:	d016      	beq.n	800e532 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e506:	3324      	adds	r3, #36	; 0x24
 800e508:	4618      	mov	r0, r3
 800e50a:	f000 fef7 	bl	800f2fc <xTaskRemoveFromEventList>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00e      	beq.n	800e532 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d00b      	beq.n	800e532 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2201      	movs	r2, #1
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	e007      	b.n	800e532 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e526:	3301      	adds	r3, #1
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	b25a      	sxtb	r2, r3
 800e52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e532:	2301      	movs	r3, #1
 800e534:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e536:	e001      	b.n	800e53c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e546:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3740      	adds	r7, #64	; 0x40
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
	...

0800e554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b08c      	sub	sp, #48	; 0x30
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e560:	2300      	movs	r3, #0
 800e562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d10a      	bne.n	800e584 <xQueueReceive+0x30>
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	623b      	str	r3, [r7, #32]
}
 800e580:	bf00      	nop
 800e582:	e7fe      	b.n	800e582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <xQueueReceive+0x3e>
 800e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d101      	bne.n	800e596 <xQueueReceive+0x42>
 800e592:	2301      	movs	r3, #1
 800e594:	e000      	b.n	800e598 <xQueueReceive+0x44>
 800e596:	2300      	movs	r3, #0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d10a      	bne.n	800e5b2 <xQueueReceive+0x5e>
	__asm volatile
 800e59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a0:	f383 8811 	msr	BASEPRI, r3
 800e5a4:	f3bf 8f6f 	isb	sy
 800e5a8:	f3bf 8f4f 	dsb	sy
 800e5ac:	61fb      	str	r3, [r7, #28]
}
 800e5ae:	bf00      	nop
 800e5b0:	e7fe      	b.n	800e5b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5b2:	f001 f865 	bl	800f680 <xTaskGetSchedulerState>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d102      	bne.n	800e5c2 <xQueueReceive+0x6e>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <xQueueReceive+0x72>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e000      	b.n	800e5c8 <xQueueReceive+0x74>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10a      	bne.n	800e5e2 <xQueueReceive+0x8e>
	__asm volatile
 800e5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d0:	f383 8811 	msr	BASEPRI, r3
 800e5d4:	f3bf 8f6f 	isb	sy
 800e5d8:	f3bf 8f4f 	dsb	sy
 800e5dc:	61bb      	str	r3, [r7, #24]
}
 800e5de:	bf00      	nop
 800e5e0:	e7fe      	b.n	800e5e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5e2:	f001 fda7 	bl	8010134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d01f      	beq.n	800e632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5f2:	68b9      	ldr	r1, [r7, #8]
 800e5f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f6:	f000 f8f7 	bl	800e7e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	1e5a      	subs	r2, r3, #1
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	691b      	ldr	r3, [r3, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00f      	beq.n	800e62a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60c:	3310      	adds	r3, #16
 800e60e:	4618      	mov	r0, r3
 800e610:	f000 fe74 	bl	800f2fc <xTaskRemoveFromEventList>
 800e614:	4603      	mov	r3, r0
 800e616:	2b00      	cmp	r3, #0
 800e618:	d007      	beq.n	800e62a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e61a:	4b3d      	ldr	r3, [pc, #244]	; (800e710 <xQueueReceive+0x1bc>)
 800e61c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e620:	601a      	str	r2, [r3, #0]
 800e622:	f3bf 8f4f 	dsb	sy
 800e626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e62a:	f001 fdb3 	bl	8010194 <vPortExitCritical>
				return pdPASS;
 800e62e:	2301      	movs	r3, #1
 800e630:	e069      	b.n	800e706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e638:	f001 fdac 	bl	8010194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e63c:	2300      	movs	r3, #0
 800e63e:	e062      	b.n	800e706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e646:	f107 0310 	add.w	r3, r7, #16
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 feba 	bl	800f3c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e650:	2301      	movs	r3, #1
 800e652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e654:	f001 fd9e 	bl	8010194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e658:	f000 fc26 	bl	800eea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e65c:	f001 fd6a 	bl	8010134 <vPortEnterCritical>
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e666:	b25b      	sxtb	r3, r3
 800e668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e66c:	d103      	bne.n	800e676 <xQueueReceive+0x122>
 800e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e67c:	b25b      	sxtb	r3, r3
 800e67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e682:	d103      	bne.n	800e68c <xQueueReceive+0x138>
 800e684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e68c:	f001 fd82 	bl	8010194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e690:	1d3a      	adds	r2, r7, #4
 800e692:	f107 0310 	add.w	r3, r7, #16
 800e696:	4611      	mov	r1, r2
 800e698:	4618      	mov	r0, r3
 800e69a:	f000 fea9 	bl	800f3f0 <xTaskCheckForTimeOut>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d123      	bne.n	800e6ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a6:	f000 f917 	bl	800e8d8 <prvIsQueueEmpty>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d017      	beq.n	800e6e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b2:	3324      	adds	r3, #36	; 0x24
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 fdcf 	bl	800f25c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6c0:	f000 f8b8 	bl	800e834 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6c4:	f000 fbfe 	bl	800eec4 <xTaskResumeAll>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d189      	bne.n	800e5e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e6ce:	4b10      	ldr	r3, [pc, #64]	; (800e710 <xQueueReceive+0x1bc>)
 800e6d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	f3bf 8f6f 	isb	sy
 800e6de:	e780      	b.n	800e5e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6e2:	f000 f8a7 	bl	800e834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6e6:	f000 fbed 	bl	800eec4 <xTaskResumeAll>
 800e6ea:	e77a      	b.n	800e5e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e6ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ee:	f000 f8a1 	bl	800e834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6f2:	f000 fbe7 	bl	800eec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f8:	f000 f8ee 	bl	800e8d8 <prvIsQueueEmpty>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f43f af6f 	beq.w	800e5e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3730      	adds	r7, #48	; 0x30
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	e000ed04 	.word	0xe000ed04

0800e714 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	60f8      	str	r0, [r7, #12]
 800e71c:	60b9      	str	r1, [r7, #8]
 800e71e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e720:	2300      	movs	r3, #0
 800e722:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e728:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10d      	bne.n	800e74e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d14d      	bne.n	800e7d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	4618      	mov	r0, r3
 800e740:	f000 ffbc 	bl	800f6bc <xTaskPriorityDisinherit>
 800e744:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	609a      	str	r2, [r3, #8]
 800e74c:	e043      	b.n	800e7d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d119      	bne.n	800e788 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	6858      	ldr	r0, [r3, #4]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75c:	461a      	mov	r2, r3
 800e75e:	68b9      	ldr	r1, [r7, #8]
 800e760:	f002 fd08 	bl	8011174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	685a      	ldr	r2, [r3, #4]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e76c:	441a      	add	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	689b      	ldr	r3, [r3, #8]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d32b      	bcc.n	800e7d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681a      	ldr	r2, [r3, #0]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	605a      	str	r2, [r3, #4]
 800e786:	e026      	b.n	800e7d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68d8      	ldr	r0, [r3, #12]
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e790:	461a      	mov	r2, r3
 800e792:	68b9      	ldr	r1, [r7, #8]
 800e794:	f002 fcee 	bl	8011174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7a0:	425b      	negs	r3, r3
 800e7a2:	441a      	add	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d207      	bcs.n	800e7c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	689a      	ldr	r2, [r3, #8]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7bc:	425b      	negs	r3, r3
 800e7be:	441a      	add	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2b02      	cmp	r3, #2
 800e7c8:	d105      	bne.n	800e7d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e7de:	697b      	ldr	r3, [r7, #20]
}
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	3718      	adds	r7, #24
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b082      	sub	sp, #8
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d018      	beq.n	800e82c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	68da      	ldr	r2, [r3, #12]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e802:	441a      	add	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68da      	ldr	r2, [r3, #12]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	429a      	cmp	r2, r3
 800e812:	d303      	bcc.n	800e81c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681a      	ldr	r2, [r3, #0]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68d9      	ldr	r1, [r3, #12]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e824:	461a      	mov	r2, r3
 800e826:	6838      	ldr	r0, [r7, #0]
 800e828:	f002 fca4 	bl	8011174 <memcpy>
	}
}
 800e82c:	bf00      	nop
 800e82e:	3708      	adds	r7, #8
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b084      	sub	sp, #16
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e83c:	f001 fc7a 	bl	8010134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e846:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e848:	e011      	b.n	800e86e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d012      	beq.n	800e878 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3324      	adds	r3, #36	; 0x24
 800e856:	4618      	mov	r0, r3
 800e858:	f000 fd50 	bl	800f2fc <xTaskRemoveFromEventList>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d001      	beq.n	800e866 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e862:	f000 fe27 	bl	800f4b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	3b01      	subs	r3, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e86e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e872:	2b00      	cmp	r3, #0
 800e874:	dce9      	bgt.n	800e84a <prvUnlockQueue+0x16>
 800e876:	e000      	b.n	800e87a <prvUnlockQueue+0x46>
					break;
 800e878:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	22ff      	movs	r2, #255	; 0xff
 800e87e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e882:	f001 fc87 	bl	8010194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e886:	f001 fc55 	bl	8010134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e890:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e892:	e011      	b.n	800e8b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d012      	beq.n	800e8c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	3310      	adds	r3, #16
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f000 fd2b 	bl	800f2fc <xTaskRemoveFromEventList>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e8ac:	f000 fe02 	bl	800f4b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e8b0:	7bbb      	ldrb	r3, [r7, #14]
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e8b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	dce9      	bgt.n	800e894 <prvUnlockQueue+0x60>
 800e8c0:	e000      	b.n	800e8c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e8c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	22ff      	movs	r2, #255	; 0xff
 800e8c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e8cc:	f001 fc62 	bl	8010194 <vPortExitCritical>
}
 800e8d0:	bf00      	nop
 800e8d2:	3710      	adds	r7, #16
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}

0800e8d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e8e0:	f001 fc28 	bl	8010134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d102      	bne.n	800e8f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	e001      	b.n	800e8f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e8f6:	f001 fc4d 	bl	8010194 <vPortExitCritical>

	return xReturn;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e90c:	f001 fc12 	bl	8010134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e918:	429a      	cmp	r2, r3
 800e91a:	d102      	bne.n	800e922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e91c:	2301      	movs	r3, #1
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	e001      	b.n	800e926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e922:	2300      	movs	r3, #0
 800e924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e926:	f001 fc35 	bl	8010194 <vPortExitCritical>

	return xReturn;
 800e92a:	68fb      	ldr	r3, [r7, #12]
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e934:	b480      	push	{r7}
 800e936:	b085      	sub	sp, #20
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e93e:	2300      	movs	r3, #0
 800e940:	60fb      	str	r3, [r7, #12]
 800e942:	e014      	b.n	800e96e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e944:	4a0f      	ldr	r2, [pc, #60]	; (800e984 <vQueueAddToRegistry+0x50>)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d10b      	bne.n	800e968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e950:	490c      	ldr	r1, [pc, #48]	; (800e984 <vQueueAddToRegistry+0x50>)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e95a:	4a0a      	ldr	r2, [pc, #40]	; (800e984 <vQueueAddToRegistry+0x50>)
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	00db      	lsls	r3, r3, #3
 800e960:	4413      	add	r3, r2
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e966:	e006      	b.n	800e976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	3301      	adds	r3, #1
 800e96c:	60fb      	str	r3, [r7, #12]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2b07      	cmp	r3, #7
 800e972:	d9e7      	bls.n	800e944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e974:	bf00      	nop
 800e976:	bf00      	nop
 800e978:	3714      	adds	r7, #20
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	24000d78 	.word	0x24000d78

0800e988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b086      	sub	sp, #24
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	60f8      	str	r0, [r7, #12]
 800e990:	60b9      	str	r1, [r7, #8]
 800e992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e998:	f001 fbcc 	bl	8010134 <vPortEnterCritical>
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d103      	bne.n	800e9b2 <vQueueWaitForMessageRestricted+0x2a>
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9b8:	b25b      	sxtb	r3, r3
 800e9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9be:	d103      	bne.n	800e9c8 <vQueueWaitForMessageRestricted+0x40>
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9c8:	f001 fbe4 	bl	8010194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d106      	bne.n	800e9e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	3324      	adds	r3, #36	; 0x24
 800e9d8:	687a      	ldr	r2, [r7, #4]
 800e9da:	68b9      	ldr	r1, [r7, #8]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 fc61 	bl	800f2a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e9e2:	6978      	ldr	r0, [r7, #20]
 800e9e4:	f7ff ff26 	bl	800e834 <prvUnlockQueue>
	}
 800e9e8:	bf00      	nop
 800e9ea:	3718      	adds	r7, #24
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b08e      	sub	sp, #56	; 0x38
 800e9f4:	af04      	add	r7, sp, #16
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
 800e9fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e9fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d10a      	bne.n	800ea1a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea08:	f383 8811 	msr	BASEPRI, r3
 800ea0c:	f3bf 8f6f 	isb	sy
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	623b      	str	r3, [r7, #32]
}
 800ea16:	bf00      	nop
 800ea18:	e7fe      	b.n	800ea18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d10a      	bne.n	800ea36 <xTaskCreateStatic+0x46>
	__asm volatile
 800ea20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea24:	f383 8811 	msr	BASEPRI, r3
 800ea28:	f3bf 8f6f 	isb	sy
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	61fb      	str	r3, [r7, #28]
}
 800ea32:	bf00      	nop
 800ea34:	e7fe      	b.n	800ea34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ea36:	23bc      	movs	r3, #188	; 0xbc
 800ea38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ea3a:	693b      	ldr	r3, [r7, #16]
 800ea3c:	2bbc      	cmp	r3, #188	; 0xbc
 800ea3e:	d00a      	beq.n	800ea56 <xTaskCreateStatic+0x66>
	__asm volatile
 800ea40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea44:	f383 8811 	msr	BASEPRI, r3
 800ea48:	f3bf 8f6f 	isb	sy
 800ea4c:	f3bf 8f4f 	dsb	sy
 800ea50:	61bb      	str	r3, [r7, #24]
}
 800ea52:	bf00      	nop
 800ea54:	e7fe      	b.n	800ea54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ea56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ea58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d01e      	beq.n	800ea9c <xTaskCreateStatic+0xac>
 800ea5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d01b      	beq.n	800ea9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ea64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ea68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	2202      	movs	r2, #2
 800ea72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ea76:	2300      	movs	r3, #0
 800ea78:	9303      	str	r3, [sp, #12]
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	9302      	str	r3, [sp, #8]
 800ea7e:	f107 0314 	add.w	r3, r7, #20
 800ea82:	9301      	str	r3, [sp, #4]
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	687a      	ldr	r2, [r7, #4]
 800ea8c:	68b9      	ldr	r1, [r7, #8]
 800ea8e:	68f8      	ldr	r0, [r7, #12]
 800ea90:	f000 f850 	bl	800eb34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ea94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea96:	f000 f8f3 	bl	800ec80 <prvAddNewTaskToReadyList>
 800ea9a:	e001      	b.n	800eaa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eaa0:	697b      	ldr	r3, [r7, #20]
	}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3728      	adds	r7, #40	; 0x28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	b08c      	sub	sp, #48	; 0x30
 800eaae:	af04      	add	r7, sp, #16
 800eab0:	60f8      	str	r0, [r7, #12]
 800eab2:	60b9      	str	r1, [r7, #8]
 800eab4:	603b      	str	r3, [r7, #0]
 800eab6:	4613      	mov	r3, r2
 800eab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eaba:	88fb      	ldrh	r3, [r7, #6]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f001 fc5a 	bl	8010378 <pvPortMalloc>
 800eac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00e      	beq.n	800eaea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eacc:	20bc      	movs	r0, #188	; 0xbc
 800eace:	f001 fc53 	bl	8010378 <pvPortMalloc>
 800ead2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d003      	beq.n	800eae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	697a      	ldr	r2, [r7, #20]
 800eade:	631a      	str	r2, [r3, #48]	; 0x30
 800eae0:	e005      	b.n	800eaee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eae2:	6978      	ldr	r0, [r7, #20]
 800eae4:	f001 fd14 	bl	8010510 <vPortFree>
 800eae8:	e001      	b.n	800eaee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eaea:	2300      	movs	r3, #0
 800eaec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d017      	beq.n	800eb24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eafc:	88fa      	ldrh	r2, [r7, #6]
 800eafe:	2300      	movs	r3, #0
 800eb00:	9303      	str	r3, [sp, #12]
 800eb02:	69fb      	ldr	r3, [r7, #28]
 800eb04:	9302      	str	r3, [sp, #8]
 800eb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb08:	9301      	str	r3, [sp, #4]
 800eb0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0c:	9300      	str	r3, [sp, #0]
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	68b9      	ldr	r1, [r7, #8]
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f000 f80e 	bl	800eb34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb18:	69f8      	ldr	r0, [r7, #28]
 800eb1a:	f000 f8b1 	bl	800ec80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	61bb      	str	r3, [r7, #24]
 800eb22:	e002      	b.n	800eb2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb24:	f04f 33ff 	mov.w	r3, #4294967295
 800eb28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb2a:	69bb      	ldr	r3, [r7, #24]
	}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3720      	adds	r7, #32
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800eb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	009b      	lsls	r3, r3, #2
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	21a5      	movs	r1, #165	; 0xa5
 800eb4e:	f002 fb1f 	bl	8011190 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800eb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800eb5c:	440b      	add	r3, r1
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	4413      	add	r3, r2
 800eb62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	f023 0307 	bic.w	r3, r3, #7
 800eb6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	f003 0307 	and.w	r3, r3, #7
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d00a      	beq.n	800eb8c <prvInitialiseNewTask+0x58>
	__asm volatile
 800eb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb7a:	f383 8811 	msr	BASEPRI, r3
 800eb7e:	f3bf 8f6f 	isb	sy
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	617b      	str	r3, [r7, #20]
}
 800eb88:	bf00      	nop
 800eb8a:	e7fe      	b.n	800eb8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01f      	beq.n	800ebd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eb92:	2300      	movs	r3, #0
 800eb94:	61fb      	str	r3, [r7, #28]
 800eb96:	e012      	b.n	800ebbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eb98:	68ba      	ldr	r2, [r7, #8]
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	7819      	ldrb	r1, [r3, #0]
 800eba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	4413      	add	r3, r2
 800eba6:	3334      	adds	r3, #52	; 0x34
 800eba8:	460a      	mov	r2, r1
 800ebaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d006      	beq.n	800ebc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	61fb      	str	r3, [r7, #28]
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	2b0f      	cmp	r3, #15
 800ebc2:	d9e9      	bls.n	800eb98 <prvInitialiseNewTask+0x64>
 800ebc4:	e000      	b.n	800ebc8 <prvInitialiseNewTask+0x94>
			{
				break;
 800ebc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ebd0:	e003      	b.n	800ebda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ebda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebdc:	2b37      	cmp	r3, #55	; 0x37
 800ebde:	d901      	bls.n	800ebe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ebe0:	2337      	movs	r3, #55	; 0x37
 800ebe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ebe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ebea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ebf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf8:	3304      	adds	r3, #4
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff f978 	bl	800def0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec02:	3318      	adds	r3, #24
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7ff f973 	bl	800def0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ec16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	2200      	movs	r2, #0
 800ec24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ec30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec32:	3354      	adds	r3, #84	; 0x54
 800ec34:	2260      	movs	r2, #96	; 0x60
 800ec36:	2100      	movs	r1, #0
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f002 faa9 	bl	8011190 <memset>
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	4a0c      	ldr	r2, [pc, #48]	; (800ec74 <prvInitialiseNewTask+0x140>)
 800ec42:	659a      	str	r2, [r3, #88]	; 0x58
 800ec44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec46:	4a0c      	ldr	r2, [pc, #48]	; (800ec78 <prvInitialiseNewTask+0x144>)
 800ec48:	65da      	str	r2, [r3, #92]	; 0x5c
 800ec4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4c:	4a0b      	ldr	r2, [pc, #44]	; (800ec7c <prvInitialiseNewTask+0x148>)
 800ec4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ec50:	683a      	ldr	r2, [r7, #0]
 800ec52:	68f9      	ldr	r1, [r7, #12]
 800ec54:	69b8      	ldr	r0, [r7, #24]
 800ec56:	f001 f941 	bl	800fedc <pxPortInitialiseStack>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ec66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec6c:	bf00      	nop
 800ec6e:	3720      	adds	r7, #32
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	08011448 	.word	0x08011448
 800ec78:	08011468 	.word	0x08011468
 800ec7c:	08011428 	.word	0x08011428

0800ec80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ec88:	f001 fa54 	bl	8010134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ec8c:	4b2d      	ldr	r3, [pc, #180]	; (800ed44 <prvAddNewTaskToReadyList+0xc4>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3301      	adds	r3, #1
 800ec92:	4a2c      	ldr	r2, [pc, #176]	; (800ed44 <prvAddNewTaskToReadyList+0xc4>)
 800ec94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ec96:	4b2c      	ldr	r3, [pc, #176]	; (800ed48 <prvAddNewTaskToReadyList+0xc8>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d109      	bne.n	800ecb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ec9e:	4a2a      	ldr	r2, [pc, #168]	; (800ed48 <prvAddNewTaskToReadyList+0xc8>)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eca4:	4b27      	ldr	r3, [pc, #156]	; (800ed44 <prvAddNewTaskToReadyList+0xc4>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d110      	bne.n	800ecce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecac:	f000 fc26 	bl	800f4fc <prvInitialiseTaskLists>
 800ecb0:	e00d      	b.n	800ecce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecb2:	4b26      	ldr	r3, [pc, #152]	; (800ed4c <prvAddNewTaskToReadyList+0xcc>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d109      	bne.n	800ecce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecba:	4b23      	ldr	r3, [pc, #140]	; (800ed48 <prvAddNewTaskToReadyList+0xc8>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d802      	bhi.n	800ecce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ecc8:	4a1f      	ldr	r2, [pc, #124]	; (800ed48 <prvAddNewTaskToReadyList+0xc8>)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ecce:	4b20      	ldr	r3, [pc, #128]	; (800ed50 <prvAddNewTaskToReadyList+0xd0>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	4a1e      	ldr	r2, [pc, #120]	; (800ed50 <prvAddNewTaskToReadyList+0xd0>)
 800ecd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ecd8:	4b1d      	ldr	r3, [pc, #116]	; (800ed50 <prvAddNewTaskToReadyList+0xd0>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ece4:	4b1b      	ldr	r3, [pc, #108]	; (800ed54 <prvAddNewTaskToReadyList+0xd4>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d903      	bls.n	800ecf4 <prvAddNewTaskToReadyList+0x74>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	4a18      	ldr	r2, [pc, #96]	; (800ed54 <prvAddNewTaskToReadyList+0xd4>)
 800ecf2:	6013      	str	r3, [r2, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	4a15      	ldr	r2, [pc, #84]	; (800ed58 <prvAddNewTaskToReadyList+0xd8>)
 800ed02:	441a      	add	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	3304      	adds	r3, #4
 800ed08:	4619      	mov	r1, r3
 800ed0a:	4610      	mov	r0, r2
 800ed0c:	f7ff f8fd 	bl	800df0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed10:	f001 fa40 	bl	8010194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed14:	4b0d      	ldr	r3, [pc, #52]	; (800ed4c <prvAddNewTaskToReadyList+0xcc>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00e      	beq.n	800ed3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed1c:	4b0a      	ldr	r3, [pc, #40]	; (800ed48 <prvAddNewTaskToReadyList+0xc8>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d207      	bcs.n	800ed3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed2a:	4b0c      	ldr	r3, [pc, #48]	; (800ed5c <prvAddNewTaskToReadyList+0xdc>)
 800ed2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	f3bf 8f4f 	dsb	sy
 800ed36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	2400128c 	.word	0x2400128c
 800ed48:	24000db8 	.word	0x24000db8
 800ed4c:	24001298 	.word	0x24001298
 800ed50:	240012a8 	.word	0x240012a8
 800ed54:	24001294 	.word	0x24001294
 800ed58:	24000dbc 	.word	0x24000dbc
 800ed5c:	e000ed04 	.word	0xe000ed04

0800ed60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d017      	beq.n	800eda2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <vTaskDelay+0x60>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d00a      	beq.n	800ed90 <vTaskDelay+0x30>
	__asm volatile
 800ed7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7e:	f383 8811 	msr	BASEPRI, r3
 800ed82:	f3bf 8f6f 	isb	sy
 800ed86:	f3bf 8f4f 	dsb	sy
 800ed8a:	60bb      	str	r3, [r7, #8]
}
 800ed8c:	bf00      	nop
 800ed8e:	e7fe      	b.n	800ed8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ed90:	f000 f88a 	bl	800eea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ed94:	2100      	movs	r1, #0
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fcfe 	bl	800f798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ed9c:	f000 f892 	bl	800eec4 <xTaskResumeAll>
 800eda0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d107      	bne.n	800edb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800eda8:	4b06      	ldr	r3, [pc, #24]	; (800edc4 <vTaskDelay+0x64>)
 800edaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edae:	601a      	str	r2, [r3, #0]
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edb8:	bf00      	nop
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}
 800edc0:	240012b4 	.word	0x240012b4
 800edc4:	e000ed04 	.word	0xe000ed04

0800edc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b08a      	sub	sp, #40	; 0x28
 800edcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800edce:	2300      	movs	r3, #0
 800edd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800edd2:	2300      	movs	r3, #0
 800edd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800edd6:	463a      	mov	r2, r7
 800edd8:	1d39      	adds	r1, r7, #4
 800edda:	f107 0308 	add.w	r3, r7, #8
 800edde:	4618      	mov	r0, r3
 800ede0:	f7ff f832 	bl	800de48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	68ba      	ldr	r2, [r7, #8]
 800edea:	9202      	str	r2, [sp, #8]
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	2300      	movs	r3, #0
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	2300      	movs	r3, #0
 800edf4:	460a      	mov	r2, r1
 800edf6:	4924      	ldr	r1, [pc, #144]	; (800ee88 <vTaskStartScheduler+0xc0>)
 800edf8:	4824      	ldr	r0, [pc, #144]	; (800ee8c <vTaskStartScheduler+0xc4>)
 800edfa:	f7ff fdf9 	bl	800e9f0 <xTaskCreateStatic>
 800edfe:	4603      	mov	r3, r0
 800ee00:	4a23      	ldr	r2, [pc, #140]	; (800ee90 <vTaskStartScheduler+0xc8>)
 800ee02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee04:	4b22      	ldr	r3, [pc, #136]	; (800ee90 <vTaskStartScheduler+0xc8>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d002      	beq.n	800ee12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	617b      	str	r3, [r7, #20]
 800ee10:	e001      	b.n	800ee16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee12:	2300      	movs	r3, #0
 800ee14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	2b01      	cmp	r3, #1
 800ee1a:	d102      	bne.n	800ee22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ee1c:	f000 fd10 	bl	800f840 <xTimerCreateTimerTask>
 800ee20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d11b      	bne.n	800ee60 <vTaskStartScheduler+0x98>
	__asm volatile
 800ee28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2c:	f383 8811 	msr	BASEPRI, r3
 800ee30:	f3bf 8f6f 	isb	sy
 800ee34:	f3bf 8f4f 	dsb	sy
 800ee38:	613b      	str	r3, [r7, #16]
}
 800ee3a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ee3c:	4b15      	ldr	r3, [pc, #84]	; (800ee94 <vTaskStartScheduler+0xcc>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3354      	adds	r3, #84	; 0x54
 800ee42:	4a15      	ldr	r2, [pc, #84]	; (800ee98 <vTaskStartScheduler+0xd0>)
 800ee44:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee46:	4b15      	ldr	r3, [pc, #84]	; (800ee9c <vTaskStartScheduler+0xd4>)
 800ee48:	f04f 32ff 	mov.w	r2, #4294967295
 800ee4c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee4e:	4b14      	ldr	r3, [pc, #80]	; (800eea0 <vTaskStartScheduler+0xd8>)
 800ee50:	2201      	movs	r2, #1
 800ee52:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee54:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <vTaskStartScheduler+0xdc>)
 800ee56:	2200      	movs	r2, #0
 800ee58:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee5a:	f001 f8c9 	bl	800fff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee5e:	e00e      	b.n	800ee7e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee66:	d10a      	bne.n	800ee7e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ee68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee6c:	f383 8811 	msr	BASEPRI, r3
 800ee70:	f3bf 8f6f 	isb	sy
 800ee74:	f3bf 8f4f 	dsb	sy
 800ee78:	60fb      	str	r3, [r7, #12]
}
 800ee7a:	bf00      	nop
 800ee7c:	e7fe      	b.n	800ee7c <vTaskStartScheduler+0xb4>
}
 800ee7e:	bf00      	nop
 800ee80:	3718      	adds	r7, #24
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	08011394 	.word	0x08011394
 800ee8c:	0800f4cd 	.word	0x0800f4cd
 800ee90:	240012b0 	.word	0x240012b0
 800ee94:	24000db8 	.word	0x24000db8
 800ee98:	24000104 	.word	0x24000104
 800ee9c:	240012ac 	.word	0x240012ac
 800eea0:	24001298 	.word	0x24001298
 800eea4:	24001290 	.word	0x24001290

0800eea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eea8:	b480      	push	{r7}
 800eeaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eeac:	4b04      	ldr	r3, [pc, #16]	; (800eec0 <vTaskSuspendAll+0x18>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	4a03      	ldr	r2, [pc, #12]	; (800eec0 <vTaskSuspendAll+0x18>)
 800eeb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eeb6:	bf00      	nop
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	240012b4 	.word	0x240012b4

0800eec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eeca:	2300      	movs	r3, #0
 800eecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eece:	2300      	movs	r3, #0
 800eed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eed2:	4b42      	ldr	r3, [pc, #264]	; (800efdc <xTaskResumeAll+0x118>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d10a      	bne.n	800eef0 <xTaskResumeAll+0x2c>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	603b      	str	r3, [r7, #0]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800eef0:	f001 f920 	bl	8010134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eef4:	4b39      	ldr	r3, [pc, #228]	; (800efdc <xTaskResumeAll+0x118>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	3b01      	subs	r3, #1
 800eefa:	4a38      	ldr	r2, [pc, #224]	; (800efdc <xTaskResumeAll+0x118>)
 800eefc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eefe:	4b37      	ldr	r3, [pc, #220]	; (800efdc <xTaskResumeAll+0x118>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d162      	bne.n	800efcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef06:	4b36      	ldr	r3, [pc, #216]	; (800efe0 <xTaskResumeAll+0x11c>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d05e      	beq.n	800efcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef0e:	e02f      	b.n	800ef70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef10:	4b34      	ldr	r3, [pc, #208]	; (800efe4 <xTaskResumeAll+0x120>)
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	3318      	adds	r3, #24
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f7ff f851 	bl	800dfc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	3304      	adds	r3, #4
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff f84c 	bl	800dfc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef30:	4b2d      	ldr	r3, [pc, #180]	; (800efe8 <xTaskResumeAll+0x124>)
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d903      	bls.n	800ef40 <xTaskResumeAll+0x7c>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3c:	4a2a      	ldr	r2, [pc, #168]	; (800efe8 <xTaskResumeAll+0x124>)
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef44:	4613      	mov	r3, r2
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	4413      	add	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4a27      	ldr	r2, [pc, #156]	; (800efec <xTaskResumeAll+0x128>)
 800ef4e:	441a      	add	r2, r3
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	3304      	adds	r3, #4
 800ef54:	4619      	mov	r1, r3
 800ef56:	4610      	mov	r0, r2
 800ef58:	f7fe ffd7 	bl	800df0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef60:	4b23      	ldr	r3, [pc, #140]	; (800eff0 <xTaskResumeAll+0x12c>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d302      	bcc.n	800ef70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ef6a:	4b22      	ldr	r3, [pc, #136]	; (800eff4 <xTaskResumeAll+0x130>)
 800ef6c:	2201      	movs	r2, #1
 800ef6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef70:	4b1c      	ldr	r3, [pc, #112]	; (800efe4 <xTaskResumeAll+0x120>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1cb      	bne.n	800ef10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d001      	beq.n	800ef82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef7e:	f000 fb5f 	bl	800f640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef82:	4b1d      	ldr	r3, [pc, #116]	; (800eff8 <xTaskResumeAll+0x134>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d010      	beq.n	800efb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ef8e:	f000 f847 	bl	800f020 <xTaskIncrementTick>
 800ef92:	4603      	mov	r3, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d002      	beq.n	800ef9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ef98:	4b16      	ldr	r3, [pc, #88]	; (800eff4 <xTaskResumeAll+0x130>)
 800ef9a:	2201      	movs	r2, #1
 800ef9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1f1      	bne.n	800ef8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800efaa:	4b13      	ldr	r3, [pc, #76]	; (800eff8 <xTaskResumeAll+0x134>)
 800efac:	2200      	movs	r2, #0
 800efae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800efb0:	4b10      	ldr	r3, [pc, #64]	; (800eff4 <xTaskResumeAll+0x130>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d009      	beq.n	800efcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800efb8:	2301      	movs	r3, #1
 800efba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800efbc:	4b0f      	ldr	r3, [pc, #60]	; (800effc <xTaskResumeAll+0x138>)
 800efbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	f3bf 8f4f 	dsb	sy
 800efc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efcc:	f001 f8e2 	bl	8010194 <vPortExitCritical>

	return xAlreadyYielded;
 800efd0:	68bb      	ldr	r3, [r7, #8]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	240012b4 	.word	0x240012b4
 800efe0:	2400128c 	.word	0x2400128c
 800efe4:	2400124c 	.word	0x2400124c
 800efe8:	24001294 	.word	0x24001294
 800efec:	24000dbc 	.word	0x24000dbc
 800eff0:	24000db8 	.word	0x24000db8
 800eff4:	240012a0 	.word	0x240012a0
 800eff8:	2400129c 	.word	0x2400129c
 800effc:	e000ed04 	.word	0xe000ed04

0800f000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f006:	4b05      	ldr	r3, [pc, #20]	; (800f01c <xTaskGetTickCount+0x1c>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f00c:	687b      	ldr	r3, [r7, #4]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	370c      	adds	r7, #12
 800f012:	46bd      	mov	sp, r7
 800f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f018:	4770      	bx	lr
 800f01a:	bf00      	nop
 800f01c:	24001290 	.word	0x24001290

0800f020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b086      	sub	sp, #24
 800f024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f02a:	4b4f      	ldr	r3, [pc, #316]	; (800f168 <xTaskIncrementTick+0x148>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f040 808f 	bne.w	800f152 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f034:	4b4d      	ldr	r3, [pc, #308]	; (800f16c <xTaskIncrementTick+0x14c>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3301      	adds	r3, #1
 800f03a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f03c:	4a4b      	ldr	r2, [pc, #300]	; (800f16c <xTaskIncrementTick+0x14c>)
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d120      	bne.n	800f08a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f048:	4b49      	ldr	r3, [pc, #292]	; (800f170 <xTaskIncrementTick+0x150>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d00a      	beq.n	800f068 <xTaskIncrementTick+0x48>
	__asm volatile
 800f052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	603b      	str	r3, [r7, #0]
}
 800f064:	bf00      	nop
 800f066:	e7fe      	b.n	800f066 <xTaskIncrementTick+0x46>
 800f068:	4b41      	ldr	r3, [pc, #260]	; (800f170 <xTaskIncrementTick+0x150>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	60fb      	str	r3, [r7, #12]
 800f06e:	4b41      	ldr	r3, [pc, #260]	; (800f174 <xTaskIncrementTick+0x154>)
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4a3f      	ldr	r2, [pc, #252]	; (800f170 <xTaskIncrementTick+0x150>)
 800f074:	6013      	str	r3, [r2, #0]
 800f076:	4a3f      	ldr	r2, [pc, #252]	; (800f174 <xTaskIncrementTick+0x154>)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6013      	str	r3, [r2, #0]
 800f07c:	4b3e      	ldr	r3, [pc, #248]	; (800f178 <xTaskIncrementTick+0x158>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3301      	adds	r3, #1
 800f082:	4a3d      	ldr	r2, [pc, #244]	; (800f178 <xTaskIncrementTick+0x158>)
 800f084:	6013      	str	r3, [r2, #0]
 800f086:	f000 fadb 	bl	800f640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f08a:	4b3c      	ldr	r3, [pc, #240]	; (800f17c <xTaskIncrementTick+0x15c>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	693a      	ldr	r2, [r7, #16]
 800f090:	429a      	cmp	r2, r3
 800f092:	d349      	bcc.n	800f128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f094:	4b36      	ldr	r3, [pc, #216]	; (800f170 <xTaskIncrementTick+0x150>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d104      	bne.n	800f0a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09e:	4b37      	ldr	r3, [pc, #220]	; (800f17c <xTaskIncrementTick+0x15c>)
 800f0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0a4:	601a      	str	r2, [r3, #0]
					break;
 800f0a6:	e03f      	b.n	800f128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0a8:	4b31      	ldr	r3, [pc, #196]	; (800f170 <xTaskIncrementTick+0x150>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	68db      	ldr	r3, [r3, #12]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0b8:	693a      	ldr	r2, [r7, #16]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d203      	bcs.n	800f0c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0c0:	4a2e      	ldr	r2, [pc, #184]	; (800f17c <xTaskIncrementTick+0x15c>)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0c6:	e02f      	b.n	800f128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fe ff79 	bl	800dfc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d004      	beq.n	800f0e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	3318      	adds	r3, #24
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe ff70 	bl	800dfc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0e8:	4b25      	ldr	r3, [pc, #148]	; (800f180 <xTaskIncrementTick+0x160>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d903      	bls.n	800f0f8 <xTaskIncrementTick+0xd8>
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f4:	4a22      	ldr	r2, [pc, #136]	; (800f180 <xTaskIncrementTick+0x160>)
 800f0f6:	6013      	str	r3, [r2, #0]
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	4413      	add	r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	4a1f      	ldr	r2, [pc, #124]	; (800f184 <xTaskIncrementTick+0x164>)
 800f106:	441a      	add	r2, r3
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	3304      	adds	r3, #4
 800f10c:	4619      	mov	r1, r3
 800f10e:	4610      	mov	r0, r2
 800f110:	f7fe fefb 	bl	800df0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f118:	4b1b      	ldr	r3, [pc, #108]	; (800f188 <xTaskIncrementTick+0x168>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11e:	429a      	cmp	r2, r3
 800f120:	d3b8      	bcc.n	800f094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f122:	2301      	movs	r3, #1
 800f124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f126:	e7b5      	b.n	800f094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f128:	4b17      	ldr	r3, [pc, #92]	; (800f188 <xTaskIncrementTick+0x168>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f12e:	4915      	ldr	r1, [pc, #84]	; (800f184 <xTaskIncrementTick+0x164>)
 800f130:	4613      	mov	r3, r2
 800f132:	009b      	lsls	r3, r3, #2
 800f134:	4413      	add	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	440b      	add	r3, r1
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d901      	bls.n	800f144 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f140:	2301      	movs	r3, #1
 800f142:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f144:	4b11      	ldr	r3, [pc, #68]	; (800f18c <xTaskIncrementTick+0x16c>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d007      	beq.n	800f15c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f14c:	2301      	movs	r3, #1
 800f14e:	617b      	str	r3, [r7, #20]
 800f150:	e004      	b.n	800f15c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f152:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <xTaskIncrementTick+0x170>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	3301      	adds	r3, #1
 800f158:	4a0d      	ldr	r2, [pc, #52]	; (800f190 <xTaskIncrementTick+0x170>)
 800f15a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f15c:	697b      	ldr	r3, [r7, #20]
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	240012b4 	.word	0x240012b4
 800f16c:	24001290 	.word	0x24001290
 800f170:	24001244 	.word	0x24001244
 800f174:	24001248 	.word	0x24001248
 800f178:	240012a4 	.word	0x240012a4
 800f17c:	240012ac 	.word	0x240012ac
 800f180:	24001294 	.word	0x24001294
 800f184:	24000dbc 	.word	0x24000dbc
 800f188:	24000db8 	.word	0x24000db8
 800f18c:	240012a0 	.word	0x240012a0
 800f190:	2400129c 	.word	0x2400129c

0800f194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f194:	b480      	push	{r7}
 800f196:	b085      	sub	sp, #20
 800f198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f19a:	4b2a      	ldr	r3, [pc, #168]	; (800f244 <vTaskSwitchContext+0xb0>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d003      	beq.n	800f1aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f1a2:	4b29      	ldr	r3, [pc, #164]	; (800f248 <vTaskSwitchContext+0xb4>)
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f1a8:	e046      	b.n	800f238 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800f1aa:	4b27      	ldr	r3, [pc, #156]	; (800f248 <vTaskSwitchContext+0xb4>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1b0:	4b26      	ldr	r3, [pc, #152]	; (800f24c <vTaskSwitchContext+0xb8>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	60fb      	str	r3, [r7, #12]
 800f1b6:	e010      	b.n	800f1da <vTaskSwitchContext+0x46>
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d10a      	bne.n	800f1d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800f1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c2:	f383 8811 	msr	BASEPRI, r3
 800f1c6:	f3bf 8f6f 	isb	sy
 800f1ca:	f3bf 8f4f 	dsb	sy
 800f1ce:	607b      	str	r3, [r7, #4]
}
 800f1d0:	bf00      	nop
 800f1d2:	e7fe      	b.n	800f1d2 <vTaskSwitchContext+0x3e>
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	60fb      	str	r3, [r7, #12]
 800f1da:	491d      	ldr	r1, [pc, #116]	; (800f250 <vTaskSwitchContext+0xbc>)
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	440b      	add	r3, r1
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d0e4      	beq.n	800f1b8 <vTaskSwitchContext+0x24>
 800f1ee:	68fa      	ldr	r2, [r7, #12]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	4413      	add	r3, r2
 800f1f6:	009b      	lsls	r3, r3, #2
 800f1f8:	4a15      	ldr	r2, [pc, #84]	; (800f250 <vTaskSwitchContext+0xbc>)
 800f1fa:	4413      	add	r3, r2
 800f1fc:	60bb      	str	r3, [r7, #8]
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	685a      	ldr	r2, [r3, #4]
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	605a      	str	r2, [r3, #4]
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	685a      	ldr	r2, [r3, #4]
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	3308      	adds	r3, #8
 800f210:	429a      	cmp	r2, r3
 800f212:	d104      	bne.n	800f21e <vTaskSwitchContext+0x8a>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	685a      	ldr	r2, [r3, #4]
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	605a      	str	r2, [r3, #4]
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	685b      	ldr	r3, [r3, #4]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	4a0b      	ldr	r2, [pc, #44]	; (800f254 <vTaskSwitchContext+0xc0>)
 800f226:	6013      	str	r3, [r2, #0]
 800f228:	4a08      	ldr	r2, [pc, #32]	; (800f24c <vTaskSwitchContext+0xb8>)
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f22e:	4b09      	ldr	r3, [pc, #36]	; (800f254 <vTaskSwitchContext+0xc0>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	3354      	adds	r3, #84	; 0x54
 800f234:	4a08      	ldr	r2, [pc, #32]	; (800f258 <vTaskSwitchContext+0xc4>)
 800f236:	6013      	str	r3, [r2, #0]
}
 800f238:	bf00      	nop
 800f23a:	3714      	adds	r7, #20
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr
 800f244:	240012b4 	.word	0x240012b4
 800f248:	240012a0 	.word	0x240012a0
 800f24c:	24001294 	.word	0x24001294
 800f250:	24000dbc 	.word	0x24000dbc
 800f254:	24000db8 	.word	0x24000db8
 800f258:	24000104 	.word	0x24000104

0800f25c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d10a      	bne.n	800f282 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f270:	f383 8811 	msr	BASEPRI, r3
 800f274:	f3bf 8f6f 	isb	sy
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	60fb      	str	r3, [r7, #12]
}
 800f27e:	bf00      	nop
 800f280:	e7fe      	b.n	800f280 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f282:	4b07      	ldr	r3, [pc, #28]	; (800f2a0 <vTaskPlaceOnEventList+0x44>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3318      	adds	r3, #24
 800f288:	4619      	mov	r1, r3
 800f28a:	6878      	ldr	r0, [r7, #4]
 800f28c:	f7fe fe61 	bl	800df52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f290:	2101      	movs	r1, #1
 800f292:	6838      	ldr	r0, [r7, #0]
 800f294:	f000 fa80 	bl	800f798 <prvAddCurrentTaskToDelayedList>
}
 800f298:	bf00      	nop
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	24000db8 	.word	0x24000db8

0800f2a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b086      	sub	sp, #24
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	60f8      	str	r0, [r7, #12]
 800f2ac:	60b9      	str	r1, [r7, #8]
 800f2ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	617b      	str	r3, [r7, #20]
}
 800f2c8:	bf00      	nop
 800f2ca:	e7fe      	b.n	800f2ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	3318      	adds	r3, #24
 800f2d2:	4619      	mov	r1, r3
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f7fe fe18 	bl	800df0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d002      	beq.n	800f2e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800f2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f2e6:	6879      	ldr	r1, [r7, #4]
 800f2e8:	68b8      	ldr	r0, [r7, #8]
 800f2ea:	f000 fa55 	bl	800f798 <prvAddCurrentTaskToDelayedList>
	}
 800f2ee:	bf00      	nop
 800f2f0:	3718      	adds	r7, #24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	24000db8 	.word	0x24000db8

0800f2fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	68db      	ldr	r3, [r3, #12]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10a      	bne.n	800f328 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f316:	f383 8811 	msr	BASEPRI, r3
 800f31a:	f3bf 8f6f 	isb	sy
 800f31e:	f3bf 8f4f 	dsb	sy
 800f322:	60fb      	str	r3, [r7, #12]
}
 800f324:	bf00      	nop
 800f326:	e7fe      	b.n	800f326 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	3318      	adds	r3, #24
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fe fe49 	bl	800dfc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f332:	4b1e      	ldr	r3, [pc, #120]	; (800f3ac <xTaskRemoveFromEventList+0xb0>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d11d      	bne.n	800f376 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	3304      	adds	r3, #4
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fe fe40 	bl	800dfc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f348:	4b19      	ldr	r3, [pc, #100]	; (800f3b0 <xTaskRemoveFromEventList+0xb4>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d903      	bls.n	800f358 <xTaskRemoveFromEventList+0x5c>
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f354:	4a16      	ldr	r2, [pc, #88]	; (800f3b0 <xTaskRemoveFromEventList+0xb4>)
 800f356:	6013      	str	r3, [r2, #0]
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f35c:	4613      	mov	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	4413      	add	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4a13      	ldr	r2, [pc, #76]	; (800f3b4 <xTaskRemoveFromEventList+0xb8>)
 800f366:	441a      	add	r2, r3
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4619      	mov	r1, r3
 800f36e:	4610      	mov	r0, r2
 800f370:	f7fe fdcb 	bl	800df0a <vListInsertEnd>
 800f374:	e005      	b.n	800f382 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	3318      	adds	r3, #24
 800f37a:	4619      	mov	r1, r3
 800f37c:	480e      	ldr	r0, [pc, #56]	; (800f3b8 <xTaskRemoveFromEventList+0xbc>)
 800f37e:	f7fe fdc4 	bl	800df0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f386:	4b0d      	ldr	r3, [pc, #52]	; (800f3bc <xTaskRemoveFromEventList+0xc0>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d905      	bls.n	800f39c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f390:	2301      	movs	r3, #1
 800f392:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f394:	4b0a      	ldr	r3, [pc, #40]	; (800f3c0 <xTaskRemoveFromEventList+0xc4>)
 800f396:	2201      	movs	r2, #1
 800f398:	601a      	str	r2, [r3, #0]
 800f39a:	e001      	b.n	800f3a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800f39c:	2300      	movs	r3, #0
 800f39e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f3a0:	697b      	ldr	r3, [r7, #20]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3718      	adds	r7, #24
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	240012b4 	.word	0x240012b4
 800f3b0:	24001294 	.word	0x24001294
 800f3b4:	24000dbc 	.word	0x24000dbc
 800f3b8:	2400124c 	.word	0x2400124c
 800f3bc:	24000db8 	.word	0x24000db8
 800f3c0:	240012a0 	.word	0x240012a0

0800f3c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3cc:	4b06      	ldr	r3, [pc, #24]	; (800f3e8 <vTaskInternalSetTimeOutState+0x24>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3d4:	4b05      	ldr	r3, [pc, #20]	; (800f3ec <vTaskInternalSetTimeOutState+0x28>)
 800f3d6:	681a      	ldr	r2, [r3, #0]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	605a      	str	r2, [r3, #4]
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr
 800f3e8:	240012a4 	.word	0x240012a4
 800f3ec:	24001290 	.word	0x24001290

0800f3f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b088      	sub	sp, #32
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10a      	bne.n	800f416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	613b      	str	r3, [r7, #16]
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10a      	bne.n	800f432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	60fb      	str	r3, [r7, #12]
}
 800f42e:	bf00      	nop
 800f430:	e7fe      	b.n	800f430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f432:	f000 fe7f 	bl	8010134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f436:	4b1d      	ldr	r3, [pc, #116]	; (800f4ac <xTaskCheckForTimeOut+0xbc>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f44e:	d102      	bne.n	800f456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f450:	2300      	movs	r3, #0
 800f452:	61fb      	str	r3, [r7, #28]
 800f454:	e023      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	4b15      	ldr	r3, [pc, #84]	; (800f4b0 <xTaskCheckForTimeOut+0xc0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d007      	beq.n	800f472 <xTaskCheckForTimeOut+0x82>
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	69ba      	ldr	r2, [r7, #24]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d302      	bcc.n	800f472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f46c:	2301      	movs	r3, #1
 800f46e:	61fb      	str	r3, [r7, #28]
 800f470:	e015      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	697a      	ldr	r2, [r7, #20]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d20b      	bcs.n	800f494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681a      	ldr	r2, [r3, #0]
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	1ad2      	subs	r2, r2, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7ff ff9b 	bl	800f3c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f48e:	2300      	movs	r3, #0
 800f490:	61fb      	str	r3, [r7, #28]
 800f492:	e004      	b.n	800f49e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2200      	movs	r2, #0
 800f498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f49a:	2301      	movs	r3, #1
 800f49c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f49e:	f000 fe79 	bl	8010194 <vPortExitCritical>

	return xReturn;
 800f4a2:	69fb      	ldr	r3, [r7, #28]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	24001290 	.word	0x24001290
 800f4b0:	240012a4 	.word	0x240012a4

0800f4b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4b8:	4b03      	ldr	r3, [pc, #12]	; (800f4c8 <vTaskMissedYield+0x14>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	601a      	str	r2, [r3, #0]
}
 800f4be:	bf00      	nop
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c6:	4770      	bx	lr
 800f4c8:	240012a0 	.word	0x240012a0

0800f4cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4d4:	f000 f852 	bl	800f57c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4d8:	4b06      	ldr	r3, [pc, #24]	; (800f4f4 <prvIdleTask+0x28>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d9f9      	bls.n	800f4d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <prvIdleTask+0x2c>)
 800f4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4e6:	601a      	str	r2, [r3, #0]
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f4f0:	e7f0      	b.n	800f4d4 <prvIdleTask+0x8>
 800f4f2:	bf00      	nop
 800f4f4:	24000dbc 	.word	0x24000dbc
 800f4f8:	e000ed04 	.word	0xe000ed04

0800f4fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f502:	2300      	movs	r3, #0
 800f504:	607b      	str	r3, [r7, #4]
 800f506:	e00c      	b.n	800f522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4a12      	ldr	r2, [pc, #72]	; (800f55c <prvInitialiseTaskLists+0x60>)
 800f514:	4413      	add	r3, r2
 800f516:	4618      	mov	r0, r3
 800f518:	f7fe fcca 	bl	800deb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	3301      	adds	r3, #1
 800f520:	607b      	str	r3, [r7, #4]
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b37      	cmp	r3, #55	; 0x37
 800f526:	d9ef      	bls.n	800f508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f528:	480d      	ldr	r0, [pc, #52]	; (800f560 <prvInitialiseTaskLists+0x64>)
 800f52a:	f7fe fcc1 	bl	800deb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f52e:	480d      	ldr	r0, [pc, #52]	; (800f564 <prvInitialiseTaskLists+0x68>)
 800f530:	f7fe fcbe 	bl	800deb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f534:	480c      	ldr	r0, [pc, #48]	; (800f568 <prvInitialiseTaskLists+0x6c>)
 800f536:	f7fe fcbb 	bl	800deb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f53a:	480c      	ldr	r0, [pc, #48]	; (800f56c <prvInitialiseTaskLists+0x70>)
 800f53c:	f7fe fcb8 	bl	800deb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f540:	480b      	ldr	r0, [pc, #44]	; (800f570 <prvInitialiseTaskLists+0x74>)
 800f542:	f7fe fcb5 	bl	800deb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f546:	4b0b      	ldr	r3, [pc, #44]	; (800f574 <prvInitialiseTaskLists+0x78>)
 800f548:	4a05      	ldr	r2, [pc, #20]	; (800f560 <prvInitialiseTaskLists+0x64>)
 800f54a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f54c:	4b0a      	ldr	r3, [pc, #40]	; (800f578 <prvInitialiseTaskLists+0x7c>)
 800f54e:	4a05      	ldr	r2, [pc, #20]	; (800f564 <prvInitialiseTaskLists+0x68>)
 800f550:	601a      	str	r2, [r3, #0]
}
 800f552:	bf00      	nop
 800f554:	3708      	adds	r7, #8
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	24000dbc 	.word	0x24000dbc
 800f560:	2400121c 	.word	0x2400121c
 800f564:	24001230 	.word	0x24001230
 800f568:	2400124c 	.word	0x2400124c
 800f56c:	24001260 	.word	0x24001260
 800f570:	24001278 	.word	0x24001278
 800f574:	24001244 	.word	0x24001244
 800f578:	24001248 	.word	0x24001248

0800f57c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f582:	e019      	b.n	800f5b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f584:	f000 fdd6 	bl	8010134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f588:	4b10      	ldr	r3, [pc, #64]	; (800f5cc <prvCheckTasksWaitingTermination+0x50>)
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	68db      	ldr	r3, [r3, #12]
 800f58e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	3304      	adds	r3, #4
 800f594:	4618      	mov	r0, r3
 800f596:	f7fe fd15 	bl	800dfc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f59a:	4b0d      	ldr	r3, [pc, #52]	; (800f5d0 <prvCheckTasksWaitingTermination+0x54>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	4a0b      	ldr	r2, [pc, #44]	; (800f5d0 <prvCheckTasksWaitingTermination+0x54>)
 800f5a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5a4:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	4a0a      	ldr	r2, [pc, #40]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5ae:	f000 fdf1 	bl	8010194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f000 f810 	bl	800f5d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5b8:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <prvCheckTasksWaitingTermination+0x58>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d1e1      	bne.n	800f584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5c0:	bf00      	nop
 800f5c2:	bf00      	nop
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	24001260 	.word	0x24001260
 800f5d0:	2400128c 	.word	0x2400128c
 800f5d4:	24001274 	.word	0x24001274

0800f5d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	3354      	adds	r3, #84	; 0x54
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f001 fde9 	bl	80111bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d108      	bne.n	800f606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 ff89 	bl	8010510 <vPortFree>
				vPortFree( pxTCB );
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 ff86 	bl	8010510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f604:	e018      	b.n	800f638 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f60c:	2b01      	cmp	r3, #1
 800f60e:	d103      	bne.n	800f618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 ff7d 	bl	8010510 <vPortFree>
	}
 800f616:	e00f      	b.n	800f638 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800f61e:	2b02      	cmp	r3, #2
 800f620:	d00a      	beq.n	800f638 <prvDeleteTCB+0x60>
	__asm volatile
 800f622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	60fb      	str	r3, [r7, #12]
}
 800f634:	bf00      	nop
 800f636:	e7fe      	b.n	800f636 <prvDeleteTCB+0x5e>
	}
 800f638:	bf00      	nop
 800f63a:	3710      	adds	r7, #16
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f646:	4b0c      	ldr	r3, [pc, #48]	; (800f678 <prvResetNextTaskUnblockTime+0x38>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d104      	bne.n	800f65a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f650:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <prvResetNextTaskUnblockTime+0x3c>)
 800f652:	f04f 32ff 	mov.w	r2, #4294967295
 800f656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f658:	e008      	b.n	800f66c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f65a:	4b07      	ldr	r3, [pc, #28]	; (800f678 <prvResetNextTaskUnblockTime+0x38>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	68db      	ldr	r3, [r3, #12]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	4a04      	ldr	r2, [pc, #16]	; (800f67c <prvResetNextTaskUnblockTime+0x3c>)
 800f66a:	6013      	str	r3, [r2, #0]
}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	24001244 	.word	0x24001244
 800f67c:	240012ac 	.word	0x240012ac

0800f680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <xTaskGetSchedulerState+0x34>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d102      	bne.n	800f694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f68e:	2301      	movs	r3, #1
 800f690:	607b      	str	r3, [r7, #4]
 800f692:	e008      	b.n	800f6a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f694:	4b08      	ldr	r3, [pc, #32]	; (800f6b8 <xTaskGetSchedulerState+0x38>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d102      	bne.n	800f6a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f69c:	2302      	movs	r3, #2
 800f69e:	607b      	str	r3, [r7, #4]
 800f6a0:	e001      	b.n	800f6a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f6a6:	687b      	ldr	r3, [r7, #4]
	}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	24001298 	.word	0x24001298
 800f6b8:	240012b4 	.word	0x240012b4

0800f6bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d056      	beq.n	800f780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f6d2:	4b2e      	ldr	r3, [pc, #184]	; (800f78c <xTaskPriorityDisinherit+0xd0>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	693a      	ldr	r2, [r7, #16]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d00a      	beq.n	800f6f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e0:	f383 8811 	msr	BASEPRI, r3
 800f6e4:	f3bf 8f6f 	isb	sy
 800f6e8:	f3bf 8f4f 	dsb	sy
 800f6ec:	60fb      	str	r3, [r7, #12]
}
 800f6ee:	bf00      	nop
 800f6f0:	e7fe      	b.n	800f6f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10a      	bne.n	800f710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6fe:	f383 8811 	msr	BASEPRI, r3
 800f702:	f3bf 8f6f 	isb	sy
 800f706:	f3bf 8f4f 	dsb	sy
 800f70a:	60bb      	str	r3, [r7, #8]
}
 800f70c:	bf00      	nop
 800f70e:	e7fe      	b.n	800f70e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f714:	1e5a      	subs	r2, r3, #1
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f722:	429a      	cmp	r2, r3
 800f724:	d02c      	beq.n	800f780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d128      	bne.n	800f780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	3304      	adds	r3, #4
 800f732:	4618      	mov	r0, r3
 800f734:	f7fe fc46 	bl	800dfc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f750:	4b0f      	ldr	r3, [pc, #60]	; (800f790 <xTaskPriorityDisinherit+0xd4>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	429a      	cmp	r2, r3
 800f756:	d903      	bls.n	800f760 <xTaskPriorityDisinherit+0xa4>
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75c:	4a0c      	ldr	r2, [pc, #48]	; (800f790 <xTaskPriorityDisinherit+0xd4>)
 800f75e:	6013      	str	r3, [r2, #0]
 800f760:	693b      	ldr	r3, [r7, #16]
 800f762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f764:	4613      	mov	r3, r2
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	4413      	add	r3, r2
 800f76a:	009b      	lsls	r3, r3, #2
 800f76c:	4a09      	ldr	r2, [pc, #36]	; (800f794 <xTaskPriorityDisinherit+0xd8>)
 800f76e:	441a      	add	r2, r3
 800f770:	693b      	ldr	r3, [r7, #16]
 800f772:	3304      	adds	r3, #4
 800f774:	4619      	mov	r1, r3
 800f776:	4610      	mov	r0, r2
 800f778:	f7fe fbc7 	bl	800df0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f77c:	2301      	movs	r3, #1
 800f77e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f780:	697b      	ldr	r3, [r7, #20]
	}
 800f782:	4618      	mov	r0, r3
 800f784:	3718      	adds	r7, #24
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	24000db8 	.word	0x24000db8
 800f790:	24001294 	.word	0x24001294
 800f794:	24000dbc 	.word	0x24000dbc

0800f798 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f7a2:	4b21      	ldr	r3, [pc, #132]	; (800f828 <prvAddCurrentTaskToDelayedList+0x90>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7a8:	4b20      	ldr	r3, [pc, #128]	; (800f82c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fe fc08 	bl	800dfc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ba:	d10a      	bne.n	800f7d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7c2:	4b1a      	ldr	r3, [pc, #104]	; (800f82c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	4819      	ldr	r0, [pc, #100]	; (800f830 <prvAddCurrentTaskToDelayedList+0x98>)
 800f7cc:	f7fe fb9d 	bl	800df0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f7d0:	e026      	b.n	800f820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f7da:	4b14      	ldr	r3, [pc, #80]	; (800f82c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f7e2:	68ba      	ldr	r2, [r7, #8]
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d209      	bcs.n	800f7fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7ea:	4b12      	ldr	r3, [pc, #72]	; (800f834 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	4b0f      	ldr	r3, [pc, #60]	; (800f82c <prvAddCurrentTaskToDelayedList+0x94>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7fe fbab 	bl	800df52 <vListInsert>
}
 800f7fc:	e010      	b.n	800f820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f7fe:	4b0e      	ldr	r3, [pc, #56]	; (800f838 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f800:	681a      	ldr	r2, [r3, #0]
 800f802:	4b0a      	ldr	r3, [pc, #40]	; (800f82c <prvAddCurrentTaskToDelayedList+0x94>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3304      	adds	r3, #4
 800f808:	4619      	mov	r1, r3
 800f80a:	4610      	mov	r0, r2
 800f80c:	f7fe fba1 	bl	800df52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f810:	4b0a      	ldr	r3, [pc, #40]	; (800f83c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	68ba      	ldr	r2, [r7, #8]
 800f816:	429a      	cmp	r2, r3
 800f818:	d202      	bcs.n	800f820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f81a:	4a08      	ldr	r2, [pc, #32]	; (800f83c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	6013      	str	r3, [r2, #0]
}
 800f820:	bf00      	nop
 800f822:	3710      	adds	r7, #16
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}
 800f828:	24001290 	.word	0x24001290
 800f82c:	24000db8 	.word	0x24000db8
 800f830:	24001278 	.word	0x24001278
 800f834:	24001248 	.word	0x24001248
 800f838:	24001244 	.word	0x24001244
 800f83c:	240012ac 	.word	0x240012ac

0800f840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08a      	sub	sp, #40	; 0x28
 800f844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f846:	2300      	movs	r3, #0
 800f848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f84a:	f000 fb07 	bl	800fe5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f84e:	4b1c      	ldr	r3, [pc, #112]	; (800f8c0 <xTimerCreateTimerTask+0x80>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d021      	beq.n	800f89a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f856:	2300      	movs	r3, #0
 800f858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f85a:	2300      	movs	r3, #0
 800f85c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f85e:	1d3a      	adds	r2, r7, #4
 800f860:	f107 0108 	add.w	r1, r7, #8
 800f864:	f107 030c 	add.w	r3, r7, #12
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fe fb07 	bl	800de7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f86e:	6879      	ldr	r1, [r7, #4]
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	9202      	str	r2, [sp, #8]
 800f876:	9301      	str	r3, [sp, #4]
 800f878:	2302      	movs	r3, #2
 800f87a:	9300      	str	r3, [sp, #0]
 800f87c:	2300      	movs	r3, #0
 800f87e:	460a      	mov	r2, r1
 800f880:	4910      	ldr	r1, [pc, #64]	; (800f8c4 <xTimerCreateTimerTask+0x84>)
 800f882:	4811      	ldr	r0, [pc, #68]	; (800f8c8 <xTimerCreateTimerTask+0x88>)
 800f884:	f7ff f8b4 	bl	800e9f0 <xTaskCreateStatic>
 800f888:	4603      	mov	r3, r0
 800f88a:	4a10      	ldr	r2, [pc, #64]	; (800f8cc <xTimerCreateTimerTask+0x8c>)
 800f88c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f88e:	4b0f      	ldr	r3, [pc, #60]	; (800f8cc <xTimerCreateTimerTask+0x8c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f896:	2301      	movs	r3, #1
 800f898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10a      	bne.n	800f8b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	613b      	str	r3, [r7, #16]
}
 800f8b2:	bf00      	nop
 800f8b4:	e7fe      	b.n	800f8b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f8b6:	697b      	ldr	r3, [r7, #20]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3718      	adds	r7, #24
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	240012e8 	.word	0x240012e8
 800f8c4:	0801139c 	.word	0x0801139c
 800f8c8:	0800fa05 	.word	0x0800fa05
 800f8cc:	240012ec 	.word	0x240012ec

0800f8d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b08a      	sub	sp, #40	; 0x28
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	60f8      	str	r0, [r7, #12]
 800f8d8:	60b9      	str	r1, [r7, #8]
 800f8da:	607a      	str	r2, [r7, #4]
 800f8dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10a      	bne.n	800f8fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800f8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8ec:	f383 8811 	msr	BASEPRI, r3
 800f8f0:	f3bf 8f6f 	isb	sy
 800f8f4:	f3bf 8f4f 	dsb	sy
 800f8f8:	623b      	str	r3, [r7, #32]
}
 800f8fa:	bf00      	nop
 800f8fc:	e7fe      	b.n	800f8fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f8fe:	4b1a      	ldr	r3, [pc, #104]	; (800f968 <xTimerGenericCommand+0x98>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d02a      	beq.n	800f95c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b05      	cmp	r3, #5
 800f916:	dc18      	bgt.n	800f94a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f918:	f7ff feb2 	bl	800f680 <xTaskGetSchedulerState>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b02      	cmp	r3, #2
 800f920:	d109      	bne.n	800f936 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f922:	4b11      	ldr	r3, [pc, #68]	; (800f968 <xTimerGenericCommand+0x98>)
 800f924:	6818      	ldr	r0, [r3, #0]
 800f926:	f107 0110 	add.w	r1, r7, #16
 800f92a:	2300      	movs	r3, #0
 800f92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f92e:	f7fe fc77 	bl	800e220 <xQueueGenericSend>
 800f932:	6278      	str	r0, [r7, #36]	; 0x24
 800f934:	e012      	b.n	800f95c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f936:	4b0c      	ldr	r3, [pc, #48]	; (800f968 <xTimerGenericCommand+0x98>)
 800f938:	6818      	ldr	r0, [r3, #0]
 800f93a:	f107 0110 	add.w	r1, r7, #16
 800f93e:	2300      	movs	r3, #0
 800f940:	2200      	movs	r2, #0
 800f942:	f7fe fc6d 	bl	800e220 <xQueueGenericSend>
 800f946:	6278      	str	r0, [r7, #36]	; 0x24
 800f948:	e008      	b.n	800f95c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f94a:	4b07      	ldr	r3, [pc, #28]	; (800f968 <xTimerGenericCommand+0x98>)
 800f94c:	6818      	ldr	r0, [r3, #0]
 800f94e:	f107 0110 	add.w	r1, r7, #16
 800f952:	2300      	movs	r3, #0
 800f954:	683a      	ldr	r2, [r7, #0]
 800f956:	f7fe fd61 	bl	800e41c <xQueueGenericSendFromISR>
 800f95a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f95e:	4618      	mov	r0, r3
 800f960:	3728      	adds	r7, #40	; 0x28
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	240012e8 	.word	0x240012e8

0800f96c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b088      	sub	sp, #32
 800f970:	af02      	add	r7, sp, #8
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f976:	4b22      	ldr	r3, [pc, #136]	; (800fa00 <prvProcessExpiredTimer+0x94>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	3304      	adds	r3, #4
 800f984:	4618      	mov	r0, r3
 800f986:	f7fe fb1d 	bl	800dfc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f990:	f003 0304 	and.w	r3, r3, #4
 800f994:	2b00      	cmp	r3, #0
 800f996:	d022      	beq.n	800f9de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	699a      	ldr	r2, [r3, #24]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	18d1      	adds	r1, r2, r3
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	683a      	ldr	r2, [r7, #0]
 800f9a4:	6978      	ldr	r0, [r7, #20]
 800f9a6:	f000 f8d1 	bl	800fb4c <prvInsertTimerInActiveList>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d01f      	beq.n	800f9f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	6978      	ldr	r0, [r7, #20]
 800f9bc:	f7ff ff88 	bl	800f8d0 <xTimerGenericCommand>
 800f9c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d113      	bne.n	800f9f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9cc:	f383 8811 	msr	BASEPRI, r3
 800f9d0:	f3bf 8f6f 	isb	sy
 800f9d4:	f3bf 8f4f 	dsb	sy
 800f9d8:	60fb      	str	r3, [r7, #12]
}
 800f9da:	bf00      	nop
 800f9dc:	e7fe      	b.n	800f9dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f9e4:	f023 0301 	bic.w	r3, r3, #1
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	6a1b      	ldr	r3, [r3, #32]
 800f9f4:	6978      	ldr	r0, [r7, #20]
 800f9f6:	4798      	blx	r3
}
 800f9f8:	bf00      	nop
 800f9fa:	3718      	adds	r7, #24
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}
 800fa00:	240012e0 	.word	0x240012e0

0800fa04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa0c:	f107 0308 	add.w	r3, r7, #8
 800fa10:	4618      	mov	r0, r3
 800fa12:	f000 f857 	bl	800fac4 <prvGetNextExpireTime>
 800fa16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	68f8      	ldr	r0, [r7, #12]
 800fa1e:	f000 f803 	bl	800fa28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fa22:	f000 f8d5 	bl	800fbd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fa26:	e7f1      	b.n	800fa0c <prvTimerTask+0x8>

0800fa28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fa32:	f7ff fa39 	bl	800eea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa36:	f107 0308 	add.w	r3, r7, #8
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f000 f866 	bl	800fb0c <prvSampleTimeNow>
 800fa40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d130      	bne.n	800faaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d10a      	bne.n	800fa64 <prvProcessTimerOrBlockTask+0x3c>
 800fa4e:	687a      	ldr	r2, [r7, #4]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d806      	bhi.n	800fa64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fa56:	f7ff fa35 	bl	800eec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fa5a:	68f9      	ldr	r1, [r7, #12]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff ff85 	bl	800f96c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fa62:	e024      	b.n	800faae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d008      	beq.n	800fa7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fa6a:	4b13      	ldr	r3, [pc, #76]	; (800fab8 <prvProcessTimerOrBlockTask+0x90>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <prvProcessTimerOrBlockTask+0x50>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e000      	b.n	800fa7a <prvProcessTimerOrBlockTask+0x52>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fa7c:	4b0f      	ldr	r3, [pc, #60]	; (800fabc <prvProcessTimerOrBlockTask+0x94>)
 800fa7e:	6818      	ldr	r0, [r3, #0]
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	683a      	ldr	r2, [r7, #0]
 800fa88:	4619      	mov	r1, r3
 800fa8a:	f7fe ff7d 	bl	800e988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fa8e:	f7ff fa19 	bl	800eec4 <xTaskResumeAll>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d10a      	bne.n	800faae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fa98:	4b09      	ldr	r3, [pc, #36]	; (800fac0 <prvProcessTimerOrBlockTask+0x98>)
 800fa9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa9e:	601a      	str	r2, [r3, #0]
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	f3bf 8f6f 	isb	sy
}
 800faa8:	e001      	b.n	800faae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800faaa:	f7ff fa0b 	bl	800eec4 <xTaskResumeAll>
}
 800faae:	bf00      	nop
 800fab0:	3710      	adds	r7, #16
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	240012e4 	.word	0x240012e4
 800fabc:	240012e8 	.word	0x240012e8
 800fac0:	e000ed04 	.word	0xe000ed04

0800fac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b085      	sub	sp, #20
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800facc:	4b0e      	ldr	r3, [pc, #56]	; (800fb08 <prvGetNextExpireTime+0x44>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <prvGetNextExpireTime+0x16>
 800fad6:	2201      	movs	r2, #1
 800fad8:	e000      	b.n	800fadc <prvGetNextExpireTime+0x18>
 800fada:	2200      	movs	r2, #0
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fae8:	4b07      	ldr	r3, [pc, #28]	; (800fb08 <prvGetNextExpireTime+0x44>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	60fb      	str	r3, [r7, #12]
 800faf2:	e001      	b.n	800faf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800faf4:	2300      	movs	r3, #0
 800faf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800faf8:	68fb      	ldr	r3, [r7, #12]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3714      	adds	r7, #20
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
 800fb06:	bf00      	nop
 800fb08:	240012e0 	.word	0x240012e0

0800fb0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fb14:	f7ff fa74 	bl	800f000 <xTaskGetTickCount>
 800fb18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fb1a:	4b0b      	ldr	r3, [pc, #44]	; (800fb48 <prvSampleTimeNow+0x3c>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d205      	bcs.n	800fb30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fb24:	f000 f936 	bl	800fd94 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	601a      	str	r2, [r3, #0]
 800fb2e:	e002      	b.n	800fb36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2200      	movs	r2, #0
 800fb34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fb36:	4a04      	ldr	r2, [pc, #16]	; (800fb48 <prvSampleTimeNow+0x3c>)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
 800fb46:	bf00      	nop
 800fb48:	240012f0 	.word	0x240012f0

0800fb4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b086      	sub	sp, #24
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
 800fb58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fb6a:	68ba      	ldr	r2, [r7, #8]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d812      	bhi.n	800fb98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	1ad2      	subs	r2, r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	699b      	ldr	r3, [r3, #24]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d302      	bcc.n	800fb86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb80:	2301      	movs	r3, #1
 800fb82:	617b      	str	r3, [r7, #20]
 800fb84:	e01b      	b.n	800fbbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb86:	4b10      	ldr	r3, [pc, #64]	; (800fbc8 <prvInsertTimerInActiveList+0x7c>)
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	3304      	adds	r3, #4
 800fb8e:	4619      	mov	r1, r3
 800fb90:	4610      	mov	r0, r2
 800fb92:	f7fe f9de 	bl	800df52 <vListInsert>
 800fb96:	e012      	b.n	800fbbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d206      	bcs.n	800fbae <prvInsertTimerInActiveList+0x62>
 800fba0:	68ba      	ldr	r2, [r7, #8]
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d302      	bcc.n	800fbae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	e007      	b.n	800fbbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbae:	4b07      	ldr	r3, [pc, #28]	; (800fbcc <prvInsertTimerInActiveList+0x80>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4610      	mov	r0, r2
 800fbba:	f7fe f9ca 	bl	800df52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fbbe:	697b      	ldr	r3, [r7, #20]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	3718      	adds	r7, #24
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}
 800fbc8:	240012e4 	.word	0x240012e4
 800fbcc:	240012e0 	.word	0x240012e0

0800fbd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b08e      	sub	sp, #56	; 0x38
 800fbd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fbd6:	e0ca      	b.n	800fd6e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	da18      	bge.n	800fc10 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fbde:	1d3b      	adds	r3, r7, #4
 800fbe0:	3304      	adds	r3, #4
 800fbe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d10a      	bne.n	800fc00 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800fbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbee:	f383 8811 	msr	BASEPRI, r3
 800fbf2:	f3bf 8f6f 	isb	sy
 800fbf6:	f3bf 8f4f 	dsb	sy
 800fbfa:	61fb      	str	r3, [r7, #28]
}
 800fbfc:	bf00      	nop
 800fbfe:	e7fe      	b.n	800fbfe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc06:	6850      	ldr	r0, [r2, #4]
 800fc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc0a:	6892      	ldr	r2, [r2, #8]
 800fc0c:	4611      	mov	r1, r2
 800fc0e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f2c0 80aa 	blt.w	800fd6c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d004      	beq.n	800fc2e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc26:	3304      	adds	r3, #4
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fe f9cb 	bl	800dfc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fc2e:	463b      	mov	r3, r7
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff ff6b 	bl	800fb0c <prvSampleTimeNow>
 800fc36:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2b09      	cmp	r3, #9
 800fc3c:	f200 8097 	bhi.w	800fd6e <prvProcessReceivedCommands+0x19e>
 800fc40:	a201      	add	r2, pc, #4	; (adr r2, 800fc48 <prvProcessReceivedCommands+0x78>)
 800fc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc46:	bf00      	nop
 800fc48:	0800fc71 	.word	0x0800fc71
 800fc4c:	0800fc71 	.word	0x0800fc71
 800fc50:	0800fc71 	.word	0x0800fc71
 800fc54:	0800fce5 	.word	0x0800fce5
 800fc58:	0800fcf9 	.word	0x0800fcf9
 800fc5c:	0800fd43 	.word	0x0800fd43
 800fc60:	0800fc71 	.word	0x0800fc71
 800fc64:	0800fc71 	.word	0x0800fc71
 800fc68:	0800fce5 	.word	0x0800fce5
 800fc6c:	0800fcf9 	.word	0x0800fcf9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fc76:	f043 0301 	orr.w	r3, r3, #1
 800fc7a:	b2da      	uxtb	r2, r3
 800fc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc86:	699b      	ldr	r3, [r3, #24]
 800fc88:	18d1      	adds	r1, r2, r3
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc90:	f7ff ff5c 	bl	800fb4c <prvInsertTimerInActiveList>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d069      	beq.n	800fd6e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc9c:	6a1b      	ldr	r3, [r3, #32]
 800fc9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fca0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fca8:	f003 0304 	and.w	r3, r3, #4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d05e      	beq.n	800fd6e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	699b      	ldr	r3, [r3, #24]
 800fcb6:	441a      	add	r2, r3
 800fcb8:	2300      	movs	r3, #0
 800fcba:	9300      	str	r3, [sp, #0]
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcc2:	f7ff fe05 	bl	800f8d0 <xTimerGenericCommand>
 800fcc6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fcc8:	6a3b      	ldr	r3, [r7, #32]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d14f      	bne.n	800fd6e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800fcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd2:	f383 8811 	msr	BASEPRI, r3
 800fcd6:	f3bf 8f6f 	isb	sy
 800fcda:	f3bf 8f4f 	dsb	sy
 800fcde:	61bb      	str	r3, [r7, #24]
}
 800fce0:	bf00      	nop
 800fce2:	e7fe      	b.n	800fce2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcea:	f023 0301 	bic.w	r3, r3, #1
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fcf6:	e03a      	b.n	800fd6e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fcfe:	f043 0301 	orr.w	r3, r3, #1
 800fd02:	b2da      	uxtb	r2, r3
 800fd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fd0a:	68ba      	ldr	r2, [r7, #8]
 800fd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd0e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd12:	699b      	ldr	r3, [r3, #24]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10a      	bne.n	800fd2e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800fd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	617b      	str	r3, [r7, #20]
}
 800fd2a:	bf00      	nop
 800fd2c:	e7fe      	b.n	800fd2c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd30:	699a      	ldr	r2, [r3, #24]
 800fd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd34:	18d1      	adds	r1, r2, r3
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd3c:	f7ff ff06 	bl	800fb4c <prvInsertTimerInActiveList>
					break;
 800fd40:	e015      	b.n	800fd6e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd48:	f003 0302 	and.w	r3, r3, #2
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d103      	bne.n	800fd58 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800fd50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd52:	f000 fbdd 	bl	8010510 <vPortFree>
 800fd56:	e00a      	b.n	800fd6e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd5e:	f023 0301 	bic.w	r3, r3, #1
 800fd62:	b2da      	uxtb	r2, r3
 800fd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fd6a:	e000      	b.n	800fd6e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800fd6c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd6e:	4b08      	ldr	r3, [pc, #32]	; (800fd90 <prvProcessReceivedCommands+0x1c0>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	1d39      	adds	r1, r7, #4
 800fd74:	2200      	movs	r2, #0
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fe fbec 	bl	800e554 <xQueueReceive>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f47f af2a 	bne.w	800fbd8 <prvProcessReceivedCommands+0x8>
	}
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop
 800fd88:	3730      	adds	r7, #48	; 0x30
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	240012e8 	.word	0x240012e8

0800fd94 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fd9a:	e048      	b.n	800fe2e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd9c:	4b2d      	ldr	r3, [pc, #180]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fda6:	4b2b      	ldr	r3, [pc, #172]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	68db      	ldr	r3, [r3, #12]
 800fdae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe f905 	bl	800dfc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdc8:	f003 0304 	and.w	r3, r3, #4
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d02e      	beq.n	800fe2e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	699b      	ldr	r3, [r3, #24]
 800fdd4:	693a      	ldr	r2, [r7, #16]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d90e      	bls.n	800fe00 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	68ba      	ldr	r2, [r7, #8]
 800fde6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fdee:	4b19      	ldr	r3, [pc, #100]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	3304      	adds	r3, #4
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	4610      	mov	r0, r2
 800fdfa:	f7fe f8aa 	bl	800df52 <vListInsert>
 800fdfe:	e016      	b.n	800fe2e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe00:	2300      	movs	r3, #0
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	2300      	movs	r3, #0
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	2100      	movs	r1, #0
 800fe0a:	68f8      	ldr	r0, [r7, #12]
 800fe0c:	f7ff fd60 	bl	800f8d0 <xTimerGenericCommand>
 800fe10:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10a      	bne.n	800fe2e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800fe18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe1c:	f383 8811 	msr	BASEPRI, r3
 800fe20:	f3bf 8f6f 	isb	sy
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	603b      	str	r3, [r7, #0]
}
 800fe2a:	bf00      	nop
 800fe2c:	e7fe      	b.n	800fe2c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fe2e:	4b09      	ldr	r3, [pc, #36]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d1b1      	bne.n	800fd9c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fe38:	4b06      	ldr	r3, [pc, #24]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fe3e:	4b06      	ldr	r3, [pc, #24]	; (800fe58 <prvSwitchTimerLists+0xc4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4a04      	ldr	r2, [pc, #16]	; (800fe54 <prvSwitchTimerLists+0xc0>)
 800fe44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fe46:	4a04      	ldr	r2, [pc, #16]	; (800fe58 <prvSwitchTimerLists+0xc4>)
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	6013      	str	r3, [r2, #0]
}
 800fe4c:	bf00      	nop
 800fe4e:	3718      	adds	r7, #24
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}
 800fe54:	240012e0 	.word	0x240012e0
 800fe58:	240012e4 	.word	0x240012e4

0800fe5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fe62:	f000 f967 	bl	8010134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fe66:	4b15      	ldr	r3, [pc, #84]	; (800febc <prvCheckForValidListAndQueue+0x60>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d120      	bne.n	800feb0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fe6e:	4814      	ldr	r0, [pc, #80]	; (800fec0 <prvCheckForValidListAndQueue+0x64>)
 800fe70:	f7fe f81e 	bl	800deb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fe74:	4813      	ldr	r0, [pc, #76]	; (800fec4 <prvCheckForValidListAndQueue+0x68>)
 800fe76:	f7fe f81b 	bl	800deb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fe7a:	4b13      	ldr	r3, [pc, #76]	; (800fec8 <prvCheckForValidListAndQueue+0x6c>)
 800fe7c:	4a10      	ldr	r2, [pc, #64]	; (800fec0 <prvCheckForValidListAndQueue+0x64>)
 800fe7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fe80:	4b12      	ldr	r3, [pc, #72]	; (800fecc <prvCheckForValidListAndQueue+0x70>)
 800fe82:	4a10      	ldr	r2, [pc, #64]	; (800fec4 <prvCheckForValidListAndQueue+0x68>)
 800fe84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fe86:	2300      	movs	r3, #0
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	4b11      	ldr	r3, [pc, #68]	; (800fed0 <prvCheckForValidListAndQueue+0x74>)
 800fe8c:	4a11      	ldr	r2, [pc, #68]	; (800fed4 <prvCheckForValidListAndQueue+0x78>)
 800fe8e:	2110      	movs	r1, #16
 800fe90:	200a      	movs	r0, #10
 800fe92:	f7fe f929 	bl	800e0e8 <xQueueGenericCreateStatic>
 800fe96:	4603      	mov	r3, r0
 800fe98:	4a08      	ldr	r2, [pc, #32]	; (800febc <prvCheckForValidListAndQueue+0x60>)
 800fe9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fe9c:	4b07      	ldr	r3, [pc, #28]	; (800febc <prvCheckForValidListAndQueue+0x60>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d005      	beq.n	800feb0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <prvCheckForValidListAndQueue+0x60>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	490b      	ldr	r1, [pc, #44]	; (800fed8 <prvCheckForValidListAndQueue+0x7c>)
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fe fd42 	bl	800e934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800feb0:	f000 f970 	bl	8010194 <vPortExitCritical>
}
 800feb4:	bf00      	nop
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	240012e8 	.word	0x240012e8
 800fec0:	240012b8 	.word	0x240012b8
 800fec4:	240012cc 	.word	0x240012cc
 800fec8:	240012e0 	.word	0x240012e0
 800fecc:	240012e4 	.word	0x240012e4
 800fed0:	24001394 	.word	0x24001394
 800fed4:	240012f4 	.word	0x240012f4
 800fed8:	080113a4 	.word	0x080113a4

0800fedc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fedc:	b480      	push	{r7}
 800fede:	b085      	sub	sp, #20
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	60f8      	str	r0, [r7, #12]
 800fee4:	60b9      	str	r1, [r7, #8]
 800fee6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	3b04      	subs	r3, #4
 800feec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	3b04      	subs	r3, #4
 800fefa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	f023 0201 	bic.w	r2, r3, #1
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	3b04      	subs	r3, #4
 800ff0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff0c:	4a0c      	ldr	r2, [pc, #48]	; (800ff40 <pxPortInitialiseStack+0x64>)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	3b14      	subs	r3, #20
 800ff16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	3b04      	subs	r3, #4
 800ff22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	f06f 0202 	mvn.w	r2, #2
 800ff2a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	3b20      	subs	r3, #32
 800ff30:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff32:	68fb      	ldr	r3, [r7, #12]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3714      	adds	r7, #20
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	0800ff45 	.word	0x0800ff45

0800ff44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff4e:	4b12      	ldr	r3, [pc, #72]	; (800ff98 <prvTaskExitError+0x54>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff56:	d00a      	beq.n	800ff6e <prvTaskExitError+0x2a>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	60fb      	str	r3, [r7, #12]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <prvTaskExitError+0x28>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	60bb      	str	r3, [r7, #8]
}
 800ff80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ff82:	bf00      	nop
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d0fc      	beq.n	800ff84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ff8a:	bf00      	nop
 800ff8c:	bf00      	nop
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	2400009c 	.word	0x2400009c
 800ff9c:	00000000 	.word	0x00000000

0800ffa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ffa0:	4b07      	ldr	r3, [pc, #28]	; (800ffc0 <pxCurrentTCBConst2>)
 800ffa2:	6819      	ldr	r1, [r3, #0]
 800ffa4:	6808      	ldr	r0, [r1, #0]
 800ffa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffaa:	f380 8809 	msr	PSP, r0
 800ffae:	f3bf 8f6f 	isb	sy
 800ffb2:	f04f 0000 	mov.w	r0, #0
 800ffb6:	f380 8811 	msr	BASEPRI, r0
 800ffba:	4770      	bx	lr
 800ffbc:	f3af 8000 	nop.w

0800ffc0 <pxCurrentTCBConst2>:
 800ffc0:	24000db8 	.word	0x24000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ffc4:	bf00      	nop
 800ffc6:	bf00      	nop

0800ffc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ffc8:	4808      	ldr	r0, [pc, #32]	; (800ffec <prvPortStartFirstTask+0x24>)
 800ffca:	6800      	ldr	r0, [r0, #0]
 800ffcc:	6800      	ldr	r0, [r0, #0]
 800ffce:	f380 8808 	msr	MSP, r0
 800ffd2:	f04f 0000 	mov.w	r0, #0
 800ffd6:	f380 8814 	msr	CONTROL, r0
 800ffda:	b662      	cpsie	i
 800ffdc:	b661      	cpsie	f
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	f3bf 8f6f 	isb	sy
 800ffe6:	df00      	svc	0
 800ffe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ffea:	bf00      	nop
 800ffec:	e000ed08 	.word	0xe000ed08

0800fff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b086      	sub	sp, #24
 800fff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fff6:	4b46      	ldr	r3, [pc, #280]	; (8010110 <xPortStartScheduler+0x120>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a46      	ldr	r2, [pc, #280]	; (8010114 <xPortStartScheduler+0x124>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d10a      	bne.n	8010016 <xPortStartScheduler+0x26>
	__asm volatile
 8010000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	613b      	str	r3, [r7, #16]
}
 8010012:	bf00      	nop
 8010014:	e7fe      	b.n	8010014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010016:	4b3e      	ldr	r3, [pc, #248]	; (8010110 <xPortStartScheduler+0x120>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a3f      	ldr	r2, [pc, #252]	; (8010118 <xPortStartScheduler+0x128>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d10a      	bne.n	8010036 <xPortStartScheduler+0x46>
	__asm volatile
 8010020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	60fb      	str	r3, [r7, #12]
}
 8010032:	bf00      	nop
 8010034:	e7fe      	b.n	8010034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010036:	4b39      	ldr	r3, [pc, #228]	; (801011c <xPortStartScheduler+0x12c>)
 8010038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	b2db      	uxtb	r3, r3
 8010040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	22ff      	movs	r2, #255	; 0xff
 8010046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	b2db      	uxtb	r3, r3
 801004e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010050:	78fb      	ldrb	r3, [r7, #3]
 8010052:	b2db      	uxtb	r3, r3
 8010054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010058:	b2da      	uxtb	r2, r3
 801005a:	4b31      	ldr	r3, [pc, #196]	; (8010120 <xPortStartScheduler+0x130>)
 801005c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801005e:	4b31      	ldr	r3, [pc, #196]	; (8010124 <xPortStartScheduler+0x134>)
 8010060:	2207      	movs	r2, #7
 8010062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010064:	e009      	b.n	801007a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010066:	4b2f      	ldr	r3, [pc, #188]	; (8010124 <xPortStartScheduler+0x134>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	3b01      	subs	r3, #1
 801006c:	4a2d      	ldr	r2, [pc, #180]	; (8010124 <xPortStartScheduler+0x134>)
 801006e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010070:	78fb      	ldrb	r3, [r7, #3]
 8010072:	b2db      	uxtb	r3, r3
 8010074:	005b      	lsls	r3, r3, #1
 8010076:	b2db      	uxtb	r3, r3
 8010078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801007a:	78fb      	ldrb	r3, [r7, #3]
 801007c:	b2db      	uxtb	r3, r3
 801007e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010082:	2b80      	cmp	r3, #128	; 0x80
 8010084:	d0ef      	beq.n	8010066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010086:	4b27      	ldr	r3, [pc, #156]	; (8010124 <xPortStartScheduler+0x134>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f1c3 0307 	rsb	r3, r3, #7
 801008e:	2b04      	cmp	r3, #4
 8010090:	d00a      	beq.n	80100a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010096:	f383 8811 	msr	BASEPRI, r3
 801009a:	f3bf 8f6f 	isb	sy
 801009e:	f3bf 8f4f 	dsb	sy
 80100a2:	60bb      	str	r3, [r7, #8]
}
 80100a4:	bf00      	nop
 80100a6:	e7fe      	b.n	80100a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80100a8:	4b1e      	ldr	r3, [pc, #120]	; (8010124 <xPortStartScheduler+0x134>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	4a1d      	ldr	r2, [pc, #116]	; (8010124 <xPortStartScheduler+0x134>)
 80100b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80100b2:	4b1c      	ldr	r3, [pc, #112]	; (8010124 <xPortStartScheduler+0x134>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100ba:	4a1a      	ldr	r2, [pc, #104]	; (8010124 <xPortStartScheduler+0x134>)
 80100bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	b2da      	uxtb	r2, r3
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80100c6:	4b18      	ldr	r3, [pc, #96]	; (8010128 <xPortStartScheduler+0x138>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	4a17      	ldr	r2, [pc, #92]	; (8010128 <xPortStartScheduler+0x138>)
 80100cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80100d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80100d2:	4b15      	ldr	r3, [pc, #84]	; (8010128 <xPortStartScheduler+0x138>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a14      	ldr	r2, [pc, #80]	; (8010128 <xPortStartScheduler+0x138>)
 80100d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80100dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80100de:	f000 f8dd 	bl	801029c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80100e2:	4b12      	ldr	r3, [pc, #72]	; (801012c <xPortStartScheduler+0x13c>)
 80100e4:	2200      	movs	r2, #0
 80100e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80100e8:	f000 f8fc 	bl	80102e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80100ec:	4b10      	ldr	r3, [pc, #64]	; (8010130 <xPortStartScheduler+0x140>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a0f      	ldr	r2, [pc, #60]	; (8010130 <xPortStartScheduler+0x140>)
 80100f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80100f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80100f8:	f7ff ff66 	bl	800ffc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80100fc:	f7ff f84a 	bl	800f194 <vTaskSwitchContext>
	prvTaskExitError();
 8010100:	f7ff ff20 	bl	800ff44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3718      	adds	r7, #24
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
 801010e:	bf00      	nop
 8010110:	e000ed00 	.word	0xe000ed00
 8010114:	410fc271 	.word	0x410fc271
 8010118:	410fc270 	.word	0x410fc270
 801011c:	e000e400 	.word	0xe000e400
 8010120:	240013e4 	.word	0x240013e4
 8010124:	240013e8 	.word	0x240013e8
 8010128:	e000ed20 	.word	0xe000ed20
 801012c:	2400009c 	.word	0x2400009c
 8010130:	e000ef34 	.word	0xe000ef34

08010134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
	__asm volatile
 801013a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	607b      	str	r3, [r7, #4]
}
 801014c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801014e:	4b0f      	ldr	r3, [pc, #60]	; (801018c <vPortEnterCritical+0x58>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3301      	adds	r3, #1
 8010154:	4a0d      	ldr	r2, [pc, #52]	; (801018c <vPortEnterCritical+0x58>)
 8010156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010158:	4b0c      	ldr	r3, [pc, #48]	; (801018c <vPortEnterCritical+0x58>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b01      	cmp	r3, #1
 801015e:	d10f      	bne.n	8010180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010160:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <vPortEnterCritical+0x5c>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	b2db      	uxtb	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00a      	beq.n	8010180 <vPortEnterCritical+0x4c>
	__asm volatile
 801016a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801016e:	f383 8811 	msr	BASEPRI, r3
 8010172:	f3bf 8f6f 	isb	sy
 8010176:	f3bf 8f4f 	dsb	sy
 801017a:	603b      	str	r3, [r7, #0]
}
 801017c:	bf00      	nop
 801017e:	e7fe      	b.n	801017e <vPortEnterCritical+0x4a>
	}
}
 8010180:	bf00      	nop
 8010182:	370c      	adds	r7, #12
 8010184:	46bd      	mov	sp, r7
 8010186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018a:	4770      	bx	lr
 801018c:	2400009c 	.word	0x2400009c
 8010190:	e000ed04 	.word	0xe000ed04

08010194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801019a:	4b12      	ldr	r3, [pc, #72]	; (80101e4 <vPortExitCritical+0x50>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d10a      	bne.n	80101b8 <vPortExitCritical+0x24>
	__asm volatile
 80101a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	607b      	str	r3, [r7, #4]
}
 80101b4:	bf00      	nop
 80101b6:	e7fe      	b.n	80101b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80101b8:	4b0a      	ldr	r3, [pc, #40]	; (80101e4 <vPortExitCritical+0x50>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3b01      	subs	r3, #1
 80101be:	4a09      	ldr	r2, [pc, #36]	; (80101e4 <vPortExitCritical+0x50>)
 80101c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80101c2:	4b08      	ldr	r3, [pc, #32]	; (80101e4 <vPortExitCritical+0x50>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d105      	bne.n	80101d6 <vPortExitCritical+0x42>
 80101ca:	2300      	movs	r3, #0
 80101cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	f383 8811 	msr	BASEPRI, r3
}
 80101d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80101d6:	bf00      	nop
 80101d8:	370c      	adds	r7, #12
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr
 80101e2:	bf00      	nop
 80101e4:	2400009c 	.word	0x2400009c
	...

080101f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80101f0:	f3ef 8009 	mrs	r0, PSP
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	4b15      	ldr	r3, [pc, #84]	; (8010250 <pxCurrentTCBConst>)
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	f01e 0f10 	tst.w	lr, #16
 8010200:	bf08      	it	eq
 8010202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801020a:	6010      	str	r0, [r2, #0]
 801020c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010214:	f380 8811 	msr	BASEPRI, r0
 8010218:	f3bf 8f4f 	dsb	sy
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f7fe ffb8 	bl	800f194 <vTaskSwitchContext>
 8010224:	f04f 0000 	mov.w	r0, #0
 8010228:	f380 8811 	msr	BASEPRI, r0
 801022c:	bc09      	pop	{r0, r3}
 801022e:	6819      	ldr	r1, [r3, #0]
 8010230:	6808      	ldr	r0, [r1, #0]
 8010232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010236:	f01e 0f10 	tst.w	lr, #16
 801023a:	bf08      	it	eq
 801023c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010240:	f380 8809 	msr	PSP, r0
 8010244:	f3bf 8f6f 	isb	sy
 8010248:	4770      	bx	lr
 801024a:	bf00      	nop
 801024c:	f3af 8000 	nop.w

08010250 <pxCurrentTCBConst>:
 8010250:	24000db8 	.word	0x24000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010254:	bf00      	nop
 8010256:	bf00      	nop

08010258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
	__asm volatile
 801025e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010262:	f383 8811 	msr	BASEPRI, r3
 8010266:	f3bf 8f6f 	isb	sy
 801026a:	f3bf 8f4f 	dsb	sy
 801026e:	607b      	str	r3, [r7, #4]
}
 8010270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010272:	f7fe fed5 	bl	800f020 <xTaskIncrementTick>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d003      	beq.n	8010284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801027c:	4b06      	ldr	r3, [pc, #24]	; (8010298 <xPortSysTickHandler+0x40>)
 801027e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	2300      	movs	r3, #0
 8010286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010288:	683b      	ldr	r3, [r7, #0]
 801028a:	f383 8811 	msr	BASEPRI, r3
}
 801028e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010290:	bf00      	nop
 8010292:	3708      	adds	r7, #8
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}
 8010298:	e000ed04 	.word	0xe000ed04

0801029c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801029c:	b480      	push	{r7}
 801029e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102a0:	4b0b      	ldr	r3, [pc, #44]	; (80102d0 <vPortSetupTimerInterrupt+0x34>)
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102a6:	4b0b      	ldr	r3, [pc, #44]	; (80102d4 <vPortSetupTimerInterrupt+0x38>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102ac:	4b0a      	ldr	r3, [pc, #40]	; (80102d8 <vPortSetupTimerInterrupt+0x3c>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a0a      	ldr	r2, [pc, #40]	; (80102dc <vPortSetupTimerInterrupt+0x40>)
 80102b2:	fba2 2303 	umull	r2, r3, r2, r3
 80102b6:	099b      	lsrs	r3, r3, #6
 80102b8:	4a09      	ldr	r2, [pc, #36]	; (80102e0 <vPortSetupTimerInterrupt+0x44>)
 80102ba:	3b01      	subs	r3, #1
 80102bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80102be:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <vPortSetupTimerInterrupt+0x34>)
 80102c0:	2207      	movs	r2, #7
 80102c2:	601a      	str	r2, [r3, #0]
}
 80102c4:	bf00      	nop
 80102c6:	46bd      	mov	sp, r7
 80102c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	e000e010 	.word	0xe000e010
 80102d4:	e000e018 	.word	0xe000e018
 80102d8:	24000000 	.word	0x24000000
 80102dc:	10624dd3 	.word	0x10624dd3
 80102e0:	e000e014 	.word	0xe000e014

080102e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80102e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80102f4 <vPortEnableVFP+0x10>
 80102e8:	6801      	ldr	r1, [r0, #0]
 80102ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80102ee:	6001      	str	r1, [r0, #0]
 80102f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80102f2:	bf00      	nop
 80102f4:	e000ed88 	.word	0xe000ed88

080102f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80102fe:	f3ef 8305 	mrs	r3, IPSR
 8010302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b0f      	cmp	r3, #15
 8010308:	d914      	bls.n	8010334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801030a:	4a17      	ldr	r2, [pc, #92]	; (8010368 <vPortValidateInterruptPriority+0x70>)
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	4413      	add	r3, r2
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010314:	4b15      	ldr	r3, [pc, #84]	; (801036c <vPortValidateInterruptPriority+0x74>)
 8010316:	781b      	ldrb	r3, [r3, #0]
 8010318:	7afa      	ldrb	r2, [r7, #11]
 801031a:	429a      	cmp	r2, r3
 801031c:	d20a      	bcs.n	8010334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801031e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010322:	f383 8811 	msr	BASEPRI, r3
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	607b      	str	r3, [r7, #4]
}
 8010330:	bf00      	nop
 8010332:	e7fe      	b.n	8010332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010334:	4b0e      	ldr	r3, [pc, #56]	; (8010370 <vPortValidateInterruptPriority+0x78>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801033c:	4b0d      	ldr	r3, [pc, #52]	; (8010374 <vPortValidateInterruptPriority+0x7c>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	429a      	cmp	r2, r3
 8010342:	d90a      	bls.n	801035a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	603b      	str	r3, [r7, #0]
}
 8010356:	bf00      	nop
 8010358:	e7fe      	b.n	8010358 <vPortValidateInterruptPriority+0x60>
	}
 801035a:	bf00      	nop
 801035c:	3714      	adds	r7, #20
 801035e:	46bd      	mov	sp, r7
 8010360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010364:	4770      	bx	lr
 8010366:	bf00      	nop
 8010368:	e000e3f0 	.word	0xe000e3f0
 801036c:	240013e4 	.word	0x240013e4
 8010370:	e000ed0c 	.word	0xe000ed0c
 8010374:	240013e8 	.word	0x240013e8

08010378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b08a      	sub	sp, #40	; 0x28
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010380:	2300      	movs	r3, #0
 8010382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010384:	f7fe fd90 	bl	800eea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010388:	4b5b      	ldr	r3, [pc, #364]	; (80104f8 <pvPortMalloc+0x180>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010390:	f000 f920 	bl	80105d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010394:	4b59      	ldr	r3, [pc, #356]	; (80104fc <pvPortMalloc+0x184>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4013      	ands	r3, r2
 801039c:	2b00      	cmp	r3, #0
 801039e:	f040 8093 	bne.w	80104c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d01d      	beq.n	80103e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80103a8:	2208      	movs	r2, #8
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	4413      	add	r3, r2
 80103ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f003 0307 	and.w	r3, r3, #7
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d014      	beq.n	80103e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f023 0307 	bic.w	r3, r3, #7
 80103c0:	3308      	adds	r3, #8
 80103c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f003 0307 	and.w	r3, r3, #7
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00a      	beq.n	80103e4 <pvPortMalloc+0x6c>
	__asm volatile
 80103ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	617b      	str	r3, [r7, #20]
}
 80103e0:	bf00      	nop
 80103e2:	e7fe      	b.n	80103e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d06e      	beq.n	80104c8 <pvPortMalloc+0x150>
 80103ea:	4b45      	ldr	r3, [pc, #276]	; (8010500 <pvPortMalloc+0x188>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	687a      	ldr	r2, [r7, #4]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d869      	bhi.n	80104c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80103f4:	4b43      	ldr	r3, [pc, #268]	; (8010504 <pvPortMalloc+0x18c>)
 80103f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80103f8:	4b42      	ldr	r3, [pc, #264]	; (8010504 <pvPortMalloc+0x18c>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80103fe:	e004      	b.n	801040a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801040a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	687a      	ldr	r2, [r7, #4]
 8010410:	429a      	cmp	r2, r3
 8010412:	d903      	bls.n	801041c <pvPortMalloc+0xa4>
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d1f1      	bne.n	8010400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801041c:	4b36      	ldr	r3, [pc, #216]	; (80104f8 <pvPortMalloc+0x180>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010422:	429a      	cmp	r2, r3
 8010424:	d050      	beq.n	80104c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2208      	movs	r2, #8
 801042c:	4413      	add	r3, r2
 801042e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	6a3b      	ldr	r3, [r7, #32]
 8010436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	1ad2      	subs	r2, r2, r3
 8010440:	2308      	movs	r3, #8
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	429a      	cmp	r2, r3
 8010446:	d91f      	bls.n	8010488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	4413      	add	r3, r2
 801044e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	f003 0307 	and.w	r3, r3, #7
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00a      	beq.n	8010470 <pvPortMalloc+0xf8>
	__asm volatile
 801045a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	613b      	str	r3, [r7, #16]
}
 801046c:	bf00      	nop
 801046e:	e7fe      	b.n	801046e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	685a      	ldr	r2, [r3, #4]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	1ad2      	subs	r2, r2, r3
 8010478:	69bb      	ldr	r3, [r7, #24]
 801047a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010482:	69b8      	ldr	r0, [r7, #24]
 8010484:	f000 f908 	bl	8010698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010488:	4b1d      	ldr	r3, [pc, #116]	; (8010500 <pvPortMalloc+0x188>)
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	685b      	ldr	r3, [r3, #4]
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	4a1b      	ldr	r2, [pc, #108]	; (8010500 <pvPortMalloc+0x188>)
 8010494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010496:	4b1a      	ldr	r3, [pc, #104]	; (8010500 <pvPortMalloc+0x188>)
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	4b1b      	ldr	r3, [pc, #108]	; (8010508 <pvPortMalloc+0x190>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d203      	bcs.n	80104aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80104a2:	4b17      	ldr	r3, [pc, #92]	; (8010500 <pvPortMalloc+0x188>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a18      	ldr	r2, [pc, #96]	; (8010508 <pvPortMalloc+0x190>)
 80104a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80104aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	4b13      	ldr	r3, [pc, #76]	; (80104fc <pvPortMalloc+0x184>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	431a      	orrs	r2, r3
 80104b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80104b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ba:	2200      	movs	r2, #0
 80104bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80104be:	4b13      	ldr	r3, [pc, #76]	; (801050c <pvPortMalloc+0x194>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	3301      	adds	r3, #1
 80104c4:	4a11      	ldr	r2, [pc, #68]	; (801050c <pvPortMalloc+0x194>)
 80104c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80104c8:	f7fe fcfc 	bl	800eec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	f003 0307 	and.w	r3, r3, #7
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00a      	beq.n	80104ec <pvPortMalloc+0x174>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	60fb      	str	r3, [r7, #12]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <pvPortMalloc+0x172>
	return pvReturn;
 80104ec:	69fb      	ldr	r3, [r7, #28]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3728      	adds	r7, #40	; 0x28
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	24004ff4 	.word	0x24004ff4
 80104fc:	24005008 	.word	0x24005008
 8010500:	24004ff8 	.word	0x24004ff8
 8010504:	24004fec 	.word	0x24004fec
 8010508:	24004ffc 	.word	0x24004ffc
 801050c:	24005000 	.word	0x24005000

08010510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d04d      	beq.n	80105be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010522:	2308      	movs	r3, #8
 8010524:	425b      	negs	r3, r3
 8010526:	697a      	ldr	r2, [r7, #20]
 8010528:	4413      	add	r3, r2
 801052a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	685a      	ldr	r2, [r3, #4]
 8010534:	4b24      	ldr	r3, [pc, #144]	; (80105c8 <vPortFree+0xb8>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4013      	ands	r3, r2
 801053a:	2b00      	cmp	r3, #0
 801053c:	d10a      	bne.n	8010554 <vPortFree+0x44>
	__asm volatile
 801053e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010542:	f383 8811 	msr	BASEPRI, r3
 8010546:	f3bf 8f6f 	isb	sy
 801054a:	f3bf 8f4f 	dsb	sy
 801054e:	60fb      	str	r3, [r7, #12]
}
 8010550:	bf00      	nop
 8010552:	e7fe      	b.n	8010552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00a      	beq.n	8010572 <vPortFree+0x62>
	__asm volatile
 801055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	60bb      	str	r3, [r7, #8]
}
 801056e:	bf00      	nop
 8010570:	e7fe      	b.n	8010570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	685a      	ldr	r2, [r3, #4]
 8010576:	4b14      	ldr	r3, [pc, #80]	; (80105c8 <vPortFree+0xb8>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4013      	ands	r3, r2
 801057c:	2b00      	cmp	r3, #0
 801057e:	d01e      	beq.n	80105be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d11a      	bne.n	80105be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	4b0e      	ldr	r3, [pc, #56]	; (80105c8 <vPortFree+0xb8>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	43db      	mvns	r3, r3
 8010592:	401a      	ands	r2, r3
 8010594:	693b      	ldr	r3, [r7, #16]
 8010596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010598:	f7fe fc86 	bl	800eea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	685a      	ldr	r2, [r3, #4]
 80105a0:	4b0a      	ldr	r3, [pc, #40]	; (80105cc <vPortFree+0xbc>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	4413      	add	r3, r2
 80105a6:	4a09      	ldr	r2, [pc, #36]	; (80105cc <vPortFree+0xbc>)
 80105a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80105aa:	6938      	ldr	r0, [r7, #16]
 80105ac:	f000 f874 	bl	8010698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80105b0:	4b07      	ldr	r3, [pc, #28]	; (80105d0 <vPortFree+0xc0>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	3301      	adds	r3, #1
 80105b6:	4a06      	ldr	r2, [pc, #24]	; (80105d0 <vPortFree+0xc0>)
 80105b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80105ba:	f7fe fc83 	bl	800eec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80105be:	bf00      	nop
 80105c0:	3718      	adds	r7, #24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	24005008 	.word	0x24005008
 80105cc:	24004ff8 	.word	0x24004ff8
 80105d0:	24005004 	.word	0x24005004

080105d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80105da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80105de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80105e0:	4b27      	ldr	r3, [pc, #156]	; (8010680 <prvHeapInit+0xac>)
 80105e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f003 0307 	and.w	r3, r3, #7
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00c      	beq.n	8010608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	3307      	adds	r3, #7
 80105f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	f023 0307 	bic.w	r3, r3, #7
 80105fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80105fc:	68ba      	ldr	r2, [r7, #8]
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	4a1f      	ldr	r2, [pc, #124]	; (8010680 <prvHeapInit+0xac>)
 8010604:	4413      	add	r3, r2
 8010606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801060c:	4a1d      	ldr	r2, [pc, #116]	; (8010684 <prvHeapInit+0xb0>)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010612:	4b1c      	ldr	r3, [pc, #112]	; (8010684 <prvHeapInit+0xb0>)
 8010614:	2200      	movs	r2, #0
 8010616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	4413      	add	r3, r2
 801061e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010620:	2208      	movs	r2, #8
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	1a9b      	subs	r3, r3, r2
 8010626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	f023 0307 	bic.w	r3, r3, #7
 801062e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	4a15      	ldr	r2, [pc, #84]	; (8010688 <prvHeapInit+0xb4>)
 8010634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010636:	4b14      	ldr	r3, [pc, #80]	; (8010688 <prvHeapInit+0xb4>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	2200      	movs	r2, #0
 801063c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801063e:	4b12      	ldr	r3, [pc, #72]	; (8010688 <prvHeapInit+0xb4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2200      	movs	r2, #0
 8010644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801064a:	683b      	ldr	r3, [r7, #0]
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	1ad2      	subs	r2, r2, r3
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010654:	4b0c      	ldr	r3, [pc, #48]	; (8010688 <prvHeapInit+0xb4>)
 8010656:	681a      	ldr	r2, [r3, #0]
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	4a0a      	ldr	r2, [pc, #40]	; (801068c <prvHeapInit+0xb8>)
 8010662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	4a09      	ldr	r2, [pc, #36]	; (8010690 <prvHeapInit+0xbc>)
 801066a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801066c:	4b09      	ldr	r3, [pc, #36]	; (8010694 <prvHeapInit+0xc0>)
 801066e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010672:	601a      	str	r2, [r3, #0]
}
 8010674:	bf00      	nop
 8010676:	3714      	adds	r7, #20
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr
 8010680:	240013ec 	.word	0x240013ec
 8010684:	24004fec 	.word	0x24004fec
 8010688:	24004ff4 	.word	0x24004ff4
 801068c:	24004ffc 	.word	0x24004ffc
 8010690:	24004ff8 	.word	0x24004ff8
 8010694:	24005008 	.word	0x24005008

08010698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106a0:	4b28      	ldr	r3, [pc, #160]	; (8010744 <prvInsertBlockIntoFreeList+0xac>)
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	e002      	b.n	80106ac <prvInsertBlockIntoFreeList+0x14>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	60fb      	str	r3, [r7, #12]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d8f7      	bhi.n	80106a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	68ba      	ldr	r2, [r7, #8]
 80106c0:	4413      	add	r3, r2
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d108      	bne.n	80106da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	685a      	ldr	r2, [r3, #4]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	441a      	add	r2, r3
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	68ba      	ldr	r2, [r7, #8]
 80106e4:	441a      	add	r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d118      	bne.n	8010720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	4b15      	ldr	r3, [pc, #84]	; (8010748 <prvInsertBlockIntoFreeList+0xb0>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d00d      	beq.n	8010716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	685a      	ldr	r2, [r3, #4]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	685b      	ldr	r3, [r3, #4]
 8010704:	441a      	add	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	601a      	str	r2, [r3, #0]
 8010714:	e008      	b.n	8010728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <prvInsertBlockIntoFreeList+0xb0>)
 8010718:	681a      	ldr	r2, [r3, #0]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	601a      	str	r2, [r3, #0]
 801071e:	e003      	b.n	8010728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681a      	ldr	r2, [r3, #0]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010728:	68fa      	ldr	r2, [r7, #12]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	429a      	cmp	r2, r3
 801072e:	d002      	beq.n	8010736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	687a      	ldr	r2, [r7, #4]
 8010734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010736:	bf00      	nop
 8010738:	3714      	adds	r7, #20
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	24004fec 	.word	0x24004fec
 8010748:	24004ff4 	.word	0x24004ff4

0801074c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010750:	2201      	movs	r2, #1
 8010752:	4913      	ldr	r1, [pc, #76]	; (80107a0 <MX_USB_DEVICE_Init+0x54>)
 8010754:	4813      	ldr	r0, [pc, #76]	; (80107a4 <MX_USB_DEVICE_Init+0x58>)
 8010756:	f7fb ff43 	bl	800c5e0 <USBD_Init>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d001      	beq.n	8010764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010760:	f7f0 fbfc 	bl	8000f5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8010764:	4910      	ldr	r1, [pc, #64]	; (80107a8 <MX_USB_DEVICE_Init+0x5c>)
 8010766:	480f      	ldr	r0, [pc, #60]	; (80107a4 <MX_USB_DEVICE_Init+0x58>)
 8010768:	f7fb ff6a 	bl	800c640 <USBD_RegisterClass>
 801076c:	4603      	mov	r3, r0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d001      	beq.n	8010776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010772:	f7f0 fbf3 	bl	8000f5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8010776:	490d      	ldr	r1, [pc, #52]	; (80107ac <MX_USB_DEVICE_Init+0x60>)
 8010778:	480a      	ldr	r0, [pc, #40]	; (80107a4 <MX_USB_DEVICE_Init+0x58>)
 801077a:	f7fb fea1 	bl	800c4c0 <USBD_CDC_RegisterInterface>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d001      	beq.n	8010788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010784:	f7f0 fbea 	bl	8000f5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010788:	4806      	ldr	r0, [pc, #24]	; (80107a4 <MX_USB_DEVICE_Init+0x58>)
 801078a:	f7fb ff8f 	bl	800c6ac <USBD_Start>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d001      	beq.n	8010798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010794:	f7f0 fbe2 	bl	8000f5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8010798:	f7f5 fa06 	bl	8005ba8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801079c:	bf00      	nop
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	240000b4 	.word	0x240000b4
 80107a4:	2400500c 	.word	0x2400500c
 80107a8:	2400001c 	.word	0x2400001c
 80107ac:	240000a0 	.word	0x240000a0

080107b0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80107b4:	2200      	movs	r2, #0
 80107b6:	4905      	ldr	r1, [pc, #20]	; (80107cc <CDC_Init_HS+0x1c>)
 80107b8:	4805      	ldr	r0, [pc, #20]	; (80107d0 <CDC_Init_HS+0x20>)
 80107ba:	f7fb fe9b 	bl	800c4f4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80107be:	4905      	ldr	r1, [pc, #20]	; (80107d4 <CDC_Init_HS+0x24>)
 80107c0:	4803      	ldr	r0, [pc, #12]	; (80107d0 <CDC_Init_HS+0x20>)
 80107c2:	f7fb feb9 	bl	800c538 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80107c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	24005ae8 	.word	0x24005ae8
 80107d0:	2400500c 	.word	0x2400500c
 80107d4:	240052e8 	.word	0x240052e8

080107d8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80107d8:	b480      	push	{r7}
 80107da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80107dc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80107de:	4618      	mov	r0, r3
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	4603      	mov	r3, r0
 80107f0:	6039      	str	r1, [r7, #0]
 80107f2:	71fb      	strb	r3, [r7, #7]
 80107f4:	4613      	mov	r3, r2
 80107f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80107f8:	79fb      	ldrb	r3, [r7, #7]
 80107fa:	2b23      	cmp	r3, #35	; 0x23
 80107fc:	d84a      	bhi.n	8010894 <CDC_Control_HS+0xac>
 80107fe:	a201      	add	r2, pc, #4	; (adr r2, 8010804 <CDC_Control_HS+0x1c>)
 8010800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010804:	08010895 	.word	0x08010895
 8010808:	08010895 	.word	0x08010895
 801080c:	08010895 	.word	0x08010895
 8010810:	08010895 	.word	0x08010895
 8010814:	08010895 	.word	0x08010895
 8010818:	08010895 	.word	0x08010895
 801081c:	08010895 	.word	0x08010895
 8010820:	08010895 	.word	0x08010895
 8010824:	08010895 	.word	0x08010895
 8010828:	08010895 	.word	0x08010895
 801082c:	08010895 	.word	0x08010895
 8010830:	08010895 	.word	0x08010895
 8010834:	08010895 	.word	0x08010895
 8010838:	08010895 	.word	0x08010895
 801083c:	08010895 	.word	0x08010895
 8010840:	08010895 	.word	0x08010895
 8010844:	08010895 	.word	0x08010895
 8010848:	08010895 	.word	0x08010895
 801084c:	08010895 	.word	0x08010895
 8010850:	08010895 	.word	0x08010895
 8010854:	08010895 	.word	0x08010895
 8010858:	08010895 	.word	0x08010895
 801085c:	08010895 	.word	0x08010895
 8010860:	08010895 	.word	0x08010895
 8010864:	08010895 	.word	0x08010895
 8010868:	08010895 	.word	0x08010895
 801086c:	08010895 	.word	0x08010895
 8010870:	08010895 	.word	0x08010895
 8010874:	08010895 	.word	0x08010895
 8010878:	08010895 	.word	0x08010895
 801087c:	08010895 	.word	0x08010895
 8010880:	08010895 	.word	0x08010895
 8010884:	08010895 	.word	0x08010895
 8010888:	08010895 	.word	0x08010895
 801088c:	08010895 	.word	0x08010895
 8010890:	08010895 	.word	0x08010895
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010894:	bf00      	nop
  }

  return (USBD_OK);
 8010896:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010898:	4618      	mov	r0, r3
 801089a:	370c      	adds	r7, #12
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr

080108a4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b082      	sub	sp, #8
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80108ae:	6879      	ldr	r1, [r7, #4]
 80108b0:	4805      	ldr	r0, [pc, #20]	; (80108c8 <CDC_Receive_HS+0x24>)
 80108b2:	f7fb fe41 	bl	800c538 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80108b6:	4804      	ldr	r0, [pc, #16]	; (80108c8 <CDC_Receive_HS+0x24>)
 80108b8:	f7fb fe5c 	bl	800c574 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80108bc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3708      	adds	r7, #8
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	2400500c 	.word	0x2400500c

080108cc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b087      	sub	sp, #28
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	4613      	mov	r3, r2
 80108d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80108da:	2300      	movs	r3, #0
 80108dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80108de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	371c      	adds	r7, #28
 80108e6:	46bd      	mov	sp, r7
 80108e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ec:	4770      	bx	lr
	...

080108f0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80108f0:	b480      	push	{r7}
 80108f2:	b083      	sub	sp, #12
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	4603      	mov	r3, r0
 80108f8:	6039      	str	r1, [r7, #0]
 80108fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2212      	movs	r2, #18
 8010900:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010902:	4b03      	ldr	r3, [pc, #12]	; (8010910 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010904:	4618      	mov	r0, r3
 8010906:	370c      	adds	r7, #12
 8010908:	46bd      	mov	sp, r7
 801090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090e:	4770      	bx	lr
 8010910:	240000d0 	.word	0x240000d0

08010914 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	4603      	mov	r3, r0
 801091c:	6039      	str	r1, [r7, #0]
 801091e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	2204      	movs	r2, #4
 8010924:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010926:	4b03      	ldr	r3, [pc, #12]	; (8010934 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010928:	4618      	mov	r0, r3
 801092a:	370c      	adds	r7, #12
 801092c:	46bd      	mov	sp, r7
 801092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010932:	4770      	bx	lr
 8010934:	240000e4 	.word	0x240000e4

08010938 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	4603      	mov	r3, r0
 8010940:	6039      	str	r1, [r7, #0]
 8010942:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010944:	79fb      	ldrb	r3, [r7, #7]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d105      	bne.n	8010956 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801094a:	683a      	ldr	r2, [r7, #0]
 801094c:	4907      	ldr	r1, [pc, #28]	; (801096c <USBD_HS_ProductStrDescriptor+0x34>)
 801094e:	4808      	ldr	r0, [pc, #32]	; (8010970 <USBD_HS_ProductStrDescriptor+0x38>)
 8010950:	f7fd f85e 	bl	800da10 <USBD_GetString>
 8010954:	e004      	b.n	8010960 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010956:	683a      	ldr	r2, [r7, #0]
 8010958:	4904      	ldr	r1, [pc, #16]	; (801096c <USBD_HS_ProductStrDescriptor+0x34>)
 801095a:	4805      	ldr	r0, [pc, #20]	; (8010970 <USBD_HS_ProductStrDescriptor+0x38>)
 801095c:	f7fd f858 	bl	800da10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010960:	4b02      	ldr	r3, [pc, #8]	; (801096c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010962:	4618      	mov	r0, r3
 8010964:	3708      	adds	r7, #8
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	240062e8 	.word	0x240062e8
 8010970:	080113ac 	.word	0x080113ac

08010974 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	6039      	str	r1, [r7, #0]
 801097e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010980:	683a      	ldr	r2, [r7, #0]
 8010982:	4904      	ldr	r1, [pc, #16]	; (8010994 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010984:	4804      	ldr	r0, [pc, #16]	; (8010998 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010986:	f7fd f843 	bl	800da10 <USBD_GetString>
  return USBD_StrDesc;
 801098a:	4b02      	ldr	r3, [pc, #8]	; (8010994 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801098c:	4618      	mov	r0, r3
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	240062e8 	.word	0x240062e8
 8010998:	080113c4 	.word	0x080113c4

0801099c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b082      	sub	sp, #8
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	4603      	mov	r3, r0
 80109a4:	6039      	str	r1, [r7, #0]
 80109a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	221a      	movs	r2, #26
 80109ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80109ae:	f000 f843 	bl	8010a38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80109b2:	4b02      	ldr	r3, [pc, #8]	; (80109bc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	240000e8 	.word	0x240000e8

080109c0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	4603      	mov	r3, r0
 80109c8:	6039      	str	r1, [r7, #0]
 80109ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80109cc:	79fb      	ldrb	r3, [r7, #7]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d105      	bne.n	80109de <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80109d2:	683a      	ldr	r2, [r7, #0]
 80109d4:	4907      	ldr	r1, [pc, #28]	; (80109f4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80109d6:	4808      	ldr	r0, [pc, #32]	; (80109f8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80109d8:	f7fd f81a 	bl	800da10 <USBD_GetString>
 80109dc:	e004      	b.n	80109e8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80109de:	683a      	ldr	r2, [r7, #0]
 80109e0:	4904      	ldr	r1, [pc, #16]	; (80109f4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80109e2:	4805      	ldr	r0, [pc, #20]	; (80109f8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80109e4:	f7fd f814 	bl	800da10 <USBD_GetString>
  }
  return USBD_StrDesc;
 80109e8:	4b02      	ldr	r3, [pc, #8]	; (80109f4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
 80109f2:	bf00      	nop
 80109f4:	240062e8 	.word	0x240062e8
 80109f8:	080113d8 	.word	0x080113d8

080109fc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	4603      	mov	r3, r0
 8010a04:	6039      	str	r1, [r7, #0]
 8010a06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010a08:	79fb      	ldrb	r3, [r7, #7]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d105      	bne.n	8010a1a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010a0e:	683a      	ldr	r2, [r7, #0]
 8010a10:	4907      	ldr	r1, [pc, #28]	; (8010a30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010a12:	4808      	ldr	r0, [pc, #32]	; (8010a34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010a14:	f7fc fffc 	bl	800da10 <USBD_GetString>
 8010a18:	e004      	b.n	8010a24 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	4904      	ldr	r1, [pc, #16]	; (8010a30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010a1e:	4805      	ldr	r0, [pc, #20]	; (8010a34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010a20:	f7fc fff6 	bl	800da10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010a24:	4b02      	ldr	r3, [pc, #8]	; (8010a30 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3708      	adds	r7, #8
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	bf00      	nop
 8010a30:	240062e8 	.word	0x240062e8
 8010a34:	080113e4 	.word	0x080113e4

08010a38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b084      	sub	sp, #16
 8010a3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010a3e:	4b0f      	ldr	r3, [pc, #60]	; (8010a7c <Get_SerialNum+0x44>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010a44:	4b0e      	ldr	r3, [pc, #56]	; (8010a80 <Get_SerialNum+0x48>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010a4a:	4b0e      	ldr	r3, [pc, #56]	; (8010a84 <Get_SerialNum+0x4c>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	4413      	add	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d009      	beq.n	8010a72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010a5e:	2208      	movs	r2, #8
 8010a60:	4909      	ldr	r1, [pc, #36]	; (8010a88 <Get_SerialNum+0x50>)
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f000 f814 	bl	8010a90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010a68:	2204      	movs	r2, #4
 8010a6a:	4908      	ldr	r1, [pc, #32]	; (8010a8c <Get_SerialNum+0x54>)
 8010a6c:	68b8      	ldr	r0, [r7, #8]
 8010a6e:	f000 f80f 	bl	8010a90 <IntToUnicode>
  }
}
 8010a72:	bf00      	nop
 8010a74:	3710      	adds	r7, #16
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	1ff1e800 	.word	0x1ff1e800
 8010a80:	1ff1e804 	.word	0x1ff1e804
 8010a84:	1ff1e808 	.word	0x1ff1e808
 8010a88:	240000ea 	.word	0x240000ea
 8010a8c:	240000fa 	.word	0x240000fa

08010a90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b087      	sub	sp, #28
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	60f8      	str	r0, [r7, #12]
 8010a98:	60b9      	str	r1, [r7, #8]
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	75fb      	strb	r3, [r7, #23]
 8010aa6:	e027      	b.n	8010af8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	0f1b      	lsrs	r3, r3, #28
 8010aac:	2b09      	cmp	r3, #9
 8010aae:	d80b      	bhi.n	8010ac8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	0f1b      	lsrs	r3, r3, #28
 8010ab4:	b2da      	uxtb	r2, r3
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	4619      	mov	r1, r3
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	440b      	add	r3, r1
 8010ac0:	3230      	adds	r2, #48	; 0x30
 8010ac2:	b2d2      	uxtb	r2, r2
 8010ac4:	701a      	strb	r2, [r3, #0]
 8010ac6:	e00a      	b.n	8010ade <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	0f1b      	lsrs	r3, r3, #28
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	7dfb      	ldrb	r3, [r7, #23]
 8010ad0:	005b      	lsls	r3, r3, #1
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	440b      	add	r3, r1
 8010ad8:	3237      	adds	r2, #55	; 0x37
 8010ada:	b2d2      	uxtb	r2, r2
 8010adc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ae4:	7dfb      	ldrb	r3, [r7, #23]
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	3301      	adds	r3, #1
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	4413      	add	r3, r2
 8010aee:	2200      	movs	r2, #0
 8010af0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010af2:	7dfb      	ldrb	r3, [r7, #23]
 8010af4:	3301      	adds	r3, #1
 8010af6:	75fb      	strb	r3, [r7, #23]
 8010af8:	7dfa      	ldrb	r2, [r7, #23]
 8010afa:	79fb      	ldrb	r3, [r7, #7]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d3d3      	bcc.n	8010aa8 <IntToUnicode+0x18>
  }
}
 8010b00:	bf00      	nop
 8010b02:	bf00      	nop
 8010b04:	371c      	adds	r7, #28
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
	...

08010b10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b0b2      	sub	sp, #200	; 0xc8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010b18:	f107 0310 	add.w	r3, r7, #16
 8010b1c:	22b8      	movs	r2, #184	; 0xb8
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 fb35 	bl	8011190 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	4a1a      	ldr	r2, [pc, #104]	; (8010b94 <HAL_PCD_MspInit+0x84>)
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d12c      	bne.n	8010b8a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010b34:	f04f 0300 	mov.w	r3, #0
 8010b38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8010b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010b44:	f107 0310 	add.w	r3, r7, #16
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7f5 ffcf 	bl	8006aec <HAL_RCCEx_PeriphCLKConfig>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d001      	beq.n	8010b58 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8010b54:	f7f0 fa02 	bl	8000f5c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8010b58:	f7f5 f826 	bl	8005ba8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010b5c:	4b0e      	ldr	r3, [pc, #56]	; (8010b98 <HAL_PCD_MspInit+0x88>)
 8010b5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b62:	4a0d      	ldr	r2, [pc, #52]	; (8010b98 <HAL_PCD_MspInit+0x88>)
 8010b64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010b68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	; (8010b98 <HAL_PCD_MspInit+0x88>)
 8010b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8010b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b76:	60fb      	str	r3, [r7, #12]
 8010b78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	2105      	movs	r1, #5
 8010b7e:	204d      	movs	r0, #77	; 0x4d
 8010b80:	f7f2 fc42 	bl	8003408 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8010b84:	204d      	movs	r0, #77	; 0x4d
 8010b86:	f7f2 fc59 	bl	800343c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8010b8a:	bf00      	nop
 8010b8c:	37c8      	adds	r7, #200	; 0xc8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	40040000 	.word	0x40040000
 8010b98:	58024400 	.word	0x58024400

08010b9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	4610      	mov	r0, r2
 8010bb4:	f7fb fdc7 	bl	800c746 <USBD_LL_SetupStage>
}
 8010bb8:	bf00      	nop
 8010bba:	3708      	adds	r7, #8
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010bd2:	78fa      	ldrb	r2, [r7, #3]
 8010bd4:	6879      	ldr	r1, [r7, #4]
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	4413      	add	r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	440b      	add	r3, r1
 8010be0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	78fb      	ldrb	r3, [r7, #3]
 8010be8:	4619      	mov	r1, r3
 8010bea:	f7fb fe01 	bl	800c7f0 <USBD_LL_DataOutStage>
}
 8010bee:	bf00      	nop
 8010bf0:	3708      	adds	r7, #8
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
 8010bfe:	460b      	mov	r3, r1
 8010c00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8010c08:	78fa      	ldrb	r2, [r7, #3]
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	00db      	lsls	r3, r3, #3
 8010c10:	4413      	add	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	440b      	add	r3, r1
 8010c16:	3348      	adds	r3, #72	; 0x48
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	f7fb fe9a 	bl	800c956 <USBD_LL_DataInStage>
}
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b082      	sub	sp, #8
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7fb ffd4 	bl	800cbe6 <USBD_LL_SOF>
}
 8010c3e:	bf00      	nop
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c46:	b580      	push	{r7, lr}
 8010c48:	b084      	sub	sp, #16
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	691b      	ldr	r3, [r3, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d102      	bne.n	8010c60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]
 8010c5e:	e008      	b.n	8010c72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	2b02      	cmp	r3, #2
 8010c66:	d102      	bne.n	8010c6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	73fb      	strb	r3, [r7, #15]
 8010c6c:	e001      	b.n	8010c72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8010c6e:	f7f0 f975 	bl	8000f5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c78:	7bfa      	ldrb	r2, [r7, #15]
 8010c7a:	4611      	mov	r1, r2
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fb ff6e 	bl	800cb5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fb ff16 	bl	800caba <USBD_LL_Reset>
}
 8010c8e:	bf00      	nop
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
	...

08010c98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fb ff69 	bl	800cb7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	687a      	ldr	r2, [r7, #4]
 8010cb8:	6812      	ldr	r2, [r2, #0]
 8010cba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010cbe:	f043 0301 	orr.w	r3, r3, #1
 8010cc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a1b      	ldr	r3, [r3, #32]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d005      	beq.n	8010cd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ccc:	4b04      	ldr	r3, [pc, #16]	; (8010ce0 <HAL_PCD_SuspendCallback+0x48>)
 8010cce:	691b      	ldr	r3, [r3, #16]
 8010cd0:	4a03      	ldr	r2, [pc, #12]	; (8010ce0 <HAL_PCD_SuspendCallback+0x48>)
 8010cd2:	f043 0306 	orr.w	r3, r3, #6
 8010cd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010cd8:	bf00      	nop
 8010cda:	3708      	adds	r7, #8
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	e000ed00 	.word	0xe000ed00

08010ce4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fb ff5f 	bl	800cbb6 <USBD_LL_Resume>
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b082      	sub	sp, #8
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d12:	78fa      	ldrb	r2, [r7, #3]
 8010d14:	4611      	mov	r1, r2
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7fb ffb7 	bl	800cc8a <USBD_LL_IsoOUTIncomplete>
}
 8010d1c:	bf00      	nop
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d36:	78fa      	ldrb	r2, [r7, #3]
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7fb ff73 	bl	800cc26 <USBD_LL_IsoINIncomplete>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}

08010d48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fb ffc9 	bl	800ccee <USBD_LL_DevConnected>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7fb ffc6 	bl	800cd04 <USBD_LL_DevDisconnected>
}
 8010d78:	bf00      	nop
 8010d7a:	3708      	adds	r7, #8
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd80      	pop	{r7, pc}

08010d80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d140      	bne.n	8010e12 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010d90:	4a22      	ldr	r2, [pc, #136]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a20      	ldr	r2, [pc, #128]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010d9c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010da0:	4b1e      	ldr	r3, [pc, #120]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010da2:	4a1f      	ldr	r2, [pc, #124]	; (8010e20 <USBD_LL_Init+0xa0>)
 8010da4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8010da6:	4b1d      	ldr	r3, [pc, #116]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010da8:	2209      	movs	r2, #9
 8010daa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8010dac:	4b1b      	ldr	r3, [pc, #108]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dae:	2202      	movs	r2, #2
 8010db0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010db2:	4b1a      	ldr	r3, [pc, #104]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010db8:	4b18      	ldr	r3, [pc, #96]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dba:	2202      	movs	r2, #2
 8010dbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010dbe:	4b17      	ldr	r3, [pc, #92]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010dc4:	4b15      	ldr	r3, [pc, #84]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8010dca:	4b14      	ldr	r3, [pc, #80]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dcc:	2200      	movs	r2, #0
 8010dce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8010dd0:	4b12      	ldr	r3, [pc, #72]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8010dd6:	4b11      	ldr	r3, [pc, #68]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010ddc:	4b0f      	ldr	r3, [pc, #60]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010dde:	2200      	movs	r2, #0
 8010de0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010de2:	480e      	ldr	r0, [pc, #56]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010de4:	f7f3 fbed 	bl	80045c2 <HAL_PCD_Init>
 8010de8:	4603      	mov	r3, r0
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d001      	beq.n	8010df2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010dee:	f7f0 f8b5 	bl	8000f5c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010df2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010df6:	4809      	ldr	r0, [pc, #36]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010df8:	f7f4 fe5b 	bl	8005ab2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010dfc:	2280      	movs	r2, #128	; 0x80
 8010dfe:	2100      	movs	r1, #0
 8010e00:	4806      	ldr	r0, [pc, #24]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010e02:	f7f4 fe0f 	bl	8005a24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010e06:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8010e0a:	2101      	movs	r1, #1
 8010e0c:	4803      	ldr	r0, [pc, #12]	; (8010e1c <USBD_LL_Init+0x9c>)
 8010e0e:	f7f4 fe09 	bl	8005a24 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	240064e8 	.word	0x240064e8
 8010e20:	40040000 	.word	0x40040000

08010e24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e30:	2300      	movs	r3, #0
 8010e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7f3 fce5 	bl	800480a <HAL_PCD_Start>
 8010e40:	4603      	mov	r3, r0
 8010e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e44:	7bfb      	ldrb	r3, [r7, #15]
 8010e46:	4618      	mov	r0, r3
 8010e48:	f000 f942 	bl	80110d0 <USBD_Get_USB_Status>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3710      	adds	r7, #16
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}

08010e5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010e5a:	b580      	push	{r7, lr}
 8010e5c:	b084      	sub	sp, #16
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	4608      	mov	r0, r1
 8010e64:	4611      	mov	r1, r2
 8010e66:	461a      	mov	r2, r3
 8010e68:	4603      	mov	r3, r0
 8010e6a:	70fb      	strb	r3, [r7, #3]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	70bb      	strb	r3, [r7, #2]
 8010e70:	4613      	mov	r3, r2
 8010e72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e74:	2300      	movs	r3, #0
 8010e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8010e82:	78bb      	ldrb	r3, [r7, #2]
 8010e84:	883a      	ldrh	r2, [r7, #0]
 8010e86:	78f9      	ldrb	r1, [r7, #3]
 8010e88:	f7f4 f9e5 	bl	8005256 <HAL_PCD_EP_Open>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f000 f91c 	bl	80110d0 <USBD_Get_USB_Status>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}

08010ea6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ea6:	b580      	push	{r7, lr}
 8010ea8:	b084      	sub	sp, #16
 8010eaa:	af00      	add	r7, sp, #0
 8010eac:	6078      	str	r0, [r7, #4]
 8010eae:	460b      	mov	r3, r1
 8010eb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010ec0:	78fa      	ldrb	r2, [r7, #3]
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f4 fa2e 	bl	8005326 <HAL_PCD_EP_Close>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f000 f8fd 	bl	80110d0 <USBD_Get_USB_Status>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3710      	adds	r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b084      	sub	sp, #16
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	460b      	mov	r3, r1
 8010eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010efe:	78fa      	ldrb	r2, [r7, #3]
 8010f00:	4611      	mov	r1, r2
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7f4 fae8 	bl	80054d8 <HAL_PCD_EP_SetStall>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f0c:	7bfb      	ldrb	r3, [r7, #15]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f000 f8de 	bl	80110d0 <USBD_Get_USB_Status>
 8010f14:	4603      	mov	r3, r0
 8010f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3710      	adds	r7, #16
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}

08010f22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f22:	b580      	push	{r7, lr}
 8010f24:	b084      	sub	sp, #16
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f32:	2300      	movs	r3, #0
 8010f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f3c:	78fa      	ldrb	r2, [r7, #3]
 8010f3e:	4611      	mov	r1, r2
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7f4 fb2d 	bl	80055a0 <HAL_PCD_EP_ClrStall>
 8010f46:	4603      	mov	r3, r0
 8010f48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010f4a:	7bfb      	ldrb	r3, [r7, #15]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f000 f8bf 	bl	80110d0 <USBD_Get_USB_Status>
 8010f52:	4603      	mov	r3, r0
 8010f54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	3710      	adds	r7, #16
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd80      	pop	{r7, pc}

08010f60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	460b      	mov	r3, r1
 8010f6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010f72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	da0b      	bge.n	8010f94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010f7c:	78fb      	ldrb	r3, [r7, #3]
 8010f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f82:	68f9      	ldr	r1, [r7, #12]
 8010f84:	4613      	mov	r3, r2
 8010f86:	00db      	lsls	r3, r3, #3
 8010f88:	4413      	add	r3, r2
 8010f8a:	009b      	lsls	r3, r3, #2
 8010f8c:	440b      	add	r3, r1
 8010f8e:	333e      	adds	r3, #62	; 0x3e
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	e00b      	b.n	8010fac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010f94:	78fb      	ldrb	r3, [r7, #3]
 8010f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010f9a:	68f9      	ldr	r1, [r7, #12]
 8010f9c:	4613      	mov	r3, r2
 8010f9e:	00db      	lsls	r3, r3, #3
 8010fa0:	4413      	add	r3, r2
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	440b      	add	r3, r1
 8010fa6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8010faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3714      	adds	r7, #20
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb6:	4770      	bx	lr

08010fb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	460b      	mov	r3, r1
 8010fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fd2:	78fa      	ldrb	r2, [r7, #3]
 8010fd4:	4611      	mov	r1, r2
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7f4 f918 	bl	800520c <HAL_PCD_SetAddress>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010fe0:	7bfb      	ldrb	r3, [r7, #15]
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f000 f874 	bl	80110d0 <USBD_Get_USB_Status>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b086      	sub	sp, #24
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	60f8      	str	r0, [r7, #12]
 8010ffe:	607a      	str	r2, [r7, #4]
 8011000:	603b      	str	r3, [r7, #0]
 8011002:	460b      	mov	r3, r1
 8011004:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011006:	2300      	movs	r3, #0
 8011008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011014:	7af9      	ldrb	r1, [r7, #11]
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	687a      	ldr	r2, [r7, #4]
 801101a:	f7f4 fa22 	bl	8005462 <HAL_PCD_EP_Transmit>
 801101e:	4603      	mov	r3, r0
 8011020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011022:	7dfb      	ldrb	r3, [r7, #23]
 8011024:	4618      	mov	r0, r3
 8011026:	f000 f853 	bl	80110d0 <USBD_Get_USB_Status>
 801102a:	4603      	mov	r3, r0
 801102c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801102e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011030:	4618      	mov	r0, r3
 8011032:	3718      	adds	r7, #24
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}

08011038 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af00      	add	r7, sp, #0
 801103e:	60f8      	str	r0, [r7, #12]
 8011040:	607a      	str	r2, [r7, #4]
 8011042:	603b      	str	r3, [r7, #0]
 8011044:	460b      	mov	r3, r1
 8011046:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011056:	7af9      	ldrb	r1, [r7, #11]
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	687a      	ldr	r2, [r7, #4]
 801105c:	f7f4 f9ad 	bl	80053ba <HAL_PCD_EP_Receive>
 8011060:	4603      	mov	r3, r0
 8011062:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011064:	7dfb      	ldrb	r3, [r7, #23]
 8011066:	4618      	mov	r0, r3
 8011068:	f000 f832 	bl	80110d0 <USBD_Get_USB_Status>
 801106c:	4603      	mov	r3, r0
 801106e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011070:	7dbb      	ldrb	r3, [r7, #22]
}
 8011072:	4618      	mov	r0, r3
 8011074:	3718      	adds	r7, #24
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b082      	sub	sp, #8
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	460b      	mov	r3, r1
 8011084:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801108c:	78fa      	ldrb	r2, [r7, #3]
 801108e:	4611      	mov	r1, r2
 8011090:	4618      	mov	r0, r3
 8011092:	f7f4 f9ce 	bl	8005432 <HAL_PCD_EP_GetRxCount>
 8011096:	4603      	mov	r3, r0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3708      	adds	r7, #8
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}

080110a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80110a0:	b480      	push	{r7}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80110a8:	4b03      	ldr	r3, [pc, #12]	; (80110b8 <USBD_static_malloc+0x18>)
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	370c      	adds	r7, #12
 80110ae:	46bd      	mov	sp, r7
 80110b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b4:	4770      	bx	lr
 80110b6:	bf00      	nop
 80110b8:	240069f4 	.word	0x240069f4

080110bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80110bc:	b480      	push	{r7}
 80110be:	b083      	sub	sp, #12
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80110c4:	bf00      	nop
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80110da:	2300      	movs	r3, #0
 80110dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	2b03      	cmp	r3, #3
 80110e2:	d817      	bhi.n	8011114 <USBD_Get_USB_Status+0x44>
 80110e4:	a201      	add	r2, pc, #4	; (adr r2, 80110ec <USBD_Get_USB_Status+0x1c>)
 80110e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110ea:	bf00      	nop
 80110ec:	080110fd 	.word	0x080110fd
 80110f0:	08011103 	.word	0x08011103
 80110f4:	08011109 	.word	0x08011109
 80110f8:	0801110f 	.word	0x0801110f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80110fc:	2300      	movs	r3, #0
 80110fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011100:	e00b      	b.n	801111a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011102:	2303      	movs	r3, #3
 8011104:	73fb      	strb	r3, [r7, #15]
    break;
 8011106:	e008      	b.n	801111a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011108:	2301      	movs	r3, #1
 801110a:	73fb      	strb	r3, [r7, #15]
    break;
 801110c:	e005      	b.n	801111a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801110e:	2303      	movs	r3, #3
 8011110:	73fb      	strb	r3, [r7, #15]
    break;
 8011112:	e002      	b.n	801111a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011114:	2303      	movs	r3, #3
 8011116:	73fb      	strb	r3, [r7, #15]
    break;
 8011118:	bf00      	nop
  }
  return usb_status;
 801111a:	7bfb      	ldrb	r3, [r7, #15]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <__libc_init_array>:
 8011128:	b570      	push	{r4, r5, r6, lr}
 801112a:	4d0d      	ldr	r5, [pc, #52]	; (8011160 <__libc_init_array+0x38>)
 801112c:	4c0d      	ldr	r4, [pc, #52]	; (8011164 <__libc_init_array+0x3c>)
 801112e:	1b64      	subs	r4, r4, r5
 8011130:	10a4      	asrs	r4, r4, #2
 8011132:	2600      	movs	r6, #0
 8011134:	42a6      	cmp	r6, r4
 8011136:	d109      	bne.n	801114c <__libc_init_array+0x24>
 8011138:	4d0b      	ldr	r5, [pc, #44]	; (8011168 <__libc_init_array+0x40>)
 801113a:	4c0c      	ldr	r4, [pc, #48]	; (801116c <__libc_init_array+0x44>)
 801113c:	f000 f8f2 	bl	8011324 <_init>
 8011140:	1b64      	subs	r4, r4, r5
 8011142:	10a4      	asrs	r4, r4, #2
 8011144:	2600      	movs	r6, #0
 8011146:	42a6      	cmp	r6, r4
 8011148:	d105      	bne.n	8011156 <__libc_init_array+0x2e>
 801114a:	bd70      	pop	{r4, r5, r6, pc}
 801114c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011150:	4798      	blx	r3
 8011152:	3601      	adds	r6, #1
 8011154:	e7ee      	b.n	8011134 <__libc_init_array+0xc>
 8011156:	f855 3b04 	ldr.w	r3, [r5], #4
 801115a:	4798      	blx	r3
 801115c:	3601      	adds	r6, #1
 801115e:	e7f2      	b.n	8011146 <__libc_init_array+0x1e>
 8011160:	08011488 	.word	0x08011488
 8011164:	08011488 	.word	0x08011488
 8011168:	08011488 	.word	0x08011488
 801116c:	0801148c 	.word	0x0801148c

08011170 <__retarget_lock_acquire_recursive>:
 8011170:	4770      	bx	lr

08011172 <__retarget_lock_release_recursive>:
 8011172:	4770      	bx	lr

08011174 <memcpy>:
 8011174:	440a      	add	r2, r1
 8011176:	4291      	cmp	r1, r2
 8011178:	f100 33ff 	add.w	r3, r0, #4294967295
 801117c:	d100      	bne.n	8011180 <memcpy+0xc>
 801117e:	4770      	bx	lr
 8011180:	b510      	push	{r4, lr}
 8011182:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011186:	f803 4f01 	strb.w	r4, [r3, #1]!
 801118a:	4291      	cmp	r1, r2
 801118c:	d1f9      	bne.n	8011182 <memcpy+0xe>
 801118e:	bd10      	pop	{r4, pc}

08011190 <memset>:
 8011190:	4402      	add	r2, r0
 8011192:	4603      	mov	r3, r0
 8011194:	4293      	cmp	r3, r2
 8011196:	d100      	bne.n	801119a <memset+0xa>
 8011198:	4770      	bx	lr
 801119a:	f803 1b01 	strb.w	r1, [r3], #1
 801119e:	e7f9      	b.n	8011194 <memset+0x4>

080111a0 <cleanup_glue>:
 80111a0:	b538      	push	{r3, r4, r5, lr}
 80111a2:	460c      	mov	r4, r1
 80111a4:	6809      	ldr	r1, [r1, #0]
 80111a6:	4605      	mov	r5, r0
 80111a8:	b109      	cbz	r1, 80111ae <cleanup_glue+0xe>
 80111aa:	f7ff fff9 	bl	80111a0 <cleanup_glue>
 80111ae:	4621      	mov	r1, r4
 80111b0:	4628      	mov	r0, r5
 80111b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80111b6:	f000 b869 	b.w	801128c <_free_r>
	...

080111bc <_reclaim_reent>:
 80111bc:	4b2c      	ldr	r3, [pc, #176]	; (8011270 <_reclaim_reent+0xb4>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4283      	cmp	r3, r0
 80111c2:	b570      	push	{r4, r5, r6, lr}
 80111c4:	4604      	mov	r4, r0
 80111c6:	d051      	beq.n	801126c <_reclaim_reent+0xb0>
 80111c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80111ca:	b143      	cbz	r3, 80111de <_reclaim_reent+0x22>
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d14a      	bne.n	8011268 <_reclaim_reent+0xac>
 80111d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111d4:	6819      	ldr	r1, [r3, #0]
 80111d6:	b111      	cbz	r1, 80111de <_reclaim_reent+0x22>
 80111d8:	4620      	mov	r0, r4
 80111da:	f000 f857 	bl	801128c <_free_r>
 80111de:	6961      	ldr	r1, [r4, #20]
 80111e0:	b111      	cbz	r1, 80111e8 <_reclaim_reent+0x2c>
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 f852 	bl	801128c <_free_r>
 80111e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80111ea:	b111      	cbz	r1, 80111f2 <_reclaim_reent+0x36>
 80111ec:	4620      	mov	r0, r4
 80111ee:	f000 f84d 	bl	801128c <_free_r>
 80111f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80111f4:	b111      	cbz	r1, 80111fc <_reclaim_reent+0x40>
 80111f6:	4620      	mov	r0, r4
 80111f8:	f000 f848 	bl	801128c <_free_r>
 80111fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80111fe:	b111      	cbz	r1, 8011206 <_reclaim_reent+0x4a>
 8011200:	4620      	mov	r0, r4
 8011202:	f000 f843 	bl	801128c <_free_r>
 8011206:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011208:	b111      	cbz	r1, 8011210 <_reclaim_reent+0x54>
 801120a:	4620      	mov	r0, r4
 801120c:	f000 f83e 	bl	801128c <_free_r>
 8011210:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011212:	b111      	cbz	r1, 801121a <_reclaim_reent+0x5e>
 8011214:	4620      	mov	r0, r4
 8011216:	f000 f839 	bl	801128c <_free_r>
 801121a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801121c:	b111      	cbz	r1, 8011224 <_reclaim_reent+0x68>
 801121e:	4620      	mov	r0, r4
 8011220:	f000 f834 	bl	801128c <_free_r>
 8011224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011226:	b111      	cbz	r1, 801122e <_reclaim_reent+0x72>
 8011228:	4620      	mov	r0, r4
 801122a:	f000 f82f 	bl	801128c <_free_r>
 801122e:	69a3      	ldr	r3, [r4, #24]
 8011230:	b1e3      	cbz	r3, 801126c <_reclaim_reent+0xb0>
 8011232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011234:	4620      	mov	r0, r4
 8011236:	4798      	blx	r3
 8011238:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801123a:	b1b9      	cbz	r1, 801126c <_reclaim_reent+0xb0>
 801123c:	4620      	mov	r0, r4
 801123e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011242:	f7ff bfad 	b.w	80111a0 <cleanup_glue>
 8011246:	5949      	ldr	r1, [r1, r5]
 8011248:	b941      	cbnz	r1, 801125c <_reclaim_reent+0xa0>
 801124a:	3504      	adds	r5, #4
 801124c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801124e:	2d80      	cmp	r5, #128	; 0x80
 8011250:	68d9      	ldr	r1, [r3, #12]
 8011252:	d1f8      	bne.n	8011246 <_reclaim_reent+0x8a>
 8011254:	4620      	mov	r0, r4
 8011256:	f000 f819 	bl	801128c <_free_r>
 801125a:	e7ba      	b.n	80111d2 <_reclaim_reent+0x16>
 801125c:	680e      	ldr	r6, [r1, #0]
 801125e:	4620      	mov	r0, r4
 8011260:	f000 f814 	bl	801128c <_free_r>
 8011264:	4631      	mov	r1, r6
 8011266:	e7ef      	b.n	8011248 <_reclaim_reent+0x8c>
 8011268:	2500      	movs	r5, #0
 801126a:	e7ef      	b.n	801124c <_reclaim_reent+0x90>
 801126c:	bd70      	pop	{r4, r5, r6, pc}
 801126e:	bf00      	nop
 8011270:	24000104 	.word	0x24000104

08011274 <__malloc_lock>:
 8011274:	4801      	ldr	r0, [pc, #4]	; (801127c <__malloc_lock+0x8>)
 8011276:	f7ff bf7b 	b.w	8011170 <__retarget_lock_acquire_recursive>
 801127a:	bf00      	nop
 801127c:	24006c14 	.word	0x24006c14

08011280 <__malloc_unlock>:
 8011280:	4801      	ldr	r0, [pc, #4]	; (8011288 <__malloc_unlock+0x8>)
 8011282:	f7ff bf76 	b.w	8011172 <__retarget_lock_release_recursive>
 8011286:	bf00      	nop
 8011288:	24006c14 	.word	0x24006c14

0801128c <_free_r>:
 801128c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801128e:	2900      	cmp	r1, #0
 8011290:	d044      	beq.n	801131c <_free_r+0x90>
 8011292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011296:	9001      	str	r0, [sp, #4]
 8011298:	2b00      	cmp	r3, #0
 801129a:	f1a1 0404 	sub.w	r4, r1, #4
 801129e:	bfb8      	it	lt
 80112a0:	18e4      	addlt	r4, r4, r3
 80112a2:	f7ff ffe7 	bl	8011274 <__malloc_lock>
 80112a6:	4a1e      	ldr	r2, [pc, #120]	; (8011320 <_free_r+0x94>)
 80112a8:	9801      	ldr	r0, [sp, #4]
 80112aa:	6813      	ldr	r3, [r2, #0]
 80112ac:	b933      	cbnz	r3, 80112bc <_free_r+0x30>
 80112ae:	6063      	str	r3, [r4, #4]
 80112b0:	6014      	str	r4, [r2, #0]
 80112b2:	b003      	add	sp, #12
 80112b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80112b8:	f7ff bfe2 	b.w	8011280 <__malloc_unlock>
 80112bc:	42a3      	cmp	r3, r4
 80112be:	d908      	bls.n	80112d2 <_free_r+0x46>
 80112c0:	6825      	ldr	r5, [r4, #0]
 80112c2:	1961      	adds	r1, r4, r5
 80112c4:	428b      	cmp	r3, r1
 80112c6:	bf01      	itttt	eq
 80112c8:	6819      	ldreq	r1, [r3, #0]
 80112ca:	685b      	ldreq	r3, [r3, #4]
 80112cc:	1949      	addeq	r1, r1, r5
 80112ce:	6021      	streq	r1, [r4, #0]
 80112d0:	e7ed      	b.n	80112ae <_free_r+0x22>
 80112d2:	461a      	mov	r2, r3
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	b10b      	cbz	r3, 80112dc <_free_r+0x50>
 80112d8:	42a3      	cmp	r3, r4
 80112da:	d9fa      	bls.n	80112d2 <_free_r+0x46>
 80112dc:	6811      	ldr	r1, [r2, #0]
 80112de:	1855      	adds	r5, r2, r1
 80112e0:	42a5      	cmp	r5, r4
 80112e2:	d10b      	bne.n	80112fc <_free_r+0x70>
 80112e4:	6824      	ldr	r4, [r4, #0]
 80112e6:	4421      	add	r1, r4
 80112e8:	1854      	adds	r4, r2, r1
 80112ea:	42a3      	cmp	r3, r4
 80112ec:	6011      	str	r1, [r2, #0]
 80112ee:	d1e0      	bne.n	80112b2 <_free_r+0x26>
 80112f0:	681c      	ldr	r4, [r3, #0]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	6053      	str	r3, [r2, #4]
 80112f6:	4421      	add	r1, r4
 80112f8:	6011      	str	r1, [r2, #0]
 80112fa:	e7da      	b.n	80112b2 <_free_r+0x26>
 80112fc:	d902      	bls.n	8011304 <_free_r+0x78>
 80112fe:	230c      	movs	r3, #12
 8011300:	6003      	str	r3, [r0, #0]
 8011302:	e7d6      	b.n	80112b2 <_free_r+0x26>
 8011304:	6825      	ldr	r5, [r4, #0]
 8011306:	1961      	adds	r1, r4, r5
 8011308:	428b      	cmp	r3, r1
 801130a:	bf04      	itt	eq
 801130c:	6819      	ldreq	r1, [r3, #0]
 801130e:	685b      	ldreq	r3, [r3, #4]
 8011310:	6063      	str	r3, [r4, #4]
 8011312:	bf04      	itt	eq
 8011314:	1949      	addeq	r1, r1, r5
 8011316:	6021      	streq	r1, [r4, #0]
 8011318:	6054      	str	r4, [r2, #4]
 801131a:	e7ca      	b.n	80112b2 <_free_r+0x26>
 801131c:	b003      	add	sp, #12
 801131e:	bd30      	pop	{r4, r5, pc}
 8011320:	24006c18 	.word	0x24006c18

08011324 <_init>:
 8011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011326:	bf00      	nop
 8011328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801132a:	bc08      	pop	{r3}
 801132c:	469e      	mov	lr, r3
 801132e:	4770      	bx	lr

08011330 <_fini>:
 8011330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011332:	bf00      	nop
 8011334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011336:	bc08      	pop	{r3}
 8011338:	469e      	mov	lr, r3
 801133a:	4770      	bx	lr
