
STM32H723_Nucleo_ETH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eda8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a68  0800f078  0800f078  0001f078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011ae0  08011ae0  00021ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011ae4  08011ae4  00021ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000094  24000000  08011ae8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00014ff0  24000094  08011b7c  00030094  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24015084  08011b7c  00035084  2**0
                  ALLOC
  8 .lwip_sec     00000160  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00048893  00000000  00000000  000300c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00009b3a  00000000  00000000  00078955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f20  00000000  00000000  00082490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000051c8  00000000  00000000  000843b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00042e5c  00000000  00000000  00089578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000479d8  00000000  00000000  000cc3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a8c0  00000000  00000000  00113dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027e66c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000071e8  00000000  00000000  0027e6bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0002cce9  00000000  00000000  002858a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000094 	.word	0x24000094
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f060 	.word	0x0800f060

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000098 	.word	0x24000098
 800030c:	0800f060 	.word	0x0800f060

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* ETH_CODE: add breakpoint when stack oveflow is detected by FreeRTOS.
	* Useful for debugging issues.
	*/
   __BKPT(0);
 80003b0:	be00      	bkpt	0x0000
}
 80003b2:	4770      	bx	lr

080003b4 <lwiperf_tcp_close>:
static void
lwiperf_list_remove(lwiperf_state_base_t *item)
{
  lwiperf_state_base_t *prev = NULL;
  lwiperf_state_base_t *iter;
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003b4:	4a3f      	ldr	r2, [pc, #252]	; (80004b4 <lwiperf_tcp_close+0x100>)
 80003b6:	6813      	ldr	r3, [r2, #0]
}

/** Close an iperf tcp session */
static void
lwiperf_tcp_close(lwiperf_state_tcp_t *conn, enum lwiperf_report_type report_type)
{
 80003b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80003bc:	4604      	mov	r4, r0
 80003be:	b087      	sub	sp, #28
 80003c0:	460e      	mov	r6, r1
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003c2:	b143      	cbz	r3, 80003d6 <lwiperf_tcp_close+0x22>
    if (iter == item) {
 80003c4:	4298      	cmp	r0, r3
 80003c6:	d102      	bne.n	80003ce <lwiperf_tcp_close+0x1a>
 80003c8:	e070      	b.n	80004ac <lwiperf_tcp_close+0xf8>
 80003ca:	429c      	cmp	r4, r3
 80003cc:	d048      	beq.n	8000460 <lwiperf_tcp_close+0xac>
  for (iter = lwiperf_all_connections; iter != NULL; prev = iter, iter = iter->next) {
 80003ce:	461a      	mov	r2, r3
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d1f9      	bne.n	80003ca <lwiperf_tcp_close+0x16>
  if ((conn != NULL) && (conn->report_fn != NULL)) {
 80003d6:	b1cc      	cbz	r4, 800040c <lwiperf_tcp_close+0x58>
 80003d8:	69a3      	ldr	r3, [r4, #24]
 80003da:	b1bb      	cbz	r3, 800040c <lwiperf_tcp_close+0x58>
    now = sys_now();
 80003dc:	f003 fbee 	bl	8003bbc <sys_now>
    duration_ms = now - conn->time_started;
 80003e0:	6965      	ldr	r5, [r4, #20]
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003e2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    if (duration_ms == 0) {
 80003e6:	1b45      	subs	r5, r0, r5
 80003e8:	d05e      	beq.n	80004a8 <lwiperf_tcp_close+0xf4>
      bandwidth_kbitpsec = (conn->bytes_transferred / duration_ms) * 8U;
 80003ea:	fbbc f7f5 	udiv	r7, ip, r5
 80003ee:	00ff      	lsls	r7, r7, #3
                    &conn->conn_pcb->local_ip, conn->conn_pcb->local_port,
 80003f0:	6922      	ldr	r2, [r4, #16]
    conn->report_fn(conn->report_arg, report_type,
 80003f2:	4631      	mov	r1, r6
 80003f4:	8ad3      	ldrh	r3, [r2, #22]
 80003f6:	e9d4 6006 	ldrd	r6, r0, [r4, #24]
 80003fa:	e9cd 5703 	strd	r5, r7, [sp, #12]
 80003fe:	f8cd c008 	str.w	ip, [sp, #8]
 8000402:	8b15      	ldrh	r5, [r2, #24]
 8000404:	9501      	str	r5, [sp, #4]
                    &conn->conn_pcb->remote_ip, conn->conn_pcb->remote_port,
 8000406:	1d15      	adds	r5, r2, #4
    conn->report_fn(conn->report_arg, report_type,
 8000408:	9500      	str	r5, [sp, #0]
 800040a:	47b0      	blx	r6
  err_t err;

  lwiperf_list_remove(&conn->base);
  lwip_tcp_conn_report(conn, report_type);
  if (conn->conn_pcb != NULL) {
 800040c:	6920      	ldr	r0, [r4, #16]
 800040e:	2800      	cmp	r0, #0
 8000410:	d03d      	beq.n	800048e <lwiperf_tcp_close+0xda>
    tcp_arg(conn->conn_pcb, NULL);
 8000412:	2100      	movs	r1, #0
 8000414:	f007 fff6 	bl	8008404 <tcp_arg>
    tcp_poll(conn->conn_pcb, NULL, 0);
 8000418:	2200      	movs	r2, #0
 800041a:	6920      	ldr	r0, [r4, #16]
 800041c:	4611      	mov	r1, r2
 800041e:	f008 f853 	bl	80084c8 <tcp_poll>
    tcp_sent(conn->conn_pcb, NULL);
 8000422:	2100      	movs	r1, #0
 8000424:	6920      	ldr	r0, [r4, #16]
 8000426:	f008 f80f 	bl	8008448 <tcp_sent>
    tcp_recv(conn->conn_pcb, NULL);
 800042a:	2100      	movs	r1, #0
 800042c:	6920      	ldr	r0, [r4, #16]
 800042e:	f007 fff1 	bl	8008414 <tcp_recv>
    tcp_err(conn->conn_pcb, NULL);
 8000432:	6920      	ldr	r0, [r4, #16]
 8000434:	2100      	movs	r1, #0
 8000436:	f008 f821 	bl	800847c <tcp_err>
    err = tcp_close(conn->conn_pcb);
 800043a:	6920      	ldr	r0, [r4, #16]
 800043c:	f008 fe9a 	bl	8009174 <tcp_close>
    if (err != ERR_OK) {
 8000440:	b928      	cbnz	r0, 800044e <lwiperf_tcp_close+0x9a>
  } else {
    /* no conn pcb, this is the listener pcb */
    err = tcp_close(conn->server_pcb);
    LWIP_ASSERT("error", err == ERR_OK);
  }
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000442:	4620      	mov	r0, r4
}
 8000444:	b007      	add	sp, #28
 8000446:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800044a:	f006 bb41 	b.w	8006ad0 <mem_free>
      tcp_abort(conn->conn_pcb);
 800044e:	6920      	ldr	r0, [r4, #16]
 8000450:	f008 fcaa 	bl	8008da8 <tcp_abort>
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 8000454:	4620      	mov	r0, r4
}
 8000456:	b007      	add	sp, #28
 8000458:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIPERF_FREE(lwiperf_state_tcp_t, conn);
 800045c:	f006 bb38 	b.w	8006ad0 <mem_free>
        prev->next = iter->next;
 8000460:	6823      	ldr	r3, [r4, #0]
 8000462:	6013      	str	r3, [r2, #0]
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000464:	6825      	ldr	r5, [r4, #0]
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0b5      	beq.n	80003d6 <lwiperf_tcp_close+0x22>
        LWIP_ASSERT("duplicate entry", iter != item);
 800046a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80004bc <lwiperf_tcp_close+0x108>
 800046e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80004c4 <lwiperf_tcp_close+0x110>
 8000472:	4f11      	ldr	r7, [pc, #68]	; (80004b8 <lwiperf_tcp_close+0x104>)
 8000474:	e002      	b.n	800047c <lwiperf_tcp_close+0xc8>
      for (iter = iter->next; iter != NULL; iter = iter->next) {
 8000476:	682d      	ldr	r5, [r5, #0]
 8000478:	2d00      	cmp	r5, #0
 800047a:	d0ac      	beq.n	80003d6 <lwiperf_tcp_close+0x22>
        LWIP_ASSERT("duplicate entry", iter != item);
 800047c:	42ac      	cmp	r4, r5
 800047e:	d1fa      	bne.n	8000476 <lwiperf_tcp_close+0xc2>
 8000480:	464b      	mov	r3, r9
 8000482:	22d0      	movs	r2, #208	; 0xd0
 8000484:	4641      	mov	r1, r8
 8000486:	4638      	mov	r0, r7
 8000488:	f00d febe 	bl	800e208 <iprintf>
 800048c:	e7f3      	b.n	8000476 <lwiperf_tcp_close+0xc2>
    err = tcp_close(conn->server_pcb);
 800048e:	68e0      	ldr	r0, [r4, #12]
 8000490:	f008 fe70 	bl	8009174 <tcp_close>
    LWIP_ASSERT("error", err == ERR_OK);
 8000494:	2800      	cmp	r0, #0
 8000496:	d0d4      	beq.n	8000442 <lwiperf_tcp_close+0x8e>
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <lwiperf_tcp_close+0x108>)
 800049a:	f240 120d 	movw	r2, #269	; 0x10d
 800049e:	4908      	ldr	r1, [pc, #32]	; (80004c0 <lwiperf_tcp_close+0x10c>)
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <lwiperf_tcp_close+0x104>)
 80004a2:	f00d feb1 	bl	800e208 <iprintf>
 80004a6:	e7cc      	b.n	8000442 <lwiperf_tcp_close+0x8e>
      bandwidth_kbitpsec = 0;
 80004a8:	462f      	mov	r7, r5
 80004aa:	e7a1      	b.n	80003f0 <lwiperf_tcp_close+0x3c>
        lwiperf_all_connections = iter->next;
 80004ac:	6805      	ldr	r5, [r0, #0]
 80004ae:	6015      	str	r5, [r2, #0]
 80004b0:	e7d9      	b.n	8000466 <lwiperf_tcp_close+0xb2>
 80004b2:	bf00      	nop
 80004b4:	240000b0 	.word	0x240000b0
 80004b8:	0800f0a0 	.word	0x0800f0a0
 80004bc:	0800f078 	.word	0x0800f078
 80004c0:	0800f0c8 	.word	0x0800f0c8
 80004c4:	0800f090 	.word	0x0800f090

080004c8 <lwiperf_tcp_accept>:
/** This is called when a new client connects for an iperf tcp session */
static err_t
lwiperf_tcp_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  lwiperf_state_tcp_t *s, *conn;
  if ((err != ERR_OK) || (newpcb == NULL) || (arg == NULL)) {
 80004c8:	2800      	cmp	r0, #0
 80004ca:	bf18      	it	ne
 80004cc:	2900      	cmpne	r1, #0
 80004ce:	f000 8092 	beq.w	80005f6 <lwiperf_tcp_accept+0x12e>
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	f040 808f 	bne.w	80005f6 <lwiperf_tcp_accept+0x12e>
{
 80004d8:	b570      	push	{r4, r5, r6, lr}
    return ERR_VAL;
  }

  s = (lwiperf_state_tcp_t *)arg;
  LWIP_ASSERT("invalid session", s->base.server);
 80004da:	7943      	ldrb	r3, [r0, #5]
 80004dc:	460e      	mov	r6, r1
 80004de:	4604      	mov	r4, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d06b      	beq.n	80005bc <lwiperf_tcp_accept+0xf4>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80004e4:	68e3      	ldr	r3, [r4, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d072      	beq.n	80005d0 <lwiperf_tcp_accept+0x108>
  LWIP_ASSERT("invalid conn pcb", s->conn_pcb == NULL);
 80004ea:	6923      	ldr	r3, [r4, #16]
 80004ec:	b133      	cbz	r3, 80004fc <lwiperf_tcp_accept+0x34>
 80004ee:	4b43      	ldr	r3, [pc, #268]	; (80005fc <lwiperf_tcp_accept+0x134>)
 80004f0:	f240 225a 	movw	r2, #602	; 0x25a
 80004f4:	4942      	ldr	r1, [pc, #264]	; (8000600 <lwiperf_tcp_accept+0x138>)
 80004f6:	4843      	ldr	r0, [pc, #268]	; (8000604 <lwiperf_tcp_accept+0x13c>)
 80004f8:	f00d fe86 	bl	800e208 <iprintf>
  if (s->specific_remote) {
 80004fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000500:	2b00      	cmp	r3, #0
 8000502:	d138      	bne.n	8000576 <lwiperf_tcp_accept+0xae>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
      /* this listener belongs to a client session, and this is not the correct remote */
      return ERR_VAL;
    }
  } else {
    LWIP_ASSERT("s->base.related_master_state == NULL", s->base.related_master_state == NULL);
 8000504:	68a3      	ldr	r3, [r4, #8]
 8000506:	b133      	cbz	r3, 8000516 <lwiperf_tcp_accept+0x4e>
 8000508:	4b3c      	ldr	r3, [pc, #240]	; (80005fc <lwiperf_tcp_accept+0x134>)
 800050a:	f240 2262 	movw	r2, #610	; 0x262
 800050e:	493e      	ldr	r1, [pc, #248]	; (8000608 <lwiperf_tcp_accept+0x140>)
 8000510:	483c      	ldr	r0, [pc, #240]	; (8000604 <lwiperf_tcp_accept+0x13c>)
 8000512:	f00d fe79 	bl	800e208 <iprintf>
  }

  conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000516:	2048      	movs	r0, #72	; 0x48
 8000518:	f006 fc88 	bl	8006e2c <mem_malloc>
  if (conn == NULL) {
 800051c:	4605      	mov	r5, r0
 800051e:	2800      	cmp	r0, #0
 8000520:	d066      	beq.n	80005f0 <lwiperf_tcp_accept+0x128>
    return ERR_MEM;
  }
  memset(conn, 0, sizeof(lwiperf_state_tcp_t));
 8000522:	2248      	movs	r2, #72	; 0x48
 8000524:	2100      	movs	r1, #0
 8000526:	f00d fdd2 	bl	800e0ce <memset>
  conn->base.tcp = 1;
 800052a:	f240 1301 	movw	r3, #257	; 0x101
  conn->base.server = 1;
  conn->base.related_master_state = &s->base;
 800052e:	60ac      	str	r4, [r5, #8]
  conn->base.tcp = 1;
 8000530:	80ab      	strh	r3, [r5, #4]
  conn->conn_pcb = newpcb;
 8000532:	612e      	str	r6, [r5, #16]
  conn->time_started = sys_now();
 8000534:	f003 fb42 	bl	8003bbc <sys_now>
  conn->report_fn = s->report_fn;
 8000538:	69a3      	ldr	r3, [r4, #24]
  conn->report_arg = s->report_arg;

  /* setup the tcp rx connection */
  tcp_arg(newpcb, conn);
 800053a:	4629      	mov	r1, r5
  conn->report_fn = s->report_fn;
 800053c:	e9c5 0305 	strd	r0, r3, [r5, #20]
  conn->report_arg = s->report_arg;
 8000540:	69e3      	ldr	r3, [r4, #28]
  tcp_arg(newpcb, conn);
 8000542:	4630      	mov	r0, r6
  conn->report_arg = s->report_arg;
 8000544:	61eb      	str	r3, [r5, #28]
  tcp_arg(newpcb, conn);
 8000546:	f007 ff5d 	bl	8008404 <tcp_arg>
  tcp_recv(newpcb, lwiperf_tcp_recv);
 800054a:	4930      	ldr	r1, [pc, #192]	; (800060c <lwiperf_tcp_accept+0x144>)
 800054c:	4630      	mov	r0, r6
 800054e:	f007 ff61 	bl	8008414 <tcp_recv>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000552:	2202      	movs	r2, #2
 8000554:	492e      	ldr	r1, [pc, #184]	; (8000610 <lwiperf_tcp_accept+0x148>)
 8000556:	4630      	mov	r0, r6
 8000558:	f007 ffb6 	bl	80084c8 <tcp_poll>
  tcp_err(conn->conn_pcb, lwiperf_tcp_err);
 800055c:	492d      	ldr	r1, [pc, #180]	; (8000614 <lwiperf_tcp_accept+0x14c>)
 800055e:	6928      	ldr	r0, [r5, #16]
 8000560:	f007 ff8c 	bl	800847c <tcp_err>

  if (s->specific_remote) {
 8000564:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000568:	b97b      	cbnz	r3, 800058a <lwiperf_tcp_accept+0xc2>
  item->next = lwiperf_all_connections;
 800056a:	4e2b      	ldr	r6, [pc, #172]	; (8000618 <lwiperf_tcp_accept+0x150>)
 800056c:	6831      	ldr	r1, [r6, #0]
      s->report_fn = NULL;
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
    }
  }
  lwiperf_list_add(&conn->base);
  return ERR_OK;
 800056e:	2000      	movs	r0, #0
  item->next = lwiperf_all_connections;
 8000570:	6029      	str	r1, [r5, #0]
  lwiperf_all_connections = item;
 8000572:	6035      	str	r5, [r6, #0]
}
 8000574:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 8000576:	68a3      	ldr	r3, [r4, #8]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d031      	beq.n	80005e0 <lwiperf_tcp_accept+0x118>
    if (!ip_addr_cmp(&newpcb->remote_ip, &s->remote_addr)) {
 800057c:	6872      	ldr	r2, [r6, #4]
 800057e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000580:	429a      	cmp	r2, r3
 8000582:	d0c8      	beq.n	8000516 <lwiperf_tcp_accept+0x4e>
    return ERR_VAL;
 8000584:	f06f 0005 	mvn.w	r0, #5
}
 8000588:	bd70      	pop	{r4, r5, r6, pc}
    conn->base.related_master_state = s->base.related_master_state;
 800058a:	68a2      	ldr	r2, [r4, #8]
 800058c:	4e22      	ldr	r6, [pc, #136]	; (8000618 <lwiperf_tcp_accept+0x150>)
 800058e:	60aa      	str	r2, [r5, #8]
    if (!s->client_tradeoff_mode || !lwiperf_list_find(s->base.related_master_state)) {
 8000590:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000594:	b153      	cbz	r3, 80005ac <lwiperf_tcp_accept+0xe4>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 8000596:	6831      	ldr	r1, [r6, #0]
 8000598:	b141      	cbz	r1, 80005ac <lwiperf_tcp_accept+0xe4>
    if (iter == item) {
 800059a:	428a      	cmp	r2, r1
 800059c:	d0e7      	beq.n	800056e <lwiperf_tcp_accept+0xa6>
 800059e:	460b      	mov	r3, r1
 80005a0:	e001      	b.n	80005a6 <lwiperf_tcp_accept+0xde>
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d0e3      	beq.n	800056e <lwiperf_tcp_accept+0xa6>
  for (iter = lwiperf_all_connections; iter != NULL; iter = iter->next) {
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1fa      	bne.n	80005a2 <lwiperf_tcp_accept+0xda>
      s->report_fn = NULL;
 80005ac:	2300      	movs	r3, #0
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005ae:	2102      	movs	r1, #2
 80005b0:	4620      	mov	r0, r4
      s->report_fn = NULL;
 80005b2:	61a3      	str	r3, [r4, #24]
      lwiperf_tcp_close(s, LWIPERF_TCP_ABORTED_LOCAL);
 80005b4:	f7ff fefe 	bl	80003b4 <lwiperf_tcp_close>
  item->next = lwiperf_all_connections;
 80005b8:	6831      	ldr	r1, [r6, #0]
 80005ba:	e7d8      	b.n	800056e <lwiperf_tcp_accept+0xa6>
  LWIP_ASSERT("invalid session", s->base.server);
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <lwiperf_tcp_accept+0x134>)
 80005be:	f44f 7216 	mov.w	r2, #600	; 0x258
 80005c2:	4916      	ldr	r1, [pc, #88]	; (800061c <lwiperf_tcp_accept+0x154>)
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <lwiperf_tcp_accept+0x13c>)
 80005c6:	f00d fe1f 	bl	800e208 <iprintf>
  LWIP_ASSERT("invalid listen pcb", s->server_pcb != NULL);
 80005ca:	68e3      	ldr	r3, [r4, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d18c      	bne.n	80004ea <lwiperf_tcp_accept+0x22>
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <lwiperf_tcp_accept+0x134>)
 80005d2:	f240 2259 	movw	r2, #601	; 0x259
 80005d6:	4912      	ldr	r1, [pc, #72]	; (8000620 <lwiperf_tcp_accept+0x158>)
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <lwiperf_tcp_accept+0x13c>)
 80005da:	f00d fe15 	bl	800e208 <iprintf>
 80005de:	e784      	b.n	80004ea <lwiperf_tcp_accept+0x22>
    LWIP_ASSERT("s->base.related_master_state != NULL", s->base.related_master_state != NULL);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <lwiperf_tcp_accept+0x134>)
 80005e2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80005e6:	490f      	ldr	r1, [pc, #60]	; (8000624 <lwiperf_tcp_accept+0x15c>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <lwiperf_tcp_accept+0x13c>)
 80005ea:	f00d fe0d 	bl	800e208 <iprintf>
 80005ee:	e7c5      	b.n	800057c <lwiperf_tcp_accept+0xb4>
    return ERR_MEM;
 80005f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80005f4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80005f6:	f06f 0005 	mvn.w	r0, #5
}
 80005fa:	4770      	bx	lr
 80005fc:	0800f078 	.word	0x0800f078
 8000600:	0800f0f4 	.word	0x0800f0f4
 8000604:	0800f0a0 	.word	0x0800f0a0
 8000608:	0800f130 	.word	0x0800f130
 800060c:	08000939 	.word	0x08000939
 8000610:	0800076d 	.word	0x0800076d
 8000614:	08000629 	.word	0x08000629
 8000618:	240000b0 	.word	0x240000b0
 800061c:	0800f0d0 	.word	0x0800f0d0
 8000620:	0800f0e0 	.word	0x0800f0e0
 8000624:	0800f108 	.word	0x0800f108

08000628 <lwiperf_tcp_err>:
  lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000628:	2105      	movs	r1, #5
 800062a:	f7ff bec3 	b.w	80003b4 <lwiperf_tcp_close>
 800062e:	bf00      	nop

08000630 <lwiperf_tcp_client_send_more>:
{
 8000630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 8000634:	4605      	mov	r5, r0
 8000636:	b110      	cbz	r0, 800063e <lwiperf_tcp_client_send_more+0xe>
 8000638:	7903      	ldrb	r3, [r0, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d16e      	bne.n	800071c <lwiperf_tcp_client_send_more+0xec>
 800063e:	4b39      	ldr	r3, [pc, #228]	; (8000724 <lwiperf_tcp_client_send_more+0xf4>)
 8000640:	f240 121d 	movw	r2, #285	; 0x11d
 8000644:	4938      	ldr	r1, [pc, #224]	; (8000728 <lwiperf_tcp_client_send_more+0xf8>)
 8000646:	4839      	ldr	r0, [pc, #228]	; (800072c <lwiperf_tcp_client_send_more+0xfc>)
 8000648:	f00d fdde 	bl	800e208 <iprintf>
      u32_t time_ms = time * 10;
 800064c:	f06f 0909 	mvn.w	r9, #9
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 8000650:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 8000734 <lwiperf_tcp_client_send_more+0x104>
 8000654:	e006      	b.n	8000664 <lwiperf_tcp_client_send_more+0x34>
    if (err == ERR_OK) {
 8000656:	bb78      	cbnz	r0, 80006b8 <lwiperf_tcp_client_send_more+0x88>
      conn->bytes_transferred += txlen;
 8000658:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800065a:	4423      	add	r3, r4
 800065c:	626b      	str	r3, [r5, #36]	; 0x24
  } while (send_more);
 800065e:	f1b8 0f00 	cmp.w	r8, #0
 8000662:	d029      	beq.n	80006b8 <lwiperf_tcp_client_send_more+0x88>
    if (conn->settings.amount & PP_HTONL(0x80000000)) {
 8000664:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8000666:	0602      	lsls	r2, r0, #24
 8000668:	d52c      	bpl.n	80006c4 <lwiperf_tcp_client_send_more+0x94>
      u32_t now = sys_now();
 800066a:	f003 faa7 	bl	8003bbc <sys_now>
      u32_t diff_ms = now - conn->time_started;
 800066e:	696b      	ldr	r3, [r5, #20]
      u32_t now = sys_now();
 8000670:	4604      	mov	r4, r0
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000672:	6be8      	ldr	r0, [r5, #60]	; 0x3c
      u32_t diff_ms = now - conn->time_started;
 8000674:	1ae4      	subs	r4, r4, r3
      u32_t time = (u32_t) - (s32_t)lwip_htonl(conn->settings.amount);
 8000676:	f006 f969 	bl	800694c <lwip_htonl>
      u32_t time_ms = time * 10;
 800067a:	fb09 f000 	mul.w	r0, r9, r0
      if (diff_ms >= time_ms) {
 800067e:	4284      	cmp	r4, r0
 8000680:	d225      	bcs.n	80006ce <lwiperf_tcp_client_send_more+0x9e>
    if (conn->bytes_transferred < 24) {
 8000682:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000684:	2917      	cmp	r1, #23
 8000686:	d93e      	bls.n	8000706 <lwiperf_tcp_client_send_more+0xd6>
    } else if (conn->bytes_transferred < 48) {
 8000688:	292f      	cmp	r1, #47	; 0x2f
 800068a:	d827      	bhi.n	80006dc <lwiperf_tcp_client_send_more+0xac>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800068c:	186e      	adds	r6, r5, r1
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800068e:	f1c1 0130 	rsb	r1, r1, #48	; 0x30
      apiflags = TCP_WRITE_FLAG_COPY | TCP_WRITE_FLAG_MORE;
 8000692:	f04f 0a03 	mov.w	sl, #3
      send_more = 1;
 8000696:	f04f 0801 	mov.w	r8, #1
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred - 24];
 800069a:	3610      	adds	r6, #16
      txlen_max = (u16_t)(48 - conn->bytes_transferred);
 800069c:	b28c      	uxth	r4, r1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 800069e:	f240 27da 	movw	r7, #730	; 0x2da
      err = tcp_write(conn->conn_pcb, txptr, txlen, apiflags);
 80006a2:	4653      	mov	r3, sl
 80006a4:	4622      	mov	r2, r4
 80006a6:	4631      	mov	r1, r6
 80006a8:	6928      	ldr	r0, [r5, #16]
 80006aa:	f00a fc63 	bl	800af74 <tcp_write>
      if (err ==  ERR_MEM) {
 80006ae:	1c43      	adds	r3, r0, #1
 80006b0:	d1d1      	bne.n	8000656 <lwiperf_tcp_client_send_more+0x26>
        txlen /= 2;
 80006b2:	0864      	lsrs	r4, r4, #1
    } while ((err == ERR_MEM) && (txlen >= (TCP_MSS / 2)));
 80006b4:	42bc      	cmp	r4, r7
 80006b6:	d0f4      	beq.n	80006a2 <lwiperf_tcp_client_send_more+0x72>
  tcp_output(conn->conn_pcb);
 80006b8:	6928      	ldr	r0, [r5, #16]
 80006ba:	f00b fa79 	bl	800bbb0 <tcp_output>
}
 80006be:	2000      	movs	r0, #0
 80006c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      u32_t amount_bytes = lwip_htonl(conn->settings.amount);
 80006c4:	f006 f942 	bl	800694c <lwip_htonl>
      if (amount_bytes >= conn->bytes_transferred) {
 80006c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80006ca:	4281      	cmp	r1, r0
 80006cc:	d8da      	bhi.n	8000684 <lwiperf_tcp_client_send_more+0x54>
        lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_CLIENT);
 80006ce:	4628      	mov	r0, r5
 80006d0:	2101      	movs	r1, #1
 80006d2:	f7ff fe6f 	bl	80003b4 <lwiperf_tcp_close>
}
 80006d6:	2000      	movs	r0, #0
 80006d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <lwiperf_tcp_client_send_more+0x100>)
      apiflags = 0; /* no copying needed */
 80006de:	f240 54b4 	movw	r4, #1460	; 0x5b4
 80006e2:	f240 529c 	movw	r2, #1436	; 0x59c
 80006e6:	f04f 0a00 	mov.w	sl, #0
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006ea:	fba3 3601 	umull	r3, r6, r3, r1
      apiflags = 0; /* no copying needed */
 80006ee:	f04f 0801 	mov.w	r8, #1
 80006f2:	2930      	cmp	r1, #48	; 0x30
 80006f4:	bf08      	it	eq
 80006f6:	4614      	moveq	r4, r2
      txptr = LWIP_CONST_CAST(void *, &lwiperf_txbuf_const[conn->bytes_transferred % 10]);
 80006f8:	08f6      	lsrs	r6, r6, #3
 80006fa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80006fe:	eba1 0646 	sub.w	r6, r1, r6, lsl #1
 8000702:	445e      	add	r6, fp
      if (conn->bytes_transferred == 48) { /* @todo: fix this for intermediate settings, too */
 8000704:	e7cb      	b.n	800069e <lwiperf_tcp_client_send_more+0x6e>
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8000706:	f105 0628 	add.w	r6, r5, #40	; 0x28
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 800070a:	f1c1 0418 	rsb	r4, r1, #24
      apiflags = TCP_WRITE_FLAG_COPY;
 800070e:	f04f 0a01 	mov.w	sl, #1
    send_more = 0;
 8000712:	f04f 0800 	mov.w	r8, #0
      txptr = &((u8_t *)&conn->settings)[conn->bytes_transferred];
 8000716:	440e      	add	r6, r1
      txlen_max = (u16_t)(24 - conn->bytes_transferred);
 8000718:	b2a4      	uxth	r4, r4
      apiflags = TCP_WRITE_FLAG_COPY;
 800071a:	e7c0      	b.n	800069e <lwiperf_tcp_client_send_more+0x6e>
  LWIP_ASSERT("conn invalid", (conn != NULL) && conn->base.tcp && (conn->base.server == 0));
 800071c:	7943      	ldrb	r3, [r0, #5]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d094      	beq.n	800064c <lwiperf_tcp_client_send_more+0x1c>
 8000722:	e78c      	b.n	800063e <lwiperf_tcp_client_send_more+0xe>
 8000724:	0800f078 	.word	0x0800f078
 8000728:	0800f158 	.word	0x0800f158
 800072c:	0800f0a0 	.word	0x0800f0a0
 8000730:	cccccccd 	.word	0xcccccccd
 8000734:	0800f1ec 	.word	0x0800f1ec

08000738 <lwiperf_tcp_client_sent>:
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000738:	6903      	ldr	r3, [r0, #16]
 800073a:	428b      	cmp	r3, r1
{
 800073c:	b510      	push	{r4, lr}
 800073e:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000740:	d006      	beq.n	8000750 <lwiperf_tcp_client_sent+0x18>
 8000742:	4b07      	ldr	r3, [pc, #28]	; (8000760 <lwiperf_tcp_client_sent+0x28>)
 8000744:	f44f 72b3 	mov.w	r2, #358	; 0x166
 8000748:	4906      	ldr	r1, [pc, #24]	; (8000764 <lwiperf_tcp_client_sent+0x2c>)
 800074a:	4807      	ldr	r0, [pc, #28]	; (8000768 <lwiperf_tcp_client_sent+0x30>)
 800074c:	f00d fd5c 	bl	800e208 <iprintf>
  conn->poll_count = 0;
 8000750:	2300      	movs	r3, #0
  return lwiperf_tcp_client_send_more(conn);
 8000752:	4620      	mov	r0, r4
  conn->poll_count = 0;
 8000754:	f884 3020 	strb.w	r3, [r4, #32]
}
 8000758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return lwiperf_tcp_client_send_more(conn);
 800075c:	f7ff bf68 	b.w	8000630 <lwiperf_tcp_client_send_more>
 8000760:	0800f078 	.word	0x0800f078
 8000764:	0800f168 	.word	0x0800f168
 8000768:	0800f0a0 	.word	0x0800f0a0

0800076c <lwiperf_tcp_poll>:
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800076c:	6903      	ldr	r3, [r0, #16]
 800076e:	428b      	cmp	r3, r1
{
 8000770:	b510      	push	{r4, lr}
 8000772:	4604      	mov	r4, r0
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000774:	d006      	beq.n	8000784 <lwiperf_tcp_poll+0x18>
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <lwiperf_tcp_poll+0x48>)
 8000778:	f44f 7210 	mov.w	r2, #576	; 0x240
 800077c:	490e      	ldr	r1, [pc, #56]	; (80007b8 <lwiperf_tcp_poll+0x4c>)
 800077e:	480f      	ldr	r0, [pc, #60]	; (80007bc <lwiperf_tcp_poll+0x50>)
 8000780:	f00d fd42 	bl	800e208 <iprintf>
  if (++conn->poll_count >= LWIPERF_TCP_MAX_IDLE_SEC) {
 8000784:	f894 3020 	ldrb.w	r3, [r4, #32]
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b09      	cmp	r3, #9
 800078e:	f884 3020 	strb.w	r3, [r4, #32]
 8000792:	d808      	bhi.n	80007a6 <lwiperf_tcp_poll+0x3a>
  if (!conn->base.server) {
 8000794:	7963      	ldrb	r3, [r4, #5]
 8000796:	b10b      	cbz	r3, 800079c <lwiperf_tcp_poll+0x30>
}
 8000798:	2000      	movs	r0, #0
 800079a:	bd10      	pop	{r4, pc}
    lwiperf_tcp_client_send_more(conn);
 800079c:	4620      	mov	r0, r4
 800079e:	f7ff ff47 	bl	8000630 <lwiperf_tcp_client_send_more>
}
 80007a2:	2000      	movs	r0, #0
 80007a4:	bd10      	pop	{r4, pc}
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 80007a6:	4620      	mov	r0, r4
 80007a8:	2102      	movs	r1, #2
 80007aa:	f7ff fe03 	bl	80003b4 <lwiperf_tcp_close>
}
 80007ae:	2000      	movs	r0, #0
 80007b0:	bd10      	pop	{r4, pc}
 80007b2:	bf00      	nop
 80007b4:	0800f078 	.word	0x0800f078
 80007b8:	0800f178 	.word	0x0800f178
 80007bc:	0800f0a0 	.word	0x0800f0a0

080007c0 <lwiperf_tx_start_impl>:
{
 80007c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007c4:	4688      	mov	r8, r1
 80007c6:	b083      	sub	sp, #12
 80007c8:	4616      	mov	r6, r2
 80007ca:	4699      	mov	r9, r3
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 80007cc:	4607      	mov	r7, r0
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d063      	beq.n	800089a <lwiperf_tx_start_impl+0xda>
  *new_conn = NULL;
 80007d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80007d4:	f04f 0b00 	mov.w	fp, #0
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007d8:	2048      	movs	r0, #72	; 0x48
  *new_conn = NULL;
 80007da:	f8c3 b000 	str.w	fp, [r3]
  client_conn = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 80007de:	f006 fb25 	bl	8006e2c <mem_malloc>
  if (client_conn == NULL) {
 80007e2:	4604      	mov	r4, r0
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d060      	beq.n	80008aa <lwiperf_tx_start_impl+0xea>
  newpcb = tcp_new_ip_type(IP_GET_TYPE(remote_ip));
 80007e8:	4658      	mov	r0, fp
 80007ea:	f008 fbef 	bl	8008fcc <tcp_new_ip_type>
  if (newpcb == NULL) {
 80007ee:	4605      	mov	r5, r0
 80007f0:	2800      	cmp	r0, #0
 80007f2:	d05d      	beq.n	80008b0 <lwiperf_tx_start_impl+0xf0>
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80007f4:	2248      	movs	r2, #72	; 0x48
 80007f6:	4659      	mov	r1, fp
 80007f8:	4620      	mov	r0, r4
  client_conn->base.tcp = 1;
 80007fa:	f04f 0a01 	mov.w	sl, #1
  memset(client_conn, 0, sizeof(lwiperf_state_tcp_t));
 80007fe:	f00d fc66 	bl	800e0ce <memset>
  client_conn->base.related_master_state = related_master_state;
 8000802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  client_conn->conn_pcb = newpcb;
 8000804:	6125      	str	r5, [r4, #16]
  client_conn->base.related_master_state = related_master_state;
 8000806:	60a3      	str	r3, [r4, #8]
  client_conn->base.tcp = 1;
 8000808:	f884 a004 	strb.w	sl, [r4, #4]
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 800080c:	f003 f9d6 	bl	8003bbc <sys_now>
  client_conn->report_arg = report_arg;
 8000810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  client_conn->report_fn = report_fn;
 8000812:	f8c4 9018 	str.w	r9, [r4, #24]
  client_conn->report_arg = report_arg;
 8000816:	61e3      	str	r3, [r4, #28]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000818:	2304      	movs	r3, #4
  client_conn->bytes_transferred = 0;
 800081a:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
  client_conn->time_started = sys_now(); /* @todo: set this again on 'connected' */
 800081e:	6160      	str	r0, [r4, #20]
  client_conn->next_num = 4; /* initial nr is '4' since the header has 24 byte */
 8000820:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000824:	6832      	ldr	r2, [r6, #0]
 8000826:	6873      	ldr	r3, [r6, #4]
 8000828:	68b0      	ldr	r0, [r6, #8]
 800082a:	68f1      	ldr	r1, [r6, #12]
 800082c:	6320      	str	r0, [r4, #48]	; 0x30
  tcp_arg(newpcb, client_conn);
 800082e:	4628      	mov	r0, r5
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000830:	6361      	str	r1, [r4, #52]	; 0x34
  tcp_arg(newpcb, client_conn);
 8000832:	4621      	mov	r1, r4
  memcpy(&client_conn->settings, settings, sizeof(*settings));
 8000834:	62a2      	str	r2, [r4, #40]	; 0x28
 8000836:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000838:	6973      	ldr	r3, [r6, #20]
 800083a:	6932      	ldr	r2, [r6, #16]
 800083c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800083e:	63a2      	str	r2, [r4, #56]	; 0x38
  client_conn->have_settings_buf = 1;
 8000840:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
  tcp_arg(newpcb, client_conn);
 8000844:	f007 fdde 	bl	8008404 <tcp_arg>
  tcp_sent(newpcb, lwiperf_tcp_client_sent);
 8000848:	4628      	mov	r0, r5
 800084a:	491c      	ldr	r1, [pc, #112]	; (80008bc <lwiperf_tx_start_impl+0xfc>)
 800084c:	f007 fdfc 	bl	8008448 <tcp_sent>
  tcp_poll(newpcb, lwiperf_tcp_poll, 2U);
 8000850:	2202      	movs	r2, #2
 8000852:	4628      	mov	r0, r5
 8000854:	491a      	ldr	r1, [pc, #104]	; (80008c0 <lwiperf_tx_start_impl+0x100>)
 8000856:	f007 fe37 	bl	80084c8 <tcp_poll>
  tcp_err(newpcb, lwiperf_tcp_err);
 800085a:	4628      	mov	r0, r5
 800085c:	4919      	ldr	r1, [pc, #100]	; (80008c4 <lwiperf_tx_start_impl+0x104>)
 800085e:	f007 fe0d 	bl	800847c <tcp_err>
  ip_addr_copy(remote_addr, *remote_ip);
 8000862:	683b      	ldr	r3, [r7, #0]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 8000864:	4628      	mov	r0, r5
 8000866:	4642      	mov	r2, r8
  ip_addr_copy(remote_addr, *remote_ip);
 8000868:	9301      	str	r3, [sp, #4]
  err = tcp_connect(newpcb, &remote_addr, remote_port, lwiperf_tcp_client_connected);
 800086a:	a901      	add	r1, sp, #4
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <lwiperf_tx_start_impl+0x108>)
 800086e:	f007 fcd1 	bl	8008214 <tcp_connect>
  if (err != ERR_OK) {
 8000872:	4605      	mov	r5, r0
 8000874:	b948      	cbnz	r0, 800088a <lwiperf_tx_start_impl+0xca>
  item->next = lwiperf_all_connections;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <lwiperf_tx_start_impl+0x10c>)
 8000878:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 800087a:	601c      	str	r4, [r3, #0]
  *new_conn = client_conn;
 800087c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  item->next = lwiperf_all_connections;
 800087e:	6022      	str	r2, [r4, #0]
  *new_conn = client_conn;
 8000880:	601c      	str	r4, [r3, #0]
}
 8000882:	4628      	mov	r0, r5
 8000884:	b003      	add	sp, #12
 8000886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lwiperf_tcp_close(client_conn, LWIPERF_TCP_ABORTED_LOCAL);
 800088a:	4620      	mov	r0, r4
 800088c:	2102      	movs	r1, #2
 800088e:	f7ff fd91 	bl	80003b4 <lwiperf_tcp_close>
}
 8000892:	4628      	mov	r0, r5
 8000894:	b003      	add	sp, #12
 8000896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("remote_ip != NULL", remote_ip != NULL);
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <lwiperf_tx_start_impl+0x110>)
 800089c:	f240 128b 	movw	r2, #395	; 0x18b
 80008a0:	490c      	ldr	r1, [pc, #48]	; (80008d4 <lwiperf_tx_start_impl+0x114>)
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <lwiperf_tx_start_impl+0x118>)
 80008a4:	f00d fcb0 	bl	800e208 <iprintf>
 80008a8:	e793      	b.n	80007d2 <lwiperf_tx_start_impl+0x12>
    return ERR_MEM;
 80008aa:	f04f 35ff 	mov.w	r5, #4294967295
 80008ae:	e7e8      	b.n	8000882 <lwiperf_tx_start_impl+0xc2>
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80008b0:	4620      	mov	r0, r4
    return ERR_MEM;
 80008b2:	f04f 35ff 	mov.w	r5, #4294967295
    LWIPERF_FREE(lwiperf_state_tcp_t, client_conn);
 80008b6:	f006 f90b 	bl	8006ad0 <mem_free>
    return ERR_MEM;
 80008ba:	e7e2      	b.n	8000882 <lwiperf_tx_start_impl+0xc2>
 80008bc:	08000739 	.word	0x08000739
 80008c0:	0800076d 	.word	0x0800076d
 80008c4:	08000629 	.word	0x08000629
 80008c8:	08000b15 	.word	0x08000b15
 80008cc:	240000b0 	.word	0x240000b0
 80008d0:	0800f078 	.word	0x0800f078
 80008d4:	0800f188 	.word	0x0800f188
 80008d8:	0800f0a0 	.word	0x0800f0a0

080008dc <lwiperf_tx_start_passive>:
{
 80008dc:	b530      	push	{r4, r5, lr}
  lwiperf_state_tcp_t *new_conn = NULL;
 80008de:	2300      	movs	r3, #0
{
 80008e0:	4604      	mov	r4, r0
 80008e2:	b087      	sub	sp, #28
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80008e4:	6b00      	ldr	r0, [r0, #48]	; 0x30
  lwiperf_state_tcp_t *new_conn = NULL;
 80008e6:	9305      	str	r3, [sp, #20]
  u16_t remote_port = (u16_t)lwip_htonl(conn->settings.remote_port);
 80008e8:	f006 f830 	bl	800694c <lwip_htonl>
  ret = lwiperf_tx_start_impl(&conn->conn_pcb->remote_ip, remote_port, &conn->settings, conn->report_fn, conn->report_arg,
 80008ec:	6922      	ldr	r2, [r4, #16]
 80008ee:	a905      	add	r1, sp, #20
 80008f0:	69e3      	ldr	r3, [r4, #28]
 80008f2:	68a5      	ldr	r5, [r4, #8]
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	e9cd 5101 	strd	r5, r1, [sp, #4]
 80008fa:	b281      	uxth	r1, r0
 80008fc:	69a3      	ldr	r3, [r4, #24]
 80008fe:	1d10      	adds	r0, r2, #4
 8000900:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000904:	f7ff ff5c 	bl	80007c0 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 8000908:	4604      	mov	r4, r0
 800090a:	b918      	cbnz	r0, 8000914 <lwiperf_tx_start_passive+0x38>
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800090c:	9b05      	ldr	r3, [sp, #20]
 800090e:	b123      	cbz	r3, 800091a <lwiperf_tx_start_passive+0x3e>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000914:	4620      	mov	r0, r4
 8000916:	b007      	add	sp, #28
 8000918:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("new_conn != NULL", new_conn != NULL);
 800091a:	4b04      	ldr	r3, [pc, #16]	; (800092c <lwiperf_tx_start_passive+0x50>)
 800091c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8000920:	4903      	ldr	r1, [pc, #12]	; (8000930 <lwiperf_tx_start_passive+0x54>)
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <lwiperf_tx_start_passive+0x58>)
 8000924:	f00d fc70 	bl	800e208 <iprintf>
    new_conn->settings.flags = 0; /* prevent the remote side starting back as client again */
 8000928:	9b05      	ldr	r3, [sp, #20]
 800092a:	e7f1      	b.n	8000910 <lwiperf_tx_start_passive+0x34>
 800092c:	0800f078 	.word	0x0800f078
 8000930:	0800f19c 	.word	0x0800f19c
 8000934:	0800f0a0 	.word	0x0800f0a0

08000938 <lwiperf_tcp_recv>:
{
 8000938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800093c:	461f      	mov	r7, r3
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 800093e:	6903      	ldr	r3, [r0, #16]
{
 8000940:	4604      	mov	r4, r0
 8000942:	460e      	mov	r6, r1
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000944:	428b      	cmp	r3, r1
{
 8000946:	4615      	mov	r5, r2
  LWIP_ASSERT("pcb mismatch", conn->conn_pcb == tpcb);
 8000948:	d006      	beq.n	8000958 <lwiperf_tcp_recv+0x20>
 800094a:	4b6c      	ldr	r3, [pc, #432]	; (8000afc <lwiperf_tcp_recv+0x1c4>)
 800094c:	f44f 72e8 	mov.w	r2, #464	; 0x1d0
 8000950:	496b      	ldr	r1, [pc, #428]	; (8000b00 <lwiperf_tcp_recv+0x1c8>)
 8000952:	486c      	ldr	r0, [pc, #432]	; (8000b04 <lwiperf_tcp_recv+0x1cc>)
 8000954:	f00d fc58 	bl	800e208 <iprintf>
  if (err != ERR_OK) {
 8000958:	2f00      	cmp	r7, #0
 800095a:	d176      	bne.n	8000a4a <lwiperf_tcp_recv+0x112>
  if (p == NULL) {
 800095c:	2d00      	cmp	r5, #0
 800095e:	f000 809e 	beq.w	8000a9e <lwiperf_tcp_recv+0x166>
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 8000962:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  tot_len = p->tot_len;
 8000966:	f8b5 8008 	ldrh.w	r8, [r5, #8]
  conn->poll_count = 0;
 800096a:	f884 7020 	strb.w	r7, [r4, #32]
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800096e:	b963      	cbnz	r3, 800098a <lwiperf_tcp_recv+0x52>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000970:	f1b8 0f17 	cmp.w	r8, #23
 8000974:	d870      	bhi.n	8000a58 <lwiperf_tcp_recv+0x120>
      lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_DATAERROR);
 8000976:	4620      	mov	r0, r4
 8000978:	2103      	movs	r1, #3
 800097a:	f7ff fd1b 	bl	80003b4 <lwiperf_tcp_close>
      pbuf_free(p);
 800097e:	4628      	mov	r0, r5
 8000980:	f007 f908 	bl	8007b94 <pbuf_free>
}
 8000984:	2000      	movs	r0, #0
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((!conn->have_settings_buf) || ((conn->bytes_transferred - 24) % (1024 * 128) == 0)) {
 800098a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800098c:	03da      	lsls	r2, r3, #15
 800098e:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 8000992:	d119      	bne.n	80009c8 <lwiperf_tcp_recv+0x90>
    if (p->tot_len < sizeof(lwiperf_settings_t)) {
 8000994:	f1b8 0f17 	cmp.w	r8, #23
 8000998:	d9ed      	bls.n	8000976 <lwiperf_tcp_recv+0x3e>
      if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 800099a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800099c:	0612      	lsls	r2, r2, #24
 800099e:	f100 808a 	bmi.w	8000ab6 <lwiperf_tcp_recv+0x17e>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80009a2:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 80009a4:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 80009a6:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 80009a8:	d96b      	bls.n	8000a82 <lwiperf_tcp_recv+0x14a>
    conn->next_num = 4; /* 24 bytes received... */
 80009aa:	2304      	movs	r3, #4
    tmp = pbuf_remove_header(p, 24);
 80009ac:	2118      	movs	r1, #24
 80009ae:	4628      	mov	r0, r5
    conn->next_num = 4; /* 24 bytes received... */
 80009b0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    tmp = pbuf_remove_header(p, 24);
 80009b4:	f007 f87e 	bl	8007ab4 <pbuf_remove_header>
    LWIP_ASSERT("pbuf_remove_header failed", tmp == 0);
 80009b8:	b130      	cbz	r0, 80009c8 <lwiperf_tcp_recv+0x90>
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <lwiperf_tcp_recv+0x1c4>)
 80009bc:	f240 2211 	movw	r2, #529	; 0x211
 80009c0:	4951      	ldr	r1, [pc, #324]	; (8000b08 <lwiperf_tcp_recv+0x1d0>)
 80009c2:	4850      	ldr	r0, [pc, #320]	; (8000b04 <lwiperf_tcp_recv+0x1cc>)
 80009c4:	f00d fc20 	bl	800e208 <iprintf>
{
 80009c8:	2700      	movs	r7, #0
 80009ca:	46ac      	mov	ip, r5
          conn->next_num = 0;
 80009cc:	46b9      	mov	r9, r7
    for (i = 0; i < q->len; i++) {
 80009ce:	f8bc e00a 	ldrh.w	lr, [ip, #10]
    const u8_t *payload = (const u8_t *)q->payload;
 80009d2:	f8dc 2004 	ldr.w	r2, [ip, #4]
    for (i = 0; i < q->len; i++) {
 80009d6:	f1be 0f00 	cmp.w	lr, #0
 80009da:	d01c      	beq.n	8000a16 <lwiperf_tcp_recv+0xde>
 80009dc:	f10e 30ff 	add.w	r0, lr, #4294967295
 80009e0:	fa12 f080 	uxtah	r0, r2, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	e008      	b.n	80009fa <lwiperf_tcp_recv+0xc2>
        if (conn->next_num == 10) {
 80009e8:	f1ba 0f0a 	cmp.w	sl, #10
        conn->next_num++;
 80009ec:	bf14      	ite	ne
 80009ee:	f884 a021 	strbne.w	sl, [r4, #33]	; 0x21
          conn->next_num = 0;
 80009f2:	f884 9021 	strbeq.w	r9, [r4, #33]	; 0x21
    for (i = 0; i < q->len; i++) {
 80009f6:	4290      	cmp	r0, r2
 80009f8:	d00c      	beq.n	8000a14 <lwiperf_tcp_recv+0xdc>
      u8_t num = val - '0';
 80009fa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
      if (num == conn->next_num) {
 80009fe:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
      u8_t num = val - '0';
 8000a02:	3b30      	subs	r3, #48	; 0x30
        conn->next_num++;
 8000a04:	f101 0a01 	add.w	sl, r1, #1
      if (num == conn->next_num) {
 8000a08:	b2db      	uxtb	r3, r3
        conn->next_num++;
 8000a0a:	fa5f fa8a 	uxtb.w	sl, sl
      if (num == conn->next_num) {
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d0ea      	beq.n	80009e8 <lwiperf_tcp_recv+0xb0>
 8000a12:	e7b0      	b.n	8000976 <lwiperf_tcp_recv+0x3e>
    packet_idx += q->len;
 8000a14:	4477      	add	r7, lr
  for (q = p; q != NULL; q = q->next) {
 8000a16:	f8dc c000 	ldr.w	ip, [ip]
 8000a1a:	f1bc 0f00 	cmp.w	ip, #0
 8000a1e:	d1d6      	bne.n	80009ce <lwiperf_tcp_recv+0x96>
  LWIP_ASSERT("count mismatch", packet_idx == p->tot_len);
 8000a20:	892b      	ldrh	r3, [r5, #8]
 8000a22:	42bb      	cmp	r3, r7
 8000a24:	d006      	beq.n	8000a34 <lwiperf_tcp_recv+0xfc>
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <lwiperf_tcp_recv+0x1c4>)
 8000a28:	f240 222b 	movw	r2, #555	; 0x22b
 8000a2c:	4937      	ldr	r1, [pc, #220]	; (8000b0c <lwiperf_tcp_recv+0x1d4>)
 8000a2e:	4835      	ldr	r0, [pc, #212]	; (8000b04 <lwiperf_tcp_recv+0x1cc>)
 8000a30:	f00d fbea 	bl	800e208 <iprintf>
  conn->bytes_transferred += packet_idx;
 8000a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000a36:	4630      	mov	r0, r6
 8000a38:	4641      	mov	r1, r8
  conn->bytes_transferred += packet_idx;
 8000a3a:	443b      	add	r3, r7
 8000a3c:	6263      	str	r3, [r4, #36]	; 0x24
  tcp_recved(tpcb, tot_len);
 8000a3e:	f007 fba9 	bl	8008194 <tcp_recved>
  pbuf_free(p);
 8000a42:	4628      	mov	r0, r5
 8000a44:	f007 f8a6 	bl	8007b94 <pbuf_free>
  return ERR_OK;
 8000a48:	e79c      	b.n	8000984 <lwiperf_tcp_recv+0x4c>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	f7ff fcb1 	bl	80003b4 <lwiperf_tcp_close>
}
 8000a52:	2000      	movs	r0, #0
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (pbuf_copy_partial(p, &conn->settings, sizeof(lwiperf_settings_t), 0) != sizeof(lwiperf_settings_t)) {
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2218      	movs	r2, #24
 8000a5c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8000a60:	4628      	mov	r0, r5
 8000a62:	f007 f92b 	bl	8007cbc <pbuf_copy_partial>
 8000a66:	2818      	cmp	r0, #24
 8000a68:	d133      	bne.n	8000ad2 <lwiperf_tcp_recv+0x19a>
      conn->have_settings_buf = 1;
 8000a6a:	2301      	movs	r3, #1
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      conn->have_settings_buf = 1;
 8000a6e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) {
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <lwiperf_tcp_recv+0x1d8>)
 8000a74:	4393      	bics	r3, r2
 8000a76:	d034      	beq.n	8000ae2 <lwiperf_tcp_recv+0x1aa>
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7a:	3318      	adds	r3, #24
    if (conn->bytes_transferred <= 24) {
 8000a7c:	2b18      	cmp	r3, #24
    conn->bytes_transferred += sizeof(lwiperf_settings_t);
 8000a7e:	6263      	str	r3, [r4, #36]	; 0x24
    if (conn->bytes_transferred <= 24) {
 8000a80:	d893      	bhi.n	80009aa <lwiperf_tcp_recv+0x72>
      conn->time_started = sys_now();
 8000a82:	f003 f89b 	bl	8003bbc <sys_now>
 8000a86:	4603      	mov	r3, r0
      tcp_recved(tpcb, p->tot_len);
 8000a88:	8929      	ldrh	r1, [r5, #8]
 8000a8a:	4630      	mov	r0, r6
      conn->time_started = sys_now();
 8000a8c:	6163      	str	r3, [r4, #20]
      tcp_recved(tpcb, p->tot_len);
 8000a8e:	f007 fb81 	bl	8008194 <tcp_recved>
      pbuf_free(p);
 8000a92:	4628      	mov	r0, r5
 8000a94:	f007 f87e 	bl	8007b94 <pbuf_free>
}
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_TEST)) {
 8000a9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aa0:	0618      	lsls	r0, r3, #24
 8000aa2:	d501      	bpl.n	8000aa8 <lwiperf_tcp_recv+0x170>
      if ((conn->settings.flags & PP_HTONL(LWIPERF_FLAGS_ANSWER_NOW)) == 0) {
 8000aa4:	01d9      	lsls	r1, r3, #7
 8000aa6:	d510      	bpl.n	8000aca <lwiperf_tcp_recv+0x192>
    lwiperf_tcp_close(conn, LWIPERF_TCP_DONE_SERVER);
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f7ff fc82 	bl	80003b4 <lwiperf_tcp_close>
}
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (pbuf_memcmp(p, 0, &conn->settings, sizeof(lwiperf_settings_t)) != 0) {
 8000ab6:	4639      	mov	r1, r7
 8000ab8:	2318      	movs	r3, #24
 8000aba:	f104 0228 	add.w	r2, r4, #40	; 0x28
 8000abe:	4628      	mov	r0, r5
 8000ac0:	f007 f976 	bl	8007db0 <pbuf_memcmp>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d0d7      	beq.n	8000a78 <lwiperf_tcp_recv+0x140>
 8000ac8:	e755      	b.n	8000976 <lwiperf_tcp_recv+0x3e>
        lwiperf_tx_start_passive(conn);
 8000aca:	4620      	mov	r0, r4
 8000acc:	f7ff ff06 	bl	80008dc <lwiperf_tx_start_passive>
 8000ad0:	e7ea      	b.n	8000aa8 <lwiperf_tcp_recv+0x170>
        lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL);
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	f7ff fc6d 	bl	80003b4 <lwiperf_tcp_close>
        pbuf_free(p);
 8000ada:	4628      	mov	r0, r5
 8000adc:	f007 f85a 	bl	8007b94 <pbuf_free>
        return ERR_OK;
 8000ae0:	e750      	b.n	8000984 <lwiperf_tcp_recv+0x4c>
          err_t err2 = lwiperf_tx_start_passive(conn);
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f7ff fefa 	bl	80008dc <lwiperf_tx_start_passive>
          if (err2 != ERR_OK) {
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d0c5      	beq.n	8000a78 <lwiperf_tcp_recv+0x140>
            lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_LOCAL_TXERROR);
 8000aec:	4620      	mov	r0, r4
 8000aee:	2104      	movs	r1, #4
 8000af0:	f7ff fc60 	bl	80003b4 <lwiperf_tcp_close>
            pbuf_free(p);
 8000af4:	4628      	mov	r0, r5
 8000af6:	f007 f84d 	bl	8007b94 <pbuf_free>
            return ERR_OK;
 8000afa:	e743      	b.n	8000984 <lwiperf_tcp_recv+0x4c>
 8000afc:	0800f078 	.word	0x0800f078
 8000b00:	0800f178 	.word	0x0800f178
 8000b04:	0800f0a0 	.word	0x0800f0a0
 8000b08:	0800f1b0 	.word	0x0800f1b0
 8000b0c:	0800f1cc 	.word	0x0800f1cc
 8000b10:	01000080 	.word	0x01000080

08000b14 <lwiperf_tcp_client_connected>:
{
 8000b14:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000b16:	6903      	ldr	r3, [r0, #16]
{
 8000b18:	4604      	mov	r4, r0
 8000b1a:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid conn", conn->conn_pcb == tpcb);
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d006      	beq.n	8000b2e <lwiperf_tcp_client_connected+0x1a>
 8000b20:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <lwiperf_tcp_client_connected+0x40>)
 8000b22:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8000b26:	490c      	ldr	r1, [pc, #48]	; (8000b58 <lwiperf_tcp_client_connected+0x44>)
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <lwiperf_tcp_client_connected+0x48>)
 8000b2a:	f00d fb6d 	bl	800e208 <iprintf>
  if (err != ERR_OK) {
 8000b2e:	b955      	cbnz	r5, 8000b46 <lwiperf_tcp_client_connected+0x32>
  conn->poll_count = 0;
 8000b30:	f884 5020 	strb.w	r5, [r4, #32]
  conn->time_started = sys_now();
 8000b34:	f003 f842 	bl	8003bbc <sys_now>
 8000b38:	4603      	mov	r3, r0
  return lwiperf_tcp_client_send_more(conn);
 8000b3a:	4620      	mov	r0, r4
  conn->time_started = sys_now();
 8000b3c:	6163      	str	r3, [r4, #20]
}
 8000b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return lwiperf_tcp_client_send_more(conn);
 8000b42:	f7ff bd75 	b.w	8000630 <lwiperf_tcp_client_send_more>
    lwiperf_tcp_close(conn, LWIPERF_TCP_ABORTED_REMOTE);
 8000b46:	4620      	mov	r0, r4
 8000b48:	2105      	movs	r1, #5
 8000b4a:	f7ff fc33 	bl	80003b4 <lwiperf_tcp_close>
}
 8000b4e:	2000      	movs	r0, #0
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	bf00      	nop
 8000b54:	0800f078 	.word	0x0800f078
 8000b58:	0800f168 	.word	0x0800f168
 8000b5c:	0800f0a0 	.word	0x0800f0a0

08000b60 <lwiperf_start_tcp_server_impl.constprop.0>:
    return state;
  }
  return NULL;
}

static err_t lwiperf_start_tcp_server_impl(const ip_addr_t *local_addr, u16_t local_port,
 8000b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b64:	4605      	mov	r5, r0
 8000b66:	460f      	mov	r7, r1
 8000b68:	4690      	mov	r8, r2
 8000b6a:	461e      	mov	r6, r3
{
  err_t err;
  struct tcp_pcb *pcb;
  lwiperf_state_tcp_t *s;

  LWIP_ASSERT_CORE_LOCKED();
 8000b6c:	f003 f9aa 	bl	8003ec4 <sys_check_core_locking>

  LWIP_ASSERT("state != NULL", state != NULL);

  if (local_addr == NULL) {
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d037      	beq.n	8000be4 <lwiperf_start_tcp_server_impl.constprop.0+0x84>
    return ERR_ARG;
  }

  s = (lwiperf_state_tcp_t *)LWIPERF_ALLOC(lwiperf_state_tcp_t);
 8000b74:	2048      	movs	r0, #72	; 0x48
 8000b76:	f006 f959 	bl	8006e2c <mem_malloc>
  if (s == NULL) {
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	b378      	cbz	r0, 8000bde <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  memset(s, 0, sizeof(lwiperf_state_tcp_t));
 8000b7e:	2248      	movs	r2, #72	; 0x48
 8000b80:	2100      	movs	r1, #0
 8000b82:	f00d faa4 	bl	800e0ce <memset>
  s->base.tcp = 1;
  s->base.server = 1;
  s->base.related_master_state = related_master_state;
 8000b86:	9b06      	ldr	r3, [sp, #24]
  s->report_fn = report_fn;
  s->report_arg = report_arg;
 8000b88:	61e6      	str	r6, [r4, #28]

  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b8a:	202e      	movs	r0, #46	; 0x2e
  s->base.related_master_state = related_master_state;
 8000b8c:	60a3      	str	r3, [r4, #8]
  s->base.tcp = 1;
 8000b8e:	f240 1301 	movw	r3, #257	; 0x101
  s->report_fn = report_fn;
 8000b92:	f8c4 8018 	str.w	r8, [r4, #24]
  s->base.tcp = 1;
 8000b96:	80a3      	strh	r3, [r4, #4]
  pcb = tcp_new_ip_type(LWIPERF_SERVER_IP_TYPE);
 8000b98:	f008 fa18 	bl	8008fcc <tcp_new_ip_type>
  if (pcb == NULL) {
 8000b9c:	4606      	mov	r6, r0
 8000b9e:	b1f0      	cbz	r0, 8000bde <lwiperf_start_tcp_server_impl.constprop.0+0x7e>
    return ERR_MEM;
  }
  err = tcp_bind(pcb, local_addr, local_port);
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	463a      	mov	r2, r7
 8000ba4:	f007 f9ca 	bl	8007f3c <tcp_bind>
  if (err != ERR_OK) {
 8000ba8:	4605      	mov	r5, r0
 8000baa:	b110      	cbz	r0, 8000bb2 <lwiperf_start_tcp_server_impl.constprop.0+0x52>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);

  lwiperf_list_add(&s->base);
  *state = s;
  return ERR_OK;
}
 8000bac:	4628      	mov	r0, r5
 8000bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  s->server_pcb = tcp_listen_with_backlog(pcb, 1);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4630      	mov	r0, r6
 8000bb6:	f007 faa3 	bl	8008100 <tcp_listen_with_backlog>
 8000bba:	60e0      	str	r0, [r4, #12]
  if (s->server_pcb == NULL) {
 8000bbc:	b1a8      	cbz	r0, 8000bea <lwiperf_start_tcp_server_impl.constprop.0+0x8a>
  tcp_arg(s->server_pcb, s);
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	f007 fc20 	bl	8008404 <tcp_arg>
  tcp_accept(s->server_pcb, lwiperf_tcp_accept);
 8000bc4:	68e0      	ldr	r0, [r4, #12]
 8000bc6:	490d      	ldr	r1, [pc, #52]	; (8000bfc <lwiperf_start_tcp_server_impl.constprop.0+0x9c>)
 8000bc8:	f007 fc72 	bl	80084b0 <tcp_accept>
  item->next = lwiperf_all_connections;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <lwiperf_start_tcp_server_impl.constprop.0+0xa0>)
}
 8000bce:	4628      	mov	r0, r5
  item->next = lwiperf_all_connections;
 8000bd0:	681a      	ldr	r2, [r3, #0]
  lwiperf_all_connections = item;
 8000bd2:	601c      	str	r4, [r3, #0]
  *state = s;
 8000bd4:	9b07      	ldr	r3, [sp, #28]
  item->next = lwiperf_all_connections;
 8000bd6:	6022      	str	r2, [r4, #0]
  *state = s;
 8000bd8:	601c      	str	r4, [r3, #0]
}
 8000bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 8000bde:	f04f 35ff 	mov.w	r5, #4294967295
 8000be2:	e7e3      	b.n	8000bac <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
    return ERR_ARG;
 8000be4:	f06f 050f 	mvn.w	r5, #15
 8000be8:	e7e0      	b.n	8000bac <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
      tcp_close(pcb);
 8000bea:	4630      	mov	r0, r6
    return ERR_MEM;
 8000bec:	f04f 35ff 	mov.w	r5, #4294967295
      tcp_close(pcb);
 8000bf0:	f008 fac0 	bl	8009174 <tcp_close>
    LWIPERF_FREE(lwiperf_state_tcp_t, s);
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f005 ff6b 	bl	8006ad0 <mem_free>
    return ERR_MEM;
 8000bfa:	e7d7      	b.n	8000bac <lwiperf_start_tcp_server_impl.constprop.0+0x4c>
 8000bfc:	080004c9 	.word	0x080004c9
 8000c00:	240000b0 	.word	0x240000b0

08000c04 <lwiperf_start_tcp_server_default>:
{
 8000c04:	b530      	push	{r4, r5, lr}
 8000c06:	b085      	sub	sp, #20
  lwiperf_state_tcp_t *state = NULL;
 8000c08:	2400      	movs	r4, #0
{
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c0e:	ad03      	add	r5, sp, #12
 8000c10:	f241 3189 	movw	r1, #5001	; 0x1389
 8000c14:	4806      	ldr	r0, [pc, #24]	; (8000c30 <lwiperf_start_tcp_server_default+0x2c>)
  lwiperf_state_tcp_t *state = NULL;
 8000c16:	9403      	str	r4, [sp, #12]
  err = lwiperf_start_tcp_server_impl(local_addr, local_port, report_fn, report_arg,
 8000c18:	e9cd 4500 	strd	r4, r5, [sp]
 8000c1c:	f7ff ffa0 	bl	8000b60 <lwiperf_start_tcp_server_impl.constprop.0>
  if (err == ERR_OK) {
 8000c20:	b910      	cbnz	r0, 8000c28 <lwiperf_start_tcp_server_default+0x24>
    return state;
 8000c22:	9803      	ldr	r0, [sp, #12]
}
 8000c24:	b005      	add	sp, #20
 8000c26:	bd30      	pop	{r4, r5, pc}
  return NULL;
 8000c28:	4620      	mov	r0, r4
}
 8000c2a:	b005      	add	sp, #20
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	bf00      	nop
 8000c30:	08011794 	.word	0x08011794

08000c34 <lwiperf_start_tcp_client>:
 * @returns a connection handle that can be used to abort the client
 *          by calling @ref lwiperf_abort()
 */
void* lwiperf_start_tcp_client(const ip_addr_t* remote_addr, u16_t remote_port,
  enum lwiperf_client_type type, lwiperf_report_fn report_fn, void* report_arg)
{
 8000c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  err_t ret;
  lwiperf_settings_t settings;
  lwiperf_state_tcp_t *state = NULL;

  memset(&settings, 0, sizeof(settings));
  switch (type) {
 8000c38:	2a01      	cmp	r2, #1
{
 8000c3a:	b08c      	sub	sp, #48	; 0x30
  lwiperf_state_tcp_t *state = NULL;
 8000c3c:	f04f 0400 	mov.w	r4, #0
{
 8000c40:	4615      	mov	r5, r2
 8000c42:	4680      	mov	r8, r0
 8000c44:	460f      	mov	r7, r1
 8000c46:	461e      	mov	r6, r3
  lwiperf_state_tcp_t *state = NULL;
 8000c48:	9404      	str	r4, [sp, #16]
  memset(&settings, 0, sizeof(settings));
 8000c4a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8000c4e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8000c52:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  switch (type) {
 8000c56:	d047      	beq.n	8000ce8 <lwiperf_start_tcp_client+0xb4>
 8000c58:	2a02      	cmp	r2, #2
 8000c5a:	d004      	beq.n	8000c66 <lwiperf_start_tcp_client+0x32>
 8000c5c:	b142      	cbz	r2, 8000c70 <lwiperf_start_tcp_client+0x3c>
      }
    }
    return state;
  }
  return NULL;
}
 8000c5e:	4620      	mov	r0, r4
 8000c60:	b00c      	add	sp, #48	; 0x30
 8000c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST);
 8000c66:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8000c6a:	f005 fe6f 	bl	800694c <lwip_htonl>
 8000c6e:	9006      	str	r0, [sp, #24]
  settings.num_threads = htonl(1);
 8000c70:	2001      	movs	r0, #1
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c72:	2400      	movs	r4, #0
  settings.num_threads = htonl(1);
 8000c74:	f005 fe6a 	bl	800694c <lwip_htonl>
 8000c78:	9007      	str	r0, [sp, #28]
  settings.remote_port = htonl(LWIPERF_TCP_PORT_DEFAULT);
 8000c7a:	f241 3089 	movw	r0, #5001	; 0x1389
 8000c7e:	f005 fe65 	bl	800694c <lwip_htonl>
 8000c82:	9008      	str	r0, [sp, #32]
  settings.amount = htonl((u32_t)-1000);
 8000c84:	482c      	ldr	r0, [pc, #176]	; (8000d38 <lwiperf_start_tcp_client+0x104>)
 8000c86:	f005 fe61 	bl	800694c <lwip_htonl>
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  settings.amount = htonl((u32_t)-1000);
 8000c8c:	900b      	str	r0, [sp, #44]	; 0x2c
  ret = lwiperf_tx_start_impl(remote_addr, remote_port, &settings, report_fn, report_arg, NULL, &state);
 8000c8e:	aa06      	add	r2, sp, #24
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	ab04      	add	r3, sp, #16
 8000c94:	4639      	mov	r1, r7
 8000c96:	4640      	mov	r0, r8
 8000c98:	9302      	str	r3, [sp, #8]
 8000c9a:	4633      	mov	r3, r6
 8000c9c:	9401      	str	r4, [sp, #4]
 8000c9e:	f7ff fd8f 	bl	80007c0 <lwiperf_tx_start_impl>
  if (ret == ERR_OK) {
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	d1db      	bne.n	8000c5e <lwiperf_start_tcp_client+0x2a>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000ca6:	9c04      	ldr	r4, [sp, #16]
 8000ca8:	b31c      	cbz	r4, 8000cf2 <lwiperf_start_tcp_client+0xbe>
    if (type != LWIPERF_CLIENT) {
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0d7      	beq.n	8000c5e <lwiperf_start_tcp_client+0x2a>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000cae:	ab05      	add	r3, sp, #20
      lwiperf_state_tcp_t *server = NULL;
 8000cb0:	2700      	movs	r7, #0
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000cb2:	6920      	ldr	r0, [r4, #16]
 8000cb4:	4632      	mov	r2, r6
 8000cb6:	f241 3189 	movw	r1, #5001	; 0x1389
      lwiperf_state_tcp_t *server = NULL;
 8000cba:	9705      	str	r7, [sp, #20]
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000cbc:	e9cd 4300 	strd	r4, r3, [sp]
 8000cc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000cc2:	f7ff ff4d 	bl	8000b60 <lwiperf_start_tcp_server_impl.constprop.0>
      if (ret != ERR_OK) {
 8000cc6:	b9f8      	cbnz	r0, 8000d08 <lwiperf_start_tcp_client+0xd4>
      server->specific_remote = 1;
 8000cc8:	9b05      	ldr	r3, [sp, #20]
 8000cca:	2201      	movs	r2, #1
      server->remote_addr = state->conn_pcb->remote_ip;
 8000ccc:	9c04      	ldr	r4, [sp, #16]
      if (type == LWIPERF_TRADEOFF) {
 8000cce:	2d02      	cmp	r5, #2
      server->specific_remote = 1;
 8000cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      server->remote_addr = state->conn_pcb->remote_ip;
 8000cd4:	6921      	ldr	r1, [r4, #16]
}
 8000cd6:	4620      	mov	r0, r4
      server->remote_addr = state->conn_pcb->remote_ip;
 8000cd8:	6849      	ldr	r1, [r1, #4]
        server->client_tradeoff_mode = 1;
 8000cda:	bf08      	it	eq
 8000cdc:	f883 2022 	strbeq.w	r2, [r3, #34]	; 0x22
      server->remote_addr = state->conn_pcb->remote_ip;
 8000ce0:	6459      	str	r1, [r3, #68]	; 0x44
}
 8000ce2:	b00c      	add	sp, #48	; 0x30
 8000ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    settings.flags = htonl(LWIPERF_FLAGS_ANSWER_TEST | LWIPERF_FLAGS_ANSWER_NOW);
 8000ce8:	4814      	ldr	r0, [pc, #80]	; (8000d3c <lwiperf_start_tcp_client+0x108>)
 8000cea:	f005 fe2f 	bl	800694c <lwip_htonl>
 8000cee:	9006      	str	r0, [sp, #24]
    break;
 8000cf0:	e7be      	b.n	8000c70 <lwiperf_start_tcp_client+0x3c>
    LWIP_ASSERT("state != NULL", state != NULL);
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <lwiperf_start_tcp_client+0x10c>)
 8000cf4:	f240 3216 	movw	r2, #790	; 0x316
 8000cf8:	4912      	ldr	r1, [pc, #72]	; (8000d44 <lwiperf_start_tcp_client+0x110>)
 8000cfa:	4813      	ldr	r0, [pc, #76]	; (8000d48 <lwiperf_start_tcp_client+0x114>)
 8000cfc:	f00d fa84 	bl	800e208 <iprintf>
      ret = lwiperf_start_tcp_server_impl(&state->conn_pcb->local_ip, LWIPERF_TCP_PORT_DEFAULT,
 8000d00:	9c04      	ldr	r4, [sp, #16]
    if (type != LWIPERF_CLIENT) {
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	d0ab      	beq.n	8000c5e <lwiperf_start_tcp_client+0x2a>
 8000d06:	e7d2      	b.n	8000cae <lwiperf_start_tcp_client+0x7a>
        lwiperf_abort(state);
 8000d08:	9d04      	ldr	r5, [sp, #16]
void
lwiperf_abort(void *lwiperf_session)
{
  lwiperf_state_base_t *i, *dealloc, *last = NULL;

  LWIP_ASSERT_CORE_LOCKED();
 8000d0a:	f003 f8db 	bl	8003ec4 <sys_check_core_locking>

  for (i = lwiperf_all_connections; i != NULL; ) {
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <lwiperf_start_tcp_client+0x118>)
 8000d10:	681c      	ldr	r4, [r3, #0]
 8000d12:	b174      	cbz	r4, 8000d32 <lwiperf_start_tcp_client+0xfe>
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d14:	42a5      	cmp	r5, r4
      dealloc = i;
      i = i->next;
      if (last != NULL) {
        last->next = i;
      }
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d16:	4620      	mov	r0, r4
    if ((i == lwiperf_session) || (i->related_master_state == lwiperf_session)) {
 8000d18:	d005      	beq.n	8000d26 <lwiperf_start_tcp_client+0xf2>
 8000d1a:	68a2      	ldr	r2, [r4, #8]
 8000d1c:	4295      	cmp	r5, r2
 8000d1e:	d002      	beq.n	8000d26 <lwiperf_start_tcp_client+0xf2>
    } else {
      last = i;
      i = i->next;
 8000d20:	4627      	mov	r7, r4
 8000d22:	6824      	ldr	r4, [r4, #0]
 8000d24:	e7f5      	b.n	8000d12 <lwiperf_start_tcp_client+0xde>
      i = i->next;
 8000d26:	6824      	ldr	r4, [r4, #0]
      if (last != NULL) {
 8000d28:	b107      	cbz	r7, 8000d2c <lwiperf_start_tcp_client+0xf8>
        last->next = i;
 8000d2a:	603c      	str	r4, [r7, #0]
      LWIPERF_FREE(lwiperf_state_tcp_t, dealloc); /* @todo: type? */
 8000d2c:	f005 fed0 	bl	8006ad0 <mem_free>
 8000d30:	e7ef      	b.n	8000d12 <lwiperf_start_tcp_client+0xde>
        return NULL;
 8000d32:	2400      	movs	r4, #0
 8000d34:	e793      	b.n	8000c5e <lwiperf_start_tcp_client+0x2a>
 8000d36:	bf00      	nop
 8000d38:	fffffc18 	.word	0xfffffc18
 8000d3c:	80000001 	.word	0x80000001
 8000d40:	0800f078 	.word	0x0800f078
 8000d44:	0800f1dc 	.word	0x0800f1dc
 8000d48:	0800f0a0 	.word	0x0800f0a0
 8000d4c:	240000b0 	.word	0x240000b0

08000d50 <lwiperf_start_tcp_client_default>:
{
 8000d50:	b510      	push	{r4, lr}
 8000d52:	4614      	mov	r4, r2
 8000d54:	b082      	sub	sp, #8
 8000d56:	460b      	mov	r3, r1
  return lwiperf_start_tcp_client(remote_addr, LWIPERF_TCP_PORT_DEFAULT, LWIPERF_CLIENT,
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f241 3189 	movw	r1, #5001	; 0x1389
 8000d5e:	9400      	str	r4, [sp, #0]
 8000d60:	f7ff ff68 	bl	8000c34 <lwiperf_start_tcp_client>
}
 8000d64:	b002      	add	sp, #8
 8000d66:	bd10      	pop	{r4, pc}

08000d68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d68:	b500      	push	{lr}
 8000d6a:	b083      	sub	sp, #12
  /* init code for LWIP */
  MX_LWIP_Init();
 8000d6c:	f002 fce8 	bl	8003740 <MX_LWIP_Init>
     * iperf3 is not compatible at all.
     * Adding lwiperf.c file to the project is necessary.
     * The default include path should already contain
     * 'lwip/apps/lwiperf.h'
     */
  	LOCK_TCPIP_CORE();
 8000d70:	f003 f820 	bl	8003db4 <sys_lock_tcpip_core>
    lwiperf_start_tcp_server_default(NULL, NULL);
 8000d74:	2100      	movs	r1, #0
 8000d76:	4608      	mov	r0, r1
 8000d78:	f7ff ff44 	bl	8000c04 <lwiperf_start_tcp_server_default>

    ip4_addr_t remote_addr;
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d7c:	2200      	movs	r2, #0
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <StartDefaultTask+0x30>)
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d80:	a801      	add	r0, sp, #4
 8000d82:	4611      	mov	r1, r2
    IP4_ADDR(&remote_addr, 192, 168, 1, 1);
 8000d84:	9301      	str	r3, [sp, #4]
    lwiperf_start_tcp_client_default(&remote_addr, NULL, NULL);
 8000d86:	f7ff ffe3 	bl	8000d50 <lwiperf_start_tcp_client_default>
    UNLOCK_TCPIP_CORE();
 8000d8a:	f003 f891 	bl	8003eb0 <sys_unlock_tcpip_core>
    /* Infinite loop */
    for(;;)
    {
      osDelay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f003 f960 	bl	8004054 <osDelay>
    for(;;)
 8000d94:	e7fb      	b.n	8000d8e <StartDefaultTask+0x26>
 8000d96:	bf00      	nop
 8000d98:	0101a8c0 	.word	0x0101a8c0

08000d9c <SystemClock_Config>:
{
 8000d9c:	b530      	push	{r4, r5, lr}
 8000d9e:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da0:	224c      	movs	r2, #76	; 0x4c
 8000da2:	2100      	movs	r1, #0
 8000da4:	a809      	add	r0, sp, #36	; 0x24
 8000da6:	f00d f992 	bl	800e0ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000daa:	2220      	movs	r2, #32
 8000dac:	2100      	movs	r1, #0
 8000dae:	a801      	add	r0, sp, #4
 8000db0:	f00d f98d 	bl	800e0ce <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f001 fd99 	bl	80028ec <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dba:	4a1f      	ldr	r2, [pc, #124]	; (8000e38 <SystemClock_Config+0x9c>)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	6993      	ldr	r3, [r2, #24]
 8000dc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	6993      	ldr	r3, [r2, #24]
 8000dca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd2:	6993      	ldr	r3, [r2, #24]
 8000dd4:	0499      	lsls	r1, r3, #18
 8000dd6:	d5fc      	bpl.n	8000dd2 <SystemClock_Config+0x36>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd8:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dda:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ddc:	2508      	movs	r5, #8
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000dde:	2440      	movs	r4, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000de4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000de6:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000de8:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dea:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dec:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000dee:	2210      	movs	r2, #16
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000df0:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000df2:	e9cd 3518 	strd	r3, r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df6:	2300      	movs	r3, #0
 8000df8:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dfa:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000dfe:	237d      	movs	r3, #125	; 0x7d
 8000e00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e04:	f001 fe2e 	bl	8002a64 <HAL_RCC_OscConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b108      	cbz	r0, 8000e10 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e10:	223f      	movs	r2, #63	; 0x3f
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2103      	movs	r1, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e14:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e16:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e1a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	9201      	str	r2, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1e:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e20:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e22:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e26:	e9cd 4306 	strd	r4, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e2a:	f002 f8e9 	bl	8003000 <HAL_RCC_ClockConfig>
 8000e2e:	b108      	cbz	r0, 8000e34 <SystemClock_Config+0x98>
 8000e30:	b672      	cpsid	i
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <SystemClock_Config+0x96>
}
 8000e34:	b01d      	add	sp, #116	; 0x74
 8000e36:	bd30      	pop	{r4, r5, pc}
 8000e38:	58024800 	.word	0x58024800

08000e3c <main>:
{
 8000e3c:	b580      	push	{r7, lr}
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e3e:	2400      	movs	r4, #0
{
 8000e40:	b08c      	sub	sp, #48	; 0x30
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e42:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e44:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000e48:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8000e4c:	f000 fc30 	bl	80016b0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e50:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e54:	f240 1301 	movw	r3, #257	; 0x101
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e58:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e5a:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e5e:	930a      	str	r3, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e60:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e64:	f000 fc42 	bl	80016ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000e68:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000e6c:	4b90      	ldr	r3, [pc, #576]	; (80010b0 <main+0x274>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e6e:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000e70:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000e72:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000e74:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000e78:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e7c:	f000 fc36 	bl	80016ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e80:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000e82:	2308      	movs	r3, #8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e84:	a807      	add	r0, sp, #28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e86:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000e8a:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000e8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e92:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000e96:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e9a:	f000 fc27 	bl	80016ec <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f000 fc14 	bl	80016cc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ea4:	4a83      	ldr	r2, [pc, #524]	; (80010b4 <main+0x278>)
 8000ea6:	6953      	ldr	r3, [r2, #20]
 8000ea8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8000eac:	d111      	bne.n	8000ed2 <main+0x96>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000eb6:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000eba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ebe:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ec2:	6953      	ldr	r3, [r2, #20]
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ece:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ed2:	4878      	ldr	r0, [pc, #480]	; (80010b4 <main+0x278>)
 8000ed4:	6943      	ldr	r3, [r0, #20]
 8000ed6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000eda:	d126      	bne.n	8000f2a <main+0xee>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000edc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ee4:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ee8:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000eec:	f3c4 3c4e 	ubfx	ip, r4, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000ef0:	f3c4 04c9 	ubfx	r4, r4, #3, #10
 8000ef4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ef8:	ea0c 010e 	and.w	r1, ip, lr
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000efc:	4623      	mov	r3, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000efe:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f02:	3b01      	subs	r3, #1
 8000f04:	1c5d      	adds	r5, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f06:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8000f0a:	d1f8      	bne.n	8000efe <main+0xc2>
    } while(sets-- != 0U);
 8000f0c:	f1ac 0c20 	sub.w	ip, ip, #32
 8000f10:	f11c 0f20 	cmn.w	ip, #32
 8000f14:	d1f0      	bne.n	8000ef8 <main+0xbc>
 8000f16:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f1a:	6943      	ldr	r3, [r0, #20]
 8000f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f20:	6143      	str	r3, [r0, #20]
 8000f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f26:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	2400      	movs	r4, #0
  HAL_Init();
 8000f2c:	f000 fb16 	bl	800155c <HAL_Init>
  SystemClock_Config();
 8000f30:	f7ff ff34 	bl	8000d9c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <main+0x27c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f38:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f3c:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2602      	movs	r6, #2
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f42:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000f4a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f52:	f040 0004 	orr.w	r0, r0, #4
 8000f56:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f5a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f5e:	f000 0004 	and.w	r0, r0, #4
 8000f62:	9000      	str	r0, [sp, #0]
 8000f64:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f6a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8000f6e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f72:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f76:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8000f7a:	9001      	str	r0, [sp, #4]
 8000f7c:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f82:	f040 0001 	orr.w	r0, r0, #1
 8000f86:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000f8a:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f8e:	f000 0001 	and.w	r0, r0, #1
 8000f92:	9002      	str	r0, [sp, #8]
 8000f94:	9802      	ldr	r0, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000f9a:	f040 0002 	orr.w	r0, r0, #2
 8000f9e:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fa2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fa6:	f000 0002 	and.w	r0, r0, #2
 8000faa:	9003      	str	r0, [sp, #12]
 8000fac:	9803      	ldr	r0, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fae:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fb2:	f040 0008 	orr.w	r0, r0, #8
 8000fb6:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fba:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fbe:	f000 0008 	and.w	r0, r0, #8
 8000fc2:	9004      	str	r0, [sp, #16]
 8000fc4:	9804      	ldr	r0, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc6:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fca:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8000fce:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fd2:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fd6:	f000 0040 	and.w	r0, r0, #64	; 0x40
 8000fda:	9005      	str	r0, [sp, #20]
 8000fdc:	9805      	ldr	r0, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fde:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8000fe2:	f040 0010 	orr.w	r0, r0, #16
 8000fe6:	f8c3 00e0 	str.w	r0, [r3, #224]	; 0xe0
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000fee:	4833      	ldr	r0, [pc, #204]	; (80010bc <main+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff0:	f003 0310 	and.w	r3, r3, #16
 8000ff4:	9306      	str	r3, [sp, #24]
 8000ff6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ff8:	f001 fc74 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001002:	482f      	ldr	r0, [pc, #188]	; (80010c0 <main+0x284>)
 8001004:	f001 fc6e 	bl	80028e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001008:	4622      	mov	r2, r4
 800100a:	2102      	movs	r1, #2
 800100c:	482d      	ldr	r0, [pc, #180]	; (80010c4 <main+0x288>)
 800100e:	f001 fc69 	bl	80028e4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001012:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001016:	a907      	add	r1, sp, #28
 8001018:	482b      	ldr	r0, [pc, #172]	; (80010c8 <main+0x28c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001020:	f001 fb32 	bl	8002688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001024:	f244 0301 	movw	r3, #16385	; 0x4001
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001028:	a907      	add	r1, sp, #28
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <main+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	e9cd 3507 	strd	r3, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	f001 fb28 	bl	8002688 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001038:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800103c:	a907      	add	r1, sp, #28
 800103e:	4820      	ldr	r0, [pc, #128]	; (80010c0 <main+0x284>)
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001040:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001042:	2307      	movs	r3, #7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001046:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104c:	f001 fb1c 	bl	8002688 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001050:	a907      	add	r1, sp, #28
 8001052:	481b      	ldr	r0, [pc, #108]	; (80010c0 <main+0x284>)
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001054:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	e9cd 5408 	strd	r5, r4, [sp, #32]
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800105c:	f001 fb14 	bl	8002688 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001066:	a907      	add	r1, sp, #28
 8001068:	4818      	ldr	r0, [pc, #96]	; (80010cc <main+0x290>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106c:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001070:	f001 fb0a 	bl	8002688 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001074:	230a      	movs	r3, #10
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001076:	a907      	add	r1, sp, #28
 8001078:	4815      	ldr	r0, [pc, #84]	; (80010d0 <main+0x294>)
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800107a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800107c:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	e9cd 6408 	strd	r6, r4, [sp, #32]
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001084:	f001 fb00 	bl	8002688 <HAL_GPIO_Init>
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001088:	a907      	add	r1, sp, #28
 800108a:	480e      	ldr	r0, [pc, #56]	; (80010c4 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	e9cd 6507 	strd	r6, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001094:	f001 faf8 	bl	8002688 <HAL_GPIO_Init>
  osKernelInitialize();
 8001098:	f002 ff5c 	bl	8003f54 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <main+0x298>)
 800109e:	4621      	mov	r1, r4
 80010a0:	480d      	ldr	r0, [pc, #52]	; (80010d8 <main+0x29c>)
 80010a2:	f002 ff8b 	bl	8003fbc <osThreadNew>
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <main+0x2a0>)
 80010a8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80010aa:	f002 ff65 	bl	8003f78 <osKernelStart>
  while (1)
 80010ae:	e7fe      	b.n	80010ae <main+0x272>
 80010b0:	0301000e 	.word	0x0301000e
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	58024400 	.word	0x58024400
 80010bc:	58020400 	.word	0x58020400
 80010c0:	58020c00 	.word	0x58020c00
 80010c4:	58021000 	.word	0x58021000
 80010c8:	58020800 	.word	0x58020800
 80010cc:	58021800 	.word	0x58021800
 80010d0:	58020000 	.word	0x58020000
 80010d4:	0800f838 	.word	0x0800f838
 80010d8:	08000d69 	.word	0x08000d69
 80010dc:	240000b4 	.word	0x240000b4

080010e0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80010e2:	6802      	ldr	r2, [r0, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d000      	beq.n	80010ea <HAL_TIM_PeriodElapsedCallback+0xa>
}
 80010e8:	4770      	bx	lr
    HAL_IncTick();
 80010ea:	f000 ba67 	b.w	80015bc <HAL_IncTick>
 80010ee:	bf00      	nop
 80010f0:	40001000 	.word	0x40001000

080010f4 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <Error_Handler+0x2>

080010f8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
{
 8001102:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001104:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8001108:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	f044 0402 	orr.w	r4, r4, #2
 800110e:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 8001112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111e:	b003      	add	sp, #12
 8001120:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001124:	f000 ba78 	b.w	8001618 <HAL_NVIC_SetPriority>
 8001128:	58024400 	.word	0x58024400

0800112c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	280f      	cmp	r0, #15
 800112e:	d901      	bls.n	8001134 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001130:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001132:	4770      	bx	lr
{
 8001134:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001136:	4601      	mov	r1, r0
{
 8001138:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800113a:	2200      	movs	r2, #0
 800113c:	4604      	mov	r4, r0
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f000 fa6a 	bl	8001618 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 faa5 	bl	8001694 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
 800114c:	4a1a      	ldr	r2, [pc, #104]	; (80011b8 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800114e:	4669      	mov	r1, sp
 8001150:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001152:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001154:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001158:	f042 0210 	orr.w	r2, r2, #16
 800115c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800116c:	f002 f8c2 	bl	80032f4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001170:	9b07      	ldr	r3, [sp, #28]
 8001172:	b9bb      	cbnz	r3, 80011a4 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001174:	f002 f8ac 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
 800117a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 800117c:	4c10      	ldr	r4, [pc, #64]	; (80011c0 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800117e:	fba3 0300 	umull	r0, r3, r3, r0
  htim6.Instance = TIM6;
 8001182:	4910      	ldr	r1, [pc, #64]	; (80011c4 <HAL_InitTick+0x98>)
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001184:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001188:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
 800118a:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800118c:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001190:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001192:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001196:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001198:	f002 fa98 	bl	80036cc <HAL_TIM_Base_Init>
 800119c:	b130      	cbz	r0, 80011ac <HAL_InitTick+0x80>
    return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
}
 80011a0:	b00a      	add	sp, #40	; 0x28
 80011a2:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011a4:	f002 f894 	bl	80032d0 <HAL_RCC_GetPCLK1Freq>
 80011a8:	0040      	lsls	r0, r0, #1
 80011aa:	e7e5      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f002 f8cf 	bl	8003350 <HAL_TIM_Base_Start_IT>
 80011b2:	e7f5      	b.n	80011a0 <HAL_InitTick+0x74>
 80011b4:	58024400 	.word	0x58024400
 80011b8:	2400000c 	.word	0x2400000c
 80011bc:	431bde83 	.word	0x431bde83
 80011c0:	240000b8 	.word	0x240000b8
 80011c4:	40001000 	.word	0x40001000

080011c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler>
 80011ca:	bf00      	nop

080011cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <HardFault_Handler>
 80011ce:	bf00      	nop

080011d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler>
 80011d2:	bf00      	nop

080011d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <BusFault_Handler>
 80011d6:	bf00      	nop

080011d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler>
 80011da:	bf00      	nop

080011dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop

080011e0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011e0:	4801      	ldr	r0, [pc, #4]	; (80011e8 <TIM6_DAC_IRQHandler+0x8>)
 80011e2:	f002 b925 	b.w	8003430 <HAL_TIM_IRQHandler>
 80011e6:	bf00      	nop
 80011e8:	240000b8 	.word	0x240000b8

080011ec <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011ec:	4801      	ldr	r0, [pc, #4]	; (80011f4 <ETH_IRQHandler+0x8>)
 80011ee:	f000 bee5 	b.w	8001fbc <HAL_ETH_IRQHandler>
 80011f2:	bf00      	nop
 80011f4:	240001e0 	.word	0x240001e0

080011f8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011f8:	2001      	movs	r0, #1
 80011fa:	4770      	bx	lr

080011fc <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <_kill+0xc>)
 80011fe:	2216      	movs	r2, #22
	return -1;
}
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8001204:	601a      	str	r2, [r3, #0]
}
 8001206:	4770      	bx	lr
 8001208:	240106f0 	.word	0x240106f0

0800120c <_exit>:
	errno = EINVAL;
 800120c:	4b01      	ldr	r3, [pc, #4]	; (8001214 <_exit+0x8>)
 800120e:	2216      	movs	r2, #22
 8001210:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001212:	e7fe      	b.n	8001212 <_exit+0x6>
 8001214:	240106f0 	.word	0x240106f0

08001218 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	1e16      	subs	r6, r2, #0
 800121c:	dd07      	ble.n	800122e <_read+0x16>
 800121e:	460c      	mov	r4, r1
 8001220:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001222:	f3af 8000 	nop.w
 8001226:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	42a5      	cmp	r5, r4
 800122c:	d1f9      	bne.n	8001222 <_read+0xa>
	}

return len;
}
 800122e:	4630      	mov	r0, r6
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	bf00      	nop

08001234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001234:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	1e16      	subs	r6, r2, #0
 8001238:	dd07      	ble.n	800124a <_write+0x16>
 800123a:	460c      	mov	r4, r1
 800123c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 800123e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001242:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	42a5      	cmp	r5, r4
 8001248:	d1f9      	bne.n	800123e <_write+0xa>
	}
	return len;
}
 800124a:	4630      	mov	r0, r6
 800124c:	bd70      	pop	{r4, r5, r6, pc}
 800124e:	bf00      	nop

08001250 <_close>:

int _close(int file)
{
	return -1;
}
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800125c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800125e:	604b      	str	r3, [r1, #4]
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001264:	2001      	movs	r0, #1
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001268:	2000      	movs	r0, #0
 800126a:	4770      	bx	lr

0800126c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800126c:	490d      	ldr	r1, [pc, #52]	; (80012a4 <_sbrk+0x38>)
{
 800126e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a0d      	ldr	r2, [pc, #52]	; (80012a8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8001272:	6808      	ldr	r0, [r1, #0]
{
 8001274:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001276:	4c0d      	ldr	r4, [pc, #52]	; (80012ac <_sbrk+0x40>)
 8001278:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800127a:	b170      	cbz	r0, 800129a <_sbrk+0x2e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800127c:	4403      	add	r3, r0
 800127e:	4293      	cmp	r3, r2
 8001280:	d803      	bhi.n	800128a <_sbrk+0x1e>

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001282:	f85d 4b04 	ldr.w	r4, [sp], #4
  __sbrk_heap_end += incr;
 8001286:	600b      	str	r3, [r1, #0]
}
 8001288:	4770      	bx	lr
    errno = ENOMEM;
 800128a:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <_sbrk+0x44>)
 800128c:	220c      	movs	r2, #12
    return (void *)-1;
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001292:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001296:	601a      	str	r2, [r3, #0]
}
 8001298:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800129a:	4c06      	ldr	r4, [pc, #24]	; (80012b4 <_sbrk+0x48>)
 800129c:	4620      	mov	r0, r4
 800129e:	600c      	str	r4, [r1, #0]
 80012a0:	e7ec      	b.n	800127c <_sbrk+0x10>
 80012a2:	bf00      	nop
 80012a4:	24000104 	.word	0x24000104
 80012a8:	24050000 	.word	0x24050000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	240106f0 	.word	0x240106f0
 80012b4:	24015088 	.word	0x24015088

080012b8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012b8:	4922      	ldr	r1, [pc, #136]	; (8001344 <SystemInit+0x8c>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <SystemInit+0x90>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012bc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80012c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80012c4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ca:	6813      	ldr	r3, [r2, #0]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d805      	bhi.n	80012e0 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012d4:	6813      	ldr	r3, [r2, #0]
 80012d6:	f023 030f 	bic.w	r3, r3, #15
 80012da:	f043 0307 	orr.w	r3, r3, #7
 80012de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <SystemInit+0x94>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e2:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e4:	4a1a      	ldr	r2, [pc, #104]	; (8001350 <SystemInit+0x98>)
  RCC->CR |= RCC_CR_HSION;
 80012e6:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012e8:	4817      	ldr	r0, [pc, #92]	; (8001348 <SystemInit+0x90>)
  RCC->CR |= RCC_CR_HSION;
 80012ea:	f041 0101 	orr.w	r1, r1, #1
 80012ee:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80012f0:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	400a      	ands	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	071b      	lsls	r3, r3, #28
 80012fc:	d505      	bpl.n	800130a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	f023 030f 	bic.w	r3, r3, #15
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <SystemInit+0x94>)
 800130c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800130e:	4911      	ldr	r1, [pc, #68]	; (8001354 <SystemInit+0x9c>)
  RCC->PLLCKSELR = 0x02020200;
 8001310:	4c11      	ldr	r4, [pc, #68]	; (8001358 <SystemInit+0xa0>)
  RCC->PLLCFGR = 0x01FF0000;
 8001312:	4812      	ldr	r0, [pc, #72]	; (800135c <SystemInit+0xa4>)
  RCC->D1CFGR = 0x00000000;
 8001314:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8001316:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8001318:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800131a:	629c      	str	r4, [r3, #40]	; 0x28
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800131c:	f243 04d2 	movw	r4, #12498	; 0x30d2
  RCC->PLLCFGR = 0x01FF0000;
 8001320:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8001322:	6319      	str	r1, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x01010280;
 8001326:	6399      	str	r1, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8001328:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x01010280;
 800132a:	6419      	str	r1, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800132e:	6819      	ldr	r1, [r3, #0]
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <SystemInit+0xa8>)
  RCC->CR &= 0xFFFBFFFFU;
 8001332:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001336:	6019      	str	r1, [r3, #0]
  RCC->CIER = 0x00000000;
 8001338:	661a      	str	r2, [r3, #96]	; 0x60
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800133a:	6004      	str	r4, [r0, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800133c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00
 8001348:	52002000 	.word	0x52002000
 800134c:	58024400 	.word	0x58024400
 8001350:	eaf6ed7f 	.word	0xeaf6ed7f
 8001354:	01010280 	.word	0x01010280
 8001358:	02020200 	.word	0x02020200
 800135c:	01ff0000 	.word	0x01ff0000
 8001360:	52004000 	.word	0x52004000

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001368:	f7ff ffa6 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001392:	f00c fe57 	bl	800e044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fd51 	bl	8000e3c <main>
  bx  lr
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013a4:	24000094 	.word	0x24000094
  ldr r2, =_sidata
 80013a8:	08011ae8 	.word	0x08011ae8
  ldr r2, =_sbss
 80013ac:	24000094 	.word	0x24000094
  ldr r4, =_ebss
 80013b0:	24015084 	.word	0x24015084

080013b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC3_IRQHandler>
	...

080013b8 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013b8:	b188      	cbz	r0, 80013de <LAN8742_RegisterBusIO+0x26>
 80013ba:	68ca      	ldr	r2, [r1, #12]
 80013bc:	b17a      	cbz	r2, 80013de <LAN8742_RegisterBusIO+0x26>
{
 80013be:	b430      	push	{r4, r5}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80013c0:	688c      	ldr	r4, [r1, #8]
 80013c2:	b17c      	cbz	r4, 80013e4 <LAN8742_RegisterBusIO+0x2c>
 80013c4:	690d      	ldr	r5, [r1, #16]
 80013c6:	b16d      	cbz	r5, 80013e4 <LAN8742_RegisterBusIO+0x2c>
 80013c8:	4603      	mov	r3, r0
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 80013ca:	6808      	ldr	r0, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80013cc:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80013ce:	6098      	str	r0, [r3, #8]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
  
  return LAN8742_STATUS_OK;
 80013d0:	2000      	movs	r0, #0
  pObj->IO.ReadReg = ioctx->ReadReg;
 80013d2:	615a      	str	r2, [r3, #20]
  pObj->IO.GetTick = ioctx->GetTick;
 80013d4:	619d      	str	r5, [r3, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80013d6:	e9c3 1403 	strd	r1, r4, [r3, #12]
}
 80013da:	bc30      	pop	{r4, r5}
 80013dc:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
}
 80013e2:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	e7f7      	b.n	80013da <LAN8742_RegisterBusIO+0x22>
 80013ea:	bf00      	nop

080013ec <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013ec:	b570      	push	{r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013ee:	2300      	movs	r3, #0
 {
 80013f0:	b082      	sub	sp, #8
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 80013f2:	6844      	ldr	r4, [r0, #4]
 {
 80013f4:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013f6:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 80013f8:	2c00      	cmp	r4, #0
 80013fa:	d146      	bne.n	800148a <LAN8742_Init+0x9e>
   {
     if(pObj->IO.Init != 0)
 80013fc:	6883      	ldr	r3, [r0, #8]
 80013fe:	b103      	cbz	r3, 8001402 <LAN8742_Init+0x16>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001400:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001402:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8001404:	2600      	movs	r6, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001406:	602b      	str	r3, [r5, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001408:	e007      	b.n	800141a <LAN8742_Init+0x2e>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800140a:	9b01      	ldr	r3, [sp, #4]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	42a3      	cmp	r3, r4
 8001412:	d016      	beq.n	8001442 <LAN8742_Init+0x56>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001414:	3401      	adds	r4, #1
 8001416:	2c20      	cmp	r4, #32
 8001418:	d00b      	beq.n	8001432 <LAN8742_Init+0x46>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800141a:	4620      	mov	r0, r4
 800141c:	696b      	ldr	r3, [r5, #20]
 800141e:	aa01      	add	r2, sp, #4
 8001420:	2112      	movs	r1, #18
 8001422:	4798      	blx	r3
 8001424:	2800      	cmp	r0, #0
 8001426:	daf0      	bge.n	800140a <LAN8742_Init+0x1e>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001428:	3401      	adds	r4, #1
         status = LAN8742_STATUS_READ_ERROR;
 800142a:	f06f 0604 	mvn.w	r6, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800142e:	2c20      	cmp	r4, #32
 8001430:	d1f3      	bne.n	800141a <LAN8742_Init+0x2e>
         status = LAN8742_STATUS_OK;
         break;
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001432:	682c      	ldr	r4, [r5, #0]
 8001434:	2c1f      	cmp	r4, #31
 8001436:	d937      	bls.n	80014a8 <LAN8742_Init+0xbc>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001438:	f06f 0602 	mvn.w	r6, #2
     }
     pObj->Is_Initialized = 1;
   }
   
   return status;
 }
 800143c:	4630      	mov	r0, r6
 800143e:	b002      	add	sp, #8
 8001440:	bd70      	pop	{r4, r5, r6, pc}
         pObj->DevAddr = addr;
 8001442:	602c      	str	r4, [r5, #0]
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001444:	692b      	ldr	r3, [r5, #16]
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	4620      	mov	r0, r4
 800144c:	2100      	movs	r1, #0
 800144e:	4798      	blx	r3
 8001450:	2800      	cmp	r0, #0
 8001452:	db2c      	blt.n	80014ae <LAN8742_Init+0xc2>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001454:	696b      	ldr	r3, [r5, #20]
 8001456:	aa01      	add	r2, sp, #4
 8001458:	2100      	movs	r1, #0
 800145a:	6828      	ldr	r0, [r5, #0]
 800145c:	4798      	blx	r3
 800145e:	2800      	cmp	r0, #0
 8001460:	db2b      	blt.n	80014ba <LAN8742_Init+0xce>
           tickstart = pObj->IO.GetTick();
 8001462:	69ab      	ldr	r3, [r5, #24]
 8001464:	4798      	blx	r3
 8001466:	4604      	mov	r4, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001468:	e00c      	b.n	8001484 <LAN8742_Init+0x98>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800146a:	69ab      	ldr	r3, [r5, #24]
 800146c:	4798      	blx	r3
 800146e:	1b00      	subs	r0, r0, r4
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001470:	aa01      	add	r2, sp, #4
 8001472:	2100      	movs	r1, #0
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001474:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001478:	d81c      	bhi.n	80014b4 <LAN8742_Init+0xc8>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800147a:	696b      	ldr	r3, [r5, #20]
 800147c:	6828      	ldr	r0, [r5, #0]
 800147e:	4798      	blx	r3
 8001480:	2800      	cmp	r0, #0
 8001482:	db1a      	blt.n	80014ba <LAN8742_Init+0xce>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001484:	9b01      	ldr	r3, [sp, #4]
 8001486:	041b      	lsls	r3, r3, #16
 8001488:	d4ef      	bmi.n	800146a <LAN8742_Init+0x7e>
     tickstart =  pObj->IO.GetTick();
 800148a:	69ab      	ldr	r3, [r5, #24]
 800148c:	4798      	blx	r3
 800148e:	4604      	mov	r4, r0
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001490:	69ab      	ldr	r3, [r5, #24]
 8001492:	4798      	blx	r3
 8001494:	1b03      	subs	r3, r0, r4
 8001496:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800149a:	d9f9      	bls.n	8001490 <LAN8742_Init+0xa4>
     pObj->Is_Initialized = 1;
 800149c:	2301      	movs	r3, #1
 800149e:	2600      	movs	r6, #0
 80014a0:	606b      	str	r3, [r5, #4]
 }
 80014a2:	4630      	mov	r0, r6
 80014a4:	b002      	add	sp, #8
 80014a6:	bd70      	pop	{r4, r5, r6, pc}
     if(status == LAN8742_STATUS_OK)
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d1fa      	bne.n	80014a2 <LAN8742_Init+0xb6>
 80014ac:	e7ca      	b.n	8001444 <LAN8742_Init+0x58>
         status = LAN8742_STATUS_WRITE_ERROR;
 80014ae:	f06f 0603 	mvn.w	r6, #3
 80014b2:	e7f6      	b.n	80014a2 <LAN8742_Init+0xb6>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014b4:	f06f 0601 	mvn.w	r6, #1
   return status;
 80014b8:	e7f3      	b.n	80014a2 <LAN8742_Init+0xb6>
           status = LAN8742_STATUS_READ_ERROR;
 80014ba:	f06f 0604 	mvn.w	r6, #4
 80014be:	e7f0      	b.n	80014a2 <LAN8742_Init+0xb6>

080014c0 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80014c0:	b530      	push	{r4, r5, lr}
  uint32_t readval = 0;
 80014c2:	2500      	movs	r5, #0
{
 80014c4:	b083      	sub	sp, #12
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014c6:	6943      	ldr	r3, [r0, #20]
{
 80014c8:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014ca:	aa01      	add	r2, sp, #4
 80014cc:	2101      	movs	r1, #1
 80014ce:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80014d0:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014d2:	4798      	blx	r3
 80014d4:	42a8      	cmp	r0, r5
 80014d6:	db3d      	blt.n	8001554 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80014d8:	6963      	ldr	r3, [r4, #20]
 80014da:	aa01      	add	r2, sp, #4
 80014dc:	2101      	movs	r1, #1
 80014de:	6820      	ldr	r0, [r4, #0]
 80014e0:	4798      	blx	r3
 80014e2:	2800      	cmp	r0, #0
 80014e4:	db36      	blt.n	8001554 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80014e6:	9b01      	ldr	r3, [sp, #4]
 80014e8:	075b      	lsls	r3, r3, #29
 80014ea:	d52a      	bpl.n	8001542 <LAN8742_GetLinkState+0x82>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80014ec:	6963      	ldr	r3, [r4, #20]
 80014ee:	aa01      	add	r2, sp, #4
 80014f0:	4629      	mov	r1, r5
 80014f2:	6820      	ldr	r0, [r4, #0]
 80014f4:	4798      	blx	r3
 80014f6:	2800      	cmp	r0, #0
 80014f8:	db2c      	blt.n	8001554 <LAN8742_GetLinkState+0x94>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80014fa:	9b01      	ldr	r3, [sp, #4]
 80014fc:	04dd      	lsls	r5, r3, #19
 80014fe:	d514      	bpl.n	800152a <LAN8742_GetLinkState+0x6a>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001500:	6963      	ldr	r3, [r4, #20]
 8001502:	aa01      	add	r2, sp, #4
 8001504:	211f      	movs	r1, #31
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	4798      	blx	r3
 800150a:	2800      	cmp	r0, #0
 800150c:	db22      	blt.n	8001554 <LAN8742_GetLinkState+0x94>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	04da      	lsls	r2, r3, #19
 8001512:	d51d      	bpl.n	8001550 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001514:	f003 031c 	and.w	r3, r3, #28
 8001518:	2b18      	cmp	r3, #24
 800151a:	d017      	beq.n	800154c <LAN8742_GetLinkState+0x8c>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800151c:	2b08      	cmp	r3, #8
 800151e:	d013      	beq.n	8001548 <LAN8742_GetLinkState+0x88>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001520:	2b14      	cmp	r3, #20
 8001522:	d10b      	bne.n	800153c <LAN8742_GetLinkState+0x7c>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001524:	2004      	movs	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8001526:	b003      	add	sp, #12
 8001528:	bd30      	pop	{r4, r5, pc}
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800152a:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 800152e:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8001532:	d00b      	beq.n	800154c <LAN8742_GetLinkState+0x8c>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001534:	0498      	lsls	r0, r3, #18
 8001536:	d407      	bmi.n	8001548 <LAN8742_GetLinkState+0x88>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001538:	05d9      	lsls	r1, r3, #23
 800153a:	d4f3      	bmi.n	8001524 <LAN8742_GetLinkState+0x64>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800153c:	2005      	movs	r0, #5
}
 800153e:	b003      	add	sp, #12
 8001540:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_LINK_DOWN;    
 8001542:	2001      	movs	r0, #1
}
 8001544:	b003      	add	sp, #12
 8001546:	bd30      	pop	{r4, r5, pc}
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001548:	2003      	movs	r0, #3
 800154a:	e7f8      	b.n	800153e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800154c:	2002      	movs	r0, #2
 800154e:	e7f6      	b.n	800153e <LAN8742_GetLinkState+0x7e>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001550:	2006      	movs	r0, #6
 8001552:	e7f4      	b.n	800153e <LAN8742_GetLinkState+0x7e>
    return LAN8742_STATUS_READ_ERROR;
 8001554:	f06f 0004 	mvn.w	r0, #4
 8001558:	e7f1      	b.n	800153e <LAN8742_GetLinkState+0x7e>
 800155a:	bf00      	nop

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155e:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001560:	4c12      	ldr	r4, [pc, #72]	; (80015ac <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001562:	f000 f847 	bl	80015f4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001566:	f001 fd29 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_Init+0x54>)
 800156c:	4911      	ldr	r1, [pc, #68]	; (80015b4 <HAL_Init+0x58>)
 800156e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001570:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001572:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001576:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800157a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800157c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800157e:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001584:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001588:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800158a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800158e:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001590:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001592:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001594:	f7ff fdca 	bl	800112c <HAL_InitTick>
 8001598:	b110      	cbz	r0, 80015a0 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800159a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800159c:	4620      	mov	r0, r4
 800159e:	bd10      	pop	{r4, pc}
 80015a0:	4604      	mov	r4, r0
  HAL_MspInit();
 80015a2:	f7ff fda9 	bl	80010f8 <HAL_MspInit>
}
 80015a6:	4620      	mov	r0, r4
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	24000004 	.word	0x24000004
 80015b0:	58024400 	.word	0x58024400
 80015b4:	0800f85c 	.word	0x0800f85c
 80015b8:	24000000 	.word	0x24000000

080015bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <HAL_IncTick+0x10>)
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <HAL_IncTick+0x14>)
 80015c0:	6811      	ldr	r1, [r2, #0]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	440b      	add	r3, r1
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	24000108 	.word	0x24000108
 80015d0:	24000008 	.word	0x24000008

080015d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_GetTick+0x8>)
 80015d6:	6818      	ldr	r0, [r3, #0]
}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	24000108 	.word	0x24000108

080015e0 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015e0:	4a03      	ldr	r2, [pc, #12]	; (80015f0 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 80015e2:	6853      	ldr	r3, [r2, #4]
 80015e4:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80015e8:	4318      	orrs	r0, r3
 80015ea:	6050      	str	r0, [r2, #4]
}
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	58000400 	.word	0x58000400

080015f4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4906      	ldr	r1, [pc, #24]	; (8001610 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fa:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015fe:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001604:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800160a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800160c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_NVIC_SetPriority+0x70>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001622:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162a:	f1be 0f04 	cmp.w	lr, #4
 800162e:	bf28      	it	cs
 8001630:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001634:	f1bc 0f06 	cmp.w	ip, #6
 8001638:	d91a      	bls.n	8001670 <HAL_NVIC_SetPriority+0x58>
 800163a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 3cff 	mov.w	ip, #4294967295
 8001640:	fa0c fc03 	lsl.w	ip, ip, r3
 8001644:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
 800164c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001652:	ea21 010c 	bic.w	r1, r1, ip
 8001656:	fa01 f103 	lsl.w	r1, r1, r3
 800165a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800165e:	db0a      	blt.n	8001676 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	0109      	lsls	r1, r1, #4
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_NVIC_SetPriority+0x74>)
 8001664:	b2c9      	uxtb	r1, r1
 8001666:	4403      	add	r3, r0
 8001668:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800166c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001670:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	4613      	mov	r3, r2
 8001674:	e7e8      	b.n	8001648 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	f000 000f 	and.w	r0, r0, #15
 800167a:	0109      	lsls	r1, r1, #4
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <HAL_NVIC_SetPriority+0x78>)
 800167e:	b2c9      	uxtb	r1, r1
 8001680:	4403      	add	r3, r0
 8001682:	7619      	strb	r1, [r3, #24]
 8001684:	f85d fb04 	ldr.w	pc, [sp], #4
 8001688:	e000ed00 	.word	0xe000ed00
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ecfc 	.word	0xe000ecfc

08001694 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001694:	2800      	cmp	r0, #0
 8001696:	db07      	blt.n	80016a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001698:	2301      	movs	r3, #1
 800169a:	f000 011f 	and.w	r1, r0, #31
 800169e:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_NVIC_EnableIRQ+0x18>)
 80016a0:	0940      	lsrs	r0, r0, #5
 80016a2:	408b      	lsls	r3, r1
 80016a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016b0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016b6:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80016c0:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_MPU_Enable+0x1c>)
 80016ce:	f040 0001 	orr.w	r0, r0, #1
 80016d2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80016d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80016de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016e2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_MPU_ConfigRegion+0x60>)
 80016ee:	7843      	ldrb	r3, [r0, #1]
 80016f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80016f4:	7801      	ldrb	r1, [r0, #0]
 80016f6:	b321      	cbz	r1, 8001742 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80016f8:	6843      	ldr	r3, [r0, #4]
{
 80016fa:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
 80016fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001700:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001702:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001706:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001708:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800170c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001710:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001714:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001716:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001718:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800171c:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001720:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001724:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001728:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800172c:	7a01      	ldrb	r1, [r0, #8]
 800172e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8001732:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8001736:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800173a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800173e:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
 8001742:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8001746:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <ETH_SetMACConfig>:
               macconf->BackOffLimit |
               ((uint32_t)macconf->DeferralCheck << 4) |
               macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001750:	6802      	ldr	r2, [r0, #0]
 8001752:	688b      	ldr	r3, [r1, #8]
 8001754:	6808      	ldr	r0, [r1, #0]
 8001756:	4303      	orrs	r3, r0
 8001758:	6948      	ldr	r0, [r1, #20]
 800175a:	4303      	orrs	r3, r0
 800175c:	6988      	ldr	r0, [r1, #24]
 800175e:	4303      	orrs	r3, r0
 8001760:	6a48      	ldr	r0, [r1, #36]	; 0x24
{
 8001762:	b470      	push	{r4, r5, r6}
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001764:	4303      	orrs	r3, r0
 8001766:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8001768:	6810      	ldr	r0, [r2, #0]
 800176a:	4333      	orrs	r3, r6
 800176c:	4e56      	ldr	r6, [pc, #344]	; (80018c8 <ETH_SetMACConfig+0x178>)
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800176e:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001770:	4030      	ands	r0, r6
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001772:	7f0c      	ldrb	r4, [r1, #28]
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001774:	7f8e      	ldrb	r6, [r1, #30]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001776:	4303      	orrs	r3, r0
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001778:	7b08      	ldrb	r0, [r1, #12]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800177a:	ea43 63c5 	orr.w	r3, r3, r5, lsl #27
               ((uint32_t)macconf->DeferralCheck << 4) |
 800177e:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001782:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001786:	7b48      	ldrb	r0, [r1, #13]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001788:	ea43 5380 	orr.w	r3, r3, r0, lsl #22
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800178c:	7b88      	ldrb	r0, [r1, #14]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800178e:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001792:	7bc8      	ldrb	r0, [r1, #15]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001794:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
               ((uint32_t)macconf->JumboPacket << 16) |
 8001798:	7c88      	ldrb	r0, [r1, #18]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800179a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800179e:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017a0:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80017a4:	7f4c      	ldrb	r4, [r1, #29]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017a6:	ea43 23c4 	orr.w	r3, r3, r4, lsl #11
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017aa:	7c0c      	ldrb	r4, [r1, #16]
 80017ac:	2c00      	cmp	r4, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80017ae:	7fcc      	ldrb	r4, [r1, #31]
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017b0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80017b4:	bf0c      	ite	eq
 80017b6:	f44f 2400 	moveq.w	r4, #524288	; 0x80000
 80017ba:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017c0:	7c4d      	ldrb	r5, [r1, #17]
 80017c2:	2d00      	cmp	r5, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017c4:	ea43 0304 	orr.w	r3, r3, r4
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017c8:	f891 5020 	ldrb.w	r5, [r1, #32]
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80017cc:	bf0c      	ite	eq
 80017ce:	f44f 3400 	moveq.w	r4, #131072	; 0x20000
 80017d2:	2400      	movne	r4, #0
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017d4:	2e00      	cmp	r6, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017d6:	ea43 0304 	orr.w	r3, r3, r4
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80017da:	bf0c      	ite	eq
 80017dc:	f44f 6480 	moveq.w	r4, #1024	; 0x400
 80017e0:	2400      	movne	r4, #0
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017e2:	2d00      	cmp	r5, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
               macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017e4:	4d39      	ldr	r5, [pc, #228]	; (80018cc <ETH_SetMACConfig+0x17c>)
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017e6:	ea43 0304 	orr.w	r3, r3, r4
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80017ea:	bf0c      	ite	eq
 80017ec:	f44f 7480 	moveq.w	r4, #256	; 0x100
 80017f0:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017f2:	4323      	orrs	r3, r4
 80017f4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017f6:	6853      	ldr	r3, [r2, #4]
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80017f8:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80017fc:	402b      	ands	r3, r5
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80017fe:	f891 5031 	ldrb.w	r5, [r1, #49]	; 0x31
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001802:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001806:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8001808:	4303      	orrs	r3, r0
  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
               macconf->WatchdogTimeout);

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800180a:	4831      	ldr	r0, [pc, #196]	; (80018d0 <ETH_SetMACConfig+0x180>)
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800180c:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001810:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001814:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001818:	f891 4032 	ldrb.w	r4, [r1, #50]	; 0x32
 800181c:	2c00      	cmp	r4, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800181e:	ea43 4345 	orr.w	r3, r3, r5, lsl #17
               macconf->PauseLowThreshold |
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
               (macconf->PauseTime << 16));

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001822:	f64f 750d 	movw	r5, #65293	; 0xff0d
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001826:	bf0c      	ite	eq
 8001828:	f44f 3480 	moveq.w	r4, #65536	; 0x10000
 800182c:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800182e:	4323      	orrs	r3, r4
 8001830:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001832:	68d4      	ldr	r4, [r2, #12]
 8001834:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8001836:	4020      	ands	r0, r4
               macconf->PauseLowThreshold |
 8001838:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800183a:	6d8e      	ldr	r6, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800183c:	4318      	orrs	r0, r3
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800183e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001842:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001846:	60d0      	str	r0, [r2, #12]
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001848:	6f13      	ldr	r3, [r2, #112]	; 0x70
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800184a:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800184e:	402b      	ands	r3, r5
               (macconf->PauseTime << 16));
 8001850:	6c8d      	ldr	r5, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001852:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001856:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001858:	4323      	orrs	r3, r4
 800185a:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800185e:	f891 004c 	ldrb.w	r0, [r1, #76]	; 0x4c
 8001862:	2800      	cmp	r0, #0
 8001864:	bf0c      	ite	eq
 8001866:	2080      	moveq	r0, #128	; 0x80
 8001868:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800186a:	4303      	orrs	r3, r0
 800186c:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800186e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001872:	f891 4056 	ldrb.w	r4, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001876:	f023 0303 	bic.w	r3, r3, #3
 800187a:	431c      	orrs	r4, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800187c:	f891 3055 	ldrb.w	r3, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001880:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8001884:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001888:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 800188c:	f020 0072 	bic.w	r0, r0, #114	; 0x72
 8001890:	4330      	orrs	r0, r6
 8001892:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001896:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800189a:	f891 4060 	ldrb.w	r4, [r1, #96]	; 0x60
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800189e:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80018a2:	f891 0062 	ldrb.w	r0, [r1, #98]	; 0x62
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018a6:	f891 1061 	ldrb.w	r1, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018aa:	2c00      	cmp	r4, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018ac:	ea43 0305 	orr.w	r3, r3, r5
 80018b0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018b4:	bf0c      	ite	eq
 80018b6:	2140      	moveq	r1, #64	; 0x40
 80018b8:	2100      	movne	r1, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018ba:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 80018be:	430b      	orrs	r3, r1
}
 80018c0:	bc70      	pop	{r4, r5, r6}
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80018c2:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 80018c6:	4770      	bx	lr
 80018c8:	00048083 	.word	0x00048083
 80018cc:	c0f88000 	.word	0xc0f88000
 80018d0:	fffffef0 	.word	0xfffffef0

080018d4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80018d8:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80018da:	b083      	sub	sp, #12
 80018dc:	eb00 0984 	add.w	r9, r0, r4, lsl #2
 80018e0:	9201      	str	r2, [sp, #4]
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80018e2:	f8d9 3018 	ldr.w	r3, [r9, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	f2c0 8125 	blt.w	8001b38 <ETH_Prepare_Tx_Descriptors+0x264>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80018ee:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	f040 8120 	bne.w	8001b38 <ETH_Prepare_Tx_Descriptors+0x264>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80018f8:	f8d1 c000 	ldr.w	ip, [r1]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80018fc:	688e      	ldr	r6, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80018fe:	f01c 0704 	ands.w	r7, ip, #4
 8001902:	d02d      	beq.n	8001960 <ETH_Prepare_Tx_Descriptors+0x8c>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001904:	68da      	ldr	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8001906:	f01c 0f08 	tst.w	ip, #8
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800190a:	4dae      	ldr	r5, [pc, #696]	; (8001bc4 <ETH_Prepare_Tx_Descriptors+0x2f0>)
 800190c:	ea05 0502 	and.w	r5, r5, r2
 8001910:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001912:	ea42 0205 	orr.w	r2, r2, r5
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001916:	6805      	ldr	r5, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001918:	60da      	str	r2, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001920:	60da      	str	r2, [r3, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8001922:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8001924:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001928:	662a      	str	r2, [r5, #96]	; 0x60
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800192a:	d019      	beq.n	8001960 <ETH_Prepare_Tx_Descriptors+0x8c>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	fa1f fe82 	uxth.w	lr, r2
 8001932:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001934:	ea4e 4202 	orr.w	r2, lr, r2, lsl #16
 8001938:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001940:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	f422 2e40 	bic.w	lr, r2, #786432	; 0xc0000
 8001948:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800194a:	ea4e 0202 	orr.w	r2, lr, r2
 800194e:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001950:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001952:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001956:	666a      	str	r2, [r5, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8001958:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800195a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800195e:	652a      	str	r2, [r5, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001960:	f01c 0810 	ands.w	r8, ip, #16
 8001964:	d009      	beq.n	800197a <ETH_Prepare_Tx_Descriptors+0xa6>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4d97      	ldr	r5, [pc, #604]	; (8001bc8 <ETH_Prepare_Tx_Descriptors+0x2f4>)
 800196a:	4015      	ands	r5, r2
 800196c:	698a      	ldr	r2, [r1, #24]
 800196e:	432a      	orrs	r2, r5
 8001970:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001978:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800197a:	f01c 0f14 	tst.w	ip, #20
 800197e:	f040 80df 	bne.w	8001b40 <ETH_Prepare_Tx_Descriptors+0x26c>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001982:	4622      	mov	r2, r4
 8001984:	f04f 0e01 	mov.w	lr, #1
  /***************************************************************************/

  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001988:	6835      	ldr	r5, [r6, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800198a:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8001bc8 <ETH_Prepare_Tx_Descriptors+0x2f4>
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800198e:	601d      	str	r5, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001990:	689d      	ldr	r5, [r3, #8]
 8001992:	ea05 0a0a 	and.w	sl, r5, sl
 8001996:	6875      	ldr	r5, [r6, #4]
 8001998:	ea4a 0505 	orr.w	r5, sl, r5
 800199c:	609d      	str	r5, [r3, #8]

  if (txbuffer->next != NULL)
 800199e:	68b5      	ldr	r5, [r6, #8]
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	f000 8133 	beq.w	8001c0c <ETH_Prepare_Tx_Descriptors+0x338>
  {
    txbuffer = txbuffer->next;
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80019a6:	682e      	ldr	r6, [r5, #0]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80019a8:	f8df a220 	ldr.w	sl, [pc, #544]	; 8001bcc <ETH_Prepare_Tx_Descriptors+0x2f8>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80019ac:	605e      	str	r6, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80019ae:	689e      	ldr	r6, [r3, #8]
 80019b0:	ea06 0a0a 	and.w	sl, r6, sl
 80019b4:	686e      	ldr	r6, [r5, #4]
 80019b6:	ea4a 4606 	orr.w	r6, sl, r6, lsl #16
 80019ba:	609e      	str	r6, [r3, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80019bc:	68de      	ldr	r6, [r3, #12]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80019be:	f1b8 0f00 	cmp.w	r8, #0
 80019c2:	f000 80e0 	beq.w	8001b86 <ETH_Prepare_Tx_Descriptors+0x2b2>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80019c6:	f426 0cf0 	bic.w	ip, r6, #7864320	; 0x780000
 80019ca:	6a0e      	ldr	r6, [r1, #32]
 80019cc:	ea4c 46c6 	orr.w	r6, ip, r6, lsl #19
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80019d0:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8001bd0 <ETH_Prepare_Tx_Descriptors+0x2fc>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80019d4:	60de      	str	r6, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80019d6:	68de      	ldr	r6, [r3, #12]
 80019d8:	ea06 0c0c 	and.w	ip, r6, ip
 80019dc:	69ce      	ldr	r6, [r1, #28]
 80019de:	ea4c 0606 	orr.w	r6, ip, r6
 80019e2:	60de      	str	r6, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80019e4:	68de      	ldr	r6, [r3, #12]
 80019e6:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80019ea:	60de      	str	r6, [r3, #12]
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80019ec:	b12f      	cbz	r7, 80019fa <ETH_Prepare_Tx_Descriptors+0x126>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80019ee:	689f      	ldr	r7, [r3, #8]
 80019f0:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80019f2:	f427 4740 	bic.w	r7, r7, #49152	; 0xc000
 80019f6:	433e      	orrs	r6, r7
 80019f8:	609e      	str	r6, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80019fa:	68de      	ldr	r6, [r3, #12]
 80019fc:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001a00:	60de      	str	r6, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001a02:	68de      	ldr	r6, [r3, #12]
 8001a04:	f026 4680 	bic.w	r6, r6, #1073741824	; 0x40000000
 8001a08:	60de      	str	r6, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0a:	f3bf 8f5f 	dmb	sy
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001a0e:	68de      	ldr	r6, [r3, #12]
 8001a10:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8001a14:	60de      	str	r6, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8001a16:	680e      	ldr	r6, [r1, #0]
 8001a18:	07b6      	lsls	r6, r6, #30
 8001a1a:	d505      	bpl.n	8001a28 <ETH_Prepare_Tx_Descriptors+0x154>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001a1c:	68df      	ldr	r7, [r3, #12]
 8001a1e:	68ce      	ldr	r6, [r1, #12]
 8001a20:	f027 7760 	bic.w	r7, r7, #58720256	; 0x3800000
 8001a24:	433e      	orrs	r6, r7
 8001a26:	60de      	str	r6, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001a28:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8001a2c:	f1b8 0f00 	cmp.w	r8, #0
 8001a30:	f000 80d2 	beq.w	8001bd8 <ETH_Prepare_Tx_Descriptors+0x304>
 8001a34:	f04f 0c00 	mov.w	ip, #0
    txbuffer = txbuffer->next;

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001a38:	4d63      	ldr	r5, [pc, #396]	; (8001bc8 <ETH_Prepare_Tx_Descriptors+0x2f4>)
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001a3a:	4e64      	ldr	r6, [pc, #400]	; (8001bcc <ETH_Prepare_Tx_Descriptors+0x2f8>)
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001a3c:	46a2      	mov	sl, r4
 8001a3e:	e01d      	b.n	8001a7c <ETH_Prepare_Tx_Descriptors+0x1a8>
 8001a40:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8001bd0 <ETH_Prepare_Tx_Descriptors+0x2fc>
 8001a44:	ea04 0808 	and.w	r8, r4, r8
 8001a48:	69cc      	ldr	r4, [r1, #28]
 8001a4a:	ea48 0404 	orr.w	r4, r8, r4
 8001a4e:	60dc      	str	r4, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8001a50:	68dc      	ldr	r4, [r3, #12]
 8001a52:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8001a56:	60dc      	str	r4, [r3, #12]
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
      }
    }

    bd_count += 1U;
 8001a58:	f10c 0c01 	add.w	ip, ip, #1
 8001a5c:	f3bf 8f5f 	dmb	sy

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001a60:	68dc      	ldr	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001a62:	f8d7 8008 	ldr.w	r8, [r7, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001a66:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8001a6a:	60dc      	str	r4, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001a6c:	68dc      	ldr	r4, [r3, #12]
 8001a6e:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 8001a72:	60dc      	str	r4, [r3, #12]
  while (txbuffer->next != NULL)
 8001a74:	f1b8 0f00 	cmp.w	r8, #0
 8001a78:	f000 80af 	beq.w	8001bda <ETH_Prepare_Tx_Descriptors+0x306>
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001a7c:	68dc      	ldr	r4, [r3, #12]
 8001a7e:	eb0e 0b0c 	add.w	fp, lr, ip
 8001a82:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
 8001a86:	60dc      	str	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001a88:	1c53      	adds	r3, r2, #1
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	bf94      	ite	ls
 8001a8e:	461a      	movls	r2, r3
 8001a90:	3a03      	subhi	r2, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001a92:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8001a96:	69bb      	ldr	r3, [r7, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001a98:	68dc      	ldr	r4, [r3, #12]
 8001a9a:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8001a9e:	60dc      	str	r4, [r3, #12]
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8001aa0:	68dc      	ldr	r4, [r3, #12]
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	db30      	blt.n	8001b08 <ETH_Prepare_Tx_Descriptors+0x234>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001aa6:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001aa8:	bb74      	cbnz	r4, 8001b08 <ETH_Prepare_Tx_Descriptors+0x234>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8001aae:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001ab0:	689f      	ldr	r7, [r3, #8]
 8001ab2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8001ab6:	402f      	ands	r7, r5
 8001ab8:	433c      	orrs	r4, r7
    if (txbuffer->next != NULL)
 8001aba:	f8d8 7008 	ldr.w	r7, [r8, #8]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001abe:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 8001ac0:	2f00      	cmp	r7, #0
 8001ac2:	d05a      	beq.n	8001b7a <ETH_Prepare_Tx_Descriptors+0x2a6>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001ac4:	683c      	ldr	r4, [r7, #0]
 8001ac6:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001ac8:	689c      	ldr	r4, [r3, #8]
 8001aca:	ea04 0806 	and.w	r8, r4, r6
 8001ace:	687c      	ldr	r4, [r7, #4]
 8001ad0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8001ad4:	609c      	str	r4, [r3, #8]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001ad6:	f8d1 8000 	ldr.w	r8, [r1]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8001ada:	68dc      	ldr	r4, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001adc:	f018 0f10 	tst.w	r8, #16
 8001ae0:	d1ae      	bne.n	8001a40 <ETH_Prepare_Tx_Descriptors+0x16c>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001ae2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8001bd4 <ETH_Prepare_Tx_Descriptors+0x300>
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001ae6:	f018 0f01 	tst.w	r8, #1
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001aea:	ea04 0b0b 	and.w	fp, r4, fp
 8001aee:	684c      	ldr	r4, [r1, #4]
 8001af0:	ea4b 0404 	orr.w	r4, fp, r4
 8001af4:	60dc      	str	r4, [r3, #12]
      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001af6:	d0af      	beq.n	8001a58 <ETH_Prepare_Tx_Descriptors+0x184>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001af8:	68dc      	ldr	r4, [r3, #12]
 8001afa:	f424 3840 	bic.w	r8, r4, #196608	; 0x30000
 8001afe:	694c      	ldr	r4, [r1, #20]
 8001b00:	ea48 0404 	orr.w	r4, r8, r4
 8001b04:	60dc      	str	r4, [r3, #12]
 8001b06:	e7a7      	b.n	8001a58 <ETH_Prepare_Tx_Descriptors+0x184>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b08:	4654      	mov	r4, sl
 8001b0a:	f8d9 2018 	ldr.w	r2, [r9, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001b0e:	f1bb 0f00 	cmp.w	fp, #0
 8001b12:	d011      	beq.n	8001b38 <ETH_Prepare_Tx_Descriptors+0x264>
 8001b14:	2100      	movs	r1, #0
 8001b16:	f3bf 8f5f 	dmb	sy
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001b1a:	1c65      	adds	r5, r4, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001b1c:	68d3      	ldr	r3, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001b1e:	3c03      	subs	r4, #3
      for (idx = 0; idx < descnbr; idx ++)
 8001b20:	3101      	adds	r1, #1
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001b22:	2d03      	cmp	r5, #3
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001b24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b28:	bf98      	it	ls
 8001b2a:	462c      	movls	r4, r5
 8001b2c:	60d3      	str	r3, [r2, #12]
      for (idx = 0; idx < descnbr; idx ++)
 8001b2e:	4559      	cmp	r1, fp
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b30:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001b34:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8001b36:	d1ee      	bne.n	8001b16 <ETH_Prepare_Tx_Descriptors+0x242>
    return HAL_ETH_ERROR_BUSY;
 8001b38:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8001b3a:	b003      	add	sp, #12
 8001b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	60da      	str	r2, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001b54:	1c62      	adds	r2, r4, #1
 8001b56:	2a03      	cmp	r2, #3
 8001b58:	bf88      	it	hi
 8001b5a:	1ee2      	subhi	r2, r4, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001b5c:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001b60:	699b      	ldr	r3, [r3, #24]
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8001b62:	68dd      	ldr	r5, [r3, #12]
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	db5f      	blt.n	8001c28 <ETH_Prepare_Tx_Descriptors+0x354>
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001b68:	f8d1 c000 	ldr.w	ip, [r1]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001b6c:	f04f 0e02 	mov.w	lr, #2
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8001b70:	f00c 0810 	and.w	r8, ip, #16
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8001b74:	f00c 0704 	and.w	r7, ip, #4
 8001b78:	e706      	b.n	8001988 <ETH_Prepare_Tx_Descriptors+0xb4>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001b7a:	605f      	str	r7, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001b7c:	4647      	mov	r7, r8
 8001b7e:	689c      	ldr	r4, [r3, #8]
 8001b80:	4034      	ands	r4, r6
 8001b82:	609c      	str	r4, [r3, #8]
 8001b84:	e7a7      	b.n	8001ad6 <ETH_Prepare_Tx_Descriptors+0x202>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001b86:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8001bd4 <ETH_Prepare_Tx_Descriptors+0x300>
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001b8a:	f01c 0f01 	tst.w	ip, #1
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001b8e:	ea06 0808 	and.w	r8, r6, r8
 8001b92:	684e      	ldr	r6, [r1, #4]
 8001b94:	ea48 0606 	orr.w	r6, r8, r6
 8001b98:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8001b9a:	d006      	beq.n	8001baa <ETH_Prepare_Tx_Descriptors+0x2d6>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001b9c:	68de      	ldr	r6, [r3, #12]
 8001b9e:	f426 3840 	bic.w	r8, r6, #196608	; 0x30000
 8001ba2:	694e      	ldr	r6, [r1, #20]
 8001ba4:	ea48 0606 	orr.w	r6, r8, r6
 8001ba8:	60de      	str	r6, [r3, #12]
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8001baa:	f01c 0f20 	tst.w	ip, #32
 8001bae:	f43f af1d 	beq.w	80019ec <ETH_Prepare_Tx_Descriptors+0x118>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8001bb2:	68de      	ldr	r6, [r3, #12]
 8001bb4:	f026 6c40 	bic.w	ip, r6, #201326592	; 0xc000000
 8001bb8:	690e      	ldr	r6, [r1, #16]
 8001bba:	ea4c 0606 	orr.w	r6, ip, r6
 8001bbe:	60de      	str	r6, [r3, #12]
 8001bc0:	e714      	b.n	80019ec <ETH_Prepare_Tx_Descriptors+0x118>
 8001bc2:	bf00      	nop
 8001bc4:	ffff0000 	.word	0xffff0000
 8001bc8:	ffffc000 	.word	0xffffc000
 8001bcc:	c000ffff 	.word	0xc000ffff
 8001bd0:	fffc0000 	.word	0xfffc0000
 8001bd4:	ffff8000 	.word	0xffff8000
  while (txbuffer->next != NULL)
 8001bd8:	46c4      	mov	ip, r8
  if (ItMode != ((uint32_t)RESET))
 8001bda:	9901      	ldr	r1, [sp, #4]
 8001bdc:	b1f9      	cbz	r1, 8001c1e <ETH_Prepare_Tx_Descriptors+0x34a>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001be4:	6099      	str	r1, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001be6:	68d9      	ldr	r1, [r3, #12]
 8001be8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001bec:	60d9      	str	r1, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001bee:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 8001bf2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001bf4:	62d9      	str	r1, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8001bf6:	6282      	str	r2, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf8:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001bfa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4463      	add	r3, ip
 8001c00:	6403      	str	r3, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c02:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 8001c04:	2000      	movs	r0, #0
}
 8001c06:	b003      	add	sp, #12
 8001c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c0c:	605d      	str	r5, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8001c0e:	4635      	mov	r5, r6
 8001c10:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8001c14:	4e09      	ldr	r6, [pc, #36]	; (8001c3c <ETH_Prepare_Tx_Descriptors+0x368>)
 8001c16:	ea0a 0606 	and.w	r6, sl, r6
 8001c1a:	609e      	str	r6, [r3, #8]
 8001c1c:	e6ce      	b.n	80019bc <ETH_Prepare_Tx_Descriptors+0xe8>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001c24:	6099      	str	r1, [r3, #8]
 8001c26:	e7de      	b.n	8001be6 <ETH_Prepare_Tx_Descriptors+0x312>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8001c28:	f8d9 2018 	ldr.w	r2, [r9, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c2c:	f3bf 8f5f 	dmb	sy
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001c30:	68d3      	ldr	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001c32:	2002      	movs	r0, #2
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8001c34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c38:	60d3      	str	r3, [r2, #12]
      return HAL_ETH_ERROR_BUSY;
 8001c3a:	e77e      	b.n	8001b3a <ETH_Prepare_Tx_Descriptors+0x266>
 8001c3c:	c000ffff 	.word	0xc000ffff

08001c40 <ETH_UpdateDescriptor>:
{
 8001c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8001c44:	2300      	movs	r3, #0
{
 8001c46:	b083      	sub	sp, #12
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c48:	e9d0 461a 	ldrd	r4, r6, [r0, #104]	; 0x68
  uint8_t *buff = NULL;
 8001c4c:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c4e:	f104 0312 	add.w	r3, r4, #18
 8001c52:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c56:	b37e      	cbz	r6, 8001cb8 <ETH_UpdateDescriptor+0x78>
 8001c58:	4607      	mov	r7, r0
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c5a:	f04f 4901 	mov.w	r9, #2164260864	; 0x81000000
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001c5e:	f04f 4841 	mov.w	r8, #3238002688	; 0xc1000000
 8001c62:	e00c      	b.n	8001c7e <ETH_UpdateDescriptor+0x3e>
 8001c64:	f8c5 800c 	str.w	r8, [r5, #12]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c68:	1c63      	adds	r3, r4, #1
 8001c6a:	3c03      	subs	r4, #3
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	bf98      	it	ls
 8001c70:	461c      	movls	r4, r3
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c72:	3e01      	subs	r6, #1
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c74:	f104 0312 	add.w	r3, r4, #18
 8001c78:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c7c:	d011      	beq.n	8001ca2 <ETH_UpdateDescriptor+0x62>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c7e:	692b      	ldr	r3, [r5, #16]
 8001c80:	b13b      	cbz	r3, 8001c92 <ETH_UpdateDescriptor+0x52>
 8001c82:	f3bf 8f5f 	dmb	sy
      if (heth->RxDescList.ItMode != 0U)
 8001c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1eb      	bne.n	8001c64 <ETH_UpdateDescriptor+0x24>
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c8c:	f8c5 900c 	str.w	r9, [r5, #12]
 8001c90:	e7ea      	b.n	8001c68 <ETH_UpdateDescriptor+0x28>
      HAL_ETH_RxAllocateCallback(&buff);
 8001c92:	a801      	add	r0, sp, #4
 8001c94:	f002 f838 	bl	8003d08 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	b113      	cbz	r3, 8001ca2 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c9c:	612b      	str	r3, [r5, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001c9e:	602b      	str	r3, [r5, #0]
 8001ca0:	e7ef      	b.n	8001c82 <ETH_UpdateDescriptor+0x42>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca4:	42b3      	cmp	r3, r6
 8001ca6:	d007      	beq.n	8001cb8 <ETH_UpdateDescriptor+0x78>
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001cb4:	e9c7 461a 	strd	r4, r6, [r7, #104]	; 0x68
}
 8001cb8:	b003      	add	sp, #12
 8001cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cbe:	bf00      	nop

08001cc0 <HAL_ETH_Start_IT>:
{
 8001cc0:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001cc2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d001      	beq.n	8001cce <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 8001cca:	2001      	movs	r0, #1
}
 8001ccc:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001cce:	6803      	ldr	r3, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cd0:	2523      	movs	r5, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cd6:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 8001cda:	6582      	str	r2, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001cdc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_ETH_Start_IT+0x98>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_ETH_Start_IT+0x9c>)
 8001cea:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001cf8:	f7ff ffa2 	bl	8001c40 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001cfc:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8001cfe:	2000      	movs	r0, #0
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d00:	6811      	ldr	r1, [r2, #0]
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d02:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d06:	f041 0102 	orr.w	r1, r1, #2
 8001d0a:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d0c:	6811      	ldr	r1, [r2, #0]
 8001d0e:	f041 0101 	orr.w	r1, r1, #1
 8001d12:	6011      	str	r1, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001d14:	f8d2 1d00 	ldr.w	r1, [r2, #3328]	; 0xd00
 8001d18:	f041 0101 	orr.w	r1, r1, #1
 8001d1c:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d20:	f24d 02c1 	movw	r2, #53441	; 0xd0c1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d24:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8001d28:	f041 0101 	orr.w	r1, r1, #1
 8001d2c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d30:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8001d34:	f041 0101 	orr.w	r1, r1, #1
 8001d38:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001d3c:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8001d40:	f441 7181 	orr.w	r1, r1, #258	; 0x102
 8001d44:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d48:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    heth->gState = HAL_ETH_STATE_STARTED;
 8001d52:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8001d56:	bd38      	pop	{r3, r4, r5, pc}
 8001d58:	0c020060 	.word	0x0c020060
 8001d5c:	0c20c000 	.word	0x0c20c000

08001d60 <HAL_ETH_Stop_IT>:
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d60:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001d64:	2a23      	cmp	r2, #35	; 0x23
 8001d66:	d001      	beq.n	8001d6c <HAL_ETH_Stop_IT+0xc>
    return HAL_ERROR;
 8001d68:	2001      	movs	r0, #1
}
 8001d6a:	4770      	bx	lr
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4603      	mov	r3, r0
{
 8001d70:	b430      	push	{r4, r5}
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d72:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001d76:	f103 0c58 	add.w	ip, r3, #88	; 0x58
 8001d7a:	f851 2b48 	ldr.w	r2, [r1], #72
 8001d7e:	4c19      	ldr	r4, [pc, #100]	; (8001de4 <HAL_ETH_Stop_IT+0x84>)
 8001d80:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 8001d84:	f8d0 5134 	ldr.w	r5, [r0, #308]	; 0x134
 8001d88:	402c      	ands	r4, r5
 8001d8a:	f8c0 4134 	str.w	r4, [r0, #308]	; 0x134
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001d8e:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
 8001d92:	f024 0401 	bic.w	r4, r4, #1
 8001d96:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001d9a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
 8001d9e:	f024 0401 	bic.w	r4, r4, #1
 8001da2:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001da6:	6810      	ldr	r0, [r2, #0]
 8001da8:	f020 0001 	bic.w	r0, r0, #1
 8001dac:	6010      	str	r0, [r2, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001dae:	f8d2 0d00 	ldr.w	r0, [r2, #3328]	; 0xd00
 8001db2:	f040 0001 	orr.w	r0, r0, #1
 8001db6:	f8c2 0d00 	str.w	r0, [r2, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001dba:	6810      	ldr	r0, [r2, #0]
 8001dbc:	f020 0002 	bic.w	r0, r0, #2
 8001dc0:	6010      	str	r0, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001dc2:	f851 0b04 	ldr.w	r0, [r1], #4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001dc6:	68c2      	ldr	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dc8:	4561      	cmp	r1, ip
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001dca:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001dce:	60c2      	str	r2, [r0, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001dd0:	d1f7      	bne.n	8001dc2 <HAL_ETH_Stop_IT+0x62>
    heth->RxDescList.ItMode = 0U;
 8001dd2:	2200      	movs	r2, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001dd4:	2110      	movs	r1, #16
    return HAL_OK;
 8001dd6:	4610      	mov	r0, r2
    heth->RxDescList.ItMode = 0U;
 8001dd8:	659a      	str	r2, [r3, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001dda:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}
 8001dde:	bc30      	pop	{r4, r5}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	ffff2f3e 	.word	0xffff2f3e

08001de8 <HAL_ETH_Transmit_IT>:
{
 8001de8:	b510      	push	{r4, lr}
 8001dea:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001dec:	b329      	cbz	r1, 8001e3a <HAL_ETH_Transmit_IT+0x52>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001dee:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8001df2:	2a23      	cmp	r2, #35	; 0x23
 8001df4:	d001      	beq.n	8001dfa <HAL_ETH_Transmit_IT+0x12>
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
}
 8001df8:	bd10      	pop	{r4, pc}
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001dfa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001dfc:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001dfe:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e00:	f7ff fd68 	bl	80018d4 <ETH_Prepare_Tx_Descriptors>
 8001e04:	b138      	cbz	r0, 8001e16 <HAL_ETH_Transmit_IT+0x2e>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e06:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001e0a:	2001      	movs	r0, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001e14:	bd10      	pop	{r4, pc}
  __ASM volatile ("dsb 0xF":::"memory");
 8001e16:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    return HAL_OK;
 8001e1c:	2000      	movs	r0, #0
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e1e:	1c53      	adds	r3, r2, #1
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	bf88      	it	hi
 8001e24:	1ed3      	subhi	r3, r2, #3
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e26:	6822      	ldr	r2, [r4, #0]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001e28:	62a3      	str	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001e2a:	3306      	adds	r3, #6
 8001e2c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8001e30:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001e34:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
}
 8001e38:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e3a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e40:	4303      	orrs	r3, r0
 8001e42:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001e46:	bd10      	pop	{r4, pc}

08001e48 <HAL_ETH_ReadData>:
{
 8001e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	4604      	mov	r4, r0
  if (pAppBuff == NULL)
 8001e50:	9103      	str	r1, [sp, #12]
 8001e52:	2900      	cmp	r1, #0
 8001e54:	d06e      	beq.n	8001f34 <HAL_ETH_ReadData+0xec>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e56:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001e5a:	2b23      	cmp	r3, #35	; 0x23
 8001e5c:	d15f      	bne.n	8001f1e <HAL_ETH_ReadData+0xd6>
  descidx = heth->RxDescList.RxDescIdx;
 8001e5e:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e62:	f108 0312 	add.w	r3, r8, #18
 8001e66:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e6a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e6c:	68ea      	ldr	r2, [r5, #12]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001e6e:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e72:	2a00      	cmp	r2, #0
 8001e74:	db6b      	blt.n	8001f4e <HAL_ETH_ReadData+0x106>
         && (rxdataready == 0U))
 8001e76:	f1bb 0f00 	cmp.w	fp, #0
 8001e7a:	d06a      	beq.n	8001f52 <HAL_ETH_ReadData+0x10a>
  uint32_t desccnt = 0U;
 8001e7c:	f04f 0900 	mov.w	r9, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e80:	f100 0180 	add.w	r1, r0, #128	; 0x80
 8001e84:	307c      	adds	r0, #124	; 0x7c
      dmarxdesc->BackupAddr0 = 0;
 8001e86:	46ca      	mov	sl, r9
 8001e88:	e023      	b.n	8001ed2 <HAL_ETH_ReadData+0x8a>
      bufflength = heth->Init.RxBuffLen;
 8001e8a:	6967      	ldr	r7, [r4, #20]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e8c:	b2bb      	uxth	r3, r7
 8001e8e:	692a      	ldr	r2, [r5, #16]
 8001e90:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e94:	f001 ff5c 	bl	8003d50 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001e98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	6623      	str	r3, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ea0:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
 8001ea4:	443b      	add	r3, r7
 8001ea6:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001ea8:	f8c5 a010 	str.w	sl, [r5, #16]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001eac:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8001eb0:	f109 0901 	add.w	r9, r9, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	bf8c      	ite	hi
 8001eb8:	f1a8 0803 	subhi.w	r8, r8, #3
 8001ebc:	4698      	movls	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ebe:	f108 0312 	add.w	r3, r8, #18
 8001ec2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ec6:	68eb      	ldr	r3, [r5, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	db21      	blt.n	8001f10 <HAL_ETH_ReadData+0xc8>
         && (rxdataready == 0U))
 8001ecc:	45cb      	cmp	fp, r9
 8001ece:	d91f      	bls.n	8001f10 <HAL_ETH_ReadData+0xc8>
 8001ed0:	b9f6      	cbnz	r6, 8001f10 <HAL_ETH_ReadData+0xc8>
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ed2:	68eb      	ldr	r3, [r5, #12]
 8001ed4:	005e      	lsls	r6, r3, #1
 8001ed6:	d503      	bpl.n	8001ee0 <HAL_ETH_ReadData+0x98>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001ed8:	686b      	ldr	r3, [r5, #4]
 8001eda:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001ee0:	68eb      	ldr	r3, [r5, #12]
 8001ee2:	009a      	lsls	r2, r3, #2
 8001ee4:	d402      	bmi.n	8001eec <HAL_ETH_ReadData+0xa4>
 8001ee6:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
 8001ee8:	2e00      	cmp	r6, #0
 8001eea:	d0df      	beq.n	8001eac <HAL_ETH_ReadData+0x64>
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001eec:	68eb      	ldr	r3, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001eee:	68ee      	ldr	r6, [r5, #12]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ef0:	009b      	lsls	r3, r3, #2
        heth->RxDescList.RxDataLength = 0;
 8001ef2:	bf48      	it	mi
 8001ef4:	e9c4 aa18 	strdmi	sl, sl, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001ef8:	f016 5680 	ands.w	r6, r6, #268435456	; 0x10000000
 8001efc:	d0c5      	beq.n	8001e8a <HAL_ETH_ReadData+0x42>
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001efe:	68ef      	ldr	r7, [r5, #12]
        rxdataready = 1;
 8001f00:	2601      	movs	r6, #1
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001f02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f04:	f3c7 070e 	ubfx	r7, r7, #0, #15
 8001f08:	1aff      	subs	r7, r7, r3
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001f0a:	68eb      	ldr	r3, [r5, #12]
 8001f0c:	6723      	str	r3, [r4, #112]	; 0x70
        rxdataready = 1;
 8001f0e:	e7bd      	b.n	8001e8c <HAL_ETH_ReadData+0x44>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001f12:	444b      	add	r3, r9
 8001f14:	66e3      	str	r3, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f16:	b9b3      	cbnz	r3, 8001f46 <HAL_ETH_ReadData+0xfe>
  heth->RxDescList.RxDescIdx = descidx;
 8001f18:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001f1c:	b91e      	cbnz	r6, 8001f26 <HAL_ETH_ReadData+0xde>
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
}
 8001f20:	b005      	add	sp, #20
 8001f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8001f28:	2300      	movs	r3, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f2a:	9903      	ldr	r1, [sp, #12]
    return HAL_OK;
 8001f2c:	4618      	mov	r0, r3
    *pAppBuff = heth->RxDescList.pRxStart;
 8001f2e:	600a      	str	r2, [r1, #0]
    heth->RxDescList.pRxStart = NULL;
 8001f30:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8001f32:	e7f5      	b.n	8001f20 <HAL_ETH_ReadData+0xd8>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f34:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001f38:	2001      	movs	r0, #1
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 8001f40:	b005      	add	sp, #20
 8001f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ETH_UpdateDescriptor(heth);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f7ff fe7a 	bl	8001c40 <ETH_UpdateDescriptor>
 8001f4c:	e7e4      	b.n	8001f18 <HAL_ETH_ReadData+0xd0>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0e5      	beq.n	8001f1e <HAL_ETH_ReadData+0xd6>
    ETH_UpdateDescriptor(heth);
 8001f52:	f7ff fe75 	bl	8001c40 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8001f56:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8001f5a:	e7e0      	b.n	8001f1e <HAL_ETH_ReadData+0xd6>

08001f5c <HAL_ETH_ReleaseTxPacket>:
{
 8001f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001f60:	e9d0 5410 	ldrd	r5, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f64:	b17d      	cbz	r5, 8001f86 <HAL_ETH_ReleaseTxPacket+0x2a>
 8001f66:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f68:	2700      	movs	r7, #0
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001f6a:	eb06 0884 	add.w	r8, r6, r4, lsl #2
    numOfBuf--;
 8001f6e:	3d01      	subs	r5, #1
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001f70:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001f74:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8001f78:	b140      	cbz	r0, 8001f8c <HAL_ETH_ReleaseTxPacket+0x30>
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001f7a:	68f3      	ldr	r3, [r6, #12]
 8001f7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	da08      	bge.n	8001f98 <HAL_ETH_ReleaseTxPacket+0x3c>
}
 8001f86:	2000      	movs	r0, #0
 8001f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f8c:	3401      	adds	r4, #1
 8001f8e:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f92:	2d00      	cmp	r5, #0
 8001f94:	d1e9      	bne.n	8001f6a <HAL_ETH_ReleaseTxPacket+0xe>
 8001f96:	e7f6      	b.n	8001f86 <HAL_ETH_ReleaseTxPacket+0x2a>
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f98:	3401      	adds	r4, #1
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001f9a:	f001 ff09 	bl	8003db0 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f9e:	f8c8 702c 	str.w	r7, [r8, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fa2:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001fa6:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8001fa8:	6474      	str	r4, [r6, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d1dd      	bne.n	8001f6a <HAL_ETH_ReleaseTxPacket+0xe>
 8001fae:	e7ea      	b.n	8001f86 <HAL_ETH_ReleaseTxPacket+0x2a>

08001fb0 <HAL_ETH_PMTCallback>:
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop

08001fb4 <HAL_ETH_EEECallback>:
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop

08001fb8 <HAL_ETH_WakeUpCallback>:
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001fbc:	6803      	ldr	r3, [r0, #0]
 8001fbe:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001fc2:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8001fc6:	0649      	lsls	r1, r1, #25
{
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001fcc:	d504      	bpl.n	8001fd8 <HAL_ETH_IRQHandler+0x1c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001fce:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8001fd2:	0649      	lsls	r1, r1, #25
 8001fd4:	f100 808a 	bmi.w	80020ec <HAL_ETH_IRQHandler+0x130>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001fd8:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8001fdc:	07c8      	lsls	r0, r1, #31
 8001fde:	d503      	bpl.n	8001fe8 <HAL_ETH_IRQHandler+0x2c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001fe0:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8001fe4:	07c9      	lsls	r1, r1, #31
 8001fe6:	d476      	bmi.n	80020d6 <HAL_ETH_IRQHandler+0x11a>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001fe8:	f8d2 1160 	ldr.w	r1, [r2, #352]	; 0x160
 8001fec:	0448      	lsls	r0, r1, #17
 8001fee:	d503      	bpl.n	8001ff8 <HAL_ETH_IRQHandler+0x3c>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001ff0:	f8d2 1134 	ldr.w	r1, [r2, #308]	; 0x134
 8001ff4:	0449      	lsls	r1, r1, #17
 8001ff6:	d41b      	bmi.n	8002030 <HAL_ETH_IRQHandler+0x74>
  macirqenable = heth->Instance->MACIER;
 8001ff8:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ffc:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002000:	d133      	bne.n	800206a <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002002:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002006:	06d0      	lsls	r0, r2, #27
 8002008:	d447      	bmi.n	800209a <HAL_ETH_IRQHandler+0xde>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800200a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200e:	0691      	lsls	r1, r2, #26
 8002010:	d454      	bmi.n	80020bc <HAL_ETH_IRQHandler+0x100>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002016:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800201a:	0252      	lsls	r2, r2, #9
 800201c:	d400      	bmi.n	8002020 <HAL_ETH_IRQHandler+0x64>
}
 800201e:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002020:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    HAL_ETH_WakeUpCallback(heth);
 8002024:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002026:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    HAL_ETH_WakeUpCallback(heth);
 800202a:	f7ff ffc5 	bl	8001fb8 <HAL_ETH_WakeUpCallback>
}
 800202e:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002030:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8002034:	f043 0308 	orr.w	r3, r3, #8
 8002038:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800203c:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
 8002040:	f413 5f80 	tst.w	r3, #4096	; 0x1000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002044:	f8d2 3160 	ldr.w	r3, [r2, #352]	; 0x160
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002048:	d15a      	bne.n	8002100 <HAL_ETH_IRQHandler+0x144>
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800204a:	f44f 41cd 	mov.w	r1, #26240	; 0x6680
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800204e:	400b      	ands	r3, r1
 8002050:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002054:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
      HAL_ETH_ErrorCallback(heth);
 8002058:	4620      	mov	r0, r4
 800205a:	f001 fcab 	bl	80039b4 <HAL_ETH_ErrorCallback>
  macirqenable = heth->Instance->MACIER;
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002064:	f412 4fc0 	tst.w	r2, #24576	; 0x6000
 8002068:	d0cb      	beq.n	8002002 <HAL_ETH_IRQHandler+0x46>
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800206a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800206e:	21e0      	movs	r1, #224	; 0xe0
    HAL_ETH_ErrorCallback(heth);
 8002070:	4620      	mov	r0, r4
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002072:	f042 0210 	orr.w	r2, r2, #16
 8002076:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800207a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800207e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    heth->gState = HAL_ETH_STATE_ERROR;
 8002082:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8002086:	f001 fc95 	bl	80039b4 <HAL_ETH_ErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 800208a:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800208c:	6823      	ldr	r3, [r4, #0]
    heth->MACErrorCode = (uint32_t)(0x0U);
 800208e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002092:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002096:	06d0      	lsls	r0, r2, #27
 8002098:	d5b7      	bpl.n	800200a <HAL_ETH_IRQHandler+0x4e>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800209a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 800209e:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80020a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80020a4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 80020a8:	f7ff ff82 	bl	8001fb0 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80020ac:	2200      	movs	r2, #0
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80020ae:	6823      	ldr	r3, [r4, #0]
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80020b0:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80020b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020b8:	0691      	lsls	r1, r2, #26
 80020ba:	d5aa      	bpl.n	8002012 <HAL_ETH_IRQHandler+0x56>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80020bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 80020c0:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    HAL_ETH_EEECallback(heth);
 80020ca:	f7ff ff73 	bl	8001fb4 <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 80020d4:	e79d      	b.n	8002012 <HAL_ETH_IRQHandler+0x56>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80020d6:	f248 0301 	movw	r3, #32769	; 0x8001
      HAL_ETH_TxCpltCallback(heth);
 80020da:	4620      	mov	r0, r4
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80020dc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_TxCpltCallback(heth);
 80020e0:	f001 fc62 	bl	80039a8 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80020ea:	e77d      	b.n	8001fe8 <HAL_ETH_IRQHandler+0x2c>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80020ec:	f248 0340 	movw	r3, #32832	; 0x8040
 80020f0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      HAL_ETH_RxCpltCallback(heth);
 80020f4:	f001 fc52 	bl	800399c <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80020fe:	e76b      	b.n	8001fd8 <HAL_ETH_IRQHandler+0x1c>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002100:	f241 1002 	movw	r0, #4354	; 0x1102
        heth->gState = HAL_ETH_STATE_ERROR;
 8002104:	21e0      	movs	r1, #224	; 0xe0
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002106:	4003      	ands	r3, r0
 8002108:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 800210c:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 8002110:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002114:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
        heth->gState = HAL_ETH_STATE_ERROR;
 8002118:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800211c:	e79c      	b.n	8002058 <HAL_ETH_IRQHandler+0x9c>
 800211e:	bf00      	nop

08002120 <HAL_ETH_ReadPHYRegister>:
{
 8002120:	b570      	push	{r4, r5, r6, lr}
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002122:	6806      	ldr	r6, [r0, #0]
{
 8002124:	461d      	mov	r5, r3
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002126:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
 800212a:	07db      	lsls	r3, r3, #31
 800212c:	d501      	bpl.n	8002132 <HAL_ETH_ReadPHYRegister+0x12>
    return HAL_ERROR;
 800212e:	2001      	movs	r0, #1
}
 8002130:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002132:	4604      	mov	r4, r0
 8002134:	f8d6 0200 	ldr.w	r0, [r6, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002138:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 800213c:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002140:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002144:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002148:	f043 030d 	orr.w	r3, r3, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800214c:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
  tickstart = HAL_GetTick();
 8002150:	f7ff fa40 	bl	80015d4 <HAL_GetTick>
 8002154:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002156:	e005      	b.n	8002164 <HAL_ETH_ReadPHYRegister+0x44>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002158:	f7ff fa3c 	bl	80015d4 <HAL_GetTick>
 800215c:	1b82      	subs	r2, r0, r6
 800215e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8002162:	d8e4      	bhi.n	800212e <HAL_ETH_ReadPHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002164:	6821      	ldr	r1, [r4, #0]
 8002166:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 800216a:	f012 0201 	ands.w	r2, r2, #1
 800216e:	d1f3      	bne.n	8002158 <HAL_ETH_ReadPHYRegister+0x38>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002170:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
  return HAL_OK;
 8002174:	4610      	mov	r0, r2
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002176:	b29b      	uxth	r3, r3
 8002178:	602b      	str	r3, [r5, #0]
}
 800217a:	bd70      	pop	{r4, r5, r6, pc}

0800217c <HAL_ETH_WritePHYRegister>:
{
 800217c:	b538      	push	{r3, r4, r5, lr}
 800217e:	4604      	mov	r4, r0
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002180:	6800      	ldr	r0, [r0, #0]
 8002182:	f8d0 5200 	ldr.w	r5, [r0, #512]	; 0x200
 8002186:	07ed      	lsls	r5, r5, #31
 8002188:	d501      	bpl.n	800218e <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 800218a:	2001      	movs	r0, #1
}
 800218c:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800218e:	f8d0 0200 	ldr.w	r0, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002192:	b29b      	uxth	r3, r3
 8002194:	f020 7078 	bic.w	r0, r0, #65011712	; 0x3e00000
 8002198:	ea40 5141 	orr.w	r1, r0, r1, lsl #21
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800219c:	480f      	ldr	r0, [pc, #60]	; (80021dc <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800219e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80021a2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80021a6:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80021aa:	f023 030c 	bic.w	r3, r3, #12
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80021ae:	f043 0305 	orr.w	r3, r3, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80021b2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
  tickstart = HAL_GetTick();
 80021b6:	f7ff fa0d 	bl	80015d4 <HAL_GetTick>
 80021ba:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021bc:	e005      	b.n	80021ca <HAL_ETH_WritePHYRegister+0x4e>
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80021be:	f7ff fa09 	bl	80015d4 <HAL_GetTick>
 80021c2:	1b43      	subs	r3, r0, r5
 80021c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021c8:	d8df      	bhi.n	800218a <HAL_ETH_WritePHYRegister+0xe>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021d0:	f013 0301 	ands.w	r3, r3, #1
 80021d4:	d1f3      	bne.n	80021be <HAL_ETH_WritePHYRegister+0x42>
  return HAL_OK;
 80021d6:	4618      	mov	r0, r3
}
 80021d8:	bd38      	pop	{r3, r4, r5, pc}
 80021da:	bf00      	nop
 80021dc:	40028000 	.word	0x40028000

080021e0 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 80021e0:	2900      	cmp	r1, #0
 80021e2:	f000 80c4 	beq.w	800236e <HAL_ETH_GetMACConfig+0x18e>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021e6:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 80021e8:	2000      	movs	r0, #0
{
 80021ea:	b410      	push	{r4}
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021ec:	681c      	ldr	r4, [r3, #0]
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80021ee:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021f0:	f004 040c 	and.w	r4, r4, #12
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80021f4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80021f8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80021fc:	681a      	ldr	r2, [r3, #0]
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021fe:	62cc      	str	r4, [r1, #44]	; 0x2c
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002200:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8002204:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 800220c:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8002210:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002214:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8002216:	f3c2 2240 	ubfx	r2, r2, #9, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800221a:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8002222:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8002226:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002228:	681a      	ldr	r2, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800222a:	f3c2 22c0 	ubfx	r2, r2, #11, #1
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800222e:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8002236:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002238:	681c      	ldr	r4, [r3, #0]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800223a:	681a      	ldr	r2, [r3, #0]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800223c:	f404 5400 	and.w	r4, r4, #8192	; 0x2000
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002240:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002244:	e9c1 2405 	strd	r2, r4, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f3c2 4200 	ubfx	r2, r2, #16, #1
 800224e:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8002256:	f3c2 4240 	ubfx	r2, r2, #17, #1
 800225a:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002262:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8002266:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	f3c2 5200 	ubfx	r2, r2, #20, #1
 800226e:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8002276:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 800227e:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002280:	681a      	ldr	r2, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002282:	f3c2 52c0 	ubfx	r2, r2, #23, #1
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002286:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002288:	681c      	ldr	r4, [r3, #0]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800228a:	681a      	ldr	r2, [r3, #0]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800228c:	f004 64e0 	and.w	r4, r4, #117440512	; 0x7000000
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002290:	f3c2 62c0 	ubfx	r2, r2, #27, #1
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002294:	608c      	str	r4, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002296:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002298:	681c      	ldr	r4, [r3, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800229a:	685a      	ldr	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800229c:	f004 44e0 	and.w	r4, r4, #1879048192	; 0x70000000
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80022a0:	f3c2 020d 	ubfx	r2, r2, #0, #14
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80022a4:	600c      	str	r4, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80022a6:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 80022ae:	f3c2 4200 	ubfx	r2, r2, #16, #1
 80022b2:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80022bc:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80022c0:	685a      	ldr	r2, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80022c2:	f3c2 4280 	ubfx	r2, r2, #18, #1
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80022c6:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80022ca:	685a      	ldr	r2, [r3, #4]
                                    ? ENABLE : DISABLE;
 80022cc:	f3c2 6200 	ubfx	r2, r2, #24, #1
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80022d0:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022d4:	685c      	ldr	r4, [r3, #4]
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022d6:	68da      	ldr	r2, [r3, #12]
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022d8:	f3c4 6444 	ubfx	r4, r4, #25, #5
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022dc:	f3c2 2200 	ubfx	r2, r2, #8, #1
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022e0:	63cc      	str	r4, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022e2:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022e6:	68dc      	ldr	r4, [r3, #12]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022ea:	f004 040f 	and.w	r4, r4, #15
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022ee:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022f2:	644c      	str	r4, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022f4:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80022f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022fa:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80022fe:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8002302:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002306:	6f1c      	ldr	r4, [r3, #112]	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800230a:	f004 0470 	and.w	r4, r4, #112	; 0x70
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800230e:	0c12      	lsrs	r2, r2, #16
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002310:	650c      	str	r4, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002312:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002314:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002318:	f002 0201 	and.w	r2, r2, #1
 800231c:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002320:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
                                      ? ENABLE : DISABLE;
 8002324:	f3c2 0240 	ubfx	r2, r2, #1, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002328:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800232c:	f8d3 4d00 	ldr.w	r4, [r3, #3328]	; 0xd00
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002330:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002334:	f004 0472 	and.w	r4, r4, #114	; 0x72
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002338:	f002 0223 	and.w	r2, r2, #35	; 0x23
 800233c:	e9c1 4216 	strd	r4, r2, [r1, #88]	; 0x58
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002340:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
}
 8002344:	f85d 4b04 	ldr.w	r4, [sp], #4
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002348:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800234c:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002350:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8002354:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8002358:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800235c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002360:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8002364:	f3c3 1380 	ubfx	r3, r3, #6, #1
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002368:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
}
 800236c:	4770      	bx	lr
    return HAL_ERROR;
 800236e:	2001      	movs	r0, #1
}
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop

08002374 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8002374:	b131      	cbz	r1, 8002384 <HAL_ETH_SetMACConfig+0x10>
{
 8002376:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8002378:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800237c:	2b10      	cmp	r3, #16
 800237e:	d003      	beq.n	8002388 <HAL_ETH_SetMACConfig+0x14>
    return HAL_ERROR;
 8002380:	2001      	movs	r0, #1
}
 8002382:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8002384:	2001      	movs	r0, #1
}
 8002386:	4770      	bx	lr
    ETH_SetMACConfig(heth, macconf);
 8002388:	f7ff f9e2 	bl	8001750 <ETH_SetMACConfig>
    return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	bd08      	pop	{r3, pc}

08002390 <HAL_ETH_SetMDIOClockRange>:
{
 8002390:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002392:	6803      	ldr	r3, [r0, #0]
{
 8002394:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002396:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 800239a:	f000 ff59 	bl	8003250 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <HAL_ETH_SetMDIOClockRange+0x64>)
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <HAL_ETH_SetMDIOClockRange+0x68>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023a2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80023a6:	4403      	add	r3, r0
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d205      	bcs.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80023ac:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023b0:	682b      	ldr	r3, [r5, #0]
 80023b2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80023b6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_ETH_SetMDIOClockRange+0x6c>)
 80023ba:	4a11      	ldr	r2, [pc, #68]	; (8002400 <HAL_ETH_SetMDIOClockRange+0x70>)
 80023bc:	4403      	add	r3, r0
 80023be:	4293      	cmp	r3, r2
 80023c0:	d805      	bhi.n	80023ce <HAL_ETH_SetMDIOClockRange+0x3e>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80023c2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023c6:	682b      	ldr	r3, [r5, #0]
 80023c8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80023cc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <HAL_ETH_SetMDIOClockRange+0x74>)
 80023d0:	4a0d      	ldr	r2, [pc, #52]	; (8002408 <HAL_ETH_SetMDIOClockRange+0x78>)
 80023d2:	4403      	add	r3, r0
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d3eb      	bcc.n	80023b0 <HAL_ETH_SetMDIOClockRange+0x20>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_ETH_SetMDIOClockRange+0x7c>)
 80023da:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_ETH_SetMDIOClockRange+0x80>)
 80023dc:	4403      	add	r3, r0
 80023de:	4293      	cmp	r3, r2
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023e0:	682b      	ldr	r3, [r5, #0]
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023e2:	bf94      	ite	ls
 80023e4:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023e8:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80023ec:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 80023f0:	bd38      	pop	{r3, r4, r5, pc}
 80023f2:	bf00      	nop
 80023f4:	feced300 	.word	0xfeced300
 80023f8:	00e4e1c0 	.word	0x00e4e1c0
 80023fc:	fde9f140 	.word	0xfde9f140
 8002400:	017d783f 	.word	0x017d783f
 8002404:	fc6c7900 	.word	0xfc6c7900
 8002408:	02625a00 	.word	0x02625a00
 800240c:	fa0a1f00 	.word	0xfa0a1f00
 8002410:	02faf07f 	.word	0x02faf07f

08002414 <HAL_ETH_Init>:
  if (heth == NULL)
 8002414:	2800      	cmp	r0, #0
 8002416:	f000 811c 	beq.w	8002652 <HAL_ETH_Init+0x23e>
  if (heth->gState == HAL_ETH_STATE_RESET)
 800241a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800241e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002420:	4605      	mov	r5, r0
 8002422:	b09b      	sub	sp, #108	; 0x6c
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80c0 	beq.w	80025aa <HAL_ETH_Init+0x196>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	4b8b      	ldr	r3, [pc, #556]	; (8002658 <HAL_ETH_Init+0x244>)
 800242c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002430:	f042 0202 	orr.w	r2, r2, #2
 8002434:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800243c:	7a28      	ldrb	r0, [r5, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	9b00      	ldr	r3, [sp, #0]
  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002446:	2800      	cmp	r0, #0
 8002448:	f040 80a3 	bne.w	8002592 <HAL_ETH_Init+0x17e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800244c:	f7ff f8c8 	bl	80015e0 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002450:	682b      	ldr	r3, [r5, #0]
  (void)SYSCFG->PMCR;
 8002452:	4a82      	ldr	r2, [pc, #520]	; (800265c <HAL_ETH_Init+0x248>)
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  (void)SYSCFG->PMCR;
 8002458:	6852      	ldr	r2, [r2, #4]
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002462:	f7ff f8b7 	bl	80015d4 <HAL_GetTick>
 8002466:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002468:	e006      	b.n	8002478 <HAL_ETH_Init+0x64>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800246a:	f7ff f8b3 	bl	80015d4 <HAL_GetTick>
 800246e:	1b83      	subs	r3, r0, r6
 8002470:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002474:	f200 8090 	bhi.w	8002598 <HAL_ETH_Init+0x184>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247e:	681c      	ldr	r4, [r3, #0]
 8002480:	f014 0401 	ands.w	r4, r4, #1
 8002484:	d1f1      	bne.n	800246a <HAL_ETH_Init+0x56>
  HAL_ETH_SetMDIOClockRange(heth);
 8002486:	4628      	mov	r0, r5
  macDefaultConf.ChecksumOffload = ENABLE;
 8002488:	2601      	movs	r6, #1
  HAL_ETH_SetMDIOClockRange(heth);
 800248a:	f7ff ff81 	bl	8002390 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800248e:	f000 fedf 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_ETH_Init+0x24c>)
 8002494:	682a      	ldr	r2, [r5, #0]
 8002496:	fba3 1300 	umull	r1, r3, r3, r0
  ETH_SetMACConfig(heth, &macDefaultConf);
 800249a:	a901      	add	r1, sp, #4
 800249c:	4628      	mov	r0, r5
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800249e:	940a      	str	r4, [sp, #40]	; 0x28
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024a0:	0c9b      	lsrs	r3, r3, #18
  macDefaultConf.DeferralCheck = DISABLE;
 80024a2:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024a6:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024aa:	3b01      	subs	r3, #1
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80024ac:	9410      	str	r4, [sp, #64]	; 0x40
  macDefaultConf.PauseTime = 0x0;
 80024ae:	9413      	str	r4, [sp, #76]	; 0x4c
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80024b0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024b4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024b8:	f44f 62c3 	mov.w	r2, #1560	; 0x618
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80024bc:	f88d 4044 	strb.w	r4, [sp, #68]	; 0x44
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024c0:	9301      	str	r3, [sp, #4]
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024c6:	920e      	str	r2, [sp, #56]	; 0x38
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024cc:	9307      	str	r3, [sp, #28]
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024ce:	2302      	movs	r3, #2
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024d0:	9206      	str	r2, [sp, #24]
  macDefaultConf.LoopbackMode = DISABLE;
 80024d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024d6:	9317      	str	r3, [sp, #92]	; 0x5c
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024d8:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_ETH_Init+0x250>)
  macDefaultConf.LoopbackMode = DISABLE;
 80024da:	9208      	str	r2, [sp, #32]
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80024dc:	2220      	movs	r2, #32
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024de:	9304      	str	r3, [sp, #16]
  macDefaultConf.Watchdog = ENABLE;
 80024e0:	f240 1301 	movw	r3, #257	; 0x101
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024e4:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80024e8:	9415      	str	r4, [sp, #84]	; 0x54
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024ea:	f8ad 4058 	strh.w	r4, [sp, #88]	; 0x58
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024ee:	f88d 405a 	strb.w	r4, [sp, #90]	; 0x5a
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80024f2:	940c      	str	r4, [sp, #48]	; 0x30
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024f4:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80024f8:	9403      	str	r4, [sp, #12]
  macDefaultConf.JumboPacket = DISABLE;
 80024fa:	f88d 4016 	strb.w	r4, [sp, #22]
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80024fe:	9412      	str	r4, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002500:	9218      	str	r2, [sp, #96]	; 0x60
  macDefaultConf.Watchdog = ENABLE;
 8002502:	f8ad 3014 	strh.w	r3, [sp, #20]
  macDefaultConf.ChecksumOffload = ENABLE;
 8002506:	f88d 6008 	strb.w	r6, [sp, #8]
  macDefaultConf.RetryTransmission = ENABLE;
 800250a:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800250e:	f8ad 6064 	strh.w	r6, [sp, #100]	; 0x64
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002512:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002516:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  ETH_SetMACConfig(heth, &macDefaultConf);
 800251a:	f7ff f919 	bl	8001750 <ETH_SetMACConfig>
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800251e:	682c      	ldr	r4, [r5, #0]
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_ETH_Init+0x254>)
 8002522:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8002526:	6811      	ldr	r1, [r2, #0]
 8002528:	400b      	ands	r3, r1
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800252a:	4950      	ldr	r1, [pc, #320]	; (800266c <HAL_ETH_Init+0x258>)
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800252c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800252e:	6853      	ldr	r3, [r2, #4]
 8002530:	4019      	ands	r1, r3
 8002532:	f241 0301 	movw	r3, #4097	; 0x1001
 8002536:	430b      	orrs	r3, r1
 8002538:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800253a:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <HAL_ETH_Init+0x25c>)
 800253c:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8002540:	400b      	ands	r3, r1
 8002542:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8002546:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_ETH_Init+0x260>)
 800254c:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
 8002550:	400b      	ands	r3, r1
 8002552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002556:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_ETH_Init+0x264>)
 800255c:	f8d2 1108 	ldr.w	r1, [r2, #264]	; 0x108
 8002560:	400b      	ands	r3, r1
 8002562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002566:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800256a:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 800256e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002576:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800257a:	696b      	ldr	r3, [r5, #20]
 800257c:	f013 0103 	ands.w	r1, r3, #3
 8002580:	d019      	beq.n	80025b6 <HAL_ETH_Init+0x1a2>
    heth->gState = HAL_ETH_STATE_ERROR;
 8002582:	23e0      	movs	r3, #224	; 0xe0
    return HAL_ERROR;
 8002584:	4630      	mov	r0, r6
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002586:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
    heth->gState = HAL_ETH_STATE_ERROR;
 800258a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800258e:	b01b      	add	sp, #108	; 0x6c
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002592:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002596:	e759      	b.n	800244c <HAL_ETH_Init+0x38>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002598:	2204      	movs	r2, #4
      heth->gState = HAL_ETH_STATE_ERROR;
 800259a:	23e0      	movs	r3, #224	; 0xe0
      return HAL_ERROR;
 800259c:	2001      	movs	r0, #1
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800259e:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80025a2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 80025a6:	b01b      	add	sp, #108	; 0x6c
 80025a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    heth->gState = HAL_ETH_STATE_BUSY;
 80025aa:	2323      	movs	r3, #35	; 0x23
 80025ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80025b0:	f001 fb06 	bl	8003bc0 <HAL_ETH_MspInit>
 80025b4:	e739      	b.n	800242a <HAL_ETH_Init+0x16>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80025b6:	f8d2 6108 	ldr.w	r6, [r2, #264]	; 0x108
 80025ba:	4830      	ldr	r0, [pc, #192]	; (800267c <HAL_ETH_Init+0x268>)
 80025bc:	68ef      	ldr	r7, [r5, #12]
 80025be:	4030      	ands	r0, r6
 80025c0:	f107 0660 	add.w	r6, r7, #96	; 0x60
 80025c4:	ea40 0343 	orr.w	r3, r0, r3, lsl #1
 80025c8:	f105 0018 	add.w	r0, r5, #24
 80025cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    dmatxdesc = heth->Init.TxDesc + i;
 80025d0:	463b      	mov	r3, r7
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80025d2:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80025d4:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025d6:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025d8:	60d9      	str	r1, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025da:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025de:	3318      	adds	r3, #24
 80025e0:	42b3      	cmp	r3, r6
 80025e2:	d1f6      	bne.n	80025d2 <HAL_ETH_Init+0x1be>
    dmarxdesc =  heth->Init.RxDesc + i;
 80025e4:	692e      	ldr	r6, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80025e6:	2303      	movs	r3, #3
  heth->TxDescList.CurTxDesc = 0;
 80025e8:	62a9      	str	r1, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80025ea:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80025ee:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80025f2:	f105 0c58 	add.w	ip, r5, #88	; 0x58
    dmarxdesc =  heth->Init.RxDesc + i;
 80025f6:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80025f8:	2100      	movs	r1, #0
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80025fa:	f8c2 7114 	str.w	r7, [r2, #276]	; 0x114
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80025fe:	f8c2 7120 	str.w	r7, [r2, #288]	; 0x120
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002602:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002604:	6119      	str	r1, [r3, #16]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002606:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002608:	6159      	str	r1, [r3, #20]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800260a:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800260c:	60d9      	str	r1, [r3, #12]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800260e:	f840 3b04 	str.w	r3, [r0], #4
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002612:	4560      	cmp	r0, ip
 8002614:	f103 0318 	add.w	r3, r3, #24
 8002618:	d1f3      	bne.n	8002602 <HAL_ETH_Init+0x1ee>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800261a:	2003      	movs	r0, #3
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800261c:	686b      	ldr	r3, [r5, #4]
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800261e:	65a9      	str	r1, [r5, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002620:	e9c5 1117 	strd	r1, r1, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002624:	e9c5 111a 	strd	r1, r1, [r5, #104]	; 0x68
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002628:	f8c2 0130 	str.w	r0, [r2, #304]	; 0x130
  return HAL_OK;
 800262c:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800262e:	f8c2 611c 	str.w	r6, [r2, #284]	; 0x11c
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002632:	3648      	adds	r6, #72	; 0x48
 8002634:	f8c2 6128 	str.w	r6, [r2, #296]	; 0x128
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002638:	889a      	ldrh	r2, [r3, #4]
 800263a:	f8c4 2300 	str.w	r2, [r4, #768]	; 0x300
  heth->gState = HAL_ETH_STATE_READY;
 800263e:	2210      	movs	r2, #16
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002640:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002642:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002646:	f8c5 1088 	str.w	r1, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800264a:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
}
 800264e:	b01b      	add	sp, #108	; 0x6c
 8002650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002652:	2001      	movs	r0, #1
}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	58024400 	.word	0x58024400
 800265c:	58000400 	.word	0x58000400
 8002660:	431bde83 	.word	0x431bde83
 8002664:	01010000 	.word	0x01010000
 8002668:	ffff87fd 	.word	0xffff87fd
 800266c:	ffff2ffe 	.word	0xffff2ffe
 8002670:	fffec000 	.word	0xfffec000
 8002674:	ffc0efef 	.word	0xffc0efef
 8002678:	7fc0ffff 	.word	0x7fc0ffff
 800267c:	ffff8001 	.word	0xffff8001

08002680 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8002680:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop

08002688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800268c:	680c      	ldr	r4, [r1, #0]
{
 800268e:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002690:	2c00      	cmp	r4, #0
 8002692:	f000 80a2 	beq.w	80027da <HAL_GPIO_Init+0x152>
 8002696:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4f89      	ldr	r7, [pc, #548]	; (80028c0 <HAL_GPIO_Init+0x238>)
  uint32_t position = 0x00U;
 800269c:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
 80026a2:	ea12 0e04 	ands.w	lr, r2, r4
 80026a6:	f000 8091 	beq.w	80027cc <HAL_GPIO_Init+0x144>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026aa:	684d      	ldr	r5, [r1, #4]
 80026ac:	f005 0903 	and.w	r9, r5, #3
 80026b0:	f109 36ff 	add.w	r6, r9, #4294967295
 80026b4:	2e01      	cmp	r6, #1
 80026b6:	f240 8093 	bls.w	80027e0 <HAL_GPIO_Init+0x158>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ba:	f1b9 0f03 	cmp.w	r9, #3
 80026be:	f040 80cd 	bne.w	800285c <HAL_GPIO_Init+0x1d4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026c2:	fa09 f20c 	lsl.w	r2, r9, ip
 80026c6:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
 80026ca:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026d0:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
 80026d8:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026da:	d077      	beq.n	80027cc <HAL_GPIO_Init+0x144>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026dc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80026e0:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026e4:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e8:	f042 0202 	orr.w	r2, r2, #2
 80026ec:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026f0:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80026f8:	f508 6880 	add.w	r8, r8, #1024	; 0x400
 80026fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002700:	f002 0202 	and.w	r2, r2, #2
 8002704:	9201      	str	r2, [sp, #4]
 8002706:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002708:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800270a:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800270e:	fa02 f209 	lsl.w	r2, r2, r9
 8002712:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002716:	4e6b      	ldr	r6, [pc, #428]	; (80028c4 <HAL_GPIO_Init+0x23c>)
 8002718:	42b0      	cmp	r0, r6
 800271a:	d025      	beq.n	8002768 <HAL_GPIO_Init+0xe0>
 800271c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002720:	42b0      	cmp	r0, r6
 8002722:	f000 80a8 	beq.w	8002876 <HAL_GPIO_Init+0x1ee>
 8002726:	4e68      	ldr	r6, [pc, #416]	; (80028c8 <HAL_GPIO_Init+0x240>)
 8002728:	42b0      	cmp	r0, r6
 800272a:	f000 80aa 	beq.w	8002882 <HAL_GPIO_Init+0x1fa>
 800272e:	4e67      	ldr	r6, [pc, #412]	; (80028cc <HAL_GPIO_Init+0x244>)
 8002730:	42b0      	cmp	r0, r6
 8002732:	f000 809a 	beq.w	800286a <HAL_GPIO_Init+0x1e2>
 8002736:	4e66      	ldr	r6, [pc, #408]	; (80028d0 <HAL_GPIO_Init+0x248>)
 8002738:	42b0      	cmp	r0, r6
 800273a:	f000 80ae 	beq.w	800289a <HAL_GPIO_Init+0x212>
 800273e:	4e65      	ldr	r6, [pc, #404]	; (80028d4 <HAL_GPIO_Init+0x24c>)
 8002740:	42b0      	cmp	r0, r6
 8002742:	f000 80b0 	beq.w	80028a6 <HAL_GPIO_Init+0x21e>
 8002746:	4e64      	ldr	r6, [pc, #400]	; (80028d8 <HAL_GPIO_Init+0x250>)
 8002748:	42b0      	cmp	r0, r6
 800274a:	f000 80a0 	beq.w	800288e <HAL_GPIO_Init+0x206>
 800274e:	4e63      	ldr	r6, [pc, #396]	; (80028dc <HAL_GPIO_Init+0x254>)
 8002750:	42b0      	cmp	r0, r6
 8002752:	f000 80ae 	beq.w	80028b2 <HAL_GPIO_Init+0x22a>
 8002756:	4e62      	ldr	r6, [pc, #392]	; (80028e0 <HAL_GPIO_Init+0x258>)
 8002758:	42b0      	cmp	r0, r6
 800275a:	bf0c      	ite	eq
 800275c:	2609      	moveq	r6, #9
 800275e:	260a      	movne	r6, #10
 8002760:	fa06 f909 	lsl.w	r9, r6, r9
 8002764:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002768:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800276c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002770:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002772:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
 8002776:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002778:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 800277c:	bf54      	ite	pl
 800277e:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 8002782:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
 8002786:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002788:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
 800278a:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800278c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 8002790:	bf54      	ite	pl
 8002792:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 8002796:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
 800279a:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800279c:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027a0:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80027a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
 80027a6:	bf54      	ite	pl
 80027a8:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
 80027ac:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027b0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80027b2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80027b6:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80027ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
 80027be:	bf54      	ite	pl
 80027c0:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
 80027c4:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80027c8:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
 80027cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027ce:	f10c 0c02 	add.w	ip, ip, #2
 80027d2:	fa34 f203 	lsrs.w	r2, r4, r3
 80027d6:	f47f af62 	bne.w	800269e <HAL_GPIO_Init+0x16>
  }
}
 80027da:	b003      	add	sp, #12
 80027dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027e0:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
 80027e4:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027e6:	fa08 f80c 	lsl.w	r8, r8, ip
 80027ea:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ee:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027f0:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f4:	fa06 f60c 	lsl.w	r6, r6, ip
 80027f8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 80027fc:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fe:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
 8002802:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002806:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002808:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800280c:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 800280e:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8002810:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002812:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002816:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002818:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	fa06 f60c 	lsl.w	r6, r6, ip
 8002820:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
 8002824:	fa09 f20c 	lsl.w	r2, r9, ip
 8002828:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800282a:	f47f af4e 	bne.w	80026ca <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800282e:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002832:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002836:	ea4f 0b86 	mov.w	fp, r6, lsl #2
 800283a:	260f      	movs	r6, #15
 800283c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002840:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
 8002844:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002848:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800284c:	690e      	ldr	r6, [r1, #16]
 800284e:	fa06 f60b 	lsl.w	r6, r6, fp
 8002852:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	f8c9 6020 	str.w	r6, [r9, #32]
 800285a:	e736      	b.n	80026ca <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285c:	f04f 0803 	mov.w	r8, #3
 8002860:	fa08 f80c 	lsl.w	r8, r8, ip
 8002864:	ea6f 0808 	mvn.w	r8, r8
 8002868:	e7d2      	b.n	8002810 <HAL_GPIO_Init+0x188>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800286a:	2603      	movs	r6, #3
 800286c:	fa06 f909 	lsl.w	r9, r6, r9
 8002870:	ea42 0209 	orr.w	r2, r2, r9
 8002874:	e778      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 8002876:	2601      	movs	r6, #1
 8002878:	fa06 f909 	lsl.w	r9, r6, r9
 800287c:	ea42 0209 	orr.w	r2, r2, r9
 8002880:	e772      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 8002882:	2602      	movs	r6, #2
 8002884:	fa06 f909 	lsl.w	r9, r6, r9
 8002888:	ea42 0209 	orr.w	r2, r2, r9
 800288c:	e76c      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 800288e:	2606      	movs	r6, #6
 8002890:	fa06 f909 	lsl.w	r9, r6, r9
 8002894:	ea42 0209 	orr.w	r2, r2, r9
 8002898:	e766      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 800289a:	2604      	movs	r6, #4
 800289c:	fa06 f909 	lsl.w	r9, r6, r9
 80028a0:	ea42 0209 	orr.w	r2, r2, r9
 80028a4:	e760      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 80028a6:	2605      	movs	r6, #5
 80028a8:	fa06 f909 	lsl.w	r9, r6, r9
 80028ac:	ea42 0209 	orr.w	r2, r2, r9
 80028b0:	e75a      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 80028b2:	2607      	movs	r6, #7
 80028b4:	fa06 f909 	lsl.w	r9, r6, r9
 80028b8:	ea42 0209 	orr.w	r2, r2, r9
 80028bc:	e754      	b.n	8002768 <HAL_GPIO_Init+0xe0>
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	58020000 	.word	0x58020000
 80028c8:	58020800 	.word	0x58020800
 80028cc:	58020c00 	.word	0x58020c00
 80028d0:	58021000 	.word	0x58021000
 80028d4:	58021400 	.word	0x58021400
 80028d8:	58021800 	.word	0x58021800
 80028dc:	58021c00 	.word	0x58021c00
 80028e0:	58022400 	.word	0x58022400

080028e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e4:	b902      	cbnz	r2, 80028e8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e6:	0409      	lsls	r1, r1, #16
 80028e8:	6181      	str	r1, [r0, #24]
  }
}
 80028ea:	4770      	bx	lr

080028ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028ec:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028ee:	4c10      	ldr	r4, [pc, #64]	; (8002930 <HAL_PWREx_ConfigSupply+0x44>)
 80028f0:	68e3      	ldr	r3, [r4, #12]
 80028f2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028f6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028f8:	d105      	bne.n	8002906 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028fa:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028fe:	1a18      	subs	r0, r3, r0
 8002900:	bf18      	it	ne
 8002902:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002904:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002906:	f023 0307 	bic.w	r3, r3, #7
 800290a:	4318      	orrs	r0, r3
 800290c:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800290e:	f7fe fe61 	bl	80015d4 <HAL_GetTick>
 8002912:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002914:	e005      	b.n	8002922 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002916:	f7fe fe5d 	bl	80015d4 <HAL_GetTick>
 800291a:	1b40      	subs	r0, r0, r5
 800291c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002920:	d804      	bhi.n	800292c <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002922:	6863      	ldr	r3, [r4, #4]
 8002924:	049b      	lsls	r3, r3, #18
 8002926:	d5f6      	bpl.n	8002916 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8002928:	2000      	movs	r0, #0
}
 800292a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800292c:	2001      	movs	r0, #1
}
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	58024800 	.word	0x58024800

08002934 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_RCC_GetSysClockFreq.part.0+0x118>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 8002936:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800293a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800293c:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800293e:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002942:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002944:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8002948:	d038      	beq.n	80029bc <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800294a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800294e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002952:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002956:	fb05 f101 	mul.w	r1, r5, r1
 800295a:	2a01      	cmp	r2, #1
 800295c:	ee07 1a90 	vmov	s15, r1
 8002960:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8002964:	d002      	beq.n	800296c <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8002966:	2a02      	cmp	r2, #2
 8002968:	d04e      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800296a:	b34a      	cbz	r2, 80029c0 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800296c:	ee07 0a90 	vmov	s15, r0
 8002970:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002a50 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 8002974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800297e:	ed9f 5a35 	vldr	s10, [pc, #212]	; 8002a54 <HAL_RCC_GetSysClockFreq.part.0+0x120>
 8002982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002986:	ee06 3a90 	vmov	s13, r3
 800298a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800298e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002992:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002996:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800299a:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_GetSysClockFreq.part.0+0x118>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80029a6:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b8:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80029bc:	bc30      	pop	{r4, r5}
 80029be:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	0692      	lsls	r2, r2, #26
 80029c4:	d527      	bpl.n	8002a16 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029c6:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029c8:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029cc:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <HAL_RCC_GetSysClockFreq.part.0+0x124>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029ce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029d4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029dc:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 8002a54 <HAL_RCC_GetSysClockFreq.part.0+0x120>
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029e4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e6:	ee06 3a90 	vmov	s13, r3
 80029ea:	ee06 2a10 	vmov	s12, r2
 80029ee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80029f2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80029f6:	eee7 6a05 	vfma.f32	s13, s14, s10
 80029fa:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80029fe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002a02:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002a06:	e7ca      	b.n	800299e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a08:	ee07 0a90 	vmov	s15, r0
 8002a0c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002a5c <HAL_RCC_GetSysClockFreq.part.0+0x128>
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	e7b0      	b.n	8002978 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a16:	ee07 0a90 	vmov	s15, r0
 8002a1a:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8002a60 <HAL_RCC_GetSysClockFreq.part.0+0x12c>
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a28:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8002a54 <HAL_RCC_GetSysClockFreq.part.0+0x120>
 8002a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a30:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8002a40:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a48:	e7a9      	b.n	800299e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
 8002a4a:	bf00      	nop
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	4a742400 	.word	0x4a742400
 8002a54:	39000000 	.word	0x39000000
 8002a58:	03d09000 	.word	0x03d09000
 8002a5c:	4af42400 	.word	0x4af42400
 8002a60:	4c742400 	.word	0x4c742400

08002a64 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002a64:	2800      	cmp	r0, #0
 8002a66:	f000 81bd 	beq.w	8002de4 <HAL_RCC_OscConfig+0x380>
{
 8002a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6c:	6803      	ldr	r3, [r0, #0]
 8002a6e:	4604      	mov	r4, r0
 8002a70:	07d9      	lsls	r1, r3, #31
 8002a72:	d52e      	bpl.n	8002ad2 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4993      	ldr	r1, [pc, #588]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002a76:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a78:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a7e:	2a10      	cmp	r2, #16
 8002a80:	f000 80f0 	beq.w	8002c64 <HAL_RCC_OscConfig+0x200>
 8002a84:	2a18      	cmp	r2, #24
 8002a86:	f000 80e8 	beq.w	8002c5a <HAL_RCC_OscConfig+0x1f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	6863      	ldr	r3, [r4, #4]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	f000 8108 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x240>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8146 	beq.w	8002d26 <HAL_RCC_OscConfig+0x2c2>
 8002a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a9e:	4b89      	ldr	r3, [pc, #548]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f000 8254 	beq.w	8002f4e <HAL_RCC_OscConfig+0x4ea>
 8002aa6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ab2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fd8e 	bl	80015d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ab8:	4e82      	ldr	r6, [pc, #520]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
        tickstart = HAL_GetTick();
 8002aba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002abc:	e005      	b.n	8002aca <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abe:	f7fe fd89 	bl	80015d4 <HAL_GetTick>
 8002ac2:	1b40      	subs	r0, r0, r5
 8002ac4:	2864      	cmp	r0, #100	; 0x64
 8002ac6:	f200 812c 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aca:	6833      	ldr	r3, [r6, #0]
 8002acc:	039b      	lsls	r3, r3, #14
 8002ace:	d5f6      	bpl.n	8002abe <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	079d      	lsls	r5, r3, #30
 8002ad4:	d47e      	bmi.n	8002bd4 <HAL_RCC_OscConfig+0x170>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ad6:	06d9      	lsls	r1, r3, #27
 8002ad8:	d528      	bpl.n	8002b2c <HAL_RCC_OscConfig+0xc8>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ada:	497a      	ldr	r1, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002adc:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ade:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ae4:	2a08      	cmp	r2, #8
 8002ae6:	f000 80cd 	beq.w	8002c84 <HAL_RCC_OscConfig+0x220>
 8002aea:	2a18      	cmp	r2, #24
 8002aec:	f000 80c5 	beq.w	8002c7a <HAL_RCC_OscConfig+0x216>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002af0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8002af2:	4d74      	ldr	r5, [pc, #464]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 814e 	beq.w	8002d96 <HAL_RCC_OscConfig+0x332>
        __HAL_RCC_CSI_ENABLE();
 8002afa:	682b      	ldr	r3, [r5, #0]
 8002afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002b02:	f7fe fd67 	bl	80015d4 <HAL_GetTick>
 8002b06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b08:	e005      	b.n	8002b16 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b0a:	f7fe fd63 	bl	80015d4 <HAL_GetTick>
 8002b0e:	1b80      	subs	r0, r0, r6
 8002b10:	2802      	cmp	r0, #2
 8002b12:	f200 8106 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	05db      	lsls	r3, r3, #23
 8002b1a:	d5f6      	bpl.n	8002b0a <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1c:	68eb      	ldr	r3, [r5, #12]
 8002b1e:	6a22      	ldr	r2, [r4, #32]
 8002b20:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002b24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b28:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	071d      	lsls	r5, r3, #28
 8002b2e:	d516      	bpl.n	8002b5e <HAL_RCC_OscConfig+0xfa>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b30:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002b32:	4d64      	ldr	r5, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 810c 	beq.w	8002d52 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002b42:	f7fe fd47 	bl	80015d4 <HAL_GetTick>
 8002b46:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b48:	e005      	b.n	8002b56 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe fd43 	bl	80015d4 <HAL_GetTick>
 8002b4e:	1b80      	subs	r0, r0, r6
 8002b50:	2802      	cmp	r0, #2
 8002b52:	f200 80e6 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b58:	0798      	lsls	r0, r3, #30
 8002b5a:	d5f6      	bpl.n	8002b4a <HAL_RCC_OscConfig+0xe6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	069a      	lsls	r2, r3, #26
 8002b60:	d516      	bpl.n	8002b90 <HAL_RCC_OscConfig+0x12c>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b62:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002b64:	4d57      	ldr	r5, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8104 	beq.w	8002d74 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_HSI48_ENABLE();
 8002b6c:	682b      	ldr	r3, [r5, #0]
 8002b6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b74:	f7fe fd2e 	bl	80015d4 <HAL_GetTick>
 8002b78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_OscConfig+0x124>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b7c:	f7fe fd2a 	bl	80015d4 <HAL_GetTick>
 8002b80:	1b80      	subs	r0, r0, r6
 8002b82:	2802      	cmp	r0, #2
 8002b84:	f200 80cd 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	049f      	lsls	r7, r3, #18
 8002b8c:	d5f6      	bpl.n	8002b7c <HAL_RCC_OscConfig+0x118>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	0759      	lsls	r1, r3, #29
 8002b92:	f100 808d 	bmi.w	8002cb0 <HAL_RCC_OscConfig+0x24c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b96:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002b98:	b1d0      	cbz	r0, 8002bd0 <HAL_RCC_OscConfig+0x16c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b9a:	4d4a      	ldr	r5, [pc, #296]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002b9c:	692b      	ldr	r3, [r5, #16]
 8002b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ba2:	2b18      	cmp	r3, #24
 8002ba4:	f000 8185 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x44e>
        __HAL_RCC_PLL_DISABLE();
 8002ba8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002baa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bb2:	f000 8119 	beq.w	8002de8 <HAL_RCC_OscConfig+0x384>
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fd0d 	bl	80015d4 <HAL_GetTick>
 8002bba:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bbc:	e005      	b.n	8002bca <HAL_RCC_OscConfig+0x166>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fd09 	bl	80015d4 <HAL_GetTick>
 8002bc2:	1b00      	subs	r0, r0, r4
 8002bc4:	2802      	cmp	r0, #2
 8002bc6:	f200 80ac 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bca:	682b      	ldr	r3, [r5, #0]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	d4f6      	bmi.n	8002bbe <HAL_RCC_OscConfig+0x15a>
  return HAL_OK;
 8002bd0:	2000      	movs	r0, #0
}
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd4:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002bd6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002bda:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002bde:	d122      	bne.n	8002c26 <HAL_RCC_OscConfig+0x1c2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002be2:	68e2      	ldr	r2, [r4, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0759      	lsls	r1, r3, #29
 8002be8:	d501      	bpl.n	8002bee <HAL_RCC_OscConfig+0x18a>
 8002bea:	2a00      	cmp	r2, #0
 8002bec:	d043      	beq.n	8002c76 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bee:	4d35      	ldr	r5, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	f023 0319 	bic.w	r3, r3, #25
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bfa:	f7fe fceb 	bl	80015d4 <HAL_GetTick>
 8002bfe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c00:	e005      	b.n	8002c0e <HAL_RCC_OscConfig+0x1aa>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c02:	f7fe fce7 	bl	80015d4 <HAL_GetTick>
 8002c06:	1b80      	subs	r0, r0, r6
 8002c08:	2802      	cmp	r0, #2
 8002c0a:	f200 808a 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c0e:	682b      	ldr	r3, [r5, #0]
 8002c10:	075b      	lsls	r3, r3, #29
 8002c12:	d5f6      	bpl.n	8002c02 <HAL_RCC_OscConfig+0x19e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	686b      	ldr	r3, [r5, #4]
 8002c16:	6922      	ldr	r2, [r4, #16]
 8002c18:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c1c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c20:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c22:	6823      	ldr	r3, [r4, #0]
 8002c24:	e757      	b.n	8002ad6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	f000 80d8 	beq.w	8002ddc <HAL_RCC_OscConfig+0x378>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c2c:	4d25      	ldr	r5, [pc, #148]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c2e:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c30:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	f000 80c1 	beq.w	8002dba <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c38:	f023 0319 	bic.w	r3, r3, #25
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c40:	f7fe fcc8 	bl	80015d4 <HAL_GetTick>
 8002c44:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c46:	e004      	b.n	8002c52 <HAL_RCC_OscConfig+0x1ee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fcc4 	bl	80015d4 <HAL_GetTick>
 8002c4c:	1b80      	subs	r0, r0, r6
 8002c4e:	2802      	cmp	r0, #2
 8002c50:	d867      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	075f      	lsls	r7, r3, #29
 8002c56:	d5f7      	bpl.n	8002c48 <HAL_RCC_OscConfig+0x1e4>
 8002c58:	e7dc      	b.n	8002c14 <HAL_RCC_OscConfig+0x1b0>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c5a:	f001 0103 	and.w	r1, r1, #3
 8002c5e:	2902      	cmp	r1, #2
 8002c60:	f47f af13 	bne.w	8002a8a <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	0392      	lsls	r2, r2, #14
 8002c6a:	f57f af32 	bpl.w	8002ad2 <HAL_RCC_OscConfig+0x6e>
 8002c6e:	6862      	ldr	r2, [r4, #4]
 8002c70:	2a00      	cmp	r2, #0
 8002c72:	f47f af2e 	bne.w	8002ad2 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8002c76:	2001      	movs	r0, #1
}
 8002c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c7a:	f001 0103 	and.w	r1, r1, #3
 8002c7e:	2901      	cmp	r1, #1
 8002c80:	f47f af36 	bne.w	8002af0 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c84:	4a0f      	ldr	r2, [pc, #60]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	05d2      	lsls	r2, r2, #23
 8002c8a:	d502      	bpl.n	8002c92 <HAL_RCC_OscConfig+0x22e>
 8002c8c:	69e2      	ldr	r2, [r4, #28]
 8002c8e:	2a80      	cmp	r2, #128	; 0x80
 8002c90:	d1f1      	bne.n	8002c76 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c92:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002c94:	6a20      	ldr	r0, [r4, #32]
 8002c96:	68ca      	ldr	r2, [r1, #12]
 8002c98:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8002c9c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002ca0:	60ca      	str	r2, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca2:	e743      	b.n	8002b2c <HAL_RCC_OscConfig+0xc8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	4a07      	ldr	r2, [pc, #28]	; (8002cc4 <HAL_RCC_OscConfig+0x260>)
 8002ca6:	6813      	ldr	r3, [r2, #0]
 8002ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cac:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cae:	e701      	b.n	8002ab4 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 8002cb0:	4d05      	ldr	r5, [pc, #20]	; (8002cc8 <HAL_RCC_OscConfig+0x264>)
 8002cb2:	682b      	ldr	r3, [r5, #0]
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002cba:	f7fe fc8b 	bl	80015d4 <HAL_GetTick>
 8002cbe:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCC_OscConfig+0x272>
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400
 8002cc8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ccc:	f7fe fc82 	bl	80015d4 <HAL_GetTick>
 8002cd0:	1b80      	subs	r0, r0, r6
 8002cd2:	2864      	cmp	r0, #100	; 0x64
 8002cd4:	d825      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	05da      	lsls	r2, r3, #23
 8002cda:	d5f7      	bpl.n	8002ccc <HAL_RCC_OscConfig+0x268>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cdc:	68a3      	ldr	r3, [r4, #8]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f000 815c 	beq.w	8002f9c <HAL_RCC_OscConfig+0x538>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 813a 	beq.w	8002f5e <HAL_RCC_OscConfig+0x4fa>
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	4ba8      	ldr	r3, [pc, #672]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	f000 815a 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x544>
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	671a      	str	r2, [r3, #112]	; 0x70
 8002cfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cfc:	f022 0204 	bic.w	r2, r2, #4
 8002d00:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d02:	f7fe fc67 	bl	80015d4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d06:	4ea2      	ldr	r6, [pc, #648]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d0c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0e:	e004      	b.n	8002d1a <HAL_RCC_OscConfig+0x2b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d10:	f7fe fc60 	bl	80015d4 <HAL_GetTick>
 8002d14:	1b40      	subs	r0, r0, r5
 8002d16:	42b8      	cmp	r0, r7
 8002d18:	d803      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d1c:	079b      	lsls	r3, r3, #30
 8002d1e:	d5f7      	bpl.n	8002d10 <HAL_RCC_OscConfig+0x2ac>
 8002d20:	e739      	b.n	8002b96 <HAL_RCC_OscConfig+0x132>
            return HAL_TIMEOUT;
 8002d22:	2003      	movs	r0, #3
}
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d26:	4d9a      	ldr	r5, [pc, #616]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
 8002d28:	682b      	ldr	r3, [r5, #0]
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2e:	602b      	str	r3, [r5, #0]
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d38:	f7fe fc4c 	bl	80015d4 <HAL_GetTick>
 8002d3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d3e:	e004      	b.n	8002d4a <HAL_RCC_OscConfig+0x2e6>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d40:	f7fe fc48 	bl	80015d4 <HAL_GetTick>
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	2864      	cmp	r0, #100	; 0x64
 8002d48:	d8eb      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d4a:	682b      	ldr	r3, [r5, #0]
 8002d4c:	039f      	lsls	r7, r3, #14
 8002d4e:	d4f7      	bmi.n	8002d40 <HAL_RCC_OscConfig+0x2dc>
 8002d50:	e6be      	b.n	8002ad0 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8002d52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fc3b 	bl	80015d4 <HAL_GetTick>
 8002d5e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d60:	e004      	b.n	8002d6c <HAL_RCC_OscConfig+0x308>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d62:	f7fe fc37 	bl	80015d4 <HAL_GetTick>
 8002d66:	1b80      	subs	r0, r0, r6
 8002d68:	2802      	cmp	r0, #2
 8002d6a:	d8da      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d6c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002d6e:	0799      	lsls	r1, r3, #30
 8002d70:	d4f7      	bmi.n	8002d62 <HAL_RCC_OscConfig+0x2fe>
 8002d72:	e6f3      	b.n	8002b5c <HAL_RCC_OscConfig+0xf8>
      __HAL_RCC_HSI48_DISABLE();
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d7a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d7c:	f7fe fc2a 	bl	80015d4 <HAL_GetTick>
 8002d80:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d82:	e004      	b.n	8002d8e <HAL_RCC_OscConfig+0x32a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d84:	f7fe fc26 	bl	80015d4 <HAL_GetTick>
 8002d88:	1b80      	subs	r0, r0, r6
 8002d8a:	2802      	cmp	r0, #2
 8002d8c:	d8c9      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8e:	682b      	ldr	r3, [r5, #0]
 8002d90:	0498      	lsls	r0, r3, #18
 8002d92:	d4f7      	bmi.n	8002d84 <HAL_RCC_OscConfig+0x320>
 8002d94:	e6fb      	b.n	8002b8e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_CSI_DISABLE();
 8002d96:	682b      	ldr	r3, [r5, #0]
 8002d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d9c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fc19 	bl	80015d4 <HAL_GetTick>
 8002da2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002da4:	e004      	b.n	8002db0 <HAL_RCC_OscConfig+0x34c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002da6:	f7fe fc15 	bl	80015d4 <HAL_GetTick>
 8002daa:	1b80      	subs	r0, r0, r6
 8002dac:	2802      	cmp	r0, #2
 8002dae:	d8b8      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	05df      	lsls	r7, r3, #23
 8002db4:	d4f7      	bmi.n	8002da6 <HAL_RCC_OscConfig+0x342>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	e6b8      	b.n	8002b2c <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_HSI_DISABLE();
 8002dba:	f023 0301 	bic.w	r3, r3, #1
 8002dbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fc08 	bl	80015d4 <HAL_GetTick>
 8002dc4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fc04 	bl	80015d4 <HAL_GetTick>
 8002dcc:	1b80      	subs	r0, r0, r6
 8002dce:	2802      	cmp	r0, #2
 8002dd0:	d8a7      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002dd2:	682b      	ldr	r3, [r5, #0]
 8002dd4:	0758      	lsls	r0, r3, #29
 8002dd6:	d4f7      	bmi.n	8002dc8 <HAL_RCC_OscConfig+0x364>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	e67c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ddc:	0790      	lsls	r0, r2, #30
 8002dde:	f47f af25 	bne.w	8002c2c <HAL_RCC_OscConfig+0x1c8>
 8002de2:	e6fd      	b.n	8002be0 <HAL_RCC_OscConfig+0x17c>
    return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
}
 8002de6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002de8:	f7fe fbf4 	bl	80015d4 <HAL_GetTick>
 8002dec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dee:	e004      	b.n	8002dfa <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fbf0 	bl	80015d4 <HAL_GetTick>
 8002df4:	1b80      	subs	r0, r0, r6
 8002df6:	2802      	cmp	r0, #2
 8002df8:	d893      	bhi.n	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	0199      	lsls	r1, r3, #6
 8002dfe:	d4f7      	bmi.n	8002df0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e00:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002e02:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCC_OscConfig+0x530>)
 8002e04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e06:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e08:	4963      	ldr	r1, [pc, #396]	; (8002f98 <HAL_RCC_OscConfig+0x534>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e0a:	4e61      	ldr	r6, [pc, #388]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e10:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002e14:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e16:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	3a01      	subs	r2, #1
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	0412      	lsls	r2, r2, #16
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e32:	4313      	orrs	r3, r2
 8002e34:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002e36:	3a01      	subs	r2, #1
 8002e38:	0612      	lsls	r2, r2, #24
 8002e3a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e42:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e4a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002e4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e4e:	4011      	ands	r1, r2
 8002e50:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8002e54:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e5a:	f023 030c 	bic.w	r3, r3, #12
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e62:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e64:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002e66:	f023 0302 	bic.w	r3, r3, #2
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e94:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e96:	f7fe fb9d 	bl	80015d4 <HAL_GetTick>
 8002e9a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e9c:	e005      	b.n	8002eaa <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fb99 	bl	80015d4 <HAL_GetTick>
 8002ea2:	1b00      	subs	r0, r0, r4
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	f63f af3c 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eaa:	6833      	ldr	r3, [r6, #0]
 8002eac:	019a      	lsls	r2, r3, #6
 8002eae:	d5f6      	bpl.n	8002e9e <HAL_RCC_OscConfig+0x43a>
 8002eb0:	e68e      	b.n	8002bd0 <HAL_RCC_OscConfig+0x16c>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb2:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002eb4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002eb6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb8:	f43f ae8b 	beq.w	8002bd2 <HAL_RCC_OscConfig+0x16e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebc:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002ec2:	428b      	cmp	r3, r1
 8002ec4:	f47f aed7 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ec8:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	f47f aed1 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ed4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed6:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8002eda:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	f47f aeca 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ee4:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8002ee8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f47f aec3 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ef2:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8002ef6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f47f aebc 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002efe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f00:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8002f04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f06:	429e      	cmp	r6, r3
 8002f08:	f47f aeb5 	bne.w	8002c76 <HAL_RCC_OscConfig+0x212>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f10:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f43f ae5b 	beq.w	8002bd0 <HAL_RCC_OscConfig+0x16c>
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f1a:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
 8002f1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f1e:	f023 0301 	bic.w	r3, r3, #1
 8002f22:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8002f24:	f7fe fb56 	bl	80015d4 <HAL_GetTick>
 8002f28:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f2a:	f7fe fb53 	bl	80015d4 <HAL_GetTick>
 8002f2e:	42a8      	cmp	r0, r5
 8002f30:	d0fb      	beq.n	8002f2a <HAL_RCC_OscConfig+0x4c6>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
  return HAL_OK;
 8002f34:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f36:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_RCC_OscConfig+0x534>)
 8002f3a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002f3c:	4023      	ands	r3, r4
 8002f3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f42:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	e5aa      	b.n	8002ab4 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5e:	4d0c      	ldr	r5, [pc, #48]	; (8002f90 <HAL_RCC_OscConfig+0x52c>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	672b      	str	r3, [r5, #112]	; 0x70
 8002f6c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f6e:	f023 0304 	bic.w	r3, r3, #4
 8002f72:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002f74:	f7fe fb2e 	bl	80015d4 <HAL_GetTick>
 8002f78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_OscConfig+0x524>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fb2a 	bl	80015d4 <HAL_GetTick>
 8002f80:	1b80      	subs	r0, r0, r6
 8002f82:	42b8      	cmp	r0, r7
 8002f84:	f63f aecd 	bhi.w	8002d22 <HAL_RCC_OscConfig+0x2be>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f8a:	0798      	lsls	r0, r3, #30
 8002f8c:	d4f6      	bmi.n	8002f7c <HAL_RCC_OscConfig+0x518>
 8002f8e:	e602      	b.n	8002b96 <HAL_RCC_OscConfig+0x132>
 8002f90:	58024400 	.word	0x58024400
 8002f94:	fffffc0c 	.word	0xfffffc0c
 8002f98:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	4a06      	ldr	r2, [pc, #24]	; (8002fb8 <HAL_RCC_OscConfig+0x554>)
 8002f9e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fa6:	e6ac      	b.n	8002d02 <HAL_RCC_OscConfig+0x29e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	f042 0204 	orr.w	r2, r2, #4
 8002fac:	671a      	str	r2, [r3, #112]	; 0x70
 8002fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb0:	f042 0201 	orr.w	r2, r2, #1
 8002fb4:	671a      	str	r2, [r3, #112]	; 0x70
 8002fb6:	e6a4      	b.n	8002d02 <HAL_RCC_OscConfig+0x29e>
 8002fb8:	58024400 	.word	0x58024400

08002fbc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x34>)
 8002fbe:	6913      	ldr	r3, [r2, #16]
 8002fc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d004      	beq.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x16>
 8002fc8:	2b18      	cmp	r3, #24
 8002fca:	d00d      	beq.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x2c>
 8002fcc:	b11b      	cbz	r3, 8002fd6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8002fce:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x38>)
 8002fd0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fd2:	4809      	ldr	r0, [pc, #36]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fd4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	d507      	bpl.n	8002fec <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fdc:	6813      	ldr	r3, [r2, #0]
 8002fde:	4807      	ldr	r0, [pc, #28]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x40>)
 8002fe0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002fe4:	40d8      	lsrs	r0, r3
 8002fe6:	4770      	bx	lr
 8002fe8:	f7ff bca4 	b.w	8002934 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fec:	4803      	ldr	r0, [pc, #12]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x40>)
}
 8002fee:	4770      	bx	lr
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	003d0900 	.word	0x003d0900
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	03d09000 	.word	0x03d09000

08003000 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003000:	2800      	cmp	r0, #0
 8003002:	f000 810c 	beq.w	800321e <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003006:	4a8c      	ldr	r2, [pc, #560]	; (8003238 <HAL_RCC_ClockConfig+0x238>)
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	428b      	cmp	r3, r1
{
 8003010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003014:	4604      	mov	r4, r0
 8003016:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	d20c      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	f023 030f 	bic.w	r3, r3, #15
 8003020:	430b      	orrs	r3, r1
 8003022:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003024:	6813      	ldr	r3, [r2, #0]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	428b      	cmp	r3, r1
 800302c:	d002      	beq.n	8003034 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800302e:	2001      	movs	r0, #1
}
 8003030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	075f      	lsls	r7, r3, #29
 8003038:	d50b      	bpl.n	8003052 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800303a:	4980      	ldr	r1, [pc, #512]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 800303c:	6920      	ldr	r0, [r4, #16]
 800303e:	698a      	ldr	r2, [r1, #24]
 8003040:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003044:	4290      	cmp	r0, r2
 8003046:	d904      	bls.n	8003052 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003048:	698a      	ldr	r2, [r1, #24]
 800304a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800304e:	4302      	orrs	r2, r0
 8003050:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003052:	071e      	lsls	r6, r3, #28
 8003054:	d50b      	bpl.n	800306e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003056:	4979      	ldr	r1, [pc, #484]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 8003058:	6960      	ldr	r0, [r4, #20]
 800305a:	69ca      	ldr	r2, [r1, #28]
 800305c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003060:	4290      	cmp	r0, r2
 8003062:	d904      	bls.n	800306e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003064:	69ca      	ldr	r2, [r1, #28]
 8003066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800306a:	4302      	orrs	r2, r0
 800306c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	06d8      	lsls	r0, r3, #27
 8003070:	d50b      	bpl.n	800308a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003072:	4972      	ldr	r1, [pc, #456]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 8003074:	69a0      	ldr	r0, [r4, #24]
 8003076:	69ca      	ldr	r2, [r1, #28]
 8003078:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800307c:	4290      	cmp	r0, r2
 800307e:	d904      	bls.n	800308a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003080:	69ca      	ldr	r2, [r1, #28]
 8003082:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003086:	4302      	orrs	r2, r0
 8003088:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800308a:	0699      	lsls	r1, r3, #26
 800308c:	d50b      	bpl.n	80030a6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800308e:	496b      	ldr	r1, [pc, #428]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 8003090:	69e0      	ldr	r0, [r4, #28]
 8003092:	6a0a      	ldr	r2, [r1, #32]
 8003094:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003098:	4290      	cmp	r0, r2
 800309a:	d904      	bls.n	80030a6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800309c:	6a0a      	ldr	r2, [r1, #32]
 800309e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a2:	4302      	orrs	r2, r0
 80030a4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a6:	079a      	lsls	r2, r3, #30
 80030a8:	f140 80ab 	bpl.w	8003202 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030ac:	4863      	ldr	r0, [pc, #396]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 80030ae:	68e1      	ldr	r1, [r4, #12]
 80030b0:	6982      	ldr	r2, [r0, #24]
 80030b2:	f002 020f 	and.w	r2, r2, #15
 80030b6:	4291      	cmp	r1, r2
 80030b8:	d904      	bls.n	80030c4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ba:	6982      	ldr	r2, [r0, #24]
 80030bc:	f022 020f 	bic.w	r2, r2, #15
 80030c0:	430a      	orrs	r2, r1
 80030c2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c4:	07d8      	lsls	r0, r3, #31
 80030c6:	d530      	bpl.n	800312a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030c8:	4a5c      	ldr	r2, [pc, #368]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 80030ca:	68a1      	ldr	r1, [r4, #8]
 80030cc:	6993      	ldr	r3, [r2, #24]
 80030ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030d8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	2902      	cmp	r1, #2
 80030dc:	f000 80a1 	beq.w	8003222 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e0:	2903      	cmp	r1, #3
 80030e2:	f000 8098 	beq.w	8003216 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030e6:	2901      	cmp	r1, #1
 80030e8:	f000 80a1 	beq.w	800322e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ec:	0758      	lsls	r0, r3, #29
 80030ee:	d59e      	bpl.n	800302e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	4e52      	ldr	r6, [pc, #328]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f6:	6933      	ldr	r3, [r6, #16]
 80030f8:	f023 0307 	bic.w	r3, r3, #7
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8003100:	f7fe fa68 	bl	80015d4 <HAL_GetTick>
 8003104:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e005      	b.n	8003114 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe fa64 	bl	80015d4 <HAL_GetTick>
 800310c:	1bc0      	subs	r0, r0, r7
 800310e:	4540      	cmp	r0, r8
 8003110:	f200 808b 	bhi.w	800322a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003114:	6933      	ldr	r3, [r6, #16]
 8003116:	6862      	ldr	r2, [r4, #4]
 8003118:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800311c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8003120:	d1f2      	bne.n	8003108 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	0799      	lsls	r1, r3, #30
 8003126:	d506      	bpl.n	8003136 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003128:	68e1      	ldr	r1, [r4, #12]
 800312a:	4844      	ldr	r0, [pc, #272]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 800312c:	6982      	ldr	r2, [r0, #24]
 800312e:	f002 020f 	and.w	r2, r2, #15
 8003132:	428a      	cmp	r2, r1
 8003134:	d869      	bhi.n	800320a <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_RCC_ClockConfig+0x238>)
 8003138:	680a      	ldr	r2, [r1, #0]
 800313a:	f002 020f 	and.w	r2, r2, #15
 800313e:	42aa      	cmp	r2, r5
 8003140:	d90a      	bls.n	8003158 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003142:	680a      	ldr	r2, [r1, #0]
 8003144:	f022 020f 	bic.w	r2, r2, #15
 8003148:	432a      	orrs	r2, r5
 800314a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	680a      	ldr	r2, [r1, #0]
 800314e:	f002 020f 	and.w	r2, r2, #15
 8003152:	42aa      	cmp	r2, r5
 8003154:	f47f af6b 	bne.w	800302e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003158:	075a      	lsls	r2, r3, #29
 800315a:	d50b      	bpl.n	8003174 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800315c:	4937      	ldr	r1, [pc, #220]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 800315e:	6920      	ldr	r0, [r4, #16]
 8003160:	698a      	ldr	r2, [r1, #24]
 8003162:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003166:	4290      	cmp	r0, r2
 8003168:	d204      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800316a:	698a      	ldr	r2, [r1, #24]
 800316c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003170:	4302      	orrs	r2, r0
 8003172:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	071f      	lsls	r7, r3, #28
 8003176:	d50b      	bpl.n	8003190 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003178:	4930      	ldr	r1, [pc, #192]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 800317a:	6960      	ldr	r0, [r4, #20]
 800317c:	69ca      	ldr	r2, [r1, #28]
 800317e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003182:	4290      	cmp	r0, r2
 8003184:	d204      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003186:	69ca      	ldr	r2, [r1, #28]
 8003188:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800318c:	4302      	orrs	r2, r0
 800318e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	06de      	lsls	r6, r3, #27
 8003192:	d50b      	bpl.n	80031ac <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003194:	4929      	ldr	r1, [pc, #164]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 8003196:	69a0      	ldr	r0, [r4, #24]
 8003198:	69ca      	ldr	r2, [r1, #28]
 800319a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800319e:	4290      	cmp	r0, r2
 80031a0:	d204      	bcs.n	80031ac <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031a2:	69ca      	ldr	r2, [r1, #28]
 80031a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031a8:	4302      	orrs	r2, r0
 80031aa:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031ac:	069d      	lsls	r5, r3, #26
 80031ae:	d50b      	bpl.n	80031c8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031b0:	4a22      	ldr	r2, [pc, #136]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 80031b2:	69e1      	ldr	r1, [r4, #28]
 80031b4:	6a13      	ldr	r3, [r2, #32]
 80031b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ba:	4299      	cmp	r1, r3
 80031bc:	d204      	bcs.n	80031c8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031be:	6a13      	ldr	r3, [r2, #32]
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031c8:	f7ff fef8 	bl	8002fbc <HAL_RCC_GetSysClockFreq>
 80031cc:	4a1b      	ldr	r2, [pc, #108]	; (800323c <HAL_RCC_ClockConfig+0x23c>)
 80031ce:	4603      	mov	r3, r0
 80031d0:	481b      	ldr	r0, [pc, #108]	; (8003240 <HAL_RCC_ClockConfig+0x240>)
 80031d2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031d4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031d6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 80031da:	4d1a      	ldr	r5, [pc, #104]	; (8003244 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031dc:	f002 020f 	and.w	r2, r2, #15
 80031e0:	4c19      	ldr	r4, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 80031ea:	4818      	ldr	r0, [pc, #96]	; (800324c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ec:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031f0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80031f2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 80031f4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031f6:	40d3      	lsrs	r3, r2
 80031f8:	6023      	str	r3, [r4, #0]
}
 80031fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 80031fe:	f7fd bf95 	b.w	800112c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	07da      	lsls	r2, r3, #31
 8003204:	f53f af60 	bmi.w	80030c8 <HAL_RCC_ClockConfig+0xc8>
 8003208:	e795      	b.n	8003136 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320a:	6982      	ldr	r2, [r0, #24]
 800320c:	f022 020f 	bic.w	r2, r2, #15
 8003210:	4311      	orrs	r1, r2
 8003212:	6181      	str	r1, [r0, #24]
 8003214:	e78f      	b.n	8003136 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003216:	019f      	lsls	r7, r3, #6
 8003218:	f53f af6a 	bmi.w	80030f0 <HAL_RCC_ClockConfig+0xf0>
 800321c:	e707      	b.n	800302e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
}
 8003220:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003222:	039b      	lsls	r3, r3, #14
 8003224:	f53f af64 	bmi.w	80030f0 <HAL_RCC_ClockConfig+0xf0>
 8003228:	e701      	b.n	800302e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800322a:	2003      	movs	r0, #3
 800322c:	e700      	b.n	8003030 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322e:	05de      	lsls	r6, r3, #23
 8003230:	f53f af5e 	bmi.w	80030f0 <HAL_RCC_ClockConfig+0xf0>
 8003234:	e6fb      	b.n	800302e <HAL_RCC_ClockConfig+0x2e>
 8003236:	bf00      	nop
 8003238:	52002000 	.word	0x52002000
 800323c:	58024400 	.word	0x58024400
 8003240:	0800f85c 	.word	0x0800f85c
 8003244:	24000000 	.word	0x24000000
 8003248:	24000004 	.word	0x24000004
 800324c:	2400000c 	.word	0x2400000c

08003250 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003250:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003252:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003254:	6913      	ldr	r3, [r2, #16]
 8003256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800325a:	2b10      	cmp	r3, #16
 800325c:	d01a      	beq.n	8003294 <HAL_RCC_GetHCLKFreq+0x44>
 800325e:	2b18      	cmp	r3, #24
 8003260:	d023      	beq.n	80032aa <HAL_RCC_GetHCLKFreq+0x5a>
 8003262:	b1cb      	cbz	r3, 8003298 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8003264:	4814      	ldr	r0, [pc, #80]	; (80032b8 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_RCC_GetHCLKFreq+0x64>)
 8003268:	4914      	ldr	r1, [pc, #80]	; (80032bc <HAL_RCC_GetHCLKFreq+0x6c>)
 800326a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800326c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800326e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003272:	4c13      	ldr	r4, [pc, #76]	; (80032c0 <HAL_RCC_GetHCLKFreq+0x70>)
 8003274:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003278:	4d12      	ldr	r5, [pc, #72]	; (80032c4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800327a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800327c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800327e:	f002 021f 	and.w	r2, r2, #31
 8003282:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003286:	f003 001f 	and.w	r0, r3, #31
 800328a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800328e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003290:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003292:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x78>)
 8003296:	e7e6      	b.n	8003266 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003298:	6813      	ldr	r3, [r2, #0]
 800329a:	069b      	lsls	r3, r3, #26
 800329c:	d508      	bpl.n	80032b0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	480a      	ldr	r0, [pc, #40]	; (80032cc <HAL_RCC_GetHCLKFreq+0x7c>)
 80032a2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80032a6:	40d0      	lsrs	r0, r2
 80032a8:	e7dd      	b.n	8003266 <HAL_RCC_GetHCLKFreq+0x16>
 80032aa:	f7ff fb43 	bl	8002934 <HAL_RCC_GetSysClockFreq.part.0>
 80032ae:	e7da      	b.n	8003266 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b0:	4806      	ldr	r0, [pc, #24]	; (80032cc <HAL_RCC_GetHCLKFreq+0x7c>)
 80032b2:	e7d8      	b.n	8003266 <HAL_RCC_GetHCLKFreq+0x16>
 80032b4:	58024400 	.word	0x58024400
 80032b8:	003d0900 	.word	0x003d0900
 80032bc:	0800f85c 	.word	0x0800f85c
 80032c0:	24000004 	.word	0x24000004
 80032c4:	24000000 	.word	0x24000000
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	03d09000 	.word	0x03d09000

080032d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d0:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032d2:	f7ff ffbd 	bl	8003250 <HAL_RCC_GetHCLKFreq>
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80032d8:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032e6:	40d8      	lsrs	r0, r3
 80032e8:	bd08      	pop	{r3, pc}
 80032ea:	bf00      	nop
 80032ec:	58024400 	.word	0x58024400
 80032f0:	0800f85c 	.word	0x0800f85c

080032f4 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80032f6:	223f      	movs	r2, #63	; 0x3f
 80032f8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	f002 0207 	and.w	r2, r2, #7
 8003300:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8003308:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	f002 020f 	and.w	r2, r2, #15
 8003310:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003318:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8003320:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003322:	69da      	ldr	r2, [r3, #28]
 8003324:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003328:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800332a:	6a1b      	ldr	r3, [r3, #32]
{
 800332c:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800332e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003332:	4c05      	ldr	r4, [pc, #20]	; (8003348 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003334:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003336:	6823      	ldr	r3, [r4, #0]
}
 8003338:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	600b      	str	r3, [r1, #0]
}
 8003342:	4770      	bx	lr
 8003344:	58024400 	.word	0x58024400
 8003348:	52002000 	.word	0x52002000

0800334c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003350:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003354:	2b01      	cmp	r3, #1
 8003356:	d14d      	bne.n	80033f4 <HAL_TIM_Base_Start_IT+0xa4>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003358:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	2102      	movs	r1, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <HAL_TIM_Base_Start_IT+0xb8>)
 800335e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003362:	bf18      	it	ne
 8003364:	429a      	cmpne	r2, r3
{
 8003366:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	4d27      	ldr	r5, [pc, #156]	; (800340c <HAL_TIM_Base_Start_IT+0xbc>)
 8003370:	4c27      	ldr	r4, [pc, #156]	; (8003410 <HAL_TIM_Base_Start_IT+0xc0>)
 8003372:	42aa      	cmp	r2, r5
 8003374:	bf08      	it	eq
 8003376:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800337a:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	4825      	ldr	r0, [pc, #148]	; (8003414 <HAL_TIM_Base_Start_IT+0xc4>)
 8003380:	42a2      	cmp	r2, r4
 8003382:	bf08      	it	eq
 8003384:	f043 0301 	orreq.w	r3, r3, #1
 8003388:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800338c:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338e:	42a2      	cmp	r2, r4
 8003390:	bf08      	it	eq
 8003392:	f043 0301 	orreq.w	r3, r3, #1
 8003396:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800339a:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	4282      	cmp	r2, r0
 80033a0:	bf08      	it	eq
 80033a2:	f043 0301 	orreq.w	r3, r3, #1
 80033a6:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033aa:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ac:	42a2      	cmp	r2, r4
 80033ae:	bf08      	it	eq
 80033b0:	f043 0301 	orreq.w	r3, r3, #1
 80033b4:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_TIM_Base_Start_IT+0xc8>)
 80033b6:	4282      	cmp	r2, r0
 80033b8:	bf08      	it	eq
 80033ba:	f043 0301 	orreq.w	r3, r3, #1
 80033be:	428a      	cmp	r2, r1
 80033c0:	bf08      	it	eq
 80033c2:	f043 0301 	orreq.w	r3, r3, #1
 80033c6:	b933      	cbnz	r3, 80033d6 <HAL_TIM_Base_Start_IT+0x86>
 80033c8:	f5a0 40b8 	sub.w	r0, r0, #23552	; 0x5c00
 80033cc:	1a10      	subs	r0, r2, r0
 80033ce:	fab0 f080 	clz	r0, r0
 80033d2:	0940      	lsrs	r0, r0, #5
 80033d4:	b198      	cbz	r0, 80033fe <HAL_TIM_Base_Start_IT+0xae>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d6:	6891      	ldr	r1, [r2, #8]
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_TIM_Base_Start_IT+0xcc>)
 80033da:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	2b06      	cmp	r3, #6
 80033de:	d00b      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0xa8>
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d008      	beq.n	80033f8 <HAL_TIM_Base_Start_IT+0xa8>
    {
      __HAL_TIM_ENABLE(htim);
 80033e6:	6813      	ldr	r3, [r2, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80033e8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6013      	str	r3, [r2, #0]
}
 80033f0:	bc30      	pop	{r4, r5}
 80033f2:	4770      	bx	lr
    return HAL_ERROR;
 80033f4:	2001      	movs	r0, #1
}
 80033f6:	4770      	bx	lr
  return HAL_OK;
 80033f8:	2000      	movs	r0, #0
}
 80033fa:	bc30      	pop	{r4, r5}
 80033fc:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80033fe:	6813      	ldr	r3, [r2, #0]
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	e7f3      	b.n	80033f0 <HAL_TIM_Base_Start_IT+0xa0>
 8003408:	40010000 	.word	0x40010000
 800340c:	40000400 	.word	0x40000400
 8003410:	40000800 	.word	0x40000800
 8003414:	40010400 	.word	0x40010400
 8003418:	4000e000 	.word	0x4000e000
 800341c:	00010007 	.word	0x00010007

08003420 <HAL_TIM_OC_DelayElapsedCallback>:
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <HAL_TIM_IC_CaptureCallback>:
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop

0800342c <HAL_TIM_TriggerCallback>:
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	0791      	lsls	r1, r2, #30
{
 8003436:	b510      	push	{r4, lr}
 8003438:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800343a:	d502      	bpl.n	8003442 <HAL_TIM_IRQHandler+0x12>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	0792      	lsls	r2, r2, #30
 8003440:	d468      	bmi.n	8003514 <HAL_TIM_IRQHandler+0xe4>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003442:	691a      	ldr	r2, [r3, #16]
 8003444:	0752      	lsls	r2, r2, #29
 8003446:	d502      	bpl.n	800344e <HAL_TIM_IRQHandler+0x1e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	0750      	lsls	r0, r2, #29
 800344c:	d44f      	bmi.n	80034ee <HAL_TIM_IRQHandler+0xbe>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	0711      	lsls	r1, r2, #28
 8003452:	d502      	bpl.n	800345a <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	0712      	lsls	r2, r2, #28
 8003458:	d437      	bmi.n	80034ca <HAL_TIM_IRQHandler+0x9a>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	06d0      	lsls	r0, r2, #27
 800345e:	d502      	bpl.n	8003466 <HAL_TIM_IRQHandler+0x36>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	06d1      	lsls	r1, r2, #27
 8003464:	d41e      	bmi.n	80034a4 <HAL_TIM_IRQHandler+0x74>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	07d2      	lsls	r2, r2, #31
 800346a:	d502      	bpl.n	8003472 <HAL_TIM_IRQHandler+0x42>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	07d0      	lsls	r0, r2, #31
 8003470:	d469      	bmi.n	8003546 <HAL_TIM_IRQHandler+0x116>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	0611      	lsls	r1, r2, #24
 8003476:	d502      	bpl.n	800347e <HAL_TIM_IRQHandler+0x4e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	0612      	lsls	r2, r2, #24
 800347c:	d46b      	bmi.n	8003556 <HAL_TIM_IRQHandler+0x126>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	05d0      	lsls	r0, r2, #23
 8003482:	d502      	bpl.n	800348a <HAL_TIM_IRQHandler+0x5a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	0611      	lsls	r1, r2, #24
 8003488:	d46d      	bmi.n	8003566 <HAL_TIM_IRQHandler+0x136>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	0652      	lsls	r2, r2, #25
 800348e:	d502      	bpl.n	8003496 <HAL_TIM_IRQHandler+0x66>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	0650      	lsls	r0, r2, #25
 8003494:	d46f      	bmi.n	8003576 <HAL_TIM_IRQHandler+0x146>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	0691      	lsls	r1, r2, #26
 800349a:	d502      	bpl.n	80034a2 <HAL_TIM_IRQHandler+0x72>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	0692      	lsls	r2, r2, #26
 80034a0:	d449      	bmi.n	8003536 <HAL_TIM_IRQHandler+0x106>
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034a2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034a4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034a8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80034aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ac:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80034b6:	d16f      	bne.n	8003598 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b8:	f7ff ffb2 	bl	8003420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034bc:	4620      	mov	r0, r4
 80034be:	f7ff ffb3 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034c4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	7722      	strb	r2, [r4, #28]
 80034c8:	e7cd      	b.n	8003466 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034ca:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ce:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80034d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	079b      	lsls	r3, r3, #30
 80034da:	d15a      	bne.n	8003592 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034dc:	f7ff ffa0 	bl	8003420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e0:	4620      	mov	r0, r4
 80034e2:	f7ff ffa1 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034e8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	7722      	strb	r2, [r4, #28]
 80034ec:	e7b5      	b.n	800345a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034ee:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80034f4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003500:	d144      	bne.n	800358c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003502:	f7ff ff8d 	bl	8003420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff ff8e 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800350e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003510:	7722      	strb	r2, [r4, #28]
 8003512:	e79c      	b.n	800344e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003514:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003518:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800351a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800351c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	0799      	lsls	r1, r3, #30
 8003522:	d130      	bne.n	8003586 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003524:	f7ff ff7c 	bl	8003420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	4620      	mov	r0, r4
 800352a:	f7ff ff7d 	bl	8003428 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003530:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	7722      	strb	r2, [r4, #28]
 8003534:	e785      	b.n	8003442 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003536:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800353a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800353c:	611a      	str	r2, [r3, #16]
}
 800353e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003542:	f000 b8f5 	b.w	8003730 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003546:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800354a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800354c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800354e:	f7fd fdc7 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003552:	6823      	ldr	r3, [r4, #0]
 8003554:	e78d      	b.n	8003472 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003556:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800355a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800355c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800355e:	f000 f8e9 	bl	8003734 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	e78b      	b.n	800347e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003566:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800356a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800356c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800356e:	f000 f8e3 	bl	8003738 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	e789      	b.n	800348a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003576:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800357a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800357c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800357e:	f7ff ff55 	bl	800342c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	e787      	b.n	8003496 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8003586:	f7ff ff4d 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 800358a:	e7d0      	b.n	800352e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800358c:	f7ff ff4a 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003590:	e7bc      	b.n	800350c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	f7ff ff47 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 8003596:	e7a6      	b.n	80034e6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	f7ff ff44 	bl	8003424 <HAL_TIM_IC_CaptureCallback>
 800359c:	e791      	b.n	80034c2 <HAL_TIM_IRQHandler+0x92>
 800359e:	bf00      	nop

080035a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a0:	4a43      	ldr	r2, [pc, #268]	; (80036b0 <TIM_Base_SetConfig+0x110>)
 80035a2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80035a6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a8:	eba0 0202 	sub.w	r2, r0, r2
 80035ac:	fab2 f282 	clz	r2, r2
{
 80035b0:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b2:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80035b6:	d02b      	beq.n	8003610 <TIM_Base_SetConfig+0x70>
 80035b8:	bb52      	cbnz	r2, 8003610 <TIM_Base_SetConfig+0x70>
 80035ba:	4c3e      	ldr	r4, [pc, #248]	; (80036b4 <TIM_Base_SetConfig+0x114>)
 80035bc:	42a0      	cmp	r0, r4
 80035be:	d04f      	beq.n	8003660 <TIM_Base_SetConfig+0xc0>
 80035c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80035c4:	42a0      	cmp	r0, r4
 80035c6:	d04b      	beq.n	8003660 <TIM_Base_SetConfig+0xc0>
 80035c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80035cc:	42a0      	cmp	r0, r4
 80035ce:	d051      	beq.n	8003674 <TIM_Base_SetConfig+0xd4>
 80035d0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80035d4:	42a0      	cmp	r0, r4
 80035d6:	d04d      	beq.n	8003674 <TIM_Base_SetConfig+0xd4>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d8:	4a37      	ldr	r2, [pc, #220]	; (80036b8 <TIM_Base_SetConfig+0x118>)
 80035da:	4290      	cmp	r0, r2
 80035dc:	d05a      	beq.n	8003694 <TIM_Base_SetConfig+0xf4>
 80035de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035e2:	4290      	cmp	r0, r2
 80035e4:	d056      	beq.n	8003694 <TIM_Base_SetConfig+0xf4>
 80035e6:	4c35      	ldr	r4, [pc, #212]	; (80036bc <TIM_Base_SetConfig+0x11c>)
 80035e8:	f5a2 42c8 	sub.w	r2, r2, #25600	; 0x6400
 80035ec:	4290      	cmp	r0, r2
 80035ee:	bf18      	it	ne
 80035f0:	42a0      	cmpne	r0, r4
 80035f2:	d04f      	beq.n	8003694 <TIM_Base_SetConfig+0xf4>
 80035f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80035f8:	4290      	cmp	r0, r2
 80035fa:	d04b      	beq.n	8003694 <TIM_Base_SetConfig+0xf4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035fc:	694d      	ldr	r5, [r1, #20]
 80035fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003602:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003606:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003608:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800360c:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360e:	e023      	b.n	8003658 <TIM_Base_SetConfig+0xb8>
    tmpcr1 |= Structure->CounterMode;
 8003610:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003616:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	4c29      	ldr	r4, [pc, #164]	; (80036c0 <TIM_Base_SetConfig+0x120>)
 800361a:	1b04      	subs	r4, r0, r4
 800361c:	fab4 f484 	clz	r4, r4
 8003620:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003628:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362a:	694d      	ldr	r5, [r1, #20]
 800362c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003630:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003632:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003634:	688b      	ldr	r3, [r1, #8]
 8003636:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003638:	680b      	ldr	r3, [r1, #0]
 800363a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	b952      	cbnz	r2, 8003654 <TIM_Base_SetConfig+0xb4>
 800363e:	b94c      	cbnz	r4, 8003654 <TIM_Base_SetConfig+0xb4>
 8003640:	4a1d      	ldr	r2, [pc, #116]	; (80036b8 <TIM_Base_SetConfig+0x118>)
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <TIM_Base_SetConfig+0x124>)
 8003644:	4298      	cmp	r0, r3
 8003646:	bf18      	it	ne
 8003648:	4290      	cmpne	r0, r2
 800364a:	d003      	beq.n	8003654 <TIM_Base_SetConfig+0xb4>
 800364c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003650:	4298      	cmp	r0, r3
 8003652:	d101      	bne.n	8003658 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003654:	690b      	ldr	r3, [r1, #16]
 8003656:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003658:	2301      	movs	r3, #1
}
 800365a:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800365c:	6143      	str	r3, [r0, #20]
}
 800365e:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003660:	4c17      	ldr	r4, [pc, #92]	; (80036c0 <TIM_Base_SetConfig+0x120>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003666:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003668:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800366a:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	fab4 f484 	clz	r4, r4
 8003670:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003672:	e7d6      	b.n	8003622 <TIM_Base_SetConfig+0x82>
    tmpcr1 |= Structure->CounterMode;
 8003674:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367a:	4c11      	ldr	r4, [pc, #68]	; (80036c0 <TIM_Base_SetConfig+0x120>)
    tmpcr1 |= Structure->CounterMode;
 800367c:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367e:	4d12      	ldr	r5, [pc, #72]	; (80036c8 <TIM_Base_SetConfig+0x128>)
 8003680:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	fab4 f484 	clz	r4, r4
 8003688:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800368c:	d0c9      	beq.n	8003622 <TIM_Base_SetConfig+0x82>
 800368e:	2c00      	cmp	r4, #0
 8003690:	d1c7      	bne.n	8003622 <TIM_Base_SetConfig+0x82>
 8003692:	e7a1      	b.n	80035d8 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003694:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369c:	4323      	orrs	r3, r4
  TIMx->ARR = (uint32_t)Structure->Period ;
 800369e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a4:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 80036a6:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80036a8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036aa:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80036ac:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ae:	e7c7      	b.n	8003640 <TIM_Base_SetConfig+0xa0>
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40000400 	.word	0x40000400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	40014800 	.word	0x40014800
 80036c0:	40010400 	.word	0x40010400
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40000c00 	.word	0x40000c00

080036cc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80036cc:	b370      	cbz	r0, 800372c <HAL_TIM_Base_Init+0x60>
{
 80036ce:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80036d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036d4:	4604      	mov	r4, r0
 80036d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036da:	b313      	cbz	r3, 8003722 <HAL_TIM_Base_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036dc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80036de:	2302      	movs	r3, #2
 80036e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80036e8:	f7ff ff5a 	bl	80035a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ec:	2301      	movs	r3, #1
  return HAL_OK;
 80036ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80036f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80036fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003700:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003714:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003718:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800371c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003720:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003722:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003726:	f7ff fe11 	bl	800334c <HAL_TIM_Base_MspInit>
 800372a:	e7d7      	b.n	80036dc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800372c:	2001      	movs	r0, #1
}
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_CommutCallback>:
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop

08003734 <HAL_TIMEx_BreakCallback>:
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop

08003738 <HAL_TIMEx_Break2Callback>:
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop

0800373c <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <MX_LWIP_Init>:
{
 8003740:	b5f0      	push	{r4, r5, r6, r7, lr}
  IP_ADDRESS[0] = 192;
 8003742:	4b25      	ldr	r3, [pc, #148]	; (80037d8 <MX_LWIP_Init+0x98>)
  GATEWAY_ADDRESS[0] = 0;
 8003744:	2400      	movs	r4, #0
  IP_ADDRESS[0] = 192;
 8003746:	4f25      	ldr	r7, [pc, #148]	; (80037dc <MX_LWIP_Init+0x9c>)
{
 8003748:	b085      	sub	sp, #20
  NETMASK_ADDRESS[0] = 255;
 800374a:	4e25      	ldr	r6, [pc, #148]	; (80037e0 <MX_LWIP_Init+0xa0>)
	tcpip_init(tcpip_init_done, arg);
 800374c:	4621      	mov	r1, r4
  GATEWAY_ADDRESS[0] = 0;
 800374e:	4d25      	ldr	r5, [pc, #148]	; (80037e4 <MX_LWIP_Init+0xa4>)
	tcpip_init(tcpip_init_done, arg);
 8003750:	4620      	mov	r0, r4
  IP_ADDRESS[0] = 192;
 8003752:	603b      	str	r3, [r7, #0]
  NETMASK_ADDRESS[0] = 255;
 8003754:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  GATEWAY_ADDRESS[0] = 0;
 8003758:	602c      	str	r4, [r5, #0]
  NETMASK_ADDRESS[0] = 255;
 800375a:	6033      	str	r3, [r6, #0]
	tcpip_init(tcpip_init_done, arg);
 800375c:	f003 f8ac 	bl	80068b8 <tcpip_init>
	LOCK_TCPIP_CORE();
 8003760:	f000 fb28 	bl	8003db4 <sys_lock_tcpip_core>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003764:	4920      	ldr	r1, [pc, #128]	; (80037e8 <MX_LWIP_Init+0xa8>)
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <MX_LWIP_Init+0xac>)
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003768:	683b      	ldr	r3, [r7, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800376a:	6830      	ldr	r0, [r6, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800376c:	9400      	str	r4, [sp, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800376e:	6010      	str	r0, [r2, #0]
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003770:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003772:	6828      	ldr	r0, [r5, #0]
 8003774:	4b1e      	ldr	r3, [pc, #120]	; (80037f0 <MX_LWIP_Init+0xb0>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003776:	4c1f      	ldr	r4, [pc, #124]	; (80037f4 <MX_LWIP_Init+0xb4>)
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003778:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800377a:	481f      	ldr	r0, [pc, #124]	; (80037f8 <MX_LWIP_Init+0xb8>)
 800377c:	9002      	str	r0, [sp, #8]
 800377e:	481f      	ldr	r0, [pc, #124]	; (80037fc <MX_LWIP_Init+0xbc>)
 8003780:	9001      	str	r0, [sp, #4]
 8003782:	4620      	mov	r0, r4
 8003784:	f003 fd88 	bl	8007298 <netif_add>
  netif_set_default(&gnetif);
 8003788:	4620      	mov	r0, r4
 800378a:	f003 fe3b 	bl	8007404 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 800378e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
    netif_set_up(&gnetif);
 8003792:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8003794:	075b      	lsls	r3, r3, #29
 8003796:	d51c      	bpl.n	80037d2 <MX_LWIP_Init+0x92>
    netif_set_up(&gnetif);
 8003798:	f003 fe3e 	bl	8007418 <netif_set_up>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800379c:	4c18      	ldr	r4, [pc, #96]	; (8003800 <MX_LWIP_Init+0xc0>)
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800379e:	4919      	ldr	r1, [pc, #100]	; (8003804 <MX_LWIP_Init+0xc4>)
 80037a0:	4814      	ldr	r0, [pc, #80]	; (80037f4 <MX_LWIP_Init+0xb4>)
 80037a2:	f003 fecd 	bl	8007540 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80037a6:	2220      	movs	r2, #32
 80037a8:	2100      	movs	r1, #0
 80037aa:	1d20      	adds	r0, r4, #4
 80037ac:	f00a fc8f 	bl	800e0ce <memset>
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80037b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
  attributes.name = "EthLink";
 80037b4:	4814      	ldr	r0, [pc, #80]	; (8003808 <MX_LWIP_Init+0xc8>)
  attributes.priority = osPriorityBelowNormal;
 80037b6:	2310      	movs	r3, #16
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80037b8:	6161      	str	r1, [r4, #20]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80037ba:	4622      	mov	r2, r4
 80037bc:	490d      	ldr	r1, [pc, #52]	; (80037f4 <MX_LWIP_Init+0xb4>)
  attributes.name = "EthLink";
 80037be:	6020      	str	r0, [r4, #0]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80037c0:	4812      	ldr	r0, [pc, #72]	; (800380c <MX_LWIP_Init+0xcc>)
  attributes.priority = osPriorityBelowNormal;
 80037c2:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80037c4:	f000 fbfa 	bl	8003fbc <osThreadNew>
}
 80037c8:	b005      	add	sp, #20
 80037ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  UNLOCK_TCPIP_CORE();
 80037ce:	f000 bb6f 	b.w	8003eb0 <sys_unlock_tcpip_core>
    netif_set_down(&gnetif);
 80037d2:	f003 fe45 	bl	8007460 <netif_set_down>
 80037d6:	e7e1      	b.n	800379c <MX_LWIP_Init+0x5c>
 80037d8:	0a01a8c0 	.word	0x0a01a8c0
 80037dc:	24000110 	.word	0x24000110
 80037e0:	24000114 	.word	0x24000114
 80037e4:	2400010c 	.word	0x2400010c
 80037e8:	24000174 	.word	0x24000174
 80037ec:	24000178 	.word	0x24000178
 80037f0:	24000170 	.word	0x24000170
 80037f4:	2400013c 	.word	0x2400013c
 80037f8:	08006839 	.word	0x08006839
 80037fc:	080039d1 	.word	0x080039d1
 8003800:	24000118 	.word	0x24000118
 8003804:	0800373d 	.word	0x0800373d
 8003808:	0800f86c 	.word	0x0800f86c
 800380c:	08003dd1 	.word	0x08003dd1

08003810 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003810:	2000      	movs	r0, #0
 8003812:	4770      	bx	lr

08003814 <low_level_output>:
{
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	b08c      	sub	sp, #48	; 0x30
 8003818:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800381a:	2230      	movs	r2, #48	; 0x30
 800381c:	2100      	movs	r1, #0
 800381e:	4668      	mov	r0, sp
 8003820:	f00a fc55 	bl	800e0ce <memset>
  for(q = p; q != NULL; q = q->next)
 8003824:	b1fc      	cbz	r4, 8003866 <low_level_output+0x52>
    Txbuffer[i].len = q->len;
 8003826:	8962      	ldrh	r2, [r4, #10]
 8003828:	466b      	mov	r3, sp
    Txbuffer[i].buffer = q->payload;
 800382a:	6861      	ldr	r1, [r4, #4]
  uint32_t i = 0U;
 800382c:	f04f 0c00 	mov.w	ip, #0
    if(i >= ETH_TX_DESC_CNT)
 8003830:	330c      	adds	r3, #12
    Txbuffer[i].len = q->len;
 8003832:	e9cd 1200 	strd	r1, r2, [sp]
 8003836:	4622      	mov	r2, r4
    if(q->next == NULL)
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	b16a      	cbz	r2, 8003858 <low_level_output+0x44>
    i++;
 800383c:	f10c 0c01 	add.w	ip, ip, #1
    if(i >= ETH_TX_DESC_CNT)
 8003840:	f1bc 0f04 	cmp.w	ip, #4
 8003844:	d02b      	beq.n	800389e <low_level_output+0x8a>
    Txbuffer[i].buffer = q->payload;
 8003846:	6850      	ldr	r0, [r2, #4]
    Txbuffer[i].len = q->len;
 8003848:	8951      	ldrh	r1, [r2, #10]
    if(q->next == NULL)
 800384a:	6812      	ldr	r2, [r2, #0]
    Txbuffer[i].len = q->len;
 800384c:	6059      	str	r1, [r3, #4]
    Txbuffer[i].buffer = q->payload;
 800384e:	e943 3001 	strd	r3, r0, [r3, #-4]
    if(i >= ETH_TX_DESC_CNT)
 8003852:	330c      	adds	r3, #12
    if(q->next == NULL)
 8003854:	2a00      	cmp	r2, #0
 8003856:	d1f1      	bne.n	800383c <low_level_output+0x28>
      Txbuffer[i].next = NULL;
 8003858:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800385c:	ab0c      	add	r3, sp, #48	; 0x30
 800385e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8003862:	f84c 2c28 	str.w	r2, [ip, #-40]
  TxConfig.Length = p->tot_len;
 8003866:	4e10      	ldr	r6, [pc, #64]	; (80038a8 <low_level_output+0x94>)
  pbuf_ref(p);
 8003868:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 800386a:	8923      	ldrh	r3, [r4, #8]
  TxConfig.TxBuffer = Txbuffer;
 800386c:	f8c6 d008 	str.w	sp, [r6, #8]
  TxConfig.Length = p->tot_len;
 8003870:	6073      	str	r3, [r6, #4]
  TxConfig.pData = p;
 8003872:	6374      	str	r4, [r6, #52]	; 0x34
  pbuf_ref(p);
 8003874:	f004 f9ac 	bl	8007bd0 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003878:	4631      	mov	r1, r6
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <low_level_output+0x98>)
 800387c:	4d0c      	ldr	r5, [pc, #48]	; (80038b0 <low_level_output+0x9c>)
 800387e:	f7fe fab3 	bl	8001de8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003882:	f04f 31ff 	mov.w	r1, #4294967295
 8003886:	6828      	ldr	r0, [r5, #0]
 8003888:	f000 fcc2 	bl	8004210 <osSemaphoreAcquire>
 800388c:	4604      	mov	r4, r0
 800388e:	2800      	cmp	r0, #0
 8003890:	d1f7      	bne.n	8003882 <low_level_output+0x6e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003892:	4806      	ldr	r0, [pc, #24]	; (80038ac <low_level_output+0x98>)
 8003894:	f7fe fb62 	bl	8001f5c <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003898:	4620      	mov	r0, r4
}
 800389a:	b00c      	add	sp, #48	; 0x30
 800389c:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_IF;
 800389e:	f06f 000b 	mvn.w	r0, #11
}
 80038a2:	b00c      	add	sp, #48	; 0x30
 80038a4:	bd70      	pop	{r4, r5, r6, pc}
 80038a6:	bf00      	nop
 80038a8:	240001a4 	.word	0x240001a4
 80038ac:	240001e0 	.word	0x240001e0
 80038b0:	240001dc 	.word	0x240001dc

080038b4 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 80038b4:	f7fd be8e 	b.w	80015d4 <HAL_GetTick>

080038b8 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&heth);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <ETH_PHY_IO_Init+0xc>)
{
 80038ba:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 80038bc:	f7fe fd68 	bl	8002390 <HAL_ETH_SetMDIOClockRange>
}
 80038c0:	2000      	movs	r0, #0
 80038c2:	bd08      	pop	{r3, pc}
 80038c4:	240001e0 	.word	0x240001e0

080038c8 <ETH_PHY_IO_ReadReg>:
{
 80038c8:	4684      	mov	ip, r0
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80038ca:	4806      	ldr	r0, [pc, #24]	; (80038e4 <ETH_PHY_IO_ReadReg+0x1c>)
{
 80038cc:	b508      	push	{r3, lr}
 80038ce:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80038d0:	460a      	mov	r2, r1
 80038d2:	4661      	mov	r1, ip
 80038d4:	f7fe fc24 	bl	8002120 <HAL_ETH_ReadPHYRegister>
 80038d8:	3800      	subs	r0, #0
 80038da:	bf18      	it	ne
 80038dc:	2001      	movne	r0, #1
}
 80038de:	4240      	negs	r0, r0
 80038e0:	bd08      	pop	{r3, pc}
 80038e2:	bf00      	nop
 80038e4:	240001e0 	.word	0x240001e0

080038e8 <ETH_PHY_IO_WriteReg>:
{
 80038e8:	4684      	mov	ip, r0
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80038ea:	4806      	ldr	r0, [pc, #24]	; (8003904 <ETH_PHY_IO_WriteReg+0x1c>)
{
 80038ec:	b508      	push	{r3, lr}
 80038ee:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80038f0:	460a      	mov	r2, r1
 80038f2:	4661      	mov	r1, ip
 80038f4:	f7fe fc42 	bl	800217c <HAL_ETH_WritePHYRegister>
 80038f8:	3800      	subs	r0, #0
 80038fa:	bf18      	it	ne
 80038fc:	2001      	movne	r0, #1
}
 80038fe:	4240      	negs	r0, r0
 8003900:	bd08      	pop	{r3, pc}
 8003902:	bf00      	nop
 8003904:	240001e0 	.word	0x240001e0

08003908 <pbuf_free_custom>:
{
 8003908:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800390a:	4808      	ldr	r0, [pc, #32]	; (800392c <pbuf_free_custom+0x24>)
{
 800390c:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800390e:	f003 fbe3 	bl	80070d8 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pbuf_free_custom+0x28>)
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	2a01      	cmp	r2, #1
 8003918:	d000      	beq.n	800391c <pbuf_free_custom+0x14>
}
 800391a:	bd08      	pop	{r3, pc}
    osSemaphoreRelease(RxPktSemaphore);
 800391c:	4905      	ldr	r1, [pc, #20]	; (8003934 <pbuf_free_custom+0x2c>)
    RxAllocStatus = RX_ALLOC_OK;
 800391e:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8003920:	6808      	ldr	r0, [r1, #0]
    RxAllocStatus = RX_ALLOC_OK;
 8003922:	701a      	strb	r2, [r3, #0]
}
 8003924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8003928:	f000 bca6 	b.w	8004278 <osSemaphoreRelease>
 800392c:	0800f92c 	.word	0x0800f92c
 8003930:	2400019c 	.word	0x2400019c
 8003934:	240001a0 	.word	0x240001a0

08003938 <ethernetif_input>:
{
 8003938:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800393c:	4c14      	ldr	r4, [pc, #80]	; (8003990 <ethernetif_input+0x58>)
 800393e:	b083      	sub	sp, #12
 8003940:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8003994 <ethernetif_input+0x5c>
 8003944:	4606      	mov	r6, r0
  struct pbuf *p = NULL;
 8003946:	2700      	movs	r7, #0
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003948:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8003998 <ethernetif_input+0x60>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800394c:	f04f 31ff 	mov.w	r1, #4294967295
 8003950:	6820      	ldr	r0, [r4, #0]
 8003952:	f000 fc5d 	bl	8004210 <osSemaphoreAcquire>
 8003956:	2800      	cmp	r0, #0
 8003958:	d1f8      	bne.n	800394c <ethernetif_input+0x14>
  if(RxAllocStatus == RX_ALLOC_OK)
 800395a:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 800395e:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f3      	bne.n	800394c <ethernetif_input+0x14>
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003964:	a901      	add	r1, sp, #4
 8003966:	4648      	mov	r0, r9
 8003968:	f7fe fa6e 	bl	8001e48 <HAL_ETH_ReadData>
  return p;
 800396c:	9d01      	ldr	r5, [sp, #4]
          if (netif->input( p, netif) != ERR_OK )
 800396e:	4631      	mov	r1, r6
 8003970:	4628      	mov	r0, r5
        if (p != NULL)
 8003972:	2d00      	cmp	r5, #0
 8003974:	d0ea      	beq.n	800394c <ethernetif_input+0x14>
          if (netif->input( p, netif) != ERR_OK )
 8003976:	6933      	ldr	r3, [r6, #16]
 8003978:	4798      	blx	r3
 800397a:	2800      	cmp	r0, #0
 800397c:	d0ed      	beq.n	800395a <ethernetif_input+0x22>
            pbuf_free(p);
 800397e:	4628      	mov	r0, r5
 8003980:	f004 f908 	bl	8007b94 <pbuf_free>
  if(RxAllocStatus == RX_ALLOC_OK)
 8003984:	f898 3000 	ldrb.w	r3, [r8]
  struct pbuf *p = NULL;
 8003988:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1de      	bne.n	800394c <ethernetif_input+0x14>
 800398e:	e7e9      	b.n	8003964 <ethernetif_input+0x2c>
 8003990:	240001a0 	.word	0x240001a0
 8003994:	2400019c 	.word	0x2400019c
 8003998:	240001e0 	.word	0x240001e0

0800399c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 800399c:	4b01      	ldr	r3, [pc, #4]	; (80039a4 <HAL_ETH_RxCpltCallback+0x8>)
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	f000 bc6a 	b.w	8004278 <osSemaphoreRelease>
 80039a4:	240001a0 	.word	0x240001a0

080039a8 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 80039a8:	4b01      	ldr	r3, [pc, #4]	; (80039b0 <HAL_ETH_TxCpltCallback+0x8>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	f000 bc64 	b.w	8004278 <osSemaphoreRelease>
 80039b0:	240001dc 	.word	0x240001dc

080039b4 <HAL_ETH_ErrorCallback>:
{
 80039b4:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80039b6:	f7fe fe63 	bl	8002680 <HAL_ETH_GetDMAError>
 80039ba:	0603      	lsls	r3, r0, #24
 80039bc:	d400      	bmi.n	80039c0 <HAL_ETH_ErrorCallback+0xc>
}
 80039be:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80039c0:	4b02      	ldr	r3, [pc, #8]	; (80039cc <HAL_ETH_ErrorCallback+0x18>)
 80039c2:	6818      	ldr	r0, [r3, #0]
}
 80039c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80039c8:	f000 bc56 	b.w	8004278 <osSemaphoreRelease>
 80039cc:	240001a0 	.word	0x240001a0

080039d0 <ethernetif_init>:
{
 80039d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80039d4:	4604      	mov	r4, r0
{
 80039d6:	b0a5      	sub	sp, #148	; 0x94
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80039d8:	2800      	cmp	r0, #0
 80039da:	f000 80c1 	beq.w	8003b60 <ethernetif_init+0x190>
  netif->linkoutput = low_level_output;
 80039de:	4b64      	ldr	r3, [pc, #400]	; (8003b70 <ethernetif_init+0x1a0>)
  netif->name[0] = IFNAME0;
 80039e0:	f247 4173 	movw	r1, #29811	; 0x7473
  netif->output = etharp_output;
 80039e4:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <ethernetif_init+0x1a4>)
  ETH_MACConfigTypeDef MACConf = {0};
 80039e6:	a80b      	add	r0, sp, #44	; 0x2c
  netif->name[0] = IFNAME0;
 80039e8:	85e1      	strh	r1, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 80039ea:	2100      	movs	r1, #0
  netif->output = etharp_output;
 80039ec:	6162      	str	r2, [r4, #20]
  ETH_MACConfigTypeDef MACConf = {0};
 80039ee:	2264      	movs	r2, #100	; 0x64
  netif->linkoutput = low_level_output;
 80039f0:	61a3      	str	r3, [r4, #24]
  MACAddr[0] = 0x00;
 80039f2:	2500      	movs	r5, #0
  ETH_MACConfigTypeDef MACConf = {0};
 80039f4:	f00a fb6b 	bl	800e0ce <memset>
  heth.Instance = ETH;
 80039f8:	4e5f      	ldr	r6, [pc, #380]	; (8003b78 <ethernetif_init+0x1a8>)
 80039fa:	4b60      	ldr	r3, [pc, #384]	; (8003b7c <ethernetif_init+0x1ac>)
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80039fc:	2701      	movs	r7, #1
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80039fe:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003bb8 <ethernetif_init+0x1e8>
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a02:	4630      	mov	r0, r6
  heth.Instance = ETH;
 8003a04:	6033      	str	r3, [r6, #0]
  MACAddr[1] = 0x80;
 8003a06:	2380      	movs	r3, #128	; 0x80
  MACAddr[0] = 0x00;
 8003a08:	f88d 5000 	strb.w	r5, [sp]
  MACAddr[1] = 0x80;
 8003a0c:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 8003a10:	23e1      	movs	r3, #225	; 0xe1
  MACAddr[3] = 0x00;
 8003a12:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[2] = 0xE1;
 8003a16:	f88d 3002 	strb.w	r3, [sp, #2]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a1a:	4b59      	ldr	r3, [pc, #356]	; (8003b80 <ethernetif_init+0x1b0>)
  MACAddr[4] = 0x00;
 8003a1c:	f88d 5004 	strb.w	r5, [sp, #4]
  heth.Init.TxDesc = DMATxDscrTab;
 8003a20:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a22:	4b58      	ldr	r3, [pc, #352]	; (8003b84 <ethernetif_init+0x1b4>)
  MACAddr[5] = 0x00;
 8003a24:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.RxDesc = DMARxDscrTab;
 8003a28:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 8003a2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  heth.Init.MACAddr = &MACAddr[0];
 8003a2e:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.RxBuffLen = 1536;
 8003a32:	6173      	str	r3, [r6, #20]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003a34:	7237      	strb	r7, [r6, #8]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a36:	f7fe fced 	bl	8002414 <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003a3a:	2234      	movs	r2, #52	; 0x34
 8003a3c:	4629      	mov	r1, r5
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003a3e:	4680      	mov	r8, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003a40:	f109 0004 	add.w	r0, r9, #4
 8003a44:	f00a fb43 	bl	800e0ce <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003a48:	2321      	movs	r3, #33	; 0x21
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003a4a:	484f      	ldr	r0, [pc, #316]	; (8003b88 <ethernetif_init+0x1b8>)
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003a4c:	f8c9 3000 	str.w	r3, [r9]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003a50:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003a54:	f8c9 3014 	str.w	r3, [r9, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003a58:	f003 fac8 	bl	8006fec <memp_init_pool>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a5c:	6873      	ldr	r3, [r6, #4]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a5e:	2206      	movs	r2, #6
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a60:	4638      	mov	r0, r7
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a62:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003a6c:	785a      	ldrb	r2, [r3, #1]
 8003a6e:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003a72:	789a      	ldrb	r2, [r3, #2]
 8003a74:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a78:	78da      	ldrb	r2, [r3, #3]
 8003a7a:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a7e:	7919      	ldrb	r1, [r3, #4]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a80:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a84:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a88:	4639      	mov	r1, r7
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a8a:	795b      	ldrb	r3, [r3, #5]
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a8c:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a90:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 8003a94:	f240 53dc 	movw	r3, #1500	; 0x5dc
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a98:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003a9c:	462a      	mov	r2, r5
  netif->mtu = ETH_MAX_PAYLOAD;
 8003a9e:	84a3      	strh	r3, [r4, #36]	; 0x24
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003aa0:	f000 fb66 	bl	8004170 <osSemaphoreNew>
 8003aa4:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <ethernetif_init+0x1bc>)
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003aa6:	462a      	mov	r2, r5
 8003aa8:	4639      	mov	r1, r7
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003aaa:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003aac:	4638      	mov	r0, r7
 8003aae:	f000 fb5f 	bl	8004170 <osSemaphoreNew>
 8003ab2:	4b37      	ldr	r3, [pc, #220]	; (8003b90 <ethernetif_init+0x1c0>)
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	2220      	movs	r2, #32
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8003ab8:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003aba:	a803      	add	r0, sp, #12
 8003abc:	f00a fb07 	bl	800e0ce <memset>
  attributes.name = "EthIf";
 8003ac0:	4b34      	ldr	r3, [pc, #208]	; (8003b94 <ethernetif_init+0x1c4>)
  attributes.priority = osPriorityRealtime;
 8003ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
  osThreadNew(ethernetif_input, netif, &attributes);
 8003ac6:	aa02      	add	r2, sp, #8
  attributes.name = "EthIf";
 8003ac8:	9302      	str	r3, [sp, #8]
  attributes.priority = osPriorityRealtime;
 8003aca:	2330      	movs	r3, #48	; 0x30
  osThreadNew(ethernetif_input, netif, &attributes);
 8003acc:	4832      	ldr	r0, [pc, #200]	; (8003b98 <ethernetif_init+0x1c8>)
  attributes.priority = osPriorityRealtime;
 8003ace:	e9cd 1307 	strd	r1, r3, [sp, #28]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	f000 fa72 	bl	8003fbc <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003ad8:	4930      	ldr	r1, [pc, #192]	; (8003b9c <ethernetif_init+0x1cc>)
 8003ada:	4831      	ldr	r0, [pc, #196]	; (8003ba0 <ethernetif_init+0x1d0>)
 8003adc:	f7fd fc6c 	bl	80013b8 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003ae0:	482f      	ldr	r0, [pc, #188]	; (8003ba0 <ethernetif_init+0x1d0>)
 8003ae2:	f7fd fc83 	bl	80013ec <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003ae6:	f1b8 0f00 	cmp.w	r8, #0
 8003aea:	d124      	bne.n	8003b36 <ethernetif_init+0x166>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003aec:	482c      	ldr	r0, [pc, #176]	; (8003ba0 <ethernetif_init+0x1d0>)
 8003aee:	f7fd fce7 	bl	80014c0 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003af2:	42b8      	cmp	r0, r7
 8003af4:	dd2a      	ble.n	8003b4c <ethernetif_init+0x17c>
      switch (PHYLinkState)
 8003af6:	3803      	subs	r0, #3
 8003af8:	2802      	cmp	r0, #2
 8003afa:	d822      	bhi.n	8003b42 <ethernetif_init+0x172>
 8003afc:	4a29      	ldr	r2, [pc, #164]	; (8003ba4 <ethernetif_init+0x1d4>)
 8003afe:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <ethernetif_init+0x1d8>)
 8003b00:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8003b04:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003b08:	a90b      	add	r1, sp, #44	; 0x2c
 8003b0a:	481b      	ldr	r0, [pc, #108]	; (8003b78 <ethernetif_init+0x1a8>)
 8003b0c:	f7fe fb68 	bl	80021e0 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003b10:	a90b      	add	r1, sp, #44	; 0x2c
 8003b12:	4819      	ldr	r0, [pc, #100]	; (8003b78 <ethernetif_init+0x1a8>)
    MACConf.Speed = speed;
 8003b14:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003b18:	f7fe fc2c 	bl	8002374 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003b1c:	4816      	ldr	r0, [pc, #88]	; (8003b78 <ethernetif_init+0x1a8>)
 8003b1e:	f7fe f8cf 	bl	8001cc0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003b22:	4620      	mov	r0, r4
 8003b24:	f003 fc78 	bl	8007418 <netif_set_up>
    netif_set_link_up(netif);
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f003 fcbd 	bl	80074a8 <netif_set_link_up>
}
 8003b2e:	2000      	movs	r0, #0
 8003b30:	b025      	add	sp, #148	; 0x94
 8003b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Error_Handler();
 8003b36:	f7fd fadd 	bl	80010f4 <Error_Handler>
}
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	b025      	add	sp, #148	; 0x94
 8003b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      switch (PHYLinkState)
 8003b42:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8003b46:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8003b4a:	e7dd      	b.n	8003b08 <ethernetif_init+0x138>
      netif_set_link_down(netif);
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f003 fcd3 	bl	80074f8 <netif_set_link_down>
      netif_set_down(netif);
 8003b52:	4620      	mov	r0, r4
 8003b54:	f003 fc84 	bl	8007460 <netif_set_down>
}
 8003b58:	2000      	movs	r0, #0
 8003b5a:	b025      	add	sp, #148	; 0x94
 8003b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <ethernetif_init+0x1dc>)
 8003b62:	f44f 7205 	mov.w	r2, #532	; 0x214
 8003b66:	4912      	ldr	r1, [pc, #72]	; (8003bb0 <ethernetif_init+0x1e0>)
 8003b68:	4812      	ldr	r0, [pc, #72]	; (8003bb4 <ethernetif_init+0x1e4>)
 8003b6a:	f00a fb4d 	bl	800e208 <iprintf>
 8003b6e:	e736      	b.n	80039de <ethernetif_init+0xe>
 8003b70:	08003815 	.word	0x08003815
 8003b74:	0800cc5d 	.word	0x0800cc5d
 8003b78:	240001e0 	.word	0x240001e0
 8003b7c:	40028000 	.word	0x40028000
 8003b80:	30000100 	.word	0x30000100
 8003b84:	30000000 	.word	0x30000000
 8003b88:	0800f92c 	.word	0x0800f92c
 8003b8c:	240001a0 	.word	0x240001a0
 8003b90:	240001dc 	.word	0x240001dc
 8003b94:	0800f8a0 	.word	0x0800f8a0
 8003b98:	08003939 	.word	0x08003939
 8003b9c:	24000010 	.word	0x24000010
 8003ba0:	2400017c 	.word	0x2400017c
 8003ba4:	0800f8f4 	.word	0x0800f8f4
 8003ba8:	0800f900 	.word	0x0800f900
 8003bac:	0800f874 	.word	0x0800f874
 8003bb0:	0800f890 	.word	0x0800f890
 8003bb4:	0800f0a0 	.word	0x0800f0a0
 8003bb8:	240001a4 	.word	0x240001a4

08003bbc <sys_now>:
  return HAL_GetTick();
 8003bbc:	f7fd bd0a 	b.w	80015d4 <HAL_GetTick>

08003bc0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8003bc0:	4b4b      	ldr	r3, [pc, #300]	; (8003cf0 <HAL_ETH_MspInit+0x130>)
 8003bc2:	6802      	ldr	r2, [r0, #0]
{
 8003bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8003bc6:	429a      	cmp	r2, r3
{
 8003bc8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bca:	f04f 0400 	mov.w	r4, #0
 8003bce:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003bd2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8003bd6:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003bd8:	d001      	beq.n	8003bde <HAL_ETH_MspInit+0x1e>
}
 8003bda:	b00d      	add	sp, #52	; 0x34
 8003bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003bde:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_ETH_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003be2:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003be4:	2603      	movs	r6, #3
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003be6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bea:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bec:	4842      	ldr	r0, [pc, #264]	; (8003cf8 <HAL_ETH_MspInit+0x138>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003bee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bf2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003bf6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003bfa:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8003bfe:	9200      	str	r2, [sp, #0]
 8003c00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003c02:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c06:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c0a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c0e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c12:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003c16:	9201      	str	r2, [sp, #4]
 8003c18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003c1a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003c22:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003c26:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003c2a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003c2e:	9202      	str	r2, [sp, #8]
 8003c30:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c32:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c36:	f042 0204 	orr.w	r2, r2, #4
 8003c3a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c3e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c42:	f002 0204 	and.w	r2, r2, #4
 8003c46:	9203      	str	r2, [sp, #12]
 8003c48:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c4a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c5a:	f002 0201 	and.w	r2, r2, #1
 8003c5e:	9204      	str	r2, [sp, #16]
 8003c60:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c62:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c66:	433a      	orrs	r2, r7
 8003c68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c70:	403a      	ands	r2, r7
 8003c72:	9205      	str	r2, [sp, #20]
 8003c74:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c76:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c8c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c92:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c94:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c96:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c98:	f7fe fcf6 	bl	8002688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003c9c:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9e:	a907      	add	r1, sp, #28
 8003ca0:	4816      	ldr	r0, [pc, #88]	; (8003cfc <HAL_ETH_MspInit+0x13c>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003ca2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ca8:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cac:	f7fe fcec 	bl	8002688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003cb4:	a907      	add	r1, sp, #28
 8003cb6:	4812      	ldr	r0, [pc, #72]	; (8003d00 <HAL_ETH_MspInit+0x140>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003cb8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cbe:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003cc2:	f7fe fce1 	bl	8002688 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003cc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cca:	a907      	add	r1, sp, #28
 8003ccc:	480d      	ldr	r0, [pc, #52]	; (8003d04 <HAL_ETH_MspInit+0x144>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003cce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cd2:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cd8:	f7fe fcd6 	bl	8002688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003cdc:	4622      	mov	r2, r4
 8003cde:	2105      	movs	r1, #5
 8003ce0:	203d      	movs	r0, #61	; 0x3d
 8003ce2:	f7fd fc99 	bl	8001618 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003ce6:	203d      	movs	r0, #61	; 0x3d
 8003ce8:	f7fd fcd4 	bl	8001694 <HAL_NVIC_EnableIRQ>
}
 8003cec:	b00d      	add	sp, #52	; 0x34
 8003cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf0:	40028000 	.word	0x40028000
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58020800 	.word	0x58020800
 8003cfc:	58020000 	.word	0x58020000
 8003d00:	58020400 	.word	0x58020400
 8003d04:	58021800 	.word	0x58021800

08003d08 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8003d08:	b530      	push	{r4, r5, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	b083      	sub	sp, #12
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8003d0e:	480d      	ldr	r0, [pc, #52]	; (8003d44 <HAL_ETH_RxAllocateCallback+0x3c>)
 8003d10:	f003 f9b2 	bl	8007078 <memp_malloc_pool>
  if (p)
 8003d14:	4603      	mov	r3, r0
 8003d16:	b178      	cbz	r0, 8003d38 <HAL_ETH_RxAllocateCallback+0x30>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d18:	f100 0520 	add.w	r5, r0, #32
    p->custom_free_function = pbuf_free_custom;
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <HAL_ETH_RxAllocateCallback+0x40>)
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8003d24:	6025      	str	r5, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8003d26:	611a      	str	r2, [r3, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8003d28:	2241      	movs	r2, #65	; 0x41
 8003d2a:	9001      	str	r0, [sp, #4]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	9500      	str	r5, [sp, #0]
 8003d30:	f003 fe18 	bl	8007964 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003d34:	b003      	add	sp, #12
 8003d36:	bd30      	pop	{r4, r5, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003d38:	4a04      	ldr	r2, [pc, #16]	; (8003d4c <HAL_ETH_RxAllocateCallback+0x44>)
 8003d3a:	2101      	movs	r1, #1
    *buff = NULL;
 8003d3c:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8003d3e:	7011      	strb	r1, [r2, #0]
}
 8003d40:	b003      	add	sp, #12
 8003d42:	bd30      	pop	{r4, r5, pc}
 8003d44:	0800f92c 	.word	0x0800f92c
 8003d48:	08003909 	.word	0x08003909
 8003d4c:	2400019c 	.word	0x2400019c

08003d50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003d50:	b430      	push	{r4, r5}
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
  p->next = NULL;
 8003d52:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003d54:	f1a2 0420 	sub.w	r4, r2, #32
  p->tot_len = 0;
  p->len = Length;
 8003d58:	f822 3c16 	strh.w	r3, [r2, #-22]
  p->next = NULL;
 8003d5c:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003d60:	f822 5c18 	strh.w	r5, [r2, #-24]

  /* Chain the buffer. */
  if (!*ppStart)
 8003d64:	6805      	ldr	r5, [r0, #0]
 8003d66:	b1f5      	cbz	r5, 8003da6 <HAL_ETH_RxLinkCallback+0x56>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003d68:	680d      	ldr	r5, [r1, #0]
 8003d6a:	602c      	str	r4, [r5, #0]
  }
  *ppEnd  = p;
 8003d6c:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003d6e:	6801      	ldr	r1, [r0, #0]
 8003d70:	b129      	cbz	r1, 8003d7e <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003d72:	8908      	ldrh	r0, [r1, #8]
 8003d74:	4418      	add	r0, r3
 8003d76:	8108      	strh	r0, [r1, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003d78:	6809      	ldr	r1, [r1, #0]
 8003d7a:	2900      	cmp	r1, #0
 8003d7c:	d1f9      	bne.n	8003d72 <HAL_ETH_RxLinkCallback+0x22>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8003d7e:	b183      	cbz	r3, 8003da2 <HAL_ETH_RxLinkCallback+0x52>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8003d80:	f002 011f 	and.w	r1, r2, #31
 8003d84:	440b      	add	r3, r1
 8003d86:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8003d8a:	4808      	ldr	r0, [pc, #32]	; (8003dac <HAL_ETH_RxLinkCallback+0x5c>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f8c0 225c 	str.w	r2, [r0, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8003d92:	3220      	adds	r2, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8003d94:	1a99      	subs	r1, r3, r2
 8003d96:	2900      	cmp	r1, #0
 8003d98:	dcf9      	bgt.n	8003d8e <HAL_ETH_RxLinkCallback+0x3e>
 8003d9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003d9e:	f3bf 8f6f 	isb	sy

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003da2:	bc30      	pop	{r4, r5}
 8003da4:	4770      	bx	lr
    *ppStart = p;
 8003da6:	6004      	str	r4, [r0, #0]
 8003da8:	e7e0      	b.n	8003d6c <HAL_ETH_RxLinkCallback+0x1c>
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003db0:	f003 bef0 	b.w	8007b94 <pbuf_free>

08003db4 <sys_lock_tcpip_core>:
/* ETH_CODE: add functions needed for proper multithreading support and check */

static osThreadId_t lwip_core_lock_holder_thread_id;
static osThreadId_t lwip_tcpip_thread_id;

void sys_lock_tcpip_core(void){
 8003db4:	b508      	push	{r3, lr}
	sys_mutex_lock(&lock_tcpip_core);
 8003db6:	4804      	ldr	r0, [pc, #16]	; (8003dc8 <sys_lock_tcpip_core+0x14>)
 8003db8:	f00a f81c 	bl	800ddf4 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003dbc:	f000 f948 	bl	8004050 <osThreadGetId>
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <sys_lock_tcpip_core+0x18>)
 8003dc2:	6018      	str	r0, [r3, #0]
}
 8003dc4:	bd08      	pop	{r3, pc}
 8003dc6:	bf00      	nop
 8003dc8:	24009aa8 	.word	0x24009aa8
 8003dcc:	24000290 	.word	0x24000290

08003dd0 <ethernet_link_thread>:
{
 8003dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd4:	b09b      	sub	sp, #108	; 0x6c
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003dd6:	f04f 0900 	mov.w	r9, #0
  ETH_MACConfigTypeDef MACConf = {0};
 8003dda:	2264      	movs	r2, #100	; 0x64
 8003ddc:	2100      	movs	r1, #0
{
 8003dde:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003de0:	a801      	add	r0, sp, #4
 8003de2:	f00a f974 	bl	800e0ce <memset>
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003de6:	46cb      	mov	fp, r9
 8003de8:	46ca      	mov	sl, r9
 8003dea:	4d2b      	ldr	r5, [pc, #172]	; (8003e98 <ethernet_link_thread+0xc8>)
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003dec:	4f2b      	ldr	r7, [pc, #172]	; (8003e9c <ethernet_link_thread+0xcc>)
  LOCK_TCPIP_CORE();
 8003dee:	f7ff ffe1 	bl	8003db4 <sys_lock_tcpip_core>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003df2:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003eac <ethernet_link_thread+0xdc>

void sys_unlock_tcpip_core(void){
	lwip_core_lock_holder_thread_id = 0;
	sys_mutex_unlock(&lock_tcpip_core);
 8003df6:	4c2a      	ldr	r4, [pc, #168]	; (8003ea0 <ethernet_link_thread+0xd0>)
 8003df8:	e018      	b.n	8003e2c <ethernet_link_thread+0x5c>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003dfa:	2801      	cmp	r0, #1
 8003dfc:	dc42      	bgt.n	8003e84 <ethernet_link_thread+0xb4>
    HAL_ETH_Stop_IT(&heth);
 8003dfe:	4640      	mov	r0, r8
 8003e00:	f7fd ffae 	bl	8001d60 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003e04:	4630      	mov	r0, r6
 8003e06:	f003 fb2b 	bl	8007460 <netif_set_down>
    netif_set_link_down(netif);
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f003 fb74 	bl	80074f8 <netif_set_link_down>
	lwip_core_lock_holder_thread_id = 0;
 8003e10:	2300      	movs	r3, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8003e12:	4620      	mov	r0, r4
	lwip_core_lock_holder_thread_id = 0;
 8003e14:	602b      	str	r3, [r5, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8003e16:	f009 fff3 	bl	800de00 <sys_mutex_unlock>
  osDelay(100);
 8003e1a:	2064      	movs	r0, #100	; 0x64
 8003e1c:	f000 f91a 	bl	8004054 <osDelay>
	sys_mutex_lock(&lock_tcpip_core);
 8003e20:	4620      	mov	r0, r4
 8003e22:	f009 ffe7 	bl	800ddf4 <sys_mutex_lock>
	lwip_core_lock_holder_thread_id = osThreadGetId();
 8003e26:	f000 f913 	bl	8004050 <osThreadGetId>
 8003e2a:	6028      	str	r0, [r5, #0]
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003e2c:	4638      	mov	r0, r7
 8003e2e:	f7fd fb47 	bl	80014c0 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003e32:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8003e36:	0759      	lsls	r1, r3, #29
 8003e38:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8003e3c:	d4dd      	bmi.n	8003dfa <ethernet_link_thread+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003e3e:	07d2      	lsls	r2, r2, #31
 8003e40:	d4e6      	bmi.n	8003e10 <ethernet_link_thread+0x40>
 8003e42:	2801      	cmp	r0, #1
 8003e44:	dde4      	ble.n	8003e10 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8003e46:	3802      	subs	r0, #2
 8003e48:	2803      	cmp	r0, #3
 8003e4a:	d820      	bhi.n	8003e8e <ethernet_link_thread+0xbe>
 8003e4c:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <ethernet_link_thread+0xd4>)
 8003e4e:	f853 b020 	ldr.w	fp, [r3, r0, lsl #2]
 8003e52:	4b15      	ldr	r3, [pc, #84]	; (8003ea8 <ethernet_link_thread+0xd8>)
 8003e54:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003e58:	a901      	add	r1, sp, #4
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	f7fe f9c0 	bl	80021e0 <HAL_ETH_GetMACConfig>
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003e60:	a901      	add	r1, sp, #4
 8003e62:	4640      	mov	r0, r8
      netif_set_link_up(netif);
 8003e64:	f04f 0a01 	mov.w	sl, #1
      MACConf.Speed = speed;
 8003e68:	e9cd b906 	strd	fp, r9, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003e6c:	f7fe fa82 	bl	8002374 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8003e70:	4640      	mov	r0, r8
 8003e72:	f7fd ff25 	bl	8001cc0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8003e76:	4630      	mov	r0, r6
 8003e78:	f003 face 	bl	8007418 <netif_set_up>
      netif_set_link_up(netif);
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f003 fb13 	bl	80074a8 <netif_set_link_up>
 8003e82:	e7c5      	b.n	8003e10 <ethernet_link_thread+0x40>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003e84:	075b      	lsls	r3, r3, #29
 8003e86:	d4c3      	bmi.n	8003e10 <ethernet_link_thread+0x40>
    switch (PHYLinkState)
 8003e88:	3802      	subs	r0, #2
 8003e8a:	2803      	cmp	r0, #3
 8003e8c:	d9de      	bls.n	8003e4c <ethernet_link_thread+0x7c>
    if(linkchanged)
 8003e8e:	f1ba 0f00 	cmp.w	sl, #0
 8003e92:	d0bd      	beq.n	8003e10 <ethernet_link_thread+0x40>
 8003e94:	e7e0      	b.n	8003e58 <ethernet_link_thread+0x88>
 8003e96:	bf00      	nop
 8003e98:	24000290 	.word	0x24000290
 8003e9c:	2400017c 	.word	0x2400017c
 8003ea0:	24009aa8 	.word	0x24009aa8
 8003ea4:	0800f90c 	.word	0x0800f90c
 8003ea8:	0800f91c 	.word	0x0800f91c
 8003eac:	240001e0 	.word	0x240001e0

08003eb0 <sys_unlock_tcpip_core>:
	lwip_core_lock_holder_thread_id = 0;
 8003eb0:	4b02      	ldr	r3, [pc, #8]	; (8003ebc <sys_unlock_tcpip_core+0xc>)
 8003eb2:	2200      	movs	r2, #0
	sys_mutex_unlock(&lock_tcpip_core);
 8003eb4:	4802      	ldr	r0, [pc, #8]	; (8003ec0 <sys_unlock_tcpip_core+0x10>)
	lwip_core_lock_holder_thread_id = 0;
 8003eb6:	601a      	str	r2, [r3, #0]
	sys_mutex_unlock(&lock_tcpip_core);
 8003eb8:	f009 bfa2 	b.w	800de00 <sys_mutex_unlock>
 8003ebc:	24000290 	.word	0x24000290
 8003ec0:	24009aa8 	.word	0x24009aa8

08003ec4 <sys_check_core_locking>:
}

void sys_check_core_locking(void){
 8003ec4:	b538      	push	{r3, r4, r5, lr}
  /* Embedded systems should check we are NOT in an interrupt context here */

  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	; (8003f0c <sys_check_core_locking+0x48>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	b9ab      	cbnz	r3, 8003efc <sys_check_core_locking+0x38>

  if (lwip_tcpip_thread_id != 0) {
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <sys_check_core_locking+0x4c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b18b      	cbz	r3, 8003efa <sys_check_core_locking+0x36>
	  osThreadId_t current_thread_id = osThreadGetId();

#if LWIP_TCPIP_CORE_LOCKING
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8003ed6:	4d0f      	ldr	r5, [pc, #60]	; (8003f14 <sys_check_core_locking+0x50>)
	  osThreadId_t current_thread_id = osThreadGetId();
 8003ed8:	f000 f8ba 	bl	8004050 <osThreadGetId>
 8003edc:	4604      	mov	r4, r0
	LWIP_ASSERT("Function called without core lock", current_thread_id == lwip_core_lock_holder_thread_id);
 8003ede:	682b      	ldr	r3, [r5, #0]
 8003ee0:	4283      	cmp	r3, r0
 8003ee2:	d00a      	beq.n	8003efa <sys_check_core_locking+0x36>
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <sys_check_core_locking+0x54>)
 8003ee6:	f240 32d2 	movw	r2, #978	; 0x3d2
 8003eea:	490c      	ldr	r1, [pc, #48]	; (8003f1c <sys_check_core_locking+0x58>)
 8003eec:	480c      	ldr	r0, [pc, #48]	; (8003f20 <sys_check_core_locking+0x5c>)
 8003eee:	f00a f98b 	bl	800e208 <iprintf>
	/* ETH_CODE: to easily check that example has correct handling of core lock
	 * This will trigger breakpoint (__BKPT)
	 */
#warning Below check should be removed in production code
	if(current_thread_id != lwip_core_lock_holder_thread_id) __BKPT(0);
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	42a3      	cmp	r3, r4
 8003ef6:	d000      	beq.n	8003efa <sys_check_core_locking+0x36>
 8003ef8:	be00      	bkpt	0x0000
#else /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_ASSERT("Function called from wrong thread", current_thread_id == lwip_tcpip_thread_id);
#endif /* LWIP_TCPIP_CORE_LOCKING */
	LWIP_UNUSED_ARG(current_thread_id); /* for LWIP_NOASSERT */
  }
}
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("Function called from interrupt context", (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0);
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <sys_check_core_locking+0x54>)
 8003efe:	f44f 7273 	mov.w	r2, #972	; 0x3cc
 8003f02:	4908      	ldr	r1, [pc, #32]	; (8003f24 <sys_check_core_locking+0x60>)
 8003f04:	4806      	ldr	r0, [pc, #24]	; (8003f20 <sys_check_core_locking+0x5c>)
 8003f06:	f00a f97f 	bl	800e208 <iprintf>
 8003f0a:	e7e1      	b.n	8003ed0 <sys_check_core_locking+0xc>
 8003f0c:	e000ed00 	.word	0xe000ed00
 8003f10:	24000294 	.word	0x24000294
 8003f14:	24000290 	.word	0x24000290
 8003f18:	0800f874 	.word	0x0800f874
 8003f1c:	0800f8d0 	.word	0x0800f8d0
 8003f20:	0800f0a0 	.word	0x0800f0a0
 8003f24:	0800f8a8 	.word	0x0800f8a8

08003f28 <sys_mark_tcpip_thread>:
void sys_mark_tcpip_thread(void){
 8003f28:	b508      	push	{r3, lr}
	lwip_tcpip_thread_id = osThreadGetId();
 8003f2a:	f000 f891 	bl	8004050 <osThreadGetId>
 8003f2e:	4b01      	ldr	r3, [pc, #4]	; (8003f34 <sys_mark_tcpip_thread+0xc>)
 8003f30:	6018      	str	r0, [r3, #0]
}
 8003f32:	bd08      	pop	{r3, pc}
 8003f34:	24000294 	.word	0x24000294

08003f38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f38:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f3a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f3e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f40:	f001 fe0a 	bl	8005b58 <xTaskGetSchedulerState>
 8003f44:	2801      	cmp	r0, #1
 8003f46:	d100      	bne.n	8003f4a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003f48:	bd08      	pop	{r3, pc}
 8003f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003f4e:	f002 b9e9 	b.w	8006324 <xPortSysTickHandler>
 8003f52:	bf00      	nop

08003f54 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f54:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f58:	b92b      	cbnz	r3, 8003f66 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f5a:	4b06      	ldr	r3, [pc, #24]	; (8003f74 <osKernelInitialize+0x20>)
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	b928      	cbnz	r0, 8003f6c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f64:	4770      	bx	lr
    stat = osErrorISR;
 8003f66:	f06f 0005 	mvn.w	r0, #5
 8003f6a:	4770      	bx	lr
    } else {
      stat = osError;
 8003f6c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	24000b58 	.word	0x24000b58

08003f78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f7e:	b974      	cbnz	r4, 8003f9e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <osKernelStart+0x2c>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	2a01      	cmp	r2, #1
 8003f86:	d107      	bne.n	8003f98 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f88:	4907      	ldr	r1, [pc, #28]	; (8003fa8 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	77cc      	strb	r4, [r1, #31]
 8003f8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f90:	f001 fc6c 	bl	800586c <vTaskStartScheduler>
      stat = osOK;
 8003f94:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8003f96:	bd10      	pop	{r4, pc}
      stat = osError;
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f9c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003f9e:	f06f 0005 	mvn.w	r0, #5
}
 8003fa2:	bd10      	pop	{r4, pc}
 8003fa4:	24000b58 	.word	0x24000b58
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <osKernelGetTickCount>:
 8003fac:	f3ef 8305 	mrs	r3, IPSR
}

uint32_t osKernelGetTickCount (void) {
  TickType_t ticks;

  if (IS_IRQ()) {
 8003fb0:	b10b      	cbz	r3, 8003fb6 <osKernelGetTickCount+0xa>
    ticks = xTaskGetTickCountFromISR();
 8003fb2:	f001 bcc9 	b.w	8005948 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
 8003fb6:	f001 bcc1 	b.w	800593c <xTaskGetTickCount>
 8003fba:	bf00      	nop

08003fbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fbe:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003fc0:	b087      	sub	sp, #28
 8003fc2:	4614      	mov	r4, r2
  hTask = NULL;
 8003fc4:	9505      	str	r5, [sp, #20]
 8003fc6:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003fca:	bb52      	cbnz	r2, 8004022 <osThreadNew+0x66>
 8003fcc:	b348      	cbz	r0, 8004022 <osThreadNew+0x66>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003fce:	b1e4      	cbz	r4, 800400a <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003fd0:	69a6      	ldr	r6, [r4, #24]
 8003fd2:	bb56      	cbnz	r6, 800402a <osThreadNew+0x6e>
 8003fd4:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fd6:	6863      	ldr	r3, [r4, #4]
 8003fd8:	07db      	lsls	r3, r3, #31
 8003fda:	d422      	bmi.n	8004022 <osThreadNew+0x66>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8003fdc:	6963      	ldr	r3, [r4, #20]
 8003fde:	b343      	cbz	r3, 8004032 <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003fe0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fe4:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
 8003fe6:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003fe8:	b345      	cbz	r5, 800403c <osThreadNew+0x80>
 8003fea:	68e2      	ldr	r2, [r4, #12]
 8003fec:	2abb      	cmp	r2, #187	; 0xbb
 8003fee:	d918      	bls.n	8004022 <osThreadNew+0x66>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ff0:	6924      	ldr	r4, [r4, #16]
 8003ff2:	b1b3      	cbz	r3, 8004022 <osThreadNew+0x66>
 8003ff4:	b1ac      	cbz	r4, 8004022 <osThreadNew+0x66>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4662      	mov	r2, ip
 8003ffa:	4639      	mov	r1, r7
 8003ffc:	9600      	str	r6, [sp, #0]
 8003ffe:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8004002:	f001 fb97 	bl	8005734 <xTaskCreateStatic>
 8004006:	4605      	mov	r5, r0
 8004008:	e00c      	b.n	8004024 <osThreadNew+0x68>
 800400a:	f44f 7200 	mov.w	r2, #512	; 0x200
    prio  = (UBaseType_t)osPriorityNormal;
 800400e:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004010:	460b      	mov	r3, r1
 8004012:	4621      	mov	r1, r4
 8004014:	ac05      	add	r4, sp, #20
 8004016:	9600      	str	r6, [sp, #0]
 8004018:	9401      	str	r4, [sp, #4]
 800401a:	f001 fbc5 	bl	80057a8 <xTaskCreate>
 800401e:	2801      	cmp	r0, #1
 8004020:	d00a      	beq.n	8004038 <osThreadNew+0x7c>
        return (NULL);
 8004022:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 8004024:	4628      	mov	r0, r5
 8004026:	b007      	add	sp, #28
 8004028:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800402a:	1e72      	subs	r2, r6, #1
 800402c:	2a37      	cmp	r2, #55	; 0x37
 800402e:	d9d2      	bls.n	8003fd6 <osThreadNew+0x1a>
 8004030:	e7f8      	b.n	8004024 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
 8004032:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8004036:	e7d5      	b.n	8003fe4 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
 8004038:	9d05      	ldr	r5, [sp, #20]
 800403a:	e7f3      	b.n	8004024 <osThreadNew+0x68>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800403c:	68e3      	ldr	r3, [r4, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f0      	bne.n	8004024 <osThreadNew+0x68>
 8004042:	6923      	ldr	r3, [r4, #16]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ed      	bne.n	8004024 <osThreadNew+0x68>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004048:	fa1f f28c 	uxth.w	r2, ip
 800404c:	463c      	mov	r4, r7
 800404e:	e7df      	b.n	8004010 <osThreadNew+0x54>

08004050 <osThreadGetId>:
}

osThreadId_t osThreadGetId (void) {
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004050:	f001 bd7c 	b.w	8005b4c <xTaskGetCurrentTaskHandle>

08004054 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004054:	b510      	push	{r4, lr}
 8004056:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800405a:	b92c      	cbnz	r4, 8004068 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800405c:	b900      	cbnz	r0, 8004060 <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800405e:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
 8004060:	f001 fbd4 	bl	800580c <vTaskDelay>
    stat = osOK;
 8004064:	4620      	mov	r0, r4
}
 8004066:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004068:	f06f 0005 	mvn.w	r0, #5
}
 800406c:	bd10      	pop	{r4, pc}
 800406e:	bf00      	nop

08004070 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004070:	b530      	push	{r4, r5, lr}
 8004072:	b083      	sub	sp, #12
 8004074:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 8004078:	b99d      	cbnz	r5, 80040a2 <osMutexNew+0x32>
    if (attr != NULL) {
 800407a:	4604      	mov	r4, r0
 800407c:	b1a0      	cbz	r0, 80040a8 <osMutexNew+0x38>
      type = attr->attr_bits;
 800407e:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004080:	072b      	lsls	r3, r5, #28
 8004082:	d40e      	bmi.n	80040a2 <osMutexNew+0x32>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004084:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004086:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800408a:	68c3      	ldr	r3, [r0, #12]
 800408c:	b141      	cbz	r1, 80040a0 <osMutexNew+0x30>
 800408e:	2b4f      	cmp	r3, #79	; 0x4f
 8004090:	d907      	bls.n	80040a2 <osMutexNew+0x32>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004092:	b1d5      	cbz	r5, 80040ca <osMutexNew+0x5a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004094:	2004      	movs	r0, #4
 8004096:	f000 fc8f 	bl	80049b8 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800409a:	b110      	cbz	r0, 80040a2 <osMutexNew+0x32>
        if (attr != NULL) {
          name = attr->name;
 800409c:	6824      	ldr	r4, [r4, #0]
 800409e:	e009      	b.n	80040b4 <osMutexNew+0x44>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040a0:	b1bb      	cbz	r3, 80040d2 <osMutexNew+0x62>
  hMutex = NULL;
 80040a2:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 80040a4:	b003      	add	sp, #12
 80040a6:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
 80040a8:	2001      	movs	r0, #1
 80040aa:	f000 fcdb 	bl	8004a64 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d0f7      	beq.n	80040a2 <osMutexNew+0x32>
 80040b2:	4625      	mov	r5, r4
        vQueueAddToRegistry (hMutex, name);
 80040b4:	4621      	mov	r1, r4
 80040b6:	9001      	str	r0, [sp, #4]
 80040b8:	f000 fffc 	bl	80050b4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 80040bc:	9801      	ldr	r0, [sp, #4]
 80040be:	2d00      	cmp	r5, #0
 80040c0:	d0f0      	beq.n	80040a4 <osMutexNew+0x34>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80040c2:	f040 0001 	orr.w	r0, r0, #1
}
 80040c6:	b003      	add	sp, #12
 80040c8:	bd30      	pop	{r4, r5, pc}
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80040ca:	2001      	movs	r0, #1
 80040cc:	f000 fc74 	bl	80049b8 <xQueueCreateMutexStatic>
 80040d0:	e7e3      	b.n	800409a <osMutexNew+0x2a>
            if (rmtx != 0U) {
 80040d2:	b91d      	cbnz	r5, 80040dc <osMutexNew+0x6c>
              hMutex = xSemaphoreCreateMutex ();
 80040d4:	2001      	movs	r0, #1
 80040d6:	f000 fcc5 	bl	8004a64 <xQueueCreateMutex>
      if (hMutex != NULL) {
 80040da:	e7de      	b.n	800409a <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80040dc:	2004      	movs	r0, #4
 80040de:	f000 fcc1 	bl	8004a64 <xQueueCreateMutex>
 80040e2:	e7da      	b.n	800409a <osMutexNew+0x2a>

080040e4 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80040e4:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 80040e8:	f000 0301 	and.w	r3, r0, #1
 80040ec:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 80040f0:	b9a8      	cbnz	r0, 800411e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 80040f2:	b1ba      	cbz	r2, 8004124 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80040f4:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80040f6:	b510      	push	{r4, lr}
 80040f8:	460c      	mov	r4, r1
    if (rmtx != 0U) {
 80040fa:	b953      	cbnz	r3, 8004112 <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80040fc:	f000 fe54 	bl	8004da8 <xQueueSemaphoreTake>
 8004100:	2801      	cmp	r0, #1
 8004102:	d00a      	beq.n	800411a <osMutexAcquire+0x36>
          stat = osErrorResource;
 8004104:	2c00      	cmp	r4, #0
 8004106:	bf14      	ite	ne
 8004108:	f06f 0001 	mvnne.w	r0, #1
 800410c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8004110:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004112:	f000 ff25 	bl	8004f60 <xQueueTakeMutexRecursive>
 8004116:	2801      	cmp	r0, #1
 8004118:	d1f4      	bne.n	8004104 <osMutexAcquire+0x20>
  stat = osOK;
 800411a:	2000      	movs	r0, #0
}
 800411c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800411e:	f06f 0005 	mvn.w	r0, #5
 8004122:	4770      	bx	lr
    stat = osErrorParameter;
 8004124:	f06f 0003 	mvn.w	r0, #3
}
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <osMutexRelease>:
 800412c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8004130:	b9ba      	cbnz	r2, 8004162 <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004132:	b510      	push	{r4, lr}
 8004134:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8004138:	b1b4      	cbz	r4, 8004168 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800413a:	f000 0301 	and.w	r3, r0, #1
 800413e:	b943      	cbnz	r3, 8004152 <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004140:	461a      	mov	r2, r3
 8004142:	4619      	mov	r1, r3
 8004144:	4620      	mov	r0, r4
 8004146:	f000 fb73 	bl	8004830 <xQueueGenericSend>
 800414a:	2801      	cmp	r0, #1
 800414c:	d106      	bne.n	800415c <osMutexRelease+0x30>
  stat = osOK;
 800414e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004150:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004152:	4620      	mov	r0, r4
 8004154:	f000 fc66 	bl	8004a24 <xQueueGiveMutexRecursive>
 8004158:	2801      	cmp	r0, #1
 800415a:	d0f8      	beq.n	800414e <osMutexRelease+0x22>
        stat = osErrorResource;
 800415c:	f06f 0002 	mvn.w	r0, #2
}
 8004160:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8004162:	f06f 0005 	mvn.w	r0, #5
}
 8004166:	4770      	bx	lr
    stat = osErrorParameter;
 8004168:	f06f 0003 	mvn.w	r0, #3
}
 800416c:	bd10      	pop	{r4, pc}
 800416e:	bf00      	nop

08004170 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b083      	sub	sp, #12
 8004174:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004178:	b98e      	cbnz	r6, 800419e <osSemaphoreNew+0x2e>
 800417a:	4605      	mov	r5, r0
 800417c:	b178      	cbz	r0, 800419e <osSemaphoreNew+0x2e>
 800417e:	4288      	cmp	r0, r1
 8004180:	460f      	mov	r7, r1
 8004182:	d30c      	bcc.n	800419e <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
 8004184:	4614      	mov	r4, r2
 8004186:	b182      	cbz	r2, 80041aa <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004188:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
 800418c:	b15a      	cbz	r2, 80041a6 <osSemaphoreNew+0x36>
 800418e:	2b4f      	cmp	r3, #79	; 0x4f
 8004190:	d905      	bls.n	800419e <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8004192:	2801      	cmp	r0, #1
 8004194:	d032      	beq.n	80041fc <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004196:	f000 fb09 	bl	80047ac <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800419a:	4605      	mov	r5, r0
 800419c:	b978      	cbnz	r0, 80041be <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
 800419e:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80041a0:	4628      	mov	r0, r5
 80041a2:	b003      	add	sp, #12
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f9      	bne.n	800419e <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
 80041aa:	2d01      	cmp	r5, #1
 80041ac:	d00f      	beq.n	80041ce <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80041ae:	4628      	mov	r0, r5
 80041b0:	4639      	mov	r1, r7
 80041b2:	f000 fb1f 	bl	80047f4 <xQueueCreateCountingSemaphore>
 80041b6:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
 80041b8:	2d00      	cmp	r5, #0
 80041ba:	d0f0      	beq.n	800419e <osSemaphoreNew+0x2e>
        if (attr != NULL) {
 80041bc:	b104      	cbz	r4, 80041c0 <osSemaphoreNew+0x50>
          name = attr->name;
 80041be:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80041c0:	4628      	mov	r0, r5
 80041c2:	4621      	mov	r1, r4
 80041c4:	f000 ff76 	bl	80050b4 <vQueueAddToRegistry>
}
 80041c8:	4628      	mov	r0, r5
 80041ca:	b003      	add	sp, #12
 80041cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
 80041ce:	4628      	mov	r0, r5
 80041d0:	2203      	movs	r2, #3
 80041d2:	2100      	movs	r1, #0
 80041d4:	f000 fac2 	bl	800475c <xQueueGenericCreate>
 80041d8:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80041da:	2d00      	cmp	r5, #0
 80041dc:	d0df      	beq.n	800419e <osSemaphoreNew+0x2e>
 80041de:	2f00      	cmp	r7, #0
 80041e0:	d0ea      	beq.n	80041b8 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80041e2:	2300      	movs	r3, #0
 80041e4:	4628      	mov	r0, r5
 80041e6:	461a      	mov	r2, r3
 80041e8:	4619      	mov	r1, r3
 80041ea:	f000 fb21 	bl	8004830 <xQueueGenericSend>
 80041ee:	2801      	cmp	r0, #1
 80041f0:	d0e4      	beq.n	80041bc <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
 80041f2:	4628      	mov	r0, r5
            hSemaphore = NULL;
 80041f4:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
 80041f6:	f000 ff33 	bl	8005060 <vQueueDelete>
      if (hSemaphore != NULL) {
 80041fa:	e7d1      	b.n	80041a0 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80041fc:	4613      	mov	r3, r2
 80041fe:	2203      	movs	r2, #3
 8004200:	4631      	mov	r1, r6
 8004202:	9200      	str	r2, [sp, #0]
 8004204:	4632      	mov	r2, r6
 8004206:	f000 fa57 	bl	80046b8 <xQueueGenericCreateStatic>
 800420a:	4605      	mov	r5, r0
 800420c:	e7e5      	b.n	80041da <osSemaphoreNew+0x6a>
 800420e:	bf00      	nop

08004210 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004210:	b370      	cbz	r0, 8004270 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004212:	b510      	push	{r4, lr}
 8004214:	460c      	mov	r4, r1
 8004216:	b082      	sub	sp, #8
 8004218:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800421c:	b1c3      	cbz	r3, 8004250 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800421e:	bb21      	cbnz	r1, 800426a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004220:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8004222:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004224:	f000 febc 	bl	8004fa0 <xQueueReceiveFromISR>
 8004228:	2801      	cmp	r0, #1
 800422a:	d11a      	bne.n	8004262 <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800422c:	9b01      	ldr	r3, [sp, #4]
 800422e:	b913      	cbnz	r3, 8004236 <osSemaphoreAcquire+0x26>
  stat = osOK;
 8004230:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8004232:	b002      	add	sp, #8
 8004234:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8004236:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800423a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800424a:	4620      	mov	r0, r4
}
 800424c:	b002      	add	sp, #8
 800424e:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004250:	f000 fdaa 	bl	8004da8 <xQueueSemaphoreTake>
 8004254:	2801      	cmp	r0, #1
 8004256:	d0eb      	beq.n	8004230 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
 8004258:	b11c      	cbz	r4, 8004262 <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
 800425a:	f06f 0001 	mvn.w	r0, #1
}
 800425e:	b002      	add	sp, #8
 8004260:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
 8004262:	f06f 0002 	mvn.w	r0, #2
}
 8004266:	b002      	add	sp, #8
 8004268:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 800426a:	f06f 0003 	mvn.w	r0, #3
 800426e:	e7e0      	b.n	8004232 <osSemaphoreAcquire+0x22>
 8004270:	f06f 0003 	mvn.w	r0, #3
}
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8004278:	b330      	cbz	r0, 80042c8 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800427a:	b510      	push	{r4, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8004282:	b1ab      	cbz	r3, 80042b0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8004284:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004286:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8004288:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800428a:	f000 fc73 	bl	8004b74 <xQueueGiveFromISR>
 800428e:	2801      	cmp	r0, #1
 8004290:	d117      	bne.n	80042c2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8004292:	9b01      	ldr	r3, [sp, #4]
 8004294:	b193      	cbz	r3, 80042bc <osSemaphoreRelease+0x44>
 8004296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800429a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80042aa:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80042ac:	b002      	add	sp, #8
 80042ae:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80042b0:	461a      	mov	r2, r3
 80042b2:	4619      	mov	r1, r3
 80042b4:	f000 fabc 	bl	8004830 <xQueueGenericSend>
 80042b8:	2801      	cmp	r0, #1
 80042ba:	d102      	bne.n	80042c2 <osSemaphoreRelease+0x4a>
  stat = osOK;
 80042bc:	2000      	movs	r0, #0
}
 80042be:	b002      	add	sp, #8
 80042c0:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 80042c2:	f06f 0002 	mvn.w	r0, #2
 80042c6:	e7fa      	b.n	80042be <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80042c8:	f06f 0003 	mvn.w	r0, #3
}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop

080042d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80042d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d2:	b085      	sub	sp, #20
 80042d4:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80042d8:	b987      	cbnz	r7, 80042fc <osMessageQueueNew+0x2c>
 80042da:	4605      	mov	r5, r0
 80042dc:	b170      	cbz	r0, 80042fc <osMessageQueueNew+0x2c>
 80042de:	b169      	cbz	r1, 80042fc <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
 80042e0:	4614      	mov	r4, r2
 80042e2:	b172      	cbz	r2, 8004302 <osMessageQueueNew+0x32>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80042e4:	6893      	ldr	r3, [r2, #8]
 80042e6:	b1bb      	cbz	r3, 8004318 <osMessageQueueNew+0x48>
 80042e8:	68d2      	ldr	r2, [r2, #12]
 80042ea:	2a4f      	cmp	r2, #79	; 0x4f
 80042ec:	d906      	bls.n	80042fc <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80042ee:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80042f0:	b122      	cbz	r2, 80042fc <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80042f2:	fb01 f505 	mul.w	r5, r1, r5
 80042f6:	6966      	ldr	r6, [r4, #20]
 80042f8:	42ae      	cmp	r6, r5
 80042fa:	d21c      	bcs.n	8004336 <osMessageQueueNew+0x66>
  hQueue = NULL;
 80042fc:	2000      	movs	r0, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80042fe:	b005      	add	sp, #20
 8004300:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
 8004302:	f000 fa2b 	bl	800475c <xQueueGenericCreate>
    if (hQueue != NULL) {
 8004306:	2800      	cmp	r0, #0
 8004308:	d0f8      	beq.n	80042fc <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
 800430a:	4621      	mov	r1, r4
 800430c:	9003      	str	r0, [sp, #12]
 800430e:	f000 fed1 	bl	80050b4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8004312:	9803      	ldr	r0, [sp, #12]
}
 8004314:	b005      	add	sp, #20
 8004316:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004318:	68d3      	ldr	r3, [r2, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1ee      	bne.n	80042fc <osMessageQueueNew+0x2c>
 800431e:	6913      	ldr	r3, [r2, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1eb      	bne.n	80042fc <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004324:	6952      	ldr	r2, [r2, #20]
 8004326:	2a00      	cmp	r2, #0
 8004328:	d1e8      	bne.n	80042fc <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
 800432a:	f000 fa17 	bl	800475c <xQueueGenericCreate>
    if (hQueue != NULL) {
 800432e:	2800      	cmp	r0, #0
 8004330:	d0e4      	beq.n	80042fc <osMessageQueueNew+0x2c>
        name = attr->name;
 8004332:	6824      	ldr	r4, [r4, #0]
 8004334:	e7e9      	b.n	800430a <osMessageQueueNew+0x3a>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004336:	9700      	str	r7, [sp, #0]
 8004338:	f000 f9be 	bl	80046b8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800433c:	2800      	cmp	r0, #0
 800433e:	d1f8      	bne.n	8004332 <osMessageQueueNew+0x62>
 8004340:	e7dc      	b.n	80042fc <osMessageQueueNew+0x2c>
 8004342:	bf00      	nop

08004344 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004344:	b530      	push	{r4, r5, lr}
 8004346:	461c      	mov	r4, r3
 8004348:	b083      	sub	sp, #12
 800434a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800434e:	b30b      	cbz	r3, 8004394 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004350:	3c00      	subs	r4, #0
 8004352:	bf18      	it	ne
 8004354:	2401      	movne	r4, #1
 8004356:	2900      	cmp	r1, #0
 8004358:	bf08      	it	eq
 800435a:	f044 0401 	orreq.w	r4, r4, #1
 800435e:	bb7c      	cbnz	r4, 80043c0 <osMessageQueuePut+0x7c>
 8004360:	fab0 f480 	clz	r4, r0
 8004364:	0964      	lsrs	r4, r4, #5
 8004366:	b358      	cbz	r0, 80043c0 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004368:	4623      	mov	r3, r4
 800436a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800436c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800436e:	f000 fb97 	bl	8004aa0 <xQueueGenericSendFromISR>
 8004372:	2801      	cmp	r0, #1
 8004374:	d120      	bne.n	80043b8 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8004376:	9b01      	ldr	r3, [sp, #4]
 8004378:	b1db      	cbz	r3, 80043b2 <osMessageQueuePut+0x6e>
 800437a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800438e:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8004390:	b003      	add	sp, #12
 8004392:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004394:	b1a0      	cbz	r0, 80043c0 <osMessageQueuePut+0x7c>
 8004396:	fab1 f381 	clz	r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	b181      	cbz	r1, 80043c0 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800439e:	4622      	mov	r2, r4
 80043a0:	f000 fa46 	bl	8004830 <xQueueGenericSend>
 80043a4:	2801      	cmp	r0, #1
 80043a6:	d004      	beq.n	80043b2 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
 80043a8:	b134      	cbz	r4, 80043b8 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
 80043aa:	f06f 0001 	mvn.w	r0, #1
}
 80043ae:	b003      	add	sp, #12
 80043b0:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 80043b2:	2000      	movs	r0, #0
}
 80043b4:	b003      	add	sp, #12
 80043b6:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 80043b8:	f06f 0002 	mvn.w	r0, #2
}
 80043bc:	b003      	add	sp, #12
 80043be:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 80043c0:	f06f 0003 	mvn.w	r0, #3
 80043c4:	e7e4      	b.n	8004390 <osMessageQueuePut+0x4c>
 80043c6:	bf00      	nop

080043c8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80043c8:	b530      	push	{r4, r5, lr}
 80043ca:	461c      	mov	r4, r3
 80043cc:	b083      	sub	sp, #12
 80043ce:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80043d2:	b303      	cbz	r3, 8004416 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043d4:	3c00      	subs	r4, #0
 80043d6:	bf18      	it	ne
 80043d8:	2401      	movne	r4, #1
 80043da:	2900      	cmp	r1, #0
 80043dc:	bf08      	it	eq
 80043de:	f044 0401 	orreq.w	r4, r4, #1
 80043e2:	bb5c      	cbnz	r4, 800443c <osMessageQueueGet+0x74>
 80043e4:	fab0 f480 	clz	r4, r0
 80043e8:	0964      	lsrs	r4, r4, #5
 80043ea:	b338      	cbz	r0, 800443c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80043ec:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80043ee:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80043f0:	f000 fdd6 	bl	8004fa0 <xQueueReceiveFromISR>
 80043f4:	2801      	cmp	r0, #1
 80043f6:	d11d      	bne.n	8004434 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80043f8:	9b01      	ldr	r3, [sp, #4]
 80043fa:	b1c3      	cbz	r3, 800442e <osMessageQueueGet+0x66>
 80043fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004404:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8004410:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
 8004412:	b003      	add	sp, #12
 8004414:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004416:	b188      	cbz	r0, 800443c <osMessageQueueGet+0x74>
 8004418:	b181      	cbz	r1, 800443c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800441a:	4622      	mov	r2, r4
 800441c:	f000 fc02 	bl	8004c24 <xQueueReceive>
 8004420:	2801      	cmp	r0, #1
 8004422:	d004      	beq.n	800442e <osMessageQueueGet+0x66>
        if (timeout != 0U) {
 8004424:	b134      	cbz	r4, 8004434 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
 8004426:	f06f 0001 	mvn.w	r0, #1
}
 800442a:	b003      	add	sp, #12
 800442c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
 800442e:	2000      	movs	r0, #0
}
 8004430:	b003      	add	sp, #12
 8004432:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
 8004434:	f06f 0002 	mvn.w	r0, #2
}
 8004438:	b003      	add	sp, #12
 800443a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
 800443c:	f06f 0003 	mvn.w	r0, #3
 8004440:	e7e7      	b.n	8004412 <osMessageQueueGet+0x4a>
 8004442:	bf00      	nop

08004444 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <vApplicationGetIdleTaskMemory+0x18>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004446:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004448:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800444a:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800444e:	4c04      	ldr	r4, [pc, #16]	; (8004460 <vApplicationGetIdleTaskMemory+0x1c>)
 8004450:	600c      	str	r4, [r1, #0]
}
 8004452:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004456:	6013      	str	r3, [r2, #0]
}
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	24000a9c 	.word	0x24000a9c
 8004460:	2400029c 	.word	0x2400029c

08004464 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004466:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004468:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800446a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800446e:	4c04      	ldr	r4, [pc, #16]	; (8004480 <vApplicationGetTimerTaskMemory+0x1c>)
 8004470:	600c      	str	r4, [r1, #0]
}
 8004472:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	24001b5c 	.word	0x24001b5c
 8004480:	24000b5c 	.word	0x24000b5c

08004484 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004484:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004488:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800448c:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800448e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004490:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004492:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004494:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop

0800449c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800449c:	2300      	movs	r3, #0
 800449e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80044a4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80044a6:	6802      	ldr	r2, [r0, #0]
{
 80044a8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044aa:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 80044ac:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 80044ae:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044b0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044b2:	689c      	ldr	r4, [r3, #8]
 80044b4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044b6:	6099      	str	r1, [r3, #8]
}
 80044b8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80044bc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80044be:	6002      	str	r2, [r0, #0]
}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop

080044c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044c4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044c6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044c8:	1c6b      	adds	r3, r5, #1
 80044ca:	d010      	beq.n	80044ee <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044cc:	f100 0308 	add.w	r3, r0, #8
 80044d0:	461c      	mov	r4, r3
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	42aa      	cmp	r2, r5
 80044d8:	d9fa      	bls.n	80044d0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80044da:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80044dc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80044de:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044e0:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044e2:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80044e4:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80044e6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80044e8:	6002      	str	r2, [r0, #0]
}
 80044ea:	bc30      	pop	{r4, r5}
 80044ec:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80044ee:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80044f0:	6863      	ldr	r3, [r4, #4]
 80044f2:	e7f2      	b.n	80044da <vListInsert+0x16>

080044f4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044f4:	6903      	ldr	r3, [r0, #16]
{
 80044f6:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044f8:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044fa:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80044fe:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8004500:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004504:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004506:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8004508:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800450c:	bf08      	it	eq
 800450e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8004510:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8004512:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004514:	3a01      	subs	r2, #1
 8004516:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8004518:	6818      	ldr	r0, [r3, #0]
}
 800451a:	4770      	bx	lr

0800451c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800451c:	b570      	push	{r4, r5, r6, lr}
 800451e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004520:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004522:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004524:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004526:	b92a      	cbnz	r2, 8004534 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004528:	6805      	ldr	r5, [r0, #0]
 800452a:	b365      	cbz	r5, 8004586 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800452c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800452e:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004530:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8004532:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004534:	b97d      	cbnz	r5, 8004556 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004536:	6840      	ldr	r0, [r0, #4]
 8004538:	f009 fdbb 	bl	800e0b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800453c:	6863      	ldr	r3, [r4, #4]
 800453e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004540:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004542:	68a2      	ldr	r2, [r4, #8]
 8004544:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004546:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004548:	d319      	bcc.n	800457e <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454a:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800454c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800454e:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004550:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004552:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004554:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004556:	68c0      	ldr	r0, [r0, #12]
 8004558:	f009 fdab 	bl	800e0b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800455c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	4251      	negs	r1, r2
 8004562:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004568:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800456a:	d202      	bcs.n	8004572 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800456c:	68a3      	ldr	r3, [r4, #8]
 800456e:	440b      	add	r3, r1
 8004570:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004572:	2d02      	cmp	r5, #2
 8004574:	d00d      	beq.n	8004592 <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004576:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004578:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800457a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800457c:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800457e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8004580:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004582:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004584:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004586:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004588:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800458a:	f001 fb3b 	bl	8005c04 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800458e:	60a5      	str	r5, [r4, #8]
 8004590:	e7ce      	b.n	8004530 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004592:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	bf38      	it	cc
 800459a:	2601      	movcc	r6, #1
 800459c:	e7c8      	b.n	8004530 <prvCopyDataToQueue+0x14>
 800459e:	bf00      	nop

080045a0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80045a4:	f001 fe56 	bl	8006254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80045a8:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80045ac:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045ae:	2c00      	cmp	r4, #0
 80045b0:	dd14      	ble.n	80045dc <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80045b6:	e003      	b.n	80045c0 <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80045b8:	1e63      	subs	r3, r4, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045be:	b16a      	cbz	r2, 80045dc <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c2:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c4:	b153      	cbz	r3, 80045dc <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045c6:	f001 fa1d 	bl	8005a04 <xTaskRemoveFromEventList>
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0f4      	beq.n	80045b8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80045ce:	f001 fab7 	bl	8005b40 <vTaskMissedYield>
			--cTxLock;
 80045d2:	1e63      	subs	r3, r4, #1
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80045d8:	2a00      	cmp	r2, #0
 80045da:	d1f1      	bne.n	80045c0 <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80045dc:	23ff      	movs	r3, #255	; 0xff
 80045de:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045e2:	f001 fe59 	bl	8006298 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045e6:	f001 fe35 	bl	8006254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045ea:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80045ee:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045f0:	2c00      	cmp	r4, #0
 80045f2:	dd14      	ble.n	800461e <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f4:	f105 0610 	add.w	r6, r5, #16
 80045f8:	e003      	b.n	8004602 <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045fa:	1e63      	subs	r3, r4, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004600:	b16a      	cbz	r2, 800461e <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004602:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004604:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004606:	b153      	cbz	r3, 800461e <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004608:	f001 f9fc 	bl	8005a04 <xTaskRemoveFromEventList>
 800460c:	2800      	cmp	r0, #0
 800460e:	d0f4      	beq.n	80045fa <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 8004610:	f001 fa96 	bl	8005b40 <vTaskMissedYield>
				--cRxLock;
 8004614:	1e63      	subs	r3, r4, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800461a:	2a00      	cmp	r2, #0
 800461c:	d1f1      	bne.n	8004602 <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800461e:	23ff      	movs	r3, #255	; 0xff
 8004620:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8004624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004628:	f001 be36 	b.w	8006298 <vPortExitCritical>

0800462c <xQueueGenericReset>:
{
 800462c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800462e:	b1e0      	cbz	r0, 800466a <xQueueGenericReset+0x3e>
 8004630:	4604      	mov	r4, r0
 8004632:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8004634:	f001 fe0e 	bl	8006254 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800463e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004640:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004644:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004646:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004648:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800464a:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800464c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800464e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004650:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004652:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004654:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004658:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800465c:	b975      	cbnz	r5, 800467c <xQueueGenericReset+0x50>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	b9c3      	cbnz	r3, 8004694 <xQueueGenericReset+0x68>
	taskEXIT_CRITICAL();
 8004662:	f001 fe19 	bl	8006298 <vPortExitCritical>
}
 8004666:	2001      	movs	r0, #1
 8004668:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800467a:	e7fe      	b.n	800467a <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800467c:	f104 0010 	add.w	r0, r4, #16
 8004680:	f7ff ff00 	bl	8004484 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004684:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004688:	f7ff fefc 	bl	8004484 <vListInitialise>
	taskEXIT_CRITICAL();
 800468c:	f001 fe04 	bl	8006298 <vPortExitCritical>
}
 8004690:	2001      	movs	r0, #1
 8004692:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004694:	f104 0010 	add.w	r0, r4, #16
 8004698:	f001 f9b4 	bl	8005a04 <xTaskRemoveFromEventList>
 800469c:	2800      	cmp	r0, #0
 800469e:	d0e0      	beq.n	8004662 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80046a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80046a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	e7d5      	b.n	8004662 <xQueueGenericReset+0x36>
 80046b6:	bf00      	nop

080046b8 <xQueueGenericCreateStatic>:
	{
 80046b8:	b530      	push	{r4, r5, lr}
 80046ba:	b085      	sub	sp, #20
 80046bc:	f89d 4020 	ldrb.w	r4, [sp, #32]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046c0:	b940      	cbnz	r0, 80046d4 <xQueueGenericCreateStatic+0x1c>
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	e7fe      	b.n	80046d2 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80046d4:	b153      	cbz	r3, 80046ec <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046d6:	b30a      	cbz	r2, 800471c <xQueueGenericCreateStatic+0x64>
 80046d8:	b989      	cbnz	r1, 80046fe <xQueueGenericCreateStatic+0x46>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericCreateStatic+0x32>
 80046ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f0:	f383 8811 	msr	BASEPRI, r3
 80046f4:	f3bf 8f6f 	isb	sy
 80046f8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80046fc:	e7fe      	b.n	80046fc <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046fe:	b16a      	cbz	r2, 800471c <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004700:	2550      	movs	r5, #80	; 0x50
 8004702:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004704:	9d03      	ldr	r5, [sp, #12]
 8004706:	2d50      	cmp	r5, #80	; 0x50
 8004708:	d013      	beq.n	8004732 <xQueueGenericCreateStatic+0x7a>
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	e7fe      	b.n	800471a <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800471c:	2900      	cmp	r1, #0
 800471e:	d0ef      	beq.n	8004700 <xQueueGenericCreateStatic+0x48>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	e7fe      	b.n	8004730 <xQueueGenericCreateStatic+0x78>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004732:	2900      	cmp	r1, #0
 8004734:	bf08      	it	eq
 8004736:	461a      	moveq	r2, r3
	pxNewQueue->uxItemSize = uxItemSize;
 8004738:	6419      	str	r1, [r3, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800473a:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 800473c:	63d8      	str	r0, [r3, #60]	; 0x3c
 800473e:	601a      	str	r2, [r3, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004740:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004742:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8004746:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004748:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800474a:	f7ff ff6f 	bl	800462c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800474e:	9b01      	ldr	r3, [sp, #4]
	}
 8004750:	4618      	mov	r0, r3
		pxNewQueue->ucQueueType = ucQueueType;
 8004752:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
	}
 8004756:	b005      	add	sp, #20
 8004758:	bd30      	pop	{r4, r5, pc}
 800475a:	bf00      	nop

0800475c <xQueueGenericCreate>:
	{
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475e:	b940      	cbnz	r0, 8004772 <xQueueGenericCreate+0x16>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	e7fe      	b.n	8004770 <xQueueGenericCreate+0x14>
 8004772:	4604      	mov	r4, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004774:	fb01 f000 	mul.w	r0, r1, r0
 8004778:	460d      	mov	r5, r1
 800477a:	4616      	mov	r6, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800477c:	3050      	adds	r0, #80	; 0x50
 800477e:	f001 fee5 	bl	800654c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004782:	4607      	mov	r7, r0
 8004784:	b170      	cbz	r0, 80047a4 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800478c:	b165      	cbz	r5, 80047a8 <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800478e:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004792:	2101      	movs	r1, #1
 8004794:	4638      	mov	r0, r7
 8004796:	603b      	str	r3, [r7, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8004798:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800479c:	f7ff ff46 	bl	800462c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80047a0:	f887 604c 	strb.w	r6, [r7, #76]	; 0x4c
	}
 80047a4:	4638      	mov	r0, r7
 80047a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a8:	4603      	mov	r3, r0
 80047aa:	e7f2      	b.n	8004792 <xQueueGenericCreate+0x36>

080047ac <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 80047ac:	b940      	cbnz	r0, 80047c0 <xQueueCreateCountingSemaphoreStatic+0x14>
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	e7fe      	b.n	80047be <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047c0:	4288      	cmp	r0, r1
	{
 80047c2:	b510      	push	{r4, lr}
 80047c4:	460c      	mov	r4, r1
 80047c6:	b082      	sub	sp, #8
		configASSERT( uxInitialCount <= uxMaxCount );
 80047c8:	d208      	bcs.n	80047dc <xQueueCreateCountingSemaphoreStatic+0x30>
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	e7fe      	b.n	80047da <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047dc:	2102      	movs	r1, #2
 80047de:	4613      	mov	r3, r2
 80047e0:	2200      	movs	r2, #0
 80047e2:	9100      	str	r1, [sp, #0]
 80047e4:	4611      	mov	r1, r2
 80047e6:	f7ff ff67 	bl	80046b8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80047ea:	b100      	cbz	r0, 80047ee <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80047ec:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80047ee:	b002      	add	sp, #8
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop

080047f4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80047f4:	b940      	cbnz	r0, 8004808 <xQueueCreateCountingSemaphore+0x14>
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	e7fe      	b.n	8004806 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004808:	4288      	cmp	r0, r1
	{
 800480a:	b510      	push	{r4, lr}
 800480c:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800480e:	d208      	bcs.n	8004822 <xQueueCreateCountingSemaphore+0x2e>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	e7fe      	b.n	8004820 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004822:	2202      	movs	r2, #2
 8004824:	2100      	movs	r1, #0
 8004826:	f7ff ff99 	bl	800475c <xQueueGenericCreate>
		if( xHandle != NULL )
 800482a:	b100      	cbz	r0, 800482e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800482c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800482e:	bd10      	pop	{r4, pc}

08004830 <xQueueGenericSend>:
{
 8004830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004834:	b085      	sub	sp, #20
 8004836:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004838:	2800      	cmp	r0, #0
 800483a:	d07e      	beq.n	800493a <xQueueGenericSend+0x10a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800483c:	460f      	mov	r7, r1
 800483e:	4604      	mov	r4, r0
 8004840:	461e      	mov	r6, r3
 8004842:	2900      	cmp	r1, #0
 8004844:	d069      	beq.n	800491a <xQueueGenericSend+0xea>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004846:	2e02      	cmp	r6, #2
 8004848:	d10b      	bne.n	8004862 <xQueueGenericSend+0x32>
 800484a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d008      	beq.n	8004862 <xQueueGenericSend+0x32>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	e7fe      	b.n	8004860 <xQueueGenericSend+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004862:	f001 f979 	bl	8005b58 <xTaskGetSchedulerState>
 8004866:	2800      	cmp	r0, #0
 8004868:	d070      	beq.n	800494c <xQueueGenericSend+0x11c>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800486a:	f1a6 0802 	sub.w	r8, r6, #2
 800486e:	2500      	movs	r5, #0
 8004870:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8004874:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004876:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800487a:	e007      	b.n	800488c <xQueueGenericSend+0x5c>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800487c:	f001 fd0c 	bl	8006298 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff fe8d 	bl	80045a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004886:	f001 f849 	bl	800591c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800488a:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800488c:	f001 fce2 	bl	8006254 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004890:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004892:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004894:	4290      	cmp	r0, r2
 8004896:	d365      	bcc.n	8004964 <xQueueGenericSend+0x134>
 8004898:	f1b8 0f00 	cmp.w	r8, #0
 800489c:	d162      	bne.n	8004964 <xQueueGenericSend+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800489e:	9b01      	ldr	r3, [sp, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d077      	beq.n	8004994 <xQueueGenericSend+0x164>
				else if( xEntryTimeSet == pdFALSE )
 80048a4:	2d00      	cmp	r5, #0
 80048a6:	d044      	beq.n	8004932 <xQueueGenericSend+0x102>
		taskEXIT_CRITICAL();
 80048a8:	f001 fcf6 	bl	8006298 <vPortExitCritical>
		vTaskSuspendAll();
 80048ac:	f001 f82e 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048b0:	f001 fcd0 	bl	8006254 <vPortEnterCritical>
 80048b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048b8:	2bff      	cmp	r3, #255	; 0xff
 80048ba:	d101      	bne.n	80048c0 <xQueueGenericSend+0x90>
 80048bc:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80048c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80048c4:	2bff      	cmp	r3, #255	; 0xff
 80048c6:	d101      	bne.n	80048cc <xQueueGenericSend+0x9c>
 80048c8:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80048cc:	f001 fce4 	bl	8006298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048d0:	a901      	add	r1, sp, #4
 80048d2:	a802      	add	r0, sp, #8
 80048d4:	f001 f8ec 	bl	8005ab0 <xTaskCheckForTimeOut>
 80048d8:	2800      	cmp	r0, #0
 80048da:	d15f      	bne.n	800499c <xQueueGenericSend+0x16c>
	taskENTER_CRITICAL();
 80048dc:	f001 fcba 	bl	8006254 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80048e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1c9      	bne.n	800487c <xQueueGenericSend+0x4c>
	taskEXIT_CRITICAL();
 80048e8:	f001 fcd6 	bl	8006298 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048ec:	9901      	ldr	r1, [sp, #4]
 80048ee:	f104 0010 	add.w	r0, r4, #16
 80048f2:	f001 f84f 	bl	8005994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff fe52 	bl	80045a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048fc:	f001 f80e 	bl	800591c <xTaskResumeAll>
 8004900:	2800      	cmp	r0, #0
 8004902:	d1c2      	bne.n	800488a <xQueueGenericSend+0x5a>
					portYIELD_WITHIN_API();
 8004904:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	e7b7      	b.n	800488a <xQueueGenericSend+0x5a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800491a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800491c:	2b00      	cmp	r3, #0
 800491e:	d092      	beq.n	8004846 <xQueueGenericSend+0x16>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	e7fe      	b.n	8004930 <xQueueGenericSend+0x100>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004932:	a802      	add	r0, sp, #8
 8004934:	f001 f8b0 	bl	8005a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004938:	e7b6      	b.n	80048a8 <xQueueGenericSend+0x78>
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800494a:	e7fe      	b.n	800494a <xQueueGenericSend+0x11a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800494c:	9b01      	ldr	r3, [sp, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d08b      	beq.n	800486a <xQueueGenericSend+0x3a>
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	e7fe      	b.n	8004962 <xQueueGenericSend+0x132>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004964:	4632      	mov	r2, r6
 8004966:	4639      	mov	r1, r7
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff fdd7 	bl	800451c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004970:	b9db      	cbnz	r3, 80049aa <xQueueGenericSend+0x17a>
					else if( xYieldRequired != pdFALSE )
 8004972:	b148      	cbz	r0, 8004988 <xQueueGenericSend+0x158>
						queueYIELD_IF_USING_PREEMPTION();
 8004974:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004988:	f001 fc86 	bl	8006298 <vPortExitCritical>
				return pdPASS;
 800498c:	2001      	movs	r0, #1
}
 800498e:	b005      	add	sp, #20
 8004990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8004994:	f001 fc80 	bl	8006298 <vPortExitCritical>
					return errQUEUE_FULL;
 8004998:	4640      	mov	r0, r8
 800499a:	e7f8      	b.n	800498e <xQueueGenericSend+0x15e>
			prvUnlockQueue( pxQueue );
 800499c:	4620      	mov	r0, r4
 800499e:	f7ff fdff 	bl	80045a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a2:	f000 ffbb 	bl	800591c <xTaskResumeAll>
			return errQUEUE_FULL;
 80049a6:	2000      	movs	r0, #0
 80049a8:	e7f1      	b.n	800498e <xQueueGenericSend+0x15e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049aa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80049ae:	f001 f829 	bl	8005a04 <xTaskRemoveFromEventList>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0e8      	beq.n	8004988 <xQueueGenericSend+0x158>
 80049b6:	e7dd      	b.n	8004974 <xQueueGenericSend+0x144>

080049b8 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 80049b8:	b179      	cbz	r1, 80049da <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049ba:	2350      	movs	r3, #80	; 0x50
	{
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049c0:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	2b50      	cmp	r3, #80	; 0x50
 80049c6:	d011      	beq.n	80049ec <xQueueCreateMutexStatic+0x34>
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	e7fe      	b.n	80049d8 <xQueueCreateMutexStatic+0x20>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80049ea:	e7fe      	b.n	80049ea <xQueueCreateMutexStatic+0x32>
 80049ec:	460c      	mov	r4, r1
	pxNewQueue->uxItemSize = uxItemSize;
 80049ee:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049f0:	2101      	movs	r1, #1
 80049f2:	4605      	mov	r5, r0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049f4:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049f6:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049f8:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049fc:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
 80049fe:	e9c4 160f 	strd	r1, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a02:	f7ff fe13 	bl	800462c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a06:	4633      	mov	r3, r6
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004a0e:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a12:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a14:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a16:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a18:	f7ff ff0a 	bl	8004830 <xQueueGenericSend>
	}
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd70      	pop	{r4, r5, r6, pc}
 8004a22:	bf00      	nop

08004a24 <xQueueGiveMutexRecursive>:
	{
 8004a24:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8004a26:	b138      	cbz	r0, 8004a38 <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004a28:	6885      	ldr	r5, [r0, #8]
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	f001 f88e 	bl	8005b4c <xTaskGetCurrentTaskHandle>
 8004a30:	4285      	cmp	r5, r0
 8004a32:	d00a      	beq.n	8004a4a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004a34:	2000      	movs	r0, #0
	}
 8004a36:	bd38      	pop	{r3, r4, r5, pc}
 8004a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004a48:	e7fe      	b.n	8004a48 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004a50:	b10b      	cbz	r3, 8004a56 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004a52:	2001      	movs	r0, #1
	}
 8004a54:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004a56:	461a      	mov	r2, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7ff fee8 	bl	8004830 <xQueueGenericSend>
			xReturn = pdPASS;
 8004a60:	2001      	movs	r0, #1
	}
 8004a62:	bd38      	pop	{r3, r4, r5, pc}

08004a64 <xQueueCreateMutex>:
	{
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a68:	2050      	movs	r0, #80	; 0x50
 8004a6a:	f001 fd6f 	bl	800654c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004a6e:	4604      	mov	r4, r0
 8004a70:	b198      	cbz	r0, 8004a9a <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a72:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
 8004a74:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a76:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a78:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8004a7c:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a80:	f7ff fdd4 	bl	800462c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a84:	4633      	mov	r3, r6
 8004a86:	4632      	mov	r2, r6
 8004a88:	4631      	mov	r1, r6
 8004a8a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8004a8c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a90:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004a92:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004a94:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004a96:	f7ff fecb 	bl	8004830 <xQueueGenericSend>
	}
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	bd70      	pop	{r4, r5, r6, pc}
 8004a9e:	bf00      	nop

08004aa0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d04e      	beq.n	8004b42 <xQueueGenericSendFromISR+0xa2>
{
 8004aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aa8:	460e      	mov	r6, r1
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4617      	mov	r7, r2
 8004aae:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ab0:	b339      	cbz	r1, 8004b02 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ab2:	2d02      	cmp	r5, #2
 8004ab4:	d10b      	bne.n	8004ace <xQueueGenericSendFromISR+0x2e>
 8004ab6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d008      	beq.n	8004ace <xQueueGenericSendFromISR+0x2e>
 8004abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	e7fe      	b.n	8004acc <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ace:	f001 fcdd 	bl	800648c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ad2:	f3ef 8811 	mrs	r8, BASEPRI
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ae6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d315      	bcc.n	8004b1a <xQueueGenericSendFromISR+0x7a>
 8004aee:	f1a5 0002 	sub.w	r0, r5, #2
 8004af2:	fab0 f080 	clz	r0, r0
 8004af6:	0940      	lsrs	r0, r0, #5
 8004af8:	b978      	cbnz	r0, 8004b1a <xQueueGenericSendFromISR+0x7a>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004afa:	f388 8811 	msr	BASEPRI, r8
}
 8004afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0d4      	beq.n	8004ab2 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b1a:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b1c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b20:	4631      	mov	r1, r6
 8004b22:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b24:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b28:	f7ff fcf8 	bl	800451c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004b2c:	1c6b      	adds	r3, r5, #1
 8004b2e:	d011      	beq.n	8004b54 <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b30:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8004b32:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8004b3a:	f388 8811 	msr	BASEPRI, r8
}
 8004b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b56:	b90b      	cbnz	r3, 8004b5c <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
 8004b58:	2001      	movs	r0, #1
 8004b5a:	e7ce      	b.n	8004afa <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004b60:	f000 ff50 	bl	8005a04 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0f7      	beq.n	8004b58 <xQueueGenericSendFromISR+0xb8>
 8004b68:	2f00      	cmp	r7, #0
 8004b6a:	d0f5      	beq.n	8004b58 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b6c:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004b6e:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	e7c2      	b.n	8004afa <xQueueGenericSendFromISR+0x5a>

08004b74 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004b74:	b360      	cbz	r0, 8004bd0 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b76:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b7c:	b143      	cbz	r3, 8004b90 <xQueueGiveFromISR+0x1c>
 8004b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	e7fe      	b.n	8004b8e <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	460d      	mov	r5, r1
 8004b94:	b32b      	cbz	r3, 8004be2 <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b96:	f001 fc79 	bl	800648c <vPortValidateInterruptPriority>
	__asm volatile
 8004b9a:	f3ef 8611 	mrs	r6, BASEPRI
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004bb0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d921      	bls.n	8004bfa <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bb6:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bba:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8004bbc:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bbe:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bc0:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8004bc2:	d01e      	beq.n	8004c02 <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bc4:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8004bc6:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bc8:	b25b      	sxtb	r3, r3
 8004bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bce:	e015      	b.n	8004bfc <xQueueGiveFromISR+0x88>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004be0:	e7fe      	b.n	8004be0 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004be2:	6883      	ldr	r3, [r0, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0d6      	beq.n	8004b96 <xQueueGiveFromISR+0x22>
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004bfa:	2000      	movs	r0, #0
	__asm volatile
 8004bfc:	f386 8811 	msr	BASEPRI, r6
}
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c04:	b90b      	cbnz	r3, 8004c0a <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
 8004c06:	2001      	movs	r0, #1
 8004c08:	e7f8      	b.n	8004bfc <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c0e:	f000 fef9 	bl	8005a04 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8004c12:	2d00      	cmp	r5, #0
 8004c14:	d0f7      	beq.n	8004c06 <xQueueGiveFromISR+0x92>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d0f5      	beq.n	8004c06 <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c1a:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8004c1c:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004c1e:	602b      	str	r3, [r5, #0]
 8004c20:	e7ec      	b.n	8004bfc <xQueueGiveFromISR+0x88>
 8004c22:	bf00      	nop

08004c24 <xQueueReceive>:
{
 8004c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f000 80a0 	beq.w	8004d72 <xQueueReceive+0x14e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c32:	460d      	mov	r5, r1
 8004c34:	4604      	mov	r4, r0
 8004c36:	2900      	cmp	r1, #0
 8004c38:	d047      	beq.n	8004cca <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c3a:	f000 ff8d 	bl	8005b58 <xTaskGetSchedulerState>
 8004c3e:	2800      	cmp	r0, #0
 8004c40:	d04f      	beq.n	8004ce2 <xQueueReceive+0xbe>
		taskENTER_CRITICAL();
 8004c42:	f001 fb07 	bl	8006254 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c46:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c48:	2e00      	cmp	r6, #0
 8004c4a:	d167      	bne.n	8004d1c <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d035      	beq.n	8004cbe <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8004c52:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c54:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8004c58:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c5c:	a802      	add	r0, sp, #8
 8004c5e:	f000 ff1b 	bl	8005a98 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004c62:	f001 fb19 	bl	8006298 <vPortExitCritical>
		vTaskSuspendAll();
 8004c66:	f000 fe51 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c6a:	f001 faf3 	bl	8006254 <vPortEnterCritical>
 8004c6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004c72:	2bff      	cmp	r3, #255	; 0xff
 8004c74:	d101      	bne.n	8004c7a <xQueueReceive+0x56>
 8004c76:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004c7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c7e:	2bff      	cmp	r3, #255	; 0xff
 8004c80:	d101      	bne.n	8004c86 <xQueueReceive+0x62>
 8004c82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c86:	f001 fb07 	bl	8006298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c8a:	a901      	add	r1, sp, #4
 8004c8c:	a802      	add	r0, sp, #8
 8004c8e:	f000 ff0f 	bl	8005ab0 <xTaskCheckForTimeOut>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d131      	bne.n	8004cfa <xQueueReceive+0xd6>
	taskENTER_CRITICAL();
 8004c96:	f001 fadd 	bl	8006254 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d052      	beq.n	8004d46 <xQueueReceive+0x122>
	taskEXIT_CRITICAL();
 8004ca0:	f001 fafa 	bl	8006298 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	f7ff fc7b 	bl	80045a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004caa:	f000 fe37 	bl	800591c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004cae:	f001 fad1 	bl	8006254 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d131      	bne.n	8004d1c <xQueueReceive+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb8:	9b01      	ldr	r3, [sp, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d1      	bne.n	8004c62 <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8004cbe:	f001 faeb 	bl	8006298 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004cc2:	2000      	movs	r0, #0
}
 8004cc4:	b005      	add	sp, #20
 8004cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0b4      	beq.n	8004c3a <xQueueReceive+0x16>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	e7fe      	b.n	8004ce0 <xQueueReceive+0xbc>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ce2:	9b01      	ldr	r3, [sp, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0ac      	beq.n	8004c42 <xQueueReceive+0x1e>
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f7ff fc50 	bl	80045a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d00:	f000 fe0c 	bl	800591c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004d04:	f001 faa6 	bl	8006254 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0d7      	beq.n	8004cbe <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8004d0e:	f001 fac3 	bl	8006298 <vPortExitCritical>
		taskENTER_CRITICAL();
 8004d12:	f001 fa9f 	bl	8006254 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d18:	2e00      	cmp	r6, #0
 8004d1a:	d0cd      	beq.n	8004cb8 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004d1e:	b152      	cbz	r2, 8004d36 <xQueueReceive+0x112>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d20:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d22:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d24:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d26:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d28:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d2a:	d301      	bcc.n	8004d30 <xQueueReceive+0x10c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d30:	4628      	mov	r0, r5
 8004d32:	f009 f9be 	bl	800e0b2 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d36:	3e01      	subs	r6, #1
 8004d38:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	bb13      	cbnz	r3, 8004d84 <xQueueReceive+0x160>
				taskEXIT_CRITICAL();
 8004d3e:	f001 faab 	bl	8006298 <vPortExitCritical>
				return pdPASS;
 8004d42:	2001      	movs	r0, #1
 8004d44:	e7be      	b.n	8004cc4 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8004d46:	f001 faa7 	bl	8006298 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d4a:	9901      	ldr	r1, [sp, #4]
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	f000 fe21 	bl	8005994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d52:	4620      	mov	r0, r4
 8004d54:	f7ff fc24 	bl	80045a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d58:	f000 fde0 	bl	800591c <xTaskResumeAll>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d1d8      	bne.n	8004d12 <xQueueReceive+0xee>
					portYIELD_WITHIN_API();
 8004d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d64:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8004d70:	e7cf      	b.n	8004d12 <xQueueReceive+0xee>
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004d82:	e7fe      	b.n	8004d82 <xQueueReceive+0x15e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d84:	f104 0010 	add.w	r0, r4, #16
 8004d88:	f000 fe3c 	bl	8005a04 <xTaskRemoveFromEventList>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d0d6      	beq.n	8004d3e <xQueueReceive+0x11a>
						queueYIELD_IF_USING_PREEMPTION();
 8004d90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	e7cb      	b.n	8004d3e <xQueueReceive+0x11a>
 8004da6:	bf00      	nop

08004da8 <xQueueSemaphoreTake>:
{
 8004da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004daa:	b085      	sub	sp, #20
 8004dac:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004dae:	2800      	cmp	r0, #0
 8004db0:	d055      	beq.n	8004e5e <xQueueSemaphoreTake+0xb6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004db2:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8004db4:	4604      	mov	r4, r0
 8004db6:	b146      	cbz	r6, 8004dca <xQueueSemaphoreTake+0x22>
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	e7fe      	b.n	8004dc8 <xQueueSemaphoreTake+0x20>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dca:	f000 fec5 	bl	8005b58 <xTaskGetSchedulerState>
 8004dce:	4605      	mov	r5, r0
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d04d      	beq.n	8004e70 <xQueueSemaphoreTake+0xc8>
 8004dd4:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8004dd6:	f001 fa3d 	bl	8006254 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8004ddc:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004dde:	bb8b      	cbnz	r3, 8004e44 <xQueueSemaphoreTake+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de0:	9b01      	ldr	r3, [sp, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 809b 	beq.w	8004f1e <xQueueSemaphoreTake+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	d059      	beq.n	8004ea0 <xQueueSemaphoreTake+0xf8>
		taskEXIT_CRITICAL();
 8004dec:	f001 fa54 	bl	8006298 <vPortExitCritical>
		vTaskSuspendAll();
 8004df0:	f000 fd8c 	bl	800590c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004df4:	f001 fa2e 	bl	8006254 <vPortEnterCritical>
 8004df8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004dfc:	2bff      	cmp	r3, #255	; 0xff
 8004dfe:	d101      	bne.n	8004e04 <xQueueSemaphoreTake+0x5c>
 8004e00:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004e04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004e08:	2bff      	cmp	r3, #255	; 0xff
 8004e0a:	d101      	bne.n	8004e10 <xQueueSemaphoreTake+0x68>
 8004e0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e10:	f001 fa42 	bl	8006298 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e14:	a901      	add	r1, sp, #4
 8004e16:	a802      	add	r0, sp, #8
 8004e18:	f000 fe4a 	bl	8005ab0 <xTaskCheckForTimeOut>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d133      	bne.n	8004e88 <xQueueSemaphoreTake+0xe0>
	taskENTER_CRITICAL();
 8004e20:	f001 fa18 	bl	8006254 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03e      	beq.n	8004ea8 <xQueueSemaphoreTake+0x100>
	taskEXIT_CRITICAL();
 8004e2a:	f001 fa35 	bl	8006298 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7ff fbb6 	bl	80045a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e34:	f000 fd72 	bl	800591c <xTaskResumeAll>
		taskENTER_CRITICAL();
 8004e38:	f001 fa0c 	bl	8006254 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004e3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e3e:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0cd      	beq.n	8004de0 <xQueueSemaphoreTake+0x38>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e44:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e46:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004e48:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	f000 8083 	beq.w	8004f56 <xQueueSemaphoreTake+0x1ae>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e50:	6923      	ldr	r3, [r4, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d16e      	bne.n	8004f34 <xQueueSemaphoreTake+0x18c>
				return pdPASS;
 8004e56:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8004e58:	f001 fa1e 	bl	8006298 <vPortExitCritical>
				return pdPASS;
 8004e5c:	e042      	b.n	8004ee4 <xQueueSemaphoreTake+0x13c>
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004e6e:	e7fe      	b.n	8004e6e <xQueueSemaphoreTake+0xc6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d039      	beq.n	8004eea <xQueueSemaphoreTake+0x142>
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	e7fe      	b.n	8004e86 <xQueueSemaphoreTake+0xde>
			prvUnlockQueue( pxQueue );
 8004e88:	4620      	mov	r0, r4
 8004e8a:	f7ff fb89 	bl	80045a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8e:	f000 fd45 	bl	800591c <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004e92:	f001 f9df 	bl	8006254 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e98:	b30b      	cbz	r3, 8004ede <xQueueSemaphoreTake+0x136>
	taskEXIT_CRITICAL();
 8004e9a:	f001 f9fd 	bl	8006298 <vPortExitCritical>
	return xReturn;
 8004e9e:	e7cb      	b.n	8004e38 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ea0:	a802      	add	r0, sp, #8
 8004ea2:	f000 fdf9 	bl	8005a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ea6:	e7a1      	b.n	8004dec <xQueueSemaphoreTake+0x44>
	taskEXIT_CRITICAL();
 8004ea8:	f001 f9f6 	bl	8006298 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	b36b      	cbz	r3, 8004f0c <xQueueSemaphoreTake+0x164>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eb0:	9901      	ldr	r1, [sp, #4]
 8004eb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004eb6:	f000 fd6d 	bl	8005994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fb70 	bl	80045a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ec0:	f000 fd2c 	bl	800591c <xTaskResumeAll>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d1b7      	bne.n	8004e38 <xQueueSemaphoreTake+0x90>
					portYIELD_WITHIN_API();
 8004ec8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	e7ac      	b.n	8004e38 <xQueueSemaphoreTake+0x90>
	taskEXIT_CRITICAL();
 8004ede:	f001 f9db 	bl	8006298 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8004ee2:	b926      	cbnz	r6, 8004eee <xQueueSemaphoreTake+0x146>
}
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	b005      	add	sp, #20
 8004ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eea:	4606      	mov	r6, r0
 8004eec:	e773      	b.n	8004dd6 <xQueueSemaphoreTake+0x2e>
						taskENTER_CRITICAL();
 8004eee:	f001 f9b1 	bl	8006254 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ef2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ef4:	b119      	cbz	r1, 8004efe <xQueueSemaphoreTake+0x156>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004efe:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8004f00:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004f02:	f000 fec5 	bl	8005c90 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8004f06:	f001 f9c7 	bl	8006298 <vPortExitCritical>
 8004f0a:	e7eb      	b.n	8004ee4 <xQueueSemaphoreTake+0x13c>
						taskENTER_CRITICAL();
 8004f0c:	f001 f9a2 	bl	8006254 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f10:	68a0      	ldr	r0, [r4, #8]
 8004f12:	f000 fe31 	bl	8005b78 <xTaskPriorityInherit>
 8004f16:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8004f18:	f001 f9be 	bl	8006298 <vPortExitCritical>
 8004f1c:	e7c8      	b.n	8004eb0 <xQueueSemaphoreTake+0x108>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004f1e:	2e00      	cmp	r6, #0
 8004f20:	d0f1      	beq.n	8004f06 <xQueueSemaphoreTake+0x15e>
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	e7fe      	b.n	8004f32 <xQueueSemaphoreTake+0x18a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f34:	f104 0010 	add.w	r0, r4, #16
 8004f38:	f000 fd64 	bl	8005a04 <xTaskRemoveFromEventList>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d08a      	beq.n	8004e56 <xQueueSemaphoreTake+0xae>
						queueYIELD_IF_USING_PREEMPTION();
 8004f40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	e77f      	b.n	8004e56 <xQueueSemaphoreTake+0xae>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f56:	f000 feef 	bl	8005d38 <pvTaskIncrementMutexHeldCount>
 8004f5a:	60a0      	str	r0, [r4, #8]
 8004f5c:	e778      	b.n	8004e50 <xQueueSemaphoreTake+0xa8>
 8004f5e:	bf00      	nop

08004f60 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8004f60:	b1a8      	cbz	r0, 8004f8e <xQueueTakeMutexRecursive+0x2e>
	{
 8004f62:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004f64:	6886      	ldr	r6, [r0, #8]
 8004f66:	4604      	mov	r4, r0
 8004f68:	460d      	mov	r5, r1
 8004f6a:	f000 fdef 	bl	8005b4c <xTaskGetCurrentTaskHandle>
 8004f6e:	4286      	cmp	r6, r0
 8004f70:	d008      	beq.n	8004f84 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004f72:	4629      	mov	r1, r5
 8004f74:	4620      	mov	r0, r4
 8004f76:	f7ff ff17 	bl	8004da8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 8004f7a:	b110      	cbz	r0, 8004f82 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004f7c:	68e3      	ldr	r3, [r4, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60e3      	str	r3, [r4, #12]
	}
 8004f82:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004f84:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 8004f86:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004f88:	4403      	add	r3, r0
 8004f8a:	60e3      	str	r3, [r4, #12]
	}
 8004f8c:	bd70      	pop	{r4, r5, r6, pc}
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004f9e:	e7fe      	b.n	8004f9e <xQueueTakeMutexRecursive+0x3e>

08004fa0 <xQueueReceiveFromISR>:
{
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004fa4:	b310      	cbz	r0, 8004fec <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa6:	460e      	mov	r6, r1
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4617      	mov	r7, r2
 8004fac:	b191      	cbz	r1, 8004fd4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fae:	f001 fa6d 	bl	800648c <vPortValidateInterruptPriority>
	__asm volatile
 8004fb2:	f3ef 8911 	mrs	r9, BASEPRI
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fc6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fc8:	b9cd      	cbnz	r5, 8004ffe <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8004fca:	4628      	mov	r0, r5
	__asm volatile
 8004fcc:	f389 8811 	msr	BASEPRI, r9
}
 8004fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0e9      	beq.n	8004fae <xQueueReceiveFromISR+0xe>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	e7fe      	b.n	8004fea <xQueueReceiveFromISR+0x4a>
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004ffc:	e7fe      	b.n	8004ffc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ffe:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005002:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8005004:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005008:	b142      	cbz	r2, 800501c <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800500a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800500c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800500e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005010:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005012:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005014:	d215      	bcs.n	8005042 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005016:	4630      	mov	r0, r6
 8005018:	f009 f84b 	bl	800e0b2 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800501c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800501e:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005022:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005024:	d009      	beq.n	800503a <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005026:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 800502a:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800502c:	b25b      	sxtb	r3, r3
 800502e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8005032:	f389 8811 	msr	BASEPRI, r9
}
 8005036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	b923      	cbnz	r3, 8005048 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
 800503e:	2001      	movs	r0, #1
 8005040:	e7c4      	b.n	8004fcc <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005042:	6821      	ldr	r1, [r4, #0]
 8005044:	60e1      	str	r1, [r4, #12]
 8005046:	e7e6      	b.n	8005016 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005048:	f104 0010 	add.w	r0, r4, #16
 800504c:	f000 fcda 	bl	8005a04 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8005050:	2f00      	cmp	r7, #0
 8005052:	d0f4      	beq.n	800503e <xQueueReceiveFromISR+0x9e>
 8005054:	2800      	cmp	r0, #0
 8005056:	d0f2      	beq.n	800503e <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005058:	2301      	movs	r3, #1
			xReturn = pdPASS;
 800505a:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	e7b5      	b.n	8004fcc <xQueueReceiveFromISR+0x2c>

08005060 <vQueueDelete>:
	configASSERT( pxQueue );
 8005060:	b180      	cbz	r0, 8005084 <vQueueDelete+0x24>
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005062:	2300      	movs	r3, #0
{
 8005064:	b410      	push	{r4}
 8005066:	4c12      	ldr	r4, [pc, #72]	; (80050b0 <vQueueDelete+0x50>)
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005068:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800506c:	6851      	ldr	r1, [r2, #4]
 800506e:	4288      	cmp	r0, r1
 8005070:	d015      	beq.n	800509e <vQueueDelete+0x3e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005072:	3301      	adds	r3, #1
 8005074:	2b08      	cmp	r3, #8
 8005076:	d1f7      	bne.n	8005068 <vQueueDelete+0x8>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005078:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 800507c:	b15b      	cbz	r3, 8005096 <vQueueDelete+0x36>
}
 800507e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005082:	4770      	bx	lr
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005094:	e7fe      	b.n	8005094 <vQueueDelete+0x34>
}
 8005096:	f85d 4b04 	ldr.w	r4, [sp], #4
			vPortFree( pxQueue );
 800509a:	f001 baef 	b.w	800667c <vPortFree>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800509e:	2100      	movs	r1, #0
 80050a0:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050a4:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80050a8:	6051      	str	r1, [r2, #4]
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d1e7      	bne.n	800507e <vQueueDelete+0x1e>
 80050ae:	e7f2      	b.n	8005096 <vQueueDelete+0x36>
 80050b0:	24001c18 	.word	0x24001c18

080050b4 <vQueueAddToRegistry>:
	{
 80050b4:	b410      	push	{r4}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	4c08      	ldr	r4, [pc, #32]	; (80050dc <vQueueAddToRegistry+0x28>)
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050ba:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80050be:	b12a      	cbz	r2, 80050cc <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050c0:	3301      	adds	r3, #1
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d1f9      	bne.n	80050ba <vQueueAddToRegistry+0x6>
	}
 80050c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ca:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050cc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050d0:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 80050d4:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 80050d8:	6050      	str	r0, [r2, #4]
	}
 80050da:	4770      	bx	lr
 80050dc:	24001c18 	.word	0x24001c18

080050e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050e0:	b570      	push	{r4, r5, r6, lr}
 80050e2:	4604      	mov	r4, r0
 80050e4:	460e      	mov	r6, r1
 80050e6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80050e8:	f001 f8b4 	bl	8006254 <vPortEnterCritical>
 80050ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80050f0:	2bff      	cmp	r3, #255	; 0xff
 80050f2:	d102      	bne.n	80050fa <vQueueWaitForMessageRestricted+0x1a>
 80050f4:	2300      	movs	r3, #0
 80050f6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80050fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80050fe:	2bff      	cmp	r3, #255	; 0xff
 8005100:	d102      	bne.n	8005108 <vQueueWaitForMessageRestricted+0x28>
 8005102:	2300      	movs	r3, #0
 8005104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005108:	f001 f8c6 	bl	8006298 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800510c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800510e:	b123      	cbz	r3, 800511a <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005110:	4620      	mov	r0, r4
	}
 8005112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8005116:	f7ff ba43 	b.w	80045a0 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800511a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800511e:	462a      	mov	r2, r5
 8005120:	4631      	mov	r1, r6
 8005122:	f000 fc51 	bl	80059c8 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8005126:	4620      	mov	r0, r4
	}
 8005128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800512c:	f7ff ba38 	b.w	80045a0 <prvUnlockQueue>

08005130 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005136:	f001 f88d 	bl	8006254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800513a:	4a34      	ldr	r2, [pc, #208]	; (800520c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 800513c:	4e34      	ldr	r6, [pc, #208]	; (8005210 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005144:	6833      	ldr	r3, [r6, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d032      	beq.n	80051b0 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800514a:	4c32      	ldr	r4, [pc, #200]	; (8005214 <prvAddNewTaskToReadyList+0xe4>)
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	b33b      	cbz	r3, 80051a0 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005150:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8005152:	4f31      	ldr	r7, [pc, #196]	; (8005218 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005154:	4a31      	ldr	r2, [pc, #196]	; (800521c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8005156:	4932      	ldr	r1, [pc, #200]	; (8005220 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8005158:	6813      	ldr	r3, [r2, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800515e:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005160:	680b      	ldr	r3, [r1, #0]
 8005162:	4283      	cmp	r3, r0
 8005164:	d200      	bcs.n	8005168 <prvAddNewTaskToReadyList+0x38>
 8005166:	6008      	str	r0, [r1, #0]
 8005168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800516c:	1d29      	adds	r1, r5, #4
 800516e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8005172:	f7ff f997 	bl	80044a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005176:	f001 f88f 	bl	8006298 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	b173      	cbz	r3, 800519c <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800517e:	6832      	ldr	r2, [r6, #0]
 8005180:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005182:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005184:	429a      	cmp	r2, r3
 8005186:	d209      	bcs.n	800519c <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005188:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800518c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005190:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800519c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4f1c      	ldr	r7, [pc, #112]	; (8005218 <prvAddNewTaskToReadyList+0xe8>)
 80051a8:	4283      	cmp	r3, r0
 80051aa:	d8d3      	bhi.n	8005154 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
 80051ac:	6035      	str	r5, [r6, #0]
 80051ae:	e7d1      	b.n	8005154 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 80051b0:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b2:	6813      	ldr	r3, [r2, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d003      	beq.n	80051c0 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 80051b8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80051ba:	4f17      	ldr	r7, [pc, #92]	; (8005218 <prvAddNewTaskToReadyList+0xe8>)
 80051bc:	4c15      	ldr	r4, [pc, #84]	; (8005214 <prvAddNewTaskToReadyList+0xe4>)
 80051be:	e7c9      	b.n	8005154 <prvAddNewTaskToReadyList+0x24>
 80051c0:	4f15      	ldr	r7, [pc, #84]	; (8005218 <prvAddNewTaskToReadyList+0xe8>)
 80051c2:	463c      	mov	r4, r7
 80051c4:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051c8:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ca:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051cc:	f7ff f95a 	bl	8004484 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051d0:	45a0      	cmp	r8, r4
 80051d2:	d1f9      	bne.n	80051c8 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051d4:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8005238 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80051d8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800523c <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
 80051dc:	4648      	mov	r0, r9
 80051de:	4c0d      	ldr	r4, [pc, #52]	; (8005214 <prvAddNewTaskToReadyList+0xe4>)
 80051e0:	f7ff f950 	bl	8004484 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051e4:	4640      	mov	r0, r8
 80051e6:	f7ff f94d 	bl	8004484 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051ea:	480e      	ldr	r0, [pc, #56]	; (8005224 <prvAddNewTaskToReadyList+0xf4>)
 80051ec:	f7ff f94a 	bl	8004484 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051f0:	480d      	ldr	r0, [pc, #52]	; (8005228 <prvAddNewTaskToReadyList+0xf8>)
 80051f2:	f7ff f947 	bl	8004484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051f6:	480d      	ldr	r0, [pc, #52]	; (800522c <prvAddNewTaskToReadyList+0xfc>)
 80051f8:	f7ff f944 	bl	8004484 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051fc:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80051fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8005200:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <prvAddNewTaskToReadyList+0x104>)
 8005206:	f8c3 8000 	str.w	r8, [r3]
}
 800520a:	e7a3      	b.n	8005154 <prvAddNewTaskToReadyList+0x24>
 800520c:	240020c4 	.word	0x240020c4
 8005210:	24001c58 	.word	0x24001c58
 8005214:	24002120 	.word	0x24002120
 8005218:	24001c64 	.word	0x24001c64
 800521c:	240020d0 	.word	0x240020d0
 8005220:	240020d4 	.word	0x240020d4
 8005224:	2400210c 	.word	0x2400210c
 8005228:	24002138 	.word	0x24002138
 800522c:	24002124 	.word	0x24002124
 8005230:	24001c5c 	.word	0x24001c5c
 8005234:	24001c60 	.word	0x24001c60
 8005238:	240020d8 	.word	0x240020d8
 800523c:	240020ec 	.word	0x240020ec

08005240 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <prvAddCurrentTaskToDelayedList+0x58>)
{
 8005244:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005246:	4e15      	ldr	r6, [pc, #84]	; (800529c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 8005248:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800524a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	1d18      	adds	r0, r3, #4
 8005250:	f7ff f950 	bl	80044f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005254:	1c63      	adds	r3, r4, #1
 8005256:	d100      	bne.n	800525a <prvAddCurrentTaskToDelayedList+0x1a>
 8005258:	b9bf      	cbnz	r7, 800528a <prvAddCurrentTaskToDelayedList+0x4a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800525a:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800525c:	6833      	ldr	r3, [r6, #0]
 800525e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005260:	d307      	bcc.n	8005272 <prvAddCurrentTaskToDelayedList+0x32>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005262:	4b0f      	ldr	r3, [pc, #60]	; (80052a0 <prvAddCurrentTaskToDelayedList+0x60>)
 8005264:	6818      	ldr	r0, [r3, #0]
 8005266:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005268:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800526c:	3104      	adds	r1, #4
 800526e:	f7ff b929 	b.w	80044c4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005272:	4b0c      	ldr	r3, [pc, #48]	; (80052a4 <prvAddCurrentTaskToDelayedList+0x64>)
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	6831      	ldr	r1, [r6, #0]
 8005278:	3104      	adds	r1, #4
 800527a:	f7ff f923 	bl	80044c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800527e:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <prvAddCurrentTaskToDelayedList+0x68>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	42a2      	cmp	r2, r4
 8005284:	d900      	bls.n	8005288 <prvAddCurrentTaskToDelayedList+0x48>
					xNextTaskUnblockTime = xTimeToWake;
 8005286:	601c      	str	r4, [r3, #0]
}
 8005288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800528a:	6831      	ldr	r1, [r6, #0]
 800528c:	4807      	ldr	r0, [pc, #28]	; (80052ac <prvAddCurrentTaskToDelayedList+0x6c>)
 800528e:	3104      	adds	r1, #4
}
 8005290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005294:	f7ff b906 	b.w	80044a4 <vListInsertEnd>
 8005298:	2400214c 	.word	0x2400214c
 800529c:	24001c58 	.word	0x24001c58
 80052a0:	24001c60 	.word	0x24001c60
 80052a4:	24001c5c 	.word	0x24001c5c
 80052a8:	24002100 	.word	0x24002100
 80052ac:	24002124 	.word	0x24002124

080052b0 <prvDeleteTCB>:
	{
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052b4:	3054      	adds	r0, #84	; 0x54
 80052b6:	f009 f80b 	bl	800e2d0 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052ba:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 80052be:	b163      	cbz	r3, 80052da <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d013      	beq.n	80052ec <prvDeleteTCB+0x3c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d010      	beq.n	80052ea <prvDeleteTCB+0x3a>
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	e7fe      	b.n	80052d8 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 80052da:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80052dc:	f001 f9ce 	bl	800667c <vPortFree>
				vPortFree( pxTCB );
 80052e0:	4620      	mov	r0, r4
	}
 80052e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80052e6:	f001 b9c9 	b.w	800667c <vPortFree>
	}
 80052ea:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80052ec:	4620      	mov	r0, r4
	}
 80052ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80052f2:	f001 b9c3 	b.w	800667c <vPortFree>
 80052f6:	bf00      	nop

080052f8 <prvIdleTask>:
{
 80052f8:	4c15      	ldr	r4, [pc, #84]	; (8005350 <prvIdleTask+0x58>)
				taskYIELD();
 80052fa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80052fe:	4e15      	ldr	r6, [pc, #84]	; (8005354 <prvIdleTask+0x5c>)
 8005300:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8005304:	4d14      	ldr	r5, [pc, #80]	; (8005358 <prvIdleTask+0x60>)
 8005306:	f8df a054 	ldr.w	sl, [pc, #84]	; 800535c <prvIdleTask+0x64>
{
 800530a:	b580      	push	{r7, lr}
 800530c:	e011      	b.n	8005332 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 800530e:	f000 ffa1 	bl	8006254 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	68f3      	ldr	r3, [r6, #12]
 8005314:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005316:	1d38      	adds	r0, r7, #4
 8005318:	f7ff f8ec 	bl	80044f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	3b01      	subs	r3, #1
 8005320:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8005328:	f000 ffb6 	bl	8006298 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800532c:	4638      	mov	r0, r7
 800532e:	f7ff ffbf 	bl	80052b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1ea      	bne.n	800530e <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005338:	f8da 3000 	ldr.w	r3, [sl]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d9f8      	bls.n	8005332 <prvIdleTask+0x3a>
				taskYIELD();
 8005340:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	e7f1      	b.n	8005332 <prvIdleTask+0x3a>
 800534e:	bf00      	nop
 8005350:	240020c8 	.word	0x240020c8
 8005354:	24002138 	.word	0x24002138
 8005358:	240020c4 	.word	0x240020c4
 800535c:	24001c64 	.word	0x24001c64

08005360 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 8005360:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 8005362:	2200      	movs	r2, #0
		taskCHECK_FOR_STACK_OVERFLOW();
 8005364:	4c1f      	ldr	r4, [pc, #124]	; (80053e4 <vTaskSwitchContext.part.0+0x84>)
		xYieldPending = pdFALSE;
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <vTaskSwitchContext.part.0+0x88>)
 8005368:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800536a:	6822      	ldr	r2, [r4, #0]
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	6812      	ldr	r2, [r2, #0]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	429a      	cmp	r2, r3
 8005374:	d92c      	bls.n	80053d0 <vTaskSwitchContext.part.0+0x70>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005376:	4d1d      	ldr	r5, [pc, #116]	; (80053ec <vTaskSwitchContext.part.0+0x8c>)
 8005378:	491d      	ldr	r1, [pc, #116]	; (80053f0 <vTaskSwitchContext.part.0+0x90>)
 800537a:	682b      	ldr	r3, [r5, #0]
 800537c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005380:	0098      	lsls	r0, r3, #2
 8005382:	0092      	lsls	r2, r2, #2
 8005384:	588a      	ldr	r2, [r1, r2]
 8005386:	b942      	cbnz	r2, 800539a <vTaskSwitchContext.part.0+0x3a>
 8005388:	b1cb      	cbz	r3, 80053be <vTaskSwitchContext.part.0+0x5e>
 800538a:	3b01      	subs	r3, #1
 800538c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005390:	0098      	lsls	r0, r3, #2
 8005392:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005396:	2a00      	cmp	r2, #0
 8005398:	d0f6      	beq.n	8005388 <vTaskSwitchContext.part.0+0x28>
 800539a:	18c2      	adds	r2, r0, r3
 800539c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80053a0:	6841      	ldr	r1, [r0, #4]
 80053a2:	4602      	mov	r2, r0
 80053a4:	6849      	ldr	r1, [r1, #4]
 80053a6:	3208      	adds	r2, #8
 80053a8:	4291      	cmp	r1, r2
 80053aa:	6041      	str	r1, [r0, #4]
 80053ac:	d016      	beq.n	80053dc <vTaskSwitchContext.part.0+0x7c>
 80053ae:	68c9      	ldr	r1, [r1, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053b0:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <vTaskSwitchContext.part.0+0x94>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b2:	6021      	str	r1, [r4, #0]
 80053b4:	602b      	str	r3, [r5, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	3354      	adds	r3, #84	; 0x54
 80053ba:	6013      	str	r3, [r2, #0]
}
 80053bc:	bd38      	pop	{r3, r4, r5, pc}
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053ce:	e7fe      	b.n	80053ce <vTaskSwitchContext.part.0+0x6e>
		taskCHECK_FOR_STACK_OVERFLOW();
 80053d0:	6820      	ldr	r0, [r4, #0]
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	3134      	adds	r1, #52	; 0x34
 80053d6:	f7fa ffeb 	bl	80003b0 <vApplicationStackOverflowHook>
 80053da:	e7cc      	b.n	8005376 <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053dc:	6849      	ldr	r1, [r1, #4]
 80053de:	6041      	str	r1, [r0, #4]
 80053e0:	e7e5      	b.n	80053ae <vTaskSwitchContext.part.0+0x4e>
 80053e2:	bf00      	nop
 80053e4:	24001c58 	.word	0x24001c58
 80053e8:	24002150 	.word	0x24002150
 80053ec:	240020d4 	.word	0x240020d4
 80053f0:	24001c64 	.word	0x24001c64
 80053f4:	24000030 	.word	0x24000030

080053f8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053fe:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005402:	4606      	mov	r6, r0
 8005404:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005406:	464a      	mov	r2, r9
 8005408:	21a5      	movs	r1, #165	; 0xa5
 800540a:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800540c:	461f      	mov	r7, r3
 800540e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005412:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005416:	f008 fe5a 	bl	800e0ce <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800541a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800541c:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800541e:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8005422:	2d00      	cmp	r5, #0
 8005424:	d042      	beq.n	80054ac <prvInitialiseNewTask.constprop.0+0xb4>
 8005426:	f105 3cff 	add.w	ip, r5, #4294967295
 800542a:	f105 010f 	add.w	r1, r5, #15
 800542e:	f104 0e33 	add.w	lr, r4, #51	; 0x33
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005432:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8005436:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800543a:	b10d      	cbz	r5, 8005440 <prvInitialiseNewTask.constprop.0+0x48>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800543c:	458c      	cmp	ip, r1
 800543e:	d1f8      	bne.n	8005432 <prvInitialiseNewTask.constprop.0+0x3a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005440:	2300      	movs	r3, #0
 8005442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005446:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8005448:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800544c:	1d20      	adds	r0, r4, #4
 800544e:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8005450:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 8005454:	bf28      	it	cs
 8005456:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8005458:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800545a:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005460:	f7ff f81c 	bl	800449c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005464:	f104 0018 	add.w	r0, r4, #24
 8005468:	f7ff f818 	bl	800449c <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800546c:	4651      	mov	r1, sl
 800546e:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 8005470:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005474:	f104 0054 	add.w	r0, r4, #84	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005478:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800547a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800547c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800547e:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005482:	f008 fe24 	bl	800e0ce <memset>
 8005486:	4b0b      	ldr	r3, [pc, #44]	; (80054b4 <prvInitialiseNewTask.constprop.0+0xbc>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005488:	463a      	mov	r2, r7
 800548a:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800548c:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800548e:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <prvInitialiseNewTask.constprop.0+0xc0>)
 8005492:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005494:	4b09      	ldr	r3, [pc, #36]	; (80054bc <prvInitialiseNewTask.constprop.0+0xc4>)
 8005496:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005498:	f000 feb0 	bl	80061fc <pxPortInitialiseStack>
 800549c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800549e:	f1b8 0f00 	cmp.w	r8, #0
 80054a2:	d001      	beq.n	80054a8 <prvInitialiseNewTask.constprop.0+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054a4:	f8c8 4000 	str.w	r4, [r8]
}
 80054a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054ac:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80054b0:	e7c9      	b.n	8005446 <prvInitialiseNewTask.constprop.0+0x4e>
 80054b2:	bf00      	nop
 80054b4:	080119b8 	.word	0x080119b8
 80054b8:	080119d8 	.word	0x080119d8
 80054bc:	08011998 	.word	0x08011998

080054c0 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054c0:	4b4a      	ldr	r3, [pc, #296]	; (80055ec <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
 80054c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054c6:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
 80054c8:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054ca:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 80054cc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054ce:	2e00      	cmp	r6, #0
 80054d0:	d059      	beq.n	8005586 <xTaskIncrementTick.part.0+0xc6>
 80054d2:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005600 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d6:	f8db 3000 	ldr.w	r3, [fp]
 80054da:	429e      	cmp	r6, r3
 80054dc:	d33a      	bcc.n	8005554 <xTaskIncrementTick.part.0+0x94>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	4f44      	ldr	r7, [pc, #272]	; (80055f0 <xTaskIncrementTick.part.0+0x130>)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681d      	ldr	r5, [r3, #0]
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	d05b      	beq.n	80055a0 <xTaskIncrementTick.part.0+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 80054e8:	2500      	movs	r5, #0
 80054ea:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8005604 <xTaskIncrementTick.part.0+0x144>
 80054ee:	f8df a118 	ldr.w	sl, [pc, #280]	; 8005608 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
 80054f2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800560c <xTaskIncrementTick.part.0+0x14c>
 80054f6:	e022      	b.n	800553e <xTaskIncrementTick.part.0+0x7e>
 80054f8:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054fa:	f7fe fffb 	bl	80044f4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005500:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005504:	9901      	ldr	r1, [sp, #4]
 8005506:	b113      	cbz	r3, 800550e <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005508:	f7fe fff4 	bl	80044f4 <uxListRemove>
 800550c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800550e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005510:	f8d8 2000 	ldr.w	r2, [r8]
 8005514:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005518:	4293      	cmp	r3, r2
 800551a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800551e:	d901      	bls.n	8005524 <xTaskIncrementTick.part.0+0x64>
 8005520:	f8c8 3000 	str.w	r3, [r8]
 8005524:	f7fe ffbe 	bl	80044a4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005528:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552c:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800552e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005530:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005532:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8005534:	4291      	cmp	r1, r2
 8005536:	bf28      	it	cs
 8005538:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800553a:	2b00      	cmp	r3, #0
 800553c:	d034      	beq.n	80055a8 <xTaskIncrementTick.part.0+0xe8>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005544:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005546:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8005548:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800554a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 800554c:	d2d4      	bcs.n	80054f8 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 800554e:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005552:	e004      	b.n	800555e <xTaskIncrementTick.part.0+0x9e>
BaseType_t xSwitchRequired = pdFALSE;
 8005554:	2500      	movs	r5, #0
 8005556:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005604 <xTaskIncrementTick.part.0+0x144>
 800555a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8005608 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800555e:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8005562:	4924      	ldr	r1, [pc, #144]	; (80055f4 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8005570:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8005572:	2a02      	cmp	r2, #2
 8005574:	bf28      	it	cs
 8005576:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8005578:	2b00      	cmp	r3, #0
}
 800557a:	bf0c      	ite	eq
 800557c:	4628      	moveq	r0, r5
 800557e:	2001      	movne	r0, #1
 8005580:	b003      	add	sp, #12
 8005582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <xTaskIncrementTick.part.0+0x130>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	b18a      	cbz	r2, 80055b2 <xTaskIncrementTick.part.0+0xf2>
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	e7fe      	b.n	800559e <xTaskIncrementTick.part.0+0xde>
 80055a0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8005604 <xTaskIncrementTick.part.0+0x144>
 80055a4:	f8df a060 	ldr.w	sl, [pc, #96]	; 8005608 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055a8:	f04f 33ff 	mov.w	r3, #4294967295
 80055ac:	f8cb 3000 	str.w	r3, [fp]
					break;
 80055b0:	e7d5      	b.n	800555e <xTaskIncrementTick.part.0+0x9e>
			taskSWITCH_DELAYED_LISTS();
 80055b2:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <xTaskIncrementTick.part.0+0x138>)
 80055b4:	6818      	ldr	r0, [r3, #0]
 80055b6:	6811      	ldr	r1, [r2, #0]
 80055b8:	6019      	str	r1, [r3, #0]
 80055ba:	4910      	ldr	r1, [pc, #64]	; (80055fc <xTaskIncrementTick.part.0+0x13c>)
 80055bc:	6010      	str	r0, [r2, #0]
 80055be:	680a      	ldr	r2, [r1, #0]
 80055c0:	3201      	adds	r2, #1
 80055c2:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	b932      	cbnz	r2, 80055d8 <xTaskIncrementTick.part.0+0x118>
		xNextTaskUnblockTime = portMAX_DELAY;
 80055ca:	f8df b034 	ldr.w	fp, [pc, #52]	; 8005600 <xTaskIncrementTick.part.0+0x140>
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	f8cb 3000 	str.w	r3, [fp]
 80055d6:	e77e      	b.n	80054d6 <xTaskIncrementTick.part.0+0x16>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055da:	f8df b024 	ldr.w	fp, [pc, #36]	; 8005600 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055de:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f8cb 3000 	str.w	r3, [fp]
}
 80055e8:	e775      	b.n	80054d6 <xTaskIncrementTick.part.0+0x16>
 80055ea:	bf00      	nop
 80055ec:	2400214c 	.word	0x2400214c
 80055f0:	24001c5c 	.word	0x24001c5c
 80055f4:	24002150 	.word	0x24002150
 80055f8:	24001c60 	.word	0x24001c60
 80055fc:	24002104 	.word	0x24002104
 8005600:	24002100 	.word	0x24002100
 8005604:	24001c64 	.word	0x24001c64
 8005608:	24001c58 	.word	0x24001c58
 800560c:	240020d4 	.word	0x240020d4

08005610 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8005614:	4d3d      	ldr	r5, [pc, #244]	; (800570c <xTaskResumeAll.part.0+0xfc>)
BaseType_t xTaskResumeAll( void )
 8005616:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005618:	f000 fe1c 	bl	8006254 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	3b01      	subs	r3, #1
 8005620:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d161      	bne.n	80056ec <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005628:	4b39      	ldr	r3, [pc, #228]	; (8005710 <xTaskResumeAll.part.0+0x100>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d05d      	beq.n	80056ec <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005630:	4e38      	ldr	r6, [pc, #224]	; (8005714 <xTaskResumeAll.part.0+0x104>)
 8005632:	6833      	ldr	r3, [r6, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d066      	beq.n	8005706 <xTaskResumeAll.part.0+0xf6>
 8005638:	4f37      	ldr	r7, [pc, #220]	; (8005718 <xTaskResumeAll.part.0+0x108>)
 800563a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8005728 <xTaskResumeAll.part.0+0x118>
 800563e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800572c <xTaskResumeAll.part.0+0x11c>
 8005642:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8005730 <xTaskResumeAll.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005646:	68f3      	ldr	r3, [r6, #12]
 8005648:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564a:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800564e:	f104 0018 	add.w	r0, r4, #24
 8005652:	f7fe ff4f 	bl	80044f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005656:	4658      	mov	r0, fp
 8005658:	f7fe ff4c 	bl	80044f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800565c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	4659      	mov	r1, fp
 8005662:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8005666:	4293      	cmp	r3, r2
 8005668:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800566c:	d900      	bls.n	8005670 <xTaskResumeAll.part.0+0x60>
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	f7fe ff18 	bl	80044a4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005674:	f8d8 3000 	ldr.w	r3, [r8]
 8005678:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	429a      	cmp	r2, r3
 800567e:	d302      	bcc.n	8005686 <xTaskResumeAll.part.0+0x76>
						xYieldPending = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005686:	6833      	ldr	r3, [r6, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1dc      	bne.n	8005646 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <xTaskResumeAll.part.0+0x10c>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	2a00      	cmp	r2, #0
 8005694:	d032      	beq.n	80056fc <xTaskResumeAll.part.0+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005698:	4b21      	ldr	r3, [pc, #132]	; (8005720 <xTaskResumeAll.part.0+0x110>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800569a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800569c:	68d2      	ldr	r2, [r2, #12]
 800569e:	6852      	ldr	r2, [r2, #4]
 80056a0:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056a2:	4e20      	ldr	r6, [pc, #128]	; (8005724 <xTaskResumeAll.part.0+0x114>)
 80056a4:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80056a6:	b194      	cbz	r4, 80056ce <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 80056a8:	2701      	movs	r7, #1
 80056aa:	e006      	b.n	80056ba <xTaskResumeAll.part.0+0xaa>
 80056ac:	f7ff ff08 	bl	80054c0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 80056b0:	b108      	cbz	r0, 80056b6 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 80056b2:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056b6:	3c01      	subs	r4, #1
 80056b8:	d008      	beq.n	80056cc <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0f5      	beq.n	80056ac <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 80056c0:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056c2:	3c01      	subs	r4, #1
		++xPendedTicks;
 80056c4:	f103 0301 	add.w	r3, r3, #1
 80056c8:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80056ca:	d1f6      	bne.n	80056ba <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 80056cc:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 80056ce:	f8da 3000 	ldr.w	r3, [sl]
 80056d2:	b15b      	cbz	r3, 80056ec <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 80056d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80056d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80056e8:	2001      	movs	r0, #1
 80056ea:	e000      	b.n	80056ee <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 80056ec:	2000      	movs	r0, #0
 80056ee:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80056f0:	f000 fdd2 	bl	8006298 <vPortExitCritical>
}
 80056f4:	9801      	ldr	r0, [sp, #4]
 80056f6:	b003      	add	sp, #12
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 80056fc:	4b08      	ldr	r3, [pc, #32]	; (8005720 <xTaskResumeAll.part.0+0x110>)
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	e7cd      	b.n	80056a2 <xTaskResumeAll.part.0+0x92>
 8005706:	f8df a028 	ldr.w	sl, [pc, #40]	; 8005730 <xTaskResumeAll.part.0+0x120>
 800570a:	e7ca      	b.n	80056a2 <xTaskResumeAll.part.0+0x92>
 800570c:	240020cc 	.word	0x240020cc
 8005710:	240020c4 	.word	0x240020c4
 8005714:	2400210c 	.word	0x2400210c
 8005718:	240020d4 	.word	0x240020d4
 800571c:	24001c5c 	.word	0x24001c5c
 8005720:	24002100 	.word	0x24002100
 8005724:	24002108 	.word	0x24002108
 8005728:	24001c64 	.word	0x24001c64
 800572c:	24001c58 	.word	0x24001c58
 8005730:	24002150 	.word	0x24002150

08005734 <xTaskCreateStatic>:
	{
 8005734:	b530      	push	{r4, r5, lr}
 8005736:	b087      	sub	sp, #28
 8005738:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800573a:	b1c4      	cbz	r4, 800576e <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 800573c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800573e:	b16d      	cbz	r5, 800575c <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005740:	25bc      	movs	r5, #188	; 0xbc
 8005742:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005744:	9d05      	ldr	r5, [sp, #20]
 8005746:	2dbc      	cmp	r5, #188	; 0xbc
 8005748:	d01a      	beq.n	8005780 <xTaskCreateStatic+0x4c>
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	e7fe      	b.n	800575a <xTaskCreateStatic+0x26>
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800576c:	e7fe      	b.n	800576c <xTaskCreateStatic+0x38>
 800576e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800577e:	e7fe      	b.n	800577e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005780:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005782:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005784:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005786:	9502      	str	r5, [sp, #8]
 8005788:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800578a:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800578c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800578e:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005792:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005794:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005796:	9401      	str	r4, [sp, #4]
 8005798:	f7ff fe2e 	bl	80053f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800579e:	f7ff fcc7 	bl	8005130 <prvAddNewTaskToReadyList>
	}
 80057a2:	9804      	ldr	r0, [sp, #16]
 80057a4:	b007      	add	sp, #28
 80057a6:	bd30      	pop	{r4, r5, pc}

080057a8 <xTaskCreate>:
	{
 80057a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057ac:	4607      	mov	r7, r0
 80057ae:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057b0:	0090      	lsls	r0, r2, #2
	{
 80057b2:	4615      	mov	r5, r2
 80057b4:	4688      	mov	r8, r1
 80057b6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057b8:	f000 fec8 	bl	800654c <pvPortMalloc>
			if( pxStack != NULL )
 80057bc:	b1d8      	cbz	r0, 80057f6 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057be:	4604      	mov	r4, r0
 80057c0:	20bc      	movs	r0, #188	; 0xbc
 80057c2:	f000 fec3 	bl	800654c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80057c6:	4606      	mov	r6, r0
 80057c8:	b1d0      	cbz	r0, 8005800 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80057ca:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057cc:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ce:	464b      	mov	r3, r9
 80057d0:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057d2:	f886 40b9 	strb.w	r4, [r6, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057d6:	4641      	mov	r1, r8
 80057d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80057da:	4638      	mov	r0, r7
 80057dc:	9602      	str	r6, [sp, #8]
 80057de:	9401      	str	r4, [sp, #4]
 80057e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80057e2:	9400      	str	r4, [sp, #0]
 80057e4:	f7ff fe08 	bl	80053f8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7ff fca1 	bl	8005130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ee:	2001      	movs	r0, #1
	}
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057f6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80057fa:	b005      	add	sp, #20
 80057fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005800:	4620      	mov	r0, r4
 8005802:	f000 ff3b 	bl	800667c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005806:	f04f 30ff 	mov.w	r0, #4294967295
 800580a:	e7f1      	b.n	80057f0 <xTaskCreate+0x48>

0800580c <vTaskDelay>:
	{
 800580c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800580e:	b950      	cbnz	r0, 8005826 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8005810:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005818:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
	}
 8005824:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005826:	4c10      	ldr	r4, [pc, #64]	; (8005868 <vTaskDelay+0x5c>)
 8005828:	6821      	ldr	r1, [r4, #0]
 800582a:	b141      	cbz	r1, 800583e <vTaskDelay+0x32>
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	e7fe      	b.n	800583c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005844:	f7ff fcfc 	bl	8005240 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	b943      	cbnz	r3, 800585e <vTaskDelay+0x52>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	e7fe      	b.n	800585c <vTaskDelay+0x50>
 800585e:	f7ff fed7 	bl	8005610 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8005862:	2800      	cmp	r0, #0
 8005864:	d0d4      	beq.n	8005810 <vTaskDelay+0x4>
	}
 8005866:	bd10      	pop	{r4, pc}
 8005868:	240020cc 	.word	0x240020cc

0800586c <vTaskStartScheduler>:
{
 800586c:	b510      	push	{r4, lr}
 800586e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005870:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005872:	aa07      	add	r2, sp, #28
 8005874:	a906      	add	r1, sp, #24
 8005876:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005878:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800587c:	f7fe fde2 	bl	8004444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005880:	4623      	mov	r3, r4
 8005882:	9a07      	ldr	r2, [sp, #28]
 8005884:	9400      	str	r4, [sp, #0]
 8005886:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800588a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800588e:	4918      	ldr	r1, [pc, #96]	; (80058f0 <vTaskStartScheduler+0x84>)
 8005890:	4818      	ldr	r0, [pc, #96]	; (80058f4 <vTaskStartScheduler+0x88>)
 8005892:	f7ff ff4f 	bl	8005734 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005896:	b1e8      	cbz	r0, 80058d4 <vTaskStartScheduler+0x68>
			xReturn = xTimerCreateTimerTask();
 8005898:	f000 fa90 	bl	8005dbc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800589c:	2801      	cmp	r0, #1
 800589e:	d11b      	bne.n	80058d8 <vTaskStartScheduler+0x6c>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <vTaskStartScheduler+0x8c>)
 80058b2:	4a12      	ldr	r2, [pc, #72]	; (80058fc <vTaskStartScheduler+0x90>)
 80058b4:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80058b6:	4912      	ldr	r1, [pc, #72]	; (8005900 <vTaskStartScheduler+0x94>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058b8:	3354      	adds	r3, #84	; 0x54
 80058ba:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80058c0:	4a10      	ldr	r2, [pc, #64]	; (8005904 <vTaskStartScheduler+0x98>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80058c2:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058c4:	4b10      	ldr	r3, [pc, #64]	; (8005908 <vTaskStartScheduler+0x9c>)
		xSchedulerRunning = pdTRUE;
 80058c6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058c8:	601c      	str	r4, [r3, #0]
}
 80058ca:	b008      	add	sp, #32
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80058d0:	f000 bd52 	b.w	8006378 <xPortStartScheduler>
}
 80058d4:	b008      	add	sp, #32
 80058d6:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058d8:	3001      	adds	r0, #1
 80058da:	d1fb      	bne.n	80058d4 <vTaskStartScheduler+0x68>
 80058dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e0:	f383 8811 	msr	BASEPRI, r3
 80058e4:	f3bf 8f6f 	isb	sy
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	e7fe      	b.n	80058ec <vTaskStartScheduler+0x80>
 80058ee:	bf00      	nop
 80058f0:	0800f938 	.word	0x0800f938
 80058f4:	080052f9 	.word	0x080052f9
 80058f8:	24001c58 	.word	0x24001c58
 80058fc:	24000030 	.word	0x24000030
 8005900:	24002100 	.word	0x24002100
 8005904:	24002120 	.word	0x24002120
 8005908:	2400214c 	.word	0x2400214c

0800590c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800590c:	4a02      	ldr	r2, [pc, #8]	; (8005918 <vTaskSuspendAll+0xc>)
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	3301      	adds	r3, #1
 8005912:	6013      	str	r3, [r2, #0]
}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	240020cc 	.word	0x240020cc

0800591c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800591c:	4b06      	ldr	r3, [pc, #24]	; (8005938 <xTaskResumeAll+0x1c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	b943      	cbnz	r3, 8005934 <xTaskResumeAll+0x18>
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	e7fe      	b.n	8005932 <xTaskResumeAll+0x16>
 8005934:	f7ff be6c 	b.w	8005610 <xTaskResumeAll.part.0>
 8005938:	240020cc 	.word	0x240020cc

0800593c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800593c:	4b01      	ldr	r3, [pc, #4]	; (8005944 <xTaskGetTickCount+0x8>)
 800593e:	6818      	ldr	r0, [r3, #0]
}
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	2400214c 	.word	0x2400214c

08005948 <xTaskGetTickCountFromISR>:
{
 8005948:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594a:	f000 fd9f 	bl	800648c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800594e:	4b01      	ldr	r3, [pc, #4]	; (8005954 <xTaskGetTickCountFromISR+0xc>)
 8005950:	6818      	ldr	r0, [r3, #0]
}
 8005952:	bd08      	pop	{r3, pc}
 8005954:	2400214c 	.word	0x2400214c

08005958 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <xTaskIncrementTick+0x18>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	b90b      	cbnz	r3, 8005962 <xTaskIncrementTick+0xa>
 800595e:	f7ff bdaf 	b.w	80054c0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8005962:	4a04      	ldr	r2, [pc, #16]	; (8005974 <xTaskIncrementTick+0x1c>)
}
 8005964:	2000      	movs	r0, #0
		++xPendedTicks;
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	240020cc 	.word	0x240020cc
 8005974:	24002108 	.word	0x24002108

08005978 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005978:	4b04      	ldr	r3, [pc, #16]	; (800598c <vTaskSwitchContext+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b11b      	cbz	r3, 8005986 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800597e:	4b04      	ldr	r3, [pc, #16]	; (8005990 <vTaskSwitchContext+0x18>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
}
 8005984:	4770      	bx	lr
 8005986:	f7ff bceb 	b.w	8005360 <vTaskSwitchContext.part.0>
 800598a:	bf00      	nop
 800598c:	240020cc 	.word	0x240020cc
 8005990:	24002150 	.word	0x24002150

08005994 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005994:	b160      	cbz	r0, 80059b0 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <vTaskPlaceOnEventList+0x30>)
{
 8005998:	b510      	push	{r4, lr}
 800599a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	3118      	adds	r1, #24
 80059a0:	f7fe fd90 	bl	80044c4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a4:	4620      	mov	r0, r4
 80059a6:	2101      	movs	r1, #1
}
 80059a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059ac:	f7ff bc48 	b.w	8005240 <prvAddCurrentTaskToDelayedList>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80059c0:	e7fe      	b.n	80059c0 <vTaskPlaceOnEventList+0x2c>
 80059c2:	bf00      	nop
 80059c4:	24001c58 	.word	0x24001c58

080059c8 <vTaskPlaceOnEventListRestricted>:
	{
 80059c8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80059ca:	b180      	cbz	r0, 80059ee <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <vTaskPlaceOnEventListRestricted+0x38>)
 80059ce:	460d      	mov	r5, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	3118      	adds	r1, #24
 80059d6:	f7fe fd65 	bl	80044a4 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80059da:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059dc:	4621      	mov	r1, r4
 80059de:	bf0c      	ite	eq
 80059e0:	4628      	moveq	r0, r5
 80059e2:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80059e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059ea:	f7ff bc29 	b.w	8005240 <prvAddCurrentTaskToDelayedList>
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80059fe:	e7fe      	b.n	80059fe <vTaskPlaceOnEventListRestricted+0x36>
 8005a00:	24001c58 	.word	0x24001c58

08005a04 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a04:	68c3      	ldr	r3, [r0, #12]
{
 8005a06:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a08:	68dc      	ldr	r4, [r3, #12]
{
 8005a0a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8005a0c:	b35c      	cbz	r4, 8005a66 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a0e:	f104 0518 	add.w	r5, r4, #24
 8005a12:	4628      	mov	r0, r5
 8005a14:	f7fe fd6e 	bl	80044f4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a18:	4b19      	ldr	r3, [pc, #100]	; (8005a80 <xTaskRemoveFromEventList+0x7c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	b17b      	cbz	r3, 8005a3e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a1e:	4629      	mov	r1, r5
 8005a20:	4818      	ldr	r0, [pc, #96]	; (8005a84 <xTaskRemoveFromEventList+0x80>)
 8005a22:	f7fe fd3f 	bl	80044a4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a26:	4b18      	ldr	r3, [pc, #96]	; (8005a88 <xTaskRemoveFromEventList+0x84>)
 8005a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d922      	bls.n	8005a78 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
 8005a36:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8005a38:	6013      	str	r3, [r2, #0]
}
 8005a3a:	b003      	add	sp, #12
 8005a3c:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a3e:	1d21      	adds	r1, r4, #4
 8005a40:	4608      	mov	r0, r1
 8005a42:	9101      	str	r1, [sp, #4]
 8005a44:	f7fe fd56 	bl	80044f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a48:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <xTaskRemoveFromEventList+0x8c>)
 8005a4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a4c:	6810      	ldr	r0, [r2, #0]
 8005a4e:	9901      	ldr	r1, [sp, #4]
 8005a50:	4283      	cmp	r3, r0
 8005a52:	d900      	bls.n	8005a56 <xTaskRemoveFromEventList+0x52>
 8005a54:	6013      	str	r3, [r2, #0]
 8005a56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a5a:	480e      	ldr	r0, [pc, #56]	; (8005a94 <xTaskRemoveFromEventList+0x90>)
 8005a5c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005a60:	f7fe fd20 	bl	80044a4 <vListInsertEnd>
 8005a64:	e7df      	b.n	8005a26 <xTaskRemoveFromEventList+0x22>
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005a76:	e7fe      	b.n	8005a76 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
 8005a78:	2000      	movs	r0, #0
}
 8005a7a:	b003      	add	sp, #12
 8005a7c:	bd30      	pop	{r4, r5, pc}
 8005a7e:	bf00      	nop
 8005a80:	240020cc 	.word	0x240020cc
 8005a84:	2400210c 	.word	0x2400210c
 8005a88:	24001c58 	.word	0x24001c58
 8005a8c:	24002150 	.word	0x24002150
 8005a90:	240020d4 	.word	0x240020d4
 8005a94:	24001c64 	.word	0x24001c64

08005a98 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a98:	4a03      	ldr	r2, [pc, #12]	; (8005aa8 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a9a:	4b04      	ldr	r3, [pc, #16]	; (8005aac <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a9c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	e9c0 2300 	strd	r2, r3, [r0]
}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	24002104 	.word	0x24002104
 8005aac:	2400214c 	.word	0x2400214c

08005ab0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005ab0:	b328      	cbz	r0, 8005afe <xTaskCheckForTimeOut+0x4e>
{
 8005ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab4:	460d      	mov	r5, r1
 8005ab6:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8005ab8:	b1c1      	cbz	r1, 8005aec <xTaskCheckForTimeOut+0x3c>
 8005aba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005abc:	f000 fbca 	bl	8006254 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8005ac0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
 8005ac4:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8005ac6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005ac8:	d030      	beq.n	8005b2c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005aca:	f8df c070 	ldr.w	ip, [pc, #112]	; 8005b3c <xTaskCheckForTimeOut+0x8c>
 8005ace:	6826      	ldr	r6, [r4, #0]
 8005ad0:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad4:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ad6:	42be      	cmp	r6, r7
 8005ad8:	d01a      	beq.n	8005b10 <xTaskCheckForTimeOut+0x60>
 8005ada:	4288      	cmp	r0, r1
 8005adc:	d818      	bhi.n	8005b10 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
 8005ade:	2001      	movs	r0, #1
 8005ae0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005ae2:	f000 fbd9 	bl	8006298 <vPortExitCritical>
}
 8005ae6:	9801      	ldr	r0, [sp, #4]
 8005ae8:	b003      	add	sp, #12
 8005aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005afc:	e7fe      	b.n	8005afc <xTaskCheckForTimeOut+0x4c>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005b0e:	e7fe      	b.n	8005b0e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b10:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b14:	4573      	cmp	r3, lr
 8005b16:	d90b      	bls.n	8005b30 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
 8005b18:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b1a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b1e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8005b20:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8005b22:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8005b24:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b26:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8005b2a:	e7d9      	b.n	8005ae0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	e7d7      	b.n	8005ae0 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8005b30:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8005b32:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8005b34:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8005b36:	e7d3      	b.n	8005ae0 <xTaskCheckForTimeOut+0x30>
 8005b38:	2400214c 	.word	0x2400214c
 8005b3c:	24002104 	.word	0x24002104

08005b40 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005b40:	4b01      	ldr	r3, [pc, #4]	; (8005b48 <vTaskMissedYield+0x8>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	601a      	str	r2, [r3, #0]
}
 8005b46:	4770      	bx	lr
 8005b48:	24002150 	.word	0x24002150

08005b4c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005b4c:	4b01      	ldr	r3, [pc, #4]	; (8005b54 <xTaskGetCurrentTaskHandle+0x8>)
 8005b4e:	6818      	ldr	r0, [r3, #0]
	}
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	24001c58 	.word	0x24001c58

08005b58 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <xTaskGetSchedulerState+0x18>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	b133      	cbz	r3, 8005b6c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b5e:	4b05      	ldr	r3, [pc, #20]	; (8005b74 <xTaskGetSchedulerState+0x1c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bf0c      	ite	eq
 8005b66:	2002      	moveq	r0, #2
 8005b68:	2000      	movne	r0, #0
 8005b6a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b6c:	2001      	movs	r0, #1
	}
 8005b6e:	4770      	bx	lr
 8005b70:	24002120 	.word	0x24002120
 8005b74:	240020cc 	.word	0x240020cc

08005b78 <xTaskPriorityInherit>:
	{
 8005b78:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8005b7a:	4604      	mov	r4, r0
	{
 8005b7c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8005b7e:	b1c8      	cbz	r0, 8005bb4 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b80:	4d1d      	ldr	r5, [pc, #116]	; (8005bf8 <xTaskPriorityInherit+0x80>)
 8005b82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b84:	682a      	ldr	r2, [r5, #0]
 8005b86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d215      	bcs.n	8005bb8 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b8c:	6982      	ldr	r2, [r0, #24]
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	db04      	blt.n	8005b9c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b92:	682a      	ldr	r2, [r5, #0]
 8005b94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b96:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005b9a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b9c:	4e17      	ldr	r6, [pc, #92]	; (8005bfc <xTaskPriorityInherit+0x84>)
 8005b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ba2:	6962      	ldr	r2, [r4, #20]
 8005ba4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d00e      	beq.n	8005bca <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bac:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8005bae:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbe:	4298      	cmp	r0, r3
 8005bc0:	bf2c      	ite	cs
 8005bc2:	2000      	movcs	r0, #0
 8005bc4:	2001      	movcc	r0, #1
	}
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bca:	1d21      	adds	r1, r4, #4
 8005bcc:	4608      	mov	r0, r1
 8005bce:	9101      	str	r1, [sp, #4]
 8005bd0:	f7fe fc90 	bl	80044f4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bd4:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bd8:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	9901      	ldr	r1, [sp, #4]
 8005bde:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005be0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005be2:	d900      	bls.n	8005be6 <xTaskPriorityInherit+0x6e>
 8005be4:	6018      	str	r0, [r3, #0]
 8005be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005bea:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8005bee:	f7fe fc59 	bl	80044a4 <vListInsertEnd>
				xReturn = pdTRUE;
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e7de      	b.n	8005bb4 <xTaskPriorityInherit+0x3c>
 8005bf6:	bf00      	nop
 8005bf8:	24001c58 	.word	0x24001c58
 8005bfc:	24001c64 	.word	0x24001c64
 8005c00:	240020d4 	.word	0x240020d4

08005c04 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005c04:	b318      	cbz	r0, 8005c4e <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <xTaskPriorityDisinherit+0x80>)
	{
 8005c08:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8005c0a:	681c      	ldr	r4, [r3, #0]
	{
 8005c0c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8005c0e:	4284      	cmp	r4, r0
 8005c10:	d008      	beq.n	8005c24 <xTaskPriorityDisinherit+0x20>
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	e7fe      	b.n	8005c22 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005c26:	b14b      	cbz	r3, 8005c3c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005c2a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c2c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005c2e:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c30:	4291      	cmp	r1, r2
 8005c32:	d000      	beq.n	8005c36 <xTaskPriorityDisinherit+0x32>
 8005c34:	b16b      	cbz	r3, 8005c52 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8005c36:	2000      	movs	r0, #0
	}
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd10      	pop	{r4, pc}
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005c4c:	e7fe      	b.n	8005c4c <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8005c4e:	2000      	movs	r0, #0
	}
 8005c50:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c52:	1d21      	adds	r1, r4, #4
 8005c54:	4608      	mov	r0, r1
 8005c56:	9101      	str	r1, [sp, #4]
 8005c58:	f7fe fc4c 	bl	80044f4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c5c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c60:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 8005c64:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c66:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c68:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4290      	cmp	r0, r2
 8005c6e:	d900      	bls.n	8005c72 <xTaskPriorityDisinherit+0x6e>
 8005c70:	6018      	str	r0, [r3, #0]
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <xTaskPriorityDisinherit+0x88>)
 8005c74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005c7c:	f7fe fc12 	bl	80044a4 <vListInsertEnd>
					xReturn = pdTRUE;
 8005c80:	2001      	movs	r0, #1
		return xReturn;
 8005c82:	e7d9      	b.n	8005c38 <xTaskPriorityDisinherit+0x34>
 8005c84:	24001c58 	.word	0x24001c58
 8005c88:	240020d4 	.word	0x240020d4
 8005c8c:	24001c64 	.word	0x24001c64

08005c90 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005c90:	2800      	cmp	r0, #0
 8005c92:	d040      	beq.n	8005d16 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c94:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 8005c96:	b530      	push	{r4, r5, lr}
 8005c98:	4604      	mov	r4, r0
 8005c9a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8005c9c:	b153      	cbz	r3, 8005cb4 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c9e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ca2:	4281      	cmp	r1, r0
 8005ca4:	bf38      	it	cc
 8005ca6:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8005cac:	428a      	cmp	r2, r1
 8005cae:	d10a      	bne.n	8005cc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8005cb0:	b003      	add	sp, #12
 8005cb2:	bd30      	pop	{r4, r5, pc}
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8005cc4:	e7fe      	b.n	8005cc4 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8005cc6:	4b19      	ldr	r3, [pc, #100]	; (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	42a3      	cmp	r3, r4
 8005ccc:	d024      	beq.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cce:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8005cd0:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	db02      	blt.n	8005cdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 8005cda:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cdc:	4d14      	ldr	r5, [pc, #80]	; (8005d30 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 8005cde:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005ce2:	6961      	ldr	r1, [r4, #20]
 8005ce4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8005ce8:	4299      	cmp	r1, r3
 8005cea:	d1e1      	bne.n	8005cb0 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cec:	1d21      	adds	r1, r4, #4
 8005cee:	4608      	mov	r0, r1
 8005cf0:	9101      	str	r1, [sp, #4]
 8005cf2:	f7fe fbff 	bl	80044f4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005cf6:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8005cf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	9901      	ldr	r1, [sp, #4]
 8005cfe:	4290      	cmp	r0, r2
 8005d00:	d900      	bls.n	8005d04 <vTaskPriorityDisinheritAfterTimeout+0x74>
 8005d02:	6018      	str	r0, [r3, #0]
 8005d04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d08:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8005d0c:	b003      	add	sp, #12
 8005d0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8005d12:	f7fe bbc7 	b.w	80044a4 <vListInsertEnd>
 8005d16:	4770      	bx	lr
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005d28:	e7fe      	b.n	8005d28 <vTaskPriorityDisinheritAfterTimeout+0x98>
 8005d2a:	bf00      	nop
 8005d2c:	24001c58 	.word	0x24001c58
 8005d30:	24001c64 	.word	0x24001c64
 8005d34:	240020d4 	.word	0x240020d4

08005d38 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <pvTaskIncrementMutexHeldCount+0x14>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	b11a      	cbz	r2, 8005d46 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d3e:	6819      	ldr	r1, [r3, #0]
 8005d40:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005d42:	3201      	adds	r2, #1
 8005d44:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8005d46:	6818      	ldr	r0, [r3, #0]
	}
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	24001c58 	.word	0x24001c58

08005d50 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8005d52:	4c12      	ldr	r4, [pc, #72]	; (8005d9c <prvCheckForValidListAndQueue+0x4c>)
{
 8005d54:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8005d56:	f000 fa7d 	bl	8006254 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	b125      	cbz	r5, 8005d68 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8005d5e:	b003      	add	sp, #12
 8005d60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8005d64:	f000 ba98 	b.w	8006298 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8005d68:	4f0d      	ldr	r7, [pc, #52]	; (8005da0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8005d6a:	4e0e      	ldr	r6, [pc, #56]	; (8005da4 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8005d6c:	4638      	mov	r0, r7
 8005d6e:	f7fe fb89 	bl	8004484 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d72:	4630      	mov	r0, r6
 8005d74:	f7fe fb86 	bl	8004484 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d78:	4a0b      	ldr	r2, [pc, #44]	; (8005da8 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d7a:	9500      	str	r5, [sp, #0]
 8005d7c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8005d7e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d80:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8005d82:	4a0a      	ldr	r2, [pc, #40]	; (8005dac <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8005d86:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d88:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <prvCheckForValidListAndQueue+0x64>)
 8005d8a:	f7fe fc95 	bl	80046b8 <xQueueGenericCreateStatic>
 8005d8e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d0e4      	beq.n	8005d5e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d94:	4908      	ldr	r1, [pc, #32]	; (8005db8 <prvCheckForValidListAndQueue+0x68>)
 8005d96:	f7ff f98d 	bl	80050b4 <vQueueAddToRegistry>
 8005d9a:	e7e0      	b.n	8005d5e <prvCheckForValidListAndQueue+0xe>
 8005d9c:	24002278 	.word	0x24002278
 8005da0:	240021fc 	.word	0x240021fc
 8005da4:	24002210 	.word	0x24002210
 8005da8:	24002154 	.word	0x24002154
 8005dac:	24002158 	.word	0x24002158
 8005db0:	24002228 	.word	0x24002228
 8005db4:	2400215c 	.word	0x2400215c
 8005db8:	0800f940 	.word	0x0800f940

08005dbc <xTimerCreateTimerTask>:
{
 8005dbc:	b530      	push	{r4, r5, lr}
 8005dbe:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8005dc0:	f7ff ffc6 	bl	8005d50 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005dc4:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <xTimerCreateTimerTask+0x54>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	b1cb      	cbz	r3, 8005dfe <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dca:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dcc:	aa07      	add	r2, sp, #28
 8005dce:	a906      	add	r1, sp, #24
 8005dd0:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005dd2:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dd4:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005dd8:	f7fe fb44 	bl	8004464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ddc:	4623      	mov	r3, r4
 8005dde:	9a07      	ldr	r2, [sp, #28]
 8005de0:	9500      	str	r5, [sp, #0]
 8005de2:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8005de6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8005dea:	490a      	ldr	r1, [pc, #40]	; (8005e14 <xTimerCreateTimerTask+0x58>)
 8005dec:	480a      	ldr	r0, [pc, #40]	; (8005e18 <xTimerCreateTimerTask+0x5c>)
 8005dee:	f7ff fca1 	bl	8005734 <xTaskCreateStatic>
 8005df2:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <xTimerCreateTimerTask+0x60>)
 8005df4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8005df6:	b110      	cbz	r0, 8005dfe <xTimerCreateTimerTask+0x42>
}
 8005df8:	2001      	movs	r0, #1
 8005dfa:	b009      	add	sp, #36	; 0x24
 8005dfc:	bd30      	pop	{r4, r5, pc}
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005e0e:	e7fe      	b.n	8005e0e <xTimerCreateTimerTask+0x52>
 8005e10:	24002278 	.word	0x24002278
 8005e14:	0800f948 	.word	0x0800f948
 8005e18:	08005f11 	.word	0x08005f11
 8005e1c:	2400227c 	.word	0x2400227c

08005e20 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005e20:	b1c8      	cbz	r0, 8005e56 <xTimerGenericCommand+0x36>
{
 8005e22:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8005e24:	4d18      	ldr	r5, [pc, #96]	; (8005e88 <xTimerGenericCommand+0x68>)
{
 8005e26:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8005e28:	682c      	ldr	r4, [r5, #0]
 8005e2a:	b18c      	cbz	r4, 8005e50 <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e2c:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005e2e:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8005e30:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005e34:	dc18      	bgt.n	8005e68 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e36:	f7ff fe8f 	bl	8005b58 <xTaskGetSchedulerState>
 8005e3a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e3c:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005e40:	d01b      	beq.n	8005e7a <xTimerGenericCommand+0x5a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e42:	4669      	mov	r1, sp
 8005e44:	461a      	mov	r2, r3
 8005e46:	6828      	ldr	r0, [r5, #0]
 8005e48:	f7fe fcf2 	bl	8004830 <xQueueGenericSend>
}
 8005e4c:	b005      	add	sp, #20
 8005e4e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8005e50:	4620      	mov	r0, r4
}
 8005e52:	b005      	add	sp, #20
 8005e54:	bd30      	pop	{r4, r5, pc}
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 8005e66:	e7fe      	b.n	8005e66 <xTimerGenericCommand+0x46>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e68:	469c      	mov	ip, r3
 8005e6a:	4669      	mov	r1, sp
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4662      	mov	r2, ip
 8005e72:	f7fe fe15 	bl	8004aa0 <xQueueGenericSendFromISR>
}
 8005e76:	b005      	add	sp, #20
 8005e78:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e7a:	9a08      	ldr	r2, [sp, #32]
 8005e7c:	4669      	mov	r1, sp
 8005e7e:	6828      	ldr	r0, [r5, #0]
 8005e80:	f7fe fcd6 	bl	8004830 <xQueueGenericSend>
 8005e84:	e7e5      	b.n	8005e52 <xTimerGenericCommand+0x32>
 8005e86:	bf00      	nop
 8005e88:	24002278 	.word	0x24002278

08005e8c <prvSwitchTimerLists>:
{
 8005e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e90:	4e1d      	ldr	r6, [pc, #116]	; (8005f08 <prvSwitchTimerLists+0x7c>)
 8005e92:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e94:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e98:	e00d      	b.n	8005eb6 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e9c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e9e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ea0:	1d25      	adds	r5, r4, #4
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7fe fb26 	bl	80044f4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ea8:	6a23      	ldr	r3, [r4, #32]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005eae:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005eb2:	075b      	lsls	r3, r3, #29
 8005eb4:	d40a      	bmi.n	8005ecc <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eb6:	6833      	ldr	r3, [r6, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	2a00      	cmp	r2, #0
 8005ebc:	d1ed      	bne.n	8005e9a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <prvSwitchTimerLists+0x80>)
 8005ec0:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ec2:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ec4:	6031      	str	r1, [r6, #0]
}
 8005ec6:	b002      	add	sp, #8
 8005ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ecc:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ece:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ed4:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ed6:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8005ed8:	42af      	cmp	r7, r5
 8005eda:	d205      	bcs.n	8005ee8 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005edc:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ede:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ee0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ee2:	f7fe faef 	bl	80044c4 <vListInsert>
 8005ee6:	e7e6      	b.n	8005eb6 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ee8:	4619      	mov	r1, r3
 8005eea:	f8cd 8000 	str.w	r8, [sp]
 8005eee:	f7ff ff97 	bl	8005e20 <xTimerGenericCommand>
				configASSERT( xResult );
 8005ef2:	2800      	cmp	r0, #0
 8005ef4:	d1df      	bne.n	8005eb6 <prvSwitchTimerLists+0x2a>
 8005ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	e7fe      	b.n	8005f06 <prvSwitchTimerLists+0x7a>
 8005f08:	24002154 	.word	0x24002154
 8005f0c:	24002158 	.word	0x24002158

08005f10 <prvTimerTask>:
{
 8005f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f14:	4e96      	ldr	r6, [pc, #600]	; (8006170 <prvTimerTask+0x260>)
 8005f16:	b087      	sub	sp, #28
 8005f18:	4d96      	ldr	r5, [pc, #600]	; (8006174 <prvTimerTask+0x264>)
					portYIELD_WITHIN_API();
 8005f1a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8005f1e:	4c96      	ldr	r4, [pc, #600]	; (8006178 <prvTimerTask+0x268>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	681f      	ldr	r7, [r3, #0]
 8005f24:	2f00      	cmp	r7, #0
 8005f26:	f000 80a9 	beq.w	800607c <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8005f2e:	f7ff fced 	bl	800590c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8005f32:	f7ff fd03 	bl	800593c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005f36:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8005f38:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8005f3a:	4290      	cmp	r0, r2
 8005f3c:	f0c0 80a6 	bcc.w	800608c <prvTimerTask+0x17c>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f40:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8005f42:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f44:	f200 80c7 	bhi.w	80060d6 <prvTimerTask+0x1c6>
				( void ) xTaskResumeAll();
 8005f48:	f7ff fce8 	bl	800591c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4c:	6832      	ldr	r2, [r6, #0]
 8005f4e:	68d2      	ldr	r2, [r2, #12]
 8005f50:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f54:	f10b 0804 	add.w	r8, fp, #4
 8005f58:	4640      	mov	r0, r8
 8005f5a:	f7fe facb 	bl	80044f4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f5e:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8005f62:	0743      	lsls	r3, r0, #29
 8005f64:	f100 80c6 	bmi.w	80060f4 <prvTimerTask+0x1e4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f68:	f020 0001 	bic.w	r0, r0, #1
 8005f6c:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f70:	f8db 3020 	ldr.w	r3, [fp, #32]
 8005f74:	4658      	mov	r0, fp
 8005f76:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f78:	2200      	movs	r2, #0
 8005f7a:	a902      	add	r1, sp, #8
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	f7fe fe51 	bl	8004c24 <xQueueReceive>
 8005f82:	2800      	cmp	r0, #0
 8005f84:	d0cc      	beq.n	8005f20 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f86:	9b02      	ldr	r3, [sp, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	db6e      	blt.n	800606a <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f8c:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	b113      	cbz	r3, 8005f98 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f92:	1d38      	adds	r0, r7, #4
 8005f94:	f7fe faae 	bl	80044f4 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8005f98:	f7ff fcd0 	bl	800593c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8005f9c:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8005f9e:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8005fa0:	4298      	cmp	r0, r3
 8005fa2:	d37a      	bcc.n	800609a <prvTimerTask+0x18a>
			switch( xMessage.xMessageID )
 8005fa4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8005fa6:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8005faa:	2b09      	cmp	r3, #9
 8005fac:	d8e4      	bhi.n	8005f78 <prvTimerTask+0x68>
 8005fae:	e8df f003 	tbb	[pc, r3]
 8005fb2:	0505      	.short	0x0505
 8005fb4:	53364c05 	.word	0x53364c05
 8005fb8:	364c0505 	.word	0x364c0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fbc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fc0:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fc6:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fc8:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005fca:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fce:	185a      	adds	r2, r3, r1
 8005fd0:	bf2c      	ite	cs
 8005fd2:	2001      	movcs	r0, #1
 8005fd4:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8005fd6:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fd8:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8005fda:	d87e      	bhi.n	80060da <prvTimerTask+0x1ca>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	eba8 0303 	sub.w	r3, r8, r3
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	f200 80b0 	bhi.w	8006146 <prvTimerTask+0x236>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
 8005fe8:	4638      	mov	r0, r7
 8005fea:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ff0:	0759      	lsls	r1, r3, #29
 8005ff2:	d5c1      	bpl.n	8005f78 <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	9200      	str	r2, [sp, #0]
 8005ffc:	9a03      	ldr	r2, [sp, #12]
 8005ffe:	441a      	add	r2, r3
 8006000:	2300      	movs	r3, #0
 8006002:	4619      	mov	r1, r3
 8006004:	f7ff ff0c 	bl	8005e20 <xTimerGenericCommand>
							configASSERT( xResult );
 8006008:	2800      	cmp	r0, #0
 800600a:	d1b5      	bne.n	8005f78 <prvTimerTask+0x68>
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	e7fe      	b.n	800601c <prvTimerTask+0x10c>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800601e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006022:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006024:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006028:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800602a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 8095 	beq.w	800615e <prvTimerTask+0x24e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006034:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006036:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006038:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800603a:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800603c:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800603e:	d855      	bhi.n	80060ec <prvTimerTask+0x1dc>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006040:	4b4e      	ldr	r3, [pc, #312]	; (800617c <prvTimerTask+0x26c>)
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	f7fe fa3e 	bl	80044c4 <vListInsert>
	return xProcessTimerNow;
 8006048:	e796      	b.n	8005f78 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800604a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8006056:	e78f      	b.n	8005f78 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800605c:	079a      	lsls	r2, r3, #30
 800605e:	d569      	bpl.n	8006134 <prvTimerTask+0x224>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006060:	f023 0301 	bic.w	r3, r3, #1
 8006064:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006068:	e786      	b.n	8005f78 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006070:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	f6ff af7f 	blt.w	8005f78 <prvTimerTask+0x68>
 800607a:	e787      	b.n	8005f8c <prvTimerTask+0x7c>
	vTaskSuspendAll();
 800607c:	f7ff fc46 	bl	800590c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006080:	f7ff fc5c 	bl	800593c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006084:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8006086:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006088:	4282      	cmp	r2, r0
 800608a:	d909      	bls.n	80060a0 <prvTimerTask+0x190>
		prvSwitchTimerLists();
 800608c:	f7ff fefe 	bl	8005e8c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006090:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8006094:	f7ff fc42 	bl	800591c <xTaskResumeAll>
 8006098:	e76e      	b.n	8005f78 <prvTimerTask+0x68>
		prvSwitchTimerLists();
 800609a:	f7ff fef7 	bl	8005e8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800609e:	e781      	b.n	8005fa4 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060a0:	4b36      	ldr	r3, [pc, #216]	; (800617c <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 80060a2:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	6812      	ldr	r2, [r2, #0]
 80060aa:	fab2 f282 	clz	r2, r2
 80060ae:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060b0:	eba7 010a 	sub.w	r1, r7, sl
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	f7ff f813 	bl	80050e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060ba:	f7ff fc2f 	bl	800591c <xTaskResumeAll>
 80060be:	2800      	cmp	r0, #0
 80060c0:	f47f af5a 	bne.w	8005f78 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80060c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060c8:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	e750      	b.n	8005f78 <prvTimerTask+0x68>
 80060d6:	2200      	movs	r2, #0
 80060d8:	e7ea      	b.n	80060b0 <prvTimerTask+0x1a0>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80060da:	4543      	cmp	r3, r8
 80060dc:	d901      	bls.n	80060e2 <prvTimerTask+0x1d2>
 80060de:	2800      	cmp	r0, #0
 80060e0:	d081      	beq.n	8005fe6 <prvTimerTask+0xd6>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060e2:	1d39      	adds	r1, r7, #4
 80060e4:	6830      	ldr	r0, [r6, #0]
 80060e6:	f7fe f9ed 	bl	80044c4 <vListInsert>
	return xProcessTimerNow;
 80060ea:	e745      	b.n	8005f78 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80060ec:	6830      	ldr	r0, [r6, #0]
 80060ee:	f7fe f9e9 	bl	80044c4 <vListInsert>
 80060f2:	e741      	b.n	8005f78 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060f4:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80060f8:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060fc:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80060fe:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006100:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006104:	d31a      	bcc.n	800613c <prvTimerTask+0x22c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006106:	ebaa 0307 	sub.w	r3, sl, r7
 800610a:	429a      	cmp	r2, r3
 800610c:	d821      	bhi.n	8006152 <prvTimerTask+0x242>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800610e:	2300      	movs	r3, #0
 8006110:	463a      	mov	r2, r7
 8006112:	4658      	mov	r0, fp
 8006114:	4619      	mov	r1, r3
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	f7ff fe82 	bl	8005e20 <xTimerGenericCommand>
			configASSERT( xResult );
 800611c:	2800      	cmp	r0, #0
 800611e:	f47f af27 	bne.w	8005f70 <prvTimerTask+0x60>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	e7fe      	b.n	8006132 <prvTimerTask+0x222>
							vPortFree( pxTimer );
 8006134:	4638      	mov	r0, r7
 8006136:	f000 faa1 	bl	800667c <vPortFree>
 800613a:	e71d      	b.n	8005f78 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800613c:	4641      	mov	r1, r8
 800613e:	6830      	ldr	r0, [r6, #0]
 8006140:	f7fe f9c0 	bl	80044c4 <vListInsert>
	return xProcessTimerNow;
 8006144:	e714      	b.n	8005f70 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006146:	4b0d      	ldr	r3, [pc, #52]	; (800617c <prvTimerTask+0x26c>)
 8006148:	1d39      	adds	r1, r7, #4
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	f7fe f9ba 	bl	80044c4 <vListInsert>
	return xProcessTimerNow;
 8006150:	e712      	b.n	8005f78 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <prvTimerTask+0x26c>)
 8006154:	4641      	mov	r1, r8
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	f7fe f9b4 	bl	80044c4 <vListInsert>
	return xProcessTimerNow;
 800615c:	e708      	b.n	8005f70 <prvTimerTask+0x60>
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800616e:	e7fe      	b.n	800616e <prvTimerTask+0x25e>
 8006170:	24002154 	.word	0x24002154
 8006174:	24002224 	.word	0x24002224
 8006178:	24002278 	.word	0x24002278
 800617c:	24002158 	.word	0x24002158

08006180 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006180:	4808      	ldr	r0, [pc, #32]	; (80061a4 <prvPortStartFirstTask+0x24>)
 8006182:	6800      	ldr	r0, [r0, #0]
 8006184:	6800      	ldr	r0, [r0, #0]
 8006186:	f380 8808 	msr	MSP, r0
 800618a:	f04f 0000 	mov.w	r0, #0
 800618e:	f380 8814 	msr	CONTROL, r0
 8006192:	b662      	cpsie	i
 8006194:	b661      	cpsie	f
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	df00      	svc	0
 80061a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061a2:	0000      	.short	0x0000
 80061a4:	e000ed08 	.word	0xe000ed08

080061a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061b8 <vPortEnableVFP+0x10>
 80061ac:	6801      	ldr	r1, [r0, #0]
 80061ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061b2:	6001      	str	r1, [r0, #0]
 80061b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061b6:	0000      	.short	0x0000
 80061b8:	e000ed88 	.word	0xe000ed88

080061bc <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80061bc:	4b0e      	ldr	r3, [pc, #56]	; (80061f8 <prvTaskExitError+0x3c>)
{
 80061be:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80061c0:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80061c2:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80061c4:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80061c6:	3301      	adds	r3, #1
 80061c8:	d008      	beq.n	80061dc <prvTaskExitError+0x20>
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	e7fe      	b.n	80061da <prvTaskExitError+0x1e>
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0fc      	beq.n	80061ec <prvTaskExitError+0x30>
}
 80061f2:	b002      	add	sp, #8
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	24000024 	.word	0x24000024

080061fc <pxPortInitialiseStack>:
{
 80061fc:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061fe:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006202:	4809      	ldr	r0, [pc, #36]	; (8006228 <pxPortInitialiseStack+0x2c>)
{
 8006204:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006206:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800620a:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800620e:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8006212:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006216:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800621a:	f06f 0102 	mvn.w	r1, #2
}
 800621e:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006222:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8006226:	4770      	bx	lr
 8006228:	080061bd 	.word	0x080061bd
 800622c:	00000000 	.word	0x00000000

08006230 <SVC_Handler>:
	__asm volatile (
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <pxCurrentTCBConst2>)
 8006232:	6819      	ldr	r1, [r3, #0]
 8006234:	6808      	ldr	r0, [r1, #0]
 8006236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623a:	f380 8809 	msr	PSP, r0
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f04f 0000 	mov.w	r0, #0
 8006246:	f380 8811 	msr	BASEPRI, r0
 800624a:	4770      	bx	lr
 800624c:	f3af 8000 	nop.w

08006250 <pxCurrentTCBConst2>:
 8006250:	24001c58 	.word	0x24001c58

08006254 <vPortEnterCritical>:
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006264:	4a0b      	ldr	r2, [pc, #44]	; (8006294 <vPortEnterCritical+0x40>)
 8006266:	6813      	ldr	r3, [r2, #0]
 8006268:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800626a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800626c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800626e:	d000      	beq.n	8006272 <vPortEnterCritical+0x1e>
}
 8006270:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006272:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006276:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f7      	beq.n	8006270 <vPortEnterCritical+0x1c>
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	e7fe      	b.n	8006290 <vPortEnterCritical+0x3c>
 8006292:	bf00      	nop
 8006294:	24000024 	.word	0x24000024

08006298 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006298:	4a08      	ldr	r2, [pc, #32]	; (80062bc <vPortExitCritical+0x24>)
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	b943      	cbnz	r3, 80062b0 <vPortExitCritical+0x18>
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	e7fe      	b.n	80062ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80062b0:	3b01      	subs	r3, #1
 80062b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062b4:	b90b      	cbnz	r3, 80062ba <vPortExitCritical+0x22>
	__asm volatile
 80062b6:	f383 8811 	msr	BASEPRI, r3
}
 80062ba:	4770      	bx	lr
 80062bc:	24000024 	.word	0x24000024

080062c0 <PendSV_Handler>:
	__asm volatile
 80062c0:	f3ef 8009 	mrs	r0, PSP
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	4b15      	ldr	r3, [pc, #84]	; (8006320 <pxCurrentTCBConst>)
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f01e 0f10 	tst.w	lr, #16
 80062d0:	bf08      	it	eq
 80062d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062da:	6010      	str	r0, [r2, #0]
 80062dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062e4:	f380 8811 	msr	BASEPRI, r0
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f7ff fb42 	bl	8005978 <vTaskSwitchContext>
 80062f4:	f04f 0000 	mov.w	r0, #0
 80062f8:	f380 8811 	msr	BASEPRI, r0
 80062fc:	bc09      	pop	{r0, r3}
 80062fe:	6819      	ldr	r1, [r3, #0]
 8006300:	6808      	ldr	r0, [r1, #0]
 8006302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006306:	f01e 0f10 	tst.w	lr, #16
 800630a:	bf08      	it	eq
 800630c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006310:	f380 8809 	msr	PSP, r0
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	f3af 8000 	nop.w

08006320 <pxCurrentTCBConst>:
 8006320:	24001c58 	.word	0x24001c58

08006324 <xPortSysTickHandler>:
{
 8006324:	b508      	push	{r3, lr}
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006336:	f7ff fb0f 	bl	8005958 <xTaskIncrementTick>
 800633a:	b128      	cbz	r0, 8006348 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006344:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006348:	2300      	movs	r3, #0
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bd08      	pop	{r3, pc}

08006350 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006350:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006354:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006358:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800635a:	4806      	ldr	r0, [pc, #24]	; (8006374 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800635c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800635e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	fba0 0303 	umull	r0, r3, r0, r3
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	3b01      	subs	r3, #1
 800636a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800636c:	6111      	str	r1, [r2, #16]
}
 800636e:	4770      	bx	lr
 8006370:	24000000 	.word	0x24000000
 8006374:	10624dd3 	.word	0x10624dd3

08006378 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006378:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800637c:	4a3d      	ldr	r2, [pc, #244]	; (8006474 <xPortStartScheduler+0xfc>)
 800637e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8006382:	4291      	cmp	r1, r2
 8006384:	d041      	beq.n	800640a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006386:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800638a:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <xPortStartScheduler+0x100>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d033      	beq.n	80063f8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006390:	4b3a      	ldr	r3, [pc, #232]	; (800647c <xPortStartScheduler+0x104>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006392:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006396:	483a      	ldr	r0, [pc, #232]	; (8006480 <xPortStartScheduler+0x108>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006398:	493a      	ldr	r1, [pc, #232]	; (8006484 <xPortStartScheduler+0x10c>)
{
 800639a:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800639c:	781a      	ldrb	r2, [r3, #0]
{
 800639e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063a4:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063a6:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063aa:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ac:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063b4:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c0:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063c2:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063c4:	d50f      	bpl.n	80063e6 <xPortStartScheduler+0x6e>
 80063c6:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063cc:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ce:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063d8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063dc:	061b      	lsls	r3, r3, #24
 80063de:	d4f3      	bmi.n	80063c8 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063e0:	2903      	cmp	r1, #3
 80063e2:	d01b      	beq.n	800641c <xPortStartScheduler+0xa4>
 80063e4:	6001      	str	r1, [r0, #0]
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	e7fe      	b.n	80063f6 <xPortStartScheduler+0x7e>
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006408:	e7fe      	b.n	8006408 <xPortStartScheduler+0x90>
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800641a:	e7fe      	b.n	800641a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800641c:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800641e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006422:	4a16      	ldr	r2, [pc, #88]	; (800647c <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006424:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006428:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 800642a:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800642c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800642e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006430:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006438:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800643c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006440:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006444:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006448:	f7ff ff82 	bl	8006350 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800644c:	4b0e      	ldr	r3, [pc, #56]	; (8006488 <xPortStartScheduler+0x110>)
 800644e:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006450:	f7ff feaa 	bl	80061a8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006454:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006458:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800645c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006460:	f7ff fe8e 	bl	8006180 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006464:	f7ff fa88 	bl	8005978 <vTaskSwitchContext>
}
 8006468:	4628      	mov	r0, r5
	prvTaskExitError();
 800646a:	f7ff fea7 	bl	80061bc <prvTaskExitError>
}
 800646e:	b003      	add	sp, #12
 8006470:	bd30      	pop	{r4, r5, pc}
 8006472:	bf00      	nop
 8006474:	410fc271 	.word	0x410fc271
 8006478:	410fc270 	.word	0x410fc270
 800647c:	e000e400 	.word	0xe000e400
 8006480:	24002284 	.word	0x24002284
 8006484:	24002280 	.word	0x24002280
 8006488:	24000024 	.word	0x24000024

0800648c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800648c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006490:	2b0f      	cmp	r3, #15
 8006492:	d90e      	bls.n	80064b2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006494:	4911      	ldr	r1, [pc, #68]	; (80064dc <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006496:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006498:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800649a:	7812      	ldrb	r2, [r2, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d908      	bls.n	80064b2 <vPortValidateInterruptPriority+0x26>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	e7fe      	b.n	80064b0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80064b6:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <vPortValidateInterruptPriority+0x58>)
 80064b8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 80064bc:	6812      	ldr	r2, [r2, #0]
 80064be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d908      	bls.n	80064d8 <vPortValidateInterruptPriority+0x4c>
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	e7fe      	b.n	80064d6 <vPortValidateInterruptPriority+0x4a>
	}
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	e000e3f0 	.word	0xe000e3f0
 80064e0:	24002280 	.word	0x24002280
 80064e4:	24002284 	.word	0x24002284

080064e8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064e8:	4b16      	ldr	r3, [pc, #88]	; (8006544 <prvInsertBlockIntoFreeList+0x5c>)
{
 80064ea:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064ec:	461a      	mov	r2, r3
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4283      	cmp	r3, r0
 80064f2:	d3fb      	bcc.n	80064ec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064f4:	6851      	ldr	r1, [r2, #4]
 80064f6:	eb02 0c01 	add.w	ip, r2, r1
 80064fa:	4560      	cmp	r0, ip
 80064fc:	d00b      	beq.n	8006516 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064fe:	6841      	ldr	r1, [r0, #4]
 8006500:	eb00 0c01 	add.w	ip, r0, r1
 8006504:	4563      	cmp	r3, ip
 8006506:	d00e      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006508:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800650a:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650c:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006510:	bf18      	it	ne
 8006512:	6010      	strne	r0, [r2, #0]
}
 8006514:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006516:	6844      	ldr	r4, [r0, #4]
 8006518:	4610      	mov	r0, r2
 800651a:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800651c:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006520:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006522:	4563      	cmp	r3, ip
 8006524:	d1f0      	bne.n	8006508 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006526:	4c08      	ldr	r4, [pc, #32]	; (8006548 <prvInsertBlockIntoFreeList+0x60>)
 8006528:	6824      	ldr	r4, [r4, #0]
 800652a:	42a3      	cmp	r3, r4
 800652c:	d0ec      	beq.n	8006508 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 800652e:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006530:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006534:	4421      	add	r1, r4
}
 8006536:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800653a:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800653e:	bf18      	it	ne
 8006540:	6010      	strne	r0, [r2, #0]
}
 8006542:	4770      	bx	lr
 8006544:	24009aa0 	.word	0x24009aa0
 8006548:	24002288 	.word	0x24002288

0800654c <pvPortMalloc>:
{
 800654c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8006550:	4d43      	ldr	r5, [pc, #268]	; (8006660 <pvPortMalloc+0x114>)
{
 8006552:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006554:	f7ff f9da 	bl	800590c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d05a      	beq.n	8006614 <pvPortMalloc+0xc8>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800655e:	4b41      	ldr	r3, [pc, #260]	; (8006664 <pvPortMalloc+0x118>)
 8006560:	681e      	ldr	r6, [r3, #0]
			if( xWantedSize > 0 )
 8006562:	4234      	tst	r4, r6
 8006564:	d12e      	bne.n	80065c4 <pvPortMalloc+0x78>
 8006566:	b36c      	cbz	r4, 80065c4 <pvPortMalloc+0x78>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006568:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 800656a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800656e:	d002      	beq.n	8006576 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006570:	f021 0107 	bic.w	r1, r1, #7
 8006574:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006576:	b329      	cbz	r1, 80065c4 <pvPortMalloc+0x78>
 8006578:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8006678 <pvPortMalloc+0x12c>
 800657c:	f8d8 7000 	ldr.w	r7, [r8]
 8006580:	428f      	cmp	r7, r1
 8006582:	d31f      	bcc.n	80065c4 <pvPortMalloc+0x78>
				pxBlock = xStart.pxNextFreeBlock;
 8006584:	4838      	ldr	r0, [pc, #224]	; (8006668 <pvPortMalloc+0x11c>)
 8006586:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006588:	e003      	b.n	8006592 <pvPortMalloc+0x46>
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	b123      	cbz	r3, 8006598 <pvPortMalloc+0x4c>
 800658e:	4620      	mov	r0, r4
 8006590:	461c      	mov	r4, r3
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	428a      	cmp	r2, r1
 8006596:	d3f8      	bcc.n	800658a <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	42a3      	cmp	r3, r4
 800659c:	d012      	beq.n	80065c4 <pvPortMalloc+0x78>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800659e:	6823      	ldr	r3, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a0:	6805      	ldr	r5, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065a2:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065a4:	1a53      	subs	r3, r2, r1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a6:	3508      	adds	r5, #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d916      	bls.n	80065da <pvPortMalloc+0x8e>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ac:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ae:	0742      	lsls	r2, r0, #29
 80065b0:	d00e      	beq.n	80065d0 <pvPortMalloc+0x84>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	e7fe      	b.n	80065c2 <pvPortMalloc+0x76>
	( void ) xTaskResumeAll();
 80065c4:	2500      	movs	r5, #0
 80065c6:	f7ff f9a9 	bl	800591c <xTaskResumeAll>
}
 80065ca:	4628      	mov	r0, r5
 80065cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065d0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d2:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d4:	f7ff ff88 	bl	80064e8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d8:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065da:	4924      	ldr	r1, [pc, #144]	; (800666c <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065dc:	1abf      	subs	r7, r7, r2
					pxBlock->pxNextFreeBlock = NULL;
 80065de:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065e0:	4332      	orrs	r2, r6
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e2:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065e4:	f8c8 7000 	str.w	r7, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e8:	4287      	cmp	r7, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ea:	bf38      	it	cc
 80065ec:	600f      	strcc	r7, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 80065ee:	4920      	ldr	r1, [pc, #128]	; (8006670 <pvPortMalloc+0x124>)
					pxBlock->pxNextFreeBlock = NULL;
 80065f0:	e9c4 3200 	strd	r3, r2, [r4]
					xNumberOfSuccessfulAllocations++;
 80065f4:	680b      	ldr	r3, [r1, #0]
 80065f6:	3301      	adds	r3, #1
 80065f8:	600b      	str	r3, [r1, #0]
	( void ) xTaskResumeAll();
 80065fa:	f7ff f98f 	bl	800591c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065fe:	076b      	lsls	r3, r5, #29
 8006600:	d0e3      	beq.n	80065ca <pvPortMalloc+0x7e>
 8006602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006606:	f383 8811 	msr	BASEPRI, r3
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	e7fe      	b.n	8006612 <pvPortMalloc+0xc6>
	uxAddress = ( size_t ) ucHeap;
 8006614:	4b17      	ldr	r3, [pc, #92]	; (8006674 <pvPortMalloc+0x128>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006616:	075e      	lsls	r6, r3, #29
 8006618:	d11a      	bne.n	8006650 <pvPortMalloc+0x104>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800661a:	461a      	mov	r2, r3
 800661c:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8006620:	4611      	mov	r1, r2
	uxAddress -= xHeapStructSize;
 8006622:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8006624:	2000      	movs	r0, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006626:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800662a:	f023 0307 	bic.w	r3, r3, #7
}
 800662e:	463e      	mov	r6, r7
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006630:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8006632:	602b      	str	r3, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006634:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006638:	e9c1 3200 	strd	r3, r2, [r1]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <pvPortMalloc+0x11c>)
	xStart.xBlockSize = ( size_t ) 0;
 800663e:	e9c3 1000 	strd	r1, r0, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006642:	4b0a      	ldr	r3, [pc, #40]	; (800666c <pvPortMalloc+0x120>)
 8006644:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <pvPortMalloc+0x12c>)
 8006648:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <pvPortMalloc+0x118>)
 800664c:	601f      	str	r7, [r3, #0]
}
 800664e:	e788      	b.n	8006562 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006650:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006652:	f503 43f0 	add.w	r3, r3, #30720	; 0x7800
 8006656:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800665a:	4611      	mov	r1, r2
 800665c:	e7e1      	b.n	8006622 <pvPortMalloc+0xd6>
 800665e:	bf00      	nop
 8006660:	24002288 	.word	0x24002288
 8006664:	24009a8c 	.word	0x24009a8c
 8006668:	24009aa0 	.word	0x24009aa0
 800666c:	24009a94 	.word	0x24009a94
 8006670:	24009a98 	.word	0x24009a98
 8006674:	2400228c 	.word	0x2400228c
 8006678:	24009a90 	.word	0x24009a90

0800667c <vPortFree>:
	if( pv != NULL )
 800667c:	b1d0      	cbz	r0, 80066b4 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <vPortFree+0x74>)
 8006680:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	4213      	tst	r3, r2
 8006688:	d00b      	beq.n	80066a2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800668a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800668e:	b191      	cbz	r1, 80066b6 <vPortFree+0x3a>
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	e7fe      	b.n	80066a0 <vPortFree+0x24>
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b2:	e7fe      	b.n	80066b2 <vPortFree+0x36>
 80066b4:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066b6:	ea23 0302 	bic.w	r3, r3, r2
{
 80066ba:	b500      	push	{lr}
 80066bc:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066be:	f840 3c04 	str.w	r3, [r0, #-4]
 80066c2:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 80066c4:	f7ff f922 	bl	800590c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066c8:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <vPortFree+0x78>)
 80066ca:	9801      	ldr	r0, [sp, #4]
 80066cc:	6811      	ldr	r1, [r2, #0]
 80066ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066d2:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066d4:	440b      	add	r3, r1
 80066d6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066d8:	f7ff ff06 	bl	80064e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066dc:	4a06      	ldr	r2, [pc, #24]	; (80066f8 <vPortFree+0x7c>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	3301      	adds	r3, #1
 80066e2:	6013      	str	r3, [r2, #0]
}
 80066e4:	b003      	add	sp, #12
 80066e6:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 80066ea:	f7ff b917 	b.w	800591c <xTaskResumeAll>
 80066ee:	bf00      	nop
 80066f0:	24009a8c 	.word	0x24009a8c
 80066f4:	24009a90 	.word	0x24009a90
 80066f8:	24009a9c 	.word	0x24009a9c

080066fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();
 8006700:	f7fd fc12 	bl	8003f28 <sys_mark_tcpip_thread>

  LOCK_TCPIP_CORE();
 8006704:	f7fd fb56 	bl	8003db4 <sys_lock_tcpip_core>
  if (tcpip_init_done != NULL) {
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <tcpip_thread+0xc0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	b113      	cbz	r3, 8006714 <tcpip_thread+0x18>
    tcpip_init_done(tcpip_init_done_arg);
 800670e:	4a2c      	ldr	r2, [pc, #176]	; (80067c0 <tcpip_thread+0xc4>)
 8006710:	6810      	ldr	r0, [r2, #0]
 8006712:	4798      	blx	r3
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006714:	4d2b      	ldr	r5, [pc, #172]	; (80067c4 <tcpip_thread+0xc8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006716:	4f2c      	ldr	r7, [pc, #176]	; (80067c8 <tcpip_thread+0xcc>)
 8006718:	4e2c      	ldr	r6, [pc, #176]	; (80067cc <tcpip_thread+0xd0>)
 800671a:	e00e      	b.n	800673a <tcpip_thread+0x3e>
  } else if (sleeptime == 0) {
 800671c:	b158      	cbz	r0, 8006736 <tcpip_thread+0x3a>
  UNLOCK_TCPIP_CORE();
 800671e:	f7fd fbc7 	bl	8003eb0 <sys_unlock_tcpip_core>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006722:	4622      	mov	r2, r4
 8006724:	a901      	add	r1, sp, #4
 8006726:	4628      	mov	r0, r5
 8006728:	f007 fb28 	bl	800dd7c <sys_arch_mbox_fetch>
 800672c:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 800672e:	f7fd fb41 	bl	8003db4 <sys_lock_tcpip_core>
  if (res == SYS_ARCH_TIMEOUT) {
 8006732:	3401      	adds	r4, #1
 8006734:	d111      	bne.n	800675a <tcpip_thread+0x5e>
    sys_check_timeouts();
 8006736:	f005 fda1 	bl	800c27c <sys_check_timeouts>
  LWIP_ASSERT_CORE_LOCKED();
 800673a:	f7fd fbc3 	bl	8003ec4 <sys_check_core_locking>
  sleeptime = sys_timeouts_sleeptime();
 800673e:	f005 fdc7 	bl	800c2d0 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006742:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8006744:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8006746:	d1e9      	bne.n	800671c <tcpip_thread+0x20>
    UNLOCK_TCPIP_CORE();
 8006748:	f7fd fbb2 	bl	8003eb0 <sys_unlock_tcpip_core>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800674c:	2200      	movs	r2, #0
 800674e:	a901      	add	r1, sp, #4
 8006750:	4628      	mov	r0, r5
 8006752:	f007 fb13 	bl	800dd7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006756:	f7fd fb2d 	bl	8003db4 <sys_lock_tcpip_core>
    if (msg == NULL) {
 800675a:	9c01      	ldr	r4, [sp, #4]
 800675c:	b164      	cbz	r4, 8006778 <tcpip_thread+0x7c>
  switch (msg->type) {
 800675e:	7823      	ldrb	r3, [r4, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d01e      	beq.n	80067a2 <tcpip_thread+0xa6>
 8006764:	2b02      	cmp	r3, #2
 8006766:	d018      	beq.n	800679a <tcpip_thread+0x9e>
 8006768:	b16b      	cbz	r3, 8006786 <tcpip_thread+0x8a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800676a:	463b      	mov	r3, r7
 800676c:	22cf      	movs	r2, #207	; 0xcf
 800676e:	4631      	mov	r1, r6
 8006770:	4817      	ldr	r0, [pc, #92]	; (80067d0 <tcpip_thread+0xd4>)
 8006772:	f007 fd49 	bl	800e208 <iprintf>
      break;
 8006776:	e7e0      	b.n	800673a <tcpip_thread+0x3e>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006778:	463b      	mov	r3, r7
 800677a:	2291      	movs	r2, #145	; 0x91
 800677c:	4631      	mov	r1, r6
 800677e:	4814      	ldr	r0, [pc, #80]	; (80067d0 <tcpip_thread+0xd4>)
 8006780:	f007 fd42 	bl	800e208 <iprintf>
      continue;
 8006784:	e7d9      	b.n	800673a <tcpip_thread+0x3e>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006786:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	4798      	blx	r3
 800678e:	b980      	cbnz	r0, 80067b2 <tcpip_thread+0xb6>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006790:	4621      	mov	r1, r4
 8006792:	2009      	movs	r0, #9
 8006794:	f000 fcca 	bl	800712c <memp_free>
      break;
 8006798:	e7cf      	b.n	800673a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800679a:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 800679e:	4798      	blx	r3
      break;
 80067a0:	e7cb      	b.n	800673a <tcpip_thread+0x3e>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80067a2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80067a6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80067a8:	4621      	mov	r1, r4
 80067aa:	2008      	movs	r0, #8
 80067ac:	f000 fcbe 	bl	800712c <memp_free>
      break;
 80067b0:	e7c3      	b.n	800673a <tcpip_thread+0x3e>
        pbuf_free(msg->msg.inp.p);
 80067b2:	6860      	ldr	r0, [r4, #4]
 80067b4:	f001 f9ee 	bl	8007b94 <pbuf_free>
 80067b8:	e7ea      	b.n	8006790 <tcpip_thread+0x94>
 80067ba:	bf00      	nop
 80067bc:	24009aac 	.word	0x24009aac
 80067c0:	24009ab0 	.word	0x24009ab0
 80067c4:	24009ab4 	.word	0x24009ab4
 80067c8:	0800f950 	.word	0x0800f950
 80067cc:	0800f980 	.word	0x0800f980
 80067d0:	0800f0a0 	.word	0x0800f0a0

080067d4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80067d8:	4813      	ldr	r0, [pc, #76]	; (8006828 <tcpip_inpkt+0x54>)
{
 80067da:	460e      	mov	r6, r1
 80067dc:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80067de:	f007 faed 	bl	800ddbc <sys_mbox_valid>
 80067e2:	b178      	cbz	r0, 8006804 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80067e4:	2009      	movs	r0, #9
 80067e6:	f000 fc5b 	bl	80070a0 <memp_malloc>
  if (msg == NULL) {
 80067ea:	4604      	mov	r4, r0
 80067ec:	b1c0      	cbz	r0, 8006820 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80067ee:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80067f0:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80067f2:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80067f4:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80067f6:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80067f8:	480b      	ldr	r0, [pc, #44]	; (8006828 <tcpip_inpkt+0x54>)
  msg->msg.inp.input_fn = input_fn;
 80067fa:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80067fc:	f007 faae 	bl	800dd5c <sys_mbox_trypost>
 8006800:	b938      	cbnz	r0, 8006812 <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <tcpip_inpkt+0x58>)
 8006806:	22fc      	movs	r2, #252	; 0xfc
 8006808:	4909      	ldr	r1, [pc, #36]	; (8006830 <tcpip_inpkt+0x5c>)
 800680a:	480a      	ldr	r0, [pc, #40]	; (8006834 <tcpip_inpkt+0x60>)
 800680c:	f007 fcfc 	bl	800e208 <iprintf>
 8006810:	e7e8      	b.n	80067e4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006812:	4621      	mov	r1, r4
 8006814:	2009      	movs	r0, #9
 8006816:	f000 fc89 	bl	800712c <memp_free>
    return ERR_MEM;
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800681e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8006820:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006826:	bf00      	nop
 8006828:	24009ab4 	.word	0x24009ab4
 800682c:	0800f950 	.word	0x0800f950
 8006830:	0800f9a0 	.word	0x0800f9a0
 8006834:	0800f0a0 	.word	0x0800f0a0

08006838 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006838:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800683c:	f013 0f18 	tst.w	r3, #24
 8006840:	d002      	beq.n	8006848 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006842:	4a03      	ldr	r2, [pc, #12]	; (8006850 <tcpip_input+0x18>)
 8006844:	f7ff bfc6 	b.w	80067d4 <tcpip_inpkt>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8006848:	4a02      	ldr	r2, [pc, #8]	; (8006854 <tcpip_input+0x1c>)
 800684a:	f7ff bfc3 	b.w	80067d4 <tcpip_inpkt>
 800684e:	bf00      	nop
 8006850:	0800dc25 	.word	0x0800dc25
 8006854:	0800d059 	.word	0x0800d059

08006858 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4606      	mov	r6, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800685c:	4812      	ldr	r0, [pc, #72]	; (80068a8 <tcpip_try_callback+0x50>)
{
 800685e:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006860:	f007 faac 	bl	800ddbc <sys_mbox_valid>
 8006864:	b170      	cbz	r0, 8006884 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006866:	2008      	movs	r0, #8
 8006868:	f000 fc1a 	bl	80070a0 <memp_malloc>
  if (msg == NULL) {
 800686c:	4604      	mov	r4, r0
 800686e:	b1c0      	cbz	r0, 80068a2 <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006870:	2301      	movs	r3, #1
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006872:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8006874:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006878:	480b      	ldr	r0, [pc, #44]	; (80068a8 <tcpip_try_callback+0x50>)
  msg->type = TCPIP_MSG_CALLBACK;
 800687a:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800687c:	f007 fa6e 	bl	800dd5c <sys_mbox_trypost>
 8006880:	b940      	cbnz	r0, 8006894 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 8006882:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006884:	4b09      	ldr	r3, [pc, #36]	; (80068ac <tcpip_try_callback+0x54>)
 8006886:	f240 125d 	movw	r2, #349	; 0x15d
 800688a:	4909      	ldr	r1, [pc, #36]	; (80068b0 <tcpip_try_callback+0x58>)
 800688c:	4809      	ldr	r0, [pc, #36]	; (80068b4 <tcpip_try_callback+0x5c>)
 800688e:	f007 fcbb 	bl	800e208 <iprintf>
 8006892:	e7e8      	b.n	8006866 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006894:	4621      	mov	r1, r4
 8006896:	2008      	movs	r0, #8
 8006898:	f000 fc48 	bl	800712c <memp_free>
    return ERR_MEM;
 800689c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80068a2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	24009ab4 	.word	0x24009ab4
 80068ac:	0800f950 	.word	0x0800f950
 80068b0:	0800f9a0 	.word	0x0800f9a0
 80068b4:	0800f0a0 	.word	0x0800f0a0

080068b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80068b8:	b530      	push	{r4, r5, lr}
 80068ba:	b083      	sub	sp, #12
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
  lwip_init();
 80068c0:	f000 f8b6 	bl	8006a30 <lwip_init>

  tcpip_init_done = initfunc;
 80068c4:	4a15      	ldr	r2, [pc, #84]	; (800691c <tcpip_init+0x64>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80068c6:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80068ca:	4816      	ldr	r0, [pc, #88]	; (8006924 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80068cc:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80068ce:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80068d0:	f007 fa36 	bl	800dd40 <sys_mbox_new>
 80068d4:	b970      	cbnz	r0, 80068f4 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80068d6:	4814      	ldr	r0, [pc, #80]	; (8006928 <tcpip_init+0x70>)
 80068d8:	f007 fa80 	bl	800dddc <sys_mutex_new>
 80068dc:	b9b0      	cbnz	r0, 800690c <tcpip_init+0x54>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80068de:	2418      	movs	r4, #24
 80068e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068e4:	2200      	movs	r2, #0
 80068e6:	4911      	ldr	r1, [pc, #68]	; (800692c <tcpip_init+0x74>)
 80068e8:	9400      	str	r4, [sp, #0]
 80068ea:	4811      	ldr	r0, [pc, #68]	; (8006930 <tcpip_init+0x78>)
 80068ec:	f007 fa8c 	bl	800de08 <sys_thread_new>
}
 80068f0:	b003      	add	sp, #12
 80068f2:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80068f4:	4b0f      	ldr	r3, [pc, #60]	; (8006934 <tcpip_init+0x7c>)
 80068f6:	f240 2261 	movw	r2, #609	; 0x261
 80068fa:	490f      	ldr	r1, [pc, #60]	; (8006938 <tcpip_init+0x80>)
 80068fc:	480f      	ldr	r0, [pc, #60]	; (800693c <tcpip_init+0x84>)
 80068fe:	f007 fc83 	bl	800e208 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006902:	4809      	ldr	r0, [pc, #36]	; (8006928 <tcpip_init+0x70>)
 8006904:	f007 fa6a 	bl	800dddc <sys_mutex_new>
 8006908:	2800      	cmp	r0, #0
 800690a:	d0e8      	beq.n	80068de <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800690c:	4b09      	ldr	r3, [pc, #36]	; (8006934 <tcpip_init+0x7c>)
 800690e:	f240 2265 	movw	r2, #613	; 0x265
 8006912:	490b      	ldr	r1, [pc, #44]	; (8006940 <tcpip_init+0x88>)
 8006914:	4809      	ldr	r0, [pc, #36]	; (800693c <tcpip_init+0x84>)
 8006916:	f007 fc77 	bl	800e208 <iprintf>
 800691a:	e7e0      	b.n	80068de <tcpip_init+0x26>
 800691c:	24009aac 	.word	0x24009aac
 8006920:	24009ab0 	.word	0x24009ab0
 8006924:	24009ab4 	.word	0x24009ab4
 8006928:	24009aa8 	.word	0x24009aa8
 800692c:	080066fd 	.word	0x080066fd
 8006930:	0800f9f8 	.word	0x0800f9f8
 8006934:	0800f950 	.word	0x0800f950
 8006938:	0800f9b0 	.word	0x0800f9b0
 800693c:	0800f0a0 	.word	0x0800f0a0
 8006940:	0800f9d4 	.word	0x0800f9d4

08006944 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006944:	ba40      	rev16	r0, r0
}
 8006946:	b280      	uxth	r0, r0
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800694c:	ba00      	rev	r0, r0
 800694e:	4770      	bx	lr

08006950 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8006950:	2300      	movs	r3, #0
{
 8006952:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006954:	4299      	cmp	r1, r3
{
 8006956:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8006958:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 800695c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8006960:	dd05      	ble.n	800696e <lwip_standard_chksum+0x1e>
 8006962:	b124      	cbz	r4, 800696e <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8006964:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8006968:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 800696a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800696e:	2901      	cmp	r1, #1
 8006970:	dd28      	ble.n	80069c4 <lwip_standard_chksum+0x74>
 8006972:	3902      	subs	r1, #2
  u32_t sum = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 800697a:	f10e 0c01 	add.w	ip, lr, #1
 800697e:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8006982:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8006986:	4584      	cmp	ip, r0
    sum += *ps++;
 8006988:	4413      	add	r3, r2
  while (len > 1) {
 800698a:	d1fa      	bne.n	8006982 <lwip_standard_chksum+0x32>
    len -= 2;
 800698c:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8006990:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006994:	2901      	cmp	r1, #1
 8006996:	d103      	bne.n	80069a0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006998:	f89c 2000 	ldrb.w	r2, [ip]
 800699c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80069a0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80069a4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80069a6:	b298      	uxth	r0, r3
 80069a8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80069ac:	b298      	uxth	r0, r3
 80069ae:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80069b2:	b124      	cbz	r4, 80069be <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 80069b4:	0203      	lsls	r3, r0, #8
 80069b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80069be:	b280      	uxth	r0, r0
 80069c0:	b002      	add	sp, #8
 80069c2:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 80069c4:	4684      	mov	ip, r0
  u32_t sum = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	e7e4      	b.n	8006994 <lwip_standard_chksum+0x44>
 80069ca:	bf00      	nop

080069cc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80069cc:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80069ce:	f7ff ffbf 	bl	8006950 <lwip_standard_chksum>
 80069d2:	43c0      	mvns	r0, r0
}
 80069d4:	b280      	uxth	r0, r0
 80069d6:	bd08      	pop	{r3, pc}

080069d8 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80069d8:	b338      	cbz	r0, 8006a2a <inet_chksum_pbuf+0x52>
{
 80069da:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 80069dc:	2600      	movs	r6, #0
 80069de:	4605      	mov	r5, r0
  acc = 0;
 80069e0:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 80069e2:	8969      	ldrh	r1, [r5, #10]
 80069e4:	6868      	ldr	r0, [r5, #4]
 80069e6:	f7ff ffb3 	bl	8006950 <lwip_standard_chksum>
 80069ea:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80069ec:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80069ee:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 80069f0:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 80069f4:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80069f8:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80069fc:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8006a00:	d004      	beq.n	8006a0c <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f086 0601 	eor.w	r6, r6, #1
 8006a08:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8006a0c:	682d      	ldr	r5, [r5, #0]
 8006a0e:	2d00      	cmp	r5, #0
 8006a10:	d1e7      	bne.n	80069e2 <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8006a12:	b13e      	cbz	r6, 8006a24 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006a14:	0220      	lsls	r0, r4, #8
 8006a16:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8006a1a:	b280      	uxth	r0, r0
 8006a1c:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8006a1e:	43c0      	mvns	r0, r0
 8006a20:	b280      	uxth	r0, r0
}
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8006a24:	43e0      	mvns	r0, r4
 8006a26:	b280      	uxth	r0, r0
}
 8006a28:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8006a2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8006a2e:	4770      	bx	lr

08006a30 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006a30:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006a32:	f007 f9c9 	bl	800ddc8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006a36:	f000 f80d 	bl	8006a54 <mem_init>
  memp_init();
 8006a3a:	f000 faef 	bl	800701c <memp_init>
  pbuf_init();
  netif_init();
 8006a3e:	f000 fbf5 	bl	800722c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006a42:	f005 fc59 	bl	800c2f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006a46:	f001 fa4f 	bl	8007ee8 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8006a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8006a4e:	f005 bbf7 	b.w	800c240 <sys_timeouts_init>
 8006a52:	bf00      	nop

08006a54 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006a54:	4b13      	ldr	r3, [pc, #76]	; (8006aa4 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8006a56:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006a5a:	4813      	ldr	r0, [pc, #76]	; (8006aa8 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8006a5c:	f647 51e8 	movw	r1, #32232	; 0x7de8
{
 8006a60:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006a62:	6003      	str	r3, [r0, #0]
  mem->prev = 0;
  mem->used = 0;
 8006a64:	2400      	movs	r4, #0
  mem->next = MEM_SIZE_ALIGNED;
 8006a66:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006a6a:	4419      	add	r1, r3
 8006a6c:	4a0f      	ldr	r2, [pc, #60]	; (8006aac <mem_init+0x58>)
  mem->used = 0;
 8006a6e:	711c      	strb	r4, [r3, #4]
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8006a70:	480f      	ldr	r0, [pc, #60]	; (8006ab0 <mem_init+0x5c>)
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006a72:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8006a74:	2101      	movs	r1, #1
 8006a76:	4a0f      	ldr	r2, [pc, #60]	; (8006ab4 <mem_init+0x60>)
  ram_end->next = MEM_SIZE_ALIGNED;
 8006a78:	4c0f      	ldr	r4, [pc, #60]	; (8006ab8 <mem_init+0x64>)
 8006a7a:	f8c0 4fe8 	str.w	r4, [r0, #4072]	; 0xfe8
  ram_end->used = 1;
 8006a7e:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
  ram_end->prev = MEM_SIZE_ALIGNED;
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006a82:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <mem_init+0x68>)

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006a84:	480e      	ldr	r0, [pc, #56]	; (8006ac0 <mem_init+0x6c>)
  lfree = (struct mem *)(void *)ram;
 8006a86:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006a88:	f007 f9a8 	bl	800dddc <sys_mutex_new>
 8006a8c:	b900      	cbnz	r0, 8006a90 <mem_init+0x3c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006a8e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006a90:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <mem_init+0x70>)
 8006a92:	f240 221f 	movw	r2, #543	; 0x21f
 8006a96:	490c      	ldr	r1, [pc, #48]	; (8006ac8 <mem_init+0x74>)
 8006a98:	480c      	ldr	r0, [pc, #48]	; (8006acc <mem_init+0x78>)
}
 8006a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006a9e:	f007 bbb3 	b.w	800e208 <iprintf>
 8006aa2:	bf00      	nop
 8006aa4:	30000200 	.word	0x30000200
 8006aa8:	24009ad8 	.word	0x24009ad8
 8006aac:	24009adc 	.word	0x24009adc
 8006ab0:	30007000 	.word	0x30007000
 8006ab4:	30007f00 	.word	0x30007f00
 8006ab8:	7de87de8 	.word	0x7de87de8
 8006abc:	24009ad0 	.word	0x24009ad0
 8006ac0:	24009ad4 	.word	0x24009ad4
 8006ac4:	0800fa08 	.word	0x0800fa08
 8006ac8:	0800fa38 	.word	0x0800fa38
 8006acc:	0800f0a0 	.word	0x0800f0a0

08006ad0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	f000 809c 	beq.w	8006c0e <mem_free+0x13e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006ad6:	0783      	lsls	r3, r0, #30
{
 8006ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006adc:	4604      	mov	r4, r0
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006ade:	f040 8091 	bne.w	8006c04 <mem_free+0x134>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006ae2:	4e63      	ldr	r6, [pc, #396]	; (8006c70 <mem_free+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006ae4:	f1a0 0508 	sub.w	r5, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	42ab      	cmp	r3, r5
 8006aec:	d805      	bhi.n	8006afa <mem_free+0x2a>
 8006aee:	4f61      	ldr	r7, [pc, #388]	; (8006c74 <mem_free+0x1a4>)
 8006af0:	f100 030c 	add.w	r3, r0, #12
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d20c      	bcs.n	8006b14 <mem_free+0x44>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006afa:	4b5f      	ldr	r3, [pc, #380]	; (8006c78 <mem_free+0x1a8>)
 8006afc:	f240 227f 	movw	r2, #639	; 0x27f
 8006b00:	495e      	ldr	r1, [pc, #376]	; (8006c7c <mem_free+0x1ac>)
 8006b02:	485f      	ldr	r0, [pc, #380]	; (8006c80 <mem_free+0x1b0>)
 8006b04:	f007 fb80 	bl	800e208 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8006b08:	f007 f994 	bl	800de34 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006b10:	f007 b99c 	b.w	800de4c <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8006b14:	485b      	ldr	r0, [pc, #364]	; (8006c84 <mem_free+0x1b4>)
 8006b16:	f007 f96d 	bl	800ddf4 <sys_mutex_lock>
  if (!mem->used) {
 8006b1a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 80a1 	beq.w	8006c66 <mem_free+0x196>
  pmem = ptr_to_mem(mem->prev);
 8006b24:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b28:	f647 51e8 	movw	r1, #32232	; 0x7de8
  nmem = ptr_to_mem(mem->next);
 8006b2c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b30:	428a      	cmp	r2, r1
 8006b32:	d809      	bhi.n	8006b48 <mem_free+0x78>
 8006b34:	428b      	cmp	r3, r1
 8006b36:	d807      	bhi.n	8006b48 <mem_free+0x78>
  return (mem_size_t)((u8_t *)mem - ram);
 8006b38:	6831      	ldr	r1, [r6, #0]
 8006b3a:	1a68      	subs	r0, r5, r1
 8006b3c:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006b3e:	4290      	cmp	r0, r2
 8006b40:	d012      	beq.n	8006b68 <mem_free+0x98>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b42:	5a8a      	ldrh	r2, [r1, r2]
 8006b44:	4282      	cmp	r2, r0
 8006b46:	d00f      	beq.n	8006b68 <mem_free+0x98>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <mem_free+0x1a8>)
 8006b4a:	f240 2295 	movw	r2, #661	; 0x295
 8006b4e:	494e      	ldr	r1, [pc, #312]	; (8006c88 <mem_free+0x1b8>)
 8006b50:	484b      	ldr	r0, [pc, #300]	; (8006c80 <mem_free+0x1b0>)
 8006b52:	f007 fb59 	bl	800e208 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8006b56:	484b      	ldr	r0, [pc, #300]	; (8006c84 <mem_free+0x1b4>)
 8006b58:	f007 f952 	bl	800de00 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8006b5c:	f007 f96a 	bl	800de34 <sys_arch_protect>
}
 8006b60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8006b64:	f007 b972 	b.w	800de4c <sys_arch_unprotect>
  return (struct mem *)(void *)&ram[ptr];
 8006b68:	18ca      	adds	r2, r1, r3
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006b6a:	f8d7 c000 	ldr.w	ip, [r7]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006b6e:	4562      	cmp	r2, ip
 8006b70:	d002      	beq.n	8006b78 <mem_free+0xa8>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006b72:	8852      	ldrh	r2, [r2, #2]
 8006b74:	4282      	cmp	r2, r0
 8006b76:	d1e7      	bne.n	8006b48 <mem_free+0x78>
  if (mem < lfree) {
 8006b78:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8006ca4 <mem_free+0x1d4>
  mem->used = 0;
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f804 2c04 	strb.w	r2, [r4, #-4]
  if (mem < lfree) {
 8006b82:	f8d8 2000 	ldr.w	r2, [r8]
 8006b86:	42aa      	cmp	r2, r5
    lfree = mem;
 8006b88:	bf88      	it	hi
 8006b8a:	f8c8 5000 	strhi.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006b8e:	428d      	cmp	r5, r1
 8006b90:	d33e      	bcc.n	8006c10 <mem_free+0x140>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006b92:	4565      	cmp	r5, ip
 8006b94:	d246      	bcs.n	8006c24 <mem_free+0x154>
  return (struct mem *)(void *)&ram[ptr];
 8006b96:	6832      	ldr	r2, [r6, #0]
 8006b98:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006b9a:	429d      	cmp	r5, r3
 8006b9c:	d015      	beq.n	8006bca <mem_free+0xfa>
 8006b9e:	7919      	ldrb	r1, [r3, #4]
 8006ba0:	b999      	cbnz	r1, 8006bca <mem_free+0xfa>
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	428b      	cmp	r3, r1
 8006ba6:	d010      	beq.n	8006bca <mem_free+0xfa>
    if (lfree == nmem) {
 8006ba8:	f8d8 1000 	ldr.w	r1, [r8]
 8006bac:	428b      	cmp	r3, r1
    mem->next = nmem->next;
 8006bae:	8819      	ldrh	r1, [r3, #0]
 8006bb0:	f824 1c08 	strh.w	r1, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006bb4:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8006bb8:	881b      	ldrh	r3, [r3, #0]
      lfree = mem;
 8006bba:	bf08      	it	eq
 8006bbc:	f8c8 5000 	streq.w	r5, [r8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	d002      	beq.n	8006bca <mem_free+0xfa>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006bc4:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8006bc6:	1aa9      	subs	r1, r5, r2
 8006bc8:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8006bca:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8006bce:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8006bd0:	429d      	cmp	r5, r3
 8006bd2:	d012      	beq.n	8006bfa <mem_free+0x12a>
 8006bd4:	7918      	ldrb	r0, [r3, #4]
 8006bd6:	b980      	cbnz	r0, 8006bfa <mem_free+0x12a>
    if (lfree == mem) {
 8006bd8:	f8d8 0000 	ldr.w	r0, [r8]
 8006bdc:	4285      	cmp	r5, r0
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006bde:	f647 50e8 	movw	r0, #32232	; 0x7de8
      lfree = pmem;
 8006be2:	bf08      	it	eq
 8006be4:	f8c8 3000 	streq.w	r3, [r8]
    pmem->next = mem->next;
 8006be8:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006bec:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006bee:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006bf2:	4283      	cmp	r3, r0
 8006bf4:	d001      	beq.n	8006bfa <mem_free+0x12a>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006bf6:	441a      	add	r2, r3
 8006bf8:	8051      	strh	r1, [r2, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006bfa:	4822      	ldr	r0, [pc, #136]	; (8006c84 <mem_free+0x1b4>)
}
 8006bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006c00:	f007 b8fe 	b.w	800de00 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006c04:	4b1c      	ldr	r3, [pc, #112]	; (8006c78 <mem_free+0x1a8>)
 8006c06:	f240 2273 	movw	r2, #627	; 0x273
 8006c0a:	4920      	ldr	r1, [pc, #128]	; (8006c8c <mem_free+0x1bc>)
 8006c0c:	e779      	b.n	8006b02 <mem_free+0x32>
 8006c0e:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006c10:	4b19      	ldr	r3, [pc, #100]	; (8006c78 <mem_free+0x1a8>)
 8006c12:	f240 12df 	movw	r2, #479	; 0x1df
 8006c16:	491e      	ldr	r1, [pc, #120]	; (8006c90 <mem_free+0x1c0>)
 8006c18:	4819      	ldr	r0, [pc, #100]	; (8006c80 <mem_free+0x1b0>)
 8006c1a:	f007 faf5 	bl	800e208 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	429d      	cmp	r5, r3
 8006c22:	d306      	bcc.n	8006c32 <mem_free+0x162>
 8006c24:	4b14      	ldr	r3, [pc, #80]	; (8006c78 <mem_free+0x1a8>)
 8006c26:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006c2a:	491a      	ldr	r1, [pc, #104]	; (8006c94 <mem_free+0x1c4>)
 8006c2c:	4814      	ldr	r0, [pc, #80]	; (8006c80 <mem_free+0x1b0>)
 8006c2e:	f007 faeb 	bl	800e208 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006c32:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006c36:	b133      	cbz	r3, 8006c46 <mem_free+0x176>
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <mem_free+0x1a8>)
 8006c3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006c3e:	4916      	ldr	r1, [pc, #88]	; (8006c98 <mem_free+0x1c8>)
 8006c40:	480f      	ldr	r0, [pc, #60]	; (8006c80 <mem_free+0x1b0>)
 8006c42:	f007 fae1 	bl	800e208 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006c46:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006c4a:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d9a1      	bls.n	8006b96 <mem_free+0xc6>
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <mem_free+0x1a8>)
 8006c54:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006c58:	4910      	ldr	r1, [pc, #64]	; (8006c9c <mem_free+0x1cc>)
 8006c5a:	4809      	ldr	r0, [pc, #36]	; (8006c80 <mem_free+0x1b0>)
 8006c5c:	f007 fad4 	bl	800e208 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8006c60:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006c64:	e797      	b.n	8006b96 <mem_free+0xc6>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006c66:	4b04      	ldr	r3, [pc, #16]	; (8006c78 <mem_free+0x1a8>)
 8006c68:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8006c6c:	490c      	ldr	r1, [pc, #48]	; (8006ca0 <mem_free+0x1d0>)
 8006c6e:	e76f      	b.n	8006b50 <mem_free+0x80>
 8006c70:	24009ad8 	.word	0x24009ad8
 8006c74:	24009adc 	.word	0x24009adc
 8006c78:	0800fa08 	.word	0x0800fa08
 8006c7c:	0800fa78 	.word	0x0800fa78
 8006c80:	0800f0a0 	.word	0x0800f0a0
 8006c84:	24009ad4 	.word	0x24009ad4
 8006c88:	0800fabc 	.word	0x0800fabc
 8006c8c:	0800fa54 	.word	0x0800fa54
 8006c90:	0800faf0 	.word	0x0800faf0
 8006c94:	0800fb08 	.word	0x0800fb08
 8006c98:	0800fb24 	.word	0x0800fb24
 8006c9c:	0800fb40 	.word	0x0800fb40
 8006ca0:	0800fa94 	.word	0x0800fa94
 8006ca4:	24009ad0 	.word	0x24009ad0

08006ca8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006cac:	1ccb      	adds	r3, r1, #3
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	b29b      	uxth	r3, r3
  if (newsize < MIN_SIZE_ALIGNED) {
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	bf38      	it	cc
 8006cba:	250c      	movcc	r5, #12
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006cbc:	42a9      	cmp	r1, r5
 8006cbe:	d87e      	bhi.n	8006dbe <mem_trim+0x116>
 8006cc0:	f647 52e8 	movw	r2, #32232	; 0x7de8
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d87a      	bhi.n	8006dbe <mem_trim+0x116>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006cc8:	4f4f      	ldr	r7, [pc, #316]	; (8006e08 <mem_trim+0x160>)
 8006cca:	4604      	mov	r4, r0
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	4283      	cmp	r3, r0
 8006cd0:	d842      	bhi.n	8006d58 <mem_trim+0xb0>
 8006cd2:	4a4e      	ldr	r2, [pc, #312]	; (8006e0c <mem_trim+0x164>)
 8006cd4:	6812      	ldr	r2, [r2, #0]
 8006cd6:	4282      	cmp	r2, r0
 8006cd8:	d93e      	bls.n	8006d58 <mem_trim+0xb0>
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006cda:	f1a4 0808 	sub.w	r8, r4, #8
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006cde:	f834 6c08 	ldrh.w	r6, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8006ce2:	eba8 0303 	sub.w	r3, r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006ce6:	3e08      	subs	r6, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8006ce8:	fa1f f883 	uxth.w	r8, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006cec:	eba6 0608 	sub.w	r6, r6, r8
 8006cf0:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006cf2:	42ae      	cmp	r6, r5
 8006cf4:	d366      	bcc.n	8006dc4 <mem_trim+0x11c>
  if (newsize > size) {
    /* not supported */
    return NULL;
  }
  if (newsize == size) {
 8006cf6:	d06f      	beq.n	8006dd8 <mem_trim+0x130>
    /* No change in size, simply return */
    return rmem;
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8006cf8:	4845      	ldr	r0, [pc, #276]	; (8006e10 <mem_trim+0x168>)
 8006cfa:	f007 f87b 	bl	800ddf4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8006cfe:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	eb03 0902 	add.w	r9, r3, r2
  if (mem2->used == 0) {
 8006d08:	f899 1004 	ldrb.w	r1, [r9, #4]
 8006d0c:	2900      	cmp	r1, #0
 8006d0e:	d138      	bne.n	8006d82 <mem_trim+0xda>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d10:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8006d14:	428a      	cmp	r2, r1
 8006d16:	d06d      	beq.n	8006df4 <mem_trim+0x14c>
    /* remember the old next pointer */
    next = mem2->next;
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d18:	3508      	adds	r5, #8
    if (lfree == mem2) {
 8006d1a:	493e      	ldr	r1, [pc, #248]	; (8006e14 <mem_trim+0x16c>)
    next = mem2->next;
 8006d1c:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d20:	4445      	add	r5, r8
    if (lfree == mem2) {
 8006d22:	680a      	ldr	r2, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d24:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8006d26:	454a      	cmp	r2, r9
  return (struct mem *)(void *)&ram[ptr];
 8006d28:	eb03 0205 	add.w	r2, r3, r5
      lfree = ptr_to_mem(ptr2);
 8006d2c:	bf08      	it	eq
 8006d2e:	600a      	streq	r2, [r1, #0]
    }
    mem2 = ptr_to_mem(ptr2);
    mem2->used = 0;
 8006d30:	2100      	movs	r1, #0
    /* restore the next pointer */
    mem2->next = next;
 8006d32:	8010      	strh	r0, [r2, #0]
    mem2->used = 0;
 8006d34:	7111      	strb	r1, [r2, #4]
    /* link mem to it */
    mem->next = ptr2;
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d36:	f647 51e8 	movw	r1, #32232	; 0x7de8
    mem2->prev = ptr;
 8006d3a:	f8a2 8002 	strh.w	r8, [r2, #2]
    mem->next = ptr2;
 8006d3e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d42:	8812      	ldrh	r2, [r2, #0]
 8006d44:	428a      	cmp	r2, r1
 8006d46:	d001      	beq.n	8006d4c <mem_trim+0xa4>
    mem2->used = 0;
    mem2->next = mem->next;
    mem2->prev = ptr;
    mem->next = ptr2;
    if (mem2->next != MEM_SIZE_ALIGNED) {
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006d48:	4413      	add	r3, r2
 8006d4a:	805d      	strh	r5, [r3, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8006d4c:	4830      	ldr	r0, [pc, #192]	; (8006e10 <mem_trim+0x168>)
 8006d4e:	f007 f857 	bl	800de00 <sys_mutex_unlock>
  return rmem;
 8006d52:	4620      	mov	r0, r4
}
 8006d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006d58:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <mem_trim+0x170>)
 8006d5a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8006d5e:	492f      	ldr	r1, [pc, #188]	; (8006e1c <mem_trim+0x174>)
 8006d60:	482f      	ldr	r0, [pc, #188]	; (8006e20 <mem_trim+0x178>)
 8006d62:	f007 fa51 	bl	800e208 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	42a3      	cmp	r3, r4
 8006d6a:	d803      	bhi.n	8006d74 <mem_trim+0xcc>
 8006d6c:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <mem_trim+0x164>)
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	42a2      	cmp	r2, r4
 8006d72:	d8b2      	bhi.n	8006cda <mem_trim+0x32>
    MEM_STATS_INC_LOCKED(illegal);
 8006d74:	f007 f85e 	bl	800de34 <sys_arch_protect>
 8006d78:	f007 f868 	bl	800de4c <sys_arch_unprotect>
    return rmem;
 8006d7c:	4620      	mov	r0, r4
}
 8006d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006d82:	f105 0114 	add.w	r1, r5, #20
 8006d86:	42b1      	cmp	r1, r6
 8006d88:	d8e0      	bhi.n	8006d4c <mem_trim+0xa4>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d8a:	3508      	adds	r5, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d8c:	f647 51e8 	movw	r1, #32232	; 0x7de8
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d90:	4445      	add	r5, r8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d92:	428a      	cmp	r2, r1
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006d94:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006d96:	d022      	beq.n	8006dde <mem_trim+0x136>
    if (mem2 < lfree) {
 8006d98:	481e      	ldr	r0, [pc, #120]	; (8006e14 <mem_trim+0x16c>)
  return (struct mem *)(void *)&ram[ptr];
 8006d9a:	1959      	adds	r1, r3, r5
    if (mem2 < lfree) {
 8006d9c:	6806      	ldr	r6, [r0, #0]
    mem2->next = mem->next;
 8006d9e:	800a      	strh	r2, [r1, #0]
    mem2->used = 0;
 8006da0:	2200      	movs	r2, #0
    if (mem2 < lfree) {
 8006da2:	428e      	cmp	r6, r1
    mem2->prev = ptr;
 8006da4:	f8a1 8002 	strh.w	r8, [r1, #2]
    mem2->used = 0;
 8006da8:	710a      	strb	r2, [r1, #4]
      lfree = mem2;
 8006daa:	bf88      	it	hi
 8006dac:	6001      	strhi	r1, [r0, #0]
    mem->next = ptr2;
 8006dae:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006db2:	880a      	ldrh	r2, [r1, #0]
 8006db4:	f647 51e8 	movw	r1, #32232	; 0x7de8
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d1c5      	bne.n	8006d48 <mem_trim+0xa0>
 8006dbc:	e7c6      	b.n	8006d4c <mem_trim+0xa4>
    return NULL;
 8006dbe:	2000      	movs	r0, #0
}
 8006dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006dc4:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <mem_trim+0x170>)
 8006dc6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8006dca:	4916      	ldr	r1, [pc, #88]	; (8006e24 <mem_trim+0x17c>)
 8006dcc:	4814      	ldr	r0, [pc, #80]	; (8006e20 <mem_trim+0x178>)
 8006dce:	f007 fa1b 	bl	800e208 <iprintf>
    return NULL;
 8006dd2:	2000      	movs	r0, #0
}
 8006dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd8:	4620      	mov	r0, r4
 8006dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006dde:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <mem_trim+0x170>)
 8006de0:	f240 3216 	movw	r2, #790	; 0x316
 8006de4:	4910      	ldr	r1, [pc, #64]	; (8006e28 <mem_trim+0x180>)
 8006de6:	480e      	ldr	r0, [pc, #56]	; (8006e20 <mem_trim+0x178>)
 8006de8:	f007 fa0e 	bl	800e208 <iprintf>
    mem2->next = mem->next;
 8006dec:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	e7d1      	b.n	8006d98 <mem_trim+0xf0>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <mem_trim+0x170>)
 8006df6:	f240 22f5 	movw	r2, #757	; 0x2f5
 8006dfa:	490b      	ldr	r1, [pc, #44]	; (8006e28 <mem_trim+0x180>)
 8006dfc:	4808      	ldr	r0, [pc, #32]	; (8006e20 <mem_trim+0x178>)
 8006dfe:	f007 fa03 	bl	800e208 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	e788      	b.n	8006d18 <mem_trim+0x70>
 8006e06:	bf00      	nop
 8006e08:	24009ad8 	.word	0x24009ad8
 8006e0c:	24009adc 	.word	0x24009adc
 8006e10:	24009ad4 	.word	0x24009ad4
 8006e14:	24009ad0 	.word	0x24009ad0
 8006e18:	0800fa08 	.word	0x0800fa08
 8006e1c:	0800fb6c 	.word	0x0800fb6c
 8006e20:	0800f0a0 	.word	0x0800f0a0
 8006e24:	0800fb84 	.word	0x0800fb84
 8006e28:	0800fba4 	.word	0x0800fba4

08006e2c <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d070      	beq.n	8006f12 <mem_malloc+0xe6>
{
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006e34:	1cc3      	adds	r3, r0, #3
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	b29b      	uxth	r3, r3
  if (size < MIN_SIZE_ALIGNED) {
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	4698      	mov	r8, r3
 8006e40:	bf38      	it	cc
 8006e42:	f04f 080c 	movcc.w	r8, #12
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006e46:	4580      	cmp	r8, r0
 8006e48:	d32e      	bcc.n	8006ea8 <mem_malloc+0x7c>
 8006e4a:	f647 54e8 	movw	r4, #32232	; 0x7de8
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	d82a      	bhi.n	8006ea8 <mem_malloc+0x7c>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e52:	4e4a      	ldr	r6, [pc, #296]	; (8006f7c <mem_malloc+0x150>)
  return (mem_size_t)((u8_t *)mem - ram);
 8006e54:	4d4a      	ldr	r5, [pc, #296]	; (8006f80 <mem_malloc+0x154>)
  sys_mutex_lock(&mem_mutex);
 8006e56:	484b      	ldr	r0, [pc, #300]	; (8006f84 <mem_malloc+0x158>)
 8006e58:	f006 ffcc 	bl	800ddf4 <sys_mutex_lock>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e5c:	f8d6 c000 	ldr.w	ip, [r6]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e60:	6829      	ldr	r1, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e62:	eba4 0e08 	sub.w	lr, r4, r8
  return (mem_size_t)((u8_t *)mem - ram);
 8006e66:	ebac 0701 	sub.w	r7, ip, r1
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e6a:	b2bb      	uxth	r3, r7
 8006e6c:	4573      	cmp	r3, lr
  return (mem_size_t)((u8_t *)mem - ram);
 8006e6e:	461f      	mov	r7, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e70:	d214      	bcs.n	8006e9c <mem_malloc+0x70>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e72:	f06f 0907 	mvn.w	r9, #7
 8006e76:	e007      	b.n	8006e88 <mem_malloc+0x5c>
 8006e78:	5ac8      	ldrh	r0, [r1, r3]
 8006e7a:	4402      	add	r2, r0
 8006e7c:	4603      	mov	r3, r0
      if ((!mem->used) &&
 8006e7e:	4542      	cmp	r2, r8
 8006e80:	d215      	bcs.n	8006eae <mem_malloc+0x82>
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e82:	4573      	cmp	r3, lr
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e84:	4607      	mov	r7, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e86:	d209      	bcs.n	8006e9c <mem_malloc+0x70>
  return (struct mem *)(void *)&ram[ptr];
 8006e88:	18cc      	adds	r4, r1, r3
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e8a:	eba9 0203 	sub.w	r2, r9, r3
      if ((!mem->used) &&
 8006e8e:	7920      	ldrb	r0, [r4, #4]
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0f1      	beq.n	8006e78 <mem_malloc+0x4c>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006e94:	5acf      	ldrh	r7, [r1, r3]
 8006e96:	463b      	mov	r3, r7
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006e98:	4573      	cmp	r3, lr
 8006e9a:	d3f5      	bcc.n	8006e88 <mem_malloc+0x5c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006e9c:	4839      	ldr	r0, [pc, #228]	; (8006f84 <mem_malloc+0x158>)
 8006e9e:	f006 ffaf 	bl	800de00 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006ea2:	2000      	movs	r0, #0
}
 8006ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006ea8:	2000      	movs	r0, #0
}
 8006eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006eae:	f108 0314 	add.w	r3, r8, #20
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006eb2:	f108 0808 	add.w	r8, r8, #8
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d32c      	bcc.n	8006f14 <mem_malloc+0xe8>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006eba:	eb07 0908 	add.w	r9, r7, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ebe:	f647 53e8 	movw	r3, #32232	; 0x7de8
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006ec2:	fa1f f989 	uxth.w	r9, r9
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006ec6:	4599      	cmp	r9, r3
 8006ec8:	d04c      	beq.n	8006f64 <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 8006eca:	eb01 0309 	add.w	r3, r1, r9
          mem2->used = 0;
 8006ece:	2200      	movs	r2, #0
 8006ed0:	711a      	strb	r2, [r3, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ed2:	f647 52e8 	movw	r2, #32232	; 0x7de8
          mem2->next = mem->next;
 8006ed6:	f821 0009 	strh.w	r0, [r1, r9]
          mem2->prev = ptr;
 8006eda:	805f      	strh	r7, [r3, #2]
          mem->used = 1;
 8006edc:	2301      	movs	r3, #1
          mem->next = ptr2;
 8006ede:	f8a4 9000 	strh.w	r9, [r4]
          mem->used = 1;
 8006ee2:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ee4:	f831 3009 	ldrh.w	r3, [r1, r9]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d002      	beq.n	8006ef2 <mem_malloc+0xc6>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006eec:	4419      	add	r1, r3
 8006eee:	f8a1 9002 	strh.w	r9, [r1, #2]
        if (mem == lfree) {
 8006ef2:	45a4      	cmp	ip, r4
          while (cur->used && cur != ram_end) {
 8006ef4:	4f24      	ldr	r7, [pc, #144]	; (8006f88 <mem_malloc+0x15c>)
        if (mem == lfree) {
 8006ef6:	d027      	beq.n	8006f48 <mem_malloc+0x11c>
        sys_mutex_unlock(&mem_mutex);
 8006ef8:	4822      	ldr	r0, [pc, #136]	; (8006f84 <mem_malloc+0x158>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006efa:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8006efc:	f006 ff80 	bl	800de00 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	4543      	cmp	r3, r8
 8006f04:	d318      	bcc.n	8006f38 <mem_malloc+0x10c>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006f06:	07a3      	lsls	r3, r4, #30
 8006f08:	d107      	bne.n	8006f1a <mem_malloc+0xee>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006f0a:	f104 0008 	add.w	r0, r4, #8
}
 8006f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f12:	4770      	bx	lr
          mem->used = 1;
 8006f14:	2301      	movs	r3, #1
 8006f16:	7123      	strb	r3, [r4, #4]
 8006f18:	e7eb      	b.n	8006ef2 <mem_malloc+0xc6>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <mem_malloc+0x160>)
 8006f1c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006f20:	491b      	ldr	r1, [pc, #108]	; (8006f90 <mem_malloc+0x164>)
 8006f22:	481c      	ldr	r0, [pc, #112]	; (8006f94 <mem_malloc+0x168>)
 8006f24:	f007 f970 	bl	800e208 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006f28:	4b18      	ldr	r3, [pc, #96]	; (8006f8c <mem_malloc+0x160>)
 8006f2a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006f2e:	491a      	ldr	r1, [pc, #104]	; (8006f98 <mem_malloc+0x16c>)
 8006f30:	4818      	ldr	r0, [pc, #96]	; (8006f94 <mem_malloc+0x168>)
 8006f32:	f007 f969 	bl	800e208 <iprintf>
 8006f36:	e7e8      	b.n	8006f0a <mem_malloc+0xde>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006f38:	4b14      	ldr	r3, [pc, #80]	; (8006f8c <mem_malloc+0x160>)
 8006f3a:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006f3e:	4917      	ldr	r1, [pc, #92]	; (8006f9c <mem_malloc+0x170>)
 8006f40:	4814      	ldr	r0, [pc, #80]	; (8006f94 <mem_malloc+0x168>)
 8006f42:	f007 f961 	bl	800e208 <iprintf>
 8006f46:	e7de      	b.n	8006f06 <mem_malloc+0xda>
  return (struct mem *)(void *)&ram[ptr];
 8006f48:	6828      	ldr	r0, [r5, #0]
 8006f4a:	4623      	mov	r3, r4
          while (cur->used && cur != ram_end) {
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	e003      	b.n	8006f58 <mem_malloc+0x12c>
  return (struct mem *)(void *)&ram[ptr];
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8006f54:	791a      	ldrb	r2, [r3, #4]
 8006f56:	b11a      	cbz	r2, 8006f60 <mem_malloc+0x134>
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d1f9      	bne.n	8006f50 <mem_malloc+0x124>
          lfree = cur;
 8006f5c:	6031      	str	r1, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f5e:	e7cb      	b.n	8006ef8 <mem_malloc+0xcc>
          lfree = cur;
 8006f60:	6033      	str	r3, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006f62:	e7c9      	b.n	8006ef8 <mem_malloc+0xcc>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006f64:	490e      	ldr	r1, [pc, #56]	; (8006fa0 <mem_malloc+0x174>)
 8006f66:	f240 3287 	movw	r2, #903	; 0x387
 8006f6a:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <mem_malloc+0x160>)
 8006f6c:	4809      	ldr	r0, [pc, #36]	; (8006f94 <mem_malloc+0x168>)
 8006f6e:	f007 f94b 	bl	800e208 <iprintf>
          mem2->next = mem->next;
 8006f72:	8820      	ldrh	r0, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 8006f74:	6829      	ldr	r1, [r5, #0]
        if (mem == lfree) {
 8006f76:	f8d6 c000 	ldr.w	ip, [r6]
 8006f7a:	e7a6      	b.n	8006eca <mem_malloc+0x9e>
 8006f7c:	24009ad0 	.word	0x24009ad0
 8006f80:	24009ad8 	.word	0x24009ad8
 8006f84:	24009ad4 	.word	0x24009ad4
 8006f88:	24009adc 	.word	0x24009adc
 8006f8c:	0800fa08 	.word	0x0800fa08
 8006f90:	0800fbe8 	.word	0x0800fbe8
 8006f94:	0800f0a0 	.word	0x0800f0a0
 8006f98:	0800fc18 	.word	0x0800fc18
 8006f9c:	0800fbb8 	.word	0x0800fbb8
 8006fa0:	0800fba4 	.word	0x0800fba4

08006fa4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006fa8:	f006 ff44 	bl	800de34 <sys_arch_protect>

  memp = *desc->tab;
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006fb0:	b18c      	cbz	r4, 8006fd6 <do_memp_malloc_pool+0x32>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006fb2:	6822      	ldr	r2, [r4, #0]
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fb8:	07a3      	lsls	r3, r4, #30
 8006fba:	d104      	bne.n	8006fc6 <do_memp_malloc_pool+0x22>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f006 ff45 	bl	800de4c <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <do_memp_malloc_pool+0x3c>)
 8006fc8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006fcc:	4905      	ldr	r1, [pc, #20]	; (8006fe4 <do_memp_malloc_pool+0x40>)
 8006fce:	4806      	ldr	r0, [pc, #24]	; (8006fe8 <do_memp_malloc_pool+0x44>)
 8006fd0:	f007 f91a 	bl	800e208 <iprintf>
 8006fd4:	e7f2      	b.n	8006fbc <do_memp_malloc_pool+0x18>
    SYS_ARCH_UNPROTECT(old_level);
 8006fd6:	f006 ff39 	bl	800de4c <sys_arch_unprotect>
}
 8006fda:	4620      	mov	r0, r4
 8006fdc:	bd38      	pop	{r3, r4, r5, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800fc3c 	.word	0x0800fc3c
 8006fe4:	0800fc6c 	.word	0x0800fc6c
 8006fe8:	0800f0a0 	.word	0x0800f0a0

08006fec <memp_init_pool>:
{
 8006fec:	b430      	push	{r4, r5}
  *desc->tab = NULL;
 8006fee:	2100      	movs	r1, #0
  for (i = 0; i < desc->num; ++i) {
 8006ff0:	8845      	ldrh	r5, [r0, #2]
  *desc->tab = NULL;
 8006ff2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8006ff6:	6021      	str	r1, [r4, #0]
  for (i = 0; i < desc->num; ++i) {
 8006ff8:	b175      	cbz	r5, 8007018 <memp_init_pool+0x2c>
 8006ffa:	3303      	adds	r3, #3
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006ffc:	f8b0 c000 	ldrh.w	ip, [r0]
  for (i = 0; i < desc->num; ++i) {
 8007000:	460a      	mov	r2, r1
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007008:	eb03 000c 	add.w	r0, r3, ip
    memp->next = *desc->tab;
 800700c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800700e:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
 8007010:	42aa      	cmp	r2, r5
    *desc->tab = memp;
 8007012:	6023      	str	r3, [r4, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007014:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8007016:	d1f6      	bne.n	8007006 <memp_init_pool+0x1a>
}
 8007018:	bc30      	pop	{r4, r5}
 800701a:	4770      	bx	lr

0800701c <memp_init>:
{
 800701c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701e:	f8df e054 	ldr.w	lr, [pc, #84]	; 8007074 <memp_init+0x58>
 8007022:	2504      	movs	r5, #4
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <memp_init+0x4c>)
  *desc->tab = NULL;
 8007026:	2600      	movs	r6, #0
{
 8007028:	4c10      	ldr	r4, [pc, #64]	; (800706c <memp_init+0x50>)
 800702a:	f10e 0730 	add.w	r7, lr, #48	; 0x30
 800702e:	4a10      	ldr	r2, [pc, #64]	; (8007070 <memp_init+0x54>)
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007030:	3303      	adds	r3, #3
  *desc->tab = NULL;
 8007032:	6026      	str	r6, [r4, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007034:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007038:	b165      	cbz	r5, 8007054 <memp_init+0x38>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800703a:	2100      	movs	r1, #0
 800703c:	f8b2 c000 	ldrh.w	ip, [r2]
  for (i = 0; i < desc->num; ++i) {
 8007040:	460a      	mov	r2, r1
 8007042:	3201      	adds	r2, #1
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007044:	eb03 000c 	add.w	r0, r3, ip
    memp->next = *desc->tab;
 8007048:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 800704a:	4619      	mov	r1, r3
  for (i = 0; i < desc->num; ++i) {
 800704c:	42aa      	cmp	r2, r5
    *desc->tab = memp;
 800704e:	6023      	str	r3, [r4, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007050:	4603      	mov	r3, r0
  for (i = 0; i < desc->num; ++i) {
 8007052:	d1f6      	bne.n	8007042 <memp_init+0x26>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007054:	4577      	cmp	r7, lr
 8007056:	d005      	beq.n	8007064 <memp_init+0x48>
    memp_init_pool(memp_pools[i]);
 8007058:	f85e 2f04 	ldr.w	r2, [lr, #4]!
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800705c:	e9d2 3401 	ldrd	r3, r4, [r2, #4]
  for (i = 0; i < desc->num; ++i) {
 8007060:	8855      	ldrh	r5, [r2, #2]
 8007062:	e7e5      	b.n	8007030 <memp_init+0x14>
}
 8007064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007066:	bf00      	nop
 8007068:	240104b4 	.word	0x240104b4
 800706c:	24010568 	.word	0x24010568
 8007070:	0800fd90 	.word	0x0800fd90
 8007074:	0800fd9c 	.word	0x0800fd9c

08007078 <memp_malloc_pool>:
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007078:	b108      	cbz	r0, 800707e <memp_malloc_pool+0x6>
  if (desc == NULL) {
    return NULL;
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800707a:	f7ff bf93 	b.w	8006fa4 <do_memp_malloc_pool>
{
 800707e:	b510      	push	{r4, lr}
 8007080:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007082:	4b04      	ldr	r3, [pc, #16]	; (8007094 <memp_malloc_pool+0x1c>)
 8007084:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007088:	4903      	ldr	r1, [pc, #12]	; (8007098 <memp_malloc_pool+0x20>)
 800708a:	4804      	ldr	r0, [pc, #16]	; (800709c <memp_malloc_pool+0x24>)
 800708c:	f007 f8bc 	bl	800e208 <iprintf>
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007090:	4620      	mov	r0, r4
 8007092:	bd10      	pop	{r4, pc}
 8007094:	0800fc3c 	.word	0x0800fc3c
 8007098:	0800fc90 	.word	0x0800fc90
 800709c:	0800f0a0 	.word	0x0800f0a0

080070a0 <memp_malloc>:
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070a0:	280c      	cmp	r0, #12
{
 80070a2:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070a4:	d806      	bhi.n	80070b4 <memp_malloc+0x14>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80070a6:	4b08      	ldr	r3, [pc, #32]	; (80070c8 <memp_malloc+0x28>)
 80070a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
}
 80070ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 80070b0:	f7ff bf78 	b.w	8006fa4 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <memp_malloc+0x2c>)
 80070b6:	f240 1257 	movw	r2, #343	; 0x157
 80070ba:	4905      	ldr	r1, [pc, #20]	; (80070d0 <memp_malloc+0x30>)
 80070bc:	4805      	ldr	r0, [pc, #20]	; (80070d4 <memp_malloc+0x34>)
 80070be:	f007 f8a3 	bl	800e208 <iprintf>
}
 80070c2:	2000      	movs	r0, #0
 80070c4:	bd08      	pop	{r3, pc}
 80070c6:	bf00      	nop
 80070c8:	0800fd9c 	.word	0x0800fd9c
 80070cc:	0800fc3c 	.word	0x0800fc3c
 80070d0:	0800fca4 	.word	0x0800fca4
 80070d4:	0800f0a0 	.word	0x0800f0a0

080070d8 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80070d8:	b180      	cbz	r0, 80070fc <memp_free_pool+0x24>
{
 80070da:	b570      	push	{r4, r5, r6, lr}
 80070dc:	460c      	mov	r4, r1
  if ((desc == NULL) || (mem == NULL)) {
 80070de:	b161      	cbz	r1, 80070fa <memp_free_pool+0x22>
  LWIP_ASSERT("memp_free: mem properly aligned",
 80070e0:	078b      	lsls	r3, r1, #30
 80070e2:	4605      	mov	r5, r0
 80070e4:	d111      	bne.n	800710a <memp_free_pool+0x32>
  SYS_ARCH_PROTECT(old_level);
 80070e6:	f006 fea5 	bl	800de34 <sys_arch_protect>
  memp->next = *desc->tab;
 80070ea:	68ab      	ldr	r3, [r5, #8]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80070f0:	601c      	str	r4, [r3, #0]
    return;
  }

  do_memp_free_pool(desc, mem);
}
 80070f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80070f6:	f006 bea9 	b.w	800de4c <sys_arch_unprotect>
}
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80070fc:	4b07      	ldr	r3, [pc, #28]	; (800711c <memp_free_pool+0x44>)
 80070fe:	f240 1295 	movw	r2, #405	; 0x195
 8007102:	4907      	ldr	r1, [pc, #28]	; (8007120 <memp_free_pool+0x48>)
 8007104:	4807      	ldr	r0, [pc, #28]	; (8007124 <memp_free_pool+0x4c>)
 8007106:	f007 b87f 	b.w	800e208 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 800710a:	4b04      	ldr	r3, [pc, #16]	; (800711c <memp_free_pool+0x44>)
 800710c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007110:	4905      	ldr	r1, [pc, #20]	; (8007128 <memp_free_pool+0x50>)
 8007112:	4804      	ldr	r0, [pc, #16]	; (8007124 <memp_free_pool+0x4c>)
 8007114:	f007 f878 	bl	800e208 <iprintf>
 8007118:	e7e5      	b.n	80070e6 <memp_free_pool+0xe>
 800711a:	bf00      	nop
 800711c:	0800fc3c 	.word	0x0800fc3c
 8007120:	0800fc90 	.word	0x0800fc90
 8007124:	0800f0a0 	.word	0x0800f0a0
 8007128:	0800fcc4 	.word	0x0800fcc4

0800712c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800712c:	280c      	cmp	r0, #12
 800712e:	d812      	bhi.n	8007156 <memp_free+0x2a>
{
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	460c      	mov	r4, r1

  if (mem == NULL) {
 8007134:	b171      	cbz	r1, 8007154 <memp_free+0x28>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007136:	4b0f      	ldr	r3, [pc, #60]	; (8007174 <memp_free+0x48>)
 8007138:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
  LWIP_ASSERT("memp_free: mem properly aligned",
 800713c:	078b      	lsls	r3, r1, #30
 800713e:	d111      	bne.n	8007164 <memp_free+0x38>
  SYS_ARCH_PROTECT(old_level);
 8007140:	f006 fe78 	bl	800de34 <sys_arch_protect>
  memp->next = *desc->tab;
 8007144:	68ab      	ldr	r3, [r5, #8]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800714a:	601c      	str	r4, [r3, #0]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800714c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007150:	f006 be7c 	b.w	800de4c <sys_arch_unprotect>
}
 8007154:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <memp_free+0x4c>)
 8007158:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800715c:	4907      	ldr	r1, [pc, #28]	; (800717c <memp_free+0x50>)
 800715e:	4808      	ldr	r0, [pc, #32]	; (8007180 <memp_free+0x54>)
 8007160:	f007 b852 	b.w	800e208 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <memp_free+0x4c>)
 8007166:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800716a:	4906      	ldr	r1, [pc, #24]	; (8007184 <memp_free+0x58>)
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <memp_free+0x54>)
 800716e:	f007 f84b 	bl	800e208 <iprintf>
 8007172:	e7e5      	b.n	8007140 <memp_free+0x14>
 8007174:	0800fd9c 	.word	0x0800fd9c
 8007178:	0800fc3c 	.word	0x0800fc3c
 800717c:	0800fce4 	.word	0x0800fce4
 8007180:	0800f0a0 	.word	0x0800f0a0
 8007184:	0800fcc4 	.word	0x0800fcc4

08007188 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007188:	f06f 000b 	mvn.w	r0, #11
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop

08007190 <netif_issue_reports>:
{
 8007190:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007192:	4604      	mov	r4, r0
 8007194:	b150      	cbz	r0, 80071ac <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007196:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800719a:	f003 0205 	and.w	r2, r3, #5
 800719e:	2a05      	cmp	r2, #5
 80071a0:	d103      	bne.n	80071aa <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80071a2:	6862      	ldr	r2, [r4, #4]
 80071a4:	b10a      	cbz	r2, 80071aa <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80071a6:	071b      	lsls	r3, r3, #28
 80071a8:	d408      	bmi.n	80071bc <netif_issue_reports+0x2c>
}
 80071aa:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <netif_issue_reports+0x38>)
 80071ae:	f240 326d 	movw	r2, #877	; 0x36d
 80071b2:	4906      	ldr	r1, [pc, #24]	; (80071cc <netif_issue_reports+0x3c>)
 80071b4:	4806      	ldr	r0, [pc, #24]	; (80071d0 <netif_issue_reports+0x40>)
 80071b6:	f007 f827 	bl	800e208 <iprintf>
 80071ba:	e7ec      	b.n	8007196 <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 80071bc:	1d21      	adds	r1, r4, #4
 80071be:	4620      	mov	r0, r4
}
 80071c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 80071c4:	f005 bdfc 	b.w	800cdc0 <etharp_request>
 80071c8:	0800fdd0 	.word	0x0800fdd0
 80071cc:	0800fe04 	.word	0x0800fe04
 80071d0:	0800f0a0 	.word	0x0800f0a0

080071d4 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	4605      	mov	r5, r0
 80071d8:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80071da:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 80071dc:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80071de:	b1b9      	cbz	r1, 8007210 <netif_do_set_ipaddr.isra.0+0x3c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80071e0:	686b      	ldr	r3, [r5, #4]
 80071e2:	6822      	ldr	r2, [r4, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d101      	bne.n	80071ec <netif_do_set_ipaddr.isra.0+0x18>
}
 80071e8:	b002      	add	sp, #8
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80071ec:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80071ee:	4630      	mov	r0, r6
 80071f0:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80071f2:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80071f4:	f002 f8ea 	bl	80093cc <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80071f8:	a901      	add	r1, sp, #4
 80071fa:	4630      	mov	r0, r6
 80071fc:	f005 f988 	bl	800c510 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007200:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007202:	2101      	movs	r1, #1
 8007204:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007206:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007208:	f7ff ffc2 	bl	8007190 <netif_issue_reports>
}
 800720c:	b002      	add	sp, #8
 800720e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007210:	4b03      	ldr	r3, [pc, #12]	; (8007220 <netif_do_set_ipaddr.isra.0+0x4c>)
 8007212:	f240 12cb 	movw	r2, #459	; 0x1cb
 8007216:	4903      	ldr	r1, [pc, #12]	; (8007224 <netif_do_set_ipaddr.isra.0+0x50>)
 8007218:	4803      	ldr	r0, [pc, #12]	; (8007228 <netif_do_set_ipaddr.isra.0+0x54>)
 800721a:	f006 fff5 	bl	800e208 <iprintf>
 800721e:	e7df      	b.n	80071e0 <netif_do_set_ipaddr.isra.0+0xc>
 8007220:	0800fdd0 	.word	0x0800fdd0
 8007224:	0800fe28 	.word	0x0800fe28
 8007228:	0800f0a0 	.word	0x0800f0a0

0800722c <netif_init>:
}
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop

08007230 <netif_set_addr>:
{
 8007230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007232:	460d      	mov	r5, r1
 8007234:	b083      	sub	sp, #12
 8007236:	4604      	mov	r4, r0
 8007238:	4616      	mov	r6, r2
 800723a:	461f      	mov	r7, r3
  LWIP_ASSERT_CORE_LOCKED();
 800723c:	f7fc fe42 	bl	8003ec4 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8007240:	b1ed      	cbz	r5, 800727e <netif_set_addr+0x4e>
  if (netmask == NULL) {
 8007242:	b1be      	cbz	r6, 8007274 <netif_set_addr+0x44>
  if (gw == NULL) {
 8007244:	b1cf      	cbz	r7, 800727a <netif_set_addr+0x4a>
  remove = ip4_addr_isany(ipaddr);
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	b993      	cbnz	r3, 8007270 <netif_set_addr+0x40>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800724a:	4629      	mov	r1, r5
 800724c:	aa01      	add	r2, sp, #4
 800724e:	4620      	mov	r0, r4
 8007250:	f7ff ffc0 	bl	80071d4 <netif_do_set_ipaddr.isra.0>
 8007254:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007256:	6833      	ldr	r3, [r6, #0]
 8007258:	68a2      	ldr	r2, [r4, #8]
 800725a:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800725c:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800725e:	bf18      	it	ne
 8007260:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007266:	bf18      	it	ne
 8007268:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800726a:	b161      	cbz	r1, 8007286 <netif_set_addr+0x56>
}
 800726c:	b003      	add	sp, #12
 800726e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8007270:	2100      	movs	r1, #0
 8007272:	e7f0      	b.n	8007256 <netif_set_addr+0x26>
    netmask = IP4_ADDR_ANY4;
 8007274:	4e07      	ldr	r6, [pc, #28]	; (8007294 <netif_set_addr+0x64>)
  if (gw == NULL) {
 8007276:	2f00      	cmp	r7, #0
 8007278:	d1e5      	bne.n	8007246 <netif_set_addr+0x16>
    gw = IP4_ADDR_ANY4;
 800727a:	4f06      	ldr	r7, [pc, #24]	; (8007294 <netif_set_addr+0x64>)
 800727c:	e7e3      	b.n	8007246 <netif_set_addr+0x16>
    ipaddr = IP4_ADDR_ANY4;
 800727e:	4d05      	ldr	r5, [pc, #20]	; (8007294 <netif_set_addr+0x64>)
  if (netmask == NULL) {
 8007280:	2e00      	cmp	r6, #0
 8007282:	d1df      	bne.n	8007244 <netif_set_addr+0x14>
 8007284:	e7f6      	b.n	8007274 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007286:	aa01      	add	r2, sp, #4
 8007288:	4629      	mov	r1, r5
 800728a:	4620      	mov	r0, r4
 800728c:	f7ff ffa2 	bl	80071d4 <netif_do_set_ipaddr.isra.0>
}
 8007290:	b003      	add	sp, #12
 8007292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007294:	08011794 	.word	0x08011794

08007298 <netif_add>:
{
 8007298:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800729c:	4606      	mov	r6, r0
 800729e:	460c      	mov	r4, r1
 80072a0:	4615      	mov	r5, r2
 80072a2:	461f      	mov	r7, r3
 80072a4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  LWIP_ASSERT_CORE_LOCKED();
 80072a8:	f7fc fe0c 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80072ac:	2e00      	cmp	r6, #0
 80072ae:	f000 8083 	beq.w	80073b8 <netif_add+0x120>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80072b2:	f1b8 0f00 	cmp.w	r8, #0
 80072b6:	f000 8088 	beq.w	80073ca <netif_add+0x132>
  if (ipaddr == NULL) {
 80072ba:	2c00      	cmp	r4, #0
 80072bc:	d070      	beq.n	80073a0 <netif_add+0x108>
  if (netmask == NULL) {
 80072be:	2d00      	cmp	r5, #0
 80072c0:	d069      	beq.n	8007396 <netif_add+0xfe>
  if (gw == NULL) {
 80072c2:	2f00      	cmp	r7, #0
 80072c4:	d06a      	beq.n	800739c <netif_add+0x104>
  netif->state = state;
 80072c6:	980a      	ldr	r0, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072c8:	4621      	mov	r1, r4
  netif->num = netif_num;
 80072ca:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80073f8 <netif_add+0x160>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80072ce:	2400      	movs	r4, #0
  netif->state = state;
 80072d0:	6230      	str	r0, [r6, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072d2:	463b      	mov	r3, r7
  netif->input = input;
 80072d4:	980c      	ldr	r0, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072d6:	462a      	mov	r2, r5
  ip_addr_set_zero_ip4(&netif->gw);
 80072d8:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 80072da:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 80072dc:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 80072e0:	84b4      	strh	r4, [r6, #36]	; 0x24
  netif->num = netif_num;
 80072e2:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->output = netif_null_output_ip4;
 80072e6:	483d      	ldr	r0, [pc, #244]	; (80073dc <netif_add+0x144>)
  netif->flags = 0;
 80072e8:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
  netif->output = netif_null_output_ip4;
 80072ec:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072ee:	4630      	mov	r0, r6
  netif->link_callback = NULL;
 80072f0:	61f4      	str	r4, [r6, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 80072f2:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80072f6:	f7ff ff9b 	bl	8007230 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80072fa:	4630      	mov	r0, r6
 80072fc:	47c0      	blx	r8
 80072fe:	2800      	cmp	r0, #0
 8007300:	d157      	bne.n	80073b2 <netif_add+0x11a>
      if (netif->num == 255) {
 8007302:	f896 2030 	ldrb.w	r2, [r6, #48]	; 0x30
 8007306:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80073fc <netif_add+0x164>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800730a:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80073ec <netif_add+0x154>
 800730e:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8007400 <netif_add+0x168>
 8007312:	4f33      	ldr	r7, [pc, #204]	; (80073e0 <netif_add+0x148>)
      if (netif->num == 255) {
 8007314:	2aff      	cmp	r2, #255	; 0xff
 8007316:	d102      	bne.n	800731e <netif_add+0x86>
        netif->num = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800731e:	f8d8 4000 	ldr.w	r4, [r8]
 8007322:	2c00      	cmp	r4, #0
 8007324:	d042      	beq.n	80073ac <netif_add+0x114>
      num_netifs = 0;
 8007326:	2500      	movs	r5, #0
 8007328:	e007      	b.n	800733a <netif_add+0xa2>
        if (netif2->num == netif->num) {
 800732a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800732e:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007332:	429a      	cmp	r2, r3
 8007334:	d014      	beq.n	8007360 <netif_add+0xc8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007336:	6824      	ldr	r4, [r4, #0]
 8007338:	b1fc      	cbz	r4, 800737a <netif_add+0xe2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800733a:	42a6      	cmp	r6, r4
        num_netifs++;
 800733c:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007340:	d013      	beq.n	800736a <netif_add+0xd2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007342:	2dff      	cmp	r5, #255	; 0xff
 8007344:	ddf1      	ble.n	800732a <netif_add+0x92>
 8007346:	465b      	mov	r3, fp
 8007348:	f240 128d 	movw	r2, #397	; 0x18d
 800734c:	4925      	ldr	r1, [pc, #148]	; (80073e4 <netif_add+0x14c>)
 800734e:	4638      	mov	r0, r7
 8007350:	f006 ff5a 	bl	800e208 <iprintf>
        if (netif2->num == netif->num) {
 8007354:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007358:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800735c:	429a      	cmp	r2, r3
 800735e:	d1ea      	bne.n	8007336 <netif_add+0x9e>
          netif->num++;
 8007360:	3201      	adds	r2, #1
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	f886 2030 	strb.w	r2, [r6, #48]	; 0x30
    } while (netif2 != NULL);
 8007368:	e7d4      	b.n	8007314 <netif_add+0x7c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800736a:	465b      	mov	r3, fp
 800736c:	f240 128b 	movw	r2, #395	; 0x18b
 8007370:	4649      	mov	r1, r9
 8007372:	4638      	mov	r0, r7
 8007374:	f006 ff48 	bl	800e208 <iprintf>
 8007378:	e7e3      	b.n	8007342 <netif_add+0xaa>
  netif->next = netif_list;
 800737a:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 800737e:	2bfe      	cmp	r3, #254	; 0xfe
 8007380:	d012      	beq.n	80073a8 <netif_add+0x110>
    netif_num = (u8_t)(netif->num + 1);
 8007382:	3301      	adds	r3, #1
 8007384:	b2db      	uxtb	r3, r3
  return netif;
 8007386:	4630      	mov	r0, r6
  netif->next = netif_list;
 8007388:	6034      	str	r4, [r6, #0]
 800738a:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 800738e:	f8c8 6000 	str.w	r6, [r8]
}
 8007392:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8007396:	4d14      	ldr	r5, [pc, #80]	; (80073e8 <netif_add+0x150>)
  if (gw == NULL) {
 8007398:	2f00      	cmp	r7, #0
 800739a:	d194      	bne.n	80072c6 <netif_add+0x2e>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800739c:	4f12      	ldr	r7, [pc, #72]	; (80073e8 <netif_add+0x150>)
 800739e:	e792      	b.n	80072c6 <netif_add+0x2e>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80073a0:	4c11      	ldr	r4, [pc, #68]	; (80073e8 <netif_add+0x150>)
  if (netmask == NULL) {
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	d18d      	bne.n	80072c2 <netif_add+0x2a>
 80073a6:	e7f6      	b.n	8007396 <netif_add+0xfe>
    netif_num = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e7ec      	b.n	8007386 <netif_add+0xee>
  if (netif->num == 254) {
 80073ac:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80073b0:	e7e5      	b.n	800737e <netif_add+0xe6>
    return NULL;
 80073b2:	4620      	mov	r0, r4
}
 80073b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <netif_add+0x154>)
 80073ba:	f240 1227 	movw	r2, #295	; 0x127
 80073be:	490c      	ldr	r1, [pc, #48]	; (80073f0 <netif_add+0x158>)
 80073c0:	4807      	ldr	r0, [pc, #28]	; (80073e0 <netif_add+0x148>)
 80073c2:	f006 ff21 	bl	800e208 <iprintf>
 80073c6:	4630      	mov	r0, r6
 80073c8:	e7e3      	b.n	8007392 <netif_add+0xfa>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <netif_add+0x154>)
 80073cc:	f44f 7294 	mov.w	r2, #296	; 0x128
 80073d0:	4908      	ldr	r1, [pc, #32]	; (80073f4 <netif_add+0x15c>)
 80073d2:	4803      	ldr	r0, [pc, #12]	; (80073e0 <netif_add+0x148>)
 80073d4:	f006 ff18 	bl	800e208 <iprintf>
 80073d8:	4640      	mov	r0, r8
 80073da:	e7da      	b.n	8007392 <netif_add+0xfa>
 80073dc:	08007189 	.word	0x08007189
 80073e0:	0800f0a0 	.word	0x0800f0a0
 80073e4:	0800fe8c 	.word	0x0800fe8c
 80073e8:	08011794 	.word	0x08011794
 80073ec:	0800fdd0 	.word	0x0800fdd0
 80073f0:	0800fe38 	.word	0x0800fe38
 80073f4:	0800fe54 	.word	0x0800fe54
 80073f8:	24010574 	.word	0x24010574
 80073fc:	24010570 	.word	0x24010570
 8007400:	0800fe78 	.word	0x0800fe78

08007404 <netif_set_default>:
{
 8007404:	b510      	push	{r4, lr}
 8007406:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007408:	f7fc fd5c 	bl	8003ec4 <sys_check_core_locking>
  netif_default = netif;
 800740c:	4b01      	ldr	r3, [pc, #4]	; (8007414 <netif_set_default+0x10>)
 800740e:	601c      	str	r4, [r3, #0]
}
 8007410:	bd10      	pop	{r4, pc}
 8007412:	bf00      	nop
 8007414:	2401056c 	.word	0x2401056c

08007418 <netif_set_up>:
{
 8007418:	b510      	push	{r4, lr}
 800741a:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800741c:	f7fc fd52 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007420:	b174      	cbz	r4, 8007440 <netif_set_up+0x28>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007422:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007426:	07da      	lsls	r2, r3, #31
 8007428:	d500      	bpl.n	800742c <netif_set_up+0x14>
}
 800742a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_UP);
 800742c:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007430:	4620      	mov	r0, r4
 8007432:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007434:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8007438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800743c:	f7ff bea8 	b.w	8007190 <netif_issue_reports>
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007440:	4b04      	ldr	r3, [pc, #16]	; (8007454 <netif_set_up+0x3c>)
 8007442:	f44f 7254 	mov.w	r2, #848	; 0x350
 8007446:	4904      	ldr	r1, [pc, #16]	; (8007458 <netif_set_up+0x40>)
 8007448:	4804      	ldr	r0, [pc, #16]	; (800745c <netif_set_up+0x44>)
}
 800744a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800744e:	f006 bedb 	b.w	800e208 <iprintf>
 8007452:	bf00      	nop
 8007454:	0800fdd0 	.word	0x0800fdd0
 8007458:	0800febc 	.word	0x0800febc
 800745c:	0800f0a0 	.word	0x0800f0a0

08007460 <netif_set_down>:
{
 8007460:	b510      	push	{r4, lr}
 8007462:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8007464:	f7fc fd2e 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007468:	b17c      	cbz	r4, 800748a <netif_set_down+0x2a>
  if (netif->flags & NETIF_FLAG_UP) {
 800746a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800746e:	07da      	lsls	r2, r3, #31
 8007470:	d505      	bpl.n	800747e <netif_set_down+0x1e>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007472:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007476:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007478:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800747c:	d400      	bmi.n	8007480 <netif_set_down+0x20>
}
 800747e:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8007480:	4620      	mov	r0, r4
}
 8007482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_cleanup_netif(netif);
 8007486:	f005 ba53 	b.w	800c930 <etharp_cleanup_netif>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800748a:	4b04      	ldr	r3, [pc, #16]	; (800749c <netif_set_down+0x3c>)
 800748c:	f240 329b 	movw	r2, #923	; 0x39b
 8007490:	4903      	ldr	r1, [pc, #12]	; (80074a0 <netif_set_down+0x40>)
 8007492:	4804      	ldr	r0, [pc, #16]	; (80074a4 <netif_set_down+0x44>)
}
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007498:	f006 beb6 	b.w	800e208 <iprintf>
 800749c:	0800fdd0 	.word	0x0800fdd0
 80074a0:	0800fed8 	.word	0x0800fed8
 80074a4:	0800f0a0 	.word	0x0800f0a0

080074a8 <netif_set_link_up>:
{
 80074a8:	b510      	push	{r4, lr}
 80074aa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80074ac:	f7fc fd0a 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80074b0:	b19c      	cbz	r4, 80074da <netif_set_link_up+0x32>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80074b2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80074b6:	075a      	lsls	r2, r3, #29
 80074b8:	d500      	bpl.n	80074bc <netif_set_link_up+0x14>
}
 80074ba:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80074bc:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80074c0:	2103      	movs	r1, #3
 80074c2:	4620      	mov	r0, r4
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80074c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80074c8:	f7ff fe62 	bl	8007190 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80074cc:	69e3      	ldr	r3, [r4, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f3      	beq.n	80074ba <netif_set_link_up+0x12>
 80074d2:	4620      	mov	r0, r4
}
 80074d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80074d8:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80074da:	4b04      	ldr	r3, [pc, #16]	; (80074ec <netif_set_link_up+0x44>)
 80074dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80074e0:	4903      	ldr	r1, [pc, #12]	; (80074f0 <netif_set_link_up+0x48>)
 80074e2:	4804      	ldr	r0, [pc, #16]	; (80074f4 <netif_set_link_up+0x4c>)
}
 80074e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80074e8:	f006 be8e 	b.w	800e208 <iprintf>
 80074ec:	0800fdd0 	.word	0x0800fdd0
 80074f0:	0800fef8 	.word	0x0800fef8
 80074f4:	0800f0a0 	.word	0x0800f0a0

080074f8 <netif_set_link_down>:
{
 80074f8:	b510      	push	{r4, lr}
 80074fa:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 80074fc:	f7fc fce2 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007500:	b174      	cbz	r4, 8007520 <netif_set_link_down+0x28>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007502:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8007506:	075a      	lsls	r2, r3, #29
 8007508:	d509      	bpl.n	800751e <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800750a:	f023 0304 	bic.w	r3, r3, #4
    NETIF_LINK_CALLBACK(netif);
 800750e:	69e2      	ldr	r2, [r4, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007510:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007514:	b11a      	cbz	r2, 800751e <netif_set_link_down+0x26>
 8007516:	4620      	mov	r0, r4
}
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800751c:	4710      	bx	r2
}
 800751e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007520:	4b04      	ldr	r3, [pc, #16]	; (8007534 <netif_set_link_down+0x3c>)
 8007522:	f240 4206 	movw	r2, #1030	; 0x406
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <netif_set_link_down+0x40>)
 8007528:	4804      	ldr	r0, [pc, #16]	; (800753c <netif_set_link_down+0x44>)
}
 800752a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800752e:	f006 be6b 	b.w	800e208 <iprintf>
 8007532:	bf00      	nop
 8007534:	0800fdd0 	.word	0x0800fdd0
 8007538:	0800ff1c 	.word	0x0800ff1c
 800753c:	0800f0a0 	.word	0x0800f0a0

08007540 <netif_set_link_callback>:
{
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8007546:	f7fc fcbd 	bl	8003ec4 <sys_check_core_locking>
  if (netif) {
 800754a:	b104      	cbz	r4, 800754e <netif_set_link_callback+0xe>
    netif->link_callback = link_callback;
 800754c:	61e5      	str	r5, [r4, #28]
}
 800754e:	bd38      	pop	{r3, r4, r5, pc}

08007550 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007550:	b510      	push	{r4, lr}
 8007552:	4604      	mov	r4, r0
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 8007554:	f7fc fcb6 	bl	8003ec4 <sys_check_core_locking>

  if (idx != NETIF_NO_INDEX) {
 8007558:	b164      	cbz	r4, 8007574 <netif_get_by_index+0x24>
    NETIF_FOREACH(netif) {
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <netif_get_by_index+0x28>)
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	b910      	cbnz	r0, 8007566 <netif_get_by_index+0x16>
 8007560:	e007      	b.n	8007572 <netif_get_by_index+0x22>
 8007562:	6800      	ldr	r0, [r0, #0]
 8007564:	b128      	cbz	r0, 8007572 <netif_get_by_index+0x22>
      if (idx == netif_get_index(netif)) {
 8007566:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800756a:	3301      	adds	r3, #1
 800756c:	b2db      	uxtb	r3, r3
 800756e:	42a3      	cmp	r3, r4
 8007570:	d1f7      	bne.n	8007562 <netif_get_by_index+0x12>
      }
    }
  }

  return NULL;
}
 8007572:	bd10      	pop	{r4, pc}
  return NULL;
 8007574:	4620      	mov	r0, r4
}
 8007576:	bd10      	pop	{r4, pc}
 8007578:	24010570 	.word	0x24010570

0800757c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800757c:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800757e:	f006 fc59 	bl	800de34 <sys_arch_protect>
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <pbuf_free_ooseq_callback+0x2c>)
 8007584:	2200      	movs	r2, #0
 8007586:	701a      	strb	r2, [r3, #0]
 8007588:	f006 fc60 	bl	800de4c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <pbuf_free_ooseq_callback+0x30>)
 800758e:	6818      	ldr	r0, [r3, #0]
 8007590:	b910      	cbnz	r0, 8007598 <pbuf_free_ooseq_callback+0x1c>
 8007592:	e008      	b.n	80075a6 <pbuf_free_ooseq_callback+0x2a>
 8007594:	68c0      	ldr	r0, [r0, #12]
 8007596:	b130      	cbz	r0, 80075a6 <pbuf_free_ooseq_callback+0x2a>
    if (pcb->ooseq != NULL) {
 8007598:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0fa      	beq.n	8007594 <pbuf_free_ooseq_callback+0x18>
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 800759e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      tcp_free_ooseq(pcb);
 80075a2:	f001 bf3d 	b.w	8009420 <tcp_free_ooseq>
}
 80075a6:	bd08      	pop	{r3, pc}
 80075a8:	24010575 	.word	0x24010575
 80075ac:	24010578 	.word	0x24010578

080075b0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 80075b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80075b4:	4605      	mov	r5, r0
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d055      	beq.n	8007666 <pbuf_free.part.0+0xb6>
  count = 0;
 80075ba:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80075bc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8007678 <pbuf_free.part.0+0xc8>
 80075c0:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800767c <pbuf_free.part.0+0xcc>
 80075c4:	4f29      	ldr	r7, [pc, #164]	; (800766c <pbuf_free.part.0+0xbc>)
 80075c6:	e008      	b.n	80075da <pbuf_free.part.0+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80075c8:	692b      	ldr	r3, [r5, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d03d      	beq.n	800764a <pbuf_free.part.0+0x9a>
        pc->custom_free_function(p);
 80075ce:	4628      	mov	r0, r5
 80075d0:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 80075d2:	3601      	adds	r6, #1
 80075d4:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 80075d6:	b1fc      	cbz	r4, 8007618 <pbuf_free.part.0+0x68>
 80075d8:	4625      	mov	r5, r4
    SYS_ARCH_PROTECT(old_level);
 80075da:	f006 fc2b 	bl	800de34 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80075de:	7bab      	ldrb	r3, [r5, #14]
    SYS_ARCH_PROTECT(old_level);
 80075e0:	4604      	mov	r4, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80075e2:	b1e3      	cbz	r3, 800761e <pbuf_free.part.0+0x6e>
    ref = --(p->ref);
 80075e4:	3b01      	subs	r3, #1
    SYS_ARCH_UNPROTECT(old_level);
 80075e6:	4620      	mov	r0, r4
    ref = --(p->ref);
 80075e8:	b2dc      	uxtb	r4, r3
 80075ea:	73ac      	strb	r4, [r5, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80075ec:	f006 fc2e 	bl	800de4c <sys_arch_unprotect>
    if (ref == 0) {
 80075f0:	b994      	cbnz	r4, 8007618 <pbuf_free.part.0+0x68>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80075f2:	7b6b      	ldrb	r3, [r5, #13]
      q = p->next;
 80075f4:	682c      	ldr	r4, [r5, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80075f6:	079b      	lsls	r3, r3, #30
 80075f8:	d4e6      	bmi.n	80075c8 <pbuf_free.part.0+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 80075fa:	7b2b      	ldrb	r3, [r5, #12]
 80075fc:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007600:	2b02      	cmp	r3, #2
 8007602:	d01d      	beq.n	8007640 <pbuf_free.part.0+0x90>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007604:	2b01      	cmp	r3, #1
 8007606:	d029      	beq.n	800765c <pbuf_free.part.0+0xac>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007608:	b993      	cbnz	r3, 8007630 <pbuf_free.part.0+0x80>
      count++;
 800760a:	3601      	adds	r6, #1
          mem_free(p);
 800760c:	4628      	mov	r0, r5
 800760e:	f7ff fa5f 	bl	8006ad0 <mem_free>
      count++;
 8007612:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007614:	2c00      	cmp	r4, #0
 8007616:	d1df      	bne.n	80075d8 <pbuf_free.part.0+0x28>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007618:	4630      	mov	r0, r6
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800761e:	4643      	mov	r3, r8
 8007620:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007624:	4649      	mov	r1, r9
 8007626:	4638      	mov	r0, r7
 8007628:	f006 fdee 	bl	800e208 <iprintf>
    ref = --(p->ref);
 800762c:	7bab      	ldrb	r3, [r5, #14]
 800762e:	e7d9      	b.n	80075e4 <pbuf_free.part.0+0x34>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007630:	4643      	mov	r3, r8
 8007632:	f240 320f 	movw	r2, #783	; 0x30f
 8007636:	490e      	ldr	r1, [pc, #56]	; (8007670 <pbuf_free.part.0+0xc0>)
 8007638:	4638      	mov	r0, r7
 800763a:	f006 fde5 	bl	800e208 <iprintf>
 800763e:	e7c8      	b.n	80075d2 <pbuf_free.part.0+0x22>
          memp_free(MEMP_PBUF_POOL, p);
 8007640:	4629      	mov	r1, r5
 8007642:	200c      	movs	r0, #12
 8007644:	f7ff fd72 	bl	800712c <memp_free>
 8007648:	e7c3      	b.n	80075d2 <pbuf_free.part.0+0x22>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800764a:	4643      	mov	r3, r8
 800764c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007650:	4908      	ldr	r1, [pc, #32]	; (8007674 <pbuf_free.part.0+0xc4>)
 8007652:	4638      	mov	r0, r7
 8007654:	f006 fdd8 	bl	800e208 <iprintf>
        pc->custom_free_function(p);
 8007658:	692b      	ldr	r3, [r5, #16]
 800765a:	e7b8      	b.n	80075ce <pbuf_free.part.0+0x1e>
          memp_free(MEMP_PBUF, p);
 800765c:	4629      	mov	r1, r5
 800765e:	200b      	movs	r0, #11
 8007660:	f7ff fd64 	bl	800712c <memp_free>
 8007664:	e7b5      	b.n	80075d2 <pbuf_free.part.0+0x22>
  count = 0;
 8007666:	4606      	mov	r6, r0
 8007668:	e7d6      	b.n	8007618 <pbuf_free.part.0+0x68>
 800766a:	bf00      	nop
 800766c:	0800f0a0 	.word	0x0800f0a0
 8007670:	0800ffac 	.word	0x0800ffac
 8007674:	0800ff88 	.word	0x0800ff88
 8007678:	0800ff40 	.word	0x0800ff40
 800767c:	0800ff70 	.word	0x0800ff70

08007680 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 8007680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 8007684:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007686:	f8df a124 	ldr.w	sl, [pc, #292]	; 80077ac <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 800768a:	4605      	mov	r5, r0
 800768c:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 800768e:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007690:	8944      	ldrh	r4, [r0, #10]
 8007692:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007694:	f8df b128 	ldr.w	fp, [pc, #296]	; 80077c0 <pbuf_copy.part.0+0x140>
 8007698:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80077b4 <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800769c:	1be4      	subs	r4, r4, r7
 800769e:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076a0:	6868      	ldr	r0, [r5, #4]
 80076a2:	4294      	cmp	r4, r2
 80076a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80076a8:	4438      	add	r0, r7
 80076aa:	bf28      	it	cs
 80076ac:	4614      	movcs	r4, r2
 80076ae:	4431      	add	r1, r6
 80076b0:	4622      	mov	r2, r4
    offset_to += len;
 80076b2:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80076b4:	f006 fcfd 	bl	800e0b2 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076b8:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80076ba:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076bc:	429f      	cmp	r7, r3
 80076be:	d837      	bhi.n	8007730 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80076c0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 80076c4:	4296      	cmp	r6, r2
 80076c6:	d829      	bhi.n	800771c <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 80076c8:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80076ca:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 80076cc:	d317      	bcc.n	80076fe <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 80076ce:	429f      	cmp	r7, r3
      p_from = p_from->next;
 80076d0:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 80076d4:	d04b      	beq.n	800776e <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80076d6:	f1b8 0f00 	cmp.w	r8, #0
 80076da:	d144      	bne.n	8007766 <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80076dc:	892a      	ldrh	r2, [r5, #8]
 80076de:	896b      	ldrh	r3, [r5, #10]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d14c      	bne.n	800777e <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80076e4:	6828      	ldr	r0, [r5, #0]
 80076e6:	b140      	cbz	r0, 80076fa <pbuf_copy.part.0+0x7a>
 80076e8:	4b30      	ldr	r3, [pc, #192]	; (80077ac <pbuf_copy.part.0+0x12c>)
 80076ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80076ee:	4930      	ldr	r1, [pc, #192]	; (80077b0 <pbuf_copy.part.0+0x130>)
 80076f0:	4830      	ldr	r0, [pc, #192]	; (80077b4 <pbuf_copy.part.0+0x134>)
 80076f2:	f006 fd89 	bl	800e208 <iprintf>
 80076f6:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 80076fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 80076fe:	429f      	cmp	r7, r3
 8007700:	d040      	beq.n	8007784 <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007702:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8007706:	4293      	cmp	r3, r2
 8007708:	d01a      	beq.n	8007740 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800770a:	896c      	ldrh	r4, [r5, #10]
 800770c:	2d00      	cmp	r5, #0
 800770e:	d0c5      	beq.n	800769c <pbuf_copy.part.0+0x1c>
 8007710:	892b      	ldrh	r3, [r5, #8]
 8007712:	42a3      	cmp	r3, r4
 8007714:	d045      	beq.n	80077a2 <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007716:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800771a:	e7bf      	b.n	800769c <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800771c:	f240 32da 	movw	r2, #986	; 0x3da
 8007720:	4653      	mov	r3, sl
 8007722:	4925      	ldr	r1, [pc, #148]	; (80077b8 <pbuf_copy.part.0+0x138>)
 8007724:	4648      	mov	r0, r9
 8007726:	f006 fd6f 	bl	800e208 <iprintf>
    if (offset_from >= p_from->len) {
 800772a:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800772e:	e7cb      	b.n	80076c8 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007730:	4653      	mov	r3, sl
 8007732:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007736:	4659      	mov	r1, fp
 8007738:	4648      	mov	r0, r9
 800773a:	f006 fd65 	bl	800e208 <iprintf>
 800773e:	e7bf      	b.n	80076c0 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007740:	f8d8 3000 	ldr.w	r3, [r8]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0e0      	beq.n	800770a <pbuf_copy.part.0+0x8a>
 8007748:	4b18      	ldr	r3, [pc, #96]	; (80077ac <pbuf_copy.part.0+0x12c>)
 800774a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800774e:	4918      	ldr	r1, [pc, #96]	; (80077b0 <pbuf_copy.part.0+0x130>)
 8007750:	4818      	ldr	r0, [pc, #96]	; (80077b4 <pbuf_copy.part.0+0x134>)
 8007752:	f006 fd59 	bl	800e208 <iprintf>
 8007756:	f06f 0005 	mvn.w	r0, #5
}
 800775a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800775e:	f1b8 0f00 	cmp.w	r8, #0
 8007762:	d00a      	beq.n	800777a <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 8007764:	2700      	movs	r7, #0
 8007766:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007768:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800776c:	e7c9      	b.n	8007702 <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 800776e:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007770:	2d00      	cmp	r5, #0
 8007772:	d1f4      	bne.n	800775e <pbuf_copy.part.0+0xde>
 8007774:	f1b8 0f00 	cmp.w	r8, #0
 8007778:	d108      	bne.n	800778c <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800777a:	2d00      	cmp	r5, #0
 800777c:	d1ae      	bne.n	80076dc <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 800777e:	2000      	movs	r0, #0
}
 8007780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8007784:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007786:	b10d      	cbz	r5, 800778c <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 8007788:	2700      	movs	r7, #0
 800778a:	e7ed      	b.n	8007768 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800778c:	4b07      	ldr	r3, [pc, #28]	; (80077ac <pbuf_copy.part.0+0x12c>)
 800778e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007792:	490a      	ldr	r1, [pc, #40]	; (80077bc <pbuf_copy.part.0+0x13c>)
 8007794:	4807      	ldr	r0, [pc, #28]	; (80077b4 <pbuf_copy.part.0+0x134>)
 8007796:	f006 fd37 	bl	800e208 <iprintf>
 800779a:	f06f 000f 	mvn.w	r0, #15
}
 800779e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80077a2:	682b      	ldr	r3, [r5, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d0b6      	beq.n	8007716 <pbuf_copy.part.0+0x96>
 80077a8:	e79e      	b.n	80076e8 <pbuf_copy.part.0+0x68>
 80077aa:	bf00      	nop
 80077ac:	0800ff40 	.word	0x0800ff40
 80077b0:	08010004 	.word	0x08010004
 80077b4:	0800f0a0 	.word	0x0800f0a0
 80077b8:	0800ffd8 	.word	0x0800ffd8
 80077bc:	0800fff4 	.word	0x0800fff4
 80077c0:	0800ffc0 	.word	0x0800ffc0

080077c4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077c4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80077c8:	2b01      	cmp	r3, #1
{
 80077ca:	b570      	push	{r4, r5, r6, lr}
 80077cc:	4614      	mov	r4, r2
 80077ce:	4606      	mov	r6, r0
 80077d0:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077d2:	d10d      	bne.n	80077f0 <pbuf_alloc_reference+0x2c>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80077d4:	200b      	movs	r0, #11
 80077d6:	f7ff fc63 	bl	80070a0 <memp_malloc>
  if (p == NULL) {
 80077da:	b140      	cbz	r0, 80077ee <pbuf_alloc_reference+0x2a>
  p->next = NULL;
 80077dc:	2300      	movs	r3, #0
  p->ref = 1;
 80077de:	2201      	movs	r2, #1
  p->payload = payload;
 80077e0:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80077e2:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 80077e4:	6003      	str	r3, [r0, #0]
  p->len = len;
 80077e6:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 80077e8:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 80077ea:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80077ec:	81c2      	strh	r2, [r0, #14]
}
 80077ee:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <pbuf_alloc_reference+0x3c>)
 80077f2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80077f6:	4903      	ldr	r1, [pc, #12]	; (8007804 <pbuf_alloc_reference+0x40>)
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <pbuf_alloc_reference+0x44>)
 80077fa:	f006 fd05 	bl	800e208 <iprintf>
 80077fe:	e7e9      	b.n	80077d4 <pbuf_alloc_reference+0x10>
 8007800:	0800ff40 	.word	0x0800ff40
 8007804:	08010030 	.word	0x08010030
 8007808:	0800f0a0 	.word	0x0800f0a0

0800780c <pbuf_alloc>:
  switch (type) {
 800780c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8007810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007814:	4688      	mov	r8, r1
 8007816:	b083      	sub	sp, #12
  u16_t offset = (u16_t)layer;
 8007818:	fa1f f980 	uxth.w	r9, r0
  switch (type) {
 800781c:	d040      	beq.n	80078a0 <pbuf_alloc+0x94>
 800781e:	d80f      	bhi.n	8007840 <pbuf_alloc+0x34>
 8007820:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 8007824:	2c01      	cmp	r4, #1
 8007826:	d035      	beq.n	8007894 <pbuf_alloc+0x88>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007828:	4b47      	ldr	r3, [pc, #284]	; (8007948 <pbuf_alloc+0x13c>)
 800782a:	f240 1227 	movw	r2, #295	; 0x127
 800782e:	4947      	ldr	r1, [pc, #284]	; (800794c <pbuf_alloc+0x140>)
      return NULL;
 8007830:	2400      	movs	r4, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007832:	4847      	ldr	r0, [pc, #284]	; (8007950 <pbuf_alloc+0x144>)
 8007834:	f006 fce8 	bl	800e208 <iprintf>
}
 8007838:	4620      	mov	r0, r4
 800783a:	b003      	add	sp, #12
 800783c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  switch (type) {
 8007840:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8007844:	d1f0      	bne.n	8007828 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007846:	f109 0303 	add.w	r3, r9, #3
 800784a:	1cca      	adds	r2, r1, #3
 800784c:	4605      	mov	r5, r0
 800784e:	f022 0203 	bic.w	r2, r2, #3
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	4413      	add	r3, r2
 8007858:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800785a:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800785e:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007860:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007862:	d34c      	bcc.n	80078fe <pbuf_alloc+0xf2>
 8007864:	4282      	cmp	r2, r0
 8007866:	d84a      	bhi.n	80078fe <pbuf_alloc+0xf2>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007868:	f7ff fae0 	bl	8006e2c <mem_malloc>
      if (p == NULL) {
 800786c:	4604      	mov	r4, r0
 800786e:	2800      	cmp	r0, #0
 8007870:	d0e2      	beq.n	8007838 <pbuf_alloc+0x2c>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007872:	1943      	adds	r3, r0, r5
  p->next = NULL;
 8007874:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8007876:	4a37      	ldr	r2, [pc, #220]	; (8007954 <pbuf_alloc+0x148>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007878:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 800787a:	f8a0 8008 	strh.w	r8, [r0, #8]
  p->next = NULL;
 800787e:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007880:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 8007884:	f8a0 800a 	strh.w	r8, [r0, #10]
  p->type_internal = (u8_t)type;
 8007888:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 800788a:	6043      	str	r3, [r0, #4]
}
 800788c:	4620      	mov	r0, r4
 800788e:	b003      	add	sp, #12
 8007890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8007894:	2000      	movs	r0, #0
}
 8007896:	b003      	add	sp, #12
 8007898:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800789c:	f7ff bf92 	b.w	80077c4 <pbuf_alloc_reference>
  switch (type) {
 80078a0:	2100      	movs	r1, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078a2:	f240 56ec 	movw	r6, #1516	; 0x5ec
  p->type_internal = (u8_t)type;
 80078a6:	4d2c      	ldr	r5, [pc, #176]	; (8007958 <pbuf_alloc+0x14c>)
  switch (type) {
 80078a8:	460c      	mov	r4, r1
 80078aa:	e009      	b.n	80078c0 <pbuf_alloc+0xb4>
          last->next = q;
 80078ac:	6038      	str	r0, [r7, #0]
        rem_len = (u16_t)(rem_len - qlen);
 80078ae:	eba8 0303 	sub.w	r3, r8, r3
        offset = 0;
 80078b2:	f04f 0900 	mov.w	r9, #0
        rem_len = (u16_t)(rem_len - qlen);
 80078b6:	fa1f f883 	uxth.w	r8, r3
      } while (rem_len > 0);
 80078ba:	f1b8 0f00 	cmp.w	r8, #0
 80078be:	d0bb      	beq.n	8007838 <pbuf_alloc+0x2c>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80078c0:	200c      	movs	r0, #12
 80078c2:	460f      	mov	r7, r1
 80078c4:	f7ff fbec 	bl	80070a0 <memp_malloc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078c8:	f109 0203 	add.w	r2, r9, #3
  p->next = NULL;
 80078cc:	2300      	movs	r3, #0
        if (q == NULL) {
 80078ce:	4601      	mov	r1, r0
 80078d0:	b1d0      	cbz	r0, 8007908 <pbuf_alloc+0xfc>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078d2:	f022 0203 	bic.w	r2, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80078d6:	4481      	add	r9, r0
  p->next = NULL;
 80078d8:	6003      	str	r3, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078da:	1ab2      	subs	r2, r6, r2
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80078dc:	f109 0913 	add.w	r9, r9, #19
  p->tot_len = tot_len;
 80078e0:	f8a0 8008 	strh.w	r8, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078e4:	b293      	uxth	r3, r2
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80078e6:	f029 0203 	bic.w	r2, r9, #3
  p->type_internal = (u8_t)type;
 80078ea:	60c5      	str	r5, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078ec:	4543      	cmp	r3, r8
  p->payload = payload;
 80078ee:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80078f0:	bf28      	it	cs
 80078f2:	4643      	movcs	r3, r8
  p->len = len;
 80078f4:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 80078f6:	2c00      	cmp	r4, #0
 80078f8:	d1d8      	bne.n	80078ac <pbuf_alloc+0xa0>
 80078fa:	4604      	mov	r4, r0
 80078fc:	e7d7      	b.n	80078ae <pbuf_alloc+0xa2>
          return NULL;
 80078fe:	2400      	movs	r4, #0
}
 8007900:	4620      	mov	r0, r4
 8007902:	b003      	add	sp, #12
 8007904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  queued = pbuf_free_ooseq_pending;
 8007908:	4e14      	ldr	r6, [pc, #80]	; (800795c <pbuf_alloc+0x150>)
 800790a:	9001      	str	r0, [sp, #4]
  SYS_ARCH_PROTECT(old_level);
 800790c:	f006 fa92 	bl	800de34 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007910:	7835      	ldrb	r5, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 8007912:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007914:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007916:	7033      	strb	r3, [r6, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007918:	f006 fa98 	bl	800de4c <sys_arch_unprotect>
  if (!queued) {
 800791c:	9901      	ldr	r1, [sp, #4]
 800791e:	b135      	cbz	r5, 800792e <pbuf_alloc+0x122>
          if (p) {
 8007920:	2c00      	cmp	r4, #0
 8007922:	d0ec      	beq.n	80078fe <pbuf_alloc+0xf2>
  if (p == NULL) {
 8007924:	4620      	mov	r0, r4
          return NULL;
 8007926:	2400      	movs	r4, #0
 8007928:	f7ff fe42 	bl	80075b0 <pbuf_free.part.0>
 800792c:	e784      	b.n	8007838 <pbuf_alloc+0x2c>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800792e:	480c      	ldr	r0, [pc, #48]	; (8007960 <pbuf_alloc+0x154>)
 8007930:	f7fe ff92 	bl	8006858 <tcpip_try_callback>
 8007934:	2800      	cmp	r0, #0
 8007936:	d0f3      	beq.n	8007920 <pbuf_alloc+0x114>
 8007938:	f006 fa7c 	bl	800de34 <sys_arch_protect>
 800793c:	9901      	ldr	r1, [sp, #4]
 800793e:	7031      	strb	r1, [r6, #0]
 8007940:	f006 fa84 	bl	800de4c <sys_arch_unprotect>
 8007944:	e7ec      	b.n	8007920 <pbuf_alloc+0x114>
 8007946:	bf00      	nop
 8007948:	0800ff40 	.word	0x0800ff40
 800794c:	08010044 	.word	0x08010044
 8007950:	0800f0a0 	.word	0x0800f0a0
 8007954:	00010080 	.word	0x00010080
 8007958:	00010082 	.word	0x00010082
 800795c:	24010575 	.word	0x24010575
 8007960:	0800757d 	.word	0x0800757d

08007964 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007964:	3003      	adds	r0, #3
 8007966:	f020 0003 	bic.w	r0, r0, #3
{
 800796a:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800796c:	eb01 0e00 	add.w	lr, r1, r0
{
 8007970:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 8007974:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007976:	45e6      	cmp	lr, ip
 8007978:	d80d      	bhi.n	8007996 <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800797a:	b104      	cbz	r4, 800797e <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800797c:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800797e:	4618      	mov	r0, r3
  p->next = NULL;
 8007980:	2300      	movs	r3, #0
  p->payload = payload;
 8007982:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 8007984:	2402      	movs	r4, #2
  p->next = NULL;
 8007986:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 8007988:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 800798a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800798c:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 800798e:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 8007990:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 8007992:	81c3      	strh	r3, [r0, #14]
}
 8007994:	bd10      	pop	{r4, pc}
    return NULL;
 8007996:	2000      	movs	r0, #0
}
 8007998:	bd10      	pop	{r4, pc}
 800799a:	bf00      	nop

0800799c <pbuf_realloc>:
{
 800799c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800799e:	4604      	mov	r4, r0
{
 80079a0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d037      	beq.n	8007a16 <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 80079a6:	8922      	ldrh	r2, [r4, #8]
 80079a8:	42aa      	cmp	r2, r5
 80079aa:	d91b      	bls.n	80079e4 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 80079ac:	8963      	ldrh	r3, [r4, #10]
 80079ae:	429d      	cmp	r5, r3
 80079b0:	d90d      	bls.n	80079ce <pbuf_realloc+0x32>
 80079b2:	1aa9      	subs	r1, r5, r2
 80079b4:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80079b6:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 80079b8:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80079ba:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 80079bc:	b29d      	uxth	r5, r3
    q = q->next;
 80079be:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80079c0:	2c00      	cmp	r4, #0
 80079c2:	d030      	beq.n	8007a26 <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 80079c4:	8963      	ldrh	r3, [r4, #10]
 80079c6:	42ab      	cmp	r3, r5
 80079c8:	d201      	bcs.n	80079ce <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80079ca:	8922      	ldrh	r2, [r4, #8]
 80079cc:	e7f3      	b.n	80079b6 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80079ce:	7b22      	ldrb	r2, [r4, #12]
 80079d0:	0712      	lsls	r2, r2, #28
 80079d2:	d008      	beq.n	80079e6 <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 80079d4:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80079d6:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80079d8:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80079da:	b108      	cbz	r0, 80079e0 <pbuf_realloc+0x44>
  if (p == NULL) {
 80079dc:	f7ff fde8 	bl	80075b0 <pbuf_free.part.0>
  q->next = NULL;
 80079e0:	2300      	movs	r3, #0
 80079e2:	6023      	str	r3, [r4, #0]
}
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80079e6:	429d      	cmp	r5, r3
 80079e8:	d0f4      	beq.n	80079d4 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80079ea:	7b63      	ldrb	r3, [r4, #13]
 80079ec:	079b      	lsls	r3, r3, #30
 80079ee:	d4f1      	bmi.n	80079d4 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	4620      	mov	r0, r4
 80079f4:	1b1b      	subs	r3, r3, r4
 80079f6:	18e9      	adds	r1, r5, r3
 80079f8:	b289      	uxth	r1, r1
 80079fa:	f7ff f955 	bl	8006ca8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80079fe:	4604      	mov	r4, r0
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d1e7      	bne.n	80079d4 <pbuf_realloc+0x38>
 8007a04:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <pbuf_realloc+0x9c>)
 8007a06:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007a0a:	490c      	ldr	r1, [pc, #48]	; (8007a3c <pbuf_realloc+0xa0>)
 8007a0c:	480c      	ldr	r0, [pc, #48]	; (8007a40 <pbuf_realloc+0xa4>)
 8007a0e:	f006 fbfb 	bl	800e208 <iprintf>
  q->len = rem_len;
 8007a12:	8164      	strh	r4, [r4, #10]
 8007a14:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007a16:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <pbuf_realloc+0x9c>)
 8007a18:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007a1c:	4909      	ldr	r1, [pc, #36]	; (8007a44 <pbuf_realloc+0xa8>)
 8007a1e:	4808      	ldr	r0, [pc, #32]	; (8007a40 <pbuf_realloc+0xa4>)
 8007a20:	f006 fbf2 	bl	800e208 <iprintf>
 8007a24:	e7bf      	b.n	80079a6 <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007a26:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <pbuf_realloc+0x9c>)
 8007a28:	f240 12af 	movw	r2, #431	; 0x1af
 8007a2c:	4906      	ldr	r1, [pc, #24]	; (8007a48 <pbuf_realloc+0xac>)
 8007a2e:	4804      	ldr	r0, [pc, #16]	; (8007a40 <pbuf_realloc+0xa4>)
 8007a30:	f006 fbea 	bl	800e208 <iprintf>
  while (rem_len > q->len) {
 8007a34:	8963      	ldrh	r3, [r4, #10]
 8007a36:	deff      	udf	#255	; 0xff
 8007a38:	0800ff40 	.word	0x0800ff40
 8007a3c:	08010090 	.word	0x08010090
 8007a40:	0800f0a0 	.word	0x0800f0a0
 8007a44:	08010060 	.word	0x08010060
 8007a48:	08010078 	.word	0x08010078

08007a4c <pbuf_add_header>:
{
 8007a4c:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a4e:	b310      	cbz	r0, 8007a96 <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007a50:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007a54:	d20c      	bcs.n	8007a70 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 8007a56:	b169      	cbz	r1, 8007a74 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 8007a58:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a5c:	8902      	ldrh	r2, [r0, #8]
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4462      	add	r2, ip
 8007a62:	b292      	uxth	r2, r2
 8007a64:	4594      	cmp	ip, r2
 8007a66:	d803      	bhi.n	8007a70 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a68:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	db03      	blt.n	8007a78 <pbuf_add_header+0x2c>
    return 1;
 8007a70:	2001      	movs	r0, #1
}
 8007a72:	bd08      	pop	{r3, pc}
    return 0;
 8007a74:	4608      	mov	r0, r1
}
 8007a76:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8007a78:	6858      	ldr	r0, [r3, #4]
 8007a7a:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a7c:	f103 0010 	add.w	r0, r3, #16
 8007a80:	4281      	cmp	r1, r0
 8007a82:	d3f5      	bcc.n	8007a70 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a84:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8007a88:	2000      	movs	r0, #0
  p->payload = payload;
 8007a8a:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a8c:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a8e:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a90:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8007a94:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007a96:	4b04      	ldr	r3, [pc, #16]	; (8007aa8 <pbuf_add_header+0x5c>)
 8007a98:	f240 12df 	movw	r2, #479	; 0x1df
 8007a9c:	4903      	ldr	r1, [pc, #12]	; (8007aac <pbuf_add_header+0x60>)
 8007a9e:	4804      	ldr	r0, [pc, #16]	; (8007ab0 <pbuf_add_header+0x64>)
 8007aa0:	f006 fbb2 	bl	800e208 <iprintf>
    return 1;
 8007aa4:	2001      	movs	r0, #1
}
 8007aa6:	bd08      	pop	{r3, pc}
 8007aa8:	0800ff40 	.word	0x0800ff40
 8007aac:	0800f190 	.word	0x0800f190
 8007ab0:	0800f0a0 	.word	0x0800f0a0

08007ab4 <pbuf_remove_header>:
{
 8007ab4:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007ab6:	b1c8      	cbz	r0, 8007aec <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007ab8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007abc:	d21f      	bcs.n	8007afe <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 8007abe:	b199      	cbz	r1, 8007ae8 <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 8007ac0:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007ac4:	8942      	ldrh	r2, [r0, #10]
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	4594      	cmp	ip, r2
 8007aca:	d81a      	bhi.n	8007b02 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007acc:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8007ace:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007ad2:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007ad6:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 8007ad8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007ada:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 8007ade:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007ae0:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007ae2:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 8007ae6:	bd08      	pop	{r3, pc}
    return 0;
 8007ae8:	4608      	mov	r0, r1
}
 8007aea:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <pbuf_remove_header+0x60>)
 8007aee:	f240 224b 	movw	r2, #587	; 0x24b
 8007af2:	4909      	ldr	r1, [pc, #36]	; (8007b18 <pbuf_remove_header+0x64>)
 8007af4:	4809      	ldr	r0, [pc, #36]	; (8007b1c <pbuf_remove_header+0x68>)
 8007af6:	f006 fb87 	bl	800e208 <iprintf>
    return 1;
 8007afa:	2001      	movs	r0, #1
}
 8007afc:	bd08      	pop	{r3, pc}
    return 1;
 8007afe:	2001      	movs	r0, #1
}
 8007b00:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007b02:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <pbuf_remove_header+0x60>)
 8007b04:	f240 2255 	movw	r2, #597	; 0x255
 8007b08:	4905      	ldr	r1, [pc, #20]	; (8007b20 <pbuf_remove_header+0x6c>)
 8007b0a:	4804      	ldr	r0, [pc, #16]	; (8007b1c <pbuf_remove_header+0x68>)
 8007b0c:	f006 fb7c 	bl	800e208 <iprintf>
 8007b10:	2001      	movs	r0, #1
}
 8007b12:	bd08      	pop	{r3, pc}
 8007b14:	0800ff40 	.word	0x0800ff40
 8007b18:	0800f190 	.word	0x0800f190
 8007b1c:	0800f0a0 	.word	0x0800f0a0
 8007b20:	080100ac 	.word	0x080100ac

08007b24 <pbuf_header_force>:
  if (header_size_increment < 0) {
 8007b24:	2900      	cmp	r1, #0
 8007b26:	db1a      	blt.n	8007b5e <pbuf_header_force+0x3a>
{
 8007b28:	b508      	push	{r3, lr}
 8007b2a:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 8007b2c:	b1d0      	cbz	r0, 8007b64 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 8007b2e:	b341      	cbz	r1, 8007b82 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 8007b30:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007b34:	891a      	ldrh	r2, [r3, #8]
 8007b36:	4462      	add	r2, ip
 8007b38:	b292      	uxth	r2, r2
 8007b3a:	4594      	cmp	ip, r2
 8007b3c:	d81f      	bhi.n	8007b7e <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007b3e:	f993 000c 	ldrsb.w	r0, [r3, #12]
 8007b42:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 8007b44:	6858      	ldr	r0, [r3, #4]
 8007b46:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007b4a:	db14      	blt.n	8007b76 <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 8007b4c:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 8007b50:	2000      	movs	r0, #0
  p->payload = payload;
 8007b52:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007b54:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007b56:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007b58:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 8007b5c:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b5e:	4249      	negs	r1, r1
 8007b60:	f7ff bfa8 	b.w	8007ab4 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007b64:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <pbuf_header_force+0x64>)
 8007b66:	f240 12df 	movw	r2, #479	; 0x1df
 8007b6a:	4908      	ldr	r1, [pc, #32]	; (8007b8c <pbuf_header_force+0x68>)
 8007b6c:	4808      	ldr	r0, [pc, #32]	; (8007b90 <pbuf_header_force+0x6c>)
 8007b6e:	f006 fb4b 	bl	800e208 <iprintf>
    return 1;
 8007b72:	2001      	movs	r0, #1
}
 8007b74:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007b76:	f103 0010 	add.w	r0, r3, #16
 8007b7a:	4281      	cmp	r1, r0
 8007b7c:	d2e6      	bcs.n	8007b4c <pbuf_header_force+0x28>
    return 1;
 8007b7e:	2001      	movs	r0, #1
}
 8007b80:	bd08      	pop	{r3, pc}
    return 0;
 8007b82:	4608      	mov	r0, r1
}
 8007b84:	bd08      	pop	{r3, pc}
 8007b86:	bf00      	nop
 8007b88:	0800ff40 	.word	0x0800ff40
 8007b8c:	0800f190 	.word	0x0800f190
 8007b90:	0800f0a0 	.word	0x0800f0a0

08007b94 <pbuf_free>:
  if (p == NULL) {
 8007b94:	b108      	cbz	r0, 8007b9a <pbuf_free+0x6>
 8007b96:	f7ff bd0b 	b.w	80075b0 <pbuf_free.part.0>
{
 8007b9a:	b510      	push	{r4, lr}
 8007b9c:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 8007b9e:	4b04      	ldr	r3, [pc, #16]	; (8007bb0 <pbuf_free+0x1c>)
 8007ba0:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007ba4:	4903      	ldr	r1, [pc, #12]	; (8007bb4 <pbuf_free+0x20>)
 8007ba6:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <pbuf_free+0x24>)
 8007ba8:	f006 fb2e 	bl	800e208 <iprintf>
}
 8007bac:	4620      	mov	r0, r4
 8007bae:	bd10      	pop	{r4, pc}
 8007bb0:	0800ff40 	.word	0x0800ff40
 8007bb4:	0800f190 	.word	0x0800f190
 8007bb8:	0800f0a0 	.word	0x0800f0a0

08007bbc <pbuf_clen>:
  while (p != NULL) {
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	b130      	cbz	r0, 8007bce <pbuf_clen+0x12>
  len = 0;
 8007bc0:	2000      	movs	r0, #0
    ++len;
 8007bc2:	3001      	adds	r0, #1
    p = p->next;
 8007bc4:	681b      	ldr	r3, [r3, #0]
    ++len;
 8007bc6:	b280      	uxth	r0, r0
  while (p != NULL) {
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1fa      	bne.n	8007bc2 <pbuf_clen+0x6>
 8007bcc:	4770      	bx	lr
}
 8007bce:	4770      	bx	lr

08007bd0 <pbuf_ref>:
  if (p != NULL) {
 8007bd0:	b158      	cbz	r0, 8007bea <pbuf_ref+0x1a>
{
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007bd6:	f006 f92d 	bl	800de34 <sys_arch_protect>
 8007bda:	7ba3      	ldrb	r3, [r4, #14]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	73a3      	strb	r3, [r4, #14]
 8007be0:	f006 f934 	bl	800de4c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007be4:	7ba3      	ldrb	r3, [r4, #14]
 8007be6:	b10b      	cbz	r3, 8007bec <pbuf_ref+0x1c>
}
 8007be8:	bd10      	pop	{r4, pc}
 8007bea:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <pbuf_ref+0x30>)
 8007bee:	f240 3242 	movw	r2, #834	; 0x342
 8007bf2:	4904      	ldr	r1, [pc, #16]	; (8007c04 <pbuf_ref+0x34>)
 8007bf4:	4804      	ldr	r0, [pc, #16]	; (8007c08 <pbuf_ref+0x38>)
}
 8007bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007bfa:	f006 bb05 	b.w	800e208 <iprintf>
 8007bfe:	bf00      	nop
 8007c00:	0800ff40 	.word	0x0800ff40
 8007c04:	080100cc 	.word	0x080100cc
 8007c08:	0800f0a0 	.word	0x0800f0a0

08007c0c <pbuf_cat>:
{
 8007c0c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c0e:	b330      	cbz	r0, 8007c5e <pbuf_cat+0x52>
 8007c10:	460d      	mov	r5, r1
 8007c12:	b321      	cbz	r1, 8007c5e <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 8007c14:	6803      	ldr	r3, [r0, #0]
 8007c16:	4604      	mov	r4, r0
 8007c18:	b13b      	cbz	r3, 8007c2a <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c1a:	8922      	ldrh	r2, [r4, #8]
 8007c1c:	8928      	ldrh	r0, [r5, #8]
 8007c1e:	4402      	add	r2, r0
 8007c20:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007c22:	461c      	mov	r4, r3
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f7      	bne.n	8007c1a <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007c2a:	8963      	ldrh	r3, [r4, #10]
 8007c2c:	8922      	ldrh	r2, [r4, #8]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d010      	beq.n	8007c54 <pbuf_cat+0x48>
 8007c32:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <pbuf_cat+0x64>)
 8007c34:	f240 3262 	movw	r2, #866	; 0x362
 8007c38:	490e      	ldr	r1, [pc, #56]	; (8007c74 <pbuf_cat+0x68>)
 8007c3a:	480f      	ldr	r0, [pc, #60]	; (8007c78 <pbuf_cat+0x6c>)
 8007c3c:	f006 fae4 	bl	800e208 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	b133      	cbz	r3, 8007c52 <pbuf_cat+0x46>
 8007c44:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <pbuf_cat+0x64>)
 8007c46:	f240 3263 	movw	r2, #867	; 0x363
 8007c4a:	490c      	ldr	r1, [pc, #48]	; (8007c7c <pbuf_cat+0x70>)
 8007c4c:	480a      	ldr	r0, [pc, #40]	; (8007c78 <pbuf_cat+0x6c>)
 8007c4e:	f006 fadb 	bl	800e208 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c52:	8923      	ldrh	r3, [r4, #8]
 8007c54:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 8007c56:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007c58:	4413      	add	r3, r2
 8007c5a:	8123      	strh	r3, [r4, #8]
}
 8007c5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c5e:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <pbuf_cat+0x64>)
 8007c60:	f240 3259 	movw	r2, #857	; 0x359
 8007c64:	4906      	ldr	r1, [pc, #24]	; (8007c80 <pbuf_cat+0x74>)
 8007c66:	4804      	ldr	r0, [pc, #16]	; (8007c78 <pbuf_cat+0x6c>)
}
 8007c68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007c6c:	f006 bacc 	b.w	800e208 <iprintf>
 8007c70:	0800ff40 	.word	0x0800ff40
 8007c74:	08010118 	.word	0x08010118
 8007c78:	0800f0a0 	.word	0x0800f0a0
 8007c7c:	08010148 	.word	0x08010148
 8007c80:	080100e0 	.word	0x080100e0

08007c84 <pbuf_copy>:
{
 8007c84:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c86:	b140      	cbz	r0, 8007c9a <pbuf_copy+0x16>
 8007c88:	b139      	cbz	r1, 8007c9a <pbuf_copy+0x16>
 8007c8a:	8902      	ldrh	r2, [r0, #8]
 8007c8c:	890b      	ldrh	r3, [r1, #8]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d303      	bcc.n	8007c9a <pbuf_copy+0x16>
}
 8007c92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007c96:	f7ff bcf3 	b.w	8007680 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <pbuf_copy+0x2c>)
 8007c9c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007ca0:	4904      	ldr	r1, [pc, #16]	; (8007cb4 <pbuf_copy+0x30>)
 8007ca2:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <pbuf_copy+0x34>)
 8007ca4:	f006 fab0 	bl	800e208 <iprintf>
}
 8007ca8:	f06f 000f 	mvn.w	r0, #15
 8007cac:	bd08      	pop	{r3, pc}
 8007cae:	bf00      	nop
 8007cb0:	0800ff40 	.word	0x0800ff40
 8007cb4:	08010158 	.word	0x08010158
 8007cb8:	0800f0a0 	.word	0x0800f0a0

08007cbc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	b370      	cbz	r0, 8007d22 <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007cc4:	460f      	mov	r7, r1
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	d036      	beq.n	8007d38 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cca:	4690      	mov	r8, r2
 8007ccc:	b392      	cbz	r2, 8007d34 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 8007cce:	2600      	movs	r6, #0
 8007cd0:	e005      	b.n	8007cde <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007cd2:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007cd4:	682d      	ldr	r5, [r5, #0]
 8007cd6:	f1b8 0f00 	cmp.w	r8, #0
 8007cda:	d01f      	beq.n	8007d1c <pbuf_copy_partial+0x60>
 8007cdc:	b1f5      	cbz	r5, 8007d1c <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cde:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8007ce0:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 8007ce4:	b11b      	cbz	r3, 8007cee <pbuf_copy_partial+0x32>
 8007ce6:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 8007ce8:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 8007cec:	d2f1      	bcs.n	8007cd2 <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 8007cee:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cf2:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8007cf4:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007cf8:	4419      	add	r1, r3
 8007cfa:	4544      	cmp	r4, r8
 8007cfc:	bf28      	it	cs
 8007cfe:	4644      	movcs	r4, r8
 8007d00:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d02:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8007d04:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8007d08:	f006 f9d3 	bl	800e0b2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007d0c:	b2b6      	uxth	r6, r6
      offset = 0;
 8007d0e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8007d10:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d14:	682d      	ldr	r5, [r5, #0]
 8007d16:	f1b8 0f00 	cmp.w	r8, #0
 8007d1a:	d1df      	bne.n	8007cdc <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007d22:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <pbuf_copy_partial+0x90>)
 8007d24:	f240 420a 	movw	r2, #1034	; 0x40a
 8007d28:	4909      	ldr	r1, [pc, #36]	; (8007d50 <pbuf_copy_partial+0x94>)
 8007d2a:	462e      	mov	r6, r5
 8007d2c:	4809      	ldr	r0, [pc, #36]	; (8007d54 <pbuf_copy_partial+0x98>)
 8007d2e:	f006 fa6b 	bl	800e208 <iprintf>
 8007d32:	e7f3      	b.n	8007d1c <pbuf_copy_partial+0x60>
  u16_t left = 0;
 8007d34:	4616      	mov	r6, r2
 8007d36:	e7f1      	b.n	8007d1c <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007d38:	4b04      	ldr	r3, [pc, #16]	; (8007d4c <pbuf_copy_partial+0x90>)
 8007d3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8007d3e:	4906      	ldr	r1, [pc, #24]	; (8007d58 <pbuf_copy_partial+0x9c>)
 8007d40:	463e      	mov	r6, r7
 8007d42:	4804      	ldr	r0, [pc, #16]	; (8007d54 <pbuf_copy_partial+0x98>)
 8007d44:	f006 fa60 	bl	800e208 <iprintf>
 8007d48:	e7e8      	b.n	8007d1c <pbuf_copy_partial+0x60>
 8007d4a:	bf00      	nop
 8007d4c:	0800ff40 	.word	0x0800ff40
 8007d50:	08010188 	.word	0x08010188
 8007d54:	0800f0a0 	.word	0x0800f0a0
 8007d58:	080101a8 	.word	0x080101a8

08007d5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4615      	mov	r5, r2
 8007d60:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007d62:	8929      	ldrh	r1, [r5, #8]
 8007d64:	f7ff fd52 	bl	800780c <pbuf_alloc>
  if (q == NULL) {
 8007d68:	4604      	mov	r4, r0
 8007d6a:	b138      	cbz	r0, 8007d7c <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d6c:	8902      	ldrh	r2, [r0, #8]
 8007d6e:	892b      	ldrh	r3, [r5, #8]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d305      	bcc.n	8007d80 <pbuf_clone+0x24>
 8007d74:	4629      	mov	r1, r5
 8007d76:	f7ff fc83 	bl	8007680 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d7a:	b940      	cbnz	r0, 8007d8e <pbuf_clone+0x32>
  return q;
}
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007d80:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <pbuf_clone+0x44>)
 8007d82:	f240 32c9 	movw	r2, #969	; 0x3c9
 8007d86:	4907      	ldr	r1, [pc, #28]	; (8007da4 <pbuf_clone+0x48>)
 8007d88:	4807      	ldr	r0, [pc, #28]	; (8007da8 <pbuf_clone+0x4c>)
 8007d8a:	f006 fa3d 	bl	800e208 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <pbuf_clone+0x44>)
 8007d90:	f240 5224 	movw	r2, #1316	; 0x524
 8007d94:	4905      	ldr	r1, [pc, #20]	; (8007dac <pbuf_clone+0x50>)
 8007d96:	4804      	ldr	r0, [pc, #16]	; (8007da8 <pbuf_clone+0x4c>)
 8007d98:	f006 fa36 	bl	800e208 <iprintf>
}
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	0800ff40 	.word	0x0800ff40
 8007da4:	08010158 	.word	0x08010158
 8007da8:	0800f0a0 	.word	0x0800f0a0
 8007dac:	080101cc 	.word	0x080101cc

08007db0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8007db0:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8007db2:	8905      	ldrh	r5, [r0, #8]
 8007db4:	18cc      	adds	r4, r1, r3
 8007db6:	42a5      	cmp	r5, r4
 8007db8:	db2e      	blt.n	8007e18 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 8007dba:	8944      	ldrh	r4, [r0, #10]
 8007dbc:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 8007dbe:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 8007dc2:	d803      	bhi.n	8007dcc <pbuf_memcmp+0x1c>
    q = q->next;
 8007dc4:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 8007dc6:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	d1f6      	bne.n	8007dba <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8007dcc:	b1f3      	cbz	r3, 8007e0c <pbuf_memcmp+0x5c>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	1e56      	subs	r6, r2, #1
 8007dd2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8007dd4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 8007dd8:	4604      	mov	r4, r0
 8007dda:	fa1f fc8c 	uxth.w	ip, ip
 8007dde:	b920      	cbnz	r0, 8007dea <pbuf_memcmp+0x3a>
 8007de0:	e00b      	b.n	8007dfa <pbuf_memcmp+0x4a>
    q = q->next;
 8007de2:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8007de4:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8007de8:	b13c      	cbz	r4, 8007dfa <pbuf_memcmp+0x4a>
 8007dea:	8962      	ldrh	r2, [r4, #10]
 8007dec:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 8007dee:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 8007df2:	d2f6      	bcs.n	8007de2 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 8007df4:	6862      	ldr	r2, [r4, #4]
 8007df6:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 8007dfa:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8007dfe:	42a2      	cmp	r2, r4
 8007e00:	d106      	bne.n	8007e10 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 8007e02:	3501      	adds	r5, #1
 8007e04:	fa1f fe85 	uxth.w	lr, r5
 8007e08:	4573      	cmp	r3, lr
 8007e0a:	d8e3      	bhi.n	8007dd4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 8007e0c:	2000      	movs	r0, #0
}
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8007e10:	f10e 0001 	add.w	r0, lr, #1
 8007e14:	b280      	uxth	r0, r0
}
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 8007e18:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8007e1c:	bd70      	pop	{r4, r5, r6, pc}
 8007e1e:	bf00      	nop

08007e20 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007e20:	b4f0      	push	{r4, r5, r6, r7}
 8007e22:	4f13      	ldr	r7, [pc, #76]	; (8007e70 <tcp_new_port+0x50>)
 8007e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e28:	4e12      	ldr	r6, [pc, #72]	; (8007e74 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007e2a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8007e2e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e30:	4d11      	ldr	r5, [pc, #68]	; (8007e78 <tcp_new_port+0x58>)
  tcp_port++;
 8007e32:	3001      	adds	r0, #1
 8007e34:	4c11      	ldr	r4, [pc, #68]	; (8007e7c <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e36:	462b      	mov	r3, r5
  tcp_port++;
 8007e38:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007e3a:	4560      	cmp	r0, ip
 8007e3c:	bf08      	it	eq
 8007e3e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	b913      	cbnz	r3, 8007e4c <tcp_new_port+0x2c>
 8007e46:	e00b      	b.n	8007e60 <tcp_new_port+0x40>
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	b14b      	cbz	r3, 8007e60 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 8007e4c:	8ada      	ldrh	r2, [r3, #22]
 8007e4e:	4282      	cmp	r2, r0
 8007e50:	d1fa      	bne.n	8007e48 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007e52:	3901      	subs	r1, #1
 8007e54:	b289      	uxth	r1, r1
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d1eb      	bne.n	8007e32 <tcp_new_port+0x12>
 8007e5a:	8038      	strh	r0, [r7, #0]
          return 0;
 8007e5c:	4608      	mov	r0, r1
 8007e5e:	e005      	b.n	8007e6c <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007e60:	42b4      	cmp	r4, r6
 8007e62:	d002      	beq.n	8007e6a <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007e64:	f854 3b04 	ldr.w	r3, [r4], #4
 8007e68:	e7eb      	b.n	8007e42 <tcp_new_port+0x22>
 8007e6a:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8007e6c:	bcf0      	pop	{r4, r5, r6, r7}
 8007e6e:	4770      	bx	lr
 8007e70:	2400002c 	.word	0x2400002c
 8007e74:	080108b8 	.word	0x080108b8
 8007e78:	24010584 	.word	0x24010584
 8007e7c:	080108ac 	.word	0x080108ac

08007e80 <tcp_close_shutdown_fin>:
{
 8007e80:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e82:	4604      	mov	r4, r0
 8007e84:	b310      	cbz	r0, 8007ecc <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8007e86:	7d23      	ldrb	r3, [r4, #20]
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d005      	beq.n	8007e98 <tcp_close_shutdown_fin+0x18>
 8007e8c:	2b07      	cmp	r3, #7
 8007e8e:	d00e      	beq.n	8007eae <tcp_close_shutdown_fin+0x2e>
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d001      	beq.n	8007e98 <tcp_close_shutdown_fin+0x18>
 8007e94:	2000      	movs	r0, #0
}
 8007e96:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f003 fd19 	bl	800b8d0 <tcp_send_fin>
      if (err == ERR_OK) {
 8007e9e:	b950      	cbnz	r0, 8007eb6 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8007ea0:	2305      	movs	r3, #5
 8007ea2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f003 fe83 	bl	800bbb0 <tcp_output>
 8007eaa:	2000      	movs	r0, #0
}
 8007eac:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f003 fd0e 	bl	800b8d0 <tcp_send_fin>
      if (err == ERR_OK) {
 8007eb4:	b138      	cbz	r0, 8007ec6 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	d1ed      	bne.n	8007e96 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007eba:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8007ebc:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007ebe:	f043 0308 	orr.w	r3, r3, #8
 8007ec2:	8363      	strh	r3, [r4, #26]
}
 8007ec4:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8007ec6:	2309      	movs	r3, #9
 8007ec8:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8007eca:	e7eb      	b.n	8007ea4 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007ecc:	4b03      	ldr	r3, [pc, #12]	; (8007edc <tcp_close_shutdown_fin+0x5c>)
 8007ece:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007ed2:	4903      	ldr	r1, [pc, #12]	; (8007ee0 <tcp_close_shutdown_fin+0x60>)
 8007ed4:	4803      	ldr	r0, [pc, #12]	; (8007ee4 <tcp_close_shutdown_fin+0x64>)
 8007ed6:	f006 f997 	bl	800e208 <iprintf>
 8007eda:	e7d4      	b.n	8007e86 <tcp_close_shutdown_fin+0x6>
 8007edc:	080101e0 	.word	0x080101e0
 8007ee0:	08010210 	.word	0x08010210
 8007ee4:	0800f0a0 	.word	0x0800f0a0

08007ee8 <tcp_init>:
{
 8007ee8:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007eea:	f006 f9a5 	bl	800e238 <rand>
 8007eee:	4b02      	ldr	r3, [pc, #8]	; (8007ef8 <tcp_init+0x10>)
 8007ef0:	4a02      	ldr	r2, [pc, #8]	; (8007efc <tcp_init+0x14>)
 8007ef2:	4303      	orrs	r3, r0
 8007ef4:	8013      	strh	r3, [r2, #0]
}
 8007ef6:	bd08      	pop	{r3, pc}
 8007ef8:	ffffc000 	.word	0xffffc000
 8007efc:	2400002c 	.word	0x2400002c

08007f00 <tcp_free>:
{
 8007f00:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f02:	7d03      	ldrb	r3, [r0, #20]
{
 8007f04:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d005      	beq.n	8007f16 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8007f0a:	4621      	mov	r1, r4
 8007f0c:	2001      	movs	r0, #1
}
 8007f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007f12:	f7ff b90b 	b.w	800712c <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007f16:	4906      	ldr	r1, [pc, #24]	; (8007f30 <tcp_free+0x30>)
 8007f18:	22d4      	movs	r2, #212	; 0xd4
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <tcp_free+0x34>)
 8007f1c:	4806      	ldr	r0, [pc, #24]	; (8007f38 <tcp_free+0x38>)
 8007f1e:	f006 f973 	bl	800e208 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8007f22:	4621      	mov	r1, r4
 8007f24:	2001      	movs	r0, #1
}
 8007f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8007f2a:	f7ff b8ff 	b.w	800712c <memp_free>
 8007f2e:	bf00      	nop
 8007f30:	0801021c 	.word	0x0801021c
 8007f34:	080101e0 	.word	0x080101e0
 8007f38:	0800f0a0 	.word	0x0800f0a0

08007f3c <tcp_bind>:
{
 8007f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3e:	460e      	mov	r6, r1
 8007f40:	4607      	mov	r7, r0
 8007f42:	4614      	mov	r4, r2
  LWIP_ASSERT_CORE_LOCKED();
 8007f44:	f7fb ffbe 	bl	8003ec4 <sys_check_core_locking>
  if (ipaddr == NULL) {
 8007f48:	b1de      	cbz	r6, 8007f82 <tcp_bind+0x46>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f4a:	2f00      	cmp	r7, #0
 8007f4c:	d03e      	beq.n	8007fcc <tcp_bind+0x90>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007f4e:	7d3b      	ldrb	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d131      	bne.n	8007fb8 <tcp_bind+0x7c>
  if (port == 0) {
 8007f54:	b32c      	cbz	r4, 8007fa2 <tcp_bind+0x66>
 8007f56:	4922      	ldr	r1, [pc, #136]	; (8007fe0 <tcp_bind+0xa4>)
 8007f58:	4b22      	ldr	r3, [pc, #136]	; (8007fe4 <tcp_bind+0xa8>)
 8007f5a:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	b913      	cbnz	r3, 8007f68 <tcp_bind+0x2c>
 8007f62:	e010      	b.n	8007f86 <tcp_bind+0x4a>
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	b173      	cbz	r3, 8007f86 <tcp_bind+0x4a>
        if (cpcb->local_port == port) {
 8007f68:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 8007f6c:	45a4      	cmp	ip, r4
 8007f6e:	d1f9      	bne.n	8007f64 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	b11a      	cbz	r2, 8007f7c <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 8007f74:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007f76:	b10d      	cbz	r5, 8007f7c <tcp_bind+0x40>
 8007f78:	42aa      	cmp	r2, r5
 8007f7a:	d1f3      	bne.n	8007f64 <tcp_bind+0x28>
              return ERR_USE;
 8007f7c:	f06f 0007 	mvn.w	r0, #7
}
 8007f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ipaddr = IP4_ADDR_ANY;
 8007f82:	4e19      	ldr	r6, [pc, #100]	; (8007fe8 <tcp_bind+0xac>)
 8007f84:	e7e1      	b.n	8007f4a <tcp_bind+0xe>
    for (i = 0; i < max_pcb_list; i++) {
 8007f86:	4281      	cmp	r1, r0
 8007f88:	d113      	bne.n	8007fb2 <tcp_bind+0x76>
  if (!ip_addr_isany(ipaddr)
 8007f8a:	6833      	ldr	r3, [r6, #0]
 8007f8c:	b103      	cbz	r3, 8007f90 <tcp_bind+0x54>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007f8e:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007f90:	4b16      	ldr	r3, [pc, #88]	; (8007fec <tcp_bind+0xb0>)
  pcb->local_port = port;
 8007f92:	82fc      	strh	r4, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	601f      	str	r7, [r3, #0]
 8007f98:	60fa      	str	r2, [r7, #12]
 8007f9a:	f004 f92d 	bl	800c1f8 <tcp_timer_needed>
  return ERR_OK;
 8007f9e:	2000      	movs	r0, #0
}
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8007fa2:	f7ff ff3d 	bl	8007e20 <tcp_new_port>
    if (port == 0) {
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1ee      	bne.n	8007f8a <tcp_bind+0x4e>
      return ERR_BUF;
 8007fac:	f06f 0001 	mvn.w	r0, #1
}
 8007fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007fb2:	f851 3b04 	ldr.w	r3, [r1], #4
 8007fb6:	e7d2      	b.n	8007f5e <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007fb8:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <tcp_bind+0xb4>)
 8007fba:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007fbe:	490d      	ldr	r1, [pc, #52]	; (8007ff4 <tcp_bind+0xb8>)
 8007fc0:	480d      	ldr	r0, [pc, #52]	; (8007ff8 <tcp_bind+0xbc>)
 8007fc2:	f006 f921 	bl	800e208 <iprintf>
 8007fc6:	f06f 0005 	mvn.w	r0, #5
}
 8007fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007fcc:	4b08      	ldr	r3, [pc, #32]	; (8007ff0 <tcp_bind+0xb4>)
 8007fce:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007fd2:	490a      	ldr	r1, [pc, #40]	; (8007ffc <tcp_bind+0xc0>)
 8007fd4:	4808      	ldr	r0, [pc, #32]	; (8007ff8 <tcp_bind+0xbc>)
 8007fd6:	f006 f917 	bl	800e208 <iprintf>
 8007fda:	f06f 000f 	mvn.w	r0, #15
}
 8007fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe0:	080108ac 	.word	0x080108ac
 8007fe4:	24010584 	.word	0x24010584
 8007fe8:	08011794 	.word	0x08011794
 8007fec:	24010580 	.word	0x24010580
 8007ff0:	080101e0 	.word	0x080101e0
 8007ff4:	08010248 	.word	0x08010248
 8007ff8:	0800f0a0 	.word	0x0800f0a0
 8007ffc:	08010230 	.word	0x08010230

08008000 <tcp_listen_with_backlog_and_err>:
{
 8008000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008002:	4604      	mov	r4, r0
 8008004:	4617      	mov	r7, r2
  LWIP_ASSERT_CORE_LOCKED();
 8008006:	f7fb ff5d 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800800a:	2c00      	cmp	r4, #0
 800800c:	d05d      	beq.n	80080ca <tcp_listen_with_backlog_and_err+0xca>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800800e:	7d25      	ldrb	r5, [r4, #20]
 8008010:	2d00      	cmp	r5, #0
 8008012:	d147      	bne.n	80080a4 <tcp_listen_with_backlog_and_err+0xa4>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008014:	2002      	movs	r0, #2
 8008016:	f7ff f843 	bl	80070a0 <memp_malloc>
  if (lpcb == NULL) {
 800801a:	4606      	mov	r6, r0
 800801c:	2800      	cmp	r0, #0
 800801e:	d051      	beq.n	80080c4 <tcp_listen_with_backlog_and_err+0xc4>
  lpcb->callback_arg = pcb->callback_arg;
 8008020:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 8008022:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008024:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008026:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 8008028:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800802a:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800802c:	7d62      	ldrb	r2, [r4, #21]
 800802e:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008030:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008032:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008034:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008036:	7ae2      	ldrb	r2, [r4, #11]
 8008038:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800803a:	7aa2      	ldrb	r2, [r4, #10]
 800803c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800803e:	6822      	ldr	r2, [r4, #0]
 8008040:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008042:	b99b      	cbnz	r3, 800806c <tcp_listen_with_backlog_and_err+0x6c>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008044:	7d23      	ldrb	r3, [r4, #20]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d020      	beq.n	800808c <tcp_listen_with_backlog_and_err+0x8c>
  memp_free(MEMP_TCP_PCB, pcb);
 800804a:	4621      	mov	r1, r4
 800804c:	2001      	movs	r0, #1
 800804e:	f7ff f86d 	bl	800712c <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <tcp_listen_with_backlog_and_err+0xe0>)
  lpcb->accept = tcp_accept_null;
 8008054:	4923      	ldr	r1, [pc, #140]	; (80080e4 <tcp_listen_with_backlog_and_err+0xe4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008056:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 8008058:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800805a:	60f2      	str	r2, [r6, #12]
 800805c:	601e      	str	r6, [r3, #0]
 800805e:	f004 f8cb 	bl	800c1f8 <tcp_timer_needed>
  res = ERR_OK;
 8008062:	2300      	movs	r3, #0
  if (err != NULL) {
 8008064:	b107      	cbz	r7, 8008068 <tcp_listen_with_backlog_and_err+0x68>
    *err = res;
 8008066:	703b      	strb	r3, [r7, #0]
}
 8008068:	4630      	mov	r0, r6
 800806a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800806c:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <tcp_listen_with_backlog_and_err+0xe8>)
 800806e:	6813      	ldr	r3, [r2, #0]
 8008070:	42a3      	cmp	r3, r4
 8008072:	d012      	beq.n	800809a <tcp_listen_with_backlog_and_err+0x9a>
 8008074:	b12b      	cbz	r3, 8008082 <tcp_listen_with_backlog_and_err+0x82>
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	42a1      	cmp	r1, r4
 800807a:	d01e      	beq.n	80080ba <tcp_listen_with_backlog_and_err+0xba>
 800807c:	460b      	mov	r3, r1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f9      	bne.n	8008076 <tcp_listen_with_backlog_and_err+0x76>
 8008082:	2300      	movs	r3, #0
 8008084:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008086:	7d23      	ldrb	r3, [r4, #20]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d1de      	bne.n	800804a <tcp_listen_with_backlog_and_err+0x4a>
 800808c:	4b17      	ldr	r3, [pc, #92]	; (80080ec <tcp_listen_with_backlog_and_err+0xec>)
 800808e:	22d4      	movs	r2, #212	; 0xd4
 8008090:	4917      	ldr	r1, [pc, #92]	; (80080f0 <tcp_listen_with_backlog_and_err+0xf0>)
 8008092:	4818      	ldr	r0, [pc, #96]	; (80080f4 <tcp_listen_with_backlog_and_err+0xf4>)
 8008094:	f006 f8b8 	bl	800e208 <iprintf>
 8008098:	e7d7      	b.n	800804a <tcp_listen_with_backlog_and_err+0x4a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800809a:	68e3      	ldr	r3, [r4, #12]
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	2300      	movs	r3, #0
 80080a0:	60e3      	str	r3, [r4, #12]
 80080a2:	e7f0      	b.n	8008086 <tcp_listen_with_backlog_and_err+0x86>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80080a4:	4b11      	ldr	r3, [pc, #68]	; (80080ec <tcp_listen_with_backlog_and_err+0xec>)
 80080a6:	f240 325a 	movw	r2, #858	; 0x35a
 80080aa:	4913      	ldr	r1, [pc, #76]	; (80080f8 <tcp_listen_with_backlog_and_err+0xf8>)
  struct tcp_pcb_listen *lpcb = NULL;
 80080ac:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80080ae:	4811      	ldr	r0, [pc, #68]	; (80080f4 <tcp_listen_with_backlog_and_err+0xf4>)
 80080b0:	f006 f8aa 	bl	800e208 <iprintf>
 80080b4:	f06f 030e 	mvn.w	r3, #14
 80080b8:	e7d4      	b.n	8008064 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80080ba:	68e2      	ldr	r2, [r4, #12]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	2300      	movs	r3, #0
 80080c0:	60e3      	str	r3, [r4, #12]
 80080c2:	e7e0      	b.n	8008086 <tcp_listen_with_backlog_and_err+0x86>
    res = ERR_MEM;
 80080c4:	f04f 33ff 	mov.w	r3, #4294967295
 80080c8:	e7cc      	b.n	8008064 <tcp_listen_with_backlog_and_err+0x64>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80080ca:	4b08      	ldr	r3, [pc, #32]	; (80080ec <tcp_listen_with_backlog_and_err+0xec>)
 80080cc:	f240 3259 	movw	r2, #857	; 0x359
 80080d0:	490a      	ldr	r1, [pc, #40]	; (80080fc <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 80080d2:	4626      	mov	r6, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80080d4:	4807      	ldr	r0, [pc, #28]	; (80080f4 <tcp_listen_with_backlog_and_err+0xf4>)
 80080d6:	f006 f897 	bl	800e208 <iprintf>
 80080da:	f06f 030f 	mvn.w	r3, #15
 80080de:	e7c1      	b.n	8008064 <tcp_listen_with_backlog_and_err+0x64>
 80080e0:	24010584 	.word	0x24010584
 80080e4:	08008db1 	.word	0x08008db1
 80080e8:	24010580 	.word	0x24010580
 80080ec:	080101e0 	.word	0x080101e0
 80080f0:	0801021c 	.word	0x0801021c
 80080f4:	0800f0a0 	.word	0x0800f0a0
 80080f8:	080102a0 	.word	0x080102a0
 80080fc:	08010270 	.word	0x08010270

08008100 <tcp_listen_with_backlog>:
{
 8008100:	b500      	push	{lr}
 8008102:	b083      	sub	sp, #12
 8008104:	e9cd 1000 	strd	r1, r0, [sp]
  LWIP_ASSERT_CORE_LOCKED();
 8008108:	f7fb fedc 	bl	8003ec4 <sys_check_core_locking>
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800810c:	2200      	movs	r2, #0
 800810e:	e9dd 1000 	ldrd	r1, r0, [sp]
}
 8008112:	b003      	add	sp, #12
 8008114:	f85d eb04 	ldr.w	lr, [sp], #4
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008118:	f7ff bf72 	b.w	8008000 <tcp_listen_with_backlog_and_err>

0800811c <tcp_update_rcv_ann_wnd>:
{
 800811c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800811e:	4604      	mov	r4, r0
 8008120:	b1c8      	cbz	r0, 8008156 <tcp_update_rcv_ann_wnd+0x3a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008122:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008124:	f640 3c68 	movw	ip, #2920	; 0xb68
 8008128:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800812a:	f8b4 e032 	ldrh.w	lr, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800812e:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008130:	1ad0      	subs	r0, r2, r3
 8008132:	45e6      	cmp	lr, ip
 8008134:	4428      	add	r0, r5
 8008136:	bf94      	ite	ls
 8008138:	eba0 010e 	subls.w	r1, r0, lr
 800813c:	eba0 010c 	subhi.w	r1, r0, ip
 8008140:	2900      	cmp	r1, #0
 8008142:	db01      	blt.n	8008148 <tcp_update_rcv_ann_wnd+0x2c>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008144:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8008146:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008148:	1aea      	subs	r2, r5, r3
 800814a:	2a00      	cmp	r2, #0
 800814c:	dd0b      	ble.n	8008166 <tcp_update_rcv_ann_wnd+0x4a>
      pcb->rcv_ann_wnd = 0;
 800814e:	2300      	movs	r3, #0
    return 0;
 8008150:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 8008152:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 8008154:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <tcp_update_rcv_ann_wnd+0x68>)
 8008158:	f240 32a6 	movw	r2, #934	; 0x3a6
 800815c:	490a      	ldr	r1, [pc, #40]	; (8008188 <tcp_update_rcv_ann_wnd+0x6c>)
 800815e:	480b      	ldr	r0, [pc, #44]	; (800818c <tcp_update_rcv_ann_wnd+0x70>)
 8008160:	f006 f852 	bl	800e208 <iprintf>
 8008164:	e7dd      	b.n	8008122 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008166:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008168:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800816c:	d202      	bcs.n	8008174 <tcp_update_rcv_ann_wnd+0x58>
    return 0;
 800816e:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008170:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 8008172:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008174:	4b03      	ldr	r3, [pc, #12]	; (8008184 <tcp_update_rcv_ann_wnd+0x68>)
 8008176:	f240 32b6 	movw	r2, #950	; 0x3b6
 800817a:	4905      	ldr	r1, [pc, #20]	; (8008190 <tcp_update_rcv_ann_wnd+0x74>)
 800817c:	4803      	ldr	r0, [pc, #12]	; (800818c <tcp_update_rcv_ann_wnd+0x70>)
 800817e:	f006 f843 	bl	800e208 <iprintf>
 8008182:	e7f4      	b.n	800816e <tcp_update_rcv_ann_wnd+0x52>
 8008184:	080101e0 	.word	0x080101e0
 8008188:	080102d8 	.word	0x080102d8
 800818c:	0800f0a0 	.word	0x0800f0a0
 8008190:	080102fc 	.word	0x080102fc

08008194 <tcp_recved>:
{
 8008194:	b570      	push	{r4, r5, r6, lr}
 8008196:	4605      	mov	r5, r0
 8008198:	460c      	mov	r4, r1
  LWIP_ASSERT_CORE_LOCKED();
 800819a:	f7fb fe93 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800819e:	b33d      	cbz	r5, 80081f0 <tcp_recved+0x5c>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80081a0:	7d2b      	ldrb	r3, [r5, #20]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d01c      	beq.n	80081e0 <tcp_recved+0x4c>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80081a6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80081a8:	1919      	adds	r1, r3, r4
 80081aa:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80081ac:	428b      	cmp	r3, r1
 80081ae:	d803      	bhi.n	80081b8 <tcp_recved+0x24>
 80081b0:	f241 63d0 	movw	r3, #5840	; 0x16d0
 80081b4:	4299      	cmp	r1, r3
 80081b6:	d901      	bls.n	80081bc <tcp_recved+0x28>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80081b8:	f241 61d0 	movw	r1, #5840	; 0x16d0
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80081bc:	4628      	mov	r0, r5
 80081be:	8529      	strh	r1, [r5, #40]	; 0x28
 80081c0:	f7ff ffac 	bl	800811c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80081c4:	f240 53b3 	movw	r3, #1459	; 0x5b3
 80081c8:	4298      	cmp	r0, r3
 80081ca:	d800      	bhi.n	80081ce <tcp_recved+0x3a>
}
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 80081ce:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 80081d0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	836b      	strh	r3, [r5, #26]
}
 80081d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 80081dc:	f003 bce8 	b.w	800bbb0 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <tcp_recved+0x70>)
 80081e2:	f240 32d2 	movw	r2, #978	; 0x3d2
 80081e6:	4908      	ldr	r1, [pc, #32]	; (8008208 <tcp_recved+0x74>)
 80081e8:	4808      	ldr	r0, [pc, #32]	; (800820c <tcp_recved+0x78>)
 80081ea:	f006 f80d 	bl	800e208 <iprintf>
 80081ee:	e7da      	b.n	80081a6 <tcp_recved+0x12>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <tcp_recved+0x70>)
 80081f2:	f240 32cf 	movw	r2, #975	; 0x3cf
 80081f6:	4906      	ldr	r1, [pc, #24]	; (8008210 <tcp_recved+0x7c>)
 80081f8:	4804      	ldr	r0, [pc, #16]	; (800820c <tcp_recved+0x78>)
}
 80081fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80081fe:	f006 b803 	b.w	800e208 <iprintf>
 8008202:	bf00      	nop
 8008204:	080101e0 	.word	0x080101e0
 8008208:	08010330 	.word	0x08010330
 800820c:	0800f0a0 	.word	0x0800f0a0
 8008210:	08010318 	.word	0x08010318

08008214 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8008214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008216:	4604      	mov	r4, r0
 8008218:	460d      	mov	r5, r1
 800821a:	4617      	mov	r7, r2
 800821c:	461e      	mov	r6, r3
  struct netif *netif = NULL;
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();
 800821e:	f7fb fe51 	bl	8003ec4 <sys_check_core_locking>

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8008222:	2c00      	cmp	r4, #0
 8008224:	f000 808a 	beq.w	800833c <tcp_connect+0x128>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008228:	2d00      	cmp	r5, #0
 800822a:	d07d      	beq.n	8008328 <tcp_connect+0x114>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800822c:	7d23      	ldrb	r3, [r4, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d16a      	bne.n	8008308 <tcp_connect+0xf4>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008232:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8008234:	7a20      	ldrb	r0, [r4, #8]
  pcb->remote_port = port;
 8008236:	8327      	strh	r7, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8008238:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800823a:	2800      	cmp	r0, #0
 800823c:	d049      	beq.n	80082d2 <tcp_connect+0xbe>
    netif = netif_get_by_index(pcb->netif_idx);
 800823e:	f7ff f987 	bl	8007550 <netif_get_by_index>
 8008242:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 8008244:	2d00      	cmp	r5, #0
 8008246:	d06c      	beq.n	8008322 <tcp_connect+0x10e>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	b90b      	cbnz	r3, 8008250 <tcp_connect+0x3c>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800824c:	686b      	ldr	r3, [r5, #4]
 800824e:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8008250:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8008252:	b927      	cbnz	r7, 800825e <tcp_connect+0x4a>
    pcb->local_port = tcp_new_port();
 8008254:	f7ff fde4 	bl	8007e20 <tcp_new_port>
 8008258:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 800825a:	2800      	cmp	r0, #0
 800825c:	d05e      	beq.n	800831c <tcp_connect+0x108>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800825e:	4b3c      	ldr	r3, [pc, #240]	; (8008350 <tcp_connect+0x13c>)
 8008260:	4a3c      	ldr	r2, [pc, #240]	; (8008354 <tcp_connect+0x140>)
 8008262:	6811      	ldr	r1, [r2, #0]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 8008268:	f241 61d0 	movw	r1, #5840	; 0x16d0
  iss += tcp_ticks;       /* XXX */
 800826c:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 800826e:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 8008270:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008272:	4b39      	ldr	r3, [pc, #228]	; (8008358 <tcp_connect+0x144>)
  pcb->lastack = iss - 1;
 8008274:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008276:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 8008278:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  pcb->snd_wnd = TCP_WND;
 800827a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 800827e:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 8008282:	2200      	movs	r2, #0
 8008284:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008286:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008288:	2b00      	cmp	r3, #0
 800828a:	d037      	beq.n	80082fc <tcp_connect+0xe8>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800828c:	2b28      	cmp	r3, #40	; 0x28
 800828e:	d907      	bls.n	80082a0 <tcp_connect+0x8c>
 8008290:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008294:	b292      	uxth	r2, r2
 8008296:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800829a:	bf28      	it	cs
 800829c:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 80082a0:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80082a2:	2102      	movs	r1, #2
 80082a4:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80082a6:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 80082a8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 80082ac:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80082b0:	f003 fa62 	bl	800b778 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 80082b4:	4605      	mov	r5, r0
 80082b6:	b9f8      	cbnz	r0, 80082f8 <tcp_connect+0xe4>
    pcb->state = SYN_SENT;
 80082b8:	2302      	movs	r3, #2
 80082ba:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 80082bc:	b187      	cbz	r7, 80082e0 <tcp_connect+0xcc>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80082be:	4a27      	ldr	r2, [pc, #156]	; (800835c <tcp_connect+0x148>)
 80082c0:	6813      	ldr	r3, [r2, #0]
 80082c2:	42a3      	cmp	r3, r4
 80082c4:	d01d      	beq.n	8008302 <tcp_connect+0xee>
 80082c6:	b15b      	cbz	r3, 80082e0 <tcp_connect+0xcc>
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	42a2      	cmp	r2, r4
 80082cc:	d006      	beq.n	80082dc <tcp_connect+0xc8>
 80082ce:	4613      	mov	r3, r2
 80082d0:	e7f9      	b.n	80082c6 <tcp_connect+0xb2>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80082d2:	1d20      	adds	r0, r4, #4
 80082d4:	f004 fe8c 	bl	800cff0 <ip4_route>
 80082d8:	4605      	mov	r5, r0
 80082da:	e7b3      	b.n	8008244 <tcp_connect+0x30>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80082dc:	68e2      	ldr	r2, [r4, #12]
 80082de:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 80082e0:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <tcp_connect+0x14c>)
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	601c      	str	r4, [r3, #0]
 80082e6:	60e2      	str	r2, [r4, #12]
 80082e8:	f003 ff86 	bl	800c1f8 <tcp_timer_needed>
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <tcp_connect+0x150>)
 80082ee:	2201      	movs	r2, #1
    tcp_output(pcb);
 80082f0:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 80082f2:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 80082f4:	f003 fc5c 	bl	800bbb0 <tcp_output>
}
 80082f8:	4628      	mov	r0, r5
 80082fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008300:	e7ce      	b.n	80082a0 <tcp_connect+0x8c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e7eb      	b.n	80082e0 <tcp_connect+0xcc>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8008308:	4b17      	ldr	r3, [pc, #92]	; (8008368 <tcp_connect+0x154>)
 800830a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800830e:	4917      	ldr	r1, [pc, #92]	; (800836c <tcp_connect+0x158>)
 8008310:	f06f 0509 	mvn.w	r5, #9
 8008314:	4816      	ldr	r0, [pc, #88]	; (8008370 <tcp_connect+0x15c>)
 8008316:	f005 ff77 	bl	800e208 <iprintf>
 800831a:	e7ed      	b.n	80082f8 <tcp_connect+0xe4>
      return ERR_BUF;
 800831c:	f06f 0501 	mvn.w	r5, #1
 8008320:	e7ea      	b.n	80082f8 <tcp_connect+0xe4>
    return ERR_RTE;
 8008322:	f06f 0503 	mvn.w	r5, #3
 8008326:	e7e7      	b.n	80082f8 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <tcp_connect+0x154>)
 800832a:	f240 4236 	movw	r2, #1078	; 0x436
 800832e:	4911      	ldr	r1, [pc, #68]	; (8008374 <tcp_connect+0x160>)
 8008330:	f06f 050f 	mvn.w	r5, #15
 8008334:	480e      	ldr	r0, [pc, #56]	; (8008370 <tcp_connect+0x15c>)
 8008336:	f005 ff67 	bl	800e208 <iprintf>
 800833a:	e7dd      	b.n	80082f8 <tcp_connect+0xe4>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <tcp_connect+0x154>)
 800833e:	f240 4235 	movw	r2, #1077	; 0x435
 8008342:	490d      	ldr	r1, [pc, #52]	; (8008378 <tcp_connect+0x164>)
 8008344:	f06f 050f 	mvn.w	r5, #15
 8008348:	4809      	ldr	r0, [pc, #36]	; (8008370 <tcp_connect+0x15c>)
 800834a:	f005 ff5d 	bl	800e208 <iprintf>
 800834e:	e7d3      	b.n	80082f8 <tcp_connect+0xe4>
 8008350:	24000028 	.word	0x24000028
 8008354:	24010588 	.word	0x24010588
 8008358:	16d016d0 	.word	0x16d016d0
 800835c:	24010580 	.word	0x24010580
 8008360:	24010578 	.word	0x24010578
 8008364:	2401057c 	.word	0x2401057c
 8008368:	080101e0 	.word	0x080101e0
 800836c:	08010390 	.word	0x08010390
 8008370:	0800f0a0 	.word	0x0800f0a0
 8008374:	08010374 	.word	0x08010374
 8008378:	08010358 	.word	0x08010358

0800837c <tcp_segs_free>:
  while (seg != NULL) {
 800837c:	b170      	cbz	r0, 800839c <tcp_segs_free+0x20>
{
 800837e:	b538      	push	{r3, r4, r5, lr}
 8008380:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 8008382:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 8008384:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008386:	6868      	ldr	r0, [r5, #4]
 8008388:	b108      	cbz	r0, 800838e <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 800838a:	f7ff fc03 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800838e:	4629      	mov	r1, r5
 8008390:	2003      	movs	r0, #3
 8008392:	f7fe fecb 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008396:	2c00      	cmp	r4, #0
 8008398:	d1f3      	bne.n	8008382 <tcp_segs_free+0x6>
}
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop

080083a0 <tcp_seg_free>:
  if (seg != NULL) {
 80083a0:	b158      	cbz	r0, 80083ba <tcp_seg_free+0x1a>
{
 80083a2:	b510      	push	{r4, lr}
 80083a4:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80083a6:	6840      	ldr	r0, [r0, #4]
 80083a8:	b108      	cbz	r0, 80083ae <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80083aa:	f7ff fbf3 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 80083ae:	4621      	mov	r1, r4
 80083b0:	2003      	movs	r0, #3
}
 80083b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 80083b6:	f7fe beb9 	b.w	800712c <memp_free>
 80083ba:	4770      	bx	lr

080083bc <tcp_seg_copy>:
{
 80083bc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80083be:	4605      	mov	r5, r0
 80083c0:	b188      	cbz	r0, 80083e6 <tcp_seg_copy+0x2a>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80083c2:	2003      	movs	r0, #3
 80083c4:	f7fe fe6c 	bl	80070a0 <memp_malloc>
  if (cseg == NULL) {
 80083c8:	4604      	mov	r4, r0
 80083ca:	b150      	cbz	r0, 80083e2 <tcp_seg_copy+0x26>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80083cc:	6868      	ldr	r0, [r5, #4]
 80083ce:	6829      	ldr	r1, [r5, #0]
 80083d0:	68aa      	ldr	r2, [r5, #8]
 80083d2:	68eb      	ldr	r3, [r5, #12]
 80083d4:	6060      	str	r0, [r4, #4]
 80083d6:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 80083d8:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80083da:	60a2      	str	r2, [r4, #8]
 80083dc:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 80083de:	f7ff fbf7 	bl	8007bd0 <pbuf_ref>
}
 80083e2:	4620      	mov	r0, r4
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80083e6:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <tcp_seg_copy+0x3c>)
 80083e8:	f240 6282 	movw	r2, #1666	; 0x682
 80083ec:	4903      	ldr	r1, [pc, #12]	; (80083fc <tcp_seg_copy+0x40>)
 80083ee:	4804      	ldr	r0, [pc, #16]	; (8008400 <tcp_seg_copy+0x44>)
 80083f0:	f005 ff0a 	bl	800e208 <iprintf>
 80083f4:	e7e5      	b.n	80083c2 <tcp_seg_copy+0x6>
 80083f6:	bf00      	nop
 80083f8:	080101e0 	.word	0x080101e0
 80083fc:	080103c0 	.word	0x080103c0
 8008400:	0800f0a0 	.word	0x0800f0a0

08008404 <tcp_arg>:
{
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4604      	mov	r4, r0
 8008408:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800840a:	f7fb fd5b 	bl	8003ec4 <sys_check_core_locking>
  if (pcb != NULL) {
 800840e:	b104      	cbz	r4, 8008412 <tcp_arg+0xe>
    pcb->callback_arg = arg;
 8008410:	6125      	str	r5, [r4, #16]
}
 8008412:	bd38      	pop	{r3, r4, r5, pc}

08008414 <tcp_recv>:
{
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4604      	mov	r4, r0
 8008418:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800841a:	f7fb fd53 	bl	8003ec4 <sys_check_core_locking>
  if (pcb != NULL) {
 800841e:	b124      	cbz	r4, 800842a <tcp_recv+0x16>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008420:	7d23      	ldrb	r3, [r4, #20]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d002      	beq.n	800842c <tcp_recv+0x18>
    pcb->recv = recv;
 8008426:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 800842a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800842c:	4b03      	ldr	r3, [pc, #12]	; (800843c <tcp_recv+0x28>)
 800842e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008432:	4903      	ldr	r1, [pc, #12]	; (8008440 <tcp_recv+0x2c>)
 8008434:	4803      	ldr	r0, [pc, #12]	; (8008444 <tcp_recv+0x30>)
 8008436:	f005 fee7 	bl	800e208 <iprintf>
 800843a:	e7f4      	b.n	8008426 <tcp_recv+0x12>
 800843c:	080101e0 	.word	0x080101e0
 8008440:	080103dc 	.word	0x080103dc
 8008444:	0800f0a0 	.word	0x0800f0a0

08008448 <tcp_sent>:
{
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 800844e:	f7fb fd39 	bl	8003ec4 <sys_check_core_locking>
  if (pcb != NULL) {
 8008452:	b124      	cbz	r4, 800845e <tcp_sent+0x16>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008454:	7d23      	ldrb	r3, [r4, #20]
 8008456:	2b01      	cmp	r3, #1
 8008458:	d002      	beq.n	8008460 <tcp_sent+0x18>
    pcb->sent = sent;
 800845a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800845e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008460:	4b03      	ldr	r3, [pc, #12]	; (8008470 <tcp_sent+0x28>)
 8008462:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008466:	4903      	ldr	r1, [pc, #12]	; (8008474 <tcp_sent+0x2c>)
 8008468:	4803      	ldr	r0, [pc, #12]	; (8008478 <tcp_sent+0x30>)
 800846a:	f005 fecd 	bl	800e208 <iprintf>
 800846e:	e7f4      	b.n	800845a <tcp_sent+0x12>
 8008470:	080101e0 	.word	0x080101e0
 8008474:	08010404 	.word	0x08010404
 8008478:	0800f0a0 	.word	0x0800f0a0

0800847c <tcp_err>:
{
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4604      	mov	r4, r0
 8008480:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008482:	f7fb fd1f 	bl	8003ec4 <sys_check_core_locking>
  if (pcb != NULL) {
 8008486:	b124      	cbz	r4, 8008492 <tcp_err+0x16>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008488:	7d23      	ldrb	r3, [r4, #20]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d002      	beq.n	8008494 <tcp_err+0x18>
    pcb->errf = err;
 800848e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8008492:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008494:	4b03      	ldr	r3, [pc, #12]	; (80084a4 <tcp_err+0x28>)
 8008496:	f640 020d 	movw	r2, #2061	; 0x80d
 800849a:	4903      	ldr	r1, [pc, #12]	; (80084a8 <tcp_err+0x2c>)
 800849c:	4803      	ldr	r0, [pc, #12]	; (80084ac <tcp_err+0x30>)
 800849e:	f005 feb3 	bl	800e208 <iprintf>
 80084a2:	e7f4      	b.n	800848e <tcp_err+0x12>
 80084a4:	080101e0 	.word	0x080101e0
 80084a8:	0801042c 	.word	0x0801042c
 80084ac:	0800f0a0 	.word	0x0800f0a0

080084b0 <tcp_accept>:
{
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4604      	mov	r4, r0
 80084b4:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
 80084b6:	f7fb fd05 	bl	8003ec4 <sys_check_core_locking>
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80084ba:	b11c      	cbz	r4, 80084c4 <tcp_accept+0x14>
 80084bc:	7d23      	ldrb	r3, [r4, #20]
 80084be:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 80084c0:	bf08      	it	eq
 80084c2:	61a5      	streq	r5, [r4, #24]
}
 80084c4:	bd38      	pop	{r3, r4, r5, pc}
 80084c6:	bf00      	nop

080084c8 <tcp_poll>:
{
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4604      	mov	r4, r0
 80084cc:	460e      	mov	r6, r1
 80084ce:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();
 80084d0:	f7fb fcf8 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80084d4:	b18c      	cbz	r4, 80084fa <tcp_poll+0x32>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80084d6:	7d23      	ldrb	r3, [r4, #20]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d003      	beq.n	80084e4 <tcp_poll+0x1c>
  pcb->poll = poll;
 80084dc:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 80084e0:	7765      	strb	r5, [r4, #29]
}
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80084e4:	4b09      	ldr	r3, [pc, #36]	; (800850c <tcp_poll+0x44>)
 80084e6:	f640 023e 	movw	r2, #2110	; 0x83e
 80084ea:	4909      	ldr	r1, [pc, #36]	; (8008510 <tcp_poll+0x48>)
 80084ec:	4809      	ldr	r0, [pc, #36]	; (8008514 <tcp_poll+0x4c>)
 80084ee:	f005 fe8b 	bl	800e208 <iprintf>
  pcb->poll = poll;
 80084f2:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 80084f6:	7765      	strb	r5, [r4, #29]
}
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80084fa:	4b04      	ldr	r3, [pc, #16]	; (800850c <tcp_poll+0x44>)
 80084fc:	f640 023d 	movw	r2, #2109	; 0x83d
 8008500:	4905      	ldr	r1, [pc, #20]	; (8008518 <tcp_poll+0x50>)
 8008502:	4804      	ldr	r0, [pc, #16]	; (8008514 <tcp_poll+0x4c>)
}
 8008504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008508:	f005 be7e 	b.w	800e208 <iprintf>
 800850c:	080101e0 	.word	0x080101e0
 8008510:	0801046c 	.word	0x0801046c
 8008514:	0800f0a0 	.word	0x0800f0a0
 8008518:	08010454 	.word	0x08010454

0800851c <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800851c:	2800      	cmp	r0, #0
 800851e:	d041      	beq.n	80085a4 <tcp_pcb_purge+0x88>
{
 8008520:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 8008522:	7d03      	ldrb	r3, [r0, #20]
 8008524:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8008526:	2b0a      	cmp	r3, #10
 8008528:	d001      	beq.n	800852e <tcp_pcb_purge+0x12>
 800852a:	2b01      	cmp	r3, #1
 800852c:	d800      	bhi.n	8008530 <tcp_pcb_purge+0x14>
}
 800852e:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8008530:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8008532:	b118      	cbz	r0, 800853c <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 8008534:	f7ff fb2e 	bl	8007b94 <pbuf_free>
      pcb->refused_data = NULL;
 8008538:	2300      	movs	r3, #0
 800853a:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 800853c:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 800853e:	b164      	cbz	r4, 800855a <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 8008540:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008542:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008544:	6870      	ldr	r0, [r6, #4]
 8008546:	b108      	cbz	r0, 800854c <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 8008548:	f7ff fb24 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800854c:	4631      	mov	r1, r6
 800854e:	2003      	movs	r0, #3
 8008550:	f7fe fdec 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008554:	2c00      	cmp	r4, #0
 8008556:	d1f3      	bne.n	8008540 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8008558:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 800855a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800855e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 8008560:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 8008562:	b15c      	cbz	r4, 800857c <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 8008564:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008566:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008568:	6870      	ldr	r0, [r6, #4]
 800856a:	b108      	cbz	r0, 8008570 <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 800856c:	f7ff fb12 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008570:	4631      	mov	r1, r6
 8008572:	2003      	movs	r0, #3
 8008574:	f7fe fdda 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008578:	2c00      	cmp	r4, #0
 800857a:	d1f3      	bne.n	8008564 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 800857c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 800857e:	b15c      	cbz	r4, 8008598 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 8008580:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 8008582:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008584:	6870      	ldr	r0, [r6, #4]
 8008586:	b108      	cbz	r0, 800858c <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 8008588:	f7ff fb04 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800858c:	4631      	mov	r1, r6
 800858e:	2003      	movs	r0, #3
 8008590:	f7fe fdcc 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008594:	2c00      	cmp	r4, #0
 8008596:	d1f3      	bne.n	8008580 <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800859e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 80085a2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <tcp_pcb_purge+0x98>)
 80085a6:	f640 0251 	movw	r2, #2129	; 0x851
 80085aa:	4903      	ldr	r1, [pc, #12]	; (80085b8 <tcp_pcb_purge+0x9c>)
 80085ac:	4803      	ldr	r0, [pc, #12]	; (80085bc <tcp_pcb_purge+0xa0>)
 80085ae:	f005 be2b 	b.w	800e208 <iprintf>
 80085b2:	bf00      	nop
 80085b4:	080101e0 	.word	0x080101e0
 80085b8:	0801048c 	.word	0x0801048c
 80085bc:	0800f0a0 	.word	0x0800f0a0

080085c0 <tcp_slowtmr>:
{
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80085c4:	4da9      	ldr	r5, [pc, #676]	; (800886c <tcp_slowtmr+0x2ac>)
{
 80085c6:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 80085c8:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 8008898 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 80085cc:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80085ce:	4fa8      	ldr	r7, [pc, #672]	; (8008870 <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 80085d0:	3301      	adds	r3, #1
 80085d2:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 80085d4:	f89b 3000 	ldrb.w	r3, [fp]
 80085d8:	3301      	adds	r3, #1
 80085da:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 80085de:	4ba5      	ldr	r3, [pc, #660]	; (8008874 <tcp_slowtmr+0x2b4>)
 80085e0:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 80085e2:	2c00      	cmp	r4, #0
 80085e4:	f000 808a 	beq.w	80086fc <tcp_slowtmr+0x13c>
  prev = NULL;
 80085e8:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80085ea:	46b1      	mov	r9, r6
 80085ec:	7d23      	ldrb	r3, [r4, #20]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80fc 	beq.w	80087ec <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	f000 8104 	beq.w	8008802 <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80085fa:	2b0a      	cmp	r3, #10
 80085fc:	f000 810c 	beq.w	8008818 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008600:	f89b 2000 	ldrb.w	r2, [fp]
 8008604:	7fa3      	ldrb	r3, [r4, #30]
 8008606:	4293      	cmp	r3, r2
 8008608:	f000 8113 	beq.w	8008832 <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800860c:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800860e:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008610:	2b02      	cmp	r3, #2
 8008612:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8008616:	f000 8112 	beq.w	800883e <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800861a:	2a0b      	cmp	r2, #11
 800861c:	f240 80cb 	bls.w	80087b6 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8008620:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 8008624:	2b06      	cmp	r3, #6
 8008626:	f000 80b7 	beq.w	8008798 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800862a:	f894 a009 	ldrb.w	sl, [r4, #9]
 800862e:	f01a 0a08 	ands.w	sl, sl, #8
 8008632:	d01d      	beq.n	8008670 <tcp_slowtmr+0xb0>
 8008634:	2b04      	cmp	r3, #4
 8008636:	d007      	beq.n	8008648 <tcp_slowtmr+0x88>
 8008638:	f1a3 0307 	sub.w	r3, r3, #7
 800863c:	fab3 f383 	clz	r3, r3
 8008640:	095b      	lsrs	r3, r3, #5
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80b4 	beq.w	80087b0 <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008648:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800864c:	4b8a      	ldr	r3, [pc, #552]	; (8008878 <tcp_slowtmr+0x2b8>)
 800864e:	488b      	ldr	r0, [pc, #556]	; (800887c <tcp_slowtmr+0x2bc>)
 8008650:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008652:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008654:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008658:	6a20      	ldr	r0, [r4, #32]
 800865a:	1a12      	subs	r2, r2, r0
 800865c:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8008660:	f240 8160 	bls.w	8008924 <tcp_slowtmr+0x364>
        ++pcb_remove;
 8008664:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 8008668:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 800866c:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 8008670:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8008672:	b156      	cbz	r6, 800868a <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	6a22      	ldr	r2, [r4, #32]
 8008678:	1a9a      	subs	r2, r3, r2
 800867a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800867e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8008682:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8008686:	f080 80e1 	bcs.w	800884c <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 800868a:	7d23      	ldrb	r3, [r4, #20]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d057      	beq.n	8008740 <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 8008690:	2b09      	cmp	r3, #9
 8008692:	d15a      	bne.n	800874a <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	6a22      	ldr	r2, [r4, #32]
 8008698:	1a9b      	subs	r3, r3, r2
 800869a:	2bf0      	cmp	r3, #240	; 0xf0
 800869c:	d955      	bls.n	800874a <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 800869e:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 80086a0:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80086a4:	f7ff ff3a 	bl	800851c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80086a8:	4b72      	ldr	r3, [pc, #456]	; (8008874 <tcp_slowtmr+0x2b4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 80086ac:	f1b9 0f00 	cmp.w	r9, #0
 80086b0:	f000 817e 	beq.w	80089b0 <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80086b4:	42a3      	cmp	r3, r4
 80086b6:	f000 81df 	beq.w	8008a78 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 80086ba:	68e3      	ldr	r3, [r4, #12]
 80086bc:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 80086c0:	f1ba 0f00 	cmp.w	sl, #0
 80086c4:	f040 8147 	bne.w	8008956 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80086c8:	7d23      	ldrb	r3, [r4, #20]
 80086ca:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 80086cc:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80086d0:	f000 8153 	beq.w	800897a <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 80086d4:	4621      	mov	r1, r4
 80086d6:	2001      	movs	r0, #1
 80086d8:	f7fe fd28 	bl	800712c <memp_free>
      tcp_active_pcbs_changed = 0;
 80086dc:	4c68      	ldr	r4, [pc, #416]	; (8008880 <tcp_slowtmr+0x2c0>)
 80086de:	2300      	movs	r3, #0
 80086e0:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80086e2:	b13e      	cbz	r6, 80086f4 <tcp_slowtmr+0x134>
 80086e4:	f06f 010c 	mvn.w	r1, #12
 80086e8:	4650      	mov	r0, sl
 80086ea:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 80086ec:	7823      	ldrb	r3, [r4, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f47f af75 	bne.w	80085de <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 80086f4:	4644      	mov	r4, r8
  while (pcb != NULL) {
 80086f6:	2c00      	cmp	r4, #0
 80086f8:	f47f af78 	bne.w	80085ec <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 80086fc:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800889c <tcp_slowtmr+0x2dc>
 8008700:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 8008704:	b1cc      	cbz	r4, 800873a <tcp_slowtmr+0x17a>
  prev = NULL;
 8008706:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008708:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8008870 <tcp_slowtmr+0x2b0>
 800870c:	f8df a190 	ldr.w	sl, [pc, #400]	; 80088a0 <tcp_slowtmr+0x2e0>
 8008710:	4f5c      	ldr	r7, [pc, #368]	; (8008884 <tcp_slowtmr+0x2c4>)
 8008712:	7d23      	ldrb	r3, [r4, #20]
 8008714:	2b0a      	cmp	r3, #10
 8008716:	d006      	beq.n	8008726 <tcp_slowtmr+0x166>
 8008718:	4643      	mov	r3, r8
 800871a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800871e:	4651      	mov	r1, sl
 8008720:	4638      	mov	r0, r7
 8008722:	f005 fd71 	bl	800e208 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	6a22      	ldr	r2, [r4, #32]
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	2bf0      	cmp	r3, #240	; 0xf0
 800872e:	f200 80d4 	bhi.w	80088da <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 8008732:	4626      	mov	r6, r4
 8008734:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008736:	2c00      	cmp	r4, #0
 8008738:	d1eb      	bne.n	8008712 <tcp_slowtmr+0x152>
}
 800873a:	b007      	add	sp, #28
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	6a22      	ldr	r2, [r4, #32]
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	2b28      	cmp	r3, #40	; 0x28
 8008748:	d8a9      	bhi.n	800869e <tcp_slowtmr+0xde>
    if (pcb_remove) {
 800874a:	f1b8 0f00 	cmp.w	r8, #0
 800874e:	d1a6      	bne.n	800869e <tcp_slowtmr+0xde>
      ++prev->polltmr;
 8008750:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008752:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8008754:	3301      	adds	r3, #1
      pcb = pcb->next;
 8008756:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8008758:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800875a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800875c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800875e:	d815      	bhi.n	800878c <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 8008760:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8008880 <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 8008764:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8008768:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800876c:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 80ce 	beq.w	8008912 <tcp_slowtmr+0x352>
 8008776:	4621      	mov	r1, r4
 8008778:	6920      	ldr	r0, [r4, #16]
 800877a:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800877c:	f899 3000 	ldrb.w	r3, [r9]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f47f af2c 	bne.w	80085de <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 8008786:	2800      	cmp	r0, #0
 8008788:	f000 80c3 	beq.w	8008912 <tcp_slowtmr+0x352>
 800878c:	46a1      	mov	r9, r4
      pcb = pcb->next;
 800878e:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8008790:	2c00      	cmp	r4, #0
 8008792:	f47f af2b 	bne.w	80085ec <tcp_slowtmr+0x2c>
 8008796:	e7b1      	b.n	80086fc <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 8008798:	8b63      	ldrh	r3, [r4, #26]
 800879a:	06db      	lsls	r3, r3, #27
 800879c:	d508      	bpl.n	80087b0 <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	6a22      	ldr	r2, [r4, #32]
 80087a2:	1a9b      	subs	r3, r3, r2
 80087a4:	2b28      	cmp	r3, #40	; 0x28
 80087a6:	d903      	bls.n	80087b0 <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 80087a8:	f108 0801 	add.w	r8, r8, #1
 80087ac:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	e75c      	b.n	8008670 <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 80087b6:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 80087ba:	f1b8 0f00 	cmp.w	r8, #0
 80087be:	d071      	beq.n	80088a4 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80087c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80087c2:	b133      	cbz	r3, 80087d2 <tcp_slowtmr+0x212>
 80087c4:	463b      	mov	r3, r7
 80087c6:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80087ca:	492f      	ldr	r1, [pc, #188]	; (8008888 <tcp_slowtmr+0x2c8>)
 80087cc:	482d      	ldr	r0, [pc, #180]	; (8008884 <tcp_slowtmr+0x2c4>)
 80087ce:	f005 fd1b 	bl	800e208 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80087d2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 8171 	beq.w	8008abc <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80087da:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80087de:	2b0b      	cmp	r3, #11
 80087e0:	f240 80d2 	bls.w	8008988 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 80087e4:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 80087e6:	f04f 0801 	mov.w	r8, #1
 80087ea:	e71b      	b.n	8008624 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80087ec:	463b      	mov	r3, r7
 80087ee:	f240 42be 	movw	r2, #1214	; 0x4be
 80087f2:	4926      	ldr	r1, [pc, #152]	; (800888c <tcp_slowtmr+0x2cc>)
 80087f4:	4823      	ldr	r0, [pc, #140]	; (8008884 <tcp_slowtmr+0x2c4>)
 80087f6:	f005 fd07 	bl	800e208 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80087fa:	7d23      	ldrb	r3, [r4, #20]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	f47f aefc 	bne.w	80085fa <tcp_slowtmr+0x3a>
 8008802:	463b      	mov	r3, r7
 8008804:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008808:	4921      	ldr	r1, [pc, #132]	; (8008890 <tcp_slowtmr+0x2d0>)
 800880a:	481e      	ldr	r0, [pc, #120]	; (8008884 <tcp_slowtmr+0x2c4>)
 800880c:	f005 fcfc 	bl	800e208 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008810:	7d23      	ldrb	r3, [r4, #20]
 8008812:	2b0a      	cmp	r3, #10
 8008814:	f47f aef4 	bne.w	8008600 <tcp_slowtmr+0x40>
 8008818:	463b      	mov	r3, r7
 800881a:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800881e:	491d      	ldr	r1, [pc, #116]	; (8008894 <tcp_slowtmr+0x2d4>)
 8008820:	4818      	ldr	r0, [pc, #96]	; (8008884 <tcp_slowtmr+0x2c4>)
 8008822:	f005 fcf1 	bl	800e208 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008826:	f89b 2000 	ldrb.w	r2, [fp]
 800882a:	7fa3      	ldrb	r3, [r4, #30]
 800882c:	4293      	cmp	r3, r2
 800882e:	f47f aeed 	bne.w	800860c <tcp_slowtmr+0x4c>
      continue;
 8008832:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008834:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008836:	2c00      	cmp	r4, #0
 8008838:	f47f aed8 	bne.w	80085ec <tcp_slowtmr+0x2c>
 800883c:	e75e      	b.n	80086fc <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800883e:	2a05      	cmp	r2, #5
 8008840:	d9b9      	bls.n	80087b6 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 8008842:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 8008846:	f04f 0801 	mov.w	r8, #1
 800884a:	e711      	b.n	8008670 <tcp_slowtmr+0xb0>
 800884c:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 800884e:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 8008850:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 8008852:	6860      	ldr	r0, [r4, #4]
 8008854:	b108      	cbz	r0, 800885a <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 8008856:	f7ff f99d 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 800885a:	4621      	mov	r1, r4
 800885c:	2003      	movs	r0, #3
 800885e:	f7fe fc65 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008862:	2e00      	cmp	r6, #0
 8008864:	d1f3      	bne.n	800884e <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 8008866:	9c05      	ldr	r4, [sp, #20]
 8008868:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800886a:	e70e      	b.n	800868a <tcp_slowtmr+0xca>
 800886c:	24010588 	.word	0x24010588
 8008870:	080101e0 	.word	0x080101e0
 8008874:	24010578 	.word	0x24010578
 8008878:	000a4cb8 	.word	0x000a4cb8
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	2401057c 	.word	0x2401057c
 8008884:	0800f0a0 	.word	0x0800f0a0
 8008888:	08010530 	.word	0x08010530
 800888c:	080104a8 	.word	0x080104a8
 8008890:	080104d4 	.word	0x080104d4
 8008894:	08010500 	.word	0x08010500
 8008898:	2401058d 	.word	0x2401058d
 800889c:	24010590 	.word	0x24010590
 80088a0:	080105f4 	.word	0x080105f4
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80088a4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80088a8:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80088ac:	b291      	uxth	r1, r2
 80088ae:	4281      	cmp	r1, r0
 80088b0:	d802      	bhi.n	80088b8 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 80088b2:	1c4a      	adds	r2, r1, #1
 80088b4:	b212      	sxth	r2, r2
 80088b6:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80088b8:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80088bc:	4291      	cmp	r1, r2
 80088be:	f73f aeb1 	bgt.w	8008624 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80088c2:	4620      	mov	r0, r4
 80088c4:	f003 f836 	bl	800b934 <tcp_rexmit_rto_prepare>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f000 80a0 	beq.w	8008a0e <tcp_slowtmr+0x44e>
 80088ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8098 	beq.w	8008a06 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 80088d6:	7d23      	ldrb	r3, [r4, #20]
 80088d8:	e6a4      	b.n	8008624 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff fe1e 	bl	800851c <tcp_pcb_purge>
      if (prev != NULL) {
 80088e0:	2e00      	cmp	r6, #0
 80088e2:	f000 80d1 	beq.w	8008a88 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80088e6:	f8d9 3000 	ldr.w	r3, [r9]
 80088ea:	42a3      	cmp	r3, r4
 80088ec:	f000 80ee 	beq.w	8008acc <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 80088f0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 80088f4:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80088f8:	7d23      	ldrb	r3, [r4, #20]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	f000 80d7 	beq.w	8008aae <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 8008900:	4621      	mov	r1, r4
      pcb = pcb->next;
 8008902:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 8008904:	2001      	movs	r0, #1
 8008906:	f7fe fc11 	bl	800712c <memp_free>
  while (pcb != NULL) {
 800890a:	2c00      	cmp	r4, #0
 800890c:	f47f af01 	bne.w	8008712 <tcp_slowtmr+0x152>
 8008910:	e713      	b.n	800873a <tcp_slowtmr+0x17a>
          tcp_output(prev);
 8008912:	4620      	mov	r0, r4
 8008914:	46a1      	mov	r9, r4
      pcb = pcb->next;
 8008916:	4634      	mov	r4, r6
          tcp_output(prev);
 8008918:	f003 f94a 	bl	800bbb0 <tcp_output>
  while (pcb != NULL) {
 800891c:	2c00      	cmp	r4, #0
 800891e:	f47f ae65 	bne.w	80085ec <tcp_slowtmr+0x2c>
 8008922:	e6eb      	b.n	80086fc <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008924:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8008928:	4870      	ldr	r0, [pc, #448]	; (8008aec <tcp_slowtmr+0x52c>)
 800892a:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 800892e:	4b70      	ldr	r3, [pc, #448]	; (8008af0 <tcp_slowtmr+0x530>)
 8008930:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008934:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8008938:	f67f af3a 	bls.w	80087b0 <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 800893c:	4620      	mov	r0, r4
 800893e:	f003 fb65 	bl	800c00c <tcp_keepalive>
        if (err == ERR_OK) {
 8008942:	2800      	cmp	r0, #0
 8008944:	f47f af34 	bne.w	80087b0 <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8008948:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 800894c:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 800894e:	3301      	adds	r3, #1
 8008950:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 8008954:	e68c      	b.n	8008670 <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008956:	8b23      	ldrh	r3, [r4, #24]
 8008958:	4620      	mov	r0, r4
 800895a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800895c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	8ae3      	ldrh	r3, [r4, #22]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	1d23      	adds	r3, r4, #4
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4623      	mov	r3, r4
 800896a:	f003 f8a7 	bl	800babc <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800896e:	7d23      	ldrb	r3, [r4, #20]
 8008970:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 8008972:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008976:	f47f aead 	bne.w	80086d4 <tcp_slowtmr+0x114>
 800897a:	463b      	mov	r3, r7
 800897c:	22d4      	movs	r2, #212	; 0xd4
 800897e:	495d      	ldr	r1, [pc, #372]	; (8008af4 <tcp_slowtmr+0x534>)
 8008980:	485d      	ldr	r0, [pc, #372]	; (8008af8 <tcp_slowtmr+0x538>)
 8008982:	f005 fc41 	bl	800e208 <iprintf>
 8008986:	e6a5      	b.n	80086d4 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008988:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800898c:	4a5b      	ldr	r2, [pc, #364]	; (8008afc <tcp_slowtmr+0x53c>)
 800898e:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 8008990:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008994:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8008998:	4293      	cmp	r3, r2
 800899a:	d216      	bcs.n	80089ca <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 800899c:	3301      	adds	r3, #1
 800899e:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80089a0:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80089a2:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80089a6:	d210      	bcs.n	80089ca <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 80089a8:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	e639      	b.n	8008624 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d006      	beq.n	80089c2 <tcp_slowtmr+0x402>
 80089b4:	463b      	mov	r3, r7
 80089b6:	f240 5271 	movw	r2, #1393	; 0x571
 80089ba:	4951      	ldr	r1, [pc, #324]	; (8008b00 <tcp_slowtmr+0x540>)
 80089bc:	484e      	ldr	r0, [pc, #312]	; (8008af8 <tcp_slowtmr+0x538>)
 80089be:	f005 fc23 	bl	800e208 <iprintf>
        tcp_active_pcbs = pcb->next;
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	4a4f      	ldr	r2, [pc, #316]	; (8008b04 <tcp_slowtmr+0x544>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	e67a      	b.n	80086c0 <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 80089ca:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 80089ce:	b936      	cbnz	r6, 80089de <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80089d0:	4620      	mov	r0, r4
 80089d2:	f003 fb41 	bl	800c058 <tcp_zero_window_probe>
 80089d6:	b140      	cbz	r0, 80089ea <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 80089d8:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 80089da:	7d23      	ldrb	r3, [r4, #20]
 80089dc:	e622      	b.n	8008624 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80089de:	4631      	mov	r1, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f002 fdf3 	bl	800b5cc <tcp_split_unsent_seg>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d078      	beq.n	8008adc <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089ea:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 80089ee:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089f2:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80089f4:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089f8:	f63f af6d 	bhi.w	80088d6 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 80089fc:	3301      	adds	r3, #1
 80089fe:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 8008a02:	7d23      	ldrb	r3, [r4, #20]
 8008a04:	e60e      	b.n	8008624 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f43f af64 	beq.w	80088d6 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 8008a0e:	7d23      	ldrb	r3, [r4, #20]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d014      	beq.n	8008a3e <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a14:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a18:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8008a1c:	2a0c      	cmp	r2, #12
 8008a1e:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8008a22:	bf28      	it	cs
 8008a24:	220c      	movcs	r2, #12
 8008a26:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8008a2a:	4937      	ldr	r1, [pc, #220]	; (8008b08 <tcp_slowtmr+0x548>)
 8008a2c:	5c8a      	ldrb	r2, [r1, r2]
 8008a2e:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bfa8      	it	ge
 8008a38:	4613      	movge	r3, r2
 8008a3a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a3e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 8008a42:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008a44:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a48:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8008a4a:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 8008a4c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a50:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 8008a54:	bf28      	it	cs
 8008a56:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008a58:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008a5a:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 8008a5e:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008a62:	bf88      	it	hi
 8008a64:	4613      	movhi	r3, r2
 8008a66:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 8008a6e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008a72:	f003 fa7f 	bl	800bf74 <tcp_rexmit_rto_commit>
 8008a76:	e72e      	b.n	80088d6 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008a78:	463b      	mov	r3, r7
 8008a7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8008a7e:	4923      	ldr	r1, [pc, #140]	; (8008b0c <tcp_slowtmr+0x54c>)
 8008a80:	481d      	ldr	r0, [pc, #116]	; (8008af8 <tcp_slowtmr+0x538>)
 8008a82:	f005 fbc1 	bl	800e208 <iprintf>
 8008a86:	e618      	b.n	80086ba <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008a88:	f8d9 3000 	ldr.w	r3, [r9]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	d006      	beq.n	8008a9e <tcp_slowtmr+0x4de>
 8008a90:	4643      	mov	r3, r8
 8008a92:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8008a96:	491e      	ldr	r1, [pc, #120]	; (8008b10 <tcp_slowtmr+0x550>)
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f005 fbb5 	bl	800e208 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008a9e:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 8008aa0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008aa4:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 8008aa6:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008aaa:	f47f af29 	bne.w	8008900 <tcp_slowtmr+0x340>
 8008aae:	4643      	mov	r3, r8
 8008ab0:	22d4      	movs	r2, #212	; 0xd4
 8008ab2:	4910      	ldr	r1, [pc, #64]	; (8008af4 <tcp_slowtmr+0x534>)
 8008ab4:	4638      	mov	r0, r7
 8008ab6:	f005 fba7 	bl	800e208 <iprintf>
 8008aba:	e721      	b.n	8008900 <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008abc:	463b      	mov	r3, r7
 8008abe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008ac2:	4914      	ldr	r1, [pc, #80]	; (8008b14 <tcp_slowtmr+0x554>)
 8008ac4:	480c      	ldr	r0, [pc, #48]	; (8008af8 <tcp_slowtmr+0x538>)
 8008ac6:	f005 fb9f 	bl	800e208 <iprintf>
 8008aca:	e686      	b.n	80087da <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008acc:	4643      	mov	r3, r8
 8008ace:	f240 52af 	movw	r2, #1455	; 0x5af
 8008ad2:	4911      	ldr	r1, [pc, #68]	; (8008b18 <tcp_slowtmr+0x558>)
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f005 fb97 	bl	800e208 <iprintf>
 8008ada:	e709      	b.n	80088f0 <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 8008adc:	4620      	mov	r0, r4
 8008ade:	f003 f867 	bl	800bbb0 <tcp_output>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d181      	bne.n	80089ea <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 8008ae6:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 8008ae8:	7d23      	ldrb	r3, [r4, #20]
 8008aea:	e59b      	b.n	8008624 <tcp_slowtmr+0x64>
 8008aec:	000124f8 	.word	0x000124f8
 8008af0:	10624dd3 	.word	0x10624dd3
 8008af4:	0801021c 	.word	0x0801021c
 8008af8:	0800f0a0 	.word	0x0800f0a0
 8008afc:	080108b8 	.word	0x080108b8
 8008b00:	080105c8 	.word	0x080105c8
 8008b04:	24010578 	.word	0x24010578
 8008b08:	08010898 	.word	0x08010898
 8008b0c:	0801059c 	.word	0x0801059c
 8008b10:	0801064c 	.word	0x0801064c
 8008b14:	08010564 	.word	0x08010564
 8008b18:	08010624 	.word	0x08010624

08008b1c <tcp_pcb_remove>:
{
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008b20:	460c      	mov	r4, r1
 8008b22:	2900      	cmp	r1, #0
 8008b24:	d04a      	beq.n	8008bbc <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	d051      	beq.n	8008bce <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	d032      	beq.n	8008b96 <tcp_pcb_remove+0x7a>
 8008b30:	b12b      	cbz	r3, 8008b3e <tcp_pcb_remove+0x22>
 8008b32:	68da      	ldr	r2, [r3, #12]
 8008b34:	42a2      	cmp	r2, r4
 8008b36:	d03e      	beq.n	8008bb6 <tcp_pcb_remove+0x9a>
 8008b38:	4613      	mov	r3, r2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1f9      	bne.n	8008b32 <tcp_pcb_remove+0x16>
 8008b3e:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8008b40:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8008b42:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8008b44:	f7ff fcea 	bl	800851c <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8008b48:	7d23      	ldrb	r3, [r4, #20]
 8008b4a:	2b0a      	cmp	r3, #10
 8008b4c:	d02d      	beq.n	8008baa <tcp_pcb_remove+0x8e>
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d01d      	beq.n	8008b8e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8008b52:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8008b54:	07da      	lsls	r2, r3, #31
 8008b56:	d421      	bmi.n	8008b9c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008b58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008b5a:	b133      	cbz	r3, 8008b6a <tcp_pcb_remove+0x4e>
 8008b5c:	4b20      	ldr	r3, [pc, #128]	; (8008be0 <tcp_pcb_remove+0xc4>)
 8008b5e:	f640 0293 	movw	r2, #2195	; 0x893
 8008b62:	4920      	ldr	r1, [pc, #128]	; (8008be4 <tcp_pcb_remove+0xc8>)
 8008b64:	4820      	ldr	r0, [pc, #128]	; (8008be8 <tcp_pcb_remove+0xcc>)
 8008b66:	f005 fb4f 	bl	800e208 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008b6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008b6c:	b133      	cbz	r3, 8008b7c <tcp_pcb_remove+0x60>
 8008b6e:	4b1c      	ldr	r3, [pc, #112]	; (8008be0 <tcp_pcb_remove+0xc4>)
 8008b70:	f640 0294 	movw	r2, #2196	; 0x894
 8008b74:	491d      	ldr	r1, [pc, #116]	; (8008bec <tcp_pcb_remove+0xd0>)
 8008b76:	481c      	ldr	r0, [pc, #112]	; (8008be8 <tcp_pcb_remove+0xcc>)
 8008b78:	f005 fb46 	bl	800e208 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008b7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008b7e:	b133      	cbz	r3, 8008b8e <tcp_pcb_remove+0x72>
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <tcp_pcb_remove+0xc4>)
 8008b82:	f640 0296 	movw	r2, #2198	; 0x896
 8008b86:	491a      	ldr	r1, [pc, #104]	; (8008bf0 <tcp_pcb_remove+0xd4>)
 8008b88:	4817      	ldr	r0, [pc, #92]	; (8008be8 <tcp_pcb_remove+0xcc>)
 8008b8a:	f005 fb3d 	bl	800e208 <iprintf>
  pcb->state = CLOSED;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008b92:	82e3      	strh	r3, [r4, #22]
}
 8008b94:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8008b96:	68e3      	ldr	r3, [r4, #12]
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	e7d0      	b.n	8008b3e <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 8008b9c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8008ba0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8008ba2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8008ba4:	f003 f804 	bl	800bbb0 <tcp_output>
  if (pcb->state != LISTEN) {
 8008ba8:	7d23      	ldrb	r3, [r4, #20]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d0ef      	beq.n	8008b8e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008bae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1d3      	bne.n	8008b5c <tcp_pcb_remove+0x40>
 8008bb4:	e7d9      	b.n	8008b6a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 8008bb6:	68e2      	ldr	r2, [r4, #12]
 8008bb8:	60da      	str	r2, [r3, #12]
 8008bba:	e7c0      	b.n	8008b3e <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008bbc:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <tcp_pcb_remove+0xc4>)
 8008bbe:	f640 0283 	movw	r2, #2179	; 0x883
 8008bc2:	490c      	ldr	r1, [pc, #48]	; (8008bf4 <tcp_pcb_remove+0xd8>)
 8008bc4:	4808      	ldr	r0, [pc, #32]	; (8008be8 <tcp_pcb_remove+0xcc>)
 8008bc6:	f005 fb1f 	bl	800e208 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008bca:	2d00      	cmp	r5, #0
 8008bcc:	d1ad      	bne.n	8008b2a <tcp_pcb_remove+0xe>
 8008bce:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <tcp_pcb_remove+0xc4>)
 8008bd0:	f640 0284 	movw	r2, #2180	; 0x884
 8008bd4:	4908      	ldr	r1, [pc, #32]	; (8008bf8 <tcp_pcb_remove+0xdc>)
 8008bd6:	4804      	ldr	r0, [pc, #16]	; (8008be8 <tcp_pcb_remove+0xcc>)
 8008bd8:	f005 fb16 	bl	800e208 <iprintf>
 8008bdc:	e7a5      	b.n	8008b2a <tcp_pcb_remove+0xe>
 8008bde:	bf00      	nop
 8008be0:	080101e0 	.word	0x080101e0
 8008be4:	080106b0 	.word	0x080106b0
 8008be8:	0800f0a0 	.word	0x0800f0a0
 8008bec:	080106c8 	.word	0x080106c8
 8008bf0:	080106e4 	.word	0x080106e4
 8008bf4:	08010674 	.word	0x08010674
 8008bf8:	08010690 	.word	0x08010690

08008bfc <tcp_abandon>:
{
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	4605      	mov	r5, r0
 8008c02:	b087      	sub	sp, #28
 8008c04:	460e      	mov	r6, r1
  LWIP_ASSERT_CORE_LOCKED();
 8008c06:	f7fb f95d 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	f000 80a8 	beq.w	8008d60 <tcp_abandon+0x164>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008c10:	7d2b      	ldrb	r3, [r5, #20]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	f000 808b 	beq.w	8008d2e <tcp_abandon+0x132>
  if (pcb->state == TIME_WAIT) {
 8008c18:	2b0a      	cmp	r3, #10
 8008c1a:	f000 8093 	beq.w	8008d44 <tcp_abandon+0x148>
    seqno = pcb->snd_nxt;
 8008c1e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008c20:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 8008c24:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8008c28:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 8008c2c:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 8008c2e:	b96b      	cbnz	r3, 8008c4c <tcp_abandon+0x50>
      if (pcb->local_port != 0) {
 8008c30:	8aef      	ldrh	r7, [r5, #22]
 8008c32:	2f00      	cmp	r7, #0
 8008c34:	d052      	beq.n	8008cdc <tcp_abandon+0xe0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c36:	4a53      	ldr	r2, [pc, #332]	; (8008d84 <tcp_abandon+0x188>)
 8008c38:	6813      	ldr	r3, [r2, #0]
 8008c3a:	42ab      	cmp	r3, r5
 8008c3c:	d074      	beq.n	8008d28 <tcp_abandon+0x12c>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d050      	beq.n	8008ce4 <tcp_abandon+0xe8>
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	42aa      	cmp	r2, r5
 8008c46:	d04b      	beq.n	8008ce0 <tcp_abandon+0xe4>
 8008c48:	4613      	mov	r3, r2
 8008c4a:	e7f8      	b.n	8008c3e <tcp_abandon+0x42>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	484e      	ldr	r0, [pc, #312]	; (8008d88 <tcp_abandon+0x18c>)
      local_port = pcb->local_port;
 8008c50:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008c52:	f7ff ff63 	bl	8008b1c <tcp_pcb_remove>
 8008c56:	4b4d      	ldr	r3, [pc, #308]	; (8008d8c <tcp_abandon+0x190>)
 8008c58:	2201      	movs	r2, #1
 8008c5a:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008c5c:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8008c5e:	b164      	cbz	r4, 8008c7a <tcp_abandon+0x7e>
      pbuf_free(seg->p);
 8008c60:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008c62:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008c64:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008c68:	b108      	cbz	r0, 8008c6e <tcp_abandon+0x72>
      pbuf_free(seg->p);
 8008c6a:	f7fe ff93 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008c6e:	4651      	mov	r1, sl
 8008c70:	2003      	movs	r0, #3
 8008c72:	f7fe fa5b 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008c76:	2c00      	cmp	r4, #0
 8008c78:	d1f2      	bne.n	8008c60 <tcp_abandon+0x64>
    if (pcb->unsent != NULL) {
 8008c7a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8008c7c:	b164      	cbz	r4, 8008c98 <tcp_abandon+0x9c>
      pbuf_free(seg->p);
 8008c7e:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008c80:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008c82:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008c86:	b108      	cbz	r0, 8008c8c <tcp_abandon+0x90>
      pbuf_free(seg->p);
 8008c88:	f7fe ff84 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008c8c:	4651      	mov	r1, sl
 8008c8e:	2003      	movs	r0, #3
 8008c90:	f7fe fa4c 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	d1f2      	bne.n	8008c7e <tcp_abandon+0x82>
    if (pcb->ooseq != NULL) {
 8008c98:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8008c9a:	b164      	cbz	r4, 8008cb6 <tcp_abandon+0xba>
      pbuf_free(seg->p);
 8008c9c:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 8008c9e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 8008ca0:	f8da 0004 	ldr.w	r0, [sl, #4]
 8008ca4:	b108      	cbz	r0, 8008caa <tcp_abandon+0xae>
      pbuf_free(seg->p);
 8008ca6:	f7fe ff75 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8008caa:	4651      	mov	r1, sl
 8008cac:	2003      	movs	r0, #3
 8008cae:	f7fe fa3d 	bl	800712c <memp_free>
  while (seg != NULL) {
 8008cb2:	2c00      	cmp	r4, #0
 8008cb4:	d1f2      	bne.n	8008c9c <tcp_abandon+0xa0>
    if (send_rst) {
 8008cb6:	b9ce      	cbnz	r6, 8008cec <tcp_abandon+0xf0>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008cb8:	7d2b      	ldrb	r3, [r5, #20]
 8008cba:	2b01      	cmp	r3, #1
 8008cbc:	d024      	beq.n	8008d08 <tcp_abandon+0x10c>
  memp_free(MEMP_TCP_PCB, pcb);
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f7fe fa33 	bl	800712c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008cc6:	f1b8 0f00 	cmp.w	r8, #0
 8008cca:	d02a      	beq.n	8008d22 <tcp_abandon+0x126>
 8008ccc:	f06f 010c 	mvn.w	r1, #12
 8008cd0:	4648      	mov	r0, r9
 8008cd2:	4643      	mov	r3, r8
}
 8008cd4:	b007      	add	sp, #28
 8008cd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008cda:	4718      	bx	r3
    int send_rst = 0;
 8008cdc:	461e      	mov	r6, r3
 8008cde:	e7bd      	b.n	8008c5c <tcp_abandon+0x60>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ce0:	68ea      	ldr	r2, [r5, #12]
 8008ce2:	60da      	str	r2, [r3, #12]
 8008ce4:	2700      	movs	r7, #0
    int send_rst = 0;
 8008ce6:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008ce8:	60ef      	str	r7, [r5, #12]
 8008cea:	e7b7      	b.n	8008c5c <tcp_abandon+0x60>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008cec:	9701      	str	r7, [sp, #4]
 8008cee:	465a      	mov	r2, fp
 8008cf0:	8b2b      	ldrh	r3, [r5, #24]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	9905      	ldr	r1, [sp, #20]
 8008cf6:	9302      	str	r3, [sp, #8]
 8008cf8:	1d2b      	adds	r3, r5, #4
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	462b      	mov	r3, r5
 8008cfe:	f002 fedd 	bl	800babc <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d02:	7d2b      	ldrb	r3, [r5, #20]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d1da      	bne.n	8008cbe <tcp_abandon+0xc2>
 8008d08:	4921      	ldr	r1, [pc, #132]	; (8008d90 <tcp_abandon+0x194>)
 8008d0a:	22d4      	movs	r2, #212	; 0xd4
 8008d0c:	4b21      	ldr	r3, [pc, #132]	; (8008d94 <tcp_abandon+0x198>)
 8008d0e:	4822      	ldr	r0, [pc, #136]	; (8008d98 <tcp_abandon+0x19c>)
 8008d10:	f005 fa7a 	bl	800e208 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008d14:	4629      	mov	r1, r5
 8008d16:	2001      	movs	r0, #1
 8008d18:	f7fe fa08 	bl	800712c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008d1c:	f1b8 0f00 	cmp.w	r8, #0
 8008d20:	d1d4      	bne.n	8008ccc <tcp_abandon+0xd0>
}
 8008d22:	b007      	add	sp, #28
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d28:	68eb      	ldr	r3, [r5, #12]
 8008d2a:	6013      	str	r3, [r2, #0]
 8008d2c:	e7da      	b.n	8008ce4 <tcp_abandon+0xe8>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008d2e:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <tcp_abandon+0x198>)
 8008d30:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008d34:	4919      	ldr	r1, [pc, #100]	; (8008d9c <tcp_abandon+0x1a0>)
 8008d36:	4818      	ldr	r0, [pc, #96]	; (8008d98 <tcp_abandon+0x19c>)
 8008d38:	f005 fa66 	bl	800e208 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8008d3c:	7d2b      	ldrb	r3, [r5, #20]
 8008d3e:	2b0a      	cmp	r3, #10
 8008d40:	f47f af6d 	bne.w	8008c1e <tcp_abandon+0x22>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008d44:	4629      	mov	r1, r5
 8008d46:	4816      	ldr	r0, [pc, #88]	; (8008da0 <tcp_abandon+0x1a4>)
 8008d48:	f7ff fee8 	bl	8008b1c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d4c:	7d2b      	ldrb	r3, [r5, #20]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d010      	beq.n	8008d74 <tcp_abandon+0x178>
  memp_free(MEMP_TCP_PCB, pcb);
 8008d52:	4629      	mov	r1, r5
 8008d54:	2001      	movs	r0, #1
}
 8008d56:	b007      	add	sp, #28
 8008d58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008d5c:	f7fe b9e6 	b.w	800712c <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d60:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <tcp_abandon+0x198>)
 8008d62:	f240 223d 	movw	r2, #573	; 0x23d
 8008d66:	490f      	ldr	r1, [pc, #60]	; (8008da4 <tcp_abandon+0x1a8>)
 8008d68:	480b      	ldr	r0, [pc, #44]	; (8008d98 <tcp_abandon+0x19c>)
}
 8008d6a:	b007      	add	sp, #28
 8008d6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008d70:	f005 ba4a 	b.w	800e208 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <tcp_abandon+0x198>)
 8008d76:	22d4      	movs	r2, #212	; 0xd4
 8008d78:	4905      	ldr	r1, [pc, #20]	; (8008d90 <tcp_abandon+0x194>)
 8008d7a:	4807      	ldr	r0, [pc, #28]	; (8008d98 <tcp_abandon+0x19c>)
 8008d7c:	f005 fa44 	bl	800e208 <iprintf>
 8008d80:	e7e7      	b.n	8008d52 <tcp_abandon+0x156>
 8008d82:	bf00      	nop
 8008d84:	24010580 	.word	0x24010580
 8008d88:	24010578 	.word	0x24010578
 8008d8c:	2401057c 	.word	0x2401057c
 8008d90:	0801021c 	.word	0x0801021c
 8008d94:	080101e0 	.word	0x080101e0
 8008d98:	0800f0a0 	.word	0x0800f0a0
 8008d9c:	08010718 	.word	0x08010718
 8008da0:	24010590 	.word	0x24010590
 8008da4:	080106fc 	.word	0x080106fc

08008da8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 8008da8:	2101      	movs	r1, #1
 8008daa:	f7ff bf27 	b.w	8008bfc <tcp_abandon>
 8008dae:	bf00      	nop

08008db0 <tcp_accept_null>:
{
 8008db0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008db2:	460c      	mov	r4, r1
 8008db4:	b131      	cbz	r1, 8008dc4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8008db6:	4620      	mov	r0, r4
 8008db8:	2101      	movs	r1, #1
 8008dba:	f7ff ff1f 	bl	8008bfc <tcp_abandon>
}
 8008dbe:	f06f 000c 	mvn.w	r0, #12
 8008dc2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008dc4:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <tcp_accept_null+0x30>)
 8008dc6:	f240 320f 	movw	r2, #783	; 0x30f
 8008dca:	4906      	ldr	r1, [pc, #24]	; (8008de4 <tcp_accept_null+0x34>)
 8008dcc:	4806      	ldr	r0, [pc, #24]	; (8008de8 <tcp_accept_null+0x38>)
 8008dce:	f005 fa1b 	bl	800e208 <iprintf>
  tcp_abandon(pcb, 1);
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	f7ff ff11 	bl	8008bfc <tcp_abandon>
}
 8008dda:	f06f 000c 	mvn.w	r0, #12
 8008dde:	bd10      	pop	{r4, pc}
 8008de0:	080101e0 	.word	0x080101e0
 8008de4:	0801074c 	.word	0x0801074c
 8008de8:	0800f0a0 	.word	0x0800f0a0

08008dec <tcp_netif_ip_addr_changed_pcblist>:
{
 8008dec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008dee:	4605      	mov	r5, r0
{
 8008df0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008df2:	b178      	cbz	r0, 8008e14 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8008df4:	b134      	cbz	r4, 8008e04 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008df6:	6822      	ldr	r2, [r4, #0]
 8008df8:	682b      	ldr	r3, [r5, #0]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d003      	beq.n	8008e06 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 8008dfe:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008e00:	2c00      	cmp	r4, #0
 8008e02:	d1f8      	bne.n	8008df6 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 8008e06:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 8008e08:	4620      	mov	r0, r4
 8008e0a:	2101      	movs	r1, #1
      pcb = next;
 8008e0c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 8008e0e:	f7ff fef5 	bl	8008bfc <tcp_abandon>
      pcb = next;
 8008e12:	e7ef      	b.n	8008df4 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008e14:	4b03      	ldr	r3, [pc, #12]	; (8008e24 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008e16:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008e1a:	4903      	ldr	r1, [pc, #12]	; (8008e28 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8008e1c:	4803      	ldr	r0, [pc, #12]	; (8008e2c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8008e1e:	f005 f9f3 	bl	800e208 <iprintf>
 8008e22:	e7e7      	b.n	8008df4 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8008e24:	080101e0 	.word	0x080101e0
 8008e28:	0801076c 	.word	0x0801076c
 8008e2c:	0800f0a0 	.word	0x0800f0a0

08008e30 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <tcp_kill_state+0x40>)
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	b1d1      	cbz	r1, 8008e6c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e36:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <tcp_kill_state+0x44>)
  inactivity = 0;
 8008e38:	2200      	movs	r2, #0
{
 8008e3a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e3c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8008e3e:	4614      	mov	r4, r2
 8008e40:	e001      	b.n	8008e46 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e42:	68c9      	ldr	r1, [r1, #12]
 8008e44:	b159      	cbz	r1, 8008e5e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8008e46:	7d0b      	ldrb	r3, [r1, #20]
 8008e48:	4283      	cmp	r3, r0
 8008e4a:	d1fa      	bne.n	8008e42 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e4c:	6a0b      	ldr	r3, [r1, #32]
 8008e4e:	1aeb      	subs	r3, r5, r3
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d3f6      	bcc.n	8008e42 <tcp_kill_state+0x12>
 8008e54:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e56:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008e58:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008e5a:	2900      	cmp	r1, #0
 8008e5c:	d1f3      	bne.n	8008e46 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8008e5e:	b11c      	cbz	r4, 8008e68 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8008e60:	4620      	mov	r0, r4
}
 8008e62:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8008e64:	f7ff beca 	b.w	8008bfc <tcp_abandon>
}
 8008e68:	bc30      	pop	{r4, r5}
 8008e6a:	4770      	bx	lr
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	24010578 	.word	0x24010578
 8008e74:	24010588 	.word	0x24010588

08008e78 <tcp_alloc>:
{
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	4605      	mov	r5, r0
  LWIP_ASSERT_CORE_LOCKED();
 8008e7c:	f7fb f822 	bl	8003ec4 <sys_check_core_locking>
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e80:	2001      	movs	r0, #1
 8008e82:	f7fe f90d 	bl	80070a0 <memp_malloc>
  if (pcb == NULL) {
 8008e86:	4603      	mov	r3, r0
 8008e88:	b320      	cbz	r0, 8008ed4 <tcp_alloc+0x5c>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e8a:	229c      	movs	r2, #156	; 0x9c
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 8008e90:	f241 64d0 	movw	r4, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e94:	f005 f91b 	bl	800e0ce <memset>
    pcb->last_timer = tcp_timer_ctr;
 8008e98:	4943      	ldr	r1, [pc, #268]	; (8008fa8 <tcp_alloc+0x130>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e9a:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008e9c:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 8008e9e:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 8008ea0:	4842      	ldr	r0, [pc, #264]	; (8008fac <tcp_alloc+0x134>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008ea2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 8008ea6:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 8008eaa:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008eac:	4a40      	ldr	r2, [pc, #256]	; (8008fb0 <tcp_alloc+0x138>)
    pcb->recv = tcp_recv_null;
 8008eae:	4941      	ldr	r1, [pc, #260]	; (8008fb4 <tcp_alloc+0x13c>)
    pcb->snd_buf = TCP_SND_BUF;
 8008eb0:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 8008eb4:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 8008eb6:	4c40      	ldr	r4, [pc, #256]	; (8008fb8 <tcp_alloc+0x140>)
    pcb->cwnd = 1;
 8008eb8:	4840      	ldr	r0, [pc, #256]	; (8008fbc <tcp_alloc+0x144>)
    pcb->recv = tcp_recv_null;
 8008eba:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008ebe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 8008ec2:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008ec4:	493e      	ldr	r1, [pc, #248]	; (8008fc0 <tcp_alloc+0x148>)
    pcb->cwnd = 1;
 8008ec6:	6498      	str	r0, [r3, #72]	; 0x48
}
 8008ec8:	4618      	mov	r0, r3
    pcb->prio = prio;
 8008eca:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 8008ecc:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008ece:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008ed0:	72da      	strb	r2, [r3, #11]
}
 8008ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008ed4:	4e3b      	ldr	r6, [pc, #236]	; (8008fc4 <tcp_alloc+0x14c>)
 8008ed6:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 8008ed8:	b15c      	cbz	r4, 8008ef2 <tcp_alloc+0x7a>
    struct tcp_pcb *next = pcb->next;
 8008eda:	4620      	mov	r0, r4
 8008edc:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008ede:	8b43      	ldrh	r3, [r0, #26]
 8008ee0:	0719      	lsls	r1, r3, #28
 8008ee2:	d5f9      	bpl.n	8008ed8 <tcp_alloc+0x60>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008ee4:	f023 0308 	bic.w	r3, r3, #8
 8008ee8:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008eea:	f7fe ffc9 	bl	8007e80 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8008eee:	2c00      	cmp	r4, #0
 8008ef0:	d1f3      	bne.n	8008eda <tcp_alloc+0x62>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ef2:	4b35      	ldr	r3, [pc, #212]	; (8008fc8 <tcp_alloc+0x150>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	b193      	cbz	r3, 8008f1e <tcp_alloc+0xa6>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008ef8:	4a2c      	ldr	r2, [pc, #176]	; (8008fac <tcp_alloc+0x134>)
 8008efa:	4618      	mov	r0, r3
 8008efc:	6a19      	ldr	r1, [r3, #32]
 8008efe:	6814      	ldr	r4, [r2, #0]
 8008f00:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	b143      	cbz	r3, 8008f18 <tcp_alloc+0xa0>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	1aa2      	subs	r2, r4, r2
 8008f0a:	428a      	cmp	r2, r1
 8008f0c:	d3f9      	bcc.n	8008f02 <tcp_alloc+0x8a>
 8008f0e:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f10:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008f12:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f6      	bne.n	8008f06 <tcp_alloc+0x8e>
  tcp_abandon(pcb, 1);
 8008f18:	2101      	movs	r1, #1
 8008f1a:	f7ff fe6f 	bl	8008bfc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f1e:	2001      	movs	r0, #1
 8008f20:	f7fe f8be 	bl	80070a0 <memp_malloc>
    if (pcb == NULL) {
 8008f24:	4603      	mov	r3, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d1af      	bne.n	8008e8a <tcp_alloc+0x12>
      tcp_kill_state(LAST_ACK);
 8008f2a:	2009      	movs	r0, #9
 8008f2c:	f7ff ff80 	bl	8008e30 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f30:	2001      	movs	r0, #1
 8008f32:	f7fe f8b5 	bl	80070a0 <memp_malloc>
      if (pcb == NULL) {
 8008f36:	4603      	mov	r3, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1a6      	bne.n	8008e8a <tcp_alloc+0x12>
        tcp_kill_state(CLOSING);
 8008f3c:	2008      	movs	r0, #8
 8008f3e:	f7ff ff77 	bl	8008e30 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f42:	2001      	movs	r0, #1
 8008f44:	f7fe f8ac 	bl	80070a0 <memp_malloc>
        if (pcb == NULL) {
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d19d      	bne.n	8008e8a <tcp_alloc+0x12>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008f4e:	062a      	lsls	r2, r5, #24
 8008f50:	d427      	bmi.n	8008fa2 <tcp_alloc+0x12a>
  if (mprio == 0) {
 8008f52:	b1ed      	cbz	r5, 8008f90 <tcp_alloc+0x118>
 8008f54:	462a      	mov	r2, r5
  mprio--;
 8008f56:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f58:	6832      	ldr	r2, [r6, #0]
  mprio--;
 8008f5a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f5c:	b1c2      	cbz	r2, 8008f90 <tcp_alloc+0x118>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f5e:	4813      	ldr	r0, [pc, #76]	; (8008fac <tcp_alloc+0x134>)
  inactivity = 0;
 8008f60:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f62:	6807      	ldr	r7, [r0, #0]
 8008f64:	e005      	b.n	8008f72 <tcp_alloc+0xfa>
 8008f66:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8008f68:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 8008f6a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8008f6c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f6e:	68d2      	ldr	r2, [r2, #12]
 8008f70:	b14a      	cbz	r2, 8008f86 <tcp_alloc+0x10e>
    if ((pcb->prio < mprio) ||
 8008f72:	7d50      	ldrb	r0, [r2, #21]
 8008f74:	4288      	cmp	r0, r1
 8008f76:	d3f6      	bcc.n	8008f66 <tcp_alloc+0xee>
 8008f78:	d1f9      	bne.n	8008f6e <tcp_alloc+0xf6>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008f7a:	6a14      	ldr	r4, [r2, #32]
 8008f7c:	eba7 0e04 	sub.w	lr, r7, r4
 8008f80:	45b6      	cmp	lr, r6
 8008f82:	d3f4      	bcc.n	8008f6e <tcp_alloc+0xf6>
 8008f84:	e7f0      	b.n	8008f68 <tcp_alloc+0xf0>
  if (inactive != NULL) {
 8008f86:	b11b      	cbz	r3, 8008f90 <tcp_alloc+0x118>
  tcp_abandon(pcb, 1);
 8008f88:	2101      	movs	r1, #1
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7ff fe36 	bl	8008bfc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008f90:	2001      	movs	r0, #1
 8008f92:	f7fe f885 	bl	80070a0 <memp_malloc>
  if (pcb != NULL) {
 8008f96:	4603      	mov	r3, r0
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	f47f af76 	bne.w	8008e8a <tcp_alloc+0x12>
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008fa2:	227f      	movs	r2, #127	; 0x7f
 8008fa4:	e7d7      	b.n	8008f56 <tcp_alloc+0xde>
 8008fa6:	bf00      	nop
 8008fa8:	2401058d 	.word	0x2401058d
 8008fac:	24010588 	.word	0x24010588
 8008fb0:	006ddd00 	.word	0x006ddd00
 8008fb4:	080091b9 	.word	0x080091b9
 8008fb8:	0218ffff 	.word	0x0218ffff
 8008fbc:	16d00001 	.word	0x16d00001
 8008fc0:	16d016d0 	.word	0x16d016d0
 8008fc4:	24010578 	.word	0x24010578
 8008fc8:	24010590 	.word	0x24010590

08008fcc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008fcc:	2040      	movs	r0, #64	; 0x40
 8008fce:	f7ff bf53 	b.w	8008e78 <tcp_alloc>
 8008fd2:	bf00      	nop

08008fd4 <tcp_close_shutdown>:
{
 8008fd4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008fd6:	4604      	mov	r4, r0
{
 8008fd8:	b085      	sub	sp, #20
 8008fda:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	d06b      	beq.n	80090b8 <tcp_close_shutdown+0xe4>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008fe0:	7d23      	ldrb	r3, [r4, #20]
 8008fe2:	b11d      	cbz	r5, 8008fec <tcp_close_shutdown+0x18>
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	d00c      	beq.n	8009002 <tcp_close_shutdown+0x2e>
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	d00a      	beq.n	8009002 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d06b      	beq.n	80090c8 <tcp_close_shutdown+0xf4>
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d030      	beq.n	8009056 <tcp_close_shutdown+0x82>
 8008ff4:	b333      	cbz	r3, 8009044 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 8008ff6:	4620      	mov	r0, r4
}
 8008ff8:	b005      	add	sp, #20
 8008ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8008ffe:	f7fe bf3f 	b.w	8007e80 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009002:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8009004:	2a00      	cmp	r2, #0
 8009006:	d037      	beq.n	8009078 <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009008:	8b63      	ldrh	r3, [r4, #26]
 800900a:	06db      	lsls	r3, r3, #27
 800900c:	f140 8085 	bpl.w	800911a <tcp_close_shutdown+0x146>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009010:	8b21      	ldrh	r1, [r4, #24]
 8009012:	1d20      	adds	r0, r4, #4
 8009014:	8ae2      	ldrh	r2, [r4, #22]
 8009016:	4623      	mov	r3, r4
 8009018:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800901c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800901e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009020:	9000      	str	r0, [sp, #0]
 8009022:	4620      	mov	r0, r4
 8009024:	f002 fd4a 	bl	800babc <tcp_rst>
      tcp_pcb_purge(pcb);
 8009028:	4620      	mov	r0, r4
 800902a:	f7ff fa77 	bl	800851c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800902e:	4a45      	ldr	r2, [pc, #276]	; (8009144 <tcp_close_shutdown+0x170>)
 8009030:	6813      	ldr	r3, [r2, #0]
 8009032:	42a3      	cmp	r3, r4
 8009034:	d031      	beq.n	800909a <tcp_close_shutdown+0xc6>
 8009036:	2b00      	cmp	r3, #0
 8009038:	d031      	beq.n	800909e <tcp_close_shutdown+0xca>
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	42a2      	cmp	r2, r4
 800903e:	d069      	beq.n	8009114 <tcp_close_shutdown+0x140>
 8009040:	4613      	mov	r3, r2
 8009042:	e7f8      	b.n	8009036 <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 8009044:	8ae3      	ldrh	r3, [r4, #22]
 8009046:	b9eb      	cbnz	r3, 8009084 <tcp_close_shutdown+0xb0>
  memp_free(MEMP_TCP_PCB, pcb);
 8009048:	4621      	mov	r1, r4
 800904a:	2001      	movs	r0, #1
 800904c:	f7fe f86e 	bl	800712c <memp_free>
}
 8009050:	2000      	movs	r0, #0
 8009052:	b005      	add	sp, #20
 8009054:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009056:	4621      	mov	r1, r4
 8009058:	483a      	ldr	r0, [pc, #232]	; (8009144 <tcp_close_shutdown+0x170>)
 800905a:	f7ff fd5f 	bl	8008b1c <tcp_pcb_remove>
 800905e:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009060:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009062:	4a39      	ldr	r2, [pc, #228]	; (8009148 <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009064:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009066:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009068:	d1ee      	bne.n	8009048 <tcp_close_shutdown+0x74>
 800906a:	4b38      	ldr	r3, [pc, #224]	; (800914c <tcp_close_shutdown+0x178>)
 800906c:	22d4      	movs	r2, #212	; 0xd4
 800906e:	4938      	ldr	r1, [pc, #224]	; (8009150 <tcp_close_shutdown+0x17c>)
 8009070:	4838      	ldr	r0, [pc, #224]	; (8009154 <tcp_close_shutdown+0x180>)
 8009072:	f005 f8c9 	bl	800e208 <iprintf>
 8009076:	e7e7      	b.n	8009048 <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009078:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800907a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800907e:	4291      	cmp	r1, r2
 8009080:	d0b4      	beq.n	8008fec <tcp_close_shutdown+0x18>
 8009082:	e7c1      	b.n	8009008 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009084:	4a34      	ldr	r2, [pc, #208]	; (8009158 <tcp_close_shutdown+0x184>)
 8009086:	6813      	ldr	r3, [r2, #0]
 8009088:	42a3      	cmp	r3, r4
 800908a:	d051      	beq.n	8009130 <tcp_close_shutdown+0x15c>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d03e      	beq.n	800910e <tcp_close_shutdown+0x13a>
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	42a2      	cmp	r2, r4
 8009094:	d039      	beq.n	800910a <tcp_close_shutdown+0x136>
 8009096:	4613      	mov	r3, r2
 8009098:	e7f8      	b.n	800908c <tcp_close_shutdown+0xb8>
      TCP_RMV_ACTIVE(pcb);
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 800909e:	4b2f      	ldr	r3, [pc, #188]	; (800915c <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 80090a0:	2000      	movs	r0, #0
 80090a2:	4a29      	ldr	r2, [pc, #164]	; (8009148 <tcp_close_shutdown+0x174>)
 80090a4:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 80090a6:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 80090a8:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 80090aa:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 80090ac:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 80090ae:	d03c      	beq.n	800912a <tcp_close_shutdown+0x156>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80090b0:	7d23      	ldrb	r3, [r4, #20]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d1c8      	bne.n	8009048 <tcp_close_shutdown+0x74>
 80090b6:	e7d8      	b.n	800906a <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80090b8:	4b24      	ldr	r3, [pc, #144]	; (800914c <tcp_close_shutdown+0x178>)
 80090ba:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80090be:	4928      	ldr	r1, [pc, #160]	; (8009160 <tcp_close_shutdown+0x18c>)
 80090c0:	4824      	ldr	r0, [pc, #144]	; (8009154 <tcp_close_shutdown+0x180>)
 80090c2:	f005 f8a1 	bl	800e208 <iprintf>
 80090c6:	e78b      	b.n	8008fe0 <tcp_close_shutdown+0xc>
 80090c8:	4926      	ldr	r1, [pc, #152]	; (8009164 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 80090ca:	2000      	movs	r0, #0
  switch (pcb->state) {
 80090cc:	4b22      	ldr	r3, [pc, #136]	; (8009158 <tcp_close_shutdown+0x184>)
 80090ce:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80090d2:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80090d4:	b133      	cbz	r3, 80090e4 <tcp_close_shutdown+0x110>
    if (pcb->listener == lpcb) {
 80090d6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80090d8:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 80090da:	bf08      	it	eq
 80090dc:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d1f8      	bne.n	80090d6 <tcp_close_shutdown+0x102>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80090e4:	42a9      	cmp	r1, r5
 80090e6:	d002      	beq.n	80090ee <tcp_close_shutdown+0x11a>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80090e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80090ec:	e7f1      	b.n	80090d2 <tcp_close_shutdown+0xfe>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80090ee:	4621      	mov	r1, r4
 80090f0:	481d      	ldr	r0, [pc, #116]	; (8009168 <tcp_close_shutdown+0x194>)
 80090f2:	f7ff fd13 	bl	8008b1c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80090f6:	7d23      	ldrb	r3, [r4, #20]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d01c      	beq.n	8009136 <tcp_close_shutdown+0x162>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80090fc:	4621      	mov	r1, r4
 80090fe:	2002      	movs	r0, #2
 8009100:	f7fe f814 	bl	800712c <memp_free>
}
 8009104:	2000      	movs	r0, #0
 8009106:	b005      	add	sp, #20
 8009108:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800910a:	68e2      	ldr	r2, [r4, #12]
 800910c:	60da      	str	r2, [r3, #12]
 800910e:	2300      	movs	r3, #0
 8009110:	60e3      	str	r3, [r4, #12]
 8009112:	e799      	b.n	8009048 <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 8009114:	68e2      	ldr	r2, [r4, #12]
 8009116:	60da      	str	r2, [r3, #12]
 8009118:	e7c1      	b.n	800909e <tcp_close_shutdown+0xca>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <tcp_close_shutdown+0x178>)
 800911c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009120:	4912      	ldr	r1, [pc, #72]	; (800916c <tcp_close_shutdown+0x198>)
 8009122:	480c      	ldr	r0, [pc, #48]	; (8009154 <tcp_close_shutdown+0x180>)
 8009124:	f005 f870 	bl	800e208 <iprintf>
 8009128:	e772      	b.n	8009010 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 800912a:	f001 fda1 	bl	800ac70 <tcp_trigger_input_pcb_close>
 800912e:	e78f      	b.n	8009050 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009130:	68e3      	ldr	r3, [r4, #12]
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	e7eb      	b.n	800910e <tcp_close_shutdown+0x13a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009136:	4b05      	ldr	r3, [pc, #20]	; (800914c <tcp_close_shutdown+0x178>)
 8009138:	22df      	movs	r2, #223	; 0xdf
 800913a:	490d      	ldr	r1, [pc, #52]	; (8009170 <tcp_close_shutdown+0x19c>)
 800913c:	4805      	ldr	r0, [pc, #20]	; (8009154 <tcp_close_shutdown+0x180>)
 800913e:	f005 f863 	bl	800e208 <iprintf>
 8009142:	e7db      	b.n	80090fc <tcp_close_shutdown+0x128>
 8009144:	24010578 	.word	0x24010578
 8009148:	2401057c 	.word	0x2401057c
 800914c:	080101e0 	.word	0x080101e0
 8009150:	0801021c 	.word	0x0801021c
 8009154:	0800f0a0 	.word	0x0800f0a0
 8009158:	24010580 	.word	0x24010580
 800915c:	240105bc 	.word	0x240105bc
 8009160:	080107a0 	.word	0x080107a0
 8009164:	080108b0 	.word	0x080108b0
 8009168:	24010584 	.word	0x24010584
 800916c:	080107c0 	.word	0x080107c0
 8009170:	080107dc 	.word	0x080107dc

08009174 <tcp_close>:
{
 8009174:	b510      	push	{r4, lr}
 8009176:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 8009178:	f7fa fea4 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800917c:	b164      	cbz	r4, 8009198 <tcp_close+0x24>
  if (pcb->state != LISTEN) {
 800917e:	7d23      	ldrb	r3, [r4, #20]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d003      	beq.n	800918c <tcp_close+0x18>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009184:	8b63      	ldrh	r3, [r4, #26]
 8009186:	f043 0310 	orr.w	r3, r3, #16
 800918a:	8363      	strh	r3, [r4, #26]
  return tcp_close_shutdown(pcb, 1);
 800918c:	4620      	mov	r0, r4
 800918e:	2101      	movs	r1, #1
}
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 8009194:	f7ff bf1e 	b.w	8008fd4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009198:	4b04      	ldr	r3, [pc, #16]	; (80091ac <tcp_close+0x38>)
 800919a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800919e:	4904      	ldr	r1, [pc, #16]	; (80091b0 <tcp_close+0x3c>)
 80091a0:	4804      	ldr	r0, [pc, #16]	; (80091b4 <tcp_close+0x40>)
 80091a2:	f005 f831 	bl	800e208 <iprintf>
}
 80091a6:	f06f 000f 	mvn.w	r0, #15
 80091aa:	bd10      	pop	{r4, pc}
 80091ac:	080101e0 	.word	0x080101e0
 80091b0:	080107f8 	.word	0x080107f8
 80091b4:	0800f0a0 	.word	0x0800f0a0

080091b8 <tcp_recv_null>:
{
 80091b8:	b510      	push	{r4, lr}
 80091ba:	b082      	sub	sp, #8
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80091bc:	b301      	cbz	r1, 8009200 <tcp_recv_null+0x48>
  if (p != NULL) {
 80091be:	4614      	mov	r4, r2
 80091c0:	4608      	mov	r0, r1
 80091c2:	b142      	cbz	r2, 80091d6 <tcp_recv_null+0x1e>
    tcp_recved(pcb, p->tot_len);
 80091c4:	8911      	ldrh	r1, [r2, #8]
 80091c6:	f7fe ffe5 	bl	8008194 <tcp_recved>
    pbuf_free(p);
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7fe fce2 	bl	8007b94 <pbuf_free>
  return ERR_OK;
 80091d0:	2000      	movs	r0, #0
}
 80091d2:	b002      	add	sp, #8
 80091d4:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 80091d6:	b113      	cbz	r3, 80091de <tcp_recv_null+0x26>
  return ERR_OK;
 80091d8:	4610      	mov	r0, r2
}
 80091da:	b002      	add	sp, #8
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	9101      	str	r1, [sp, #4]
  LWIP_ASSERT_CORE_LOCKED();
 80091e0:	f7fa fe70 	bl	8003ec4 <sys_check_core_locking>
  if (pcb->state != LISTEN) {
 80091e4:	9801      	ldr	r0, [sp, #4]
 80091e6:	7d03      	ldrb	r3, [r0, #20]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d003      	beq.n	80091f4 <tcp_recv_null+0x3c>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80091ec:	8b43      	ldrh	r3, [r0, #26]
 80091ee:	f043 0310 	orr.w	r3, r3, #16
 80091f2:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80091f4:	2101      	movs	r1, #1
}
 80091f6:	b002      	add	sp, #8
 80091f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 80091fc:	f7ff beea 	b.w	8008fd4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <tcp_recv_null+0x5c>)
 8009202:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009206:	4904      	ldr	r1, [pc, #16]	; (8009218 <tcp_recv_null+0x60>)
 8009208:	4804      	ldr	r0, [pc, #16]	; (800921c <tcp_recv_null+0x64>)
 800920a:	f004 fffd 	bl	800e208 <iprintf>
 800920e:	f06f 000f 	mvn.w	r0, #15
 8009212:	e7de      	b.n	80091d2 <tcp_recv_null+0x1a>
 8009214:	080101e0 	.word	0x080101e0
 8009218:	08010810 	.word	0x08010810
 800921c:	0800f0a0 	.word	0x0800f0a0

08009220 <tcp_process_refused_data>:
{
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009222:	b380      	cbz	r0, 8009286 <tcp_process_refused_data+0x66>
    u8_t refused_flags = pcb->refused_data->flags;
 8009224:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8009226:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009228:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 800922c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800922e:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 8009230:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009232:	b156      	cbz	r6, 800924a <tcp_process_refused_data+0x2a>
 8009234:	4601      	mov	r1, r0
 8009236:	462a      	mov	r2, r5
 8009238:	6900      	ldr	r0, [r0, #16]
 800923a:	47b0      	blx	r6
    if (err == ERR_OK) {
 800923c:	b158      	cbz	r0, 8009256 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 800923e:	300d      	adds	r0, #13
 8009240:	d01e      	beq.n	8009280 <tcp_process_refused_data+0x60>
      return ERR_INPROGRESS;
 8009242:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 8009246:	67a5      	str	r5, [r4, #120]	; 0x78
}
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 800924a:	8929      	ldrh	r1, [r5, #8]
 800924c:	f7fe ffa2 	bl	8008194 <tcp_recved>
    pbuf_free(p);
 8009250:	4628      	mov	r0, r5
 8009252:	f7fe fc9f 	bl	8007b94 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009256:	06bb      	lsls	r3, r7, #26
 8009258:	d510      	bpl.n	800927c <tcp_process_refused_data+0x5c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800925a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800925c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8009260:	4293      	cmp	r3, r2
 8009262:	d001      	beq.n	8009268 <tcp_process_refused_data+0x48>
          pcb->rcv_wnd++;
 8009264:	3301      	adds	r3, #1
 8009266:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8009268:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800926c:	b135      	cbz	r5, 800927c <tcp_process_refused_data+0x5c>
 800926e:	2300      	movs	r3, #0
 8009270:	4621      	mov	r1, r4
 8009272:	6920      	ldr	r0, [r4, #16]
 8009274:	461a      	mov	r2, r3
 8009276:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 8009278:	300d      	adds	r0, #13
 800927a:	d001      	beq.n	8009280 <tcp_process_refused_data+0x60>
  return ERR_OK;
 800927c:	2000      	movs	r0, #0
}
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 8009280:	f06f 000c 	mvn.w	r0, #12
}
 8009284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009286:	4b05      	ldr	r3, [pc, #20]	; (800929c <tcp_process_refused_data+0x7c>)
 8009288:	f240 6209 	movw	r2, #1545	; 0x609
 800928c:	4904      	ldr	r1, [pc, #16]	; (80092a0 <tcp_process_refused_data+0x80>)
 800928e:	4805      	ldr	r0, [pc, #20]	; (80092a4 <tcp_process_refused_data+0x84>)
 8009290:	f004 ffba 	bl	800e208 <iprintf>
 8009294:	f06f 000f 	mvn.w	r0, #15
}
 8009298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929a:	bf00      	nop
 800929c:	080101e0 	.word	0x080101e0
 80092a0:	0801082c 	.word	0x0801082c
 80092a4:	0800f0a0 	.word	0x0800f0a0

080092a8 <tcp_fasttmr>:
{
 80092a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80092ac:	4d1c      	ldr	r5, [pc, #112]	; (8009320 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 80092ae:	2700      	movs	r7, #0
 80092b0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8009328 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 80092b4:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80092b6:	4e1b      	ldr	r6, [pc, #108]	; (8009324 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80092b8:	3301      	adds	r3, #1
 80092ba:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80092bc:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80092c0:	b1bc      	cbz	r4, 80092f2 <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 80092c2:	782a      	ldrb	r2, [r5, #0]
 80092c4:	7fa3      	ldrb	r3, [r4, #30]
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d015      	beq.n	80092f6 <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 80092ca:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 80092cc:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 80092ce:	07d9      	lsls	r1, r3, #31
 80092d0:	d41a      	bmi.n	8009308 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 80092d2:	071a      	lsls	r2, r3, #28
 80092d4:	d411      	bmi.n	80092fa <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 80092d6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 80092d8:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80092dc:	b133      	cbz	r3, 80092ec <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 80092de:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 80092e0:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80092e2:	f7ff ff9d 	bl	8009220 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80092e6:	7833      	ldrb	r3, [r6, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e7      	bne.n	80092bc <tcp_fasttmr+0x14>
      pcb = next;
 80092ec:	464c      	mov	r4, r9
  while (pcb != NULL) {
 80092ee:	2c00      	cmp	r4, #0
 80092f0:	d1e7      	bne.n	80092c2 <tcp_fasttmr+0x1a>
}
 80092f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 80092f6:	68e4      	ldr	r4, [r4, #12]
 80092f8:	e7e2      	b.n	80092c0 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80092fa:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 80092fe:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009300:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009302:	f7fe fdbd 	bl	8007e80 <tcp_close_shutdown_fin>
 8009306:	e7e6      	b.n	80092d6 <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 8009308:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800930c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800930e:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009310:	f002 fc4e 	bl	800bbb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009314:	8b63      	ldrh	r3, [r4, #26]
 8009316:	f023 0303 	bic.w	r3, r3, #3
 800931a:	b29b      	uxth	r3, r3
 800931c:	8363      	strh	r3, [r4, #26]
 800931e:	e7d8      	b.n	80092d2 <tcp_fasttmr+0x2a>
 8009320:	2401058d 	.word	0x2401058d
 8009324:	2401057c 	.word	0x2401057c
 8009328:	24010578 	.word	0x24010578

0800932c <tcp_tmr>:
{
 800932c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800932e:	f7ff ffbb 	bl	80092a8 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009332:	4a06      	ldr	r2, [pc, #24]	; (800934c <tcp_tmr+0x20>)
 8009334:	7813      	ldrb	r3, [r2, #0]
 8009336:	3301      	adds	r3, #1
 8009338:	b2db      	uxtb	r3, r3
 800933a:	7013      	strb	r3, [r2, #0]
 800933c:	07db      	lsls	r3, r3, #31
 800933e:	d400      	bmi.n	8009342 <tcp_tmr+0x16>
}
 8009340:	bd08      	pop	{r3, pc}
 8009342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8009346:	f7ff b93b 	b.w	80085c0 <tcp_slowtmr>
 800934a:	bf00      	nop
 800934c:	2401058c 	.word	0x2401058c

08009350 <tcp_next_iss>:
{
 8009350:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009352:	b130      	cbz	r0, 8009362 <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 8009354:	4b07      	ldr	r3, [pc, #28]	; (8009374 <tcp_next_iss+0x24>)
 8009356:	4a08      	ldr	r2, [pc, #32]	; (8009378 <tcp_next_iss+0x28>)
 8009358:	6818      	ldr	r0, [r3, #0]
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	4410      	add	r0, r2
 800935e:	6018      	str	r0, [r3, #0]
}
 8009360:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009362:	4b06      	ldr	r3, [pc, #24]	; (800937c <tcp_next_iss+0x2c>)
 8009364:	f640 02af 	movw	r2, #2223	; 0x8af
 8009368:	4905      	ldr	r1, [pc, #20]	; (8009380 <tcp_next_iss+0x30>)
 800936a:	4806      	ldr	r0, [pc, #24]	; (8009384 <tcp_next_iss+0x34>)
 800936c:	f004 ff4c 	bl	800e208 <iprintf>
 8009370:	e7f0      	b.n	8009354 <tcp_next_iss+0x4>
 8009372:	bf00      	nop
 8009374:	24000028 	.word	0x24000028
 8009378:	24010588 	.word	0x24010588
 800937c:	080101e0 	.word	0x080101e0
 8009380:	08010854 	.word	0x08010854
 8009384:	0800f0a0 	.word	0x0800f0a0

08009388 <tcp_eff_send_mss_netif>:
{
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4605      	mov	r5, r0
 800938c:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800938e:	b172      	cbz	r2, 80093ae <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 8009390:	b144      	cbz	r4, 80093a4 <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 8009392:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  if (mtu != 0) {
 8009394:	b133      	cbz	r3, 80093a4 <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009396:	2b28      	cmp	r3, #40	; 0x28
 8009398:	d906      	bls.n	80093a8 <tcp_eff_send_mss_netif+0x20>
 800939a:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800939c:	b29b      	uxth	r3, r3
 800939e:	429d      	cmp	r5, r3
 80093a0:	bf28      	it	cs
 80093a2:	461d      	movcs	r5, r3
}
 80093a4:	4628      	mov	r0, r5
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	2500      	movs	r5, #0
 80093aa:	4628      	mov	r0, r5
 80093ac:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80093ae:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <tcp_eff_send_mss_netif+0x38>)
 80093b0:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80093b4:	4903      	ldr	r1, [pc, #12]	; (80093c4 <tcp_eff_send_mss_netif+0x3c>)
 80093b6:	4804      	ldr	r0, [pc, #16]	; (80093c8 <tcp_eff_send_mss_netif+0x40>)
 80093b8:	f004 ff26 	bl	800e208 <iprintf>
 80093bc:	e7e8      	b.n	8009390 <tcp_eff_send_mss_netif+0x8>
 80093be:	bf00      	nop
 80093c0:	080101e0 	.word	0x080101e0
 80093c4:	08010870 	.word	0x08010870
 80093c8:	0800f0a0 	.word	0x0800f0a0

080093cc <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80093cc:	b308      	cbz	r0, 8009412 <tcp_netif_ip_addr_changed+0x46>
{
 80093ce:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80093d0:	6803      	ldr	r3, [r0, #0]
 80093d2:	4604      	mov	r4, r0
 80093d4:	b903      	cbnz	r3, 80093d8 <tcp_netif_ip_addr_changed+0xc>
}
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80093d8:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <tcp_netif_ip_addr_changed+0x48>)
 80093da:	460d      	mov	r5, r1
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	f7ff fd05 	bl	8008dec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80093e2:	4b0d      	ldr	r3, [pc, #52]	; (8009418 <tcp_netif_ip_addr_changed+0x4c>)
 80093e4:	4620      	mov	r0, r4
 80093e6:	6819      	ldr	r1, [r3, #0]
 80093e8:	f7ff fd00 	bl	8008dec <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80093ec:	2d00      	cmp	r5, #0
 80093ee:	d0f2      	beq.n	80093d6 <tcp_netif_ip_addr_changed+0xa>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d0ef      	beq.n	80093d6 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <tcp_netif_ip_addr_changed+0x50>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0eb      	beq.n	80093d6 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80093fe:	6819      	ldr	r1, [r3, #0]
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	4291      	cmp	r1, r2
 8009404:	d101      	bne.n	800940a <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009406:	682a      	ldr	r2, [r5, #0]
 8009408:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f6      	bne.n	80093fe <tcp_netif_ip_addr_changed+0x32>
}
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	4770      	bx	lr
 8009414:	24010578 	.word	0x24010578
 8009418:	24010580 	.word	0x24010580
 800941c:	24010584 	.word	0x24010584

08009420 <tcp_free_ooseq>:
{
 8009420:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 8009422:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8009424:	b16c      	cbz	r4, 8009442 <tcp_free_ooseq+0x22>
 8009426:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 8009428:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 800942a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 800942c:	6868      	ldr	r0, [r5, #4]
 800942e:	b108      	cbz	r0, 8009434 <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 8009430:	f7fe fbb0 	bl	8007b94 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 8009434:	4629      	mov	r1, r5
 8009436:	2003      	movs	r0, #3
 8009438:	f7fd fe78 	bl	800712c <memp_free>
  while (seg != NULL) {
 800943c:	2c00      	cmp	r4, #0
 800943e:	d1f3      	bne.n	8009428 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 8009440:	6774      	str	r4, [r6, #116]	; 0x74
}
 8009442:	bd70      	pop	{r4, r5, r6, pc}

08009444 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009446:	4605      	mov	r5, r0
{
 8009448:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800944a:	2800      	cmp	r0, #0
 800944c:	d03e      	beq.n	80094cc <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800944e:	68eb      	ldr	r3, [r5, #12]
 8009450:	8998      	ldrh	r0, [r3, #12]
 8009452:	f7fd fa77 	bl	8006944 <lwip_htons>
 8009456:	07c2      	lsls	r2, r0, #31
 8009458:	d432      	bmi.n	80094c0 <tcp_oos_insert_segment+0x7c>
 800945a:	4e20      	ldr	r6, [pc, #128]	; (80094dc <tcp_oos_insert_segment+0x98>)
 800945c:	e005      	b.n	800946a <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 800945e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8009460:	4620      	mov	r0, r4
 8009462:	f7fe ff9d 	bl	80083a0 <tcp_seg_free>
    while (next &&
 8009466:	463c      	mov	r4, r7
 8009468:	b1ef      	cbz	r7, 80094a6 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800946a:	68e1      	ldr	r1, [r4, #12]
 800946c:	8923      	ldrh	r3, [r4, #8]
 800946e:	6837      	ldr	r7, [r6, #0]
 8009470:	892a      	ldrh	r2, [r5, #8]
 8009472:	6848      	ldr	r0, [r1, #4]
 8009474:	443a      	add	r2, r7
 8009476:	4403      	add	r3, r0
 8009478:	1ad3      	subs	r3, r2, r3
    while (next &&
 800947a:	2b00      	cmp	r3, #0
 800947c:	db15      	blt.n	80094aa <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800947e:	8988      	ldrh	r0, [r1, #12]
 8009480:	f7fd fa60 	bl	8006944 <lwip_htons>
 8009484:	07c3      	lsls	r3, r0, #31
 8009486:	d5ea      	bpl.n	800945e <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009488:	68eb      	ldr	r3, [r5, #12]
 800948a:	2001      	movs	r0, #1
 800948c:	899f      	ldrh	r7, [r3, #12]
 800948e:	f7fd fa59 	bl	8006944 <lwip_htons>
 8009492:	68eb      	ldr	r3, [r5, #12]
 8009494:	4338      	orrs	r0, r7
      next = next->next;
 8009496:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009498:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 800949a:	4620      	mov	r0, r4
 800949c:	f7fe ff80 	bl	80083a0 <tcp_seg_free>
    while (next &&
 80094a0:	463c      	mov	r4, r7
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	d1e1      	bne.n	800946a <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 80094a6:	602c      	str	r4, [r5, #0]
}
 80094a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80094aa:	1a12      	subs	r2, r2, r0
    if (next &&
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	ddfa      	ble.n	80094a6 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80094b0:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80094b2:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80094b4:	b289      	uxth	r1, r1
 80094b6:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80094b8:	f7fe fa70 	bl	800799c <pbuf_realloc>
  cseg->next = next;
 80094bc:	602c      	str	r4, [r5, #0]
}
 80094be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 80094c0:	4620      	mov	r0, r4
    next = NULL;
 80094c2:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80094c4:	f7fe ff5a 	bl	800837c <tcp_segs_free>
  cseg->next = next;
 80094c8:	602c      	str	r4, [r5, #0]
}
 80094ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <tcp_oos_insert_segment+0x9c>)
 80094ce:	f240 421f 	movw	r2, #1055	; 0x41f
 80094d2:	4904      	ldr	r1, [pc, #16]	; (80094e4 <tcp_oos_insert_segment+0xa0>)
 80094d4:	4804      	ldr	r0, [pc, #16]	; (80094e8 <tcp_oos_insert_segment+0xa4>)
 80094d6:	f004 fe97 	bl	800e208 <iprintf>
 80094da:	e7b8      	b.n	800944e <tcp_oos_insert_segment+0xa>
 80094dc:	240105b8 	.word	0x240105b8
 80094e0:	080108c0 	.word	0x080108c0
 80094e4:	080108f4 	.word	0x080108f4
 80094e8:	0800f0a0 	.word	0x0800f0a0

080094ec <tcp_input_delayed_close>:
{
 80094ec:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80094ee:	4604      	mov	r4, r0
 80094f0:	b1c8      	cbz	r0, 8009526 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 80094f2:	4b11      	ldr	r3, [pc, #68]	; (8009538 <tcp_input_delayed_close+0x4c>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	f013 0310 	ands.w	r3, r3, #16
 80094fa:	d101      	bne.n	8009500 <tcp_input_delayed_close+0x14>
  return 0;
 80094fc:	4618      	mov	r0, r3
}
 80094fe:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009500:	8b63      	ldrh	r3, [r4, #26]
 8009502:	06db      	lsls	r3, r3, #27
 8009504:	d406      	bmi.n	8009514 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009506:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800950a:	b11b      	cbz	r3, 8009514 <tcp_input_delayed_close+0x28>
 800950c:	f06f 010e 	mvn.w	r1, #14
 8009510:	6920      	ldr	r0, [r4, #16]
 8009512:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009514:	4621      	mov	r1, r4
 8009516:	4809      	ldr	r0, [pc, #36]	; (800953c <tcp_input_delayed_close+0x50>)
 8009518:	f7ff fb00 	bl	8008b1c <tcp_pcb_remove>
    tcp_free(pcb);
 800951c:	4620      	mov	r0, r4
 800951e:	f7fe fcef 	bl	8007f00 <tcp_free>
 8009522:	2001      	movs	r0, #1
}
 8009524:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <tcp_input_delayed_close+0x54>)
 8009528:	f240 225a 	movw	r2, #602	; 0x25a
 800952c:	4905      	ldr	r1, [pc, #20]	; (8009544 <tcp_input_delayed_close+0x58>)
 800952e:	4806      	ldr	r0, [pc, #24]	; (8009548 <tcp_input_delayed_close+0x5c>)
 8009530:	f004 fe6a 	bl	800e208 <iprintf>
 8009534:	e7dd      	b.n	80094f2 <tcp_input_delayed_close+0x6>
 8009536:	bf00      	nop
 8009538:	240105b4 	.word	0x240105b4
 800953c:	24010578 	.word	0x24010578
 8009540:	080108c0 	.word	0x080108c0
 8009544:	0801091c 	.word	0x0801091c
 8009548:	0800f0a0 	.word	0x0800f0a0

0800954c <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	b083      	sub	sp, #12
 8009552:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009554:	2900      	cmp	r1, #0
 8009556:	d03d      	beq.n	80095d4 <tcp_free_acked_segments.constprop.0+0x88>
 8009558:	4607      	mov	r7, r0
 800955a:	460c      	mov	r4, r1
 800955c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8009624 <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009560:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8009618 <tcp_free_acked_segments.constprop.0+0xcc>
 8009564:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8009628 <tcp_free_acked_segments.constprop.0+0xdc>
 8009568:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 8009620 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800956c:	68e3      	ldr	r3, [r4, #12]
 800956e:	6858      	ldr	r0, [r3, #4]
 8009570:	f7fd f9ec 	bl	800694c <lwip_htonl>
 8009574:	68e3      	ldr	r3, [r4, #12]
 8009576:	4605      	mov	r5, r0
 8009578:	8926      	ldrh	r6, [r4, #8]
 800957a:	8998      	ldrh	r0, [r3, #12]
 800957c:	f7fd f9e2 	bl	8006944 <lwip_htons>
 8009580:	f8d8 3000 	ldr.w	r3, [r8]
 8009584:	f010 0003 	ands.w	r0, r0, #3
 8009588:	eba5 0503 	sub.w	r5, r5, r3
 800958c:	bf18      	it	ne
 800958e:	2001      	movne	r0, #1
 8009590:	4435      	add	r5, r6
 8009592:	4428      	add	r0, r5
  while (seg_list != NULL &&
 8009594:	2800      	cmp	r0, #0
 8009596:	dc37      	bgt.n	8009608 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 8009598:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 800959c:	f7fe fb0e 	bl	8007bbc <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 80095a4:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095a6:	4298      	cmp	r0, r3
 80095a8:	d824      	bhi.n	80095f4 <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095aa:	491a      	ldr	r1, [pc, #104]	; (8009614 <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095ac:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095ae:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 80095b0:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095b2:	880d      	ldrh	r5, [r1, #0]
 80095b4:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80095b6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80095ba:	1953      	adds	r3, r2, r5
 80095bc:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 80095be:	f7fe feef 	bl	80083a0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80095c2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80095c6:	b11b      	cbz	r3, 80095d0 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	ea56 0503 	orrs.w	r5, r6, r3
 80095ce:	d006      	beq.n	80095de <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	d1cb      	bne.n	800956c <tcp_free_acked_segments.constprop.0+0x20>
 80095d4:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 80095d6:	4628      	mov	r0, r5
 80095d8:	b003      	add	sp, #12
 80095da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <tcp_free_acked_segments.constprop.0+0xcc>)
 80095e0:	f240 4261 	movw	r2, #1121	; 0x461
 80095e4:	490d      	ldr	r1, [pc, #52]	; (800961c <tcp_free_acked_segments.constprop.0+0xd0>)
 80095e6:	480e      	ldr	r0, [pc, #56]	; (8009620 <tcp_free_acked_segments.constprop.0+0xd4>)
 80095e8:	f004 fe0e 	bl	800e208 <iprintf>
}
 80095ec:	4628      	mov	r0, r5
 80095ee:	b003      	add	sp, #12
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80095f4:	465b      	mov	r3, fp
 80095f6:	f240 4257 	movw	r2, #1111	; 0x457
 80095fa:	4651      	mov	r1, sl
 80095fc:	4648      	mov	r0, r9
 80095fe:	f004 fe03 	bl	800e208 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009602:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009606:	e7d0      	b.n	80095aa <tcp_free_acked_segments.constprop.0+0x5e>
 8009608:	4625      	mov	r5, r4
}
 800960a:	4628      	mov	r0, r5
 800960c:	b003      	add	sp, #12
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	bf00      	nop
 8009614:	240105ac 	.word	0x240105ac
 8009618:	080108c0 	.word	0x080108c0
 800961c:	0801096c 	.word	0x0801096c
 8009620:	0800f0a0 	.word	0x0800f0a0
 8009624:	24010594 	.word	0x24010594
 8009628:	08010944 	.word	0x08010944

0800962c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800962c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009630:	4604      	mov	r4, r0
 8009632:	2800      	cmp	r0, #0
 8009634:	f000 8200 	beq.w	8009a38 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009638:	7d23      	ldrb	r3, [r4, #20]
 800963a:	2b03      	cmp	r3, #3
 800963c:	f240 811e 	bls.w	800987c <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 8009640:	4bb4      	ldr	r3, [pc, #720]	; (8009914 <tcp_receive+0x2e8>)
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	06dd      	lsls	r5, r3, #27
 8009646:	f100 8097 	bmi.w	8009778 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800964a:	4fb3      	ldr	r7, [pc, #716]	; (8009918 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800964c:	4eb3      	ldr	r6, [pc, #716]	; (800991c <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800964e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009650:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009652:	2900      	cmp	r1, #0
 8009654:	d07f      	beq.n	8009756 <tcp_receive+0x12a>
 8009656:	7d22      	ldrb	r2, [r4, #20]
 8009658:	2a06      	cmp	r2, #6
 800965a:	d87c      	bhi.n	8009756 <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800965c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800965e:	eba2 0803 	sub.w	r8, r2, r3
 8009662:	f1b8 0f01 	cmp.w	r8, #1
 8009666:	d405      	bmi.n	8009674 <tcp_receive+0x48>
 8009668:	1c50      	adds	r0, r2, #1
 800966a:	1ac0      	subs	r0, r0, r3
 800966c:	1a41      	subs	r1, r0, r1
 800966e:	2900      	cmp	r1, #0
 8009670:	f340 81f3 	ble.w	8009a5a <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009674:	1a99      	subs	r1, r3, r2
 8009676:	2900      	cmp	r1, #0
 8009678:	f2c0 81ea 	blt.w	8009a50 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800967c:	f103 0c01 	add.w	ip, r3, #1
 8009680:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009682:	ebac 0102 	sub.w	r1, ip, r2
 8009686:	1a09      	subs	r1, r1, r0
 8009688:	2900      	cmp	r1, #0
 800968a:	dc39      	bgt.n	8009700 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800968c:	429a      	cmp	r2, r3
 800968e:	f000 8470 	beq.w	8009f72 <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009692:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009694:	2d00      	cmp	r5, #0
 8009696:	f000 8378 	beq.w	8009d8a <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 800969a:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 800969c:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096a0:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 80096a4:	6842      	ldr	r2, [r0, #4]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d019      	beq.n	80096de <tcp_receive+0xb2>
              if (prev == NULL) {
 80096aa:	f1b8 0f00 	cmp.w	r8, #0
 80096ae:	f000 815b 	beq.w	8009968 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80096b2:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80096b6:	6849      	ldr	r1, [r1, #4]
 80096b8:	ebae 0101 	sub.w	r1, lr, r1
 80096bc:	2900      	cmp	r1, #0
 80096be:	db04      	blt.n	80096ca <tcp_receive+0x9e>
 80096c0:	ebac 0102 	sub.w	r1, ip, r2
 80096c4:	2900      	cmp	r1, #0
 80096c6:	f340 8369 	ble.w	8009d9c <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80096ca:	6829      	ldr	r1, [r5, #0]
 80096cc:	46a8      	mov	r8, r5
 80096ce:	2900      	cmp	r1, #0
 80096d0:	f000 8159 	beq.w	8009986 <tcp_receive+0x35a>
 80096d4:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 80096d6:	68e8      	ldr	r0, [r5, #12]
 80096d8:	6842      	ldr	r2, [r0, #4]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d1e5      	bne.n	80096aa <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 80096de:	4890      	ldr	r0, [pc, #576]	; (8009920 <tcp_receive+0x2f4>)
 80096e0:	892b      	ldrh	r3, [r5, #8]
 80096e2:	8902      	ldrh	r2, [r0, #8]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d90b      	bls.n	8009700 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80096e8:	f7fe fe68 	bl	80083bc <tcp_seg_copy>
                if (cseg != NULL) {
 80096ec:	b140      	cbz	r0, 8009700 <tcp_receive+0xd4>
                  if (prev != NULL) {
 80096ee:	f1b8 0f00 	cmp.w	r8, #0
 80096f2:	f000 8414 	beq.w	8009f1e <tcp_receive+0x8f2>
                    prev->next = cseg;
 80096f6:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 80096fa:	4629      	mov	r1, r5
 80096fc:	f7ff fea2 	bl	8009444 <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009700:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 8009702:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8009706:	f002 ba21 	b.w	800bb4c <tcp_send_empty_ack>
      if (tcplen == 0) {
 800970a:	4f83      	ldr	r7, [pc, #524]	; (8009918 <tcp_receive+0x2ec>)
 800970c:	8839      	ldrh	r1, [r7, #0]
 800970e:	2900      	cmp	r1, #0
 8009710:	f040 8116 	bne.w	8009940 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009714:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009716:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009718:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 800971c:	4470      	add	r0, lr
 800971e:	4560      	cmp	r0, ip
 8009720:	f040 810e 	bne.w	8009940 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 8009724:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8009726:	0400      	lsls	r0, r0, #16
 8009728:	f100 810a 	bmi.w	8009940 <tcp_receive+0x314>
 800972c:	4590      	cmp	r8, r2
 800972e:	f040 8107 	bne.w	8009940 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009732:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009736:	28ff      	cmp	r0, #255	; 0xff
 8009738:	f000 8393 	beq.w	8009e62 <tcp_receive+0x836>
                ++pcb->dupacks;
 800973c:	3001      	adds	r0, #1
 800973e:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 8009740:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 8009742:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009746:	f200 838c 	bhi.w	8009e62 <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 800974a:	f000 8396 	beq.w	8009e7a <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800974e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009750:	2800      	cmp	r0, #0
 8009752:	f040 80b6 	bne.w	80098c2 <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009756:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009758:	1a99      	subs	r1, r3, r2
 800975a:	2900      	cmp	r1, #0
 800975c:	db06      	blt.n	800976c <tcp_receive+0x140>
 800975e:	f1c2 0201 	rsb	r2, r2, #1
 8009762:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8009764:	1a52      	subs	r2, r2, r1
 8009766:	4413      	add	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	dd03      	ble.n	8009774 <tcp_receive+0x148>
      tcp_ack_now(pcb);
 800976c:	8b63      	ldrh	r3, [r4, #26]
 800976e:	f043 0302 	orr.w	r3, r3, #2
 8009772:	8363      	strh	r3, [r4, #26]
}
 8009774:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009778:	4e68      	ldr	r6, [pc, #416]	; (800991c <tcp_receive+0x2f0>)
 800977a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800977c:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800977e:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009782:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009784:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009788:	2900      	cmp	r1, #0
 800978a:	db7f      	blt.n	800988c <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800978c:	4d65      	ldr	r5, [pc, #404]	; (8009924 <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800978e:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009790:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009792:	f000 80d9 	beq.w	8009948 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009796:	4594      	cmp	ip, r2
 8009798:	f000 80df 	beq.w	800995a <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800979c:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 80097a0:	eba2 0108 	sub.w	r1, r2, r8
 80097a4:	2900      	cmp	r1, #0
 80097a6:	ddb0      	ble.n	800970a <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	dc7d      	bgt.n	80098ac <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 80097b0:	8b63      	ldrh	r3, [r4, #26]
 80097b2:	0758      	lsls	r0, r3, #29
 80097b4:	d509      	bpl.n	80097ca <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 80097b6:	f023 0304 	bic.w	r3, r3, #4
 80097ba:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80097bc:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80097c0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097ca:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 80097ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 80097d0:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097d2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 80097d6:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80097d8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 80097dc:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 80097de:	f04f 0300 	mov.w	r3, #0
 80097e2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 80097e6:	d913      	bls.n	8009810 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 80097e8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80097ec:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 80097ee:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 80097f2:	429a      	cmp	r2, r3
 80097f4:	f200 81c9 	bhi.w	8009b8a <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 80097f8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 80097fc:	4411      	add	r1, r2
 80097fe:	b289      	uxth	r1, r1
 8009800:	428a      	cmp	r2, r1
 8009802:	f200 82a9 	bhi.w	8009d58 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009806:	428b      	cmp	r3, r1
 8009808:	f240 82a8 	bls.w	8009d5c <tcp_receive+0x730>
 800980c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009810:	4620      	mov	r0, r4
 8009812:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 8009816:	f7ff fe99 	bl	800954c <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800981a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800981c:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800981e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009820:	4620      	mov	r0, r4
 8009822:	f7ff fe93 	bl	800954c <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 8009826:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009828:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800982a:	fab2 f382 	clz	r3, r2
 800982e:	095b      	lsrs	r3, r3, #5
 8009830:	425b      	negs	r3, r3
 8009832:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8009838:	2800      	cmp	r0, #0
 800983a:	f000 81a3 	beq.w	8009b84 <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800983e:	4b3a      	ldr	r3, [pc, #232]	; (8009928 <tcp_receive+0x2fc>)
 8009840:	8819      	ldrh	r1, [r3, #0]
 8009842:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8009846:	440b      	add	r3, r1
 8009848:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800984c:	8b63      	ldrh	r3, [r4, #26]
 800984e:	0519      	lsls	r1, r3, #20
 8009850:	f140 80fa 	bpl.w	8009a48 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 8009854:	2a00      	cmp	r2, #0
 8009856:	f000 81af 	beq.w	8009bb8 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800985a:	68d3      	ldr	r3, [r2, #12]
 800985c:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 800985e:	6858      	ldr	r0, [r3, #4]
 8009860:	f7fd f874 	bl	800694c <lwip_htonl>
 8009864:	1a38      	subs	r0, r7, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	f300 80ee 	bgt.w	8009a48 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 800986c:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800986e:	4f2a      	ldr	r7, [pc, #168]	; (8009918 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 8009870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009874:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 8009876:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009878:	6833      	ldr	r3, [r6, #0]
 800987a:	e01d      	b.n	80098b8 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800987c:	4b2b      	ldr	r3, [pc, #172]	; (800992c <tcp_receive+0x300>)
 800987e:	f240 427c 	movw	r2, #1148	; 0x47c
 8009882:	492b      	ldr	r1, [pc, #172]	; (8009930 <tcp_receive+0x304>)
 8009884:	482b      	ldr	r0, [pc, #172]	; (8009934 <tcp_receive+0x308>)
 8009886:	f004 fcbf 	bl	800e208 <iprintf>
 800988a:	e6d9      	b.n	8009640 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800988c:	4a2a      	ldr	r2, [pc, #168]	; (8009938 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800988e:	4d25      	ldr	r5, [pc, #148]	; (8009924 <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009890:	6812      	ldr	r2, [r2, #0]
 8009892:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009894:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009896:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800989a:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800989e:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 80098a0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80098a4:	bf38      	it	cc
 80098a6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 80098aa:	e777      	b.n	800979c <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80098ac:	4f1a      	ldr	r7, [pc, #104]	; (8009918 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 80098ae:	4620      	mov	r0, r4
 80098b0:	f002 f94c 	bl	800bb4c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80098b4:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80098b6:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80098b8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80098ba:	2800      	cmp	r0, #0
 80098bc:	f43f aec9 	beq.w	8009652 <tcp_receive+0x26>
 80098c0:	682a      	ldr	r2, [r5, #0]
 80098c2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80098c4:	1aaa      	subs	r2, r5, r2
 80098c6:	2a00      	cmp	r2, #0
 80098c8:	f6bf aec3 	bge.w	8009652 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 80098cc:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80098d0:	b280      	uxth	r0, r0
 80098d2:	4a1a      	ldr	r2, [pc, #104]	; (800993c <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 80098d4:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80098d8:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 80098dc:	ebae 020c 	sub.w	r2, lr, ip
 80098e0:	1a12      	subs	r2, r2, r0
 80098e2:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 80098e4:	4415      	add	r5, r2
      if (m < 0) {
 80098e6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 80098ea:	b22d      	sxth	r5, r5
 80098ec:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 80098ee:	d003      	beq.n	80098f8 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 80098f0:	ebac 0c0e 	sub.w	ip, ip, lr
 80098f4:	4460      	add	r0, ip
 80098f6:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 80098f8:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 80098fc:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 8009900:	4410      	add	r0, r2
      pcb->rttest = 0;
 8009902:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 8009904:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 8009906:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009908:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800990c:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800990e:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009912:	e69e      	b.n	8009652 <tcp_receive+0x26>
 8009914:	24010598 	.word	0x24010598
 8009918:	240105d2 	.word	0x240105d2
 800991c:	240105b8 	.word	0x240105b8
 8009920:	2401059c 	.word	0x2401059c
 8009924:	24010594 	.word	0x24010594
 8009928:	240105ac 	.word	0x240105ac
 800992c:	080108c0 	.word	0x080108c0
 8009930:	080109a8 	.word	0x080109a8
 8009934:	0800f0a0 	.word	0x0800f0a0
 8009938:	240105c4 	.word	0x240105c4
 800993c:	24010588 	.word	0x24010588
        pcb->dupacks = 0;
 8009940:	2200      	movs	r2, #0
 8009942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009946:	e7b7      	b.n	80098b8 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009948:	ebac 0102 	sub.w	r1, ip, r2
 800994c:	2900      	cmp	r1, #0
 800994e:	f6bf af22 	bge.w	8009796 <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009952:	49ac      	ldr	r1, [pc, #688]	; (8009c04 <tcp_receive+0x5d8>)
 8009954:	6809      	ldr	r1, [r1, #0]
 8009956:	89c9      	ldrh	r1, [r1, #14]
 8009958:	e79d      	b.n	8009896 <tcp_receive+0x26a>
 800995a:	49aa      	ldr	r1, [pc, #680]	; (8009c04 <tcp_receive+0x5d8>)
 800995c:	6809      	ldr	r1, [r1, #0]
 800995e:	89c9      	ldrh	r1, [r1, #14]
 8009960:	458e      	cmp	lr, r1
 8009962:	f4bf af1b 	bcs.w	800979c <tcp_receive+0x170>
 8009966:	e796      	b.n	8009896 <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009968:	1a99      	subs	r1, r3, r2
 800996a:	2900      	cmp	r1, #0
 800996c:	f6bf aead 	bge.w	80096ca <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009970:	48a5      	ldr	r0, [pc, #660]	; (8009c08 <tcp_receive+0x5dc>)
 8009972:	f7fe fd23 	bl	80083bc <tcp_seg_copy>
                  if (cseg != NULL) {
 8009976:	2800      	cmp	r0, #0
 8009978:	f43f aec2 	beq.w	8009700 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 800997c:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 800997e:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009980:	f7ff fd60 	bl	8009444 <tcp_oos_insert_segment>
 8009984:	e6bc      	b.n	8009700 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009986:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009988:	2b00      	cmp	r3, #0
 800998a:	f77f aeb9 	ble.w	8009700 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800998e:	8980      	ldrh	r0, [r0, #12]
 8009990:	f7fc ffd8 	bl	8006944 <lwip_htons>
 8009994:	07c1      	lsls	r1, r0, #31
 8009996:	f53f aeb3 	bmi.w	8009700 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 800999a:	489b      	ldr	r0, [pc, #620]	; (8009c08 <tcp_receive+0x5dc>)
 800999c:	f7fe fd0e 	bl	80083bc <tcp_seg_copy>
 80099a0:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80099a2:	2800      	cmp	r0, #0
 80099a4:	f43f aeac 	beq.w	8009700 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80099a8:	68eb      	ldr	r3, [r5, #12]
 80099aa:	892a      	ldrh	r2, [r5, #8]
 80099ac:	6859      	ldr	r1, [r3, #4]
 80099ae:	6833      	ldr	r3, [r6, #0]
 80099b0:	440a      	add	r2, r1
 80099b2:	1ad2      	subs	r2, r2, r3
 80099b4:	2a00      	cmp	r2, #0
 80099b6:	dd05      	ble.n	80099c4 <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80099b8:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 80099ba:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80099bc:	b299      	uxth	r1, r3
 80099be:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 80099c0:	f7fd ffec 	bl	800799c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80099c4:	6832      	ldr	r2, [r6, #0]
 80099c6:	883b      	ldrh	r3, [r7, #0]
 80099c8:	4413      	add	r3, r2
 80099ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80099d0:	1a9b      	subs	r3, r3, r2
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f77f ae94 	ble.w	8009700 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	8998      	ldrh	r0, [r3, #12]
 80099de:	f7fc ffb1 	bl	8006944 <lwip_htons>
 80099e2:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80099e4:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80099e6:	f100 82b1 	bmi.w	8009f4c <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099ea:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80099ec:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 80099ee:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80099f0:	1a89      	subs	r1, r1, r2
 80099f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80099f4:	4411      	add	r1, r2
 80099f6:	b289      	uxth	r1, r1
 80099f8:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80099fa:	f7fd ffcf 	bl	800799c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80099fe:	682b      	ldr	r3, [r5, #0]
 8009a00:	891d      	ldrh	r5, [r3, #8]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	8998      	ldrh	r0, [r3, #12]
 8009a06:	f7fc ff9d 	bl	8006944 <lwip_htons>
 8009a0a:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a0e:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8009a10:	bf18      	it	ne
 8009a12:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a14:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 8009a16:	442b      	add	r3, r5
 8009a18:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a1a:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8009a1c:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a20:	4413      	add	r3, r2
 8009a22:	4299      	cmp	r1, r3
 8009a24:	f43f ae6c 	beq.w	8009700 <tcp_receive+0xd4>
 8009a28:	4b78      	ldr	r3, [pc, #480]	; (8009c0c <tcp_receive+0x5e0>)
 8009a2a:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009a2e:	4978      	ldr	r1, [pc, #480]	; (8009c10 <tcp_receive+0x5e4>)
 8009a30:	4878      	ldr	r0, [pc, #480]	; (8009c14 <tcp_receive+0x5e8>)
 8009a32:	f004 fbe9 	bl	800e208 <iprintf>
 8009a36:	e663      	b.n	8009700 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009a38:	4b74      	ldr	r3, [pc, #464]	; (8009c0c <tcp_receive+0x5e0>)
 8009a3a:	f240 427b 	movw	r2, #1147	; 0x47b
 8009a3e:	4976      	ldr	r1, [pc, #472]	; (8009c18 <tcp_receive+0x5ec>)
 8009a40:	4874      	ldr	r0, [pc, #464]	; (8009c14 <tcp_receive+0x5e8>)
 8009a42:	f004 fbe1 	bl	800e208 <iprintf>
 8009a46:	e5f7      	b.n	8009638 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a48:	4f74      	ldr	r7, [pc, #464]	; (8009c1c <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a4a:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009a4c:	8839      	ldrh	r1, [r7, #0]
 8009a4e:	e733      	b.n	80098b8 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 8009a50:	8b63      	ldrh	r3, [r4, #26]
 8009a52:	f043 0302 	orr.w	r3, r3, #2
 8009a56:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a58:	e652      	b.n	8009700 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 8009a5a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8009c08 <tcp_receive+0x5dc>
 8009a5e:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009a62:	2d00      	cmp	r5, #0
 8009a64:	f000 8170 	beq.w	8009d48 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009a68:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009a6c:	4598      	cmp	r8, r3
 8009a6e:	f200 80c0 	bhi.w	8009bf2 <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a72:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8009a76:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009a7a:	891a      	ldrh	r2, [r3, #8]
 8009a7c:	4542      	cmp	r2, r8
 8009a7e:	f0c0 80ad 	bcc.w	8009bdc <tcp_receive+0x5b0>
      inseg.len -= off;
 8009a82:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a86:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 8009a8a:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009a8e:	b292      	uxth	r2, r2
      inseg.len -= off;
 8009a90:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 8009a94:	896b      	ldrh	r3, [r5, #10]
 8009a96:	4543      	cmp	r3, r8
 8009a98:	d20a      	bcs.n	8009ab0 <tcp_receive+0x484>
        p->len = 0;
 8009a9a:	2100      	movs	r1, #0
        off -= p->len;
 8009a9c:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 8009aa0:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 8009aa2:	812a      	strh	r2, [r5, #8]
        p = p->next;
 8009aa4:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 8009aa6:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 8009aaa:	896b      	ldrh	r3, [r5, #10]
 8009aac:	4543      	cmp	r3, r8
 8009aae:	d3f5      	bcc.n	8009a9c <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f7fd fffe 	bl	8007ab4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009ab8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aba:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009ac2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f43f ae1b 	beq.w	8009700 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 8009aca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ace:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8009ad2:	8998      	ldrh	r0, [r3, #12]
 8009ad4:	f7fc ff36 	bl	8006944 <lwip_htons>
 8009ad8:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009adc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009ade:	bf18      	it	ne
 8009ae0:	2301      	movne	r3, #1
 8009ae2:	442b      	add	r3, r5
 8009ae4:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8009ae6:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8009ae8:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009aea:	f0c0 8181 	bcc.w	8009df0 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 8009aee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 80a0 	beq.w	8009c36 <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009af6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009afa:	8998      	ldrh	r0, [r3, #12]
 8009afc:	f7fc ff22 	bl	8006944 <lwip_htons>
 8009b00:	07c2      	lsls	r2, r0, #31
 8009b02:	f100 8095 	bmi.w	8009c30 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 8009b06:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8009b08:	b955      	cbnz	r5, 8009b20 <tcp_receive+0x4f4>
 8009b0a:	e1f4      	b.n	8009ef6 <tcp_receive+0x8ca>
              next = next->next;
 8009b0c:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7fe fc45 	bl	80083a0 <tcp_seg_free>
            while (next &&
 8009b16:	4645      	mov	r5, r8
 8009b18:	f1b8 0f00 	cmp.w	r8, #0
 8009b1c:	f000 81eb 	beq.w	8009ef6 <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b20:	68e8      	ldr	r0, [r5, #12]
 8009b22:	883a      	ldrh	r2, [r7, #0]
 8009b24:	f8d6 e000 	ldr.w	lr, [r6]
 8009b28:	892b      	ldrh	r3, [r5, #8]
 8009b2a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8009b2e:	eb02 010e 	add.w	r1, r2, lr
 8009b32:	4463      	add	r3, ip
 8009b34:	1acb      	subs	r3, r1, r3
            while (next &&
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	f2c0 81a5 	blt.w	8009e86 <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b3c:	8980      	ldrh	r0, [r0, #12]
 8009b3e:	f7fc ff01 	bl	8006944 <lwip_htons>
 8009b42:	07c3      	lsls	r3, r0, #31
 8009b44:	d5e2      	bpl.n	8009b0c <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009b46:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b4a:	8998      	ldrh	r0, [r3, #12]
 8009b4c:	f7fc fefa 	bl	8006944 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009b50:	0780      	lsls	r0, r0, #30
 8009b52:	d4db      	bmi.n	8009b0c <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b54:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b58:	2001      	movs	r0, #1
 8009b5a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009b5e:	f7fc fef1 	bl	8006944 <lwip_htons>
 8009b62:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009b66:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 8009b6a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009b6e:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009b70:	b280      	uxth	r0, r0
 8009b72:	f7fc fee7 	bl	8006944 <lwip_htons>
 8009b76:	f010 0003 	ands.w	r0, r0, #3
 8009b7a:	bf18      	it	ne
 8009b7c:	2001      	movne	r0, #1
 8009b7e:	4440      	add	r0, r8
 8009b80:	8038      	strh	r0, [r7, #0]
 8009b82:	e7c3      	b.n	8009b0c <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 8009b84:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8009b88:	e659      	b.n	800983e <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b8a:	8b62      	ldrh	r2, [r4, #26]
 8009b8c:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b90:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b92:	bf14      	ite	ne
 8009b94:	2001      	movne	r0, #1
 8009b96:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b98:	fb12 f200 	smulbb	r2, r2, r0
 8009b9c:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8009b9e:	428a      	cmp	r2, r1
 8009ba0:	bf94      	ite	ls
 8009ba2:	1898      	addls	r0, r3, r2
 8009ba4:	1858      	addhi	r0, r3, r1
 8009ba6:	b282      	uxth	r2, r0
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	f240 80e0 	bls.w	8009d6e <tcp_receive+0x742>
 8009bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bb2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009bb6:	e62b      	b.n	8009810 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 8009bb8:	b148      	cbz	r0, 8009bce <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009bba:	68c3      	ldr	r3, [r0, #12]
 8009bbc:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8009bbe:	6858      	ldr	r0, [r3, #4]
 8009bc0:	f7fc fec4 	bl	800694c <lwip_htonl>
 8009bc4:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f73f af3e 	bgt.w	8009a48 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 8009bcc:	8b63      	ldrh	r3, [r4, #26]
 8009bce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009bd2:	4f12      	ldr	r7, [pc, #72]	; (8009c1c <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 8009bd4:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009bd6:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009bd8:	6833      	ldr	r3, [r6, #0]
 8009bda:	e66d      	b.n	80098b8 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009bdc:	4b0b      	ldr	r3, [pc, #44]	; (8009c0c <tcp_receive+0x5e0>)
 8009bde:	f240 5297 	movw	r2, #1431	; 0x597
 8009be2:	490f      	ldr	r1, [pc, #60]	; (8009c20 <tcp_receive+0x5f4>)
 8009be4:	480b      	ldr	r0, [pc, #44]	; (8009c14 <tcp_receive+0x5e8>)
 8009be6:	f004 fb0f 	bl	800e208 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009bea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009bee:	891a      	ldrh	r2, [r3, #8]
 8009bf0:	e747      	b.n	8009a82 <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009bf2:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <tcp_receive+0x5e0>)
 8009bf4:	f240 5295 	movw	r2, #1429	; 0x595
 8009bf8:	490a      	ldr	r1, [pc, #40]	; (8009c24 <tcp_receive+0x5f8>)
 8009bfa:	4806      	ldr	r0, [pc, #24]	; (8009c14 <tcp_receive+0x5e8>)
 8009bfc:	f004 fb04 	bl	800e208 <iprintf>
 8009c00:	e737      	b.n	8009a72 <tcp_receive+0x446>
 8009c02:	bf00      	nop
 8009c04:	240105c4 	.word	0x240105c4
 8009c08:	2401059c 	.word	0x2401059c
 8009c0c:	080108c0 	.word	0x080108c0
 8009c10:	080109f4 	.word	0x080109f4
 8009c14:	0800f0a0 	.word	0x0800f0a0
 8009c18:	0801098c 	.word	0x0801098c
 8009c1c:	240105d2 	.word	0x240105d2
 8009c20:	080109e4 	.word	0x080109e4
 8009c24:	080109d4 	.word	0x080109d4
              pcb->ooseq = pcb->ooseq->next;
 8009c28:	6803      	ldr	r3, [r0, #0]
 8009c2a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009c2c:	f7fe fbb8 	bl	80083a0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009c30:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d1f8      	bne.n	8009c28 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 8009c36:	883a      	ldrh	r2, [r7, #0]
 8009c38:	6831      	ldr	r1, [r6, #0]
 8009c3a:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c3c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8009c3e:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009c40:	4293      	cmp	r3, r2
 8009c42:	f0c0 80cb 	bcc.w	8009ddc <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 8009c46:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 8009c48:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009c4a:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009c4c:	f7fe fa66 	bl	800811c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009c50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009c54:	891a      	ldrh	r2, [r3, #8]
 8009c56:	b122      	cbz	r2, 8009c62 <tcp_receive+0x636>
          recv_data = inseg.p;
 8009c58:	4ab2      	ldr	r2, [pc, #712]	; (8009f24 <tcp_receive+0x8f8>)
 8009c5a:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c62:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009c66:	8998      	ldrh	r0, [r3, #12]
 8009c68:	f7fc fe6c 	bl	8006944 <lwip_htons>
 8009c6c:	07c2      	lsls	r2, r0, #31
 8009c6e:	d504      	bpl.n	8009c7a <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 8009c70:	4aad      	ldr	r2, [pc, #692]	; (8009f28 <tcp_receive+0x8fc>)
 8009c72:	7813      	ldrb	r3, [r2, #0]
 8009c74:	f043 0320 	orr.w	r3, r3, #32
 8009c78:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8009c7a:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	d07b      	beq.n	8009d78 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c80:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 8009f30 <tcp_receive+0x904>
 8009c84:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 8009f48 <tcp_receive+0x91c>
 8009c88:	4fa8      	ldr	r7, [pc, #672]	; (8009f2c <tcp_receive+0x900>)
 8009c8a:	e033      	b.n	8009cf4 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c8c:	68eb      	ldr	r3, [r5, #12]
 8009c8e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009c92:	8998      	ldrh	r0, [r3, #12]
 8009c94:	f7fc fe56 	bl	8006944 <lwip_htons>
 8009c98:	f010 0003 	ands.w	r0, r0, #3
 8009c9c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009c9e:	bf18      	it	ne
 8009ca0:	2001      	movne	r0, #1
 8009ca2:	4450      	add	r0, sl
 8009ca4:	1a18      	subs	r0, r3, r0
 8009ca6:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f7fe fa37 	bl	800811c <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009cae:	6869      	ldr	r1, [r5, #4]
 8009cb0:	890b      	ldrh	r3, [r1, #8]
 8009cb2:	b13b      	cbz	r3, 8009cc4 <tcp_receive+0x698>
            if (recv_data) {
 8009cb4:	4b9b      	ldr	r3, [pc, #620]	; (8009f24 <tcp_receive+0x8f8>)
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	d05b      	beq.n	8009d74 <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 8009cbc:	f7fd ffa6 	bl	8007c0c <pbuf_cat>
            cseg->p = NULL;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009cc4:	68eb      	ldr	r3, [r5, #12]
 8009cc6:	8998      	ldrh	r0, [r3, #12]
 8009cc8:	f7fc fe3c 	bl	8006944 <lwip_htons>
 8009ccc:	07c3      	lsls	r3, r0, #31
 8009cce:	d509      	bpl.n	8009ce4 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 8009cd0:	4a95      	ldr	r2, [pc, #596]	; (8009f28 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cd2:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8009cd4:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cd6:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8009cd8:	f043 0320 	orr.w	r3, r3, #32
 8009cdc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009cde:	d101      	bne.n	8009ce4 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 8009ce0:	2307      	movs	r3, #7
 8009ce2:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009ce4:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8009ce6:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8009ce8:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8009cea:	f7fe fb59 	bl	80083a0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009cee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	d041      	beq.n	8009d78 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009cf4:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8009cf6:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009cf8:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009cfa:	428b      	cmp	r3, r1
 8009cfc:	d13c      	bne.n	8009d78 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009cfe:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d00:	8990      	ldrh	r0, [r2, #12]
 8009d02:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009d06:	f7fc fe1d 	bl	8006944 <lwip_htons>
 8009d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d0c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d10:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d14:	bf18      	it	ne
 8009d16:	2001      	movne	r0, #1
 8009d18:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d1a:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d1c:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d1e:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009d22:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009d24:	8998      	ldrh	r0, [r3, #12]
 8009d26:	f7fc fe0d 	bl	8006944 <lwip_htons>
 8009d2a:	f010 0003 	ands.w	r0, r0, #3
 8009d2e:	bf18      	it	ne
 8009d30:	2001      	movne	r0, #1
 8009d32:	4458      	add	r0, fp
 8009d34:	4582      	cmp	sl, r0
 8009d36:	d2a9      	bcs.n	8009c8c <tcp_receive+0x660>
 8009d38:	464b      	mov	r3, r9
 8009d3a:	f240 622b 	movw	r2, #1579	; 0x62b
 8009d3e:	4641      	mov	r1, r8
 8009d40:	4638      	mov	r0, r7
 8009d42:	f004 fa61 	bl	800e208 <iprintf>
 8009d46:	e7a1      	b.n	8009c8c <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009d48:	4b79      	ldr	r3, [pc, #484]	; (8009f30 <tcp_receive+0x904>)
 8009d4a:	f240 5294 	movw	r2, #1428	; 0x594
 8009d4e:	4979      	ldr	r1, [pc, #484]	; (8009f34 <tcp_receive+0x908>)
 8009d50:	4876      	ldr	r0, [pc, #472]	; (8009f2c <tcp_receive+0x900>)
 8009d52:	f004 fa59 	bl	800e208 <iprintf>
 8009d56:	e687      	b.n	8009a68 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d5c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d5e:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d60:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009d62:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d66:	b292      	uxth	r2, r2
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	f63f af20 	bhi.w	8009bae <tcp_receive+0x582>
 8009d6e:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 8009d72:	e54d      	b.n	8009810 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 8009d74:	6019      	str	r1, [r3, #0]
 8009d76:	e7a3      	b.n	8009cc0 <tcp_receive+0x694>
        tcp_ack(pcb);
 8009d78:	8b63      	ldrh	r3, [r4, #26]
 8009d7a:	07d8      	lsls	r0, r3, #31
 8009d7c:	d50a      	bpl.n	8009d94 <tcp_receive+0x768>
 8009d7e:	f023 0301 	bic.w	r3, r3, #1
 8009d82:	f043 0302 	orr.w	r3, r3, #2
 8009d86:	8363      	strh	r3, [r4, #26]
 8009d88:	e4f4      	b.n	8009774 <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d8a:	486b      	ldr	r0, [pc, #428]	; (8009f38 <tcp_receive+0x90c>)
 8009d8c:	f7fe fb16 	bl	80083bc <tcp_seg_copy>
 8009d90:	6760      	str	r0, [r4, #116]	; 0x74
 8009d92:	e4b5      	b.n	8009700 <tcp_receive+0xd4>
        tcp_ack(pcb);
 8009d94:	f043 0301 	orr.w	r3, r3, #1
 8009d98:	8363      	strh	r3, [r4, #26]
 8009d9a:	e4eb      	b.n	8009774 <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009d9c:	4866      	ldr	r0, [pc, #408]	; (8009f38 <tcp_receive+0x90c>)
 8009d9e:	f7fe fb0d 	bl	80083bc <tcp_seg_copy>
                  if (cseg != NULL) {
 8009da2:	4607      	mov	r7, r0
 8009da4:	2800      	cmp	r0, #0
 8009da6:	f43f acab 	beq.w	8009700 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009daa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dae:	6832      	ldr	r2, [r6, #0]
 8009db0:	6859      	ldr	r1, [r3, #4]
 8009db2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8009db6:	440b      	add	r3, r1
 8009db8:	1a9b      	subs	r3, r3, r2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dd07      	ble.n	8009dce <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009dbe:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8009dc0:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009dc4:	b291      	uxth	r1, r2
 8009dc6:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009dca:	f7fd fde7 	bl	800799c <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8009dce:	4629      	mov	r1, r5
 8009dd0:	4638      	mov	r0, r7
                    prev->next = cseg;
 8009dd2:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8009dd6:	f7ff fb35 	bl	8009444 <tcp_oos_insert_segment>
 8009dda:	e491      	b.n	8009700 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009ddc:	4b54      	ldr	r3, [pc, #336]	; (8009f30 <tcp_receive+0x904>)
 8009dde:	f240 6207 	movw	r2, #1543	; 0x607
 8009de2:	4956      	ldr	r1, [pc, #344]	; (8009f3c <tcp_receive+0x910>)
 8009de4:	4851      	ldr	r0, [pc, #324]	; (8009f2c <tcp_receive+0x900>)
 8009de6:	f004 fa0f 	bl	800e208 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009dea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009dec:	883a      	ldrh	r2, [r7, #0]
 8009dee:	e72a      	b.n	8009c46 <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009df0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009df4:	8998      	ldrh	r0, [r3, #12]
 8009df6:	f7fc fda5 	bl	8006944 <lwip_htons>
 8009dfa:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009dfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e00:	d47d      	bmi.n	8009efe <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e02:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009e04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e06:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e0a:	f7fc fd9b 	bl	8006944 <lwip_htons>
 8009e0e:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 8009e10:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e14:	d503      	bpl.n	8009e1e <tcp_receive+0x7f2>
            inseg.len -= 1;
 8009e16:	3901      	subs	r1, #1
 8009e18:	b289      	uxth	r1, r1
 8009e1a:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009e1e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009e22:	f7fd fdbb 	bl	800799c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009e2a:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8009e2e:	8998      	ldrh	r0, [r3, #12]
 8009e30:	f7fc fd88 	bl	8006944 <lwip_htons>
 8009e34:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e38:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8009e3a:	bf18      	it	ne
 8009e3c:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8009e40:	442b      	add	r3, r5
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009e46:	4413      	add	r3, r2
 8009e48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009e4a:	440a      	add	r2, r1
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	f43f ae4e 	beq.w	8009aee <tcp_receive+0x4c2>
 8009e52:	4b37      	ldr	r3, [pc, #220]	; (8009f30 <tcp_receive+0x904>)
 8009e54:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009e58:	4939      	ldr	r1, [pc, #228]	; (8009f40 <tcp_receive+0x914>)
 8009e5a:	4834      	ldr	r0, [pc, #208]	; (8009f2c <tcp_receive+0x900>)
 8009e5c:	f004 f9d4 	bl	800e208 <iprintf>
 8009e60:	e645      	b.n	8009aee <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009e62:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009e66:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009e6c:	4413      	add	r3, r2
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	429a      	cmp	r2, r3
 8009e72:	bf88      	it	hi
 8009e74:	460b      	movhi	r3, r1
 8009e76:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f001 fde4 	bl	800ba48 <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009e80:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009e82:	6833      	ldr	r3, [r6, #0]
 8009e84:	e518      	b.n	80098b8 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 8009e86:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	dc01      	bgt.n	8009e92 <tcp_receive+0x866>
            pcb->ooseq = next;
 8009e8e:	6765      	str	r5, [r4, #116]	; 0x74
 8009e90:	e6d4      	b.n	8009c3c <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e92:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e96:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009e9a:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e9e:	8998      	ldrh	r0, [r3, #12]
 8009ea0:	f7fc fd50 	bl	8006944 <lwip_htons>
 8009ea4:	0781      	lsls	r1, r0, #30
 8009ea6:	d504      	bpl.n	8009eb2 <tcp_receive+0x886>
                inseg.len -= 1;
 8009ea8:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009eb2:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8009eb6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009eba:	f7fd fd6f 	bl	800799c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009ebe:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009ec2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8009ec6:	8998      	ldrh	r0, [r3, #12]
 8009ec8:	f7fc fd3c 	bl	8006944 <lwip_htons>
 8009ecc:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ed0:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8009ed2:	bf18      	it	ne
 8009ed4:	2001      	movne	r0, #1
 8009ed6:	eb08 0200 	add.w	r2, r8, r0
 8009eda:	b292      	uxth	r2, r2
 8009edc:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009ede:	6859      	ldr	r1, [r3, #4]
 8009ee0:	6833      	ldr	r3, [r6, #0]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	428b      	cmp	r3, r1
 8009ee6:	d0d2      	beq.n	8009e8e <tcp_receive+0x862>
 8009ee8:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <tcp_receive+0x904>)
 8009eea:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009eee:	4915      	ldr	r1, [pc, #84]	; (8009f44 <tcp_receive+0x918>)
 8009ef0:	480e      	ldr	r0, [pc, #56]	; (8009f2c <tcp_receive+0x900>)
 8009ef2:	f004 f989 	bl	800e208 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8009ef6:	883a      	ldrh	r2, [r7, #0]
 8009ef8:	6831      	ldr	r1, [r6, #0]
 8009efa:	4411      	add	r1, r2
 8009efc:	e7c7      	b.n	8009e8e <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009efe:	899d      	ldrh	r5, [r3, #12]
 8009f00:	4628      	mov	r0, r5
 8009f02:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009f06:	f7fc fd1d 	bl	8006944 <lwip_htons>
 8009f0a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f0e:	f7fc fd19 	bl	8006944 <lwip_htons>
 8009f12:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009f16:	4328      	orrs	r0, r5
 8009f18:	8198      	strh	r0, [r3, #12]
 8009f1a:	b280      	uxth	r0, r0
 8009f1c:	e772      	b.n	8009e04 <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 8009f1e:	6760      	str	r0, [r4, #116]	; 0x74
 8009f20:	f7ff bbeb 	b.w	80096fa <tcp_receive+0xce>
 8009f24:	240105b0 	.word	0x240105b0
 8009f28:	240105b4 	.word	0x240105b4
 8009f2c:	0800f0a0 	.word	0x0800f0a0
 8009f30:	080108c0 	.word	0x080108c0
 8009f34:	080109c4 	.word	0x080109c4
 8009f38:	2401059c 	.word	0x2401059c
 8009f3c:	08010a68 	.word	0x08010a68
 8009f40:	080109f4 	.word	0x080109f4
 8009f44:	08010a2c 	.word	0x08010a2c
 8009f48:	08010a88 	.word	0x08010a88
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8009f52:	4640      	mov	r0, r8
 8009f54:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8009f58:	f7fc fcf4 	bl	8006944 <lwip_htons>
 8009f5c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009f60:	f7fc fcf0 	bl	8006944 <lwip_htons>
 8009f64:	682b      	ldr	r3, [r5, #0]
 8009f66:	ea48 0800 	orr.w	r8, r8, r0
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	f8a2 800c 	strh.w	r8, [r2, #12]
 8009f70:	e53b      	b.n	80099ea <tcp_receive+0x3be>
 8009f72:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8009f78 <tcp_receive+0x94c>
 8009f76:	e5a8      	b.n	8009aca <tcp_receive+0x49e>
 8009f78:	2401059c 	.word	0x2401059c

08009f7c <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f7c:	4949      	ldr	r1, [pc, #292]	; (800a0a4 <tcp_parseopt.part.0+0x128>)
 8009f7e:	4b4a      	ldr	r3, [pc, #296]	; (800a0a8 <tcp_parseopt.part.0+0x12c>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f80:	4a4a      	ldr	r2, [pc, #296]	; (800a0ac <tcp_parseopt.part.0+0x130>)
tcp_parseopt(struct tcp_pcb *pcb)
 8009f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f86:	f8b1 e000 	ldrh.w	lr, [r1]
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009f8a:	f240 5bb3 	movw	fp, #1459	; 0x5b3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009f8e:	681c      	ldr	r4, [r3, #0]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009f90:	2100      	movs	r1, #0
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009f92:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009f96:	4b46      	ldr	r3, [pc, #280]	; (800a0b0 <tcp_parseopt.part.0+0x134>)
 8009f98:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800a0b4 <tcp_parseopt.part.0+0x138>
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009f9c:	f240 5ab4 	movw	sl, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fa0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 8009fa2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009fa6:	681d      	ldr	r5, [r3, #0]
 8009fa8:	f8b9 2000 	ldrh.w	r2, [r9]
 8009fac:	f102 0c14 	add.w	ip, r2, #20
 8009fb0:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fb2:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 8009fb4:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009fb8:	d967      	bls.n	800a08a <tcp_parseopt.part.0+0x10e>
  u16_t optidx = tcp_optidx++;
 8009fba:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fbc:	b1ac      	cbz	r4, 8009fea <tcp_parseopt.part.0+0x6e>
 8009fbe:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 8009fc0:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fc4:	d811      	bhi.n	8009fea <tcp_parseopt.part.0+0x6e>
    return tcphdr_opt2[idx];
 8009fc6:	b2c9      	uxtb	r1, r1
 8009fc8:	5c61      	ldrb	r1, [r4, r1]
      switch (opt) {
 8009fca:	2901      	cmp	r1, #1
 8009fcc:	d011      	beq.n	8009ff2 <tcp_parseopt.part.0+0x76>
 8009fce:	2902      	cmp	r1, #2
 8009fd0:	d017      	beq.n	800a002 <tcp_parseopt.part.0+0x86>
 8009fd2:	b191      	cbz	r1, 8009ffa <tcp_parseopt.part.0+0x7e>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009fd4:	b10c      	cbz	r4, 8009fda <tcp_parseopt.part.0+0x5e>
 8009fd6:	4573      	cmp	r3, lr
 8009fd8:	d23f      	bcs.n	800a05a <tcp_parseopt.part.0+0xde>
    return opts[optidx];
 8009fda:	442b      	add	r3, r5
 8009fdc:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d95b      	bls.n	800a09a <tcp_parseopt.part.0+0x11e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009fe2:	441a      	add	r2, r3
 8009fe4:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	e7e0      	b.n	8009fac <tcp_parseopt.part.0+0x30>
    return opts[optidx];
 8009fea:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 8009fee:	2901      	cmp	r1, #1
 8009ff0:	d1ed      	bne.n	8009fce <tcp_parseopt.part.0+0x52>
 8009ff2:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	e7db      	b.n	8009fb2 <tcp_parseopt.part.0+0x36>
 8009ffa:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t optidx = tcp_optidx++;
 800a002:	1c91      	adds	r1, r2, #2
 800a004:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a006:	b10c      	cbz	r4, 800a00c <tcp_parseopt.part.0+0x90>
 800a008:	4573      	cmp	r3, lr
 800a00a:	d221      	bcs.n	800a050 <tcp_parseopt.part.0+0xd4>
    return opts[optidx];
 800a00c:	442b      	add	r3, r5
 800a00e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a010:	2b04      	cmp	r3, #4
 800a012:	d13f      	bne.n	800a094 <tcp_parseopt.part.0+0x118>
 800a014:	1c4b      	adds	r3, r1, #1
 800a016:	42b3      	cmp	r3, r6
 800a018:	da3c      	bge.n	800a094 <tcp_parseopt.part.0+0x118>
  u16_t optidx = tcp_optidx++;
 800a01a:	1cd3      	adds	r3, r2, #3
 800a01c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a01e:	b364      	cbz	r4, 800a07a <tcp_parseopt.part.0+0xfe>
 800a020:	458e      	cmp	lr, r1
 800a022:	d81f      	bhi.n	800a064 <tcp_parseopt.part.0+0xe8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a024:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 800a028:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a02a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 800a02c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 800a02e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a030:	5c61      	ldrb	r1, [r4, r1]
 800a032:	ea4f 2101 	mov.w	r1, r1, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a036:	d81d      	bhi.n	800a074 <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a038:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	5ce3      	ldrb	r3, [r4, r3]
          mss |= tcp_get_next_optbyte();
 800a040:	430b      	orrs	r3, r1
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a042:	1e59      	subs	r1, r3, #1
 800a044:	b289      	uxth	r1, r1
 800a046:	4559      	cmp	r1, fp
 800a048:	bf88      	it	hi
 800a04a:	4653      	movhi	r3, sl
 800a04c:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 800a04e:	e7ca      	b.n	8009fe6 <tcp_parseopt.part.0+0x6a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a050:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 800a054:	b2db      	uxtb	r3, r3
 800a056:	5ce3      	ldrb	r3, [r4, r3]
 800a058:	e7da      	b.n	800a010 <tcp_parseopt.part.0+0x94>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a05a:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	5ce3      	ldrb	r3, [r4, r3]
 800a062:	e7bc      	b.n	8009fde <tcp_parseopt.part.0+0x62>
    return opts[optidx];
 800a064:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 800a066:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a068:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a06a:	7d09      	ldrb	r1, [r1, #20]
  u16_t optidx = tcp_optidx++;
 800a06c:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a06e:	ea4f 2101 	mov.w	r1, r1, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a072:	d9e1      	bls.n	800a038 <tcp_parseopt.part.0+0xbc>
    return opts[optidx];
 800a074:	442b      	add	r3, r5
 800a076:	7d1b      	ldrb	r3, [r3, #20]
 800a078:	e7e2      	b.n	800a040 <tcp_parseopt.part.0+0xc4>
 800a07a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 800a07c:	3204      	adds	r2, #4
    return opts[optidx];
 800a07e:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a080:	7d09      	ldrb	r1, [r1, #20]
  u16_t optidx = tcp_optidx++;
 800a082:	b292      	uxth	r2, r2
    return opts[optidx];
 800a084:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a086:	0209      	lsls	r1, r1, #8
    return opts[optidx];
 800a088:	e7da      	b.n	800a040 <tcp_parseopt.part.0+0xc4>
 800a08a:	2900      	cmp	r1, #0
 800a08c:	d0b7      	beq.n	8009ffe <tcp_parseopt.part.0+0x82>
 800a08e:	f8a9 2000 	strh.w	r2, [r9]
 800a092:	e7b4      	b.n	8009ffe <tcp_parseopt.part.0+0x82>
 800a094:	f8a9 1000 	strh.w	r1, [r9]
 800a098:	e7b1      	b.n	8009ffe <tcp_parseopt.part.0+0x82>
  u16_t optidx = tcp_optidx++;
 800a09a:	3202      	adds	r2, #2
 800a09c:	f8a9 2000 	strh.w	r2, [r9]
 800a0a0:	e7ad      	b.n	8009ffe <tcp_parseopt.part.0+0x82>
 800a0a2:	bf00      	nop
 800a0a4:	240105c8 	.word	0x240105c8
 800a0a8:	240105cc 	.word	0x240105cc
 800a0ac:	240105d0 	.word	0x240105d0
 800a0b0:	240105c4 	.word	0x240105c4
 800a0b4:	240105c0 	.word	0x240105c0

0800a0b8 <tcp_input>:
{
 800a0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0bc:	4604      	mov	r4, r0
 800a0be:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT_CORE_LOCKED();
 800a0c0:	f7f9 ff00 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0c4:	2c00      	cmp	r4, #0
 800a0c6:	f000 80d5 	beq.w	800a274 <tcp_input+0x1bc>
  if (p->len < TCP_HLEN) {
 800a0ca:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0cc:	4e6d      	ldr	r6, [pc, #436]	; (800a284 <tcp_input+0x1cc>)
 800a0ce:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 800a0d0:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0d2:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 800a0d4:	d805      	bhi.n	800a0e2 <tcp_input+0x2a>
  pbuf_free(p);
 800a0d6:	4620      	mov	r0, r4
}
 800a0d8:	b009      	add	sp, #36	; 0x24
 800a0da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a0de:	f7fd bd59 	b.w	8007b94 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0e2:	4f69      	ldr	r7, [pc, #420]	; (800a288 <tcp_input+0x1d0>)
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6978      	ldr	r0, [r7, #20]
 800a0e8:	f003 f92a 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d1f1      	bne.n	800a0d6 <tcp_input+0x1e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0f8:	2be0      	cmp	r3, #224	; 0xe0
 800a0fa:	d0ec      	beq.n	800a0d6 <tcp_input+0x1e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a0fc:	6833      	ldr	r3, [r6, #0]
 800a0fe:	8998      	ldrh	r0, [r3, #12]
 800a100:	f7fc fc20 	bl	8006944 <lwip_htons>
 800a104:	0a80      	lsrs	r0, r0, #10
 800a106:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a10a:	2913      	cmp	r1, #19
 800a10c:	d9e3      	bls.n	800a0d6 <tcp_input+0x1e>
 800a10e:	8923      	ldrh	r3, [r4, #8]
 800a110:	b28a      	uxth	r2, r1
 800a112:	428b      	cmp	r3, r1
 800a114:	d3df      	bcc.n	800a0d6 <tcp_input+0x1e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a116:	f1a2 0314 	sub.w	r3, r2, #20
 800a11a:	485c      	ldr	r0, [pc, #368]	; (800a28c <tcp_input+0x1d4>)
  tcphdr_opt2 = NULL;
 800a11c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a2c0 <tcp_input+0x208>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a120:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800a122:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a126:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800a128:	8960      	ldrh	r0, [r4, #10]
 800a12a:	4290      	cmp	r0, r2
 800a12c:	f080 819c 	bcs.w	800a468 <tcp_input+0x3b0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a130:	6823      	ldr	r3, [r4, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	f000 8380 	beq.w	800a838 <tcp_input+0x780>
    pbuf_remove_header(p, TCP_HLEN);
 800a138:	2114      	movs	r1, #20
 800a13a:	4620      	mov	r0, r4
 800a13c:	f7fd fcba 	bl	8007ab4 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a140:	4b52      	ldr	r3, [pc, #328]	; (800a28c <tcp_input+0x1d4>)
    tcphdr_opt1len = p->len;
 800a142:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a144:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a146:	f8b3 9000 	ldrh.w	r9, [r3]
    tcphdr_opt1len = p->len;
 800a14a:	4b51      	ldr	r3, [pc, #324]	; (800a290 <tcp_input+0x1d8>)
    pbuf_remove_header(p, tcphdr_opt1len);
 800a14c:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a14e:	eba9 0b05 	sub.w	fp, r9, r5
    tcphdr_opt1len = p->len;
 800a152:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a154:	f7fd fcae 	bl	8007ab4 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a158:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a15a:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 800a15e:	8943      	ldrh	r3, [r0, #10]
 800a160:	455b      	cmp	r3, fp
 800a162:	d3b8      	bcc.n	800a0d6 <tcp_input+0x1e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a164:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a166:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a168:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 800a16c:	f7fd fca2 	bl	8007ab4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a170:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a172:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a174:	442b      	add	r3, r5
 800a176:	eba3 0309 	sub.w	r3, r3, r9
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a17e:	2a00      	cmp	r2, #0
 800a180:	f040 8361 	bne.w	800a846 <tcp_input+0x78e>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a184:	6822      	ldr	r2, [r4, #0]
 800a186:	8912      	ldrh	r2, [r2, #8]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d005      	beq.n	800a198 <tcp_input+0xe0>
 800a18c:	4b41      	ldr	r3, [pc, #260]	; (800a294 <tcp_input+0x1dc>)
 800a18e:	22e0      	movs	r2, #224	; 0xe0
 800a190:	4941      	ldr	r1, [pc, #260]	; (800a298 <tcp_input+0x1e0>)
 800a192:	4842      	ldr	r0, [pc, #264]	; (800a29c <tcp_input+0x1e4>)
 800a194:	f004 f838 	bl	800e208 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a198:	6835      	ldr	r5, [r6, #0]
 800a19a:	8828      	ldrh	r0, [r5, #0]
 800a19c:	f7fc fbd2 	bl	8006944 <lwip_htons>
 800a1a0:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a1a2:	6835      	ldr	r5, [r6, #0]
 800a1a4:	8868      	ldrh	r0, [r5, #2]
 800a1a6:	f7fc fbcd 	bl	8006944 <lwip_htons>
 800a1aa:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1ac:	6835      	ldr	r5, [r6, #0]
 800a1ae:	6868      	ldr	r0, [r5, #4]
 800a1b0:	f7fc fbcc 	bl	800694c <lwip_htonl>
 800a1b4:	4b3a      	ldr	r3, [pc, #232]	; (800a2a0 <tcp_input+0x1e8>)
 800a1b6:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1b8:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1ba:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1bc:	68a8      	ldr	r0, [r5, #8]
 800a1be:	f7fc fbc5 	bl	800694c <lwip_htonl>
 800a1c2:	4b38      	ldr	r3, [pc, #224]	; (800a2a4 <tcp_input+0x1ec>)
 800a1c4:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1c6:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1c8:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1ca:	89e8      	ldrh	r0, [r5, #14]
 800a1cc:	f7fc fbba 	bl	8006944 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a1d0:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1d2:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a1d4:	8998      	ldrh	r0, [r3, #12]
 800a1d6:	f7fc fbb5 	bl	8006944 <lwip_htons>
 800a1da:	4933      	ldr	r1, [pc, #204]	; (800a2a8 <tcp_input+0x1f0>)
 800a1dc:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800a1e0:	8922      	ldrh	r2, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a1e2:	700b      	strb	r3, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a1e4:	0783      	lsls	r3, r0, #30
 800a1e6:	f040 8145 	bne.w	800a474 <tcp_input+0x3bc>
  tcplen = p->tot_len;
 800a1ea:	4b30      	ldr	r3, [pc, #192]	; (800a2ac <tcp_input+0x1f4>)
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1f0:	4b2f      	ldr	r3, [pc, #188]	; (800a2b0 <tcp_input+0x1f8>)
 800a1f2:	681d      	ldr	r5, [r3, #0]
 800a1f4:	2d00      	cmp	r5, #0
 800a1f6:	f000 80e6 	beq.w	800a3c6 <tcp_input+0x30e>
  prev = NULL;
 800a1fa:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a1fe:	f8df a094 	ldr.w	sl, [pc, #148]	; 800a294 <tcp_input+0x1dc>
 800a202:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800a2c4 <tcp_input+0x20c>
 800a206:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a29c <tcp_input+0x1e4>
 800a20a:	e017      	b.n	800a23c <tcp_input+0x184>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a20c:	2b0a      	cmp	r3, #10
 800a20e:	d021      	beq.n	800a254 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a210:	2b01      	cmp	r3, #1
 800a212:	d028      	beq.n	800a266 <tcp_input+0x1ae>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a214:	7a2a      	ldrb	r2, [r5, #8]
 800a216:	b132      	cbz	r2, 800a226 <tcp_input+0x16e>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a21e:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a220:	b2db      	uxtb	r3, r3
 800a222:	429a      	cmp	r2, r3
 800a224:	d104      	bne.n	800a230 <tcp_input+0x178>
    if (pcb->remote_port == tcphdr->src &&
 800a226:	6833      	ldr	r3, [r6, #0]
 800a228:	8b29      	ldrh	r1, [r5, #24]
 800a22a:	881a      	ldrh	r2, [r3, #0]
 800a22c:	4291      	cmp	r1, r2
 800a22e:	d04b      	beq.n	800a2c8 <tcp_input+0x210>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a230:	68eb      	ldr	r3, [r5, #12]
 800a232:	46a8      	mov	r8, r5
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80c6 	beq.w	800a3c6 <tcp_input+0x30e>
 800a23a:	461d      	mov	r5, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a23c:	7d2b      	ldrb	r3, [r5, #20]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e4      	bne.n	800a20c <tcp_input+0x154>
 800a242:	4653      	mov	r3, sl
 800a244:	22fb      	movs	r2, #251	; 0xfb
 800a246:	4659      	mov	r1, fp
 800a248:	4648      	mov	r0, r9
 800a24a:	f003 ffdd 	bl	800e208 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a24e:	7d2b      	ldrb	r3, [r5, #20]
 800a250:	2b0a      	cmp	r3, #10
 800a252:	d1dd      	bne.n	800a210 <tcp_input+0x158>
 800a254:	4653      	mov	r3, sl
 800a256:	22fc      	movs	r2, #252	; 0xfc
 800a258:	4916      	ldr	r1, [pc, #88]	; (800a2b4 <tcp_input+0x1fc>)
 800a25a:	4648      	mov	r0, r9
 800a25c:	f003 ffd4 	bl	800e208 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a260:	7d2b      	ldrb	r3, [r5, #20]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d1d6      	bne.n	800a214 <tcp_input+0x15c>
 800a266:	4653      	mov	r3, sl
 800a268:	22fd      	movs	r2, #253	; 0xfd
 800a26a:	4913      	ldr	r1, [pc, #76]	; (800a2b8 <tcp_input+0x200>)
 800a26c:	4648      	mov	r0, r9
 800a26e:	f003 ffcb 	bl	800e208 <iprintf>
 800a272:	e7cf      	b.n	800a214 <tcp_input+0x15c>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a274:	4b07      	ldr	r3, [pc, #28]	; (800a294 <tcp_input+0x1dc>)
 800a276:	2283      	movs	r2, #131	; 0x83
 800a278:	4910      	ldr	r1, [pc, #64]	; (800a2bc <tcp_input+0x204>)
 800a27a:	4808      	ldr	r0, [pc, #32]	; (800a29c <tcp_input+0x1e4>)
 800a27c:	f003 ffc4 	bl	800e208 <iprintf>
 800a280:	e723      	b.n	800a0ca <tcp_input+0x12>
 800a282:	bf00      	nop
 800a284:	240105c4 	.word	0x240105c4
 800a288:	24009ab8 	.word	0x24009ab8
 800a28c:	240105d0 	.word	0x240105d0
 800a290:	240105c8 	.word	0x240105c8
 800a294:	080108c0 	.word	0x080108c0
 800a298:	08010ae4 	.word	0x08010ae4
 800a29c:	0800f0a0 	.word	0x0800f0a0
 800a2a0:	240105b8 	.word	0x240105b8
 800a2a4:	24010594 	.word	0x24010594
 800a2a8:	24010598 	.word	0x24010598
 800a2ac:	240105d2 	.word	0x240105d2
 800a2b0:	24010578 	.word	0x24010578
 800a2b4:	08010b2c 	.word	0x08010b2c
 800a2b8:	08010b58 	.word	0x08010b58
 800a2bc:	08010ab0 	.word	0x08010ab0
 800a2c0:	240105cc 	.word	0x240105cc
 800a2c4:	08010b04 	.word	0x08010b04
    if (pcb->remote_port == tcphdr->src &&
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	8aea      	ldrh	r2, [r5, #22]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d1af      	bne.n	800a230 <tcp_input+0x178>
        pcb->local_port == tcphdr->dest &&
 800a2d0:	686a      	ldr	r2, [r5, #4]
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d1ab      	bne.n	800a230 <tcp_input+0x178>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2d8:	682a      	ldr	r2, [r5, #0]
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d1a7      	bne.n	800a230 <tcp_input+0x178>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a2e0:	68eb      	ldr	r3, [r5, #12]
 800a2e2:	42ab      	cmp	r3, r5
 800a2e4:	f000 8418 	beq.w	800ab18 <tcp_input+0xa60>
      if (prev != NULL) {
 800a2e8:	f1b8 0f00 	cmp.w	r8, #0
 800a2ec:	d009      	beq.n	800a302 <tcp_input+0x24a>
        pcb->next = tcp_active_pcbs;
 800a2ee:	4a6e      	ldr	r2, [pc, #440]	; (800a4a8 <tcp_input+0x3f0>)
        prev->next = pcb->next;
 800a2f0:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 800a2f4:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 800a2f6:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 800a2f8:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a2fa:	68eb      	ldr	r3, [r5, #12]
 800a2fc:	42ab      	cmp	r3, r5
 800a2fe:	f000 8445 	beq.w	800ab8c <tcp_input+0xad4>
    inseg.next = NULL;
 800a302:	2300      	movs	r3, #0
 800a304:	4f69      	ldr	r7, [pc, #420]	; (800a4ac <tcp_input+0x3f4>)
    recv_data = NULL;
 800a306:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4c8 <tcp_input+0x410>
    recv_flags = 0;
 800a30a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800a4cc <tcp_input+0x414>
    recv_acked = 0;
 800a30e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 800a4d0 <tcp_input+0x418>
    inseg.len = p->tot_len;
 800a312:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 800a314:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 800a316:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 800a31a:	f889 3000 	strb.w	r3, [r9]
    recv_acked = 0;
 800a31e:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 800a322:	4b63      	ldr	r3, [pc, #396]	; (800a4b0 <tcp_input+0x3f8>)
    inseg.len = p->tot_len;
 800a324:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 800a326:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 800a328:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 800a32a:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 800a32c:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 800a32e:	071a      	lsls	r2, r3, #28
 800a330:	d503      	bpl.n	800a33a <tcp_input+0x282>
      p->flags |= PBUF_FLAG_PUSH;
 800a332:	7b62      	ldrb	r2, [r4, #13]
 800a334:	f042 0201 	orr.w	r2, r2, #1
 800a338:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 800a33a:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800a33c:	b172      	cbz	r2, 800a35c <tcp_input+0x2a4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a33e:	4628      	mov	r0, r5
 800a340:	f7fe ff6e 	bl	8009220 <tcp_process_refused_data>
 800a344:	300d      	adds	r0, #13
 800a346:	f000 8286 	beq.w	800a856 <tcp_input+0x79e>
 800a34a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a34c:	b123      	cbz	r3, 800a358 <tcp_input+0x2a0>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a34e:	9b05      	ldr	r3, [sp, #20]
 800a350:	881b      	ldrh	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	f040 827f 	bne.w	800a856 <tcp_input+0x79e>
  if (flags & TCP_RST) {
 800a358:	4b55      	ldr	r3, [pc, #340]	; (800a4b0 <tcp_input+0x3f8>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 800a35c:	4c55      	ldr	r4, [pc, #340]	; (800a4b4 <tcp_input+0x3fc>)
  if (flags & TCP_RST) {
 800a35e:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 800a360:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 800a362:	f140 8151 	bpl.w	800a608 <tcp_input+0x550>
    if (pcb->state == SYN_SENT) {
 800a366:	7d29      	ldrb	r1, [r5, #20]
 800a368:	2902      	cmp	r1, #2
 800a36a:	f000 8341 	beq.w	800a9f0 <tcp_input+0x938>
      if (seqno == pcb->rcv_nxt) {
 800a36e:	4b52      	ldr	r3, [pc, #328]	; (800a4b8 <tcp_input+0x400>)
 800a370:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	429a      	cmp	r2, r3
 800a376:	f000 8428 	beq.w	800abca <tcp_input+0xb12>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a37a:	1a9b      	subs	r3, r3, r2
 800a37c:	d404      	bmi.n	800a388 <tcp_input+0x2d0>
 800a37e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 800a380:	1a9b      	subs	r3, r3, r2
 800a382:	2b00      	cmp	r3, #0
 800a384:	f340 832f 	ble.w	800a9e6 <tcp_input+0x92e>
      if (recv_flags & TF_RESET) {
 800a388:	f899 3000 	ldrb.w	r3, [r9]
 800a38c:	0718      	lsls	r0, r3, #28
 800a38e:	f140 8268 	bpl.w	800a862 <tcp_input+0x7aa>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a392:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800a396:	b11b      	cbz	r3, 800a3a0 <tcp_input+0x2e8>
 800a398:	f06f 010d 	mvn.w	r1, #13
 800a39c:	6928      	ldr	r0, [r5, #16]
 800a39e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a3a0:	4841      	ldr	r0, [pc, #260]	; (800a4a8 <tcp_input+0x3f0>)
 800a3a2:	4629      	mov	r1, r5
 800a3a4:	f7fe fbba 	bl	8008b1c <tcp_pcb_remove>
        tcp_free(pcb);
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f7fd fda9 	bl	8007f00 <tcp_free>
    tcp_input_pcb = NULL;
 800a3ae:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 800a3b0:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 800a3b2:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 800a3b4:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 800a3b8:	b110      	cbz	r0, 800a3c0 <tcp_input+0x308>
      pbuf_free(inseg.p);
 800a3ba:	f7fd fbeb 	bl	8007b94 <pbuf_free>
      inseg.p = NULL;
 800a3be:	607d      	str	r5, [r7, #4]
}
 800a3c0:	b009      	add	sp, #36	; 0x24
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3c6:	4b3d      	ldr	r3, [pc, #244]	; (800a4bc <tcp_input+0x404>)
 800a3c8:	681d      	ldr	r5, [r3, #0]
 800a3ca:	2d00      	cmp	r5, #0
 800a3cc:	d05b      	beq.n	800a486 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3ce:	f8df 8104 	ldr.w	r8, [pc, #260]	; 800a4d4 <tcp_input+0x41c>
 800a3d2:	f8df b104 	ldr.w	fp, [pc, #260]	; 800a4d8 <tcp_input+0x420>
 800a3d6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800a4dc <tcp_input+0x424>
 800a3da:	e002      	b.n	800a3e2 <tcp_input+0x32a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3dc:	68ed      	ldr	r5, [r5, #12]
 800a3de:	2d00      	cmp	r5, #0
 800a3e0:	d051      	beq.n	800a486 <tcp_input+0x3ce>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3e2:	7d2b      	ldrb	r3, [r5, #20]
 800a3e4:	2b0a      	cmp	r3, #10
 800a3e6:	4643      	mov	r3, r8
 800a3e8:	d005      	beq.n	800a3f6 <tcp_input+0x33e>
 800a3ea:	f240 121f 	movw	r2, #287	; 0x11f
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	4648      	mov	r0, r9
 800a3f2:	f003 ff09 	bl	800e208 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3f6:	7a2a      	ldrb	r2, [r5, #8]
 800a3f8:	b132      	cbz	r2, 800a408 <tcp_input+0x350>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a400:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a402:	b2db      	uxtb	r3, r3
 800a404:	429a      	cmp	r2, r3
 800a406:	d1e9      	bne.n	800a3dc <tcp_input+0x324>
      if (pcb->remote_port == tcphdr->src &&
 800a408:	6832      	ldr	r2, [r6, #0]
 800a40a:	8b2b      	ldrh	r3, [r5, #24]
 800a40c:	8811      	ldrh	r1, [r2, #0]
 800a40e:	428b      	cmp	r3, r1
 800a410:	d1e4      	bne.n	800a3dc <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800a412:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a414:	8ae8      	ldrh	r0, [r5, #22]
 800a416:	4290      	cmp	r0, r2
 800a418:	d1e0      	bne.n	800a3dc <tcp_input+0x324>
          pcb->local_port == tcphdr->dest &&
 800a41a:	6869      	ldr	r1, [r5, #4]
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4291      	cmp	r1, r2
 800a420:	d1dc      	bne.n	800a3dc <tcp_input+0x324>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a422:	6829      	ldr	r1, [r5, #0]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	4291      	cmp	r1, r2
 800a428:	d1d8      	bne.n	800a3dc <tcp_input+0x324>
  if (flags & TCP_RST) {
 800a42a:	4a21      	ldr	r2, [pc, #132]	; (800a4b0 <tcp_input+0x3f8>)
 800a42c:	7812      	ldrb	r2, [r2, #0]
 800a42e:	0757      	lsls	r7, r2, #29
 800a430:	f53f ae51 	bmi.w	800a0d6 <tcp_input+0x1e>
  if (flags & TCP_SYN) {
 800a434:	0796      	lsls	r6, r2, #30
 800a436:	f140 83bd 	bpl.w	800abb4 <tcp_input+0xafc>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a43a:	4a1f      	ldr	r2, [pc, #124]	; (800a4b8 <tcp_input+0x400>)
 800a43c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	1a51      	subs	r1, r2, r1
 800a442:	d404      	bmi.n	800a44e <tcp_input+0x396>
 800a444:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 800a446:	1b89      	subs	r1, r1, r6
 800a448:	2900      	cmp	r1, #0
 800a44a:	f340 83c9 	ble.w	800abe0 <tcp_input+0xb28>
  if ((tcplen > 0)) {
 800a44e:	9b05      	ldr	r3, [sp, #20]
 800a450:	881b      	ldrh	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	f43f ae3f 	beq.w	800a0d6 <tcp_input+0x1e>
    tcp_ack_now(pcb);
 800a458:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800a45a:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800a45c:	f043 0302 	orr.w	r3, r3, #2
 800a460:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 800a462:	f001 fba5 	bl	800bbb0 <tcp_output>
        pbuf_free(p);
 800a466:	e636      	b.n	800a0d6 <tcp_input+0x1e>
    tcphdr_opt1len = tcphdr_optlen;
 800a468:	4a15      	ldr	r2, [pc, #84]	; (800a4c0 <tcp_input+0x408>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a46a:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 800a46c:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a46e:	f7fd fb21 	bl	8007ab4 <pbuf_remove_header>
 800a472:	e691      	b.n	800a198 <tcp_input+0xe0>
    tcplen++;
 800a474:	1c53      	adds	r3, r2, #1
 800a476:	4913      	ldr	r1, [pc, #76]	; (800a4c4 <tcp_input+0x40c>)
 800a478:	b29b      	uxth	r3, r3
 800a47a:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 800a47c:	429a      	cmp	r2, r3
    tcplen++;
 800a47e:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a480:	f67f aeb6 	bls.w	800a1f0 <tcp_input+0x138>
 800a484:	e627      	b.n	800a0d6 <tcp_input+0x1e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a486:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800a4e0 <tcp_input+0x428>
 800a48a:	f8d9 8000 	ldr.w	r8, [r9]
 800a48e:	f1b8 0f00 	cmp.w	r8, #0
 800a492:	f000 8236 	beq.w	800a902 <tcp_input+0x84a>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a496:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a49a:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 800a49c:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 800a49e:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4a0:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800a4a4:	e024      	b.n	800a4f0 <tcp_input+0x438>
 800a4a6:	bf00      	nop
 800a4a8:	24010578 	.word	0x24010578
 800a4ac:	2401059c 	.word	0x2401059c
 800a4b0:	24010598 	.word	0x24010598
 800a4b4:	240105bc 	.word	0x240105bc
 800a4b8:	240105b8 	.word	0x240105b8
 800a4bc:	24010590 	.word	0x24010590
 800a4c0:	240105c8 	.word	0x240105c8
 800a4c4:	240105d2 	.word	0x240105d2
 800a4c8:	240105b0 	.word	0x240105b0
 800a4cc:	240105b4 	.word	0x240105b4
 800a4d0:	240105ac 	.word	0x240105ac
 800a4d4:	080108c0 	.word	0x080108c0
 800a4d8:	08010bd8 	.word	0x08010bd8
 800a4dc:	0800f0a0 	.word	0x0800f0a0
 800a4e0:	24010584 	.word	0x24010584
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4e4:	68eb      	ldr	r3, [r5, #12]
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 820a 	beq.w	800a904 <tcp_input+0x84c>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4f0:	7a2a      	ldrb	r2, [r5, #8]
 800a4f2:	b12a      	cbz	r2, 800a500 <tcp_input+0x448>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4f4:	f89c 3030 	ldrb.w	r3, [ip, #48]	; 0x30
 800a4f8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d1f1      	bne.n	800a4e4 <tcp_input+0x42c>
      if (lpcb->local_port == tcphdr->dest) {
 800a500:	8aea      	ldrh	r2, [r5, #22]
 800a502:	8843      	ldrh	r3, [r0, #2]
 800a504:	429a      	cmp	r2, r3
 800a506:	d1ed      	bne.n	800a4e4 <tcp_input+0x42c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a508:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a50a:	b10a      	cbz	r2, 800a510 <tcp_input+0x458>
 800a50c:	4572      	cmp	r2, lr
 800a50e:	d1e9      	bne.n	800a4e4 <tcp_input+0x42c>
      if (prev != NULL) {
 800a510:	b129      	cbz	r1, 800a51e <tcp_input+0x466>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a512:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a514:	f8c9 5000 	str.w	r5, [r9]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a518:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a51a:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 800a51e:	4a9e      	ldr	r2, [pc, #632]	; (800a798 <tcp_input+0x6e0>)
 800a520:	7812      	ldrb	r2, [r2, #0]
 800a522:	0751      	lsls	r1, r2, #29
 800a524:	f53f add7 	bmi.w	800a0d6 <tcp_input+0x1e>
  if (flags & TCP_ACK) {
 800a528:	f012 0810 	ands.w	r8, r2, #16
 800a52c:	f040 8276 	bne.w	800aa1c <tcp_input+0x964>
  } else if (flags & TCP_SYN) {
 800a530:	0791      	lsls	r1, r2, #30
 800a532:	f57f add0 	bpl.w	800a0d6 <tcp_input+0x1e>
    npcb = tcp_alloc(pcb->prio);
 800a536:	7d68      	ldrb	r0, [r5, #21]
 800a538:	f7fe fc9e 	bl	8008e78 <tcp_alloc>
    if (npcb == NULL) {
 800a53c:	4681      	mov	r9, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	f000 82d9 	beq.w	800aaf6 <tcp_input+0xa3e>
    npcb->remote_port = tcphdr->src;
 800a544:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 800a546:	4b95      	ldr	r3, [pc, #596]	; (800a79c <tcp_input+0x6e4>)
 800a548:	681a      	ldr	r2, [r3, #0]
    npcb->remote_port = tcphdr->src;
 800a54a:	780b      	ldrb	r3, [r1, #0]
 800a54c:	7849      	ldrb	r1, [r1, #1]
    npcb->rcv_nxt = seqno + 1;
 800a54e:	3201      	adds	r2, #1
    npcb->remote_port = tcphdr->src;
 800a550:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    npcb->local_port = pcb->local_port;
 800a554:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 800a556:	6242      	str	r2, [r0, #36]	; 0x24
    npcb->remote_port = tcphdr->src;
 800a558:	8303      	strh	r3, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a55a:	697b      	ldr	r3, [r7, #20]
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a55c:	62c2      	str	r2, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a55e:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a560:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 800a562:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a564:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 800a566:	2303      	movs	r3, #3
 800a568:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 800a56a:	f7fe fef1 	bl	8009350 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a56e:	4b8b      	ldr	r3, [pc, #556]	; (800a79c <tcp_input+0x6e4>)
    npcb->snd_nxt = iss;
 800a570:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a574:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 800a576:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a57a:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 800a57c:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 800a580:	4a87      	ldr	r2, [pc, #540]	; (800a7a0 <tcp_input+0x6e8>)
    npcb->snd_wl2 = iss;
 800a582:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a586:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 800a588:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 800a58c:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a590:	7a6b      	ldrb	r3, [r5, #9]
 800a592:	f003 030c 	and.w	r3, r3, #12
 800a596:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a59a:	7a2b      	ldrb	r3, [r5, #8]
 800a59c:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 800a5a0:	6813      	ldr	r3, [r2, #0]
 800a5a2:	f8c2 9000 	str.w	r9, [r2]
 800a5a6:	f8c9 300c 	str.w	r3, [r9, #12]
 800a5aa:	f001 fe25 	bl	800c1f8 <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 800a5ae:	4b7d      	ldr	r3, [pc, #500]	; (800a7a4 <tcp_input+0x6ec>)
    TCP_REG_ACTIVE(npcb);
 800a5b0:	4a7d      	ldr	r2, [pc, #500]	; (800a7a8 <tcp_input+0x6f0>)
 800a5b2:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 800a5b4:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 800a5b6:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 800a5b8:	b12b      	cbz	r3, 800a5c6 <tcp_input+0x50e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a5ba:	4b7c      	ldr	r3, [pc, #496]	; (800a7ac <tcp_input+0x6f4>)
 800a5bc:	4648      	mov	r0, r9
 800a5be:	f8a3 8000 	strh.w	r8, [r3]
 800a5c2:	f7ff fcdb 	bl	8009f7c <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 800a5c6:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5c8:	f109 0204 	add.w	r2, r9, #4
 800a5cc:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a5d0:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800a5d6:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a5da:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5de:	f002 fd07 	bl	800cff0 <ip4_route>
 800a5e2:	9a05      	ldr	r2, [sp, #20]
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f7fe fece 	bl	8009388 <tcp_eff_send_mss_netif>
 800a5ec:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a5ee:	2112      	movs	r1, #18
 800a5f0:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a5f2:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a5f6:	f001 f8bf 	bl	800b778 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	f040 8286 	bne.w	800ab0c <tcp_input+0xa54>
    tcp_output(npcb);
 800a600:	4648      	mov	r0, r9
 800a602:	f001 fad5 	bl	800bbb0 <tcp_output>
 800a606:	e566      	b.n	800a0d6 <tcp_input+0x1e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a608:	f013 0102 	ands.w	r1, r3, #2
 800a60c:	d004      	beq.n	800a618 <tcp_input+0x560>
 800a60e:	7d2a      	ldrb	r2, [r5, #20]
 800a610:	3a02      	subs	r2, #2
 800a612:	2a01      	cmp	r2, #1
 800a614:	f200 81e7 	bhi.w	800a9e6 <tcp_input+0x92e>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a618:	8b6a      	ldrh	r2, [r5, #26]
 800a61a:	06d0      	lsls	r0, r2, #27
 800a61c:	d402      	bmi.n	800a624 <tcp_input+0x56c>
    pcb->tmr = tcp_ticks;
 800a61e:	4a64      	ldr	r2, [pc, #400]	; (800a7b0 <tcp_input+0x6f8>)
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 800a624:	4a5f      	ldr	r2, [pc, #380]	; (800a7a4 <tcp_input+0x6ec>)
 800a626:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 800a628:	2200      	movs	r2, #0
 800a62a:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 800a62e:	b140      	cbz	r0, 800a642 <tcp_input+0x58a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a630:	485e      	ldr	r0, [pc, #376]	; (800a7ac <tcp_input+0x6f4>)
 800a632:	8002      	strh	r2, [r0, #0]
 800a634:	4628      	mov	r0, r5
 800a636:	e9cd 3106 	strd	r3, r1, [sp, #24]
 800a63a:	f7ff fc9f 	bl	8009f7c <tcp_parseopt.part.0>
 800a63e:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 800a642:	7d2a      	ldrb	r2, [r5, #20]
 800a644:	3a02      	subs	r2, #2
 800a646:	2a07      	cmp	r2, #7
 800a648:	f63f ae9e 	bhi.w	800a388 <tcp_input+0x2d0>
 800a64c:	e8df f002 	tbb	[pc, r2]
 800a650:	8b041332 	.word	0x8b041332
 800a654:	57b60470 	.word	0x57b60470
      tcp_receive(pcb);
 800a658:	4628      	mov	r0, r5
 800a65a:	f7fe ffe7 	bl	800962c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a65e:	f899 3000 	ldrb.w	r3, [r9]
 800a662:	069e      	lsls	r6, r3, #26
 800a664:	f57f ae90 	bpl.w	800a388 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800a668:	8b6b      	ldrh	r3, [r5, #26]
 800a66a:	f043 0302 	orr.w	r3, r3, #2
 800a66e:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 800a670:	2307      	movs	r3, #7
 800a672:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800a674:	e688      	b.n	800a388 <tcp_input+0x2d0>
      if (flags & TCP_ACK) {
 800a676:	06da      	lsls	r2, r3, #27
 800a678:	f140 8229 	bpl.w	800aace <tcp_input+0xa16>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a67c:	4b4d      	ldr	r3, [pc, #308]	; (800a7b4 <tcp_input+0x6fc>)
 800a67e:	6819      	ldr	r1, [r3, #0]
 800a680:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a682:	43db      	mvns	r3, r3
 800a684:	42cb      	cmn	r3, r1
 800a686:	d404      	bmi.n	800a692 <tcp_input+0x5da>
 800a688:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a68a:	1acb      	subs	r3, r1, r3
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f340 8251 	ble.w	800ab34 <tcp_input+0xa7c>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a692:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a694:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a696:	8810      	ldrh	r0, [r2, #0]
 800a698:	4a40      	ldr	r2, [pc, #256]	; (800a79c <tcp_input+0x6e4>)
 800a69a:	6812      	ldr	r2, [r2, #0]
 800a69c:	4402      	add	r2, r0
 800a69e:	8818      	ldrh	r0, [r3, #0]
 800a6a0:	9002      	str	r0, [sp, #8]
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	885b      	ldrh	r3, [r3, #2]
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	4b43      	ldr	r3, [pc, #268]	; (800a7b8 <tcp_input+0x700>)
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	3304      	adds	r3, #4
 800a6ae:	f001 fa05 	bl	800babc <tcp_rst>
    if (err != ERR_ABRT) {
 800a6b2:	e669      	b.n	800a388 <tcp_input+0x2d0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a6b4:	f003 0212 	and.w	r2, r3, #18
 800a6b8:	2a12      	cmp	r2, #18
 800a6ba:	f000 813d 	beq.w	800a938 <tcp_input+0x880>
      else if (flags & TCP_ACK) {
 800a6be:	06d9      	lsls	r1, r3, #27
 800a6c0:	f57f ae62 	bpl.w	800a388 <tcp_input+0x2d0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c4:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6c6:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6c8:	8811      	ldrh	r1, [r2, #0]
 800a6ca:	4a34      	ldr	r2, [pc, #208]	; (800a79c <tcp_input+0x6e4>)
 800a6cc:	8818      	ldrh	r0, [r3, #0]
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	4938      	ldr	r1, [pc, #224]	; (800a7b4 <tcp_input+0x6fc>)
 800a6d4:	6809      	ldr	r1, [r1, #0]
 800a6d6:	9002      	str	r0, [sp, #8]
 800a6d8:	4628      	mov	r0, r5
 800a6da:	885b      	ldrh	r3, [r3, #2]
 800a6dc:	9301      	str	r3, [sp, #4]
 800a6de:	4b36      	ldr	r3, [pc, #216]	; (800a7b8 <tcp_input+0x700>)
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	f001 f9ea 	bl	800babc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a6e8:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 800a6ec:	2b05      	cmp	r3, #5
 800a6ee:	f63f ae4b 	bhi.w	800a388 <tcp_input+0x2d0>
          pcb->rtime = 0;
 800a6f2:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a6f4:	4628      	mov	r0, r5
          pcb->rtime = 0;
 800a6f6:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a6f8:	f001 fc5a 	bl	800bfb0 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a6fc:	e644      	b.n	800a388 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800a6fe:	4628      	mov	r0, r5
 800a700:	f7fe ff94 	bl	800962c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a704:	4b24      	ldr	r3, [pc, #144]	; (800a798 <tcp_input+0x6e0>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	06de      	lsls	r6, r3, #27
 800a70a:	f57f ae3d 	bpl.w	800a388 <tcp_input+0x2d0>
 800a70e:	4b29      	ldr	r3, [pc, #164]	; (800a7b4 <tcp_input+0x6fc>)
 800a710:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	429a      	cmp	r2, r3
 800a716:	f47f ae37 	bne.w	800a388 <tcp_input+0x2d0>
 800a71a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f ae33 	bne.w	800a388 <tcp_input+0x2d0>
        recv_flags |= TF_CLOSED;
 800a722:	f899 3000 	ldrb.w	r3, [r9]
 800a726:	f043 0310 	orr.w	r3, r3, #16
 800a72a:	f889 3000 	strb.w	r3, [r9]
    if (err != ERR_ABRT) {
 800a72e:	e62b      	b.n	800a388 <tcp_input+0x2d0>
      tcp_receive(pcb);
 800a730:	4628      	mov	r0, r5
 800a732:	f7fe ff7b 	bl	800962c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a736:	f899 3000 	ldrb.w	r3, [r9]
 800a73a:	069a      	lsls	r2, r3, #26
 800a73c:	f57f ae24 	bpl.w	800a388 <tcp_input+0x2d0>
        tcp_ack_now(pcb);
 800a740:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800a742:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 800a74a:	f7fd fee7 	bl	800851c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a74e:	4b14      	ldr	r3, [pc, #80]	; (800a7a0 <tcp_input+0x6e8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	42ab      	cmp	r3, r5
 800a754:	d061      	beq.n	800a81a <tcp_input+0x762>
 800a756:	2b00      	cmp	r3, #0
 800a758:	d062      	beq.n	800a820 <tcp_input+0x768>
 800a75a:	68da      	ldr	r2, [r3, #12]
 800a75c:	42aa      	cmp	r2, r5
 800a75e:	f000 821e 	beq.w	800ab9e <tcp_input+0xae6>
 800a762:	4613      	mov	r3, r2
 800a764:	e7f7      	b.n	800a756 <tcp_input+0x69e>
      tcp_receive(pcb);
 800a766:	4628      	mov	r0, r5
 800a768:	f7fe ff60 	bl	800962c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a76c:	f899 3000 	ldrb.w	r3, [r9]
 800a770:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a774:	4b08      	ldr	r3, [pc, #32]	; (800a798 <tcp_input+0x6e0>)
 800a776:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 800a778:	f000 8199 	beq.w	800aaae <tcp_input+0x9f6>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a77c:	06d8      	lsls	r0, r3, #27
 800a77e:	d504      	bpl.n	800a78a <tcp_input+0x6d2>
 800a780:	4b0c      	ldr	r3, [pc, #48]	; (800a7b4 <tcp_input+0x6fc>)
 800a782:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	429a      	cmp	r2, r3
 800a788:	d038      	beq.n	800a7fc <tcp_input+0x744>
          tcp_ack_now(pcb);
 800a78a:	8b6b      	ldrh	r3, [r5, #26]
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 800a792:	2308      	movs	r3, #8
 800a794:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800a796:	e5f7      	b.n	800a388 <tcp_input+0x2d0>
 800a798:	24010598 	.word	0x24010598
 800a79c:	240105b8 	.word	0x240105b8
 800a7a0:	24010578 	.word	0x24010578
 800a7a4:	240105d0 	.word	0x240105d0
 800a7a8:	2401057c 	.word	0x2401057c
 800a7ac:	240105c0 	.word	0x240105c0
 800a7b0:	24010588 	.word	0x24010588
 800a7b4:	24010594 	.word	0x24010594
 800a7b8:	24009ac8 	.word	0x24009ac8
      tcp_receive(pcb);
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7fe ff35 	bl	800962c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a7c2:	4baa      	ldr	r3, [pc, #680]	; (800aa6c <tcp_input+0x9b4>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	06db      	lsls	r3, r3, #27
 800a7c8:	f57f adde 	bpl.w	800a388 <tcp_input+0x2d0>
 800a7cc:	4ba8      	ldr	r3, [pc, #672]	; (800aa70 <tcp_input+0x9b8>)
 800a7ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	f47f add8 	bne.w	800a388 <tcp_input+0x2d0>
 800a7d8:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f47f add4 	bne.w	800a388 <tcp_input+0x2d0>
        tcp_pcb_purge(pcb);
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f7fd fe9b 	bl	800851c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a7e6:	4ba3      	ldr	r3, [pc, #652]	; (800aa74 <tcp_input+0x9bc>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	42ab      	cmp	r3, r5
 800a7ec:	d015      	beq.n	800a81a <tcp_input+0x762>
 800a7ee:	b1bb      	cbz	r3, 800a820 <tcp_input+0x768>
 800a7f0:	68da      	ldr	r2, [r3, #12]
 800a7f2:	42aa      	cmp	r2, r5
 800a7f4:	f000 81d3 	beq.w	800ab9e <tcp_input+0xae6>
 800a7f8:	4613      	mov	r3, r2
 800a7fa:	e7f8      	b.n	800a7ee <tcp_input+0x736>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a7fc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1c3      	bne.n	800a78a <tcp_input+0x6d2>
          tcp_ack_now(pcb);
 800a802:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800a804:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 800a806:	f043 0302 	orr.w	r3, r3, #2
 800a80a:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 800a80c:	f7fd fe86 	bl	800851c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a810:	4b98      	ldr	r3, [pc, #608]	; (800aa74 <tcp_input+0x9bc>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	42ab      	cmp	r3, r5
 800a816:	f040 81c5 	bne.w	800aba4 <tcp_input+0xaec>
        TCP_RMV_ACTIVE(pcb);
 800a81a:	68eb      	ldr	r3, [r5, #12]
 800a81c:	4a95      	ldr	r2, [pc, #596]	; (800aa74 <tcp_input+0x9bc>)
 800a81e:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a820:	4b95      	ldr	r3, [pc, #596]	; (800aa78 <tcp_input+0x9c0>)
        pcb->state = TIME_WAIT;
 800a822:	220a      	movs	r2, #10
 800a824:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	601d      	str	r5, [r3, #0]
 800a82a:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 800a82c:	2201      	movs	r2, #1
 800a82e:	4b93      	ldr	r3, [pc, #588]	; (800aa7c <tcp_input+0x9c4>)
 800a830:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a832:	f001 fce1 	bl	800c1f8 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800a836:	e5a7      	b.n	800a388 <tcp_input+0x2d0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a838:	4b91      	ldr	r3, [pc, #580]	; (800aa80 <tcp_input+0x9c8>)
 800a83a:	22c2      	movs	r2, #194	; 0xc2
 800a83c:	4991      	ldr	r1, [pc, #580]	; (800aa84 <tcp_input+0x9cc>)
 800a83e:	4892      	ldr	r0, [pc, #584]	; (800aa88 <tcp_input+0x9d0>)
 800a840:	f003 fce2 	bl	800e208 <iprintf>
 800a844:	e478      	b.n	800a138 <tcp_input+0x80>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a846:	4b8e      	ldr	r3, [pc, #568]	; (800aa80 <tcp_input+0x9c8>)
 800a848:	22df      	movs	r2, #223	; 0xdf
 800a84a:	4990      	ldr	r1, [pc, #576]	; (800aa8c <tcp_input+0x9d4>)
 800a84c:	488e      	ldr	r0, [pc, #568]	; (800aa88 <tcp_input+0x9d0>)
 800a84e:	f003 fcdb 	bl	800e208 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a852:	8923      	ldrh	r3, [r4, #8]
 800a854:	e496      	b.n	800a184 <tcp_input+0xcc>
        if (pcb->rcv_ann_wnd == 0) {
 800a856:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 80da 	beq.w	800aa12 <tcp_input+0x95a>
 800a85e:	4c8c      	ldr	r4, [pc, #560]	; (800aa90 <tcp_input+0x9d8>)
 800a860:	e5a5      	b.n	800a3ae <tcp_input+0x2f6>
        if (recv_acked > 0) {
 800a862:	f8bb 2000 	ldrh.w	r2, [fp]
 800a866:	b15a      	cbz	r2, 800a880 <tcp_input+0x7c8>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a868:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800a86c:	b12b      	cbz	r3, 800a87a <tcp_input+0x7c2>
 800a86e:	4629      	mov	r1, r5
 800a870:	6928      	ldr	r0, [r5, #16]
 800a872:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a874:	300d      	adds	r0, #13
 800a876:	f43f ad9a 	beq.w	800a3ae <tcp_input+0x2f6>
          recv_acked = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 800a880:	4628      	mov	r0, r5
 800a882:	f7fe fe33 	bl	80094ec <tcp_input_delayed_close>
 800a886:	2800      	cmp	r0, #0
 800a888:	f47f ad91 	bne.w	800a3ae <tcp_input+0x2f6>
        if (recv_data != NULL) {
 800a88c:	f8d8 2000 	ldr.w	r2, [r8]
 800a890:	b1fa      	cbz	r2, 800a8d2 <tcp_input+0x81a>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a892:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a894:	b143      	cbz	r3, 800a8a8 <tcp_input+0x7f0>
 800a896:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a89a:	4b79      	ldr	r3, [pc, #484]	; (800aa80 <tcp_input+0x9c8>)
 800a89c:	497d      	ldr	r1, [pc, #500]	; (800aa94 <tcp_input+0x9dc>)
 800a89e:	487a      	ldr	r0, [pc, #488]	; (800aa88 <tcp_input+0x9d0>)
 800a8a0:	f003 fcb2 	bl	800e208 <iprintf>
            pbuf_free(recv_data);
 800a8a4:	f8d8 2000 	ldr.w	r2, [r8]
          if (pcb->flags & TF_RXCLOSED) {
 800a8a8:	8b6b      	ldrh	r3, [r5, #26]
 800a8aa:	f013 0310 	ands.w	r3, r3, #16
 800a8ae:	f040 80f7 	bne.w	800aaa0 <tcp_input+0x9e8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a8b2:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	f000 8117 	beq.w	800aaea <tcp_input+0xa32>
 800a8bc:	4629      	mov	r1, r5
 800a8be:	6928      	ldr	r0, [r5, #16]
 800a8c0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800a8c2:	f110 0f0d 	cmn.w	r0, #13
 800a8c6:	f43f ad72 	beq.w	800a3ae <tcp_input+0x2f6>
          if (err != ERR_OK) {
 800a8ca:	b110      	cbz	r0, 800a8d2 <tcp_input+0x81a>
            pcb->refused_data = recv_data;
 800a8cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d0:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800a8d2:	f899 3000 	ldrb.w	r3, [r9]
 800a8d6:	0699      	lsls	r1, r3, #26
 800a8d8:	d507      	bpl.n	800a8ea <tcp_input+0x832>
          if (pcb->refused_data != NULL) {
 800a8da:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 80af 	beq.w	800aa40 <tcp_input+0x988>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a8e2:	7b5a      	ldrb	r2, [r3, #13]
 800a8e4:	f042 0220 	orr.w	r2, r2, #32
 800a8e8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800a8ea:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800a8ec:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 800a8ee:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a8f0:	f7fe fdfc 	bl	80094ec <tcp_input_delayed_close>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	f47f ad5a 	bne.w	800a3ae <tcp_input+0x2f6>
        tcp_output(pcb);
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f001 f958 	bl	800bbb0 <tcp_output>
 800a900:	e555      	b.n	800a3ae <tcp_input+0x2f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a902:	6830      	ldr	r0, [r6, #0]
 800a904:	8980      	ldrh	r0, [r0, #12]
 800a906:	f7fc f81d 	bl	8006944 <lwip_htons>
 800a90a:	f010 0004 	ands.w	r0, r0, #4
 800a90e:	f47f abe2 	bne.w	800a0d6 <tcp_input+0x1e>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a912:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a914:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a916:	8811      	ldrh	r1, [r2, #0]
 800a918:	4a5f      	ldr	r2, [pc, #380]	; (800aa98 <tcp_input+0x9e0>)
 800a91a:	881d      	ldrh	r5, [r3, #0]
 800a91c:	6812      	ldr	r2, [r2, #0]
 800a91e:	440a      	add	r2, r1
 800a920:	4953      	ldr	r1, [pc, #332]	; (800aa70 <tcp_input+0x9b8>)
 800a922:	6809      	ldr	r1, [r1, #0]
 800a924:	9502      	str	r5, [sp, #8]
 800a926:	885b      	ldrh	r3, [r3, #2]
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	4b5c      	ldr	r3, [pc, #368]	; (800aa9c <tcp_input+0x9e4>)
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	3304      	adds	r3, #4
 800a930:	f001 f8c4 	bl	800babc <tcp_rst>
 800a934:	f7ff bbcf 	b.w	800a0d6 <tcp_input+0x1e>
          && (ackno == pcb->lastack + 1)) {
 800a938:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800a93a:	494d      	ldr	r1, [pc, #308]	; (800aa70 <tcp_input+0x9b8>)
 800a93c:	3201      	adds	r2, #1
 800a93e:	6809      	ldr	r1, [r1, #0]
 800a940:	428a      	cmp	r2, r1
 800a942:	f47f aebc 	bne.w	800a6be <tcp_input+0x606>
        pcb->rcv_nxt = seqno + 1;
 800a946:	4b54      	ldr	r3, [pc, #336]	; (800aa98 <tcp_input+0x9e0>)
        pcb->snd_wnd = tcphdr->wnd;
 800a948:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 800a94a:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 800a94c:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a94e:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 800a950:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a952:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a954:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800a956:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a958:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a95a:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a95c:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a95e:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a960:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a962:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 800a966:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a968:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a96c:	9205      	str	r2, [sp, #20]
 800a96e:	f002 fb3f 	bl	800cff0 <ip4_route>
 800a972:	9a05      	ldr	r2, [sp, #20]
 800a974:	4601      	mov	r1, r0
 800a976:	4630      	mov	r0, r6
 800a978:	f7fe fd06 	bl	8009388 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a97c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a980:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a982:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a984:	0081      	lsls	r1, r0, #2
 800a986:	429a      	cmp	r2, r3
 800a988:	4616      	mov	r6, r2
 800a98a:	bf38      	it	cc
 800a98c:	461e      	movcc	r6, r3
 800a98e:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800a992:	f240 814b 	bls.w	800ac2c <tcp_input+0xb74>
 800a996:	b28b      	uxth	r3, r1
 800a998:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a99c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 813b 	beq.w	800ac1c <tcp_input+0xb64>
        --pcb->snd_queuelen;
 800a9a6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 800a9aa:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 800a9b2:	2e00      	cmp	r6, #0
 800a9b4:	f000 812d 	beq.w	800ac12 <tcp_input+0xb5a>
          pcb->unacked = rseg->next;
 800a9b8:	6833      	ldr	r3, [r6, #0]
 800a9ba:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 800a9bc:	4630      	mov	r0, r6
 800a9be:	f7fd fcef 	bl	80083a0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a9c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 8120 	beq.w	800ac0a <tcp_input+0xb52>
          pcb->rtime = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 800a9ce:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a9d2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 800a9d6:	b133      	cbz	r3, 800a9e6 <tcp_input+0x92e>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	4629      	mov	r1, r5
 800a9dc:	6928      	ldr	r0, [r5, #16]
 800a9de:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a9e0:	300d      	adds	r0, #13
 800a9e2:	f43f ace4 	beq.w	800a3ae <tcp_input+0x2f6>
        tcp_ack_now(pcb);
 800a9e6:	8b6b      	ldrh	r3, [r5, #26]
 800a9e8:	f043 0302 	orr.w	r3, r3, #2
 800a9ec:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800a9ee:	e4cb      	b.n	800a388 <tcp_input+0x2d0>
      if (ackno == pcb->snd_nxt) {
 800a9f0:	4b1f      	ldr	r3, [pc, #124]	; (800aa70 <tcp_input+0x9b8>)
 800a9f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	f47f acc6 	bne.w	800a388 <tcp_input+0x2d0>
      recv_flags |= TF_RESET;
 800a9fc:	f899 3000 	ldrb.w	r3, [r9]
 800aa00:	f043 0308 	orr.w	r3, r3, #8
 800aa04:	f889 3000 	strb.w	r3, [r9]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800aa08:	8b6b      	ldrh	r3, [r5, #26]
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 800aa10:	e4ba      	b.n	800a388 <tcp_input+0x2d0>
          tcp_send_empty_ack(pcb);
 800aa12:	4628      	mov	r0, r5
 800aa14:	4c1e      	ldr	r4, [pc, #120]	; (800aa90 <tcp_input+0x9d8>)
 800aa16:	f001 f899 	bl	800bb4c <tcp_send_empty_ack>
 800aa1a:	e4c8      	b.n	800a3ae <tcp_input+0x2f6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa1c:	8802      	ldrh	r2, [r0, #0]
 800aa1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aa22:	9b05      	ldr	r3, [sp, #20]
 800aa24:	881a      	ldrh	r2, [r3, #0]
 800aa26:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <tcp_input+0x9e0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	441a      	add	r2, r3
 800aa2c:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <tcp_input+0x9b8>)
 800aa2e:	4628      	mov	r0, r5
 800aa30:	6819      	ldr	r1, [r3, #0]
 800aa32:	4b1a      	ldr	r3, [pc, #104]	; (800aa9c <tcp_input+0x9e4>)
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	3304      	adds	r3, #4
 800aa38:	f001 f840 	bl	800babc <tcp_rst>
 800aa3c:	f7ff bb4b 	b.w	800a0d6 <tcp_input+0x1e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa40:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800aa42:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d001      	beq.n	800aa4e <tcp_input+0x996>
              pcb->rcv_wnd++;
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800aa4e:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	f43f af49 	beq.w	800a8ea <tcp_input+0x832>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	6928      	ldr	r0, [r5, #16]
 800aa5e:	461a      	mov	r2, r3
 800aa60:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800aa62:	300d      	adds	r0, #13
 800aa64:	f47f af41 	bne.w	800a8ea <tcp_input+0x832>
 800aa68:	e4a1      	b.n	800a3ae <tcp_input+0x2f6>
 800aa6a:	bf00      	nop
 800aa6c:	24010598 	.word	0x24010598
 800aa70:	24010594 	.word	0x24010594
 800aa74:	24010578 	.word	0x24010578
 800aa78:	24010590 	.word	0x24010590
 800aa7c:	2401057c 	.word	0x2401057c
 800aa80:	080108c0 	.word	0x080108c0
 800aa84:	08010ac8 	.word	0x08010ac8
 800aa88:	0800f0a0 	.word	0x0800f0a0
 800aa8c:	08010ad8 	.word	0x08010ad8
 800aa90:	240105bc 	.word	0x240105bc
 800aa94:	08010c74 	.word	0x08010c74
 800aa98:	240105b8 	.word	0x240105b8
 800aa9c:	24009ac8 	.word	0x24009ac8
            pbuf_free(recv_data);
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	f7fd f877 	bl	8007b94 <pbuf_free>
            tcp_abort(pcb);
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f7fe f97e 	bl	8008da8 <tcp_abort>
            goto aborted;
 800aaac:	e47f      	b.n	800a3ae <tcp_input+0x2f6>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aaae:	06d9      	lsls	r1, r3, #27
 800aab0:	f57f ac6a 	bpl.w	800a388 <tcp_input+0x2d0>
 800aab4:	4b63      	ldr	r3, [pc, #396]	; (800ac44 <tcp_input+0xb8c>)
 800aab6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	f47f ac64 	bne.w	800a388 <tcp_input+0x2d0>
 800aac0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f47f ac60 	bne.w	800a388 <tcp_input+0x2d0>
        pcb->state = FIN_WAIT_2;
 800aac8:	2306      	movs	r3, #6
 800aaca:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 800aacc:	e45c      	b.n	800a388 <tcp_input+0x2d0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800aace:	2900      	cmp	r1, #0
 800aad0:	f43f ac5a 	beq.w	800a388 <tcp_input+0x2d0>
 800aad4:	4b5c      	ldr	r3, [pc, #368]	; (800ac48 <tcp_input+0xb90>)
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aada:	3b01      	subs	r3, #1
 800aadc:	4293      	cmp	r3, r2
 800aade:	f47f ac53 	bne.w	800a388 <tcp_input+0x2d0>
        tcp_rexmit(pcb);
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 ff6c 	bl	800b9c0 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800aae8:	e44e      	b.n	800a388 <tcp_input+0x2d0>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aaea:	4633      	mov	r3, r6
 800aaec:	4630      	mov	r0, r6
 800aaee:	4629      	mov	r1, r5
 800aaf0:	f7fe fb62 	bl	80091b8 <tcp_recv_null>
 800aaf4:	e6e5      	b.n	800a8c2 <tcp_input+0x80a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800aaf6:	69ab      	ldr	r3, [r5, #24]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f43f aaec 	beq.w	800a0d6 <tcp_input+0x1e>
 800aafe:	4601      	mov	r1, r0
 800ab00:	f04f 32ff 	mov.w	r2, #4294967295
 800ab04:	6928      	ldr	r0, [r5, #16]
 800ab06:	4798      	blx	r3
 800ab08:	f7ff bae5 	b.w	800a0d6 <tcp_input+0x1e>
      tcp_abandon(npcb, 0);
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	4648      	mov	r0, r9
 800ab10:	f7fe f874 	bl	8008bfc <tcp_abandon>
      return;
 800ab14:	f7ff badf 	b.w	800a0d6 <tcp_input+0x1e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ab18:	4b4c      	ldr	r3, [pc, #304]	; (800ac4c <tcp_input+0xb94>)
 800ab1a:	f240 120d 	movw	r2, #269	; 0x10d
 800ab1e:	494c      	ldr	r1, [pc, #304]	; (800ac50 <tcp_input+0xb98>)
 800ab20:	484c      	ldr	r0, [pc, #304]	; (800ac54 <tcp_input+0xb9c>)
 800ab22:	f003 fb71 	bl	800e208 <iprintf>
      if (prev != NULL) {
 800ab26:	f1b8 0f00 	cmp.w	r8, #0
 800ab2a:	f43f abe6 	beq.w	800a2fa <tcp_input+0x242>
 800ab2e:	68eb      	ldr	r3, [r5, #12]
 800ab30:	f7ff bbdd 	b.w	800a2ee <tcp_input+0x236>
          pcb->state = ESTABLISHED;
 800ab34:	2304      	movs	r3, #4
 800ab36:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 800ab38:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0b3      	beq.n	800aaa6 <tcp_input+0x9ee>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d056      	beq.n	800abf2 <tcp_input+0xb3a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ab44:	2200      	movs	r2, #0
 800ab46:	4629      	mov	r1, r5
 800ab48:	6928      	ldr	r0, [r5, #16]
 800ab4a:	4798      	blx	r3
          if (err != ERR_OK) {
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d14c      	bne.n	800abea <tcp_input+0xb32>
          tcp_receive(pcb);
 800ab50:	4628      	mov	r0, r5
 800ab52:	f7fe fd6b 	bl	800962c <tcp_receive>
          if (recv_acked != 0) {
 800ab56:	f8bb 3000 	ldrh.w	r3, [fp]
 800ab5a:	b113      	cbz	r3, 800ab62 <tcp_input+0xaaa>
            recv_acked--;
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ab62:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 800ab64:	f241 131c 	movw	r3, #4380	; 0x111c
 800ab68:	004a      	lsls	r2, r1, #1
 800ab6a:	0088      	lsls	r0, r1, #2
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	4616      	mov	r6, r2
 800ab70:	bf38      	it	cc
 800ab72:	461e      	movcc	r6, r3
 800ab74:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 800ab78:	d923      	bls.n	800abc2 <tcp_input+0xb0a>
 800ab7a:	b283      	uxth	r3, r0
 800ab7c:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800ab80:	f899 3000 	ldrb.w	r3, [r9]
 800ab84:	069b      	lsls	r3, r3, #26
 800ab86:	f57f abff 	bpl.w	800a388 <tcp_input+0x2d0>
 800ab8a:	e56d      	b.n	800a668 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ab8c:	4b2f      	ldr	r3, [pc, #188]	; (800ac4c <tcp_input+0xb94>)
 800ab8e:	f240 1215 	movw	r2, #277	; 0x115
 800ab92:	4931      	ldr	r1, [pc, #196]	; (800ac58 <tcp_input+0xba0>)
 800ab94:	482f      	ldr	r0, [pc, #188]	; (800ac54 <tcp_input+0xb9c>)
 800ab96:	f003 fb37 	bl	800e208 <iprintf>
 800ab9a:	f7ff bbb2 	b.w	800a302 <tcp_input+0x24a>
        TCP_RMV_ACTIVE(pcb);
 800ab9e:	68ea      	ldr	r2, [r5, #12]
 800aba0:	60da      	str	r2, [r3, #12]
 800aba2:	e63d      	b.n	800a820 <tcp_input+0x768>
          TCP_RMV_ACTIVE(pcb);
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f43f ae3b 	beq.w	800a820 <tcp_input+0x768>
 800abaa:	68da      	ldr	r2, [r3, #12]
 800abac:	42aa      	cmp	r2, r5
 800abae:	d0f6      	beq.n	800ab9e <tcp_input+0xae6>
 800abb0:	4613      	mov	r3, r2
 800abb2:	e7f7      	b.n	800aba4 <tcp_input+0xaec>
  } else if (flags & TCP_FIN) {
 800abb4:	07d0      	lsls	r0, r2, #31
 800abb6:	f57f ac4a 	bpl.w	800a44e <tcp_input+0x396>
    pcb->tmr = tcp_ticks;
 800abba:	4b28      	ldr	r3, [pc, #160]	; (800ac5c <tcp_input+0xba4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	622b      	str	r3, [r5, #32]
 800abc0:	e445      	b.n	800a44e <tcp_input+0x396>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800abc2:	429a      	cmp	r2, r3
 800abc4:	bf88      	it	hi
 800abc6:	b293      	uxthhi	r3, r2
 800abc8:	e7d8      	b.n	800ab7c <tcp_input+0xac4>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800abca:	2900      	cmp	r1, #0
 800abcc:	f47f af16 	bne.w	800a9fc <tcp_input+0x944>
 800abd0:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <tcp_input+0xb94>)
 800abd2:	f44f 724e 	mov.w	r2, #824	; 0x338
 800abd6:	4922      	ldr	r1, [pc, #136]	; (800ac60 <tcp_input+0xba8>)
 800abd8:	481e      	ldr	r0, [pc, #120]	; (800ac54 <tcp_input+0xb9c>)
 800abda:	f003 fb15 	bl	800e208 <iprintf>
 800abde:	e70d      	b.n	800a9fc <tcp_input+0x944>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800abe0:	e9cd 0301 	strd	r0, r3, [sp, #4]
 800abe4:	9b05      	ldr	r3, [sp, #20]
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	e71f      	b.n	800aa2a <tcp_input+0x972>
            if (err != ERR_ABRT) {
 800abea:	300d      	adds	r0, #13
 800abec:	f43f abdf 	beq.w	800a3ae <tcp_input+0x2f6>
 800abf0:	e759      	b.n	800aaa6 <tcp_input+0x9ee>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <tcp_input+0xb94>)
 800abf4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800abf8:	491a      	ldr	r1, [pc, #104]	; (800ac64 <tcp_input+0xbac>)
 800abfa:	4816      	ldr	r0, [pc, #88]	; (800ac54 <tcp_input+0xb9c>)
 800abfc:	f003 fb04 	bl	800e208 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ac00:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d19d      	bne.n	800ab44 <tcp_input+0xa8c>
 800ac08:	e74d      	b.n	800aaa6 <tcp_input+0x9ee>
          pcb->rtime = -1;
 800ac0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac0e:	862b      	strh	r3, [r5, #48]	; 0x30
 800ac10:	e6df      	b.n	800a9d2 <tcp_input+0x91a>
          rseg = pcb->unsent;
 800ac12:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac14:	b176      	cbz	r6, 800ac34 <tcp_input+0xb7c>
          pcb->unsent = rseg->next;
 800ac16:	6833      	ldr	r3, [r6, #0]
 800ac18:	66eb      	str	r3, [r5, #108]	; 0x6c
 800ac1a:	e6cf      	b.n	800a9bc <tcp_input+0x904>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ac1c:	4b0b      	ldr	r3, [pc, #44]	; (800ac4c <tcp_input+0xb94>)
 800ac1e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ac22:	4911      	ldr	r1, [pc, #68]	; (800ac68 <tcp_input+0xbb0>)
 800ac24:	480b      	ldr	r0, [pc, #44]	; (800ac54 <tcp_input+0xb9c>)
 800ac26:	f003 faef 	bl	800e208 <iprintf>
 800ac2a:	e6bc      	b.n	800a9a6 <tcp_input+0x8ee>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	bf88      	it	hi
 800ac30:	b293      	uxthhi	r3, r2
 800ac32:	e6b1      	b.n	800a998 <tcp_input+0x8e0>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <tcp_input+0xb94>)
 800ac36:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ac3a:	490c      	ldr	r1, [pc, #48]	; (800ac6c <tcp_input+0xbb4>)
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <tcp_input+0xb9c>)
 800ac3e:	f003 fae3 	bl	800e208 <iprintf>
 800ac42:	e7e8      	b.n	800ac16 <tcp_input+0xb5e>
 800ac44:	24010594 	.word	0x24010594
 800ac48:	240105b8 	.word	0x240105b8
 800ac4c:	080108c0 	.word	0x080108c0
 800ac50:	08010b80 	.word	0x08010b80
 800ac54:	0800f0a0 	.word	0x0800f0a0
 800ac58:	08010bac 	.word	0x08010bac
 800ac5c:	24010588 	.word	0x24010588
 800ac60:	08010c08 	.word	0x08010c08
 800ac64:	08010c54 	.word	0x08010c54
 800ac68:	08010c28 	.word	0x08010c28
 800ac6c:	08010c40 	.word	0x08010c40

0800ac70 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ac70:	4a02      	ldr	r2, [pc, #8]	; (800ac7c <tcp_trigger_input_pcb_close+0xc>)
 800ac72:	7813      	ldrb	r3, [r2, #0]
 800ac74:	f043 0310 	orr.w	r3, r3, #16
 800ac78:	7013      	strb	r3, [r2, #0]
}
 800ac7a:	4770      	bx	lr
 800ac7c:	240105b4 	.word	0x240105b4

0800ac80 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	9f08      	ldr	r7, [sp, #32]
 800ac86:	4680      	mov	r8, r0
 800ac88:	460d      	mov	r5, r1
 800ac8a:	4614      	mov	r4, r2
 800ac8c:	461e      	mov	r6, r3
 800ac8e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800ac92:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ac96:	2f00      	cmp	r7, #0
 800ac98:	d033      	beq.n	800ad02 <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ac9a:	42a5      	cmp	r5, r4
 800ac9c:	d20e      	bcs.n	800acbc <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ac9e:	f019 0f02 	tst.w	r9, #2
 800aca2:	d008      	beq.n	800acb6 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800aca4:	f205 51b7 	addw	r1, r5, #1463	; 0x5b7
 800aca8:	f021 0103 	bic.w	r1, r1, #3
 800acac:	428c      	cmp	r4, r1
 800acae:	bf28      	it	cs
 800acb0:	460c      	movcs	r4, r1
 800acb2:	b2a1      	uxth	r1, r4
 800acb4:	e003      	b.n	800acbe <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800acb6:	8b7b      	ldrh	r3, [r7, #26]
 800acb8:	065b      	lsls	r3, r3, #25
 800acba:	d518      	bpl.n	800acee <tcp_pbuf_prealloc+0x6e>
 800acbc:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800acbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acc2:	4640      	mov	r0, r8
 800acc4:	f7fc fda2 	bl	800780c <pbuf_alloc>
  if (p == NULL) {
 800acc8:	4604      	mov	r4, r0
 800acca:	b168      	cbz	r0, 800ace8 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800accc:	6803      	ldr	r3, [r0, #0]
 800acce:	b133      	cbz	r3, 800acde <tcp_pbuf_prealloc+0x5e>
 800acd0:	4b0f      	ldr	r3, [pc, #60]	; (800ad10 <tcp_pbuf_prealloc+0x90>)
 800acd2:	f240 120b 	movw	r2, #267	; 0x10b
 800acd6:	490f      	ldr	r1, [pc, #60]	; (800ad14 <tcp_pbuf_prealloc+0x94>)
 800acd8:	480f      	ldr	r0, [pc, #60]	; (800ad18 <tcp_pbuf_prealloc+0x98>)
 800acda:	f003 fa95 	bl	800e208 <iprintf>
  *oversize = p->len - length;
 800acde:	8963      	ldrh	r3, [r4, #10]
 800ace0:	1b5b      	subs	r3, r3, r5
 800ace2:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ace4:	8125      	strh	r5, [r4, #8]
 800ace6:	8165      	strh	r5, [r4, #10]
  return p;
}
 800ace8:	4620      	mov	r0, r4
 800acea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 800acee:	f1ba 0f00 	cmp.w	sl, #0
 800acf2:	d0d7      	beq.n	800aca4 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 800acf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1d4      	bne.n	800aca4 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 800acfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1d1      	bne.n	800aca4 <tcp_pbuf_prealloc+0x24>
 800ad00:	e7dc      	b.n	800acbc <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ad02:	4b03      	ldr	r3, [pc, #12]	; (800ad10 <tcp_pbuf_prealloc+0x90>)
 800ad04:	22e9      	movs	r2, #233	; 0xe9
 800ad06:	4905      	ldr	r1, [pc, #20]	; (800ad1c <tcp_pbuf_prealloc+0x9c>)
 800ad08:	4803      	ldr	r0, [pc, #12]	; (800ad18 <tcp_pbuf_prealloc+0x98>)
 800ad0a:	f003 fa7d 	bl	800e208 <iprintf>
 800ad0e:	e7c4      	b.n	800ac9a <tcp_pbuf_prealloc+0x1a>
 800ad10:	08010c90 	.word	0x08010c90
 800ad14:	08010ce4 	.word	0x08010ce4
 800ad18:	0800f0a0 	.word	0x0800f0a0
 800ad1c:	08010cc4 	.word	0x08010cc4

0800ad20 <tcp_create_segment>:
{
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	460e      	mov	r6, r1
 800ad26:	f89d a020 	ldrb.w	sl, [sp, #32]
 800ad2a:	4690      	mov	r8, r2
 800ad2c:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ad2e:	4607      	mov	r7, r0
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d04a      	beq.n	800adca <tcp_create_segment+0xaa>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ad34:	2e00      	cmp	r6, #0
 800ad36:	d050      	beq.n	800adda <tcp_create_segment+0xba>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ad38:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ad3c:	2003      	movs	r0, #3
 800ad3e:	f7fc f9af 	bl	80070a0 <memp_malloc>
 800ad42:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ad44:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	d054      	beq.n	800adf6 <tcp_create_segment+0xd6>
  seg->flags = optflags;
 800ad4c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800ad50:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad52:	8932      	ldrh	r2, [r6, #8]
 800ad54:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800ad58:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad5a:	42aa      	cmp	r2, r5
  seg->next = NULL;
 800ad5c:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ad5e:	d32c      	bcc.n	800adba <tcp_create_segment+0x9a>
  seg->len = p->tot_len - optlen;
 800ad60:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad64:	4630      	mov	r0, r6
 800ad66:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800ad68:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ad6a:	f7fc fe6f 	bl	8007a4c <pbuf_add_header>
 800ad6e:	4606      	mov	r6, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d139      	bne.n	800ade8 <tcp_create_segment+0xc8>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad74:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad76:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad78:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad7a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ad7e:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ad82:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ad86:	f7fb fddd 	bl	8006944 <lwip_htons>
 800ad8a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ad8e:	8b38      	ldrh	r0, [r7, #24]
 800ad90:	68e7      	ldr	r7, [r4, #12]
 800ad92:	f7fb fdd7 	bl	8006944 <lwip_htons>
 800ad96:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ad98:	4648      	mov	r0, r9
 800ad9a:	68e7      	ldr	r7, [r4, #12]
 800ad9c:	f7fb fdd6 	bl	800694c <lwip_htonl>
 800ada0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ada2:	ea45 0008 	orr.w	r0, r5, r8
 800ada6:	68e7      	ldr	r7, [r4, #12]
 800ada8:	f7fb fdcc 	bl	8006944 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800adac:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800adae:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800adb0:	749e      	strb	r6, [r3, #18]
 800adb2:	74de      	strb	r6, [r3, #19]
}
 800adb4:	4620      	mov	r0, r4
 800adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800adba:	22b0      	movs	r2, #176	; 0xb0
 800adbc:	4b10      	ldr	r3, [pc, #64]	; (800ae00 <tcp_create_segment+0xe0>)
 800adbe:	4911      	ldr	r1, [pc, #68]	; (800ae04 <tcp_create_segment+0xe4>)
 800adc0:	4811      	ldr	r0, [pc, #68]	; (800ae08 <tcp_create_segment+0xe8>)
 800adc2:	f003 fa21 	bl	800e208 <iprintf>
  seg->len = p->tot_len - optlen;
 800adc6:	8932      	ldrh	r2, [r6, #8]
 800adc8:	e7ca      	b.n	800ad60 <tcp_create_segment+0x40>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800adca:	4b0d      	ldr	r3, [pc, #52]	; (800ae00 <tcp_create_segment+0xe0>)
 800adcc:	22a3      	movs	r2, #163	; 0xa3
 800adce:	490f      	ldr	r1, [pc, #60]	; (800ae0c <tcp_create_segment+0xec>)
 800add0:	480d      	ldr	r0, [pc, #52]	; (800ae08 <tcp_create_segment+0xe8>)
 800add2:	f003 fa19 	bl	800e208 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800add6:	2e00      	cmp	r6, #0
 800add8:	d1ae      	bne.n	800ad38 <tcp_create_segment+0x18>
 800adda:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <tcp_create_segment+0xe0>)
 800addc:	22a4      	movs	r2, #164	; 0xa4
 800adde:	490c      	ldr	r1, [pc, #48]	; (800ae10 <tcp_create_segment+0xf0>)
 800ade0:	4809      	ldr	r0, [pc, #36]	; (800ae08 <tcp_create_segment+0xe8>)
 800ade2:	f003 fa11 	bl	800e208 <iprintf>
 800ade6:	e7a7      	b.n	800ad38 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 800ade8:	4620      	mov	r0, r4
    return NULL;
 800adea:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800adec:	f7fd fad8 	bl	80083a0 <tcp_seg_free>
}
 800adf0:	4620      	mov	r0, r4
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 800adf6:	4630      	mov	r0, r6
 800adf8:	f7fc fecc 	bl	8007b94 <pbuf_free>
    return NULL;
 800adfc:	e7da      	b.n	800adb4 <tcp_create_segment+0x94>
 800adfe:	bf00      	nop
 800ae00:	08010c90 	.word	0x08010c90
 800ae04:	08010d3c 	.word	0x08010d3c
 800ae08:	0800f0a0 	.word	0x0800f0a0
 800ae0c:	08010cf8 	.word	0x08010cf8
 800ae10:	08010d18 	.word	0x08010d18

0800ae14 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae14:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae1a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae20:	2022      	movs	r0, #34	; 0x22
 800ae22:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ae26:	461c      	mov	r4, r3
 800ae28:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800ae2c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800ae30:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ae34:	f7fc fcea 	bl	800780c <pbuf_alloc>
  if (p != NULL) {
 800ae38:	4605      	mov	r5, r0
 800ae3a:	b300      	cbz	r0, 800ae7e <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae3c:	8943      	ldrh	r3, [r0, #10]
 800ae3e:	2b13      	cmp	r3, #19
 800ae40:	d920      	bls.n	800ae84 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 800ae42:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 800ae44:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ae46:	f7fb fd7d 	bl	8006944 <lwip_htons>
 800ae4a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ae4c:	4650      	mov	r0, sl
 800ae4e:	f7fb fd79 	bl	8006944 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800ae52:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800ae54:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800ae56:	4630      	mov	r0, r6
 800ae58:	f7fb fd78 	bl	800694c <lwip_htonl>
 800ae5c:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae5e:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 800ae62:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae64:	f7fb fd6e 	bl	8006944 <lwip_htons>
 800ae68:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 800ae6a:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ae6c:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ae6e:	f7fb fd69 	bl	8006944 <lwip_htons>
    tcphdr->chksum = 0;
 800ae72:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800ae74:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800ae76:	7423      	strb	r3, [r4, #16]
 800ae78:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800ae7a:	74a3      	strb	r3, [r4, #18]
 800ae7c:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800ae7e:	4628      	mov	r0, r5
 800ae80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ae84:	4b03      	ldr	r3, [pc, #12]	; (800ae94 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800ae86:	f240 7223 	movw	r2, #1827	; 0x723
 800ae8a:	4903      	ldr	r1, [pc, #12]	; (800ae98 <tcp_output_alloc_header_common.constprop.0+0x84>)
 800ae8c:	4803      	ldr	r0, [pc, #12]	; (800ae9c <tcp_output_alloc_header_common.constprop.0+0x88>)
 800ae8e:	f003 f9bb 	bl	800e208 <iprintf>
 800ae92:	e7d6      	b.n	800ae42 <tcp_output_alloc_header_common.constprop.0+0x2e>
 800ae94:	08010c90 	.word	0x08010c90
 800ae98:	08010d54 	.word	0x08010d54
 800ae9c:	0800f0a0 	.word	0x0800f0a0

0800aea0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800aea0:	b570      	push	{r4, r5, r6, lr}
 800aea2:	460d      	mov	r5, r1
 800aea4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aea6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800aea8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aeaa:	b190      	cbz	r0, 800aed2 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800aeac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aeae:	2210      	movs	r2, #16
 800aeb0:	8b21      	ldrh	r1, [r4, #24]
 800aeb2:	9302      	str	r3, [sp, #8]
 800aeb4:	e9cd 1200 	strd	r1, r2, [sp]
 800aeb8:	4632      	mov	r2, r6
 800aeba:	4629      	mov	r1, r5
 800aebc:	8ae3      	ldrh	r3, [r4, #22]
 800aebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aec0:	f7ff ffa8 	bl	800ae14 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800aec4:	b118      	cbz	r0, 800aece <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800aec6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800aec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeca:	4413      	add	r3, r2
 800aecc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800aece:	b004      	add	sp, #16
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800aed2:	4b04      	ldr	r3, [pc, #16]	; (800aee4 <tcp_output_alloc_header.constprop.0+0x44>)
 800aed4:	f240 7242 	movw	r2, #1858	; 0x742
 800aed8:	4903      	ldr	r1, [pc, #12]	; (800aee8 <tcp_output_alloc_header.constprop.0+0x48>)
 800aeda:	4804      	ldr	r0, [pc, #16]	; (800aeec <tcp_output_alloc_header.constprop.0+0x4c>)
 800aedc:	f003 f994 	bl	800e208 <iprintf>
 800aee0:	e7e4      	b.n	800aeac <tcp_output_alloc_header.constprop.0+0xc>
 800aee2:	bf00      	nop
 800aee4:	08010c90 	.word	0x08010c90
 800aee8:	08010d84 	.word	0x08010d84
 800aeec:	0800f0a0 	.word	0x0800f0a0

0800aef0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef2:	4604      	mov	r4, r0
 800aef4:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aef6:	460d      	mov	r5, r1
{
 800aef8:	4617      	mov	r7, r2
 800aefa:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800aefc:	b321      	cbz	r1, 800af48 <tcp_output_control_segment+0x58>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800aefe:	b35c      	cbz	r4, 800af58 <tcp_output_control_segment+0x68>
 800af00:	7a20      	ldrb	r0, [r4, #8]
 800af02:	b9a8      	cbnz	r0, 800af30 <tcp_output_control_segment+0x40>
    return ip_route(src, dst);
 800af04:	4630      	mov	r0, r6
 800af06:	f002 f873 	bl	800cff0 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800af0a:	b1a8      	cbz	r0, 800af38 <tcp_output_control_segment+0x48>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800af0c:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800af0e:	7aa4      	ldrb	r4, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800af10:	9400      	str	r4, [sp, #0]
 800af12:	2406      	movs	r4, #6
 800af14:	4632      	mov	r2, r6
 800af16:	4639      	mov	r1, r7
 800af18:	9002      	str	r0, [sp, #8]
 800af1a:	4628      	mov	r0, r5
 800af1c:	9401      	str	r4, [sp, #4]
 800af1e:	f002 f9fd 	bl	800d31c <ip4_output_if>
 800af22:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800af24:	4628      	mov	r0, r5
 800af26:	f7fc fe35 	bl	8007b94 <pbuf_free>
  return err;
}
 800af2a:	4620      	mov	r0, r4
 800af2c:	b005      	add	sp, #20
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return netif_get_by_index(pcb->netif_idx);
 800af30:	f7fc fb0e 	bl	8007550 <netif_get_by_index>
  if (netif == NULL) {
 800af34:	2800      	cmp	r0, #0
 800af36:	d1e9      	bne.n	800af0c <tcp_output_control_segment+0x1c>
    err = ERR_RTE;
 800af38:	f06f 0403 	mvn.w	r4, #3
  pbuf_free(p);
 800af3c:	4628      	mov	r0, r5
 800af3e:	f7fc fe29 	bl	8007b94 <pbuf_free>
}
 800af42:	4620      	mov	r0, r4
 800af44:	b005      	add	sp, #20
 800af46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800af48:	4b07      	ldr	r3, [pc, #28]	; (800af68 <tcp_output_control_segment+0x78>)
 800af4a:	f240 7287 	movw	r2, #1927	; 0x787
 800af4e:	4907      	ldr	r1, [pc, #28]	; (800af6c <tcp_output_control_segment+0x7c>)
 800af50:	4807      	ldr	r0, [pc, #28]	; (800af70 <tcp_output_control_segment+0x80>)
 800af52:	f003 f959 	bl	800e208 <iprintf>
 800af56:	e7d2      	b.n	800aefe <tcp_output_control_segment+0xe>
    return ip_route(src, dst);
 800af58:	4630      	mov	r0, r6
 800af5a:	f002 f849 	bl	800cff0 <ip4_route>
  if (netif == NULL) {
 800af5e:	2800      	cmp	r0, #0
 800af60:	d0ea      	beq.n	800af38 <tcp_output_control_segment+0x48>
      ttl = TCP_TTL;
 800af62:	23ff      	movs	r3, #255	; 0xff
 800af64:	e7d4      	b.n	800af10 <tcp_output_control_segment+0x20>
 800af66:	bf00      	nop
 800af68:	08010c90 	.word	0x08010c90
 800af6c:	08010dac 	.word	0x08010dac
 800af70:	0800f0a0 	.word	0x0800f0a0

0800af74 <tcp_write>:
{
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 800af78:	2400      	movs	r4, #0
{
 800af7a:	b091      	sub	sp, #68	; 0x44
 800af7c:	9107      	str	r1, [sp, #28]
 800af7e:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 800af80:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800af84:	2800      	cmp	r0, #0
 800af86:	f000 8300 	beq.w	800b58a <tcp_write+0x616>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800af8a:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800af8e:	4692      	mov	sl, r2
 800af90:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800af92:	4681      	mov	r9, r0
 800af94:	085b      	lsrs	r3, r3, #1
 800af96:	4293      	cmp	r3, r2
 800af98:	bf28      	it	cs
 800af9a:	4613      	movcs	r3, r2
 800af9c:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf08      	it	eq
 800afa2:	4693      	moveq	fp, r2
  LWIP_ASSERT_CORE_LOCKED();
 800afa4:	f7f8 ff8e 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800afa8:	9b07      	ldr	r3, [sp, #28]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	f000 82e1 	beq.w	800b572 <tcp_write+0x5fe>
  if ((pcb->state != ESTABLISHED) &&
 800afb0:	f899 3014 	ldrb.w	r3, [r9, #20]
      (pcb->state != CLOSE_WAIT) &&
 800afb4:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 800afb6:	2a02      	cmp	r2, #2
 800afb8:	d902      	bls.n	800afc0 <tcp_write+0x4c>
 800afba:	2b07      	cmp	r3, #7
 800afbc:	f040 829d 	bne.w	800b4fa <tcp_write+0x586>
  } else if (len == 0) {
 800afc0:	f1ba 0f00 	cmp.w	sl, #0
 800afc4:	f000 80ec 	beq.w	800b1a0 <tcp_write+0x22c>
  if (len > pcb->snd_buf) {
 800afc8:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800afcc:	4553      	cmp	r3, sl
 800afce:	f0c0 82b7 	bcc.w	800b540 <tcp_write+0x5cc>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800afd2:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800afd6:	2e0f      	cmp	r6, #15
 800afd8:	f200 82b2 	bhi.w	800b540 <tcp_write+0x5cc>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800afdc:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	f000 80d3 	beq.w	800b18c <tcp_write+0x218>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f040 80dc 	bne.w	800b1a4 <tcp_write+0x230>
 800afec:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	f000 8264 	beq.w	800b4c0 <tcp_write+0x54c>
 800aff8:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800affa:	461a      	mov	r2, r3
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1fb      	bne.n	800affa <tcp_write+0x86>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b002:	7a94      	ldrb	r4, [r2, #10]
 800b004:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b006:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b008:	00a4      	lsls	r4, r4, #2
 800b00a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b00c:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b010:	191a      	adds	r2, r3, r4
 800b012:	4593      	cmp	fp, r2
 800b014:	f2c0 81a7 	blt.w	800b366 <tcp_write+0x3f2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b018:	ebab 0404 	sub.w	r4, fp, r4
 800b01c:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 800b01e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b022:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 800b024:	930a      	str	r3, [sp, #40]	; 0x28
 800b026:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 80cf 	beq.w	800b1ce <tcp_write+0x25a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b030:	42a3      	cmp	r3, r4
 800b032:	f200 818b 	bhi.w	800b34c <tcp_write+0x3d8>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b036:	45a2      	cmp	sl, r4
 800b038:	4653      	mov	r3, sl
 800b03a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b03c:	bf28      	it	cs
 800b03e:	4623      	movcs	r3, r4
 800b040:	4293      	cmp	r3, r2
 800b042:	bf28      	it	cs
 800b044:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 800b046:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 800b048:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b04a:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 800b04c:	b292      	uxth	r2, r2
      space -= oversize_used;
 800b04e:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800b050:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b054:	2a00      	cmp	r2, #0
 800b056:	f000 8184 	beq.w	800b362 <tcp_write+0x3ee>
 800b05a:	459a      	cmp	sl, r3
 800b05c:	f000 8181 	beq.w	800b362 <tcp_write+0x3ee>
 800b060:	4bb2      	ldr	r3, [pc, #712]	; (800b32c <tcp_write+0x3b8>)
 800b062:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b066:	49b2      	ldr	r1, [pc, #712]	; (800b330 <tcp_write+0x3bc>)
 800b068:	48b2      	ldr	r0, [pc, #712]	; (800b334 <tcp_write+0x3c0>)
 800b06a:	f003 f8cd 	bl	800e208 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b070:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b072:	459a      	cmp	sl, r3
 800b074:	f200 80b0 	bhi.w	800b1d8 <tcp_write+0x264>
  struct pbuf *concat_p = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b07c:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 800b07e:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 800b080:	45a2      	cmp	sl, r4
 800b082:	f240 80ee 	bls.w	800b262 <tcp_write+0x2ee>
 800b086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b088:	f04f 0800 	mov.w	r8, #0
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	f8cd 8014 	str.w	r8, [sp, #20]
 800b094:	9308      	str	r3, [sp, #32]
 800b096:	4643      	mov	r3, r8
 800b098:	46d8      	mov	r8, fp
 800b09a:	469b      	mov	fp, r3
 800b09c:	e042      	b.n	800b124 <tcp_write+0x1b0>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b09e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f040 80f0 	bne.w	800b288 <tcp_write+0x314>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	2036      	movs	r0, #54	; 0x36
 800b0ae:	f7fc fbad 	bl	800780c <pbuf_alloc>
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	f000 8100 	beq.w	800b2b8 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0b8:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0ba:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0bc:	9006      	str	r0, [sp, #24]
 800b0be:	4422      	add	r2, r4
 800b0c0:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0c6:	2036      	movs	r0, #54	; 0x36
 800b0c8:	f7fc fba0 	bl	800780c <pbuf_alloc>
 800b0cc:	9b06      	ldr	r3, [sp, #24]
 800b0ce:	4607      	mov	r7, r0
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	f000 8196 	beq.w	800b402 <tcp_write+0x48e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	f7fc fd98 	bl	8007c0c <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f7fc fd6d 	bl	8007bbc <pbuf_clen>
 800b0e2:	4430      	add	r0, r6
 800b0e4:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b0e6:	2e10      	cmp	r6, #16
 800b0e8:	d84a      	bhi.n	800b180 <tcp_write+0x20c>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b0ea:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	4648      	mov	r0, r9
 800b0f4:	4423      	add	r3, r4
 800b0f6:	9200      	str	r2, [sp, #0]
 800b0f8:	f7ff fe12 	bl	800ad20 <tcp_create_segment>
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	2800      	cmp	r0, #0
 800b100:	f000 80da 	beq.w	800b2b8 <tcp_write+0x344>
    if (queue == NULL) {
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80a3 	beq.w	800b252 <tcp_write+0x2de>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b10c:	f1bb 0f00 	cmp.w	fp, #0
 800b110:	f000 80c2 	beq.w	800b298 <tcp_write+0x324>
    pos += seglen;
 800b114:	442c      	add	r4, r5
      prev_seg->next = seg;
 800b116:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 800b11a:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800b11c:	45a2      	cmp	sl, r4
 800b11e:	f240 809e 	bls.w	800b25e <tcp_write+0x2ea>
 800b122:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 800b124:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b128:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b12a:	b2ad      	uxth	r5, r5
 800b12c:	4545      	cmp	r5, r8
 800b12e:	bf28      	it	cs
 800b130:	4645      	movcs	r5, r8
 800b132:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0b2      	beq.n	800b09e <tcp_write+0x12a>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13a:	4642      	mov	r2, r8
 800b13c:	4629      	mov	r1, r5
 800b13e:	2036      	movs	r0, #54	; 0x36
 800b140:	e9cd 9300 	strd	r9, r3, [sp]
 800b144:	9b05      	ldr	r3, [sp, #20]
 800b146:	fab3 f383 	clz	r3, r3
 800b14a:	095b      	lsrs	r3, r3, #5
 800b14c:	9302      	str	r3, [sp, #8]
 800b14e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b152:	f7ff fd95 	bl	800ac80 <tcp_pbuf_prealloc>
 800b156:	4607      	mov	r7, r0
 800b158:	2800      	cmp	r0, #0
 800b15a:	f000 80ad 	beq.w	800b2b8 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b15e:	8943      	ldrh	r3, [r0, #10]
 800b160:	42ab      	cmp	r3, r5
 800b162:	f0c0 80a1 	bcc.w	800b2a8 <tcp_write+0x334>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b166:	9b07      	ldr	r3, [sp, #28]
 800b168:	462a      	mov	r2, r5
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	1919      	adds	r1, r3, r4
 800b16e:	f002 ffa0 	bl	800e0b2 <memcpy>
    queuelen += pbuf_clen(p);
 800b172:	4638      	mov	r0, r7
 800b174:	f7fc fd22 	bl	8007bbc <pbuf_clen>
 800b178:	4430      	add	r0, r6
 800b17a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b17c:	2e10      	cmp	r6, #16
 800b17e:	d9b4      	bls.n	800b0ea <tcp_write+0x176>
      pbuf_free(p);
 800b180:	4638      	mov	r0, r7
 800b182:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b186:	f7fc fd05 	bl	8007b94 <pbuf_free>
      goto memerr;
 800b18a:	e097      	b.n	800b2bc <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80b6 	beq.w	800b2fe <tcp_write+0x38a>
 800b192:	4b66      	ldr	r3, [pc, #408]	; (800b32c <tcp_write+0x3b8>)
 800b194:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b198:	4967      	ldr	r1, [pc, #412]	; (800b338 <tcp_write+0x3c4>)
 800b19a:	4866      	ldr	r0, [pc, #408]	; (800b334 <tcp_write+0x3c0>)
 800b19c:	f003 f834 	bl	800e208 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b1a0:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b1a4:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 800b1a8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ac:	f47f af24 	bne.w	800aff8 <tcp_write+0x84>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b1b0:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f040 80ac 	bne.w	800b312 <tcp_write+0x39e>
  while (pos < len) {
 800b1ba:	f1ba 0f00 	cmp.w	sl, #0
 800b1be:	f000 81c8 	beq.w	800b552 <tcp_write+0x5de>
          extendlen = seglen;
 800b1c2:	2400      	movs	r4, #0
 800b1c4:	940d      	str	r4, [sp, #52]	; 0x34
 800b1c6:	940c      	str	r4, [sp, #48]	; 0x30
 800b1c8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800b1cc:	e75b      	b.n	800b086 <tcp_write+0x112>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b1ce:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b1d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d2:	459a      	cmp	sl, r3
 800b1d4:	f67f af50 	bls.w	800b078 <tcp_write+0x104>
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	f43f af4d 	beq.w	800b078 <tcp_write+0x104>
 800b1de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b1e0:	8912      	ldrh	r2, [r2, #8]
 800b1e2:	920d      	str	r2, [sp, #52]	; 0x34
 800b1e4:	2a00      	cmp	r2, #0
 800b1e6:	f000 809c 	beq.w	800b322 <tcp_write+0x3ae>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1ea:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1f0:	42a7      	cmp	r7, r4
 800b1f2:	bfa8      	it	ge
 800b1f4:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1f6:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b1f8:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b1fa:	f100 8188 	bmi.w	800b50e <tcp_write+0x59a>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	4613      	mov	r3, r2
 800b204:	6812      	ldr	r2, [r2, #0]
 800b206:	2a00      	cmp	r2, #0
 800b208:	d1fb      	bne.n	800b202 <tcp_write+0x28e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b20a:	920c      	str	r2, [sp, #48]	; 0x30
 800b20c:	7b1a      	ldrb	r2, [r3, #12]
 800b20e:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b212:	d106      	bne.n	800b222 <tcp_write+0x2ae>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b214:	895a      	ldrh	r2, [r3, #10]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b21a:	9a07      	ldr	r2, [sp, #28]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	f000 8168 	beq.w	800b4f2 <tcp_write+0x57e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b222:	2201      	movs	r2, #1
 800b224:	4629      	mov	r1, r5
 800b226:	2000      	movs	r0, #0
 800b228:	f7fc faf0 	bl	800780c <pbuf_alloc>
 800b22c:	900c      	str	r0, [sp, #48]	; 0x30
 800b22e:	2800      	cmp	r0, #0
 800b230:	f000 813f 	beq.w	800b4b2 <tcp_write+0x53e>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b234:	9b07      	ldr	r3, [sp, #28]
 800b236:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b238:	440b      	add	r3, r1
 800b23a:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b23c:	f7fc fcbe 	bl	8007bbc <pbuf_clen>
 800b240:	4406      	add	r6, r0
  u16_t extendlen = 0;
 800b242:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 800b244:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b246:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 800b248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b24a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b24c:	18ec      	adds	r4, r5, r3
 800b24e:	b2a4      	uxth	r4, r4
 800b250:	e716      	b.n	800b080 <tcp_write+0x10c>
    pos += seglen;
 800b252:	442c      	add	r4, r5
 800b254:	9005      	str	r0, [sp, #20]
 800b256:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800b258:	45a2      	cmp	sl, r4
 800b25a:	f63f af62 	bhi.w	800b122 <tcp_write+0x1ae>
 800b25e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 800b262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 80dc 	beq.w	800b422 <tcp_write+0x4ae>
    for (p = last_unsent->p; p; p = p->next) {
 800b26a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b26c:	6854      	ldr	r4, [r2, #4]
 800b26e:	2c00      	cmp	r4, #0
 800b270:	f000 8091 	beq.w	800b396 <tcp_write+0x422>
 800b274:	469b      	mov	fp, r3
 800b276:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 800b278:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 800b27a:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 800b27c:	445b      	add	r3, fp
 800b27e:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 800b280:	2a00      	cmp	r2, #0
 800b282:	d07a      	beq.n	800b37a <tcp_write+0x406>
  u16_t extendlen = 0;
 800b284:	4614      	mov	r4, r2
 800b286:	e7f7      	b.n	800b278 <tcp_write+0x304>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b288:	4b28      	ldr	r3, [pc, #160]	; (800b32c <tcp_write+0x3b8>)
 800b28a:	f240 2271 	movw	r2, #625	; 0x271
 800b28e:	492b      	ldr	r1, [pc, #172]	; (800b33c <tcp_write+0x3c8>)
 800b290:	4828      	ldr	r0, [pc, #160]	; (800b334 <tcp_write+0x3c0>)
 800b292:	f002 ffb9 	bl	800e208 <iprintf>
 800b296:	e707      	b.n	800b0a8 <tcp_write+0x134>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b298:	4b24      	ldr	r3, [pc, #144]	; (800b32c <tcp_write+0x3b8>)
 800b29a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b29e:	4928      	ldr	r1, [pc, #160]	; (800b340 <tcp_write+0x3cc>)
 800b2a0:	4824      	ldr	r0, [pc, #144]	; (800b334 <tcp_write+0x3c0>)
 800b2a2:	f002 ffb1 	bl	800e208 <iprintf>
 800b2a6:	e735      	b.n	800b114 <tcp_write+0x1a0>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b2a8:	4b20      	ldr	r3, [pc, #128]	; (800b32c <tcp_write+0x3b8>)
 800b2aa:	f240 2266 	movw	r2, #614	; 0x266
 800b2ae:	4925      	ldr	r1, [pc, #148]	; (800b344 <tcp_write+0x3d0>)
 800b2b0:	4820      	ldr	r0, [pc, #128]	; (800b334 <tcp_write+0x3c0>)
 800b2b2:	f002 ffa9 	bl	800e208 <iprintf>
 800b2b6:	e756      	b.n	800b166 <tcp_write+0x1f2>
 800b2b8:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2bc:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800b2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2c4:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800b2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ca:	b113      	cbz	r3, 800b2d2 <tcp_write+0x35e>
    pbuf_free(concat_p);
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7fc fc61 	bl	8007b94 <pbuf_free>
  if (queue != NULL) {
 800b2d2:	f1b8 0f00 	cmp.w	r8, #0
 800b2d6:	d002      	beq.n	800b2de <tcp_write+0x36a>
    tcp_segs_free(queue);
 800b2d8:	4640      	mov	r0, r8
 800b2da:	f7fd f84f 	bl	800837c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b2de:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 800b2e2:	b13b      	cbz	r3, 800b2f4 <tcp_write+0x380>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b2e4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800b2e8:	b923      	cbnz	r3, 800b2f4 <tcp_write+0x380>
 800b2ea:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 808d 	beq.w	800b40e <tcp_write+0x49a>
  return ERR_MEM;
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b2f8:	b011      	add	sp, #68	; 0x44
 800b2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2fe:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b302:	2b00      	cmp	r3, #0
 800b304:	f47f af45 	bne.w	800b192 <tcp_write+0x21e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b308:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f43f af58 	beq.w	800b1c2 <tcp_write+0x24e>
 800b312:	4b06      	ldr	r3, [pc, #24]	; (800b32c <tcp_write+0x3b8>)
 800b314:	f240 224a 	movw	r2, #586	; 0x24a
 800b318:	490b      	ldr	r1, [pc, #44]	; (800b348 <tcp_write+0x3d4>)
 800b31a:	4806      	ldr	r0, [pc, #24]	; (800b334 <tcp_write+0x3c0>)
 800b31c:	f002 ff74 	bl	800e208 <iprintf>
 800b320:	e74b      	b.n	800b1ba <tcp_write+0x246>
  struct pbuf *concat_p = NULL;
 800b322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b326:	930c      	str	r3, [sp, #48]	; 0x30
 800b328:	e6ad      	b.n	800b086 <tcp_write+0x112>
 800b32a:	bf00      	nop
 800b32c:	08010c90 	.word	0x08010c90
 800b330:	08010ecc 	.word	0x08010ecc
 800b334:	0800f0a0 	.word	0x0800f0a0
 800b338:	08010e60 	.word	0x08010e60
 800b33c:	08010f88 	.word	0x08010f88
 800b340:	08010f98 	.word	0x08010f98
 800b344:	08010f48 	.word	0x08010f48
 800b348:	08010f18 	.word	0x08010f18
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b34c:	4b94      	ldr	r3, [pc, #592]	; (800b5a0 <tcp_write+0x62c>)
 800b34e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b352:	4994      	ldr	r1, [pc, #592]	; (800b5a4 <tcp_write+0x630>)
 800b354:	4894      	ldr	r0, [pc, #592]	; (800b5a8 <tcp_write+0x634>)
 800b356:	f002 ff57 	bl	800e208 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b35a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b35e:	930a      	str	r3, [sp, #40]	; 0x28
 800b360:	e669      	b.n	800b036 <tcp_write+0xc2>
 800b362:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800b364:	e734      	b.n	800b1d0 <tcp_write+0x25c>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b366:	4b8e      	ldr	r3, [pc, #568]	; (800b5a0 <tcp_write+0x62c>)
 800b368:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b36c:	498f      	ldr	r1, [pc, #572]	; (800b5ac <tcp_write+0x638>)
 800b36e:	488e      	ldr	r0, [pc, #568]	; (800b5a8 <tcp_write+0x634>)
 800b370:	f002 ff4a 	bl	800e208 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b376:	891b      	ldrh	r3, [r3, #8]
 800b378:	e64e      	b.n	800b018 <tcp_write+0xa4>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b37a:	8963      	ldrh	r3, [r4, #10]
 800b37c:	465a      	mov	r2, fp
 800b37e:	6860      	ldr	r0, [r4, #4]
 800b380:	4629      	mov	r1, r5
 800b382:	4418      	add	r0, r3
 800b384:	f002 fe95 	bl	800e0b2 <memcpy>
        p->len += oversize_used;
 800b388:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b38a:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 800b38c:	445b      	add	r3, fp
 800b38e:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b390:	2a00      	cmp	r2, #0
 800b392:	f47f af77 	bne.w	800b284 <tcp_write+0x310>
    last_unsent->len += oversize_used;
 800b396:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b398:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b39a:	8913      	ldrh	r3, [r2, #8]
 800b39c:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 800b39e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 800b3a2:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 800b3a4:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d061      	beq.n	800b472 <tcp_write+0x4fe>
    pbuf_cat(last_unsent->p, concat_p);
 800b3ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b3b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3b2:	6860      	ldr	r0, [r4, #4]
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	f7fc fc29 	bl	8007c0c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b3ba:	892a      	ldrh	r2, [r5, #8]
 800b3bc:	8923      	ldrh	r3, [r4, #8]
 800b3be:	4413      	add	r3, r2
 800b3c0:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800b3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c4:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 800b3c8:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 800b3cc:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 800b3d0:	4453      	add	r3, sl
 800b3d2:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b3d6:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 800b3da:	eba3 0a0a 	sub.w	sl, r3, sl
 800b3de:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 800b3e2:	b11e      	cbz	r6, 800b3ec <tcp_write+0x478>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b3e4:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d036      	beq.n	800b45a <tcp_write+0x4e6>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b3ec:	b12f      	cbz	r7, 800b3fa <tcp_write+0x486>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	b11b      	cbz	r3, 800b3fa <tcp_write+0x486>
 800b3f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f4:	f012 0502 	ands.w	r5, r2, #2
 800b3f8:	d025      	beq.n	800b446 <tcp_write+0x4d2>
  return ERR_OK;
 800b3fa:	2000      	movs	r0, #0
}
 800b3fc:	b011      	add	sp, #68	; 0x44
 800b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 800b402:	4618      	mov	r0, r3
 800b404:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b408:	f7fc fbc4 	bl	8007b94 <pbuf_free>
        goto memerr;
 800b40c:	e756      	b.n	800b2bc <tcp_write+0x348>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b40e:	4b64      	ldr	r3, [pc, #400]	; (800b5a0 <tcp_write+0x62c>)
 800b410:	f240 3227 	movw	r2, #807	; 0x327
 800b414:	4966      	ldr	r1, [pc, #408]	; (800b5b0 <tcp_write+0x63c>)
 800b416:	4864      	ldr	r0, [pc, #400]	; (800b5a8 <tcp_write+0x634>)
 800b418:	f002 fef6 	bl	800e208 <iprintf>
  return ERR_MEM;
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e76a      	b.n	800b2f8 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800b422:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b426:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b42a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d051      	beq.n	800b4d4 <tcp_write+0x560>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b430:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b432:	2b00      	cmp	r3, #0
 800b434:	d1bb      	bne.n	800b3ae <tcp_write+0x43a>
 800b436:	4b5a      	ldr	r3, [pc, #360]	; (800b5a0 <tcp_write+0x62c>)
 800b438:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b43c:	495d      	ldr	r1, [pc, #372]	; (800b5b4 <tcp_write+0x640>)
 800b43e:	485a      	ldr	r0, [pc, #360]	; (800b5a8 <tcp_write+0x634>)
 800b440:	f002 fee2 	bl	800e208 <iprintf>
 800b444:	e7b3      	b.n	800b3ae <tcp_write+0x43a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b446:	2008      	movs	r0, #8
 800b448:	899c      	ldrh	r4, [r3, #12]
 800b44a:	f7fb fa7b 	bl	8006944 <lwip_htons>
 800b44e:	4602      	mov	r2, r0
 800b450:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 800b452:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b454:	4314      	orrs	r4, r2
 800b456:	819c      	strh	r4, [r3, #12]
 800b458:	e74e      	b.n	800b2f8 <tcp_write+0x384>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b45a:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1c4      	bne.n	800b3ec <tcp_write+0x478>
 800b462:	4b4f      	ldr	r3, [pc, #316]	; (800b5a0 <tcp_write+0x62c>)
 800b464:	f240 3212 	movw	r2, #786	; 0x312
 800b468:	4951      	ldr	r1, [pc, #324]	; (800b5b0 <tcp_write+0x63c>)
 800b46a:	484f      	ldr	r0, [pc, #316]	; (800b5a8 <tcp_write+0x634>)
 800b46c:	f002 fecc 	bl	800e208 <iprintf>
 800b470:	e7bc      	b.n	800b3ec <tcp_write+0x478>
  } else if (extendlen > 0) {
 800b472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b474:	2b00      	cmp	r3, #0
 800b476:	d0a4      	beq.n	800b3c2 <tcp_write+0x44e>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b47a:	6859      	ldr	r1, [r3, #4]
 800b47c:	2900      	cmp	r1, #0
 800b47e:	d02e      	beq.n	800b4de <tcp_write+0x56a>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b480:	680a      	ldr	r2, [r1, #0]
 800b482:	2a00      	cmp	r2, #0
 800b484:	d07f      	beq.n	800b586 <tcp_write+0x612>
 800b486:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b488:	e000      	b.n	800b48c <tcp_write+0x518>
 800b48a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 800b48c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b48e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 800b490:	4423      	add	r3, r4
 800b492:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b494:	4611      	mov	r1, r2
 800b496:	2800      	cmp	r0, #0
 800b498:	d1f7      	bne.n	800b48a <tcp_write+0x516>
    p->tot_len += extendlen;
 800b49a:	8913      	ldrh	r3, [r2, #8]
 800b49c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b49e:	440b      	add	r3, r1
 800b4a0:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800b4a2:	8953      	ldrh	r3, [r2, #10]
 800b4a4:	440b      	add	r3, r1
 800b4a6:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800b4a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4aa:	8913      	ldrh	r3, [r2, #8]
 800b4ac:	440b      	add	r3, r1
 800b4ae:	8113      	strh	r3, [r2, #8]
 800b4b0:	e787      	b.n	800b3c2 <tcp_write+0x44e>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4b2:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 800b4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ba:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 800b4be:	e70e      	b.n	800b2de <tcp_write+0x36a>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b4c0:	4b37      	ldr	r3, [pc, #220]	; (800b5a0 <tcp_write+0x62c>)
 800b4c2:	f240 1255 	movw	r2, #341	; 0x155
 800b4c6:	493c      	ldr	r1, [pc, #240]	; (800b5b8 <tcp_write+0x644>)
 800b4c8:	4837      	ldr	r0, [pc, #220]	; (800b5a8 <tcp_write+0x634>)
 800b4ca:	f002 fe9d 	bl	800e208 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b4ce:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 800b4d2:	e667      	b.n	800b1a4 <tcp_write+0x230>
  } else if (extendlen > 0) {
 800b4d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4d6:	b19b      	cbz	r3, 800b500 <tcp_write+0x58c>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1cc      	bne.n	800b478 <tcp_write+0x504>
 800b4de:	4b30      	ldr	r3, [pc, #192]	; (800b5a0 <tcp_write+0x62c>)
 800b4e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b4e4:	4935      	ldr	r1, [pc, #212]	; (800b5bc <tcp_write+0x648>)
 800b4e6:	4830      	ldr	r0, [pc, #192]	; (800b5a8 <tcp_write+0x634>)
 800b4e8:	f002 fe8e 	bl	800e208 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ee:	6859      	ldr	r1, [r3, #4]
 800b4f0:	e7c6      	b.n	800b480 <tcp_write+0x50c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b4f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f4:	bba3      	cbnz	r3, 800b560 <tcp_write+0x5ec>
          extendlen = seglen;
 800b4f6:	950d      	str	r5, [sp, #52]	; 0x34
 800b4f8:	e6a6      	b.n	800b248 <tcp_write+0x2d4>
    return ERR_CONN;
 800b4fa:	f06f 000a 	mvn.w	r0, #10
 800b4fe:	e6fb      	b.n	800b2f8 <tcp_write+0x384>
  if (last_unsent == NULL) {
 800b500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	f47f af5d 	bne.w	800b3c2 <tcp_write+0x44e>
    pcb->unsent = queue;
 800b508:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 800b50c:	e75c      	b.n	800b3c8 <tcp_write+0x454>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b50e:	e9cd 9300 	strd	r9, r3, [sp]
 800b512:	2301      	movs	r3, #1
 800b514:	4622      	mov	r2, r4
 800b516:	4629      	mov	r1, r5
 800b518:	2000      	movs	r0, #0
 800b51a:	9302      	str	r3, [sp, #8]
 800b51c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b520:	f7ff fbae 	bl	800ac80 <tcp_pbuf_prealloc>
 800b524:	4603      	mov	r3, r0
 800b526:	4604      	mov	r4, r0
 800b528:	900c      	str	r0, [sp, #48]	; 0x30
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d0c1      	beq.n	800b4b2 <tcp_write+0x53e>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b52e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b530:	462a      	mov	r2, r5
 800b532:	9907      	ldr	r1, [sp, #28]
 800b534:	4401      	add	r1, r0
 800b536:	6858      	ldr	r0, [r3, #4]
 800b538:	f002 fdbb 	bl	800e0b2 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b53c:	4620      	mov	r0, r4
 800b53e:	e67d      	b.n	800b23c <tcp_write+0x2c8>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b540:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b54c:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 800b550:	e6d2      	b.n	800b2f8 <tcp_write+0x384>
  pcb->unsent_oversize = oversize;
 800b552:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b556:	46d0      	mov	r8, sl
 800b558:	4657      	mov	r7, sl
 800b55a:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 800b55e:	e7d3      	b.n	800b508 <tcp_write+0x594>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b560:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <tcp_write+0x62c>)
 800b562:	f240 2231 	movw	r2, #561	; 0x231
 800b566:	4916      	ldr	r1, [pc, #88]	; (800b5c0 <tcp_write+0x64c>)
 800b568:	480f      	ldr	r0, [pc, #60]	; (800b5a8 <tcp_write+0x634>)
 800b56a:	f002 fe4d 	bl	800e208 <iprintf>
          extendlen = seglen;
 800b56e:	950d      	str	r5, [sp, #52]	; 0x34
 800b570:	e66a      	b.n	800b248 <tcp_write+0x2d4>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b572:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <tcp_write+0x62c>)
 800b574:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b578:	4912      	ldr	r1, [pc, #72]	; (800b5c4 <tcp_write+0x650>)
 800b57a:	480b      	ldr	r0, [pc, #44]	; (800b5a8 <tcp_write+0x634>)
 800b57c:	f002 fe44 	bl	800e208 <iprintf>
 800b580:	f06f 000f 	mvn.w	r0, #15
 800b584:	e6b8      	b.n	800b2f8 <tcp_write+0x384>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b586:	460a      	mov	r2, r1
 800b588:	e787      	b.n	800b49a <tcp_write+0x526>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b58a:	4b05      	ldr	r3, [pc, #20]	; (800b5a0 <tcp_write+0x62c>)
 800b58c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b590:	490d      	ldr	r1, [pc, #52]	; (800b5c8 <tcp_write+0x654>)
 800b592:	4805      	ldr	r0, [pc, #20]	; (800b5a8 <tcp_write+0x634>)
 800b594:	f002 fe38 	bl	800e208 <iprintf>
 800b598:	f06f 000f 	mvn.w	r0, #15
 800b59c:	e6ac      	b.n	800b2f8 <tcp_write+0x384>
 800b59e:	bf00      	nop
 800b5a0:	08010c90 	.word	0x08010c90
 800b5a4:	08010eac 	.word	0x08010eac
 800b5a8:	0800f0a0 	.word	0x0800f0a0
 800b5ac:	08010e94 	.word	0x08010e94
 800b5b0:	0801101c 	.word	0x0801101c
 800b5b4:	08010fac 	.word	0x08010fac
 800b5b8:	08010e24 	.word	0x08010e24
 800b5bc:	08010fe4 	.word	0x08010fe4
 800b5c0:	08010eec 	.word	0x08010eec
 800b5c4:	08010df0 	.word	0x08010df0
 800b5c8:	08010dd8 	.word	0x08010dd8

0800b5cc <tcp_split_unsent_seg>:
{
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b5d0:	4605      	mov	r5, r0
{
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	f000 80a7 	beq.w	800b72a <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 800b5dc:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800b5de:	b376      	cbz	r6, 800b63e <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 800b5e0:	2c00      	cmp	r4, #0
 800b5e2:	f000 80b3 	beq.w	800b74c <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 800b5e6:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b5ea:	45a1      	cmp	r9, r4
 800b5ec:	f240 8099 	bls.w	800b722 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b5f0:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800b5f2:	42a3      	cmp	r3, r4
 800b5f4:	d328      	bcc.n	800b648 <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 800b5f6:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 800b5fa:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b5fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b602:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b604:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 800b608:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b60c:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b610:	eb08 010b 	add.w	r1, r8, fp
 800b614:	b289      	uxth	r1, r1
 800b616:	f7fc f8f9 	bl	800780c <pbuf_alloc>
  if (p == NULL) {
 800b61a:	4607      	mov	r7, r0
 800b61c:	b178      	cbz	r0, 800b63e <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 800b61e:	6870      	ldr	r0, [r6, #4]
 800b620:	8932      	ldrh	r2, [r6, #8]
 800b622:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b624:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b626:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b628:	4642      	mov	r2, r8
 800b62a:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 800b62c:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b62e:	b29b      	uxth	r3, r3
 800b630:	f7fc fb44 	bl	8007cbc <pbuf_copy_partial>
 800b634:	4540      	cmp	r0, r8
 800b636:	d01d      	beq.n	800b674 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 800b638:	4638      	mov	r0, r7
 800b63a:	f7fc faab 	bl	8007b94 <pbuf_free>
  return ERR_MEM;
 800b63e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b642:	b003      	add	sp, #12
 800b644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b648:	4b45      	ldr	r3, [pc, #276]	; (800b760 <tcp_split_unsent_seg+0x194>)
 800b64a:	f240 325b 	movw	r2, #859	; 0x35b
 800b64e:	4945      	ldr	r1, [pc, #276]	; (800b764 <tcp_split_unsent_seg+0x198>)
 800b650:	4845      	ldr	r0, [pc, #276]	; (800b768 <tcp_split_unsent_seg+0x19c>)
 800b652:	f002 fdd9 	bl	800e208 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b656:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b65a:	f1b9 0f00 	cmp.w	r9, #0
 800b65e:	d1ca      	bne.n	800b5f6 <tcp_split_unsent_seg+0x2a>
 800b660:	4b3f      	ldr	r3, [pc, #252]	; (800b760 <tcp_split_unsent_seg+0x194>)
 800b662:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b666:	4941      	ldr	r1, [pc, #260]	; (800b76c <tcp_split_unsent_seg+0x1a0>)
 800b668:	483f      	ldr	r0, [pc, #252]	; (800b768 <tcp_split_unsent_seg+0x19c>)
 800b66a:	f002 fdcd 	bl	800e208 <iprintf>
  remainder = useg->len - split;
 800b66e:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 800b672:	e7c0      	b.n	800b5f6 <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b674:	68f3      	ldr	r3, [r6, #12]
 800b676:	8998      	ldrh	r0, [r3, #12]
 800b678:	f7fb f964 	bl	8006944 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b67c:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b680:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 800b684:	d159      	bne.n	800b73a <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b686:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 800b68a:	f018 0f01 	tst.w	r8, #1
 800b68e:	d003      	beq.n	800b698 <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 800b690:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800b694:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b698:	68f3      	ldr	r3, [r6, #12]
 800b69a:	6858      	ldr	r0, [r3, #4]
 800b69c:	f7fb f956 	bl	800694c <lwip_htonl>
 800b6a0:	f8cd a000 	str.w	sl, [sp]
 800b6a4:	1823      	adds	r3, r4, r0
 800b6a6:	465a      	mov	r2, fp
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	f7ff fb38 	bl	800ad20 <tcp_create_segment>
  if (seg == NULL) {
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d0c0      	beq.n	800b638 <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6b6:	6870      	ldr	r0, [r6, #4]
 800b6b8:	eba4 0409 	sub.w	r4, r4, r9
 800b6bc:	f7fc fa7e 	bl	8007bbc <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6c0:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6c2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b6c6:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6c8:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6ca:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b6d0:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b6d4:	b289      	uxth	r1, r1
 800b6d6:	f7fc f961 	bl	800799c <pbuf_realloc>
  useg->len -= remainder;
 800b6da:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6dc:	4640      	mov	r0, r8
  useg->len -= remainder;
 800b6de:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6e0:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 800b6e2:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6e4:	899c      	ldrh	r4, [r3, #12]
 800b6e6:	f7fb f92d 	bl	8006944 <lwip_htons>
 800b6ea:	68f3      	ldr	r3, [r6, #12]
 800b6ec:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6ee:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b6f0:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b6f2:	f7fc fa63 	bl	8007bbc <pbuf_clen>
 800b6f6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b6fa:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b6fc:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b700:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b704:	f7fc fa5a 	bl	8007bbc <pbuf_clen>
 800b708:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800b70c:	4418      	add	r0, r3
  seg->next = useg->next;
 800b70e:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b710:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800b714:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 800b718:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 800b71c:	f8da 3000 	ldr.w	r3, [sl]
 800b720:	b183      	cbz	r3, 800b744 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 800b722:	2000      	movs	r0, #0
}
 800b724:	b003      	add	sp, #12
 800b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b72a:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <tcp_split_unsent_seg+0x194>)
 800b72c:	f240 324b 	movw	r2, #843	; 0x34b
 800b730:	490f      	ldr	r1, [pc, #60]	; (800b770 <tcp_split_unsent_seg+0x1a4>)
 800b732:	480d      	ldr	r0, [pc, #52]	; (800b768 <tcp_split_unsent_seg+0x19c>)
 800b734:	f002 fd68 	bl	800e208 <iprintf>
 800b738:	e750      	b.n	800b5dc <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 800b73a:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800b73e:	f04f 0b08 	mov.w	fp, #8
 800b742:	e7a2      	b.n	800b68a <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 800b744:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 800b746:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800b74a:	e77a      	b.n	800b642 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <tcp_split_unsent_seg+0x194>)
 800b74e:	f240 3253 	movw	r2, #851	; 0x353
 800b752:	4908      	ldr	r1, [pc, #32]	; (800b774 <tcp_split_unsent_seg+0x1a8>)
 800b754:	4804      	ldr	r0, [pc, #16]	; (800b768 <tcp_split_unsent_seg+0x19c>)
 800b756:	f002 fd57 	bl	800e208 <iprintf>
    return ERR_VAL;
 800b75a:	f06f 0005 	mvn.w	r0, #5
 800b75e:	e770      	b.n	800b642 <tcp_split_unsent_seg+0x76>
 800b760:	08010c90 	.word	0x08010c90
 800b764:	08011084 	.word	0x08011084
 800b768:	0800f0a0 	.word	0x0800f0a0
 800b76c:	08011094 	.word	0x08011094
 800b770:	0801103c 	.word	0x0801103c
 800b774:	08011060 	.word	0x08011060

0800b778 <tcp_enqueue_flags>:
{
 800b778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b77c:	f011 0703 	ands.w	r7, r1, #3
{
 800b780:	b082      	sub	sp, #8
 800b782:	460d      	mov	r5, r1
 800b784:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b786:	d05e      	beq.n	800b846 <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b788:	2c00      	cmp	r4, #0
 800b78a:	d065      	beq.n	800b858 <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 800b78c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b790:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 800b794:	d049      	beq.n	800b82a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b796:	2104      	movs	r1, #4
 800b798:	2036      	movs	r0, #54	; 0x36
 800b79a:	f7fc f837 	bl	800780c <pbuf_alloc>
 800b79e:	4606      	mov	r6, r0
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d049      	beq.n	800b838 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b7a4:	8943      	ldrh	r3, [r0, #10]
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d872      	bhi.n	800b890 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 800b7aa:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b7ae:	4b40      	ldr	r3, [pc, #256]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b7b0:	f240 4239 	movw	r2, #1081	; 0x439
 800b7b4:	493f      	ldr	r1, [pc, #252]	; (800b8b4 <tcp_enqueue_flags+0x13c>)
 800b7b6:	4840      	ldr	r0, [pc, #256]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b7b8:	f002 fd26 	bl	800e208 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b7bc:	4631      	mov	r1, r6
 800b7be:	f8cd 8000 	str.w	r8, [sp]
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff faaa 	bl	800ad20 <tcp_create_segment>
 800b7cc:	4606      	mov	r6, r0
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d032      	beq.n	800b838 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7d2:	68c3      	ldr	r3, [r0, #12]
 800b7d4:	079a      	lsls	r2, r3, #30
 800b7d6:	d153      	bne.n	800b880 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7d8:	8933      	ldrh	r3, [r6, #8]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d144      	bne.n	800b868 <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 800b7de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d04b      	beq.n	800b87c <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1fb      	bne.n	800b7e4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 800b7ec:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b7f4:	b117      	cbz	r7, 800b7fc <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 800b7f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800b7fc:	07eb      	lsls	r3, r5, #31
 800b7fe:	d503      	bpl.n	800b808 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 800b800:	8b63      	ldrh	r3, [r4, #26]
 800b802:	f043 0320 	orr.w	r3, r3, #32
 800b806:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b808:	6870      	ldr	r0, [r6, #4]
 800b80a:	f7fc f9d7 	bl	8007bbc <pbuf_clen>
 800b80e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b812:	4418      	add	r0, r3
 800b814:	b280      	uxth	r0, r0
 800b816:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b81a:	b118      	cbz	r0, 800b824 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b81c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b81e:	2800      	cmp	r0, #0
 800b820:	d039      	beq.n	800b896 <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 800b822:	2000      	movs	r0, #0
}
 800b824:	b002      	add	sp, #8
 800b826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b82a:	4641      	mov	r1, r8
 800b82c:	2036      	movs	r0, #54	; 0x36
 800b82e:	f7fb ffed 	bl	800780c <pbuf_alloc>
 800b832:	4606      	mov	r6, r0
 800b834:	2800      	cmp	r0, #0
 800b836:	d1c1      	bne.n	800b7bc <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b838:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b83e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b842:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800b844:	e7ee      	b.n	800b824 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b846:	4b1a      	ldr	r3, [pc, #104]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b848:	f240 4211 	movw	r2, #1041	; 0x411
 800b84c:	491b      	ldr	r1, [pc, #108]	; (800b8bc <tcp_enqueue_flags+0x144>)
 800b84e:	481a      	ldr	r0, [pc, #104]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b850:	f002 fcda 	bl	800e208 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b854:	2c00      	cmp	r4, #0
 800b856:	d199      	bne.n	800b78c <tcp_enqueue_flags+0x14>
 800b858:	4b15      	ldr	r3, [pc, #84]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b85a:	f240 4213 	movw	r2, #1043	; 0x413
 800b85e:	4918      	ldr	r1, [pc, #96]	; (800b8c0 <tcp_enqueue_flags+0x148>)
 800b860:	4815      	ldr	r0, [pc, #84]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b862:	f002 fcd1 	bl	800e208 <iprintf>
 800b866:	e791      	b.n	800b78c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b868:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b86a:	f240 4243 	movw	r2, #1091	; 0x443
 800b86e:	4915      	ldr	r1, [pc, #84]	; (800b8c4 <tcp_enqueue_flags+0x14c>)
 800b870:	4811      	ldr	r0, [pc, #68]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b872:	f002 fcc9 	bl	800e208 <iprintf>
  if (pcb->unsent == NULL) {
 800b876:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d1b3      	bne.n	800b7e4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 800b87c:	66e6      	str	r6, [r4, #108]	; 0x6c
 800b87e:	e7b6      	b.n	800b7ee <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b880:	4b0b      	ldr	r3, [pc, #44]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b882:	f240 4242 	movw	r2, #1090	; 0x442
 800b886:	4910      	ldr	r1, [pc, #64]	; (800b8c8 <tcp_enqueue_flags+0x150>)
 800b888:	480b      	ldr	r0, [pc, #44]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b88a:	f002 fcbd 	bl	800e208 <iprintf>
 800b88e:	e7a3      	b.n	800b7d8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 800b890:	f04f 0801 	mov.w	r8, #1
 800b894:	e792      	b.n	800b7bc <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b896:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800b898:	2c00      	cmp	r4, #0
 800b89a:	d1c3      	bne.n	800b824 <tcp_enqueue_flags+0xac>
 800b89c:	4b04      	ldr	r3, [pc, #16]	; (800b8b0 <tcp_enqueue_flags+0x138>)
 800b89e:	f240 4265 	movw	r2, #1125	; 0x465
 800b8a2:	490a      	ldr	r1, [pc, #40]	; (800b8cc <tcp_enqueue_flags+0x154>)
 800b8a4:	4804      	ldr	r0, [pc, #16]	; (800b8b8 <tcp_enqueue_flags+0x140>)
 800b8a6:	f002 fcaf 	bl	800e208 <iprintf>
  return ERR_OK;
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	e7ba      	b.n	800b824 <tcp_enqueue_flags+0xac>
 800b8ae:	bf00      	nop
 800b8b0:	08010c90 	.word	0x08010c90
 800b8b4:	0801111c 	.word	0x0801111c
 800b8b8:	0800f0a0 	.word	0x0800f0a0
 800b8bc:	080110a4 	.word	0x080110a4
 800b8c0:	080110fc 	.word	0x080110fc
 800b8c4:	08011170 	.word	0x08011170
 800b8c8:	08011158 	.word	0x08011158
 800b8cc:	0801119c 	.word	0x0801119c

0800b8d0 <tcp_send_fin>:
{
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	b188      	cbz	r0, 800b8fa <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800b8d6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 800b8d8:	b14c      	cbz	r4, 800b8ee <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b8da:	4625      	mov	r5, r4
 800b8dc:	6824      	ldr	r4, [r4, #0]
 800b8de:	2c00      	cmp	r4, #0
 800b8e0:	d1fb      	bne.n	800b8da <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b8e2:	68eb      	ldr	r3, [r5, #12]
 800b8e4:	8998      	ldrh	r0, [r3, #12]
 800b8e6:	f7fb f82d 	bl	8006944 <lwip_htons>
 800b8ea:	0743      	lsls	r3, r0, #29
 800b8ec:	d00d      	beq.n	800b90a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	2101      	movs	r1, #1
}
 800b8f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b8f6:	f7ff bf3f 	b.w	800b778 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b8fa:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <tcp_send_fin+0x58>)
 800b8fc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b900:	490a      	ldr	r1, [pc, #40]	; (800b92c <tcp_send_fin+0x5c>)
 800b902:	480b      	ldr	r0, [pc, #44]	; (800b930 <tcp_send_fin+0x60>)
 800b904:	f002 fc80 	bl	800e208 <iprintf>
 800b908:	e7e5      	b.n	800b8d6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b90a:	68eb      	ldr	r3, [r5, #12]
 800b90c:	2001      	movs	r0, #1
 800b90e:	899f      	ldrh	r7, [r3, #12]
 800b910:	f7fb f818 	bl	8006944 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 800b914:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b916:	4338      	orrs	r0, r7
 800b918:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b91a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b91e:	8190      	strh	r0, [r2, #12]
}
 800b920:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 800b922:	8373      	strh	r3, [r6, #26]
}
 800b924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b926:	bf00      	nop
 800b928:	08010c90 	.word	0x08010c90
 800b92c:	080111c4 	.word	0x080111c4
 800b930:	0800f0a0 	.word	0x0800f0a0

0800b934 <tcp_rexmit_rto_prepare>:
{
 800b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b936:	4605      	mov	r5, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d032      	beq.n	800b9a2 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800b93c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800b93e:	b132      	cbz	r2, 800b94e <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b940:	6813      	ldr	r3, [r2, #0]
 800b942:	4614      	mov	r4, r2
 800b944:	b15b      	cbz	r3, 800b95e <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 800b946:	6863      	ldr	r3, [r4, #4]
 800b948:	7b9b      	ldrb	r3, [r3, #14]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d003      	beq.n	800b956 <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 800b94e:	f06f 0305 	mvn.w	r3, #5
}
 800b952:	4618      	mov	r0, r3
 800b954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b956:	6824      	ldr	r4, [r4, #0]
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1f3      	bne.n	800b946 <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 800b95e:	6863      	ldr	r3, [r4, #4]
 800b960:	7b9b      	ldrb	r3, [r3, #14]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d1f3      	bne.n	800b94e <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 800b966:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 800b968:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 800b96a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b96c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 800b970:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 800b972:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b974:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 800b976:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b97a:	6858      	ldr	r0, [r3, #4]
 800b97c:	f7fa ffe6 	bl	800694c <lwip_htonl>
 800b980:	68e3      	ldr	r3, [r4, #12]
 800b982:	4606      	mov	r6, r0
 800b984:	8924      	ldrh	r4, [r4, #8]
 800b986:	8998      	ldrh	r0, [r3, #12]
 800b988:	f7fa ffdc 	bl	8006944 <lwip_htons>
 800b98c:	f010 0003 	ands.w	r0, r0, #3
 800b990:	4426      	add	r6, r4
  return ERR_OK;
 800b992:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b994:	bf18      	it	ne
 800b996:	2001      	movne	r0, #1
  pcb->rttest = 0;
 800b998:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b99a:	4430      	add	r0, r6
 800b99c:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b9a2:	4b04      	ldr	r3, [pc, #16]	; (800b9b4 <tcp_rexmit_rto_prepare+0x80>)
 800b9a4:	f240 6263 	movw	r2, #1635	; 0x663
 800b9a8:	4903      	ldr	r1, [pc, #12]	; (800b9b8 <tcp_rexmit_rto_prepare+0x84>)
 800b9aa:	4804      	ldr	r0, [pc, #16]	; (800b9bc <tcp_rexmit_rto_prepare+0x88>)
 800b9ac:	f002 fc2c 	bl	800e208 <iprintf>
 800b9b0:	e7c4      	b.n	800b93c <tcp_rexmit_rto_prepare+0x8>
 800b9b2:	bf00      	nop
 800b9b4:	08010c90 	.word	0x08010c90
 800b9b8:	080111e0 	.word	0x080111e0
 800b9bc:	0800f0a0 	.word	0x0800f0a0

0800b9c0 <tcp_rexmit>:
{
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b9c2:	4607      	mov	r7, r0
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	d031      	beq.n	800ba2c <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 800b9c8:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800b9ca:	b34e      	cbz	r6, 800ba20 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 800b9cc:	6873      	ldr	r3, [r6, #4]
 800b9ce:	7b9b      	ldrb	r3, [r3, #14]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d125      	bne.n	800ba20 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 800b9d4:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 800b9d6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800b9da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 800b9dc:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 800b9de:	b91b      	cbnz	r3, 800b9e8 <tcp_rexmit+0x28>
 800b9e0:	e00f      	b.n	800ba02 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 800b9e2:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800b9e4:	682b      	ldr	r3, [r5, #0]
 800b9e6:	b163      	cbz	r3, 800ba02 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	6858      	ldr	r0, [r3, #4]
 800b9ec:	f7fa ffae 	bl	800694c <lwip_htonl>
 800b9f0:	68f3      	ldr	r3, [r6, #12]
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	6858      	ldr	r0, [r3, #4]
 800b9f6:	f7fa ffa9 	bl	800694c <lwip_htonl>
 800b9fa:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	dbf0      	blt.n	800b9e2 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800ba04:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800ba06:	6833      	ldr	r3, [r6, #0]
 800ba08:	b16b      	cbz	r3, 800ba26 <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 800ba0a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ba0e:	2bff      	cmp	r3, #255	; 0xff
 800ba10:	d002      	beq.n	800ba18 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 800ba12:	3301      	adds	r3, #1
 800ba14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800ba18:	2300      	movs	r3, #0
  return ERR_OK;
 800ba1a:	4618      	mov	r0, r3
  pcb->rttest = 0;
 800ba1c:	637b      	str	r3, [r7, #52]	; 0x34
}
 800ba1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 800ba20:	f06f 0005 	mvn.w	r0, #5
}
 800ba24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 800ba26:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800ba2a:	e7ee      	b.n	800ba0a <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ba2c:	4b03      	ldr	r3, [pc, #12]	; (800ba3c <tcp_rexmit+0x7c>)
 800ba2e:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ba32:	4903      	ldr	r1, [pc, #12]	; (800ba40 <tcp_rexmit+0x80>)
 800ba34:	4803      	ldr	r0, [pc, #12]	; (800ba44 <tcp_rexmit+0x84>)
 800ba36:	f002 fbe7 	bl	800e208 <iprintf>
 800ba3a:	e7c5      	b.n	800b9c8 <tcp_rexmit+0x8>
 800ba3c:	08010c90 	.word	0x08010c90
 800ba40:	08011204 	.word	0x08011204
 800ba44:	0800f0a0 	.word	0x0800f0a0

0800ba48 <tcp_rexmit_fast>:
{
 800ba48:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	b340      	cbz	r0, 800baa0 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ba4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ba50:	b113      	cbz	r3, 800ba58 <tcp_rexmit_fast+0x10>
 800ba52:	8b63      	ldrh	r3, [r4, #26]
 800ba54:	075b      	lsls	r3, r3, #29
 800ba56:	d500      	bpl.n	800ba5a <tcp_rexmit_fast+0x12>
}
 800ba58:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff ffb0 	bl	800b9c0 <tcp_rexmit>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1f9      	bne.n	800ba58 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba64:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800ba68:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba6c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba6e:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba70:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba74:	bf28      	it	cs
 800ba76:	4619      	movcs	r1, r3
 800ba78:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba7a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ba7e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ba82:	d902      	bls.n	800ba8a <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 800ba84:	b283      	uxth	r3, r0
 800ba86:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 800ba8a:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba8c:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 800ba8e:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba92:	4413      	add	r3, r2
      pcb->rtime = 0;
 800ba94:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ba96:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ba9a:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 800ba9c:	8622      	strh	r2, [r4, #48]	; 0x30
}
 800ba9e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800baa0:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <tcp_rexmit_fast+0x68>)
 800baa2:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800baa6:	4903      	ldr	r1, [pc, #12]	; (800bab4 <tcp_rexmit_fast+0x6c>)
 800baa8:	4803      	ldr	r0, [pc, #12]	; (800bab8 <tcp_rexmit_fast+0x70>)
 800baaa:	f002 fbad 	bl	800e208 <iprintf>
 800baae:	e7ce      	b.n	800ba4e <tcp_rexmit_fast+0x6>
 800bab0:	08010c90 	.word	0x08010c90
 800bab4:	0801121c 	.word	0x0801121c
 800bab8:	0800f0a0 	.word	0x0800f0a0

0800babc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	4607      	mov	r7, r0
 800bac4:	460e      	mov	r6, r1
 800bac6:	4615      	mov	r5, r2
 800bac8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bacc:	461c      	mov	r4, r3
{
 800bace:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 800bad2:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bad6:	b1fb      	cbz	r3, 800bb18 <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bad8:	f1b8 0f00 	cmp.w	r8, #0
 800badc:	d026      	beq.n	800bb2c <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bade:	4630      	mov	r0, r6
 800bae0:	f7fa ff34 	bl	800694c <lwip_htonl>
 800bae4:	2114      	movs	r1, #20
 800bae6:	4602      	mov	r2, r0
 800bae8:	4628      	mov	r0, r5
 800baea:	f24d 0516 	movw	r5, #53270	; 0xd016
 800baee:	464b      	mov	r3, r9
 800baf0:	f8cd a000 	str.w	sl, [sp]
 800baf4:	e9cd 1501 	strd	r1, r5, [sp, #4]
 800baf8:	2100      	movs	r1, #0
 800bafa:	f7ff f98b 	bl	800ae14 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bafe:	4601      	mov	r1, r0
 800bb00:	b138      	cbz	r0, 800bb12 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bb02:	4643      	mov	r3, r8
 800bb04:	4622      	mov	r2, r4
 800bb06:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bb08:	b004      	add	sp, #16
 800bb0a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bb0e:	f7ff b9ef 	b.w	800aef0 <tcp_output_control_segment>
}
 800bb12:	b004      	add	sp, #16
 800bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bb18:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <tcp_rst+0x80>)
 800bb1a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bb1e:	4908      	ldr	r1, [pc, #32]	; (800bb40 <tcp_rst+0x84>)
 800bb20:	4808      	ldr	r0, [pc, #32]	; (800bb44 <tcp_rst+0x88>)
 800bb22:	f002 fb71 	bl	800e208 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bb26:	f1b8 0f00 	cmp.w	r8, #0
 800bb2a:	d1d8      	bne.n	800bade <tcp_rst+0x22>
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <tcp_rst+0x80>)
 800bb2e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bb32:	4905      	ldr	r1, [pc, #20]	; (800bb48 <tcp_rst+0x8c>)
 800bb34:	4803      	ldr	r0, [pc, #12]	; (800bb44 <tcp_rst+0x88>)
 800bb36:	f002 fb67 	bl	800e208 <iprintf>
 800bb3a:	e7d0      	b.n	800bade <tcp_rst+0x22>
 800bb3c:	08010c90 	.word	0x08010c90
 800bb40:	0801123c 	.word	0x0801123c
 800bb44:	0800f0a0 	.word	0x0800f0a0
 800bb48:	08011258 	.word	0x08011258

0800bb4c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bb4c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bb4e:	4604      	mov	r4, r0
 800bb50:	b1c0      	cbz	r0, 800bb84 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bb52:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bb54:	f7fa fefa 	bl	800694c <lwip_htonl>
 800bb58:	2100      	movs	r1, #0
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f7ff f99f 	bl	800aea0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bb62:	4601      	mov	r1, r0
 800bb64:	b1b0      	cbz	r0, 800bb94 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb66:	1d23      	adds	r3, r4, #4
 800bb68:	4622      	mov	r2, r4
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	f7ff f9c0 	bl	800aef0 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb70:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800bb72:	b118      	cbz	r0, 800bb7c <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb74:	f043 0303 	orr.w	r3, r3, #3
 800bb78:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800bb7a:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb7c:	f023 0303 	bic.w	r3, r3, #3
 800bb80:	8363      	strh	r3, [r4, #26]
}
 800bb82:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bb84:	4b07      	ldr	r3, [pc, #28]	; (800bba4 <tcp_send_empty_ack+0x58>)
 800bb86:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bb8a:	4907      	ldr	r1, [pc, #28]	; (800bba8 <tcp_send_empty_ack+0x5c>)
 800bb8c:	4807      	ldr	r0, [pc, #28]	; (800bbac <tcp_send_empty_ack+0x60>)
 800bb8e:	f002 fb3b 	bl	800e208 <iprintf>
 800bb92:	e7de      	b.n	800bb52 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb94:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 800bb96:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb9a:	f043 0303 	orr.w	r3, r3, #3
 800bb9e:	8363      	strh	r3, [r4, #26]
}
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	bf00      	nop
 800bba4:	08010c90 	.word	0x08010c90
 800bba8:	08011274 	.word	0x08011274
 800bbac:	0800f0a0 	.word	0x0800f0a0

0800bbb0 <tcp_output>:
{
 800bbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb4:	4604      	mov	r4, r0
 800bbb6:	b085      	sub	sp, #20
  LWIP_ASSERT_CORE_LOCKED();
 800bbb8:	f7f8 f984 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bbbc:	2c00      	cmp	r4, #0
 800bbbe:	f000 81b2 	beq.w	800bf26 <tcp_output+0x376>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bbc2:	7d23      	ldrb	r3, [r4, #20]
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	f000 8169 	beq.w	800be9c <tcp_output+0x2ec>
  if (tcp_input_pcb == pcb) {
 800bbca:	4bae      	ldr	r3, [pc, #696]	; (800be84 <tcp_output+0x2d4>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	42a3      	cmp	r3, r4
 800bbd0:	f000 8170 	beq.w	800beb4 <tcp_output+0x304>
  seg = pcb->unsent;
 800bbd4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800bbd6:	b345      	cbz	r5, 800bc2a <tcp_output+0x7a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbd8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bbda:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bbde:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 800bbe2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f040 81a5 	bne.w	800bf36 <tcp_output+0x386>
    return ip_route(src, dst);
 800bbec:	4648      	mov	r0, r9
 800bbee:	f001 f9ff 	bl	800cff0 <ip4_route>
 800bbf2:	4680      	mov	r8, r0
  if (netif == NULL) {
 800bbf4:	f1b8 0f00 	cmp.w	r8, #0
 800bbf8:	f000 81af 	beq.w	800bf5a <tcp_output+0x3aa>
  if (ip_addr_isany(&pcb->local_ip)) {
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	b913      	cbnz	r3, 800bc06 <tcp_output+0x56>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc04:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc06:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc08:	42be      	cmp	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc0a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bc0c:	bf28      	it	cs
 800bc0e:	463e      	movcs	r6, r7
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bc10:	f7fa fe9c 	bl	800694c <lwip_htonl>
 800bc14:	892b      	ldrh	r3, [r5, #8]
 800bc16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800bc18:	1a9b      	subs	r3, r3, r2
 800bc1a:	4418      	add	r0, r3
 800bc1c:	42b0      	cmp	r0, r6
 800bc1e:	d90f      	bls.n	800bc40 <tcp_output+0x90>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bc20:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800bc24:	42b3      	cmp	r3, r6
 800bc26:	f000 814f 	beq.w	800bec8 <tcp_output+0x318>
    if (pcb->flags & TF_ACK_NOW) {
 800bc2a:	8b62      	ldrh	r2, [r4, #26]
 800bc2c:	0791      	lsls	r1, r2, #30
 800bc2e:	f100 8145 	bmi.w	800bebc <tcp_output+0x30c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 800bc36:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc38:	8362      	strh	r2, [r4, #26]
}
 800bc3a:	b005      	add	sp, #20
 800bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 800bc40:	2300      	movs	r3, #0
 800bc42:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 800bc46:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 814d 	beq.w	800bee8 <tcp_output+0x338>
    for (; useg->next != NULL; useg = useg->next);
 800bc4e:	461f      	mov	r7, r3
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f000 80ae 	beq.w	800bdb4 <tcp_output+0x204>
 800bc58:	461f      	mov	r7, r3
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1f6      	bne.n	800bc4e <tcp_output+0x9e>
 800bc60:	e0a8      	b.n	800bdb4 <tcp_output+0x204>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bc62:	68eb      	ldr	r3, [r5, #12]
 800bc64:	2010      	movs	r0, #16
 800bc66:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 800bc6a:	f7fa fe6b 	bl	8006944 <lwip_htons>
 800bc6e:	ea4a 0000 	orr.w	r0, sl, r0
 800bc72:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bc76:	f8aa 000c 	strh.w	r0, [sl, #12]
  if (seg->p->ref != 1) {
 800bc7a:	686b      	ldr	r3, [r5, #4]
 800bc7c:	7b9b      	ldrb	r3, [r3, #14]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d153      	bne.n	800bd2a <tcp_output+0x17a>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bc82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc84:	f7fa fe62 	bl	800694c <lwip_htonl>
 800bc88:	f8ca 0008 	str.w	r0, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc8c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800bc8e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bc92:	f7fa fe57 	bl	8006944 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800bc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bc9a:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bc9e:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bca0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bca4:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bca6:	7aab      	ldrb	r3, [r5, #10]
 800bca8:	07db      	lsls	r3, r3, #31
 800bcaa:	f100 80c1 	bmi.w	800be30 <tcp_output+0x280>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bcae:	f10a 0b14 	add.w	fp, sl, #20
  if (pcb->rtime < 0) {
 800bcb2:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da01      	bge.n	800bcbe <tcp_output+0x10e>
    pcb->rtime = 0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800bcbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f000 80aa 	beq.w	800be1a <tcp_output+0x26a>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcc6:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 800bcc8:	2200      	movs	r2, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcca:	6843      	ldr	r3, [r0, #4]
  seg->p->len -= len;
 800bccc:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcce:	ebaa 0303 	sub.w	r3, sl, r3
  seg->p->payload = seg->tcphdr;
 800bcd2:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bcd6:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800bcd8:	1ac9      	subs	r1, r1, r3
 800bcda:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800bcdc:	8901      	ldrh	r1, [r0, #8]
 800bcde:	1acb      	subs	r3, r1, r3
 800bce0:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800bce2:	f88a 2010 	strb.w	r2, [sl, #16]
 800bce6:	f88a 2011 	strb.w	r2, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bcea:	7aab      	ldrb	r3, [r5, #10]
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	f003 0304 	and.w	r3, r3, #4
 800bcf2:	3314      	adds	r3, #20
 800bcf4:	449a      	add	sl, r3
 800bcf6:	45d3      	cmp	fp, sl
 800bcf8:	d007      	beq.n	800bd0a <tcp_output+0x15a>
 800bcfa:	4b63      	ldr	r3, [pc, #396]	; (800be88 <tcp_output+0x2d8>)
 800bcfc:	f240 621c 	movw	r2, #1564	; 0x61c
 800bd00:	4962      	ldr	r1, [pc, #392]	; (800be8c <tcp_output+0x2dc>)
 800bd02:	4863      	ldr	r0, [pc, #396]	; (800be90 <tcp_output+0x2e0>)
 800bd04:	f002 fa80 	bl	800e208 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bd08:	6868      	ldr	r0, [r5, #4]
 800bd0a:	f8cd 8008 	str.w	r8, [sp, #8]
 800bd0e:	464a      	mov	r2, r9
 800bd10:	7aa3      	ldrb	r3, [r4, #10]
 800bd12:	4621      	mov	r1, r4
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	2306      	movs	r3, #6
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	7ae3      	ldrb	r3, [r4, #11]
 800bd1c:	f001 fafe 	bl	800d31c <ip4_output_if>
    if (err != ERR_OK) {
 800bd20:	2800      	cmp	r0, #0
 800bd22:	f040 8115 	bne.w	800bf50 <tcp_output+0x3a0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd26:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->unsent = seg->next;
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bd2e:	7d23      	ldrb	r3, [r4, #20]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	d003      	beq.n	800bd3c <tcp_output+0x18c>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd34:	8b63      	ldrh	r3, [r4, #26]
 800bd36:	f023 0303 	bic.w	r3, r3, #3
 800bd3a:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd3c:	f8da 0004 	ldr.w	r0, [sl, #4]
 800bd40:	f7fa fe04 	bl	800694c <lwip_htonl>
 800bd44:	68eb      	ldr	r3, [r5, #12]
 800bd46:	4682      	mov	sl, r0
 800bd48:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800bd4c:	8998      	ldrh	r0, [r3, #12]
 800bd4e:	f7fa fdf9 	bl	8006944 <lwip_htons>
 800bd52:	f010 0003 	ands.w	r0, r0, #3
 800bd56:	44da      	add	sl, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd58:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd5a:	bf18      	it	ne
 800bd5c:	2001      	movne	r0, #1
 800bd5e:	4450      	add	r0, sl
    if (TCP_TCPLEN(seg) > 0) {
 800bd60:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd64:	1a1b      	subs	r3, r3, r0
 800bd66:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800bd68:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800bd6a:	bfb8      	it	lt
 800bd6c:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800bd6e:	8998      	ldrh	r0, [r3, #12]
 800bd70:	f7fa fde8 	bl	8006944 <lwip_htons>
 800bd74:	f010 0003 	ands.w	r0, r0, #3
 800bd78:	bf18      	it	ne
 800bd7a:	2001      	movne	r0, #1
 800bd7c:	eb10 0f0a 	cmn.w	r0, sl
 800bd80:	d044      	beq.n	800be0c <tcp_output+0x25c>
      seg->next = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800bd86:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d043      	beq.n	800be14 <tcp_output+0x264>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bd8c:	68eb      	ldr	r3, [r5, #12]
 800bd8e:	6858      	ldr	r0, [r3, #4]
 800bd90:	f7fa fddc 	bl	800694c <lwip_htonl>
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	4682      	mov	sl, r0
 800bd98:	6858      	ldr	r0, [r3, #4]
 800bd9a:	f7fa fdd7 	bl	800694c <lwip_htonl>
 800bd9e:	ebaa 0000 	sub.w	r0, sl, r0
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f2c0 80a2 	blt.w	800beec <tcp_output+0x33c>
          useg->next = seg;
 800bda8:	603d      	str	r5, [r7, #0]
 800bdaa:	462f      	mov	r7, r5
    seg = pcb->unsent;
 800bdac:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800bdae:	2d00      	cmp	r5, #0
 800bdb0:	f000 80c5 	beq.w	800bf3e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bdb4:	68eb      	ldr	r3, [r5, #12]
 800bdb6:	6858      	ldr	r0, [r3, #4]
 800bdb8:	f7fa fdc8 	bl	800694c <lwip_htonl>
 800bdbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bdbe:	1ac0      	subs	r0, r0, r3
 800bdc0:	892b      	ldrh	r3, [r5, #8]
 800bdc2:	4418      	add	r0, r3
  while (seg != NULL &&
 800bdc4:	42b0      	cmp	r0, r6
 800bdc6:	f200 80bc 	bhi.w	800bf42 <tcp_output+0x392>
    LWIP_ASSERT("RST not expected here!",
 800bdca:	68eb      	ldr	r3, [r5, #12]
 800bdcc:	8998      	ldrh	r0, [r3, #12]
 800bdce:	f7fa fdb9 	bl	8006944 <lwip_htons>
 800bdd2:	0742      	lsls	r2, r0, #29
 800bdd4:	d412      	bmi.n	800bdfc <tcp_output+0x24c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bdd6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bdd8:	b14b      	cbz	r3, 800bdee <tcp_output+0x23e>
 800bdda:	8b63      	ldrh	r3, [r4, #26]
 800bddc:	f013 0f44 	tst.w	r3, #68	; 0x44
 800bde0:	461a      	mov	r2, r3
 800bde2:	d104      	bne.n	800bdee <tcp_output+0x23e>
 800bde4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800bde6:	2900      	cmp	r1, #0
 800bde8:	d038      	beq.n	800be5c <tcp_output+0x2ac>
 800bdea:	6808      	ldr	r0, [r1, #0]
 800bdec:	b388      	cbz	r0, 800be52 <tcp_output+0x2a2>
    if (pcb->state != SYN_SENT) {
 800bdee:	7d23      	ldrb	r3, [r4, #20]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	f47f af36 	bne.w	800bc62 <tcp_output+0xb2>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bdf6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800bdfa:	e73e      	b.n	800bc7a <tcp_output+0xca>
    LWIP_ASSERT("RST not expected here!",
 800bdfc:	4b22      	ldr	r3, [pc, #136]	; (800be88 <tcp_output+0x2d8>)
 800bdfe:	f240 5236 	movw	r2, #1334	; 0x536
 800be02:	4924      	ldr	r1, [pc, #144]	; (800be94 <tcp_output+0x2e4>)
 800be04:	4822      	ldr	r0, [pc, #136]	; (800be90 <tcp_output+0x2e0>)
 800be06:	f002 f9ff 	bl	800e208 <iprintf>
 800be0a:	e7e4      	b.n	800bdd6 <tcp_output+0x226>
      tcp_seg_free(seg);
 800be0c:	4628      	mov	r0, r5
 800be0e:	f7fc fac7 	bl	80083a0 <tcp_seg_free>
 800be12:	e7cb      	b.n	800bdac <tcp_output+0x1fc>
        pcb->unacked = seg;
 800be14:	462f      	mov	r7, r5
 800be16:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 800be18:	e7c8      	b.n	800bdac <tcp_output+0x1fc>
    pcb->rttest = tcp_ticks;
 800be1a:	4b1f      	ldr	r3, [pc, #124]	; (800be98 <tcp_output+0x2e8>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be20:	f8da 0004 	ldr.w	r0, [sl, #4]
 800be24:	f7fa fd92 	bl	800694c <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800be28:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be2c:	63a0      	str	r0, [r4, #56]	; 0x38
 800be2e:	e74a      	b.n	800bcc6 <tcp_output+0x116>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800be30:	464a      	mov	r2, r9
 800be32:	4641      	mov	r1, r8
 800be34:	f240 50b4 	movw	r0, #1460	; 0x5b4
    opts += 1;
 800be38:	f10a 0b18 	add.w	fp, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800be3c:	f7fd faa4 	bl	8009388 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800be40:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800be44:	f7fa fd82 	bl	800694c <lwip_htonl>
 800be48:	f8ca 0014 	str.w	r0, [sl, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800be4c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800be50:	e72f      	b.n	800bcb2 <tcp_output+0x102>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800be52:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800be56:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800be58:	4584      	cmp	ip, r0
 800be5a:	d2c8      	bcs.n	800bdee <tcp_output+0x23e>
 800be5c:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 800be60:	2800      	cmp	r0, #0
 800be62:	d0c4      	beq.n	800bdee <tcp_output+0x23e>
 800be64:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 800be68:	280f      	cmp	r0, #15
 800be6a:	d8c0      	bhi.n	800bdee <tcp_output+0x23e>
 800be6c:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800be70:	d1bd      	bne.n	800bdee <tcp_output+0x23e>
  if (pcb->unsent == NULL) {
 800be72:	2900      	cmp	r1, #0
 800be74:	f47f aedd 	bne.w	800bc32 <tcp_output+0x82>
    pcb->unsent_oversize = 0;
 800be78:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800be7a:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 800be7c:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 800be80:	e6d7      	b.n	800bc32 <tcp_output+0x82>
 800be82:	bf00      	nop
 800be84:	240105bc 	.word	0x240105bc
 800be88:	08010c90 	.word	0x08010c90
 800be8c:	080112ec 	.word	0x080112ec
 800be90:	0800f0a0 	.word	0x0800f0a0
 800be94:	080112d4 	.word	0x080112d4
 800be98:	24010588 	.word	0x24010588
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800be9c:	4b30      	ldr	r3, [pc, #192]	; (800bf60 <tcp_output+0x3b0>)
 800be9e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bea2:	4930      	ldr	r1, [pc, #192]	; (800bf64 <tcp_output+0x3b4>)
 800bea4:	4830      	ldr	r0, [pc, #192]	; (800bf68 <tcp_output+0x3b8>)
 800bea6:	f002 f9af 	bl	800e208 <iprintf>
  if (tcp_input_pcb == pcb) {
 800beaa:	4b30      	ldr	r3, [pc, #192]	; (800bf6c <tcp_output+0x3bc>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	42a3      	cmp	r3, r4
 800beb0:	f47f ae90 	bne.w	800bbd4 <tcp_output+0x24>
    return ERR_OK;
 800beb4:	2000      	movs	r0, #0
}
 800beb6:	b005      	add	sp, #20
 800beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800bebc:	4620      	mov	r0, r4
}
 800bebe:	b005      	add	sp, #20
 800bec0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800bec4:	f7ff be42 	b.w	800bb4c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bec8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800beca:	2b00      	cmp	r3, #0
 800becc:	f47f aead 	bne.w	800bc2a <tcp_output+0x7a>
 800bed0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f47f aea8 	bne.w	800bc2a <tcp_output+0x7a>
      pcb->persist_cnt = 0;
 800beda:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800bede:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 800bee2:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 800bee6:	e6a0      	b.n	800bc2a <tcp_output+0x7a>
 800bee8:	461f      	mov	r7, r3
 800beea:	e763      	b.n	800bdb4 <tcp_output+0x204>
          while (*cur_seg &&
 800beec:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800beee:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 800bef2:	b92b      	cbnz	r3, 800bf00 <tcp_output+0x350>
 800bef4:	e013      	b.n	800bf1e <tcp_output+0x36e>
            cur_seg = &((*cur_seg)->next );
 800bef6:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 800befa:	f8db 3000 	ldr.w	r3, [fp]
 800befe:	b173      	cbz	r3, 800bf1e <tcp_output+0x36e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	6858      	ldr	r0, [r3, #4]
 800bf04:	f7fa fd22 	bl	800694c <lwip_htonl>
 800bf08:	68eb      	ldr	r3, [r5, #12]
 800bf0a:	4682      	mov	sl, r0
 800bf0c:	6858      	ldr	r0, [r3, #4]
 800bf0e:	f7fa fd1d 	bl	800694c <lwip_htonl>
 800bf12:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 800bf16:	2800      	cmp	r0, #0
 800bf18:	dbed      	blt.n	800bef6 <tcp_output+0x346>
          seg->next = (*cur_seg);
 800bf1a:	f8db 3000 	ldr.w	r3, [fp]
 800bf1e:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 800bf20:	f8cb 5000 	str.w	r5, [fp]
 800bf24:	e742      	b.n	800bdac <tcp_output+0x1fc>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf26:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <tcp_output+0x3b0>)
 800bf28:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf2c:	4910      	ldr	r1, [pc, #64]	; (800bf70 <tcp_output+0x3c0>)
 800bf2e:	480e      	ldr	r0, [pc, #56]	; (800bf68 <tcp_output+0x3b8>)
 800bf30:	f002 f96a 	bl	800e208 <iprintf>
 800bf34:	e645      	b.n	800bbc2 <tcp_output+0x12>
    return netif_get_by_index(pcb->netif_idx);
 800bf36:	f7fb fb0b 	bl	8007550 <netif_get_by_index>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	e65a      	b.n	800bbf4 <tcp_output+0x44>
 800bf3e:	8b63      	ldrh	r3, [r4, #26]
 800bf40:	e79a      	b.n	800be78 <tcp_output+0x2c8>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf42:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 800bf44:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bf46:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	f47f ae72 	bne.w	800bc32 <tcp_output+0x82>
 800bf4e:	e793      	b.n	800be78 <tcp_output+0x2c8>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf50:	8b63      	ldrh	r3, [r4, #26]
 800bf52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf56:	8363      	strh	r3, [r4, #26]
      return err;
 800bf58:	e66f      	b.n	800bc3a <tcp_output+0x8a>
    return ERR_RTE;
 800bf5a:	f06f 0003 	mvn.w	r0, #3
 800bf5e:	e66c      	b.n	800bc3a <tcp_output+0x8a>
 800bf60:	08010c90 	.word	0x08010c90
 800bf64:	080112ac 	.word	0x080112ac
 800bf68:	0800f0a0 	.word	0x0800f0a0
 800bf6c:	240105bc 	.word	0x240105bc
 800bf70:	08011294 	.word	0x08011294

0800bf74 <tcp_rexmit_rto_commit>:
{
 800bf74:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf76:	4604      	mov	r4, r0
 800bf78:	b158      	cbz	r0, 800bf92 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 800bf7a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bf7e:	2bff      	cmp	r3, #255	; 0xff
 800bf80:	d002      	beq.n	800bf88 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 800bf82:	3301      	adds	r3, #1
 800bf84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bf88:	4620      	mov	r0, r4
}
 800bf8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bf8e:	f7ff be0f 	b.w	800bbb0 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf92:	4b04      	ldr	r3, [pc, #16]	; (800bfa4 <tcp_rexmit_rto_commit+0x30>)
 800bf94:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf98:	4903      	ldr	r1, [pc, #12]	; (800bfa8 <tcp_rexmit_rto_commit+0x34>)
 800bf9a:	4804      	ldr	r0, [pc, #16]	; (800bfac <tcp_rexmit_rto_commit+0x38>)
 800bf9c:	f002 f934 	bl	800e208 <iprintf>
 800bfa0:	e7eb      	b.n	800bf7a <tcp_rexmit_rto_commit+0x6>
 800bfa2:	bf00      	nop
 800bfa4:	08010c90 	.word	0x08010c90
 800bfa8:	08011300 	.word	0x08011300
 800bfac:	0800f0a0 	.word	0x0800f0a0

0800bfb0 <tcp_rexmit_rto>:
{
 800bfb0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	b118      	cbz	r0, 800bfbe <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfb6:	f7ff fcbd 	bl	800b934 <tcp_rexmit_rto_prepare>
 800bfba:	b198      	cbz	r0, 800bfe4 <tcp_rexmit_rto+0x34>
}
 800bfbc:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfbe:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <tcp_rexmit_rto+0x4c>)
 800bfc0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bfc4:	490e      	ldr	r1, [pc, #56]	; (800c000 <tcp_rexmit_rto+0x50>)
 800bfc6:	480f      	ldr	r0, [pc, #60]	; (800c004 <tcp_rexmit_rto+0x54>)
 800bfc8:	f002 f91e 	bl	800e208 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7ff fcb1 	bl	800b934 <tcp_rexmit_rto_prepare>
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d1f2      	bne.n	800bfbc <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bfd6:	4b09      	ldr	r3, [pc, #36]	; (800bffc <tcp_rexmit_rto+0x4c>)
 800bfd8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bfdc:	490a      	ldr	r1, [pc, #40]	; (800c008 <tcp_rexmit_rto+0x58>)
 800bfde:	4809      	ldr	r0, [pc, #36]	; (800c004 <tcp_rexmit_rto+0x54>)
 800bfe0:	f002 f912 	bl	800e208 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800bfe4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bfe8:	2bff      	cmp	r3, #255	; 0xff
 800bfea:	d002      	beq.n	800bff2 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 800bfec:	3301      	adds	r3, #1
 800bfee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bff2:	4620      	mov	r0, r4
}
 800bff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bff8:	f7ff bdda 	b.w	800bbb0 <tcp_output>
 800bffc:	08010c90 	.word	0x08010c90
 800c000:	08011324 	.word	0x08011324
 800c004:	0800f0a0 	.word	0x0800f0a0
 800c008:	08011300 	.word	0x08011300

0800c00c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c00c:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c00e:	4604      	mov	r4, r0
 800c010:	b188      	cbz	r0, 800c036 <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c012:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c014:	3801      	subs	r0, #1
 800c016:	f7fa fc99 	bl	800694c <lwip_htonl>
 800c01a:	2100      	movs	r1, #0
 800c01c:	4602      	mov	r2, r0
 800c01e:	4620      	mov	r0, r4
 800c020:	f7fe ff3e 	bl	800aea0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c024:	4601      	mov	r1, r0
 800c026:	b170      	cbz	r0, 800c046 <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c028:	1d23      	adds	r3, r4, #4
 800c02a:	4622      	mov	r2, r4
 800c02c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c032:	f7fe bf5d 	b.w	800aef0 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c036:	4b05      	ldr	r3, [pc, #20]	; (800c04c <tcp_keepalive+0x40>)
 800c038:	f640 0224 	movw	r2, #2084	; 0x824
 800c03c:	4904      	ldr	r1, [pc, #16]	; (800c050 <tcp_keepalive+0x44>)
 800c03e:	4805      	ldr	r0, [pc, #20]	; (800c054 <tcp_keepalive+0x48>)
 800c040:	f002 f8e2 	bl	800e208 <iprintf>
 800c044:	e7e5      	b.n	800c012 <tcp_keepalive+0x6>
}
 800c046:	f04f 30ff 	mov.w	r0, #4294967295
 800c04a:	bd10      	pop	{r4, pc}
 800c04c:	08010c90 	.word	0x08010c90
 800c050:	08011340 	.word	0x08011340
 800c054:	0800f0a0 	.word	0x0800f0a0

0800c058 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c05c:	4604      	mov	r4, r0
 800c05e:	2800      	cmp	r0, #0
 800c060:	d051      	beq.n	800c106 <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c062:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c064:	2d00      	cmp	r5, #0
 800c066:	d04b      	beq.n	800c100 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c068:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800c06c:	2bff      	cmp	r3, #255	; 0xff
 800c06e:	d002      	beq.n	800c076 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 800c070:	3301      	adds	r3, #1
 800c072:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c076:	68eb      	ldr	r3, [r5, #12]
 800c078:	8998      	ldrh	r0, [r3, #12]
 800c07a:	f7fa fc63 	bl	8006944 <lwip_htons>
 800c07e:	07c3      	lsls	r3, r0, #31
 800c080:	d527      	bpl.n	800c0d2 <tcp_zero_window_probe+0x7a>
 800c082:	8929      	ldrh	r1, [r5, #8]
 800c084:	bb29      	cbnz	r1, 800c0d2 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c086:	68eb      	ldr	r3, [r5, #12]
 800c088:	4620      	mov	r0, r4
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	f7fe ff08 	bl	800aea0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c090:	4606      	mov	r6, r0
 800c092:	b388      	cbz	r0, 800c0f8 <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c094:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c098:	2011      	movs	r0, #17
 800c09a:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800c09e:	f7fa fc51 	bl	8006944 <lwip_htons>
 800c0a2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800c0a6:	4338      	orrs	r0, r7
 800c0a8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c0ac:	68eb      	ldr	r3, [r5, #12]
 800c0ae:	6858      	ldr	r0, [r3, #4]
 800c0b0:	f7fa fc4c 	bl	800694c <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c0b6:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c0bc:	1a1b      	subs	r3, r3, r0
 800c0be:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0c0:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 800c0c4:	bfb8      	it	lt
 800c0c6:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0c8:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c0ce:	f7fe bf0f 	b.w	800aef0 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c0d2:	68eb      	ldr	r3, [r5, #12]
 800c0d4:	2101      	movs	r1, #1
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	685a      	ldr	r2, [r3, #4]
 800c0da:	f7fe fee1 	bl	800aea0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800c0de:	4606      	mov	r6, r0
 800c0e0:	b150      	cbz	r0, 800c0f8 <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c0e2:	6868      	ldr	r0, [r5, #4]
 800c0e4:	892a      	ldrh	r2, [r5, #8]
 800c0e6:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 800c0e8:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c0ea:	1a9b      	subs	r3, r3, r2
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	3114      	adds	r1, #20
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	f7fb fde3 	bl	8007cbc <pbuf_copy_partial>
 800c0f6:	e7d9      	b.n	800c0ac <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 800c100:	4628      	mov	r0, r5
}
 800c102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c106:	4b04      	ldr	r3, [pc, #16]	; (800c118 <tcp_zero_window_probe+0xc0>)
 800c108:	f640 024f 	movw	r2, #2127	; 0x84f
 800c10c:	4903      	ldr	r1, [pc, #12]	; (800c11c <tcp_zero_window_probe+0xc4>)
 800c10e:	4804      	ldr	r0, [pc, #16]	; (800c120 <tcp_zero_window_probe+0xc8>)
 800c110:	f002 f87a 	bl	800e208 <iprintf>
 800c114:	e7a5      	b.n	800c062 <tcp_zero_window_probe+0xa>
 800c116:	bf00      	nop
 800c118:	08010c90 	.word	0x08010c90
 800c11c:	0801135c 	.word	0x0801135c
 800c120:	0800f0a0 	.word	0x0800f0a0

0800c124 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c128:	200a      	movs	r0, #10
{
 800c12a:	460e      	mov	r6, r1
 800c12c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c12e:	f7fa ffb7 	bl	80070a0 <memp_malloc>
  if (timeout == NULL) {
 800c132:	b190      	cbz	r0, 800c15a <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800c134:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c136:	490d      	ldr	r1, [pc, #52]	; (800c16c <sys_timeout_abs+0x48>)
  timeout->h = handler;
 800c138:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 800c13a:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 800c13c:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 800c140:	680b      	ldr	r3, [r1, #0]
 800c142:	b91b      	cbnz	r3, 800c14c <sys_timeout_abs+0x28>
 800c144:	e007      	b.n	800c156 <sys_timeout_abs+0x32>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c146:	4619      	mov	r1, r3
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	b11b      	cbz	r3, 800c154 <sys_timeout_abs+0x30>
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	1aa2      	subs	r2, r4, r2
 800c150:	2a00      	cmp	r2, #0
 800c152:	daf8      	bge.n	800c146 <sys_timeout_abs+0x22>
        timeout->next = t->next;
 800c154:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800c156:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 800c158:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c15a:	4b05      	ldr	r3, [pc, #20]	; (800c170 <sys_timeout_abs+0x4c>)
 800c15c:	22be      	movs	r2, #190	; 0xbe
 800c15e:	4905      	ldr	r1, [pc, #20]	; (800c174 <sys_timeout_abs+0x50>)
 800c160:	4805      	ldr	r0, [pc, #20]	; (800c178 <sys_timeout_abs+0x54>)
}
 800c162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c166:	f002 b84f 	b.w	800e208 <iprintf>
 800c16a:	bf00      	nop
 800c16c:	240105d8 	.word	0x240105d8
 800c170:	08011380 	.word	0x08011380
 800c174:	080113b4 	.word	0x080113b4
 800c178:	0800f0a0 	.word	0x0800f0a0

0800c17c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c17c:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c17e:	6843      	ldr	r3, [r0, #4]
{
 800c180:	4604      	mov	r4, r0
  cyclic->handler();
 800c182:	4798      	blx	r3

  now = sys_now();
 800c184:	f7f7 fd1a 	bl	8003bbc <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c188:	4b09      	ldr	r3, [pc, #36]	; (800c1b0 <lwip_cyclic_timer+0x34>)
 800c18a:	6825      	ldr	r5, [r4, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c18e:	4909      	ldr	r1, [pc, #36]	; (800c1b4 <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c190:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c192:	1a1a      	subs	r2, r3, r0
 800c194:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c196:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c198:	da04      	bge.n	800c1a4 <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c19a:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c19c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c1a0:	f7ff bfc0 	b.w	800c124 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c1a4:	4618      	mov	r0, r3
}
 800c1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c1aa:	f7ff bfbb 	b.w	800c124 <sys_timeout_abs>
 800c1ae:	bf00      	nop
 800c1b0:	240105d4 	.word	0x240105d4
 800c1b4:	0800c17d 	.word	0x0800c17d

0800c1b8 <tcpip_tcp_timer>:
{
 800c1b8:	b508      	push	{r3, lr}
  tcp_tmr();
 800c1ba:	f7fd f8b7 	bl	800932c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <tcpip_tcp_timer+0x30>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	b153      	cbz	r3, 800c1da <tcpip_tcp_timer+0x22>
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();
 800c1c4:	f7f7 fe7e 	bl	8003ec4 <sys_check_core_locking>

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c1c8:	f7f7 fcf8 	bl	8003bbc <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4907      	ldr	r1, [pc, #28]	; (800c1ec <tcpip_tcp_timer+0x34>)
 800c1d0:	30fa      	adds	r0, #250	; 0xfa
}
 800c1d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c1d6:	f7ff bfa5 	b.w	800c124 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c1da:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <tcpip_tcp_timer+0x38>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1f0      	bne.n	800c1c4 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c1e2:	4a04      	ldr	r2, [pc, #16]	; (800c1f4 <tcpip_tcp_timer+0x3c>)
 800c1e4:	6013      	str	r3, [r2, #0]
}
 800c1e6:	bd08      	pop	{r3, pc}
 800c1e8:	24010578 	.word	0x24010578
 800c1ec:	0800c1b9 	.word	0x0800c1b9
 800c1f0:	24010590 	.word	0x24010590
 800c1f4:	240105dc 	.word	0x240105dc

0800c1f8 <tcp_timer_needed>:
{
 800c1f8:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();
 800c1fa:	f7f7 fe63 	bl	8003ec4 <sys_check_core_locking>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c1fe:	4b0c      	ldr	r3, [pc, #48]	; (800c230 <tcp_timer_needed+0x38>)
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	b99a      	cbnz	r2, 800c22c <tcp_timer_needed+0x34>
 800c204:	4a0b      	ldr	r2, [pc, #44]	; (800c234 <tcp_timer_needed+0x3c>)
 800c206:	6812      	ldr	r2, [r2, #0]
 800c208:	b162      	cbz	r2, 800c224 <tcp_timer_needed+0x2c>
    tcpip_tcp_timer_active = 1;
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();
 800c20e:	f7f7 fe59 	bl	8003ec4 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c212:	f7f7 fcd3 	bl	8003bbc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c216:	2200      	movs	r2, #0
 800c218:	4907      	ldr	r1, [pc, #28]	; (800c238 <tcp_timer_needed+0x40>)
 800c21a:	30fa      	adds	r0, #250	; 0xfa
}
 800c21c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c220:	f7ff bf80 	b.w	800c124 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c224:	4a05      	ldr	r2, [pc, #20]	; (800c23c <tcp_timer_needed+0x44>)
 800c226:	6812      	ldr	r2, [r2, #0]
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d1ee      	bne.n	800c20a <tcp_timer_needed+0x12>
}
 800c22c:	bd08      	pop	{r3, pc}
 800c22e:	bf00      	nop
 800c230:	240105dc 	.word	0x240105dc
 800c234:	24010578 	.word	0x24010578
 800c238:	0800c1b9 	.word	0x0800c1b9
 800c23c:	24010590 	.word	0x24010590

0800c240 <sys_timeouts_init>:
{
 800c240:	b510      	push	{r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c242:	4c0c      	ldr	r4, [pc, #48]	; (800c274 <sys_timeouts_init+0x34>)
  LWIP_ASSERT_CORE_LOCKED();
 800c244:	f7f7 fe3e 	bl	8003ec4 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c248:	f7f7 fcb8 	bl	8003bbc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c24c:	490a      	ldr	r1, [pc, #40]	; (800c278 <sys_timeouts_init+0x38>)
 800c24e:	f104 0208 	add.w	r2, r4, #8
 800c252:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 800c256:	f7ff ff65 	bl	800c124 <sys_timeout_abs>
  LWIP_ASSERT_CORE_LOCKED();
 800c25a:	f7f7 fe33 	bl	8003ec4 <sys_check_core_locking>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c25e:	f7f7 fcad 	bl	8003bbc <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c262:	f104 0210 	add.w	r2, r4, #16
 800c266:	4904      	ldr	r1, [pc, #16]	; (800c278 <sys_timeouts_init+0x38>)
 800c268:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
}
 800c26c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c270:	f7ff bf58 	b.w	800c124 <sys_timeout_abs>
 800c274:	080113f4 	.word	0x080113f4
 800c278:	0800c17d 	.word	0x0800c17d

0800c27c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();
 800c280:	f7f7 fe20 	bl	8003ec4 <sys_check_core_locking>

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c284:	4c10      	ldr	r4, [pc, #64]	; (800c2c8 <sys_check_timeouts+0x4c>)
 800c286:	f7f7 fc99 	bl	8003bbc <sys_now>

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800c28a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800c2cc <sys_check_timeouts+0x50>
  now = sys_now();
 800c28e:	4607      	mov	r7, r0
 800c290:	e00f      	b.n	800c2b2 <sys_check_timeouts+0x36>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	eba7 0c02 	sub.w	ip, r7, r2
 800c298:	f1bc 0f00 	cmp.w	ip, #0
 800c29c:	db0e      	blt.n	800c2bc <sys_check_timeouts+0x40>
    handler = tmptimeout->h;
 800c29e:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 800c2a0:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 800c2a2:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 800c2a6:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 800c2aa:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c2ac:	f7fa ff3e 	bl	800712c <memp_free>
    if (handler != NULL) {
 800c2b0:	b935      	cbnz	r5, 800c2c0 <sys_check_timeouts+0x44>
    tmptimeout = next_timeout;
 800c2b2:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c2b4:	200a      	movs	r0, #10
 800c2b6:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1ea      	bne.n	800c292 <sys_check_timeouts+0x16>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c2bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 800c2c0:	4648      	mov	r0, r9
 800c2c2:	47a8      	blx	r5
 800c2c4:	e7f5      	b.n	800c2b2 <sys_check_timeouts+0x36>
 800c2c6:	bf00      	nop
 800c2c8:	240105d8 	.word	0x240105d8
 800c2cc:	240105d4 	.word	0x240105d4

0800c2d0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c2d0:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c2d2:	4c08      	ldr	r4, [pc, #32]	; (800c2f4 <sys_timeouts_sleeptime+0x24>)
  LWIP_ASSERT_CORE_LOCKED();
 800c2d4:	f7f7 fdf6 	bl	8003ec4 <sys_check_core_locking>
  if (next_timeout == NULL) {
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	b13b      	cbz	r3, 800c2ec <sys_timeouts_sleeptime+0x1c>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c2dc:	f7f7 fc6e 	bl	8003bbc <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
    return 0;
 800c2e4:	1a18      	subs	r0, r3, r0
 800c2e6:	bf48      	it	mi
 800c2e8:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800c2ea:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c2ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	bf00      	nop
 800c2f4:	240105d8 	.word	0x240105d8

0800c2f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c2f8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2fa:	f001 ff9d 	bl	800e238 <rand>
 800c2fe:	4b02      	ldr	r3, [pc, #8]	; (800c308 <udp_init+0x10>)
 800c300:	4a02      	ldr	r2, [pc, #8]	; (800c30c <udp_init+0x14>)
 800c302:	4303      	orrs	r3, r0
 800c304:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 800c306:	bd08      	pop	{r3, pc}
 800c308:	ffffc000 	.word	0xffffc000
 800c30c:	2400002e 	.word	0x2400002e

0800c310 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	4680      	mov	r8, r0
 800c316:	b085      	sub	sp, #20
 800c318:	460f      	mov	r7, r1
  u8_t broadcast;
  u8_t for_us = 0;

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();
 800c31a:	f7f7 fdd3 	bl	8003ec4 <sys_check_core_locking>

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c31e:	f1b8 0f00 	cmp.w	r8, #0
 800c322:	f000 80af 	beq.w	800c484 <udp_input+0x174>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c326:	2f00      	cmp	r7, #0
 800c328:	f000 80b5 	beq.w	800c496 <udp_input+0x186>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c32c:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800c330:	2b07      	cmp	r3, #7
 800c332:	f240 8091 	bls.w	800c458 <udp_input+0x148>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c336:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800c50c <udp_input+0x1fc>
  udphdr = (struct udp_hdr *)p->payload;
 800c33a:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c33e:	f8d9 1000 	ldr.w	r1, [r9]
 800c342:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c346:	f000 fffb 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800c34a:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c34c:	8820      	ldrh	r0, [r4, #0]
 800c34e:	f7fa faf9 	bl	8006944 <lwip_htons>
 800c352:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 800c354:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 800c356:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 800c358:	f7fa faf4 	bl	8006944 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c35c:	4b63      	ldr	r3, [pc, #396]	; (800c4ec <udp_input+0x1dc>)
  dest = lwip_ntohs(udphdr->dest);
 800c35e:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c360:	681c      	ldr	r4, [r3, #0]
 800c362:	2c00      	cmp	r4, #0
 800c364:	d064      	beq.n	800c430 <udp_input+0x120>
  uncon_pcb = NULL;
 800c366:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c36a:	f8df c190 	ldr.w	ip, [pc, #400]	; 800c4fc <udp_input+0x1ec>
 800c36e:	4960      	ldr	r1, [pc, #384]	; (800c4f0 <udp_input+0x1e0>)
  prev = NULL;
 800c370:	465e      	mov	r6, fp
 800c372:	e004      	b.n	800c37e <udp_input+0x6e>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c374:	68e2      	ldr	r2, [r4, #12]
 800c376:	4626      	mov	r6, r4
 800c378:	2a00      	cmp	r2, #0
 800c37a:	d056      	beq.n	800c42a <udp_input+0x11a>
 800c37c:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c37e:	8a62      	ldrh	r2, [r4, #18]
 800c380:	42aa      	cmp	r2, r5
 800c382:	d1f7      	bne.n	800c374 <udp_input+0x64>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c384:	2f00      	cmp	r7, #0
 800c386:	d06d      	beq.n	800c464 <udp_input+0x154>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c388:	7a20      	ldrb	r0, [r4, #8]
 800c38a:	b138      	cbz	r0, 800c39c <udp_input+0x8c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c38c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c390:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800c394:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	4290      	cmp	r0, r2
 800c39a:	d1eb      	bne.n	800c374 <udp_input+0x64>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c39c:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800c39e:	f1ba 0f00 	cmp.w	sl, #0
 800c3a2:	d038      	beq.n	800c416 <udp_input+0x106>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3a4:	b13a      	cbz	r2, 800c3b6 <udp_input+0xa6>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3a6:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d003      	beq.n	800c3b6 <udp_input+0xa6>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c3ae:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	4218      	tst	r0, r3
 800c3b4:	d1de      	bne.n	800c374 <udp_input+0x64>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c3b6:	7c20      	ldrb	r0, [r4, #16]
 800c3b8:	0743      	lsls	r3, r0, #29
 800c3ba:	d409      	bmi.n	800c3d0 <udp_input+0xc0>
        if (uncon_pcb == NULL) {
 800c3bc:	f1bb 0f00 	cmp.w	fp, #0
 800c3c0:	d059      	beq.n	800c476 <udp_input+0x166>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c3c2:	f1ba 0f00 	cmp.w	sl, #0
 800c3c6:	d003      	beq.n	800c3d0 <udp_input+0xc0>
 800c3c8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c3cc:	3001      	adds	r0, #1
 800c3ce:	d069      	beq.n	800c4a4 <udp_input+0x194>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c3d0:	8aa2      	ldrh	r2, [r4, #20]
 800c3d2:	9803      	ldr	r0, [sp, #12]
 800c3d4:	4282      	cmp	r2, r0
 800c3d6:	d1cd      	bne.n	800c374 <udp_input+0x64>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3d8:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c3da:	b11a      	cbz	r2, 800c3e4 <udp_input+0xd4>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c3dc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800c3e0:	4282      	cmp	r2, r0
 800c3e2:	d1c7      	bne.n	800c374 <udp_input+0x64>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c3e4:	b12e      	cbz	r6, 800c3f2 <udp_input+0xe2>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c3e6:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 800c3e8:	4a40      	ldr	r2, [pc, #256]	; (800c4ec <udp_input+0x1dc>)
          prev->next = pcb->next;
 800c3ea:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 800c3ec:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 800c3ee:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 800c3f0:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c3f2:	2108      	movs	r1, #8
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	f7fb fb5d 	bl	8007ab4 <pbuf_remove_header>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d15b      	bne.n	800c4b6 <udp_input+0x1a6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c3fe:	69a5      	ldr	r5, [r4, #24]
 800c400:	b355      	cbz	r5, 800c458 <udp_input+0x148>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	4642      	mov	r2, r8
 800c406:	69e0      	ldr	r0, [r4, #28]
 800c408:	4621      	mov	r1, r4
 800c40a:	9300      	str	r3, [sp, #0]
 800c40c:	4b39      	ldr	r3, [pc, #228]	; (800c4f4 <udp_input+0x1e4>)
 800c40e:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c410:	b005      	add	sp, #20
 800c412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c416:	2a00      	cmp	r2, #0
 800c418:	d0cd      	beq.n	800c3b6 <udp_input+0xa6>
 800c41a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c41e:	4282      	cmp	r2, r0
 800c420:	d0c9      	beq.n	800c3b6 <udp_input+0xa6>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c422:	68e2      	ldr	r2, [r4, #12]
 800c424:	4626      	mov	r6, r4
 800c426:	2a00      	cmp	r2, #0
 800c428:	d1a8      	bne.n	800c37c <udp_input+0x6c>
  if (pcb != NULL) {
 800c42a:	f1bb 0f00 	cmp.w	fp, #0
 800c42e:	d15b      	bne.n	800c4e8 <udp_input+0x1d8>
  if (for_us) {
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c436:	429a      	cmp	r2, r3
 800c438:	d10e      	bne.n	800c458 <udp_input+0x148>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c43a:	2108      	movs	r1, #8
 800c43c:	4640      	mov	r0, r8
 800c43e:	f7fb fb39 	bl	8007ab4 <pbuf_remove_header>
 800c442:	2800      	cmp	r0, #0
 800c444:	d137      	bne.n	800c4b6 <udp_input+0x1a6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c446:	f1ba 0f00 	cmp.w	sl, #0
 800c44a:	d105      	bne.n	800c458 <udp_input+0x148>
 800c44c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c450:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c454:	2be0      	cmp	r3, #224	; 0xe0
 800c456:	d13b      	bne.n	800c4d0 <udp_input+0x1c0>
      pbuf_free(p);
 800c458:	4640      	mov	r0, r8
}
 800c45a:	b005      	add	sp, #20
 800c45c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c460:	f7fb bb98 	b.w	8007b94 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c464:	4663      	mov	r3, ip
 800c466:	2288      	movs	r2, #136	; 0x88
 800c468:	4823      	ldr	r0, [pc, #140]	; (800c4f8 <udp_input+0x1e8>)
 800c46a:	f001 fecd 	bl	800e208 <iprintf>
 800c46e:	f8df c08c 	ldr.w	ip, [pc, #140]	; 800c4fc <udp_input+0x1ec>
 800c472:	491f      	ldr	r1, [pc, #124]	; (800c4f0 <udp_input+0x1e0>)
 800c474:	e788      	b.n	800c388 <udp_input+0x78>
      if ((pcb->remote_port == src) &&
 800c476:	8aa2      	ldrh	r2, [r4, #20]
 800c478:	46a3      	mov	fp, r4
 800c47a:	9803      	ldr	r0, [sp, #12]
 800c47c:	4282      	cmp	r2, r0
 800c47e:	f47f af79 	bne.w	800c374 <udp_input+0x64>
 800c482:	e7a9      	b.n	800c3d8 <udp_input+0xc8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c484:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <udp_input+0x1ec>)
 800c486:	22cf      	movs	r2, #207	; 0xcf
 800c488:	491d      	ldr	r1, [pc, #116]	; (800c500 <udp_input+0x1f0>)
 800c48a:	481b      	ldr	r0, [pc, #108]	; (800c4f8 <udp_input+0x1e8>)
 800c48c:	f001 febc 	bl	800e208 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c490:	2f00      	cmp	r7, #0
 800c492:	f47f af4b 	bne.w	800c32c <udp_input+0x1c>
 800c496:	4b19      	ldr	r3, [pc, #100]	; (800c4fc <udp_input+0x1ec>)
 800c498:	22d0      	movs	r2, #208	; 0xd0
 800c49a:	491a      	ldr	r1, [pc, #104]	; (800c504 <udp_input+0x1f4>)
 800c49c:	4816      	ldr	r0, [pc, #88]	; (800c4f8 <udp_input+0x1e8>)
 800c49e:	f001 feb3 	bl	800e208 <iprintf>
 800c4a2:	e743      	b.n	800c32c <udp_input+0x1c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f8db 3000 	ldr.w	r3, [fp]
 800c4aa:	4283      	cmp	r3, r0
 800c4ac:	d090      	beq.n	800c3d0 <udp_input+0xc0>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c4ae:	4290      	cmp	r0, r2
 800c4b0:	bf08      	it	eq
 800c4b2:	46a3      	moveq	fp, r4
 800c4b4:	e78c      	b.n	800c3d0 <udp_input+0xc0>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c4b6:	4b11      	ldr	r3, [pc, #68]	; (800c4fc <udp_input+0x1ec>)
 800c4b8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c4bc:	4912      	ldr	r1, [pc, #72]	; (800c508 <udp_input+0x1f8>)
 800c4be:	480e      	ldr	r0, [pc, #56]	; (800c4f8 <udp_input+0x1e8>)
 800c4c0:	f001 fea2 	bl	800e208 <iprintf>
      pbuf_free(p);
 800c4c4:	4640      	mov	r0, r8
}
 800c4c6:	b005      	add	sp, #20
 800c4c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800c4cc:	f7fb bb62 	b.w	8007b94 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c4d0:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 800c4d4:	4640      	mov	r0, r8
 800c4d6:	3108      	adds	r1, #8
 800c4d8:	b209      	sxth	r1, r1
 800c4da:	f7fb fb23 	bl	8007b24 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c4de:	2103      	movs	r1, #3
 800c4e0:	4640      	mov	r0, r8
 800c4e2:	f000 fd7d 	bl	800cfe0 <icmp_dest_unreach>
 800c4e6:	e7b7      	b.n	800c458 <udp_input+0x148>
 800c4e8:	465c      	mov	r4, fp
 800c4ea:	e782      	b.n	800c3f2 <udp_input+0xe2>
 800c4ec:	240105e0 	.word	0x240105e0
 800c4f0:	08011470 	.word	0x08011470
 800c4f4:	24009ac8 	.word	0x24009ac8
 800c4f8:	0800f0a0 	.word	0x0800f0a0
 800c4fc:	0801140c 	.word	0x0801140c
 800c500:	0801143c 	.word	0x0801143c
 800c504:	08011454 	.word	0x08011454
 800c508:	08011498 	.word	0x08011498
 800c50c:	24009ab8 	.word	0x24009ab8

0800c510 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c510:	b110      	cbz	r0, 800c518 <udp_netif_ip_addr_changed+0x8>
 800c512:	6802      	ldr	r2, [r0, #0]
 800c514:	b101      	cbz	r1, 800c518 <udp_netif_ip_addr_changed+0x8>
 800c516:	b902      	cbnz	r2, 800c51a <udp_netif_ip_addr_changed+0xa>
 800c518:	4770      	bx	lr
 800c51a:	680b      	ldr	r3, [r1, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d0fb      	beq.n	800c518 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c520:	4b08      	ldr	r3, [pc, #32]	; (800c544 <udp_netif_ip_addr_changed+0x34>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0f7      	beq.n	800c518 <udp_netif_ip_addr_changed+0x8>
{
 800c528:	b410      	push	{r4}
 800c52a:	e000      	b.n	800c52e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c52c:	6802      	ldr	r2, [r0, #0]
 800c52e:	681c      	ldr	r4, [r3, #0]
 800c530:	4294      	cmp	r4, r2
 800c532:	d101      	bne.n	800c538 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c534:	680a      	ldr	r2, [r1, #0]
 800c536:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1f6      	bne.n	800c52c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 800c53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c542:	4770      	bx	lr
 800c544:	240105e0 	.word	0x240105e0

0800c548 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	468b      	mov	fp, r1
 800c54e:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c550:	f04f 080a 	mov.w	r8, #10
{
 800c554:	b085      	sub	sp, #20
 800c556:	4617      	mov	r7, r2
 800c558:	4e52      	ldr	r6, [pc, #328]	; (800c6a4 <etharp_find_entry+0x15c>)
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c55a:	465a      	mov	r2, fp
{
 800c55c:	4605      	mov	r5, r0
 800c55e:	4631      	mov	r1, r6
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c560:	4699      	mov	r9, r3
  s16_t empty = ARP_TABLE_SIZE;
 800c562:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c564:	46c6      	mov	lr, r8
 800c566:	46c3      	mov	fp, r8
 800c568:	469a      	mov	sl, r3
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c56a:	9303      	str	r3, [sp, #12]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c56c:	e9cd 7201 	strd	r7, r2, [sp, #4]
 800c570:	e004      	b.n	800c57c <etharp_find_entry+0x34>
 800c572:	4664      	mov	r4, ip
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c574:	3301      	adds	r3, #1
 800c576:	3118      	adds	r1, #24
 800c578:	2b0a      	cmp	r3, #10
 800c57a:	d016      	beq.n	800c5aa <etharp_find_entry+0x62>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c57c:	2c0a      	cmp	r4, #10
 800c57e:	fa0f fc83 	sxth.w	ip, r3
    u8_t state = arp_table[i].state;
 800c582:	7d0a      	ldrb	r2, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c584:	d13a      	bne.n	800c5fc <etharp_find_entry+0xb4>
 800c586:	2a00      	cmp	r2, #0
 800c588:	d0f3      	beq.n	800c572 <etharp_find_entry+0x2a>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c58a:	b11d      	cbz	r5, 800c594 <etharp_find_entry+0x4c>
 800c58c:	6828      	ldr	r0, [r5, #0]
 800c58e:	684f      	ldr	r7, [r1, #4]
 800c590:	42b8      	cmp	r0, r7
 800c592:	d03e      	beq.n	800c612 <etharp_find_entry+0xca>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c594:	2a01      	cmp	r2, #1
 800c596:	d034      	beq.n	800c602 <etharp_find_entry+0xba>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c598:	8a4a      	ldrh	r2, [r1, #18]
 800c59a:	454a      	cmp	r2, r9
 800c59c:	d3ea      	bcc.n	800c574 <etharp_find_entry+0x2c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c59e:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 800c5a0:	4691      	mov	r9, r2
 800c5a2:	46e6      	mov	lr, ip
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5a4:	3118      	adds	r1, #24
 800c5a6:	2b0a      	cmp	r3, #10
 800c5a8:	d1e8      	bne.n	800c57c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c5aa:	46da      	mov	sl, fp
 800c5ac:	e9dd 7b01 	ldrd	r7, fp, [sp, #4]
 800c5b0:	f1bb 0f01 	cmp.w	fp, #1
 800c5b4:	d172      	bne.n	800c69c <etharp_find_entry+0x154>
 800c5b6:	2c0a      	cmp	r4, #10
 800c5b8:	d032      	beq.n	800c620 <etharp_find_entry+0xd8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c5ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c5be:	46a1      	mov	r9, r4
 800c5c0:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800c5c4:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c5c8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ca:	b133      	cbz	r3, 800c5da <etharp_find_entry+0x92>
 800c5cc:	4b36      	ldr	r3, [pc, #216]	; (800c6a8 <etharp_find_entry+0x160>)
 800c5ce:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c5d2:	4936      	ldr	r1, [pc, #216]	; (800c6ac <etharp_find_entry+0x164>)
 800c5d4:	4836      	ldr	r0, [pc, #216]	; (800c6b0 <etharp_find_entry+0x168>)
 800c5d6:	f001 fe17 	bl	800e208 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c5da:	b12d      	cbz	r5, 800c5e8 <etharp_find_entry+0xa0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c5dc:	eb08 0309 	add.w	r3, r8, r9
 800c5e0:	682a      	ldr	r2, [r5, #0]
 800c5e2:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c5e6:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c5e8:	44c8      	add	r8, r9
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	eb06 06c8 	add.w	r6, r6, r8, lsl #3
 800c5f0:	8273      	strh	r3, [r6, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c5f2:	60b7      	str	r7, [r6, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	b005      	add	sp, #20
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 800c5fc:	2a00      	cmp	r2, #0
 800c5fe:	d0b9      	beq.n	800c574 <etharp_find_entry+0x2c>
 800c600:	e7c3      	b.n	800c58a <etharp_find_entry+0x42>
        if (arp_table[i].q != NULL) {
 800c602:	680a      	ldr	r2, [r1, #0]
 800c604:	b3a2      	cbz	r2, 800c670 <etharp_find_entry+0x128>
          if (arp_table[i].ctime >= age_queue) {
 800c606:	8a4a      	ldrh	r2, [r1, #18]
 800c608:	4552      	cmp	r2, sl
 800c60a:	d3b3      	bcc.n	800c574 <etharp_find_entry+0x2c>
 800c60c:	4692      	mov	sl, r2
 800c60e:	46e0      	mov	r8, ip
 800c610:	e7b0      	b.n	800c574 <etharp_find_entry+0x2c>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c612:	9f01      	ldr	r7, [sp, #4]
 800c614:	b117      	cbz	r7, 800c61c <etharp_find_entry+0xd4>
 800c616:	6888      	ldr	r0, [r1, #8]
 800c618:	42b8      	cmp	r0, r7
 800c61a:	d1bb      	bne.n	800c594 <etharp_find_entry+0x4c>
 800c61c:	4664      	mov	r4, ip
 800c61e:	e7e9      	b.n	800c5f4 <etharp_find_entry+0xac>
    if (old_stable < ARP_TABLE_SIZE) {
 800c620:	f1be 0f0a 	cmp.w	lr, #10
 800c624:	d02c      	beq.n	800c680 <etharp_find_entry+0x138>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c626:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 800c62a:	46f1      	mov	r9, lr
 800c62c:	ea4f 084e 	mov.w	r8, lr, lsl #1
 800c630:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
 800c634:	b383      	cbz	r3, 800c698 <etharp_find_entry+0x150>
 800c636:	464c      	mov	r4, r9
 800c638:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <etharp_find_entry+0x160>)
 800c63a:	f240 126d 	movw	r2, #365	; 0x16d
 800c63e:	491d      	ldr	r1, [pc, #116]	; (800c6b4 <etharp_find_entry+0x16c>)
 800c640:	481b      	ldr	r0, [pc, #108]	; (800c6b0 <etharp_find_entry+0x168>)
 800c642:	f001 fde1 	bl	800e208 <iprintf>
  if (arp_table[i].q != NULL) {
 800c646:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 800c64a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 800c64e:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800c652:	f856 000a 	ldr.w	r0, [r6, sl]
 800c656:	b120      	cbz	r0, 800c662 <etharp_find_entry+0x11a>
    free_etharp_q(arp_table[i].q);
 800c658:	f7fb fa9c 	bl	8007b94 <pbuf_free>
    arp_table[i].q = NULL;
 800c65c:	2300      	movs	r3, #0
 800c65e:	f846 300a 	str.w	r3, [r6, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c662:	eb08 0309 	add.w	r3, r8, r9
 800c666:	2200      	movs	r2, #0
 800c668:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c66c:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c66e:	e7b4      	b.n	800c5da <etharp_find_entry+0x92>
          if (arp_table[i].ctime >= age_pending) {
 800c670:	8a4a      	ldrh	r2, [r1, #18]
 800c672:	9803      	ldr	r0, [sp, #12]
 800c674:	4282      	cmp	r2, r0
 800c676:	f4ff af7d 	bcc.w	800c574 <etharp_find_entry+0x2c>
 800c67a:	46e3      	mov	fp, ip
 800c67c:	9203      	str	r2, [sp, #12]
 800c67e:	e779      	b.n	800c574 <etharp_find_entry+0x2c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c680:	f1ba 0f0a 	cmp.w	sl, #10
 800c684:	d105      	bne.n	800c692 <etharp_find_entry+0x14a>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c686:	f1b8 0f0a 	cmp.w	r8, #10
 800c68a:	d007      	beq.n	800c69c <etharp_find_entry+0x154>
    etharp_free_entry(i);
 800c68c:	4644      	mov	r4, r8
 800c68e:	46c1      	mov	r9, r8
 800c690:	e7d9      	b.n	800c646 <etharp_find_entry+0xfe>
 800c692:	4654      	mov	r4, sl
 800c694:	46d1      	mov	r9, sl
 800c696:	e7d6      	b.n	800c646 <etharp_find_entry+0xfe>
 800c698:	4674      	mov	r4, lr
 800c69a:	e7e2      	b.n	800c662 <etharp_find_entry+0x11a>
    return (s16_t)ERR_MEM;
 800c69c:	f04f 34ff 	mov.w	r4, #4294967295
 800c6a0:	e7a8      	b.n	800c5f4 <etharp_find_entry+0xac>
 800c6a2:	bf00      	nop
 800c6a4:	240105e4 	.word	0x240105e4
 800c6a8:	080114b4 	.word	0x080114b4
 800c6ac:	08011504 	.word	0x08011504
 800c6b0:	0800f0a0 	.word	0x0800f0a0
 800c6b4:	080114ec 	.word	0x080114ec

0800c6b8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6bc:	b082      	sub	sp, #8
 800c6be:	4688      	mov	r8, r1
 800c6c0:	4691      	mov	r9, r2
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6c8:	4606      	mov	r6, r0
{
 800c6ca:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	d050      	beq.n	800c774 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c6d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c6d6:	211c      	movs	r1, #28
 800c6d8:	200e      	movs	r0, #14
 800c6da:	f7fb f897 	bl	800780c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c6de:	4605      	mov	r5, r0
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d04f      	beq.n	800c784 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c6e4:	8943      	ldrh	r3, [r0, #10]
 800c6e6:	2b1b      	cmp	r3, #27
 800c6e8:	d93c      	bls.n	800c764 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c6ea:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 800c6ec:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 800c6ee:	f7fa f929 	bl	8006944 <lwip_htons>
 800c6f2:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c6f4:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800c6f8:	2b06      	cmp	r3, #6
 800c6fa:	d006      	beq.n	800c70a <etharp_raw+0x52>
 800c6fc:	4b23      	ldr	r3, [pc, #140]	; (800c78c <etharp_raw+0xd4>)
 800c6fe:	f240 4269 	movw	r2, #1129	; 0x469
 800c702:	4923      	ldr	r1, [pc, #140]	; (800c790 <etharp_raw+0xd8>)
 800c704:	4823      	ldr	r0, [pc, #140]	; (800c794 <etharp_raw+0xdc>)
 800c706:	f001 fd7f 	bl	800e208 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c70a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c70c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c70e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c710:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c712:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c714:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c716:	88b9      	ldrh	r1, [r7, #4]
 800c718:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c71a:	f8da 1000 	ldr.w	r1, [sl]
 800c71e:	f8c4 1012 	str.w	r1, [r4, #18]
 800c722:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 800c726:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c728:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c72a:	6809      	ldr	r1, [r1, #0]
 800c72c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c730:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c732:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c734:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c736:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c738:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c73a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c73c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c73e:	2108      	movs	r1, #8
 800c740:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800c742:	2106      	movs	r1, #6
 800c744:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c746:	2104      	movs	r1, #4
 800c748:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c74a:	f640 0106 	movw	r1, #2054	; 0x806
 800c74e:	9100      	str	r1, [sp, #0]
 800c750:	4629      	mov	r1, r5
 800c752:	f001 fabb 	bl	800dccc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c756:	4628      	mov	r0, r5
 800c758:	f7fb fa1c 	bl	8007b94 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800c75c:	4630      	mov	r0, r6
}
 800c75e:	b002      	add	sp, #8
 800c760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c764:	4b09      	ldr	r3, [pc, #36]	; (800c78c <etharp_raw+0xd4>)
 800c766:	f240 4262 	movw	r2, #1122	; 0x462
 800c76a:	490b      	ldr	r1, [pc, #44]	; (800c798 <etharp_raw+0xe0>)
 800c76c:	4809      	ldr	r0, [pc, #36]	; (800c794 <etharp_raw+0xdc>)
 800c76e:	f001 fd4b 	bl	800e208 <iprintf>
 800c772:	e7ba      	b.n	800c6ea <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c774:	4b05      	ldr	r3, [pc, #20]	; (800c78c <etharp_raw+0xd4>)
 800c776:	f240 4257 	movw	r2, #1111	; 0x457
 800c77a:	4908      	ldr	r1, [pc, #32]	; (800c79c <etharp_raw+0xe4>)
 800c77c:	4805      	ldr	r0, [pc, #20]	; (800c794 <etharp_raw+0xdc>)
 800c77e:	f001 fd43 	bl	800e208 <iprintf>
 800c782:	e7a6      	b.n	800c6d2 <etharp_raw+0x1a>
    return ERR_MEM;
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	e7e9      	b.n	800c75e <etharp_raw+0xa6>
 800c78a:	bf00      	nop
 800c78c:	080114b4 	.word	0x080114b4
 800c790:	08011564 	.word	0x08011564
 800c794:	0800f0a0 	.word	0x0800f0a0
 800c798:	08011530 	.word	0x08011530
 800c79c:	0800f890 	.word	0x0800f890

0800c7a0 <etharp_output_to_arp_index>:
{
 800c7a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7a4:	4f37      	ldr	r7, [pc, #220]	; (800c884 <etharp_output_to_arp_index+0xe4>)
 800c7a6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7ae:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7b6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 800c7ba:	f899 3014 	ldrb.w	r3, [r9, #20]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d93c      	bls.n	800c83c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d011      	beq.n	800c7ea <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7c6:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c7c8:	f105 0926 	add.w	r9, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c7cc:	fb02 7404 	mla	r4, r2, r4, r7
 800c7d0:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c7d2:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800c7d6:	4623      	mov	r3, r4
 800c7d8:	464a      	mov	r2, r9
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4628      	mov	r0, r5
 800c7de:	9700      	str	r7, [sp, #0]
 800c7e0:	f001 fa74 	bl	800dccc <ethernet_output>
}
 800c7e4:	b005      	add	sp, #20
 800c7e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c7ea:	44a0      	add	r8, r4
 800c7ec:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 800c7f0:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800c7f4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c7f8:	d82a      	bhi.n	800c850 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c7fe:	d3e2      	bcc.n	800c7c6 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c800:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c804:	2301      	movs	r3, #1
 800c806:	f105 0926 	add.w	r9, r5, #38	; 0x26
 800c80a:	4628      	mov	r0, r5
 800c80c:	00e4      	lsls	r4, r4, #3
 800c80e:	9303      	str	r3, [sp, #12]
 800c810:	4b1d      	ldr	r3, [pc, #116]	; (800c888 <etharp_output_to_arp_index+0xe8>)
 800c812:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c814:	f104 020c 	add.w	r2, r4, #12
 800c818:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c81c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c81e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c820:	18bc      	adds	r4, r7, r2
 800c822:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c824:	9300      	str	r3, [sp, #0]
 800c826:	464b      	mov	r3, r9
 800c828:	4622      	mov	r2, r4
 800c82a:	9702      	str	r7, [sp, #8]
 800c82c:	f7ff ff44 	bl	800c6b8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c830:	2800      	cmp	r0, #0
 800c832:	d1ce      	bne.n	800c7d2 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c834:	2303      	movs	r3, #3
 800c836:	f888 3014 	strb.w	r3, [r8, #20]
 800c83a:	e7ca      	b.n	800c7d2 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c83c:	4b13      	ldr	r3, [pc, #76]	; (800c88c <etharp_output_to_arp_index+0xec>)
 800c83e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c842:	4913      	ldr	r1, [pc, #76]	; (800c890 <etharp_output_to_arp_index+0xf0>)
 800c844:	4813      	ldr	r0, [pc, #76]	; (800c894 <etharp_output_to_arp_index+0xf4>)
 800c846:	f001 fcdf 	bl	800e208 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c84a:	f899 3014 	ldrb.w	r3, [r9, #20]
 800c84e:	e7b8      	b.n	800c7c2 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c850:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c854:	2301      	movs	r3, #1
 800c856:	f105 0926 	add.w	r9, r5, #38	; 0x26
 800c85a:	4a0f      	ldr	r2, [pc, #60]	; (800c898 <etharp_output_to_arp_index+0xf8>)
 800c85c:	00e4      	lsls	r4, r4, #3
 800c85e:	9303      	str	r3, [sp, #12]
 800c860:	4649      	mov	r1, r9
 800c862:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c864:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c866:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c868:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c86a:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c86c:	9302      	str	r3, [sp, #8]
 800c86e:	4b06      	ldr	r3, [pc, #24]	; (800c888 <etharp_output_to_arp_index+0xe8>)
 800c870:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c872:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	464b      	mov	r3, r9
 800c878:	f7ff ff1e 	bl	800c6b8 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d0d9      	beq.n	800c834 <etharp_output_to_arp_index+0x94>
 800c880:	e7a7      	b.n	800c7d2 <etharp_output_to_arp_index+0x32>
 800c882:	bf00      	nop
 800c884:	240105e4 	.word	0x240105e4
 800c888:	08011990 	.word	0x08011990
 800c88c:	080114b4 	.word	0x080114b4
 800c890:	080115a8 	.word	0x080115a8
 800c894:	0800f0a0 	.word	0x0800f0a0
 800c898:	08011988 	.word	0x08011988

0800c89c <etharp_tmr>:
{
 800c89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a0:	4c20      	ldr	r4, [pc, #128]	; (800c924 <etharp_tmr+0x88>)
 800c8a2:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c8a4:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c8a6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800c92c <etharp_tmr+0x90>
 800c8aa:	4f1f      	ldr	r7, [pc, #124]	; (800c928 <etharp_tmr+0x8c>)
 800c8ac:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 800c8b0:	e00c      	b.n	800c8cc <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c8b2:	2a01      	cmp	r2, #1
 800c8b4:	d101      	bne.n	800c8ba <etharp_tmr+0x1e>
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d812      	bhi.n	800c8e0 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c8ba:	2a03      	cmp	r2, #3
 800c8bc:	d01e      	beq.n	800c8fc <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c8be:	2a04      	cmp	r2, #4
 800c8c0:	d01f      	beq.n	800c902 <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8c2:	2a01      	cmp	r2, #1
 800c8c4:	d020      	beq.n	800c908 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8c6:	3418      	adds	r4, #24
 800c8c8:	42ac      	cmp	r4, r5
 800c8ca:	d014      	beq.n	800c8f6 <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 800c8cc:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800c8ce:	2a00      	cmp	r2, #0
 800c8d0:	d0f9      	beq.n	800c8c6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800c8d2:	89e3      	ldrh	r3, [r4, #14]
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800c8dc:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c8de:	d3e8      	bcc.n	800c8b2 <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 800c8e0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800c8e4:	b118      	cbz	r0, 800c8ee <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 800c8e6:	f7fb f955 	bl	8007b94 <pbuf_free>
    arp_table[i].q = NULL;
 800c8ea:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c8ee:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8f0:	3418      	adds	r4, #24
 800c8f2:	42ac      	cmp	r4, r5
 800c8f4:	d1ea      	bne.n	800c8cc <etharp_tmr+0x30>
}
 800c8f6:	b004      	add	sp, #16
 800c8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	7423      	strb	r3, [r4, #16]
 800c900:	e7e1      	b.n	800c8c6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c902:	2302      	movs	r3, #2
 800c904:	7423      	strb	r3, [r4, #16]
 800c906:	e7de      	b.n	800c8c6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c908:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c90a:	f8cd 8004 	str.w	r8, [sp, #4]
 800c90e:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c912:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c914:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800c918:	9100      	str	r1, [sp, #0]
 800c91a:	463a      	mov	r2, r7
 800c91c:	4619      	mov	r1, r3
 800c91e:	f7ff fecb 	bl	800c6b8 <etharp_raw>
 800c922:	e7d0      	b.n	800c8c6 <etharp_tmr+0x2a>
 800c924:	240105e8 	.word	0x240105e8
 800c928:	08011988 	.word	0x08011988
 800c92c:	08011990 	.word	0x08011990

0800c930 <etharp_cleanup_netif>:
{
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	4c0a      	ldr	r4, [pc, #40]	; (800c95c <etharp_cleanup_netif+0x2c>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c934:	2700      	movs	r7, #0
{
 800c936:	4606      	mov	r6, r0
 800c938:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c93c:	7d23      	ldrb	r3, [r4, #20]
 800c93e:	b113      	cbz	r3, 800c946 <etharp_cleanup_netif+0x16>
 800c940:	68a3      	ldr	r3, [r4, #8]
 800c942:	42b3      	cmp	r3, r6
 800c944:	d003      	beq.n	800c94e <etharp_cleanup_netif+0x1e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c946:	3418      	adds	r4, #24
 800c948:	42ac      	cmp	r4, r5
 800c94a:	d1f7      	bne.n	800c93c <etharp_cleanup_netif+0xc>
}
 800c94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (arp_table[i].q != NULL) {
 800c94e:	6820      	ldr	r0, [r4, #0]
 800c950:	b110      	cbz	r0, 800c958 <etharp_cleanup_netif+0x28>
    free_etharp_q(arp_table[i].q);
 800c952:	f7fb f91f 	bl	8007b94 <pbuf_free>
    arp_table[i].q = NULL;
 800c956:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c958:	7527      	strb	r7, [r4, #20]
}
 800c95a:	e7f4      	b.n	800c946 <etharp_cleanup_netif+0x16>
 800c95c:	240105e4 	.word	0x240105e4

0800c960 <etharp_input>:
{
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	460d      	mov	r5, r1
 800c966:	b086      	sub	sp, #24
 800c968:	4604      	mov	r4, r0
  LWIP_ASSERT_CORE_LOCKED();
 800c96a:	f7f7 faab 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c96e:	2d00      	cmp	r5, #0
 800c970:	d07b      	beq.n	800ca6a <etharp_input+0x10a>
  hdr = (struct etharp_hdr *)p->payload;
 800c972:	6866      	ldr	r6, [r4, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c974:	8833      	ldrh	r3, [r6, #0]
 800c976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c97a:	d102      	bne.n	800c982 <etharp_input+0x22>
 800c97c:	7933      	ldrb	r3, [r6, #4]
 800c97e:	2b06      	cmp	r3, #6
 800c980:	d005      	beq.n	800c98e <etharp_input+0x2e>
    pbuf_free(p);
 800c982:	4620      	mov	r0, r4
}
 800c984:	b006      	add	sp, #24
 800c986:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 800c98a:	f7fb b903 	b.w	8007b94 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c98e:	7973      	ldrb	r3, [r6, #5]
 800c990:	2b04      	cmp	r3, #4
 800c992:	d1f6      	bne.n	800c982 <etharp_input+0x22>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c994:	8873      	ldrh	r3, [r6, #2]
 800c996:	2b08      	cmp	r3, #8
 800c998:	d1f3      	bne.n	800c982 <etharp_input+0x22>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c99a:	f8d6 000e 	ldr.w	r0, [r6, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c99e:	686f      	ldr	r7, [r5, #4]
 800c9a0:	69b3      	ldr	r3, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9a2:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9a4:	2f00      	cmp	r7, #0
 800c9a6:	d06a      	beq.n	800ca7e <etharp_input+0x11e>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c9a8:	1aff      	subs	r7, r7, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9aa:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c9ae:	fab7 f787 	clz	r7, r7
 800c9b2:	097f      	lsrs	r7, r7, #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9b4:	f1c7 0a02 	rsb	sl, r7, #2
 800c9b8:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c9bc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800c9c0:	2b06      	cmp	r3, #6
 800c9c2:	d007      	beq.n	800c9d4 <etharp_input+0x74>
 800c9c4:	4b38      	ldr	r3, [pc, #224]	; (800caa8 <etharp_input+0x148>)
 800c9c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c9ca:	4938      	ldr	r1, [pc, #224]	; (800caac <etharp_input+0x14c>)
 800c9cc:	4838      	ldr	r0, [pc, #224]	; (800cab0 <etharp_input+0x150>)
 800c9ce:	f001 fc1b 	bl	800e208 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800c9d2:	9805      	ldr	r0, [sp, #20]
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	d03d      	beq.n	800ca54 <etharp_input+0xf4>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f000 fcb1 	bl	800d340 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800c9de:	4681      	mov	r9, r0
 800c9e0:	bbc0      	cbnz	r0, 800ca54 <etharp_input+0xf4>
      ip4_addr_ismulticast(ipaddr)) {
 800c9e2:	9b05      	ldr	r3, [sp, #20]
 800c9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9e8:	2be0      	cmp	r3, #224	; 0xe0
 800c9ea:	d033      	beq.n	800ca54 <etharp_input+0xf4>
  i = etharp_find_entry(ipaddr, flags, netif);
 800c9ec:	4651      	mov	r1, sl
 800c9ee:	462a      	mov	r2, r5
 800c9f0:	a805      	add	r0, sp, #20
 800c9f2:	f7ff fda9 	bl	800c548 <etharp_find_entry>
  if (i < 0) {
 800c9f6:	1e03      	subs	r3, r0, #0
 800c9f8:	db2c      	blt.n	800ca54 <etharp_input+0xf4>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c9fa:	492e      	ldr	r1, [pc, #184]	; (800cab4 <etharp_input+0x154>)
 800c9fc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ca00:	2002      	movs	r0, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca02:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ca06:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
 800ca0a:	00d2      	lsls	r2, r2, #3
 800ca0c:	f88c 0014 	strb.w	r0, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca10:	200c      	movs	r0, #12
  arp_table[i].netif = netif;
 800ca12:	f8cc 5008 	str.w	r5, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca16:	fb13 030e 	smlabb	r3, r3, lr, r0
 800ca1a:	f8d8 0000 	ldr.w	r0, [r8]
 800ca1e:	50c8      	str	r0, [r1, r3]
 800ca20:	440b      	add	r3, r1
 800ca22:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800ca26:	8098      	strh	r0, [r3, #4]
  if (arp_table[i].q != NULL) {
 800ca28:	f851 a002 	ldr.w	sl, [r1, r2]
  arp_table[i].ctime = 0;
 800ca2c:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 800ca30:	f1ba 0f00 	cmp.w	sl, #0
 800ca34:	d00e      	beq.n	800ca54 <etharp_input+0xf4>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca36:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 800ca3a:	f841 9002 	str.w	r9, [r1, r2]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	4651      	mov	r1, sl
 800ca48:	4643      	mov	r3, r8
 800ca4a:	f001 f93f 	bl	800dccc <ethernet_output>
    pbuf_free(p);
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7fb f8a0 	bl	8007b94 <pbuf_free>
  switch (hdr->opcode) {
 800ca54:	88f3      	ldrh	r3, [r6, #6]
      if (for_us) {
 800ca56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca5a:	d100      	bne.n	800ca5e <etharp_input+0xfe>
 800ca5c:	b9a7      	cbnz	r7, 800ca88 <etharp_input+0x128>
  pbuf_free(p);
 800ca5e:	4620      	mov	r0, r4
 800ca60:	f7fb f898 	bl	8007b94 <pbuf_free>
}
 800ca64:	b006      	add	sp, #24
 800ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ca6a:	4b0f      	ldr	r3, [pc, #60]	; (800caa8 <etharp_input+0x148>)
 800ca6c:	f240 228a 	movw	r2, #650	; 0x28a
 800ca70:	4911      	ldr	r1, [pc, #68]	; (800cab8 <etharp_input+0x158>)
 800ca72:	480f      	ldr	r0, [pc, #60]	; (800cab0 <etharp_input+0x150>)
}
 800ca74:	b006      	add	sp, #24
 800ca76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ca7a:	f001 bbc5 	b.w	800e208 <iprintf>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca7e:	f106 0808 	add.w	r8, r6, #8
 800ca82:	f04f 0a02 	mov.w	sl, #2
 800ca86:	e799      	b.n	800c9bc <etharp_input+0x5c>
        etharp_raw(netif,
 800ca88:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca8a:	f105 0326 	add.w	r3, r5, #38	; 0x26
        etharp_raw(netif,
 800ca8e:	4642      	mov	r2, r8
 800ca90:	4628      	mov	r0, r5
 800ca92:	9103      	str	r1, [sp, #12]
 800ca94:	a905      	add	r1, sp, #20
 800ca96:	f8cd 8004 	str.w	r8, [sp, #4]
 800ca9a:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca9c:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 800ca9e:	9100      	str	r1, [sp, #0]
 800caa0:	4619      	mov	r1, r3
 800caa2:	f7ff fe09 	bl	800c6b8 <etharp_raw>
 800caa6:	e7da      	b.n	800ca5e <etharp_input+0xfe>
 800caa8:	080114b4 	.word	0x080114b4
 800caac:	080115f8 	.word	0x080115f8
 800cab0:	0800f0a0 	.word	0x0800f0a0
 800cab4:	240105e4 	.word	0x240105e4
 800cab8:	0800f890 	.word	0x0800f890

0800cabc <etharp_query>:
{
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	4689      	mov	r9, r1
 800cac2:	b085      	sub	sp, #20
 800cac4:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cac6:	4601      	mov	r1, r0
 800cac8:	f8d9 0000 	ldr.w	r0, [r9]
{
 800cacc:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cace:	f000 fc37 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	f040 80ac 	bne.w	800cc30 <etharp_query+0x174>
      ip4_addr_ismulticast(ipaddr) ||
 800cad8:	f8d9 3000 	ldr.w	r3, [r9]
 800cadc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 800cae0:	2ae0      	cmp	r2, #224	; 0xe0
 800cae2:	f000 80a5 	beq.w	800cc30 <etharp_query+0x174>
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 80a2 	beq.w	800cc30 <etharp_query+0x174>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800caec:	462a      	mov	r2, r5
 800caee:	2101      	movs	r1, #1
 800caf0:	4648      	mov	r0, r9
 800caf2:	f7ff fd29 	bl	800c548 <etharp_find_entry>
  if (i_err < 0) {
 800caf6:	1e04      	subs	r4, r0, #0
 800caf8:	db50      	blt.n	800cb9c <etharp_query+0xe0>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cafa:	2c7e      	cmp	r4, #126	; 0x7e
 800cafc:	dc46      	bgt.n	800cb8c <etharp_query+0xd0>
  i = (netif_addr_idx_t)i_err;
 800cafe:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cb00:	4f4e      	ldr	r7, [pc, #312]	; (800cc3c <etharp_query+0x180>)
 800cb02:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cb06:	ea4f 0844 	mov.w	r8, r4, lsl #1
 800cb0a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800cb0e:	7d1a      	ldrb	r2, [r3, #20]
 800cb10:	b182      	cbz	r2, 800cb34 <etharp_query+0x78>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cb12:	f105 0a26 	add.w	sl, r5, #38	; 0x26
  if (is_new_entry || (q == NULL)) {
 800cb16:	2e00      	cmp	r6, #0
 800cb18:	d07c      	beq.n	800cc14 <etharp_query+0x158>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb1a:	eb08 0204 	add.w	r2, r8, r4
  err_t result = ERR_MEM;
 800cb1e:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb22:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800cb26:	7d13      	ldrb	r3, [r2, #20]
 800cb28:	2b01      	cmp	r3, #1
 800cb2a:	d81e      	bhi.n	800cb6a <etharp_query+0xae>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cb2c:	d03a      	beq.n	800cba4 <etharp_query+0xe8>
}
 800cb2e:	b005      	add	sp, #20
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cb34:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb36:	f8cd 9008 	str.w	r9, [sp, #8]
    arp_table[i].netif = netif;
 800cb3a:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cb3c:	f105 0a26 	add.w	sl, r5, #38	; 0x26
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cb40:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb42:	4628      	mov	r0, r5
 800cb44:	4b3e      	ldr	r3, [pc, #248]	; (800cc40 <etharp_query+0x184>)
 800cb46:	4651      	mov	r1, sl
 800cb48:	9203      	str	r2, [sp, #12]
 800cb4a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cb4c:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cb4e:	4a3d      	ldr	r2, [pc, #244]	; (800cc44 <etharp_query+0x188>)
 800cb50:	9300      	str	r3, [sp, #0]
 800cb52:	4653      	mov	r3, sl
 800cb54:	f7ff fdb0 	bl	800c6b8 <etharp_raw>
    if (q == NULL) {
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	d0e8      	beq.n	800cb2e <etharp_query+0x72>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb5c:	eb08 0204 	add.w	r2, r8, r4
 800cb60:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800cb64:	7d13      	ldrb	r3, [r2, #20]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d9e0      	bls.n	800cb2c <etharp_query+0x70>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb6a:	2318      	movs	r3, #24
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800cb72:	4652      	mov	r2, sl
 800cb74:	fb03 7304 	mla	r3, r3, r4, r7
 800cb78:	4631      	mov	r1, r6
 800cb7a:	9500      	str	r5, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 800cb7c:	4d32      	ldr	r5, [pc, #200]	; (800cc48 <etharp_query+0x18c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb7e:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 800cb80:	702c      	strb	r4, [r5, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cb82:	f001 f8a3 	bl	800dccc <ethernet_output>
}
 800cb86:	b005      	add	sp, #20
 800cb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cb8c:	4b2f      	ldr	r3, [pc, #188]	; (800cc4c <etharp_query+0x190>)
 800cb8e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cb92:	492f      	ldr	r1, [pc, #188]	; (800cc50 <etharp_query+0x194>)
 800cb94:	482f      	ldr	r0, [pc, #188]	; (800cc54 <etharp_query+0x198>)
 800cb96:	f001 fb37 	bl	800e208 <iprintf>
 800cb9a:	e7b0      	b.n	800cafe <etharp_query+0x42>
    return (err_t)i_err;
 800cb9c:	b260      	sxtb	r0, r4
}
 800cb9e:	b005      	add	sp, #20
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	4635      	mov	r5, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cba6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800cc4c <etharp_query+0x190>
 800cbaa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800cc58 <etharp_query+0x19c>
 800cbae:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800cc54 <etharp_query+0x198>
 800cbb2:	e004      	b.n	800cbbe <etharp_query+0x102>
      if (PBUF_NEEDS_COPY(p)) {
 800cbb4:	7b2b      	ldrb	r3, [r5, #12]
 800cbb6:	065a      	lsls	r2, r3, #25
 800cbb8:	d412      	bmi.n	800cbe0 <etharp_query+0x124>
      p = p->next;
 800cbba:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800cbbc:	b335      	cbz	r5, 800cc0c <etharp_query+0x150>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cbbe:	896a      	ldrh	r2, [r5, #10]
 800cbc0:	892b      	ldrh	r3, [r5, #8]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d1f6      	bne.n	800cbb4 <etharp_query+0xf8>
 800cbc6:	682a      	ldr	r2, [r5, #0]
 800cbc8:	464b      	mov	r3, r9
 800cbca:	b132      	cbz	r2, 800cbda <etharp_query+0x11e>
 800cbcc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cbd0:	4659      	mov	r1, fp
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	f001 fb18 	bl	800e208 <iprintf>
 800cbd8:	e7ec      	b.n	800cbb4 <etharp_query+0xf8>
      if (PBUF_NEEDS_COPY(p)) {
 800cbda:	7b2b      	ldrb	r3, [r5, #12]
 800cbdc:	065b      	lsls	r3, r3, #25
 800cbde:	d515      	bpl.n	800cc0c <etharp_query+0x150>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cbe0:	4632      	mov	r2, r6
 800cbe2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cbe6:	200e      	movs	r0, #14
 800cbe8:	f7fb f8b8 	bl	8007d5c <pbuf_clone>
    if (p != NULL) {
 800cbec:	4606      	mov	r6, r0
 800cbee:	b310      	cbz	r0, 800cc36 <etharp_query+0x17a>
      if (arp_table[i].q != NULL) {
 800cbf0:	eb08 0304 	add.w	r3, r8, r4
 800cbf4:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
 800cbf8:	b108      	cbz	r0, 800cbfe <etharp_query+0x142>
        pbuf_free(arp_table[i].q);
 800cbfa:	f7fa ffcb 	bl	8007b94 <pbuf_free>
      arp_table[i].q = p;
 800cbfe:	4444      	add	r4, r8
      result = ERR_OK;
 800cc00:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800cc02:	f847 6034 	str.w	r6, [r7, r4, lsl #3]
}
 800cc06:	b005      	add	sp, #20
 800cc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pbuf_ref(p);
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f7fa ffdf 	bl	8007bd0 <pbuf_ref>
    if (p != NULL) {
 800cc12:	e7ed      	b.n	800cbf0 <etharp_query+0x134>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc14:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc16:	2301      	movs	r3, #1
 800cc18:	4c09      	ldr	r4, [pc, #36]	; (800cc40 <etharp_query+0x184>)
 800cc1a:	4651      	mov	r1, sl
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800cc22:	e9cd 2400 	strd	r2, r4, [sp]
 800cc26:	4653      	mov	r3, sl
 800cc28:	4a06      	ldr	r2, [pc, #24]	; (800cc44 <etharp_query+0x188>)
 800cc2a:	f7ff fd45 	bl	800c6b8 <etharp_raw>
    if (q == NULL) {
 800cc2e:	e77e      	b.n	800cb2e <etharp_query+0x72>
    return ERR_ARG;
 800cc30:	f06f 000f 	mvn.w	r0, #15
 800cc34:	e77b      	b.n	800cb2e <etharp_query+0x72>
      result = ERR_MEM;
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	e778      	b.n	800cb2e <etharp_query+0x72>
 800cc3c:	240105e4 	.word	0x240105e4
 800cc40:	08011990 	.word	0x08011990
 800cc44:	08011988 	.word	0x08011988
 800cc48:	240106d4 	.word	0x240106d4
 800cc4c:	080114b4 	.word	0x080114b4
 800cc50:	0801161c 	.word	0x0801161c
 800cc54:	0800f0a0 	.word	0x0800f0a0
 800cc58:	0801162c 	.word	0x0801162c

0800cc5c <etharp_output>:
{
 800cc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc5e:	4605      	mov	r5, r0
 800cc60:	b085      	sub	sp, #20
 800cc62:	460f      	mov	r7, r1
 800cc64:	4616      	mov	r6, r2
  LWIP_ASSERT_CORE_LOCKED();
 800cc66:	f7f7 f92d 	bl	8003ec4 <sys_check_core_locking>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc6a:	2d00      	cmp	r5, #0
 800cc6c:	f000 8083 	beq.w	800cd76 <etharp_output+0x11a>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc70:	2f00      	cmp	r7, #0
 800cc72:	d06f      	beq.n	800cd54 <etharp_output+0xf8>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc74:	2e00      	cmp	r6, #0
 800cc76:	d076      	beq.n	800cd66 <etharp_output+0x10a>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc78:	4629      	mov	r1, r5
 800cc7a:	6830      	ldr	r0, [r6, #0]
 800cc7c:	f000 fb60 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800cc80:	2800      	cmp	r0, #0
 800cc82:	d165      	bne.n	800cd50 <etharp_output+0xf4>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc84:	6833      	ldr	r3, [r6, #0]
 800cc86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cc8a:	2ae0      	cmp	r2, #224	; 0xe0
 800cc8c:	d039      	beq.n	800cd02 <etharp_output+0xa6>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc8e:	686a      	ldr	r2, [r5, #4]
 800cc90:	68a9      	ldr	r1, [r5, #8]
 800cc92:	405a      	eors	r2, r3
 800cc94:	420a      	tst	r2, r1
 800cc96:	d009      	beq.n	800ccac <etharp_output+0x50>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc98:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc9a:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d004      	beq.n	800ccac <etharp_output+0x50>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cca2:	68eb      	ldr	r3, [r5, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d078      	beq.n	800cd9a <etharp_output+0x13e>
            dst_addr = netif_ip4_gw(netif);
 800cca8:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccac:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800cdbc <etharp_output+0x160>
 800ccb0:	4b3b      	ldr	r3, [pc, #236]	; (800cda0 <etharp_output+0x144>)
 800ccb2:	f89c 2000 	ldrb.w	r2, [ip]
 800ccb6:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800ccba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800ccbe:	7d19      	ldrb	r1, [r3, #20]
 800ccc0:	2901      	cmp	r1, #1
 800ccc2:	d902      	bls.n	800ccca <etharp_output+0x6e>
 800ccc4:	6899      	ldr	r1, [r3, #8]
 800ccc6:	42a9      	cmp	r1, r5
 800ccc8:	d060      	beq.n	800cd8c <etharp_output+0x130>
 800ccca:	4c35      	ldr	r4, [pc, #212]	; (800cda0 <etharp_output+0x144>)
{
 800cccc:	2300      	movs	r3, #0
 800ccce:	e003      	b.n	800ccd8 <etharp_output+0x7c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccd0:	2b0a      	cmp	r3, #10
 800ccd2:	f104 0418 	add.w	r4, r4, #24
 800ccd6:	d033      	beq.n	800cd40 <etharp_output+0xe4>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccd8:	7d20      	ldrb	r0, [r4, #20]
 800ccda:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ccdc:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ccde:	2801      	cmp	r0, #1
 800cce0:	d9f6      	bls.n	800ccd0 <etharp_output+0x74>
 800cce2:	68a1      	ldr	r1, [r4, #8]
 800cce4:	42a9      	cmp	r1, r5
 800cce6:	d1f3      	bne.n	800ccd0 <etharp_output+0x74>
          (arp_table[i].netif == netif) &&
 800cce8:	6830      	ldr	r0, [r6, #0]
 800ccea:	6861      	ldr	r1, [r4, #4]
 800ccec:	4288      	cmp	r0, r1
 800ccee:	d1ef      	bne.n	800ccd0 <etharp_output+0x74>
        return etharp_output_to_arp_index(netif, q, i);
 800ccf0:	4639      	mov	r1, r7
 800ccf2:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 800ccf4:	f88c 2000 	strb.w	r2, [ip]
}
 800ccf8:	b005      	add	sp, #20
 800ccfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 800ccfe:	f7ff bd4f 	b.w	800c7a0 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cd02:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cd04:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cd06:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cd08:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cd0c:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cd10:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cd12:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cd14:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cd18:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cd1c:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 800cd20:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cd22:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cd26:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd2a:	f44f 6400 	mov.w	r4, #2048	; 0x800
 800cd2e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800cd32:	4639      	mov	r1, r7
 800cd34:	4628      	mov	r0, r5
 800cd36:	9400      	str	r4, [sp, #0]
 800cd38:	f000 ffc8 	bl	800dccc <ethernet_output>
}
 800cd3c:	b005      	add	sp, #20
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return etharp_query(netif, dst_addr, q);
 800cd40:	463a      	mov	r2, r7
 800cd42:	4631      	mov	r1, r6
 800cd44:	4628      	mov	r0, r5
}
 800cd46:	b005      	add	sp, #20
 800cd48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 800cd4c:	f7ff beb6 	b.w	800cabc <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 800cd50:	4b14      	ldr	r3, [pc, #80]	; (800cda4 <etharp_output+0x148>)
 800cd52:	e7ea      	b.n	800cd2a <etharp_output+0xce>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd54:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <etharp_output+0x14c>)
 800cd56:	f240 321f 	movw	r2, #799	; 0x31f
 800cd5a:	4914      	ldr	r1, [pc, #80]	; (800cdac <etharp_output+0x150>)
 800cd5c:	4814      	ldr	r0, [pc, #80]	; (800cdb0 <etharp_output+0x154>)
 800cd5e:	f001 fa53 	bl	800e208 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cd62:	2e00      	cmp	r6, #0
 800cd64:	d188      	bne.n	800cc78 <etharp_output+0x1c>
 800cd66:	4b10      	ldr	r3, [pc, #64]	; (800cda8 <etharp_output+0x14c>)
 800cd68:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cd6c:	4911      	ldr	r1, [pc, #68]	; (800cdb4 <etharp_output+0x158>)
 800cd6e:	4810      	ldr	r0, [pc, #64]	; (800cdb0 <etharp_output+0x154>)
 800cd70:	f001 fa4a 	bl	800e208 <iprintf>
 800cd74:	e780      	b.n	800cc78 <etharp_output+0x1c>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd76:	4b0c      	ldr	r3, [pc, #48]	; (800cda8 <etharp_output+0x14c>)
 800cd78:	f240 321e 	movw	r2, #798	; 0x31e
 800cd7c:	490e      	ldr	r1, [pc, #56]	; (800cdb8 <etharp_output+0x15c>)
 800cd7e:	480c      	ldr	r0, [pc, #48]	; (800cdb0 <etharp_output+0x154>)
 800cd80:	f001 fa42 	bl	800e208 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cd84:	2f00      	cmp	r7, #0
 800cd86:	f47f af75 	bne.w	800cc74 <etharp_output+0x18>
 800cd8a:	e7e3      	b.n	800cd54 <etharp_output+0xf8>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	6831      	ldr	r1, [r6, #0]
 800cd90:	4299      	cmp	r1, r3
 800cd92:	d19a      	bne.n	800ccca <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd94:	4639      	mov	r1, r7
 800cd96:	4628      	mov	r0, r5
 800cd98:	e7ae      	b.n	800ccf8 <etharp_output+0x9c>
            return ERR_RTE;
 800cd9a:	f06f 0003 	mvn.w	r0, #3
 800cd9e:	e7cd      	b.n	800cd3c <etharp_output+0xe0>
 800cda0:	240105e4 	.word	0x240105e4
 800cda4:	08011988 	.word	0x08011988
 800cda8:	080114b4 	.word	0x080114b4
 800cdac:	08011648 	.word	0x08011648
 800cdb0:	0800f0a0 	.word	0x0800f0a0
 800cdb4:	080115d8 	.word	0x080115d8
 800cdb8:	0800f890 	.word	0x0800f890
 800cdbc:	240106d4 	.word	0x240106d4

0800cdc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cdc0:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdc2:	2301      	movs	r3, #1
{
 800cdc4:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdc6:	4c07      	ldr	r4, [pc, #28]	; (800cde4 <etharp_request+0x24>)
 800cdc8:	4a07      	ldr	r2, [pc, #28]	; (800cde8 <etharp_request+0x28>)
 800cdca:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cdcc:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cdce:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800cdd2:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800cdd6:	9400      	str	r4, [sp, #0]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	f7ff fc6d 	bl	800c6b8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800cdde:	b004      	add	sp, #16
 800cde0:	bd10      	pop	{r4, pc}
 800cde2:	bf00      	nop
 800cde4:	08011990 	.word	0x08011990
 800cde8:	08011988 	.word	0x08011988

0800cdec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cdec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdee:	460e      	mov	r6, r1
 800cdf0:	b087      	sub	sp, #28
 800cdf2:	4617      	mov	r7, r2
 800cdf4:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cdf6:	2124      	movs	r1, #36	; 0x24
 800cdf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdfc:	2022      	movs	r0, #34	; 0x22
 800cdfe:	f7fa fd05 	bl	800780c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800ce02:	b3a8      	cbz	r0, 800ce70 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce04:	8943      	ldrh	r3, [r0, #10]
 800ce06:	4605      	mov	r5, r0
 800ce08:	2b23      	cmp	r3, #35	; 0x23
 800ce0a:	d933      	bls.n	800ce74 <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ce0c:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ce0e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800ce10:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 800ce12:	2600      	movs	r6, #0
  icmphdr->code = code;
 800ce14:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800ce16:	7126      	strb	r6, [r4, #4]
 800ce18:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 800ce1a:	71a6      	strb	r6, [r4, #6]
 800ce1c:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	6859      	ldr	r1, [r3, #4]
 800ce22:	689a      	ldr	r2, [r3, #8]
 800ce24:	68df      	ldr	r7, [r3, #12]
 800ce26:	60a0      	str	r0, [r4, #8]
 800ce28:	6167      	str	r7, [r4, #20]
 800ce2a:	60e1      	str	r1, [r4, #12]
 800ce2c:	6122      	str	r2, [r4, #16]
 800ce2e:	6918      	ldr	r0, [r3, #16]
 800ce30:	6959      	ldr	r1, [r3, #20]
 800ce32:	699a      	ldr	r2, [r3, #24]
 800ce34:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ce36:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ce38:	61e1      	str	r1, [r4, #28]
 800ce3a:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800ce40:	f000 f8d6 	bl	800cff0 <ip4_route>
#endif
  if (netif != NULL) {
 800ce44:	4607      	mov	r7, r0
 800ce46:	b180      	cbz	r0, 800ce6a <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce48:	8969      	ldrh	r1, [r5, #10]
 800ce4a:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 800ce4c:	70a6      	strb	r6, [r4, #2]
 800ce4e:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce50:	f7f9 fdbc 	bl	80069cc <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce54:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800ce56:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800ce58:	aa05      	add	r2, sp, #20
 800ce5a:	4631      	mov	r1, r6
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	9600      	str	r6, [sp, #0]
 800ce60:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800ce64:	23ff      	movs	r3, #255	; 0xff
 800ce66:	f000 fa59 	bl	800d31c <ip4_output_if>
  }
  pbuf_free(q);
 800ce6a:	4628      	mov	r0, r5
 800ce6c:	f7fa fe92 	bl	8007b94 <pbuf_free>
}
 800ce70:	b007      	add	sp, #28
 800ce72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <icmp_send_response+0x98>)
 800ce76:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ce7a:	4903      	ldr	r1, [pc, #12]	; (800ce88 <icmp_send_response+0x9c>)
 800ce7c:	4803      	ldr	r0, [pc, #12]	; (800ce8c <icmp_send_response+0xa0>)
 800ce7e:	f001 f9c3 	bl	800e208 <iprintf>
 800ce82:	e7c3      	b.n	800ce0c <icmp_send_response+0x20>
 800ce84:	08011654 	.word	0x08011654
 800ce88:	0801168c 	.word	0x0801168c
 800ce8c:	0800f0a0 	.word	0x0800f0a0

0800ce90 <icmp_input>:
{
 800ce90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800ce94:	4f4c      	ldr	r7, [pc, #304]	; (800cfc8 <icmp_input+0x138>)
{
 800ce96:	b087      	sub	sp, #28
 800ce98:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800ce9a:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800ce9e:	f898 4000 	ldrb.w	r4, [r8]
 800cea2:	f004 040f 	and.w	r4, r4, #15
 800cea6:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 800cea8:	2c13      	cmp	r4, #19
 800ceaa:	d913      	bls.n	800ced4 <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 800ceac:	8943      	ldrh	r3, [r0, #10]
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d910      	bls.n	800ced4 <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 800ceb2:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b08      	cmp	r3, #8
 800ceb8:	d10c      	bne.n	800ced4 <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ceba:	6978      	ldr	r0, [r7, #20]
 800cebc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800cec0:	2be0      	cmp	r3, #224	; 0xe0
 800cec2:	d007      	beq.n	800ced4 <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cec4:	460e      	mov	r6, r1
 800cec6:	6839      	ldr	r1, [r7, #0]
 800cec8:	f000 fa3a 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800cecc:	b910      	cbnz	r0, 800ced4 <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cece:	892b      	ldrh	r3, [r5, #8]
 800ced0:	2b07      	cmp	r3, #7
 800ced2:	d805      	bhi.n	800cee0 <icmp_input+0x50>
  pbuf_free(p);
 800ced4:	4628      	mov	r0, r5
}
 800ced6:	b007      	add	sp, #28
 800ced8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800cedc:	f7fa be5a 	b.w	8007b94 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 800cee0:	4628      	mov	r0, r5
 800cee2:	f7f9 fd79 	bl	80069d8 <inet_chksum_pbuf>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d1f4      	bne.n	800ced4 <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ceea:	f104 010e 	add.w	r1, r4, #14
 800ceee:	4628      	mov	r0, r5
 800cef0:	9105      	str	r1, [sp, #20]
 800cef2:	f7fa fdab 	bl	8007a4c <pbuf_add_header>
 800cef6:	9905      	ldr	r1, [sp, #20]
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d04b      	beq.n	800cf94 <icmp_input+0x104>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cefc:	892b      	ldrh	r3, [r5, #8]
 800cefe:	1919      	adds	r1, r3, r4
 800cf00:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800cf02:	428b      	cmp	r3, r1
 800cf04:	d8e6      	bhi.n	800ced4 <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cf06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf0a:	200e      	movs	r0, #14
 800cf0c:	f7fa fc7e 	bl	800780c <pbuf_alloc>
        if (r == NULL) {
 800cf10:	4681      	mov	r9, r0
 800cf12:	2800      	cmp	r0, #0
 800cf14:	d0de      	beq.n	800ced4 <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cf16:	8942      	ldrh	r2, [r0, #10]
 800cf18:	f104 0308 	add.w	r3, r4, #8
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d345      	bcc.n	800cfac <icmp_input+0x11c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800cf20:	4641      	mov	r1, r8
 800cf22:	4622      	mov	r2, r4
 800cf24:	6840      	ldr	r0, [r0, #4]
 800cf26:	f001 f8c4 	bl	800e0b2 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	f7fa fdc1 	bl	8007ab4 <pbuf_remove_header>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d13e      	bne.n	800cfb4 <icmp_input+0x124>
        if (pbuf_copy(r, p) != ERR_OK) {
 800cf36:	4629      	mov	r1, r5
 800cf38:	4648      	mov	r0, r9
 800cf3a:	f7fa fea3 	bl	8007c84 <pbuf_copy>
 800cf3e:	2800      	cmp	r0, #0
 800cf40:	d134      	bne.n	800cfac <icmp_input+0x11c>
        pbuf_free(p);
 800cf42:	4628      	mov	r0, r5
 800cf44:	464d      	mov	r5, r9
 800cf46:	f7fa fe25 	bl	8007b94 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cf4e:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800cf50:	f7fa fd7c 	bl	8007a4c <pbuf_add_header>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	d1bd      	bne.n	800ced4 <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cf58:	6869      	ldr	r1, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf5a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf66:	8863      	ldrh	r3, [r4, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cf68:	7020      	strb	r0, [r4, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cf6a:	4628      	mov	r0, r5
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cf6c:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 800cf6e:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800cf72:	bf8c      	ite	hi
 800cf74:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cf76:	3308      	addls	r3, #8
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	8063      	strh	r3, [r4, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cf7c:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 800cf7e:	728a      	strb	r2, [r1, #10]
 800cf80:	72ca      	strb	r2, [r1, #11]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cf82:	720b      	strb	r3, [r1, #8]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cf84:	2101      	movs	r1, #1
 800cf86:	9200      	str	r2, [sp, #0]
 800cf88:	e9cd 1601 	strd	r1, r6, [sp, #4]
 800cf8c:	490f      	ldr	r1, [pc, #60]	; (800cfcc <icmp_input+0x13c>)
 800cf8e:	f000 f9c5 	bl	800d31c <ip4_output_if>
  pbuf_free(p);
 800cf92:	e79f      	b.n	800ced4 <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cf94:	4628      	mov	r0, r5
 800cf96:	f7fa fd8d 	bl	8007ab4 <pbuf_remove_header>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d0d5      	beq.n	800cf4a <icmp_input+0xba>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cf9e:	4b0c      	ldr	r3, [pc, #48]	; (800cfd0 <icmp_input+0x140>)
 800cfa0:	22c7      	movs	r2, #199	; 0xc7
 800cfa2:	490c      	ldr	r1, [pc, #48]	; (800cfd4 <icmp_input+0x144>)
 800cfa4:	480c      	ldr	r0, [pc, #48]	; (800cfd8 <icmp_input+0x148>)
 800cfa6:	f001 f92f 	bl	800e208 <iprintf>
          goto icmperr;
 800cfaa:	e793      	b.n	800ced4 <icmp_input+0x44>
          pbuf_free(r);
 800cfac:	4648      	mov	r0, r9
 800cfae:	f7fa fdf1 	bl	8007b94 <pbuf_free>
          goto icmperr;
 800cfb2:	e78f      	b.n	800ced4 <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <icmp_input+0x140>)
 800cfb6:	22b6      	movs	r2, #182	; 0xb6
 800cfb8:	4908      	ldr	r1, [pc, #32]	; (800cfdc <icmp_input+0x14c>)
 800cfba:	4807      	ldr	r0, [pc, #28]	; (800cfd8 <icmp_input+0x148>)
 800cfbc:	f001 f924 	bl	800e208 <iprintf>
          pbuf_free(r);
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f7fa fde7 	bl	8007b94 <pbuf_free>
          goto icmperr;
 800cfc6:	e785      	b.n	800ced4 <icmp_input+0x44>
 800cfc8:	24009ab8 	.word	0x24009ab8
 800cfcc:	24009acc 	.word	0x24009acc
 800cfd0:	08011654 	.word	0x08011654
 800cfd4:	080116f0 	.word	0x080116f0
 800cfd8:	0800f0a0 	.word	0x0800f0a0
 800cfdc:	080116b8 	.word	0x080116b8

0800cfe0 <icmp_dest_unreach>:
{
 800cfe0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800cfe2:	2103      	movs	r1, #3
 800cfe4:	f7ff bf02 	b.w	800cdec <icmp_send_response>

0800cfe8 <icmp_time_exceeded>:
{
 800cfe8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800cfea:	210b      	movs	r1, #11
 800cfec:	f7ff befe 	b.w	800cdec <icmp_send_response>

0800cff0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	4604      	mov	r4, r0
#if !LWIP_SINGLE_NETIF
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();
 800cff4:	f7f6 ff66 	bl	8003ec4 <sys_check_core_locking>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <ip4_route+0x60>)
 800cffa:	6818      	ldr	r0, [r3, #0]
 800cffc:	b1a0      	cbz	r0, 800d028 <ip4_route+0x38>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cffe:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d002:	07d9      	lsls	r1, r3, #31
 800d004:	d50d      	bpl.n	800d022 <ip4_route+0x32>
 800d006:	075a      	lsls	r2, r3, #29
 800d008:	d50b      	bpl.n	800d022 <ip4_route+0x32>
 800d00a:	6842      	ldr	r2, [r0, #4]
 800d00c:	b14a      	cbz	r2, 800d022 <ip4_route+0x32>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d00e:	6821      	ldr	r1, [r4, #0]
 800d010:	6885      	ldr	r5, [r0, #8]
 800d012:	404a      	eors	r2, r1
 800d014:	422a      	tst	r2, r5
 800d016:	d016      	beq.n	800d046 <ip4_route+0x56>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d018:	079b      	lsls	r3, r3, #30
 800d01a:	d402      	bmi.n	800d022 <ip4_route+0x32>
 800d01c:	68c3      	ldr	r3, [r0, #12]
 800d01e:	4299      	cmp	r1, r3
 800d020:	d011      	beq.n	800d046 <ip4_route+0x56>
  NETIF_FOREACH(netif) {
 800d022:	6800      	ldr	r0, [r0, #0]
 800d024:	2800      	cmp	r0, #0
 800d026:	d1ea      	bne.n	800cffe <ip4_route+0xe>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d028:	4b0a      	ldr	r3, [pc, #40]	; (800d054 <ip4_route+0x64>)
 800d02a:	6818      	ldr	r0, [r3, #0]
 800d02c:	b158      	cbz	r0, 800d046 <ip4_route+0x56>
 800d02e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d032:	f003 0305 	and.w	r3, r3, #5
 800d036:	2b05      	cmp	r3, #5
 800d038:	d106      	bne.n	800d048 <ip4_route+0x58>
 800d03a:	6843      	ldr	r3, [r0, #4]
 800d03c:	b133      	cbz	r3, 800d04c <ip4_route+0x5c>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d03e:	7823      	ldrb	r3, [r4, #0]
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d040:	2b7f      	cmp	r3, #127	; 0x7f
 800d042:	bf08      	it	eq
 800d044:	2000      	moveq	r0, #0
  }

  return netif_default;
}
 800d046:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d048:	2000      	movs	r0, #0
}
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
    return NULL;
 800d04c:	4618      	mov	r0, r3
}
 800d04e:	bd38      	pop	{r3, r4, r5, pc}
 800d050:	24010570 	.word	0x24010570
 800d054:	2401056c 	.word	0x2401056c

0800d058 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d05c:	4604      	mov	r4, r0
 800d05e:	460e      	mov	r6, r1
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
#if LWIP_RAW
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();
 800d060:	f7f6 ff30 	bl	8003ec4 <sys_check_core_locking>

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d064:	6867      	ldr	r7, [r4, #4]
  if (IPH_V(iphdr) != 4) {
 800d066:	783b      	ldrb	r3, [r7, #0]
 800d068:	091a      	lsrs	r2, r3, #4
 800d06a:	2a04      	cmp	r2, #4
 800d06c:	f040 808d 	bne.w	800d18a <ip4_input+0x132>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d070:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d074:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d076:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d07a:	f7f9 fc63 	bl	8006944 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d07e:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d080:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d082:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 800d084:	4283      	cmp	r3, r0
 800d086:	f200 8086 	bhi.w	800d196 <ip4_input+0x13e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d08a:	8963      	ldrh	r3, [r4, #10]
 800d08c:	42ab      	cmp	r3, r5
 800d08e:	d37c      	bcc.n	800d18a <ip4_input+0x132>
 800d090:	8923      	ldrh	r3, [r4, #8]
 800d092:	4543      	cmp	r3, r8
 800d094:	d379      	bcc.n	800d18a <ip4_input+0x132>
 800d096:	2d13      	cmp	r5, #19
 800d098:	d977      	bls.n	800d18a <ip4_input+0x132>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800d210 <ip4_input+0x1b8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d0a4:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0a8:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d0b0:	d076      	beq.n	800d1a0 <ip4_input+0x148>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d0b2:	f896 202d 	ldrb.w	r2, [r6, #45]	; 0x2d
 800d0b6:	07d2      	lsls	r2, r2, #31
 800d0b8:	d503      	bpl.n	800d0c2 <ip4_input+0x6a>
 800d0ba:	6872      	ldr	r2, [r6, #4]
 800d0bc:	2a00      	cmp	r2, #0
 800d0be:	f040 8082 	bne.w	800d1c6 <ip4_input+0x16e>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	2b7f      	cmp	r3, #127	; 0x7f
 800d0c6:	f000 8088 	beq.w	800d1da <ip4_input+0x182>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d0ca:	4b50      	ldr	r3, [pc, #320]	; (800d20c <ip4_input+0x1b4>)
 800d0cc:	681d      	ldr	r5, [r3, #0]
 800d0ce:	b92d      	cbnz	r5, 800d0dc <ip4_input+0x84>
 800d0d0:	e083      	b.n	800d1da <ip4_input+0x182>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d0d2:	f000 f935 	bl	800d340 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0d6:	b978      	cbnz	r0, 800d0f8 <ip4_input+0xa0>
        NETIF_FOREACH(netif) {
 800d0d8:	682d      	ldr	r5, [r5, #0]
 800d0da:	b16d      	cbz	r5, 800d0f8 <ip4_input+0xa0>
          if (netif == inp) {
 800d0dc:	42ae      	cmp	r6, r5
 800d0de:	d0fb      	beq.n	800d0d8 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d0e0:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800d0e4:	07db      	lsls	r3, r3, #31
 800d0e6:	d5f7      	bpl.n	800d0d8 <ip4_input+0x80>
 800d0e8:	686b      	ldr	r3, [r5, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0f4      	beq.n	800d0d8 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0ee:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d0f2:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d0f4:	4283      	cmp	r3, r0
 800d0f6:	d1ec      	bne.n	800d0d2 <ip4_input+0x7a>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d0f8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800d0fc:	4631      	mov	r1, r6
 800d0fe:	f000 f91f 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800d102:	2800      	cmp	r0, #0
 800d104:	d141      	bne.n	800d18a <ip4_input+0x132>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d106:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d10a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d10e:	2be0      	cmp	r3, #224	; 0xe0
 800d110:	d03b      	beq.n	800d18a <ip4_input+0x132>
      return ERR_OK;
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d112:	b3d5      	cbz	r5, 800d18a <ip4_input+0x132>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d114:	88fb      	ldrh	r3, [r7, #6]
 800d116:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d14b      	bne.n	800d1b6 <ip4_input+0x15e>
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 800d11e:	f8c8 7008 	str.w	r7, [r8, #8]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d122:	4649      	mov	r1, r9
 800d124:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800d126:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d12a:	783b      	ldrb	r3, [r7, #0]
 800d12c:	f003 030f 	and.w	r3, r3, #15
 800d130:	009b      	lsls	r3, r3, #2
 800d132:	f8a8 300c 	strh.w	r3, [r8, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d136:	f7fa fcbd 	bl	8007ab4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d13a:	7a7b      	ldrb	r3, [r7, #9]
 800d13c:	2b06      	cmp	r3, #6
 800d13e:	d05a      	beq.n	800d1f6 <ip4_input+0x19e>
 800d140:	2b11      	cmp	r3, #17
 800d142:	d053      	beq.n	800d1ec <ip4_input+0x194>
 800d144:	2b01      	cmp	r3, #1
 800d146:	d04c      	beq.n	800d1e2 <ip4_input+0x18a>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d148:	4629      	mov	r1, r5
 800d14a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800d14e:	f000 f8f7 	bl	800d340 <ip4_addr_isbroadcast_u32>
 800d152:	b968      	cbnz	r0, 800d170 <ip4_input+0x118>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d154:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d15c:	2be0      	cmp	r3, #224	; 0xe0
 800d15e:	d007      	beq.n	800d170 <ip4_input+0x118>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d160:	4649      	mov	r1, r9
 800d162:	4620      	mov	r0, r4
 800d164:	f7fa fcde 	bl	8007b24 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d168:	2102      	movs	r1, #2
 800d16a:	4620      	mov	r0, r4
 800d16c:	f7ff ff38 	bl	800cfe0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d170:	4620      	mov	r0, r4
 800d172:	f7fa fd0f 	bl	8007b94 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d176:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800d178:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 800d17c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d180:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());
 800d184:	e9c8 3304 	strd	r3, r3, [r8, #16]

  return ERR_OK;
 800d188:	e002      	b.n	800d190 <ip4_input+0x138>
    pbuf_free(p);
 800d18a:	4620      	mov	r0, r4
 800d18c:	f7fa fd02 	bl	8007b94 <pbuf_free>
}
 800d190:	2000      	movs	r0, #0
 800d192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pbuf_realloc(p, iphdr_len);
 800d196:	4601      	mov	r1, r0
 800d198:	4620      	mov	r0, r4
 800d19a:	f7fa fbff 	bl	800799c <pbuf_realloc>
 800d19e:	e774      	b.n	800d08a <ip4_input+0x32>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d1a0:	f896 502d 	ldrb.w	r5, [r6, #45]	; 0x2d
 800d1a4:	f015 0501 	ands.w	r5, r5, #1
 800d1a8:	d0a8      	beq.n	800d0fc <ip4_input+0xa4>
 800d1aa:	6873      	ldr	r3, [r6, #4]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	bf14      	ite	ne
 800d1b0:	4635      	movne	r5, r6
 800d1b2:	2500      	moveq	r5, #0
 800d1b4:	e7a2      	b.n	800d0fc <ip4_input+0xa4>
    p = ip4_reass(p);
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	f000 f9ec 	bl	800d594 <ip4_reass>
    if (p == NULL) {
 800d1bc:	4604      	mov	r4, r0
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d0e6      	beq.n	800d190 <ip4_input+0x138>
    iphdr = (const struct ip_hdr *)p->payload;
 800d1c2:	6847      	ldr	r7, [r0, #4]
 800d1c4:	e7ab      	b.n	800d11e <ip4_input+0xc6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d01a      	beq.n	800d200 <ip4_input+0x1a8>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	4631      	mov	r1, r6
 800d1ce:	f000 f8b7 	bl	800d340 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d1d2:	b9b8      	cbnz	r0, 800d204 <ip4_input+0x1ac>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d1d4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d1d8:	e773      	b.n	800d0c2 <ip4_input+0x6a>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1da:	f8d8 0010 	ldr.w	r0, [r8, #16]
      netif = NULL;
 800d1de:	2500      	movs	r5, #0
 800d1e0:	e78c      	b.n	800d0fc <ip4_input+0xa4>
        icmp_input(p, inp);
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f7ff fe53 	bl	800ce90 <icmp_input>
        break;
 800d1ea:	e7c4      	b.n	800d176 <ip4_input+0x11e>
        udp_input(p, inp);
 800d1ec:	4631      	mov	r1, r6
 800d1ee:	4620      	mov	r0, r4
 800d1f0:	f7ff f88e 	bl	800c310 <udp_input>
        break;
 800d1f4:	e7bf      	b.n	800d176 <ip4_input+0x11e>
        tcp_input(p, inp);
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	f7fc ff5d 	bl	800a0b8 <tcp_input>
        break;
 800d1fe:	e7ba      	b.n	800d176 <ip4_input+0x11e>
 800d200:	4635      	mov	r5, r6
 800d202:	e77b      	b.n	800d0fc <ip4_input+0xa4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d204:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800d208:	4635      	mov	r5, r6
 800d20a:	e777      	b.n	800d0fc <ip4_input+0xa4>
 800d20c:	24010570 	.word	0x24010570
 800d210:	24009ab8 	.word	0x24009ab8

0800d214 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	4604      	mov	r4, r0
 800d21a:	b083      	sub	sp, #12
 800d21c:	4699      	mov	r9, r3
 800d21e:	460f      	mov	r7, r1
 800d220:	4616      	mov	r6, r2
 800d222:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 800d226:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 800d22a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
 800d22e:	f7f6 fe49 	bl	8003ec4 <sys_check_core_locking>
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d232:	7ba3      	ldrb	r3, [r4, #14]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d13d      	bne.n	800d2b4 <ip4_output_if_src+0xa0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d238:	2e00      	cmp	r6, #0
 800d23a:	d044      	beq.n	800d2c6 <ip4_output_if_src+0xb2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d23c:	2114      	movs	r1, #20
 800d23e:	4620      	mov	r0, r4
 800d240:	f7fa fc04 	bl	8007a4c <pbuf_add_header>
 800d244:	2800      	cmp	r0, #0
 800d246:	d159      	bne.n	800d2fc <ip4_output_if_src+0xe8>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d248:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800d24a:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d24c:	2b13      	cmp	r3, #19
 800d24e:	d942      	bls.n	800d2d6 <ip4_output_if_src+0xc2>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d250:	f885 9008 	strb.w	r9, [r5, #8]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d254:	2245      	movs	r2, #69	; 0x45
    IPH_PROTO_SET(iphdr, proto);
 800d256:	f885 b009 	strb.w	fp, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800d25a:	6833      	ldr	r3, [r6, #0]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d25c:	702a      	strb	r2, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800d25e:	f885 a001 	strb.w	sl, [r5, #1]
    ip4_addr_copy(iphdr->dest, *dest);
 800d262:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d264:	8920      	ldrh	r0, [r4, #8]
 800d266:	f7f9 fb6d 	bl	8006944 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d26a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800d318 <ip4_output_if_src+0x104>
    IPH_OFFSET_SET(iphdr, 0);
 800d26e:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d270:	8068      	strh	r0, [r5, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d272:	f8b9 0000 	ldrh.w	r0, [r9]
    IPH_OFFSET_SET(iphdr, 0);
 800d276:	71ab      	strb	r3, [r5, #6]
 800d278:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d27a:	f7f9 fb63 	bl	8006944 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d27e:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d282:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 800d284:	3301      	adds	r3, #1
 800d286:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800d28a:	b367      	cbz	r7, 800d2e6 <ip4_output_if_src+0xd2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d290:	2300      	movs	r3, #0
 800d292:	72ab      	strb	r3, [r5, #10]
 800d294:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d296:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800d29a:	b113      	cbz	r3, 800d2a2 <ip4_output_if_src+0x8e>
 800d29c:	8922      	ldrh	r2, [r4, #8]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d824      	bhi.n	800d2ec <ip4_output_if_src+0xd8>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d2a2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d2a6:	4632      	mov	r2, r6
 800d2a8:	4621      	mov	r1, r4
 800d2aa:	4640      	mov	r0, r8
 800d2ac:	4798      	blx	r3
}
 800d2ae:	b003      	add	sp, #12
 800d2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d2b4:	4b13      	ldr	r3, [pc, #76]	; (800d304 <ip4_output_if_src+0xf0>)
 800d2b6:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d2ba:	4913      	ldr	r1, [pc, #76]	; (800d308 <ip4_output_if_src+0xf4>)
 800d2bc:	4813      	ldr	r0, [pc, #76]	; (800d30c <ip4_output_if_src+0xf8>)
 800d2be:	f000 ffa3 	bl	800e208 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 800d2c2:	2e00      	cmp	r6, #0
 800d2c4:	d1ba      	bne.n	800d23c <ip4_output_if_src+0x28>
    if (p->len < IP_HLEN) {
 800d2c6:	8963      	ldrh	r3, [r4, #10]
 800d2c8:	2b13      	cmp	r3, #19
 800d2ca:	d917      	bls.n	800d2fc <ip4_output_if_src+0xe8>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d2cc:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 800d2ce:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800d2d4:	e7df      	b.n	800d296 <ip4_output_if_src+0x82>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <ip4_output_if_src+0xf0>)
 800d2d8:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d2dc:	490c      	ldr	r1, [pc, #48]	; (800d310 <ip4_output_if_src+0xfc>)
 800d2de:	480b      	ldr	r0, [pc, #44]	; (800d30c <ip4_output_if_src+0xf8>)
 800d2e0:	f000 ff92 	bl	800e208 <iprintf>
 800d2e4:	e7b4      	b.n	800d250 <ip4_output_if_src+0x3c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d2e6:	4b0b      	ldr	r3, [pc, #44]	; (800d314 <ip4_output_if_src+0x100>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	e7d0      	b.n	800d28e <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800d2ec:	4632      	mov	r2, r6
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f000 fb83 	bl	800d9fc <ip4_frag>
}
 800d2f6:	b003      	add	sp, #12
 800d2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 800d2fc:	f06f 0001 	mvn.w	r0, #1
 800d300:	e7d5      	b.n	800d2ae <ip4_output_if_src+0x9a>
 800d302:	bf00      	nop
 800d304:	08011724 	.word	0x08011724
 800d308:	08011758 	.word	0x08011758
 800d30c:	0800f0a0 	.word	0x0800f0a0
 800d310:	08011764 	.word	0x08011764
 800d314:	08011794 	.word	0x08011794
 800d318:	240106d6 	.word	0x240106d6

0800d31c <ip4_output_if>:
{
 800d31c:	b4f0      	push	{r4, r5, r6, r7}
 800d31e:	9c06      	ldr	r4, [sp, #24]
 800d320:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800d324:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d328:	b11a      	cbz	r2, 800d332 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800d32a:	b109      	cbz	r1, 800d330 <ip4_output_if+0x14>
 800d32c:	680f      	ldr	r7, [r1, #0]
 800d32e:	b907      	cbnz	r7, 800d332 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800d330:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d332:	9504      	str	r5, [sp, #16]
 800d334:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800d338:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d33a:	f7ff bf6b 	b.w	800d214 <ip4_output_if_src>
 800d33e:	bf00      	nop

0800d340 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d340:	1e43      	subs	r3, r0, #1
 800d342:	3303      	adds	r3, #3
 800d344:	d814      	bhi.n	800d370 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d346:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800d34a:	f013 0302 	ands.w	r3, r3, #2
 800d34e:	d00d      	beq.n	800d36c <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d350:	684b      	ldr	r3, [r1, #4]
 800d352:	4283      	cmp	r3, r0
 800d354:	d00f      	beq.n	800d376 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d356:	688a      	ldr	r2, [r1, #8]
 800d358:	4043      	eors	r3, r0
 800d35a:	4213      	tst	r3, r2
 800d35c:	d10b      	bne.n	800d376 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d35e:	43d3      	mvns	r3, r2
 800d360:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800d364:	1ac3      	subs	r3, r0, r3
 800d366:	fab3 f383 	clz	r3, r3
 800d36a:	095b      	lsrs	r3, r3, #5
  }
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	4770      	bx	lr
    return 1;
 800d370:	2301      	movs	r3, #1
}
 800d372:	4618      	mov	r0, r3
 800d374:	4770      	bx	lr
    return 0;
 800d376:	2300      	movs	r3, #0
}
 800d378:	4618      	mov	r0, r3
 800d37a:	4770      	bx	lr

0800d37c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d37c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d37e:	4604      	mov	r4, r0
 800d380:	b148      	cbz	r0, 800d396 <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800d382:	6960      	ldr	r0, [r4, #20]
 800d384:	b108      	cbz	r0, 800d38a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800d386:	f7fa fc05 	bl	8007b94 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 800d38a:	4621      	mov	r1, r4
 800d38c:	2005      	movs	r0, #5
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 800d38e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800d392:	f7f9 becb 	b.w	800712c <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d396:	4b04      	ldr	r3, [pc, #16]	; (800d3a8 <ipfrag_free_pbuf_custom+0x2c>)
 800d398:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d39c:	4903      	ldr	r1, [pc, #12]	; (800d3ac <ipfrag_free_pbuf_custom+0x30>)
 800d39e:	4804      	ldr	r0, [pc, #16]	; (800d3b0 <ipfrag_free_pbuf_custom+0x34>)
 800d3a0:	f000 ff32 	bl	800e208 <iprintf>
 800d3a4:	e7ed      	b.n	800d382 <ipfrag_free_pbuf_custom+0x6>
 800d3a6:	bf00      	nop
 800d3a8:	08011798 	.word	0x08011798
 800d3ac:	080117d4 	.word	0x080117d4
 800d3b0:	0800f0a0 	.word	0x0800f0a0

0800d3b4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d3b4:	4281      	cmp	r1, r0
{
 800d3b6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d3be:	d075      	beq.n	800d4ac <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 800d3c0:	b147      	cbz	r7, 800d3d4 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	42b3      	cmp	r3, r6
 800d3c6:	d005      	beq.n	800d3d4 <ip_reass_free_complete_datagram+0x20>
 800d3c8:	4b40      	ldr	r3, [pc, #256]	; (800d4cc <ip_reass_free_complete_datagram+0x118>)
 800d3ca:	22ad      	movs	r2, #173	; 0xad
 800d3cc:	4940      	ldr	r1, [pc, #256]	; (800d4d0 <ip_reass_free_complete_datagram+0x11c>)
 800d3ce:	4841      	ldr	r0, [pc, #260]	; (800d4d4 <ip_reass_free_complete_datagram+0x120>)
 800d3d0:	f000 ff1a 	bl	800e208 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d3d4:	6875      	ldr	r5, [r6, #4]
 800d3d6:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 800d3d8:	889a      	ldrh	r2, [r3, #4]
 800d3da:	2a00      	cmp	r2, #0
 800d3dc:	d047      	beq.n	800d46e <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 800d3de:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3e2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800d4cc <ip_reass_free_complete_datagram+0x118>
 800d3e6:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800d4ec <ip_reass_free_complete_datagram+0x138>
 800d3ea:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800d4d4 <ip_reass_free_complete_datagram+0x120>
 800d3ee:	e005      	b.n	800d3fc <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 800d3f0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800d3f2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800d3f4:	f7fa fbce 	bl	8007b94 <pbuf_free>
  while (p != NULL) {
 800d3f8:	b1b4      	cbz	r4, 800d428 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800d3fa:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 800d3fc:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 800d3fe:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 800d400:	f7fa fbdc 	bl	8007bbc <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d404:	4458      	add	r0, fp
 800d406:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d40a:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d40e:	dbef      	blt.n	800d3f0 <ip_reass_free_complete_datagram+0x3c>
 800d410:	4653      	mov	r3, sl
 800d412:	22cc      	movs	r2, #204	; 0xcc
 800d414:	4649      	mov	r1, r9
 800d416:	4640      	mov	r0, r8
 800d418:	f000 fef6 	bl	800e208 <iprintf>
    pbuf_free(pcur);
 800d41c:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 800d41e:	4625      	mov	r5, r4
    pbuf_free(pcur);
 800d420:	f7fa fbb8 	bl	8007b94 <pbuf_free>
  while (p != NULL) {
 800d424:	2c00      	cmp	r4, #0
 800d426:	d1e8      	bne.n	800d3fa <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 800d428:	4b2b      	ldr	r3, [pc, #172]	; (800d4d8 <ip_reass_free_complete_datagram+0x124>)
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	4296      	cmp	r6, r2
 800d42e:	d03a      	beq.n	800d4a6 <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d430:	2f00      	cmp	r7, #0
 800d432:	d042      	beq.n	800d4ba <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 800d434:	6833      	ldr	r3, [r6, #0]
 800d436:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d438:	4c28      	ldr	r4, [pc, #160]	; (800d4dc <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 800d43a:	4631      	mov	r1, r6
 800d43c:	2004      	movs	r0, #4
 800d43e:	f7f9 fe75 	bl	800712c <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d442:	8823      	ldrh	r3, [r4, #0]
 800d444:	455b      	cmp	r3, fp
 800d446:	d305      	bcc.n	800d454 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d448:	eba3 030b 	sub.w	r3, r3, fp
}
 800d44c:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d44e:	8023      	strh	r3, [r4, #0]
}
 800d450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d454:	4b1d      	ldr	r3, [pc, #116]	; (800d4cc <ip_reass_free_complete_datagram+0x118>)
 800d456:	22d2      	movs	r2, #210	; 0xd2
 800d458:	4921      	ldr	r1, [pc, #132]	; (800d4e0 <ip_reass_free_complete_datagram+0x12c>)
 800d45a:	481e      	ldr	r0, [pc, #120]	; (800d4d4 <ip_reass_free_complete_datagram+0x120>)
 800d45c:	f000 fed4 	bl	800e208 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d460:	8823      	ldrh	r3, [r4, #0]
}
 800d462:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d464:	eba3 030b 	sub.w	r3, r3, fp
 800d468:	8023      	strh	r3, [r4, #0]
}
 800d46a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 800d46e:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d470:	6930      	ldr	r0, [r6, #16]
 800d472:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 800d474:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d476:	68f4      	ldr	r4, [r6, #12]
 800d478:	68b2      	ldr	r2, [r6, #8]
 800d47a:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d47c:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d47e:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d480:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d482:	601a      	str	r2, [r3, #0]
 800d484:	605c      	str	r4, [r3, #4]
 800d486:	69b2      	ldr	r2, [r6, #24]
 800d488:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d48a:	f7ff fdad 	bl	800cfe8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d48e:	4628      	mov	r0, r5
 800d490:	f7fa fb94 	bl	8007bbc <pbuf_clen>
 800d494:	4683      	mov	fp, r0
    pbuf_free(p);
 800d496:	4628      	mov	r0, r5
 800d498:	f7fa fb7c 	bl	8007b94 <pbuf_free>
  p = ipr->p;
 800d49c:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	d0c2      	beq.n	800d428 <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 800d4a2:	686b      	ldr	r3, [r5, #4]
 800d4a4:	e79d      	b.n	800d3e2 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 800d4a6:	6832      	ldr	r2, [r6, #0]
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	e7c5      	b.n	800d438 <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d4ac:	4b07      	ldr	r3, [pc, #28]	; (800d4cc <ip_reass_free_complete_datagram+0x118>)
 800d4ae:	22ab      	movs	r2, #171	; 0xab
 800d4b0:	490c      	ldr	r1, [pc, #48]	; (800d4e4 <ip_reass_free_complete_datagram+0x130>)
 800d4b2:	4808      	ldr	r0, [pc, #32]	; (800d4d4 <ip_reass_free_complete_datagram+0x120>)
 800d4b4:	f000 fea8 	bl	800e208 <iprintf>
 800d4b8:	e782      	b.n	800d3c0 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d4ba:	4b04      	ldr	r3, [pc, #16]	; (800d4cc <ip_reass_free_complete_datagram+0x118>)
 800d4bc:	f240 1245 	movw	r2, #325	; 0x145
 800d4c0:	4909      	ldr	r1, [pc, #36]	; (800d4e8 <ip_reass_free_complete_datagram+0x134>)
 800d4c2:	4804      	ldr	r0, [pc, #16]	; (800d4d4 <ip_reass_free_complete_datagram+0x120>)
 800d4c4:	f000 fea0 	bl	800e208 <iprintf>
 800d4c8:	e7b4      	b.n	800d434 <ip_reass_free_complete_datagram+0x80>
 800d4ca:	bf00      	nop
 800d4cc:	08011798 	.word	0x08011798
 800d4d0:	080117ec 	.word	0x080117ec
 800d4d4:	0800f0a0 	.word	0x0800f0a0
 800d4d8:	240106dc 	.word	0x240106dc
 800d4dc:	240106d8 	.word	0x240106d8
 800d4e0:	0801183c 	.word	0x0801183c
 800d4e4:	080117e0 	.word	0x080117e0
 800d4e8:	08011820 	.word	0x08011820
 800d4ec:	08011800 	.word	0x08011800

0800d4f0 <ip_reass_remove_oldest_datagram>:
{
 800d4f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 800d4f4:	2700      	movs	r7, #0
 800d4f6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800d560 <ip_reass_remove_oldest_datagram+0x70>
{
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	460e      	mov	r6, r1
    r = reassdatagrams;
 800d4fe:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800d502:	b1f3      	cbz	r3, 800d542 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 800d504:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d506:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 800d50a:	4621      	mov	r1, r4
    prev = NULL;
 800d50c:	46a4      	mov	ip, r4
    oldest = NULL;
 800d50e:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d510:	695a      	ldr	r2, [r3, #20]
 800d512:	4572      	cmp	r2, lr
 800d514:	d018      	beq.n	800d548 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 800d516:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d518:	b120      	cbz	r0, 800d524 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 800d51a:	f893 901f 	ldrb.w	r9, [r3, #31]
 800d51e:	7fc2      	ldrb	r2, [r0, #31]
 800d520:	4591      	cmp	r9, r2
 800d522:	d801      	bhi.n	800d528 <ip_reass_remove_oldest_datagram+0x38>
 800d524:	4661      	mov	r1, ip
 800d526:	4618      	mov	r0, r3
      if (r->next != NULL) {
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	469c      	mov	ip, r3
 800d52c:	4613      	mov	r3, r2
 800d52e:	2a00      	cmp	r2, #0
 800d530:	d1ee      	bne.n	800d510 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 800d532:	b110      	cbz	r0, 800d53a <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d534:	f7ff ff3e 	bl	800d3b4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d538:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d53a:	42b7      	cmp	r7, r6
 800d53c:	da01      	bge.n	800d542 <ip_reass_remove_oldest_datagram+0x52>
 800d53e:	2c01      	cmp	r4, #1
 800d540:	dcdd      	bgt.n	800d4fe <ip_reass_remove_oldest_datagram+0xe>
}
 800d542:	4638      	mov	r0, r7
 800d544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d548:	699a      	ldr	r2, [r3, #24]
 800d54a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d54e:	454a      	cmp	r2, r9
 800d550:	d1e1      	bne.n	800d516 <ip_reass_remove_oldest_datagram+0x26>
 800d552:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800d556:	88aa      	ldrh	r2, [r5, #4]
 800d558:	4591      	cmp	r9, r2
 800d55a:	d1dc      	bne.n	800d516 <ip_reass_remove_oldest_datagram+0x26>
 800d55c:	e7e4      	b.n	800d528 <ip_reass_remove_oldest_datagram+0x38>
 800d55e:	bf00      	nop
 800d560:	240106dc 	.word	0x240106dc

0800d564 <ip_reass_tmr>:
{
 800d564:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d566:	4b0a      	ldr	r3, [pc, #40]	; (800d590 <ip_reass_tmr+0x2c>)
 800d568:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800d56a:	b140      	cbz	r0, 800d57e <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 800d56c:	2400      	movs	r4, #0
    if (r->timer > 0) {
 800d56e:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 800d570:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 800d572:	b12b      	cbz	r3, 800d580 <ip_reass_tmr+0x1c>
 800d574:	4604      	mov	r4, r0
      r->timer--;
 800d576:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 800d578:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d1f7      	bne.n	800d56e <ip_reass_tmr+0xa>
}
 800d57e:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 800d580:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800d582:	4621      	mov	r1, r4
 800d584:	f7ff ff16 	bl	800d3b4 <ip_reass_free_complete_datagram>
      r = r->next;
 800d588:	4628      	mov	r0, r5
  while (r != NULL) {
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d1ef      	bne.n	800d56e <ip_reass_tmr+0xa>
 800d58e:	e7f6      	b.n	800d57e <ip_reass_tmr+0x1a>
 800d590:	240106dc 	.word	0x240106dc

0800d594 <ip4_reass>:
{
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800d598:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 800d59c:	b085      	sub	sp, #20
 800d59e:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d5a0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	2b05      	cmp	r3, #5
 800d5aa:	f040 8089 	bne.w	800d6c0 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d5ae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d5b2:	f7f9 f9c7 	bl	8006944 <lwip_htons>
 800d5b6:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d5b8:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800d5bc:	f7f9 f9c2 	bl	8006944 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d5c0:	f89a 2000 	ldrb.w	r2, [sl]
 800d5c4:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 800d5c8:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 800d5cc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800d5d0:	d376      	bcc.n	800d6c0 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 800d5d2:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5d4:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800d8c0 <ip4_reass+0x32c>
  clen = pbuf_clen(p);
 800d5d8:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 800d5de:	f7fa faed 	bl	8007bbc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5e2:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 800d5e6:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d5e8:	4403      	add	r3, r0
 800d5ea:	2b0a      	cmp	r3, #10
 800d5ec:	f300 80e5 	bgt.w	800d7ba <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d5f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800d8c4 <ip4_reass+0x330>
 800d5f4:	f8d9 4000 	ldr.w	r4, [r9]
 800d5f8:	2c00      	cmp	r4, #0
 800d5fa:	f000 80ec 	beq.w	800d7d6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d5fe:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d602:	e003      	b.n	800d60c <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d604:	6824      	ldr	r4, [r4, #0]
 800d606:	2c00      	cmp	r4, #0
 800d608:	f000 80e5 	beq.w	800d7d6 <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d60c:	6963      	ldr	r3, [r4, #20]
 800d60e:	4293      	cmp	r3, r2
 800d610:	d1f8      	bne.n	800d604 <ip4_reass+0x70>
 800d612:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d616:	69a1      	ldr	r1, [r4, #24]
 800d618:	4299      	cmp	r1, r3
 800d61a:	d1f3      	bne.n	800d604 <ip4_reass+0x70>
 800d61c:	89a1      	ldrh	r1, [r4, #12]
 800d61e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d622:	4299      	cmp	r1, r3
 800d624:	d1ee      	bne.n	800d604 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d626:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d62a:	f7f9 f98b 	bl	8006944 <lwip_htons>
 800d62e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d632:	2800      	cmp	r0, #0
 800d634:	f000 80a9 	beq.w	800d78a <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d638:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d63c:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 800d640:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d644:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 800d648:	9301      	str	r3, [sp, #4]
 800d64a:	d108      	bne.n	800d65e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800d64c:	9b00      	ldr	r3, [sp, #0]
 800d64e:	18f3      	adds	r3, r6, r3
 800d650:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d652:	429e      	cmp	r6, r3
 800d654:	d812      	bhi.n	800d67c <ip4_reass+0xe8>
 800d656:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d80e      	bhi.n	800d67c <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d65e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d662:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800d666:	f7f9 f96d 	bl	8006944 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d66a:	f89a 2000 	ldrb.w	r2, [sl]
 800d66e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 800d672:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 800d676:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800d67a:	d229      	bcs.n	800d6d0 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 800d67c:	6866      	ldr	r6, [r4, #4]
 800d67e:	b9fe      	cbnz	r6, 800d6c0 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d680:	f8d9 3000 	ldr.w	r3, [r9]
 800d684:	42a3      	cmp	r3, r4
 800d686:	d014      	beq.n	800d6b2 <ip4_reass+0x11e>
 800d688:	4b89      	ldr	r3, [pc, #548]	; (800d8b0 <ip4_reass+0x31c>)
 800d68a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d68e:	4989      	ldr	r1, [pc, #548]	; (800d8b4 <ip4_reass+0x320>)
 800d690:	4889      	ldr	r0, [pc, #548]	; (800d8b8 <ip4_reass+0x324>)
 800d692:	f000 fdb9 	bl	800e208 <iprintf>
  if (reassdatagrams == ipr) {
 800d696:	f8d9 3000 	ldr.w	r3, [r9]
 800d69a:	429c      	cmp	r4, r3
 800d69c:	d009      	beq.n	800d6b2 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d69e:	4b84      	ldr	r3, [pc, #528]	; (800d8b0 <ip4_reass+0x31c>)
 800d6a0:	f240 1245 	movw	r2, #325	; 0x145
 800d6a4:	4985      	ldr	r1, [pc, #532]	; (800d8bc <ip4_reass+0x328>)
 800d6a6:	4884      	ldr	r0, [pc, #528]	; (800d8b8 <ip4_reass+0x324>)
 800d6a8:	f000 fdae 	bl	800e208 <iprintf>
    prev->next = ipr->next;
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	6033      	str	r3, [r6, #0]
 800d6b0:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 800d6b2:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	2004      	movs	r0, #4
    reassdatagrams = ipr->next;
 800d6b8:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800d6bc:	f7f9 fd36 	bl	800712c <memp_free>
  pbuf_free(p);
 800d6c0:	4628      	mov	r0, r5
  return NULL;
 800d6c2:	2600      	movs	r6, #0
  pbuf_free(p);
 800d6c4:	f7fa fa66 	bl	8007b94 <pbuf_free>
}
 800d6c8:	4630      	mov	r0, r6
 800d6ca:	b005      	add	sp, #20
 800d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 800d6d0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6d2:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 800d6d6:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6da:	f7f9 f933 	bl	8006944 <lwip_htons>
 800d6de:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d6e2:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d6e6:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d6e8:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 800d6ec:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 800d6f0:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 800d6f4:	f8ab 3006 	strh.w	r3, [fp, #6]
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 800d6fe:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 800d700:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 800d702:	f88b 3000 	strb.w	r3, [fp]
 800d706:	f88b 3001 	strb.w	r3, [fp, #1]
 800d70a:	f88b 3002 	strb.w	r3, [fp, #2]
 800d70e:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 800d712:	d8b3      	bhi.n	800d67c <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800d714:	6861      	ldr	r1, [r4, #4]
 800d716:	2900      	cmp	r1, #0
 800d718:	f000 80be 	beq.w	800d898 <ip4_reass+0x304>
  int valid = 1;
 800d71c:	f04f 0a01 	mov.w	sl, #1
 800d720:	4694      	mov	ip, r2
 800d722:	e00e      	b.n	800d742 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 800d724:	d0cc      	beq.n	800d6c0 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 800d726:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 800d72a:	45f4      	cmp	ip, lr
 800d72c:	d3c8      	bcc.n	800d6c0 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 800d72e:	b122      	cbz	r2, 800d73a <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 800d730:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 800d732:	4282      	cmp	r2, r0
 800d734:	bf18      	it	ne
 800d736:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800d73a:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800d73c:	2900      	cmp	r1, #0
 800d73e:	f000 8084 	beq.w	800d84a <ip4_reass+0x2b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d742:	461a      	mov	r2, r3
 800d744:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800d746:	8898      	ldrh	r0, [r3, #4]
 800d748:	4584      	cmp	ip, r0
 800d74a:	d2eb      	bcs.n	800d724 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 800d74c:	4613      	mov	r3, r2
 800d74e:	f8cb 1000 	str.w	r1, [fp]
 800d752:	4662      	mov	r2, ip
 800d754:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 800d756:	2b00      	cmp	r3, #0
 800d758:	d060      	beq.n	800d81c <ip4_reass+0x288>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d75a:	88db      	ldrh	r3, [r3, #6]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d3af      	bcc.n	800d6c0 <ip4_reass+0x12c>
 800d760:	9903      	ldr	r1, [sp, #12]
 800d762:	4281      	cmp	r1, r0
 800d764:	d8ac      	bhi.n	800d6c0 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 800d766:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 800d768:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800d76c:	d05b      	beq.n	800d826 <ip4_reass+0x292>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d76e:	9b01      	ldr	r3, [sp, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 8084 	beq.w	800d87e <ip4_reass+0x2ea>
 800d776:	7fa3      	ldrb	r3, [r4, #30]
 800d778:	07db      	lsls	r3, r3, #31
 800d77a:	d45c      	bmi.n	800d836 <ip4_reass+0x2a2>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d77c:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 800d780:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d782:	441f      	add	r7, r3
 800d784:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d788:	e79e      	b.n	800d6c8 <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d78a:	89e0      	ldrh	r0, [r4, #14]
 800d78c:	f7f9 f8da 	bl	8006944 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d790:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d794:	2800      	cmp	r0, #0
 800d796:	f43f af4f 	beq.w	800d638 <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d79a:	f8da 3000 	ldr.w	r3, [sl]
 800d79e:	f8da 0004 	ldr.w	r0, [sl, #4]
 800d7a2:	f8da 1008 	ldr.w	r1, [sl, #8]
 800d7a6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800d7aa:	60a3      	str	r3, [r4, #8]
 800d7ac:	60e0      	str	r0, [r4, #12]
 800d7ae:	6121      	str	r1, [r4, #16]
 800d7b0:	6162      	str	r2, [r4, #20]
 800d7b2:	f8da 3010 	ldr.w	r3, [sl, #16]
 800d7b6:	61a3      	str	r3, [r4, #24]
 800d7b8:	e73e      	b.n	800d638 <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	4650      	mov	r0, sl
 800d7be:	f7ff fe97 	bl	800d4f0 <ip_reass_remove_oldest_datagram>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	f43f af7c 	beq.w	800d6c0 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d7c8:	f8b8 3000 	ldrh.w	r3, [r8]
 800d7cc:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d7ce:	2b0a      	cmp	r3, #10
 800d7d0:	f77f af0e 	ble.w	800d5f0 <ip4_reass+0x5c>
 800d7d4:	e774      	b.n	800d6c0 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7d6:	2004      	movs	r0, #4
 800d7d8:	f7f9 fc62 	bl	80070a0 <memp_malloc>
  if (ipr == NULL) {
 800d7dc:	4604      	mov	r4, r0
 800d7de:	b178      	cbz	r0, 800d800 <ip4_reass+0x26c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	61e3      	str	r3, [r4, #28]
 800d7e4:	60a3      	str	r3, [r4, #8]
 800d7e6:	60e3      	str	r3, [r4, #12]
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	6163      	str	r3, [r4, #20]
 800d7ec:	61a3      	str	r3, [r4, #24]
 800d7ee:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 800d7f0:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 800d7f4:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 800d7f8:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 800d7fa:	230f      	movs	r3, #15
 800d7fc:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d7fe:	e7cc      	b.n	800d79a <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d800:	4639      	mov	r1, r7
 800d802:	4650      	mov	r0, sl
 800d804:	f7ff fe74 	bl	800d4f0 <ip_reass_remove_oldest_datagram>
 800d808:	4287      	cmp	r7, r0
 800d80a:	f73f af59 	bgt.w	800d6c0 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d80e:	2004      	movs	r0, #4
 800d810:	f7f9 fc46 	bl	80070a0 <memp_malloc>
    if (ipr == NULL)
 800d814:	4604      	mov	r4, r0
 800d816:	2800      	cmp	r0, #0
 800d818:	d1e2      	bne.n	800d7e0 <ip4_reass+0x24c>
 800d81a:	e751      	b.n	800d6c0 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	4283      	cmp	r3, r0
 800d820:	f63f af4e 	bhi.w	800d6c0 <ip4_reass+0x12c>
        ipr->p = new_p;
 800d824:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d826:	9b01      	ldr	r3, [sp, #4]
 800d828:	b19b      	cbz	r3, 800d852 <ip4_reass+0x2be>
 800d82a:	7fa3      	ldrb	r3, [r4, #30]
 800d82c:	07d9      	lsls	r1, r3, #31
 800d82e:	d5a5      	bpl.n	800d77c <ip4_reass+0x1e8>
    if (valid) {
 800d830:	f1ba 0f00 	cmp.w	sl, #0
 800d834:	d138      	bne.n	800d8a8 <ip4_reass+0x314>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d836:	f8b8 3000 	ldrh.w	r3, [r8]
 800d83a:	441f      	add	r7, r3
 800d83c:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 800d840:	2600      	movs	r6, #0
}
 800d842:	4630      	mov	r0, r6
 800d844:	b005      	add	sp, #20
 800d846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 800d84a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 800d84c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d84e:	d18e      	bne.n	800d76e <ip4_reass+0x1da>
 800d850:	e7e9      	b.n	800d826 <ip4_reass+0x292>
    if (valid) {
 800d852:	f1ba 0f00 	cmp.w	sl, #0
 800d856:	d012      	beq.n	800d87e <ip4_reass+0x2ea>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d858:	6863      	ldr	r3, [r4, #4]
 800d85a:	b183      	cbz	r3, 800d87e <ip4_reass+0x2ea>
 800d85c:	6859      	ldr	r1, [r3, #4]
 800d85e:	888b      	ldrh	r3, [r1, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d031      	beq.n	800d8c8 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d864:	f8b8 3000 	ldrh.w	r3, [r8]
 800d868:	441f      	add	r7, r3
  if (is_last) {
 800d86a:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d86c:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1e5      	bne.n	800d840 <ip4_reass+0x2ac>
 800d874:	e008      	b.n	800d888 <ip4_reass+0x2f4>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d876:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800d87a:	4659      	mov	r1, fp
 800d87c:	b323      	cbz	r3, 800d8c8 <ip4_reass+0x334>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d87e:	f8b8 3000 	ldrh.w	r3, [r8]
 800d882:	441f      	add	r7, r3
 800d884:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d888:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800d88a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d88c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800d890:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d892:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800d894:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d896:	e7d3      	b.n	800d840 <ip4_reass+0x2ac>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d898:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 800d89a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d0ea      	beq.n	800d876 <ip4_reass+0x2e2>
 800d8a0:	7fa3      	ldrb	r3, [r4, #30]
 800d8a2:	07da      	lsls	r2, r3, #31
 800d8a4:	f57f af6a 	bpl.w	800d77c <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d8a8:	6863      	ldr	r3, [r4, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d0c3      	beq.n	800d836 <ip4_reass+0x2a2>
 800d8ae:	e7d5      	b.n	800d85c <ip4_reass+0x2c8>
 800d8b0:	08011798 	.word	0x08011798
 800d8b4:	080118b0 	.word	0x080118b0
 800d8b8:	0800f0a0 	.word	0x0800f0a0
 800d8bc:	08011820 	.word	0x08011820
 800d8c0:	240106d8 	.word	0x240106d8
 800d8c4:	240106dc 	.word	0x240106dc
        q = iprh->next_pbuf;
 800d8c8:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 800d8cc:	b153      	cbz	r3, 800d8e4 <ip4_reass+0x350>
 800d8ce:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800d8d4:	88c0      	ldrh	r0, [r0, #6]
 800d8d6:	8893      	ldrh	r3, [r2, #4]
 800d8d8:	4298      	cmp	r0, r3
 800d8da:	d1c3      	bne.n	800d864 <ip4_reass+0x2d0>
          q = iprh->next_pbuf;
 800d8dc:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1f6      	bne.n	800d8d0 <ip4_reass+0x33c>
 800d8e2:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 800d8e4:	9b02      	ldr	r3, [sp, #8]
 800d8e6:	428b      	cmp	r3, r1
 800d8e8:	d110      	bne.n	800d90c <ip4_reass+0x378>
 800d8ea:	4b3e      	ldr	r3, [pc, #248]	; (800d9e4 <ip4_reass+0x450>)
 800d8ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d8f0:	493d      	ldr	r1, [pc, #244]	; (800d9e8 <ip4_reass+0x454>)
 800d8f2:	483e      	ldr	r0, [pc, #248]	; (800d9ec <ip4_reass+0x458>)
 800d8f4:	f000 fc88 	bl	800e208 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d8f8:	9b02      	ldr	r3, [sp, #8]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	b133      	cbz	r3, 800d90c <ip4_reass+0x378>
 800d8fe:	4b39      	ldr	r3, [pc, #228]	; (800d9e4 <ip4_reass+0x450>)
 800d900:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d904:	493a      	ldr	r1, [pc, #232]	; (800d9f0 <ip4_reass+0x45c>)
 800d906:	4839      	ldr	r0, [pc, #228]	; (800d9ec <ip4_reass+0x458>)
 800d908:	f000 fc7e 	bl	800e208 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d90c:	f8b8 3000 	ldrh.w	r3, [r8]
 800d910:	441f      	add	r7, r3
  if (is_last) {
 800d912:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d914:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d156      	bne.n	800d9ca <ip4_reass+0x436>
    u16_t datagram_len = (u16_t)(offset + len);
 800d91c:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d91e:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 800d920:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d922:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 800d926:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d928:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 800d92a:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d92c:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d92e:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d930:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d932:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d934:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d936:	68a3      	ldr	r3, [r4, #8]
 800d938:	6921      	ldr	r1, [r4, #16]
 800d93a:	6962      	ldr	r2, [r4, #20]
 800d93c:	6075      	str	r5, [r6, #4]
 800d93e:	60b1      	str	r1, [r6, #8]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d940:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d942:	60f2      	str	r2, [r6, #12]
 800d944:	6033      	str	r3, [r6, #0]
 800d946:	69a3      	ldr	r3, [r4, #24]
 800d948:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d94a:	f7f8 fffb 	bl	8006944 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800d94e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d950:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d952:	71b3      	strb	r3, [r6, #6]
 800d954:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d956:	72b3      	strb	r3, [r6, #10]
 800d958:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800d95a:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800d95c:	b15d      	cbz	r5, 800d976 <ip4_reass+0x3e2>
      iprh = (struct ip_reass_helper *)r->payload;
 800d95e:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800d960:	4628      	mov	r0, r5
 800d962:	2114      	movs	r1, #20
 800d964:	f7fa f8a6 	bl	8007ab4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d968:	4629      	mov	r1, r5
 800d96a:	4630      	mov	r0, r6
 800d96c:	f7fa f94e 	bl	8007c0c <pbuf_cat>
      r = iprh->next_pbuf;
 800d970:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 800d972:	2d00      	cmp	r5, #0
 800d974:	d1f3      	bne.n	800d95e <ip4_reass+0x3ca>
    if (ipr == reassdatagrams) {
 800d976:	f8d9 5000 	ldr.w	r5, [r9]
 800d97a:	42a5      	cmp	r5, r4
 800d97c:	d005      	beq.n	800d98a <ip4_reass+0x3f6>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d97e:	b335      	cbz	r5, 800d9ce <ip4_reass+0x43a>
        if (ipr_prev->next == ipr) {
 800d980:	682b      	ldr	r3, [r5, #0]
 800d982:	42a3      	cmp	r3, r4
 800d984:	d014      	beq.n	800d9b0 <ip4_reass+0x41c>
 800d986:	461d      	mov	r5, r3
 800d988:	e7f9      	b.n	800d97e <ip4_reass+0x3ea>
    reassdatagrams = ipr->next;
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 800d990:	4621      	mov	r1, r4
 800d992:	2004      	movs	r0, #4
 800d994:	f7f9 fbca 	bl	800712c <memp_free>
    clen = pbuf_clen(p);
 800d998:	4630      	mov	r0, r6
 800d99a:	f7fa f90f 	bl	8007bbc <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d99e:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 800d9a2:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d9a4:	4283      	cmp	r3, r0
 800d9a6:	d306      	bcc.n	800d9b6 <ip4_reass+0x422>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d9a8:	1b1b      	subs	r3, r3, r4
 800d9aa:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 800d9ae:	e68b      	b.n	800d6c8 <ip4_reass+0x134>
    prev->next = ipr->next;
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	602b      	str	r3, [r5, #0]
 800d9b4:	e7ec      	b.n	800d990 <ip4_reass+0x3fc>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d9b6:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <ip4_reass+0x450>)
 800d9b8:	f240 229b 	movw	r2, #667	; 0x29b
 800d9bc:	490d      	ldr	r1, [pc, #52]	; (800d9f4 <ip4_reass+0x460>)
 800d9be:	480b      	ldr	r0, [pc, #44]	; (800d9ec <ip4_reass+0x458>)
 800d9c0:	f000 fc22 	bl	800e208 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d9c4:	f8b8 3000 	ldrh.w	r3, [r8]
 800d9c8:	e7ee      	b.n	800d9a8 <ip4_reass+0x414>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d9ca:	8ba0      	ldrh	r0, [r4, #28]
 800d9cc:	e7ae      	b.n	800d92c <ip4_reass+0x398>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d9ce:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <ip4_reass+0x450>)
 800d9d0:	f240 1245 	movw	r2, #325	; 0x145
 800d9d4:	4908      	ldr	r1, [pc, #32]	; (800d9f8 <ip4_reass+0x464>)
 800d9d6:	4805      	ldr	r0, [pc, #20]	; (800d9ec <ip4_reass+0x458>)
 800d9d8:	f000 fc16 	bl	800e208 <iprintf>
    prev->next = ipr->next;
 800d9dc:	6823      	ldr	r3, [r4, #0]
 800d9de:	602b      	str	r3, [r5, #0]
 800d9e0:	deff      	udf	#255	; 0xff
 800d9e2:	bf00      	nop
 800d9e4:	08011798 	.word	0x08011798
 800d9e8:	08011860 	.word	0x08011860
 800d9ec:	0800f0a0 	.word	0x0800f0a0
 800d9f0:	08011870 	.word	0x08011870
 800d9f4:	08011894 	.word	0x08011894
 800d9f8:	08011820 	.word	0x08011820

0800d9fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da00:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 800da02:	b08f      	sub	sp, #60	; 0x3c
 800da04:	4605      	mov	r5, r0
 800da06:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da08:	f1b3 0214 	subs.w	r2, r3, #20
{
 800da0c:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da0e:	bf48      	it	mi
 800da10:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800da14:	6843      	ldr	r3, [r0, #4]
 800da16:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da18:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800da1c:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800da1e:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800da20:	f003 030f 	and.w	r3, r3, #15
 800da24:	2b05      	cmp	r3, #5
 800da26:	ea4f 0683 	mov.w	r6, r3, lsl #2
 800da2a:	f040 80e1 	bne.w	800dbf0 <ip4_frag+0x1f4>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800da2e:	8943      	ldrh	r3, [r0, #10]
 800da30:	2b13      	cmp	r3, #19
 800da32:	f240 80e0 	bls.w	800dbf6 <ip4_frag+0x1fa>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	88d8      	ldrh	r0, [r3, #6]
 800da3a:	f7f8 ff83 	bl	8006944 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800da3e:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800da40:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 800da44:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 800da46:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 800da48:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	920d      	str	r2, [sp, #52]	; 0x34
 800da50:	9305      	str	r3, [sp, #20]

  while (left) {
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 8094 	beq.w	800db80 <ip4_frag+0x184>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da58:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 800da5a:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da5c:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800dc18 <ip4_frag+0x21c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da60:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da62:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800dc20 <ip4_frag+0x224>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da66:	b29b      	uxth	r3, r3
 800da68:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800da6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da6e:	2114      	movs	r1, #20
 800da70:	200e      	movs	r0, #14
 800da72:	f7f9 fecb 	bl	800780c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da78:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 800da7a:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800da7c:	4293      	cmp	r3, r2
 800da7e:	bf28      	it	cs
 800da80:	4613      	movcs	r3, r2
 800da82:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 800da84:	2800      	cmp	r0, #0
 800da86:	f000 80b0 	beq.w	800dbea <ip4_frag+0x1ee>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800da8a:	8943      	ldrh	r3, [r0, #10]
 800da8c:	2b13      	cmp	r3, #19
 800da8e:	f240 8088 	bls.w	800dba2 <ip4_frag+0x1a6>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800da92:	9904      	ldr	r1, [sp, #16]
 800da94:	9b03      	ldr	r3, [sp, #12]
 800da96:	680a      	ldr	r2, [r1, #0]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	684f      	ldr	r7, [r1, #4]
 800da9c:	6888      	ldr	r0, [r1, #8]
 800da9e:	68c9      	ldr	r1, [r1, #12]
 800daa0:	605f      	str	r7, [r3, #4]
 800daa2:	60d9      	str	r1, [r3, #12]
 800daa4:	9904      	ldr	r1, [sp, #16]
 800daa6:	601a      	str	r2, [r3, #0]
 800daa8:	6098      	str	r0, [r3, #8]
 800daaa:	690a      	ldr	r2, [r1, #16]
 800daac:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800daae:	9b03      	ldr	r3, [sp, #12]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 800dab4:	9b06      	ldr	r3, [sp, #24]
 800dab6:	b38b      	cbz	r3, 800db1c <ip4_frag+0x120>
 800dab8:	469a      	mov	sl, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800daba:	896b      	ldrh	r3, [r5, #10]
 800dabc:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dabe:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 800dac0:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dac2:	d366      	bcc.n	800db92 <ip4_frag+0x196>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dac4:	4554      	cmp	r4, sl
 800dac6:	bf28      	it	cs
 800dac8:	4654      	movcs	r4, sl
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800daca:	2c00      	cmp	r4, #0
 800dacc:	d05a      	beq.n	800db84 <ip4_frag+0x188>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dace:	2005      	movs	r0, #5
 800dad0:	f7f9 fae6 	bl	80070a0 <memp_malloc>
 800dad4:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dad6:	2241      	movs	r2, #65	; 0x41
 800dad8:	4621      	mov	r1, r4
 800dada:	2000      	movs	r0, #0
      if (pcr == NULL) {
 800dadc:	f1bb 0f00 	cmp.w	fp, #0
 800dae0:	d06a      	beq.n	800dbb8 <ip4_frag+0x1bc>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dae2:	9401      	str	r4, [sp, #4]
 800dae4:	465b      	mov	r3, fp
 800dae6:	686f      	ldr	r7, [r5, #4]
 800dae8:	4437      	add	r7, r6
 800daea:	9700      	str	r7, [sp, #0]
 800daec:	f7f9 ff3a 	bl	8007964 <pbuf_alloced_custom>
 800daf0:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800daf2:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 800daf4:	2f00      	cmp	r7, #0
 800daf6:	d069      	beq.n	800dbcc <ip4_frag+0x1d0>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800daf8:	ebaa 0a04 	sub.w	sl, sl, r4
      pbuf_ref(p);
 800dafc:	f7fa f868 	bl	8007bd0 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800db00:	4a42      	ldr	r2, [pc, #264]	; (800dc0c <ip4_frag+0x210>)
      pbuf_cat(rambuf, newpbuf);
 800db02:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800db04:	fa1f fa8a 	uxth.w	sl, sl
      pbuf_cat(rambuf, newpbuf);
 800db08:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 800db0a:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800db0e:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 800db12:	f7fa f87b 	bl	8007c0c <pbuf_cat>
      if (left_to_copy) {
 800db16:	f1ba 0f00 	cmp.w	sl, #0
 800db1a:	d133      	bne.n	800db84 <ip4_frag+0x188>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800db1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800db1e:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800db20:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 800db22:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 800db24:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 800db26:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 800db2a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 800db2c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800db2e:	4293      	cmp	r3, r2
 800db30:	dd3f      	ble.n	800dbb2 <ip4_frag+0x1b6>
 800db32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db34:	2b00      	cmp	r3, #0
 800db36:	d13c      	bne.n	800dbb2 <ip4_frag+0x1b6>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800db38:	f7f8 ff04 	bl	8006944 <lwip_htons>
 800db3c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db3e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800db40:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db42:	f103 0014 	add.w	r0, r3, #20
 800db46:	b280      	uxth	r0, r0
 800db48:	f7f8 fefc 	bl	8006944 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800db4c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800db4e:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800db50:	72bb      	strb	r3, [r7, #10]
 800db52:	72fb      	strb	r3, [r7, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800db54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db56:	9f03      	ldr	r7, [sp, #12]
 800db58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800db5a:	4639      	mov	r1, r7
 800db5c:	6943      	ldr	r3, [r0, #20]
 800db5e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800db60:	4638      	mov	r0, r7
 800db62:	f7fa f817 	bl	8007b94 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800db66:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800db6a:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 800db6c:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 800db70:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 800db72:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 800db74:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 800db76:	b292      	uxth	r2, r2
 800db78:	9207      	str	r2, [sp, #28]
  while (left) {
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	f47f af75 	bne.w	800da6a <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800db80:	2000      	movs	r0, #0
 800db82:	e020      	b.n	800dbc6 <ip4_frag+0x1ca>
        p = p->next;
 800db84:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 800db86:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 800db88:	896b      	ldrh	r3, [r5, #10]
 800db8a:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800db8c:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 800db8e:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800db90:	d298      	bcs.n	800dac4 <ip4_frag+0xc8>
 800db92:	4643      	mov	r3, r8
 800db94:	f240 322d 	movw	r2, #813	; 0x32d
 800db98:	491d      	ldr	r1, [pc, #116]	; (800dc10 <ip4_frag+0x214>)
 800db9a:	4648      	mov	r0, r9
 800db9c:	f000 fb34 	bl	800e208 <iprintf>
 800dba0:	e790      	b.n	800dac4 <ip4_frag+0xc8>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dba2:	4643      	mov	r3, r8
 800dba4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dba8:	491a      	ldr	r1, [pc, #104]	; (800dc14 <ip4_frag+0x218>)
 800dbaa:	4648      	mov	r0, r9
 800dbac:	f000 fb2c 	bl	800e208 <iprintf>
 800dbb0:	e76f      	b.n	800da92 <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 800dbb2:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 800dbb6:	e7bf      	b.n	800db38 <ip4_frag+0x13c>
        pbuf_free(rambuf);
 800dbb8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dbbc:	4658      	mov	r0, fp
 800dbbe:	f7f9 ffe9 	bl	8007b94 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dbc2:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dbc6:	b00f      	add	sp, #60	; 0x3c
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 800dbcc:	46da      	mov	sl, fp
 800dbce:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dbd2:	2005      	movs	r0, #5
 800dbd4:	4651      	mov	r1, sl
 800dbd6:	f7f9 faa9 	bl	800712c <memp_free>
        pbuf_free(rambuf);
 800dbda:	4658      	mov	r0, fp
 800dbdc:	f7f9 ffda 	bl	8007b94 <pbuf_free>
  return ERR_MEM;
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dbe4:	b00f      	add	sp, #60	; 0x3c
 800dbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800dbea:	f04f 30ff 	mov.w	r0, #4294967295
 800dbee:	e7ea      	b.n	800dbc6 <ip4_frag+0x1ca>
    return ERR_VAL;
 800dbf0:	f06f 0005 	mvn.w	r0, #5
 800dbf4:	e7e7      	b.n	800dbc6 <ip4_frag+0x1ca>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dbf6:	4b08      	ldr	r3, [pc, #32]	; (800dc18 <ip4_frag+0x21c>)
 800dbf8:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dbfc:	4907      	ldr	r1, [pc, #28]	; (800dc1c <ip4_frag+0x220>)
 800dbfe:	4808      	ldr	r0, [pc, #32]	; (800dc20 <ip4_frag+0x224>)
 800dc00:	f000 fb02 	bl	800e208 <iprintf>
 800dc04:	f06f 0005 	mvn.w	r0, #5
 800dc08:	e7dd      	b.n	800dbc6 <ip4_frag+0x1ca>
 800dc0a:	bf00      	nop
 800dc0c:	0800d37d 	.word	0x0800d37d
 800dc10:	0801190c 	.word	0x0801190c
 800dc14:	080118ec 	.word	0x080118ec
 800dc18:	08011798 	.word	0x08011798
 800dc1c:	080118d0 	.word	0x080118d0
 800dc20:	0800f0a0 	.word	0x0800f0a0

0800dc24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dc24:	b570      	push	{r4, r5, r6, lr}
 800dc26:	4604      	mov	r4, r0
 800dc28:	460d      	mov	r5, r1
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();
 800dc2a:	f7f6 f94b 	bl	8003ec4 <sys_check_core_locking>

  if (p->len <= SIZEOF_ETH_HDR) {
 800dc2e:	8963      	ldrh	r3, [r4, #10]
 800dc30:	2b0e      	cmp	r3, #14
 800dc32:	d91a      	bls.n	800dc6a <ethernet_input+0x46>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dc34:	7be3      	ldrb	r3, [r4, #15]
 800dc36:	b91b      	cbnz	r3, 800dc40 <ethernet_input+0x1c>
    p->if_idx = netif_get_index(netif);
 800dc38:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	73e3      	strb	r3, [r4, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dc40:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dc42:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800dc44:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800dc46:	07d9      	lsls	r1, r3, #31
 800dc48:	d50a      	bpl.n	800dc60 <ethernet_input+0x3c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d030      	beq.n	800dcb0 <ethernet_input+0x8c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dc4e:	2206      	movs	r2, #6
 800dc50:	491d      	ldr	r1, [pc, #116]	; (800dcc8 <ethernet_input+0xa4>)
 800dc52:	f000 fa1e 	bl	800e092 <memcmp>
 800dc56:	b918      	cbnz	r0, 800dc60 <ethernet_input+0x3c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800dc58:	7b63      	ldrb	r3, [r4, #13]
 800dc5a:	f043 0308 	orr.w	r3, r3, #8
 800dc5e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800dc60:	2e08      	cmp	r6, #8
 800dc62:	d016      	beq.n	800dc92 <ethernet_input+0x6e>
 800dc64:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800dc68:	d004      	beq.n	800dc74 <ethernet_input+0x50>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	f7f9 ff92 	bl	8007b94 <pbuf_free>
  return ERR_OK;
}
 800dc70:	2000      	movs	r0, #0
 800dc72:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dc74:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800dc78:	071b      	lsls	r3, r3, #28
 800dc7a:	d5f6      	bpl.n	800dc6a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dc7c:	210e      	movs	r1, #14
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7f9 ff18 	bl	8007ab4 <pbuf_remove_header>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d1f0      	bne.n	800dc6a <ethernet_input+0x46>
        etharp_input(p, netif);
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f7fe fe68 	bl	800c960 <etharp_input>
      break;
 800dc90:	e7ee      	b.n	800dc70 <ethernet_input+0x4c>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dc92:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800dc96:	071a      	lsls	r2, r3, #28
 800dc98:	d5e7      	bpl.n	800dc6a <ethernet_input+0x46>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800dc9a:	210e      	movs	r1, #14
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	f7f9 ff09 	bl	8007ab4 <pbuf_remove_header>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d1e1      	bne.n	800dc6a <ethernet_input+0x46>
        ip4_input(p, netif);
 800dca6:	4629      	mov	r1, r5
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f7ff f9d5 	bl	800d058 <ip4_input>
      break;
 800dcae:	e7df      	b.n	800dc70 <ethernet_input+0x4c>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dcb0:	7843      	ldrb	r3, [r0, #1]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1d4      	bne.n	800dc60 <ethernet_input+0x3c>
 800dcb6:	7883      	ldrb	r3, [r0, #2]
 800dcb8:	2b5e      	cmp	r3, #94	; 0x5e
 800dcba:	d1d1      	bne.n	800dc60 <ethernet_input+0x3c>
        p->flags |= PBUF_FLAG_LLMCAST;
 800dcbc:	7b63      	ldrb	r3, [r4, #13]
 800dcbe:	f043 0310 	orr.w	r3, r3, #16
 800dcc2:	7363      	strb	r3, [r4, #13]
 800dcc4:	e7cc      	b.n	800dc60 <ethernet_input+0x3c>
 800dcc6:	bf00      	nop
 800dcc8:	08011988 	.word	0x08011988

0800dccc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800dccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcd0:	460c      	mov	r4, r1
 800dcd2:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800dcd4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800dcd8:	4616      	mov	r6, r2
 800dcda:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800dcdc:	f7f8 fe32 	bl	8006944 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dce0:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800dce2:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800dce4:	4620      	mov	r0, r4
 800dce6:	f7f9 feb1 	bl	8007a4c <pbuf_add_header>
 800dcea:	b9f0      	cbnz	r0, 800dd2a <ethernet_output+0x5e>
      goto pbuf_header_failed;
    }
  }

  LWIP_ASSERT_CORE_LOCKED();
 800dcec:	f7f6 f8ea 	bl	8003ec4 <sys_check_core_locking>

  ethhdr = (struct eth_hdr *)p->payload;
 800dcf0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800dcf2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	600b      	str	r3, [r1, #0]
 800dcfa:	88bb      	ldrh	r3, [r7, #4]
 800dcfc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800dcfe:	6833      	ldr	r3, [r6, #0]
 800dd00:	f8c1 3006 	str.w	r3, [r1, #6]
 800dd04:	88b3      	ldrh	r3, [r6, #4]
 800dd06:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800dd08:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800dd0c:	2b06      	cmp	r3, #6
 800dd0e:	d006      	beq.n	800dd1e <ethernet_output+0x52>
 800dd10:	4b08      	ldr	r3, [pc, #32]	; (800dd34 <ethernet_output+0x68>)
 800dd12:	f44f 7299 	mov.w	r2, #306	; 0x132
 800dd16:	4908      	ldr	r1, [pc, #32]	; (800dd38 <ethernet_output+0x6c>)
 800dd18:	4808      	ldr	r0, [pc, #32]	; (800dd3c <ethernet_output+0x70>)
 800dd1a:	f000 fa75 	bl	800e208 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800dd1e:	69ab      	ldr	r3, [r5, #24]
 800dd20:	4621      	mov	r1, r4
 800dd22:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800dd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800dd28:	4718      	bx	r3
}
 800dd2a:	f06f 0001 	mvn.w	r0, #1
 800dd2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd32:	bf00      	nop
 800dd34:	0801191c 	.word	0x0801191c
 800dd38:	08011954 	.word	0x08011954
 800dd3c:	0800f0a0 	.word	0x0800f0a0

0800dd40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800dd40:	460b      	mov	r3, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd42:	2200      	movs	r2, #0
 800dd44:	2104      	movs	r1, #4
{
 800dd46:	b510      	push	{r4, lr}
 800dd48:	4604      	mov	r4, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7f6 fac0 	bl	80042d0 <osMessageQueueNew>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800dd50:	fab0 f380 	clz	r3, r0
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dd54:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 800dd56:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 800dd58:	4258      	negs	r0, r3
 800dd5a:	bd10      	pop	{r4, pc}

0800dd5c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800dd5c:	b500      	push	{lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd5e:	2300      	movs	r3, #0
{
 800dd60:	b083      	sub	sp, #12
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd62:	6800      	ldr	r0, [r0, #0]
{
 800dd64:	9101      	str	r1, [sp, #4]
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800dd66:	461a      	mov	r2, r3
 800dd68:	a901      	add	r1, sp, #4
 800dd6a:	f7f6 faeb 	bl	8004344 <osMessageQueuePut>
 800dd6e:	3800      	subs	r0, #0
 800dd70:	bf18      	it	ne
 800dd72:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800dd74:	4240      	negs	r0, r0
 800dd76:	b003      	add	sp, #12
 800dd78:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4615      	mov	r5, r2
 800dd80:	b082      	sub	sp, #8
 800dd82:	4606      	mov	r6, r0
 800dd84:	9101      	str	r1, [sp, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800dd86:	f7f6 f911 	bl	8003fac <osKernelGetTickCount>
#endif
  if(timeout != 0)
 800dd8a:	9901      	ldr	r1, [sp, #4]
  uint32_t starttime = osKernelGetTickCount();
 800dd8c:	4604      	mov	r4, r0
  if(timeout != 0)
 800dd8e:	b14d      	cbz	r5, 800dda4 <sys_arch_mbox_fetch+0x28>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800dd90:	462b      	mov	r3, r5
 800dd92:	2200      	movs	r2, #0
 800dd94:	6830      	ldr	r0, [r6, #0]
 800dd96:	f7f6 fb17 	bl	80043c8 <osMessageQueueGet>
    if (status == osOK)
 800dd9a:	b148      	cbz	r0, 800ddb0 <sys_arch_mbox_fetch+0x34>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800dd9c:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800dda0:	b002      	add	sp, #8
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800dda4:	f04f 33ff 	mov.w	r3, #4294967295
 800dda8:	462a      	mov	r2, r5
 800ddaa:	6830      	ldr	r0, [r6, #0]
 800ddac:	f7f6 fb0c 	bl	80043c8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800ddb0:	f7f6 f8fc 	bl	8003fac <osKernelGetTickCount>
 800ddb4:	1b00      	subs	r0, r0, r4
}
 800ddb6:	b002      	add	sp, #8
 800ddb8:	bd70      	pop	{r4, r5, r6, pc}
 800ddba:	bf00      	nop

0800ddbc <sys_mbox_valid>:
 800ddbc:	6800      	ldr	r0, [r0, #0]
 800ddbe:	3800      	subs	r0, #0
 800ddc0:	bf18      	it	ne
 800ddc2:	2001      	movne	r0, #1
 800ddc4:	4770      	bx	lr
 800ddc6:	bf00      	nop

0800ddc8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ddc8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800ddca:	2000      	movs	r0, #0
 800ddcc:	f7f6 f950 	bl	8004070 <osMutexNew>
 800ddd0:	4b01      	ldr	r3, [pc, #4]	; (800ddd8 <sys_init+0x10>)
 800ddd2:	6018      	str	r0, [r3, #0]
#endif
}
 800ddd4:	bd08      	pop	{r3, pc}
 800ddd6:	bf00      	nop
 800ddd8:	240106e0 	.word	0x240106e0

0800dddc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800dddc:	b510      	push	{r4, lr}
 800ddde:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800dde0:	2000      	movs	r0, #0
 800dde2:	f7f6 f945 	bl	8004070 <osMutexNew>
#endif

  if(*mutex == NULL)
 800dde6:	fab0 f380 	clz	r3, r0
  *mutex = osMutexNew(NULL);
 800ddea:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 800ddec:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ddee:	4258      	negs	r0, r3
 800ddf0:	bd10      	pop	{r4, pc}
 800ddf2:	bf00      	nop

0800ddf4 <sys_mutex_lock>:
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800ddf4:	f04f 31ff 	mov.w	r1, #4294967295
 800ddf8:	6800      	ldr	r0, [r0, #0]
 800ddfa:	f7f6 b973 	b.w	80040e4 <osMutexAcquire>
 800ddfe:	bf00      	nop

0800de00 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800de00:	6800      	ldr	r0, [r0, #0]
 800de02:	f7f6 b993 	b.w	800412c <osMutexRelease>
 800de06:	bf00      	nop

0800de08 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800de08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de0a:	b08b      	sub	sp, #44	; 0x2c
 800de0c:	4617      	mov	r7, r2
 800de0e:	460e      	mov	r6, r1
 800de10:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800de12:	2220      	movs	r2, #32
 800de14:	2100      	movs	r1, #0
 800de16:	a802      	add	r0, sp, #8
{
 800de18:	461c      	mov	r4, r3
  const osThreadAttr_t attributes = {
 800de1a:	f000 f958 	bl	800e0ce <memset>
 800de1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800de20:	4639      	mov	r1, r7
 800de22:	aa01      	add	r2, sp, #4
 800de24:	4630      	mov	r0, r6
  const osThreadAttr_t attributes = {
 800de26:	9501      	str	r5, [sp, #4]
 800de28:	9406      	str	r4, [sp, #24]
 800de2a:	9307      	str	r3, [sp, #28]
  return osThreadNew(thread, arg, &attributes);
 800de2c:	f7f6 f8c6 	bl	8003fbc <osThreadNew>
#endif
}
 800de30:	b00b      	add	sp, #44	; 0x2c
 800de32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de34 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800de34:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800de36:	4b04      	ldr	r3, [pc, #16]	; (800de48 <sys_arch_protect+0x14>)
 800de38:	f04f 31ff 	mov.w	r1, #4294967295
 800de3c:	6818      	ldr	r0, [r3, #0]
 800de3e:	f7f6 f951 	bl	80040e4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800de42:	2001      	movs	r0, #1
 800de44:	bd08      	pop	{r3, pc}
 800de46:	bf00      	nop
 800de48:	240106e0 	.word	0x240106e0

0800de4c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800de4c:	4b01      	ldr	r3, [pc, #4]	; (800de54 <sys_arch_unprotect+0x8>)
 800de4e:	6818      	ldr	r0, [r3, #0]
 800de50:	f7f6 b96c 	b.w	800412c <osMutexRelease>
 800de54:	240106e0 	.word	0x240106e0

0800de58 <std>:
 800de58:	2300      	movs	r3, #0
 800de5a:	b510      	push	{r4, lr}
 800de5c:	4604      	mov	r4, r0
 800de5e:	e9c0 3300 	strd	r3, r3, [r0]
 800de62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de66:	6083      	str	r3, [r0, #8]
 800de68:	8181      	strh	r1, [r0, #12]
 800de6a:	6643      	str	r3, [r0, #100]	; 0x64
 800de6c:	81c2      	strh	r2, [r0, #14]
 800de6e:	6183      	str	r3, [r0, #24]
 800de70:	4619      	mov	r1, r3
 800de72:	2208      	movs	r2, #8
 800de74:	305c      	adds	r0, #92	; 0x5c
 800de76:	f000 f92a 	bl	800e0ce <memset>
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <std+0x38>)
 800de7c:	6263      	str	r3, [r4, #36]	; 0x24
 800de7e:	4b05      	ldr	r3, [pc, #20]	; (800de94 <std+0x3c>)
 800de80:	62a3      	str	r3, [r4, #40]	; 0x28
 800de82:	4b05      	ldr	r3, [pc, #20]	; (800de98 <std+0x40>)
 800de84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de86:	4b05      	ldr	r3, [pc, #20]	; (800de9c <std+0x44>)
 800de88:	6224      	str	r4, [r4, #32]
 800de8a:	6323      	str	r3, [r4, #48]	; 0x30
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	bf00      	nop
 800de90:	0800e3a9 	.word	0x0800e3a9
 800de94:	0800e3cb 	.word	0x0800e3cb
 800de98:	0800e403 	.word	0x0800e403
 800de9c:	0800e427 	.word	0x0800e427

0800dea0 <_cleanup_r>:
 800dea0:	4901      	ldr	r1, [pc, #4]	; (800dea8 <_cleanup_r+0x8>)
 800dea2:	f000 b8af 	b.w	800e004 <_fwalk_reent>
 800dea6:	bf00      	nop
 800dea8:	0800e5bd 	.word	0x0800e5bd

0800deac <__sfmoreglue>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	2268      	movs	r2, #104	; 0x68
 800deb0:	1e4d      	subs	r5, r1, #1
 800deb2:	4355      	muls	r5, r2
 800deb4:	460e      	mov	r6, r1
 800deb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800deba:	f000 f931 	bl	800e120 <_malloc_r>
 800debe:	4604      	mov	r4, r0
 800dec0:	b140      	cbz	r0, 800ded4 <__sfmoreglue+0x28>
 800dec2:	2100      	movs	r1, #0
 800dec4:	e9c0 1600 	strd	r1, r6, [r0]
 800dec8:	300c      	adds	r0, #12
 800deca:	60a0      	str	r0, [r4, #8]
 800decc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ded0:	f000 f8fd 	bl	800e0ce <memset>
 800ded4:	4620      	mov	r0, r4
 800ded6:	bd70      	pop	{r4, r5, r6, pc}

0800ded8 <__sfp_lock_acquire>:
 800ded8:	4801      	ldr	r0, [pc, #4]	; (800dee0 <__sfp_lock_acquire+0x8>)
 800deda:	f000 b8d8 	b.w	800e08e <__retarget_lock_acquire_recursive>
 800dede:	bf00      	nop
 800dee0:	240106e5 	.word	0x240106e5

0800dee4 <__sfp_lock_release>:
 800dee4:	4801      	ldr	r0, [pc, #4]	; (800deec <__sfp_lock_release+0x8>)
 800dee6:	f000 b8d3 	b.w	800e090 <__retarget_lock_release_recursive>
 800deea:	bf00      	nop
 800deec:	240106e5 	.word	0x240106e5

0800def0 <__sinit_lock_acquire>:
 800def0:	4801      	ldr	r0, [pc, #4]	; (800def8 <__sinit_lock_acquire+0x8>)
 800def2:	f000 b8cc 	b.w	800e08e <__retarget_lock_acquire_recursive>
 800def6:	bf00      	nop
 800def8:	240106e6 	.word	0x240106e6

0800defc <__sinit_lock_release>:
 800defc:	4801      	ldr	r0, [pc, #4]	; (800df04 <__sinit_lock_release+0x8>)
 800defe:	f000 b8c7 	b.w	800e090 <__retarget_lock_release_recursive>
 800df02:	bf00      	nop
 800df04:	240106e6 	.word	0x240106e6

0800df08 <__sinit>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	4604      	mov	r4, r0
 800df0c:	f7ff fff0 	bl	800def0 <__sinit_lock_acquire>
 800df10:	69a3      	ldr	r3, [r4, #24]
 800df12:	b11b      	cbz	r3, 800df1c <__sinit+0x14>
 800df14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df18:	f7ff bff0 	b.w	800defc <__sinit_lock_release>
 800df1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800df20:	6523      	str	r3, [r4, #80]	; 0x50
 800df22:	4b13      	ldr	r3, [pc, #76]	; (800df70 <__sinit+0x68>)
 800df24:	4a13      	ldr	r2, [pc, #76]	; (800df74 <__sinit+0x6c>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	62a2      	str	r2, [r4, #40]	; 0x28
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	bf04      	itt	eq
 800df2e:	2301      	moveq	r3, #1
 800df30:	61a3      	streq	r3, [r4, #24]
 800df32:	4620      	mov	r0, r4
 800df34:	f000 f820 	bl	800df78 <__sfp>
 800df38:	6060      	str	r0, [r4, #4]
 800df3a:	4620      	mov	r0, r4
 800df3c:	f000 f81c 	bl	800df78 <__sfp>
 800df40:	60a0      	str	r0, [r4, #8]
 800df42:	4620      	mov	r0, r4
 800df44:	f000 f818 	bl	800df78 <__sfp>
 800df48:	2200      	movs	r2, #0
 800df4a:	60e0      	str	r0, [r4, #12]
 800df4c:	2104      	movs	r1, #4
 800df4e:	6860      	ldr	r0, [r4, #4]
 800df50:	f7ff ff82 	bl	800de58 <std>
 800df54:	68a0      	ldr	r0, [r4, #8]
 800df56:	2201      	movs	r2, #1
 800df58:	2109      	movs	r1, #9
 800df5a:	f7ff ff7d 	bl	800de58 <std>
 800df5e:	68e0      	ldr	r0, [r4, #12]
 800df60:	2202      	movs	r2, #2
 800df62:	2112      	movs	r1, #18
 800df64:	f7ff ff78 	bl	800de58 <std>
 800df68:	2301      	movs	r3, #1
 800df6a:	61a3      	str	r3, [r4, #24]
 800df6c:	e7d2      	b.n	800df14 <__sinit+0xc>
 800df6e:	bf00      	nop
 800df70:	080119f8 	.word	0x080119f8
 800df74:	0800dea1 	.word	0x0800dea1

0800df78 <__sfp>:
 800df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7a:	4607      	mov	r7, r0
 800df7c:	f7ff ffac 	bl	800ded8 <__sfp_lock_acquire>
 800df80:	4b1e      	ldr	r3, [pc, #120]	; (800dffc <__sfp+0x84>)
 800df82:	681e      	ldr	r6, [r3, #0]
 800df84:	69b3      	ldr	r3, [r6, #24]
 800df86:	b913      	cbnz	r3, 800df8e <__sfp+0x16>
 800df88:	4630      	mov	r0, r6
 800df8a:	f7ff ffbd 	bl	800df08 <__sinit>
 800df8e:	3648      	adds	r6, #72	; 0x48
 800df90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df94:	3b01      	subs	r3, #1
 800df96:	d503      	bpl.n	800dfa0 <__sfp+0x28>
 800df98:	6833      	ldr	r3, [r6, #0]
 800df9a:	b30b      	cbz	r3, 800dfe0 <__sfp+0x68>
 800df9c:	6836      	ldr	r6, [r6, #0]
 800df9e:	e7f7      	b.n	800df90 <__sfp+0x18>
 800dfa0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfa4:	b9d5      	cbnz	r5, 800dfdc <__sfp+0x64>
 800dfa6:	4b16      	ldr	r3, [pc, #88]	; (800e000 <__sfp+0x88>)
 800dfa8:	60e3      	str	r3, [r4, #12]
 800dfaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dfae:	6665      	str	r5, [r4, #100]	; 0x64
 800dfb0:	f000 f86c 	bl	800e08c <__retarget_lock_init_recursive>
 800dfb4:	f7ff ff96 	bl	800dee4 <__sfp_lock_release>
 800dfb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dfbc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dfc0:	6025      	str	r5, [r4, #0]
 800dfc2:	61a5      	str	r5, [r4, #24]
 800dfc4:	2208      	movs	r2, #8
 800dfc6:	4629      	mov	r1, r5
 800dfc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfcc:	f000 f87f 	bl	800e0ce <memset>
 800dfd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dfd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dfd8:	4620      	mov	r0, r4
 800dfda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfdc:	3468      	adds	r4, #104	; 0x68
 800dfde:	e7d9      	b.n	800df94 <__sfp+0x1c>
 800dfe0:	2104      	movs	r1, #4
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	f7ff ff62 	bl	800deac <__sfmoreglue>
 800dfe8:	4604      	mov	r4, r0
 800dfea:	6030      	str	r0, [r6, #0]
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d1d5      	bne.n	800df9c <__sfp+0x24>
 800dff0:	f7ff ff78 	bl	800dee4 <__sfp_lock_release>
 800dff4:	230c      	movs	r3, #12
 800dff6:	603b      	str	r3, [r7, #0]
 800dff8:	e7ee      	b.n	800dfd8 <__sfp+0x60>
 800dffa:	bf00      	nop
 800dffc:	080119f8 	.word	0x080119f8
 800e000:	ffff0001 	.word	0xffff0001

0800e004 <_fwalk_reent>:
 800e004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e008:	4606      	mov	r6, r0
 800e00a:	4688      	mov	r8, r1
 800e00c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e010:	2700      	movs	r7, #0
 800e012:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e016:	f1b9 0901 	subs.w	r9, r9, #1
 800e01a:	d505      	bpl.n	800e028 <_fwalk_reent+0x24>
 800e01c:	6824      	ldr	r4, [r4, #0]
 800e01e:	2c00      	cmp	r4, #0
 800e020:	d1f7      	bne.n	800e012 <_fwalk_reent+0xe>
 800e022:	4638      	mov	r0, r7
 800e024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e028:	89ab      	ldrh	r3, [r5, #12]
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	d907      	bls.n	800e03e <_fwalk_reent+0x3a>
 800e02e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e032:	3301      	adds	r3, #1
 800e034:	d003      	beq.n	800e03e <_fwalk_reent+0x3a>
 800e036:	4629      	mov	r1, r5
 800e038:	4630      	mov	r0, r6
 800e03a:	47c0      	blx	r8
 800e03c:	4307      	orrs	r7, r0
 800e03e:	3568      	adds	r5, #104	; 0x68
 800e040:	e7e9      	b.n	800e016 <_fwalk_reent+0x12>
	...

0800e044 <__libc_init_array>:
 800e044:	b570      	push	{r4, r5, r6, lr}
 800e046:	4d0d      	ldr	r5, [pc, #52]	; (800e07c <__libc_init_array+0x38>)
 800e048:	4c0d      	ldr	r4, [pc, #52]	; (800e080 <__libc_init_array+0x3c>)
 800e04a:	1b64      	subs	r4, r4, r5
 800e04c:	10a4      	asrs	r4, r4, #2
 800e04e:	2600      	movs	r6, #0
 800e050:	42a6      	cmp	r6, r4
 800e052:	d109      	bne.n	800e068 <__libc_init_array+0x24>
 800e054:	4d0b      	ldr	r5, [pc, #44]	; (800e084 <__libc_init_array+0x40>)
 800e056:	4c0c      	ldr	r4, [pc, #48]	; (800e088 <__libc_init_array+0x44>)
 800e058:	f001 f802 	bl	800f060 <_init>
 800e05c:	1b64      	subs	r4, r4, r5
 800e05e:	10a4      	asrs	r4, r4, #2
 800e060:	2600      	movs	r6, #0
 800e062:	42a6      	cmp	r6, r4
 800e064:	d105      	bne.n	800e072 <__libc_init_array+0x2e>
 800e066:	bd70      	pop	{r4, r5, r6, pc}
 800e068:	f855 3b04 	ldr.w	r3, [r5], #4
 800e06c:	4798      	blx	r3
 800e06e:	3601      	adds	r6, #1
 800e070:	e7ee      	b.n	800e050 <__libc_init_array+0xc>
 800e072:	f855 3b04 	ldr.w	r3, [r5], #4
 800e076:	4798      	blx	r3
 800e078:	3601      	adds	r6, #1
 800e07a:	e7f2      	b.n	800e062 <__libc_init_array+0x1e>
 800e07c:	08011ae0 	.word	0x08011ae0
 800e080:	08011ae0 	.word	0x08011ae0
 800e084:	08011ae0 	.word	0x08011ae0
 800e088:	08011ae4 	.word	0x08011ae4

0800e08c <__retarget_lock_init_recursive>:
 800e08c:	4770      	bx	lr

0800e08e <__retarget_lock_acquire_recursive>:
 800e08e:	4770      	bx	lr

0800e090 <__retarget_lock_release_recursive>:
 800e090:	4770      	bx	lr

0800e092 <memcmp>:
 800e092:	b510      	push	{r4, lr}
 800e094:	3901      	subs	r1, #1
 800e096:	4402      	add	r2, r0
 800e098:	4290      	cmp	r0, r2
 800e09a:	d101      	bne.n	800e0a0 <memcmp+0xe>
 800e09c:	2000      	movs	r0, #0
 800e09e:	e005      	b.n	800e0ac <memcmp+0x1a>
 800e0a0:	7803      	ldrb	r3, [r0, #0]
 800e0a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0a6:	42a3      	cmp	r3, r4
 800e0a8:	d001      	beq.n	800e0ae <memcmp+0x1c>
 800e0aa:	1b18      	subs	r0, r3, r4
 800e0ac:	bd10      	pop	{r4, pc}
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	e7f2      	b.n	800e098 <memcmp+0x6>

0800e0b2 <memcpy>:
 800e0b2:	440a      	add	r2, r1
 800e0b4:	4291      	cmp	r1, r2
 800e0b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0ba:	d100      	bne.n	800e0be <memcpy+0xc>
 800e0bc:	4770      	bx	lr
 800e0be:	b510      	push	{r4, lr}
 800e0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0c8:	4291      	cmp	r1, r2
 800e0ca:	d1f9      	bne.n	800e0c0 <memcpy+0xe>
 800e0cc:	bd10      	pop	{r4, pc}

0800e0ce <memset>:
 800e0ce:	4402      	add	r2, r0
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d100      	bne.n	800e0d8 <memset+0xa>
 800e0d6:	4770      	bx	lr
 800e0d8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0dc:	e7f9      	b.n	800e0d2 <memset+0x4>
	...

0800e0e0 <sbrk_aligned>:
 800e0e0:	b570      	push	{r4, r5, r6, lr}
 800e0e2:	4e0e      	ldr	r6, [pc, #56]	; (800e11c <sbrk_aligned+0x3c>)
 800e0e4:	460c      	mov	r4, r1
 800e0e6:	6831      	ldr	r1, [r6, #0]
 800e0e8:	4605      	mov	r5, r0
 800e0ea:	b911      	cbnz	r1, 800e0f2 <sbrk_aligned+0x12>
 800e0ec:	f000 f94c 	bl	800e388 <_sbrk_r>
 800e0f0:	6030      	str	r0, [r6, #0]
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f000 f947 	bl	800e388 <_sbrk_r>
 800e0fa:	1c43      	adds	r3, r0, #1
 800e0fc:	d00a      	beq.n	800e114 <sbrk_aligned+0x34>
 800e0fe:	1cc4      	adds	r4, r0, #3
 800e100:	f024 0403 	bic.w	r4, r4, #3
 800e104:	42a0      	cmp	r0, r4
 800e106:	d007      	beq.n	800e118 <sbrk_aligned+0x38>
 800e108:	1a21      	subs	r1, r4, r0
 800e10a:	4628      	mov	r0, r5
 800e10c:	f000 f93c 	bl	800e388 <_sbrk_r>
 800e110:	3001      	adds	r0, #1
 800e112:	d101      	bne.n	800e118 <sbrk_aligned+0x38>
 800e114:	f04f 34ff 	mov.w	r4, #4294967295
 800e118:	4620      	mov	r0, r4
 800e11a:	bd70      	pop	{r4, r5, r6, pc}
 800e11c:	240106ec 	.word	0x240106ec

0800e120 <_malloc_r>:
 800e120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e124:	1ccd      	adds	r5, r1, #3
 800e126:	f025 0503 	bic.w	r5, r5, #3
 800e12a:	3508      	adds	r5, #8
 800e12c:	2d0c      	cmp	r5, #12
 800e12e:	bf38      	it	cc
 800e130:	250c      	movcc	r5, #12
 800e132:	2d00      	cmp	r5, #0
 800e134:	4607      	mov	r7, r0
 800e136:	db01      	blt.n	800e13c <_malloc_r+0x1c>
 800e138:	42a9      	cmp	r1, r5
 800e13a:	d905      	bls.n	800e148 <_malloc_r+0x28>
 800e13c:	230c      	movs	r3, #12
 800e13e:	603b      	str	r3, [r7, #0]
 800e140:	2600      	movs	r6, #0
 800e142:	4630      	mov	r0, r6
 800e144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e148:	4e2e      	ldr	r6, [pc, #184]	; (800e204 <_malloc_r+0xe4>)
 800e14a:	f000 fa9f 	bl	800e68c <__malloc_lock>
 800e14e:	6833      	ldr	r3, [r6, #0]
 800e150:	461c      	mov	r4, r3
 800e152:	bb34      	cbnz	r4, 800e1a2 <_malloc_r+0x82>
 800e154:	4629      	mov	r1, r5
 800e156:	4638      	mov	r0, r7
 800e158:	f7ff ffc2 	bl	800e0e0 <sbrk_aligned>
 800e15c:	1c43      	adds	r3, r0, #1
 800e15e:	4604      	mov	r4, r0
 800e160:	d14d      	bne.n	800e1fe <_malloc_r+0xde>
 800e162:	6834      	ldr	r4, [r6, #0]
 800e164:	4626      	mov	r6, r4
 800e166:	2e00      	cmp	r6, #0
 800e168:	d140      	bne.n	800e1ec <_malloc_r+0xcc>
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	4631      	mov	r1, r6
 800e16e:	4638      	mov	r0, r7
 800e170:	eb04 0803 	add.w	r8, r4, r3
 800e174:	f000 f908 	bl	800e388 <_sbrk_r>
 800e178:	4580      	cmp	r8, r0
 800e17a:	d13a      	bne.n	800e1f2 <_malloc_r+0xd2>
 800e17c:	6821      	ldr	r1, [r4, #0]
 800e17e:	3503      	adds	r5, #3
 800e180:	1a6d      	subs	r5, r5, r1
 800e182:	f025 0503 	bic.w	r5, r5, #3
 800e186:	3508      	adds	r5, #8
 800e188:	2d0c      	cmp	r5, #12
 800e18a:	bf38      	it	cc
 800e18c:	250c      	movcc	r5, #12
 800e18e:	4629      	mov	r1, r5
 800e190:	4638      	mov	r0, r7
 800e192:	f7ff ffa5 	bl	800e0e0 <sbrk_aligned>
 800e196:	3001      	adds	r0, #1
 800e198:	d02b      	beq.n	800e1f2 <_malloc_r+0xd2>
 800e19a:	6823      	ldr	r3, [r4, #0]
 800e19c:	442b      	add	r3, r5
 800e19e:	6023      	str	r3, [r4, #0]
 800e1a0:	e00e      	b.n	800e1c0 <_malloc_r+0xa0>
 800e1a2:	6822      	ldr	r2, [r4, #0]
 800e1a4:	1b52      	subs	r2, r2, r5
 800e1a6:	d41e      	bmi.n	800e1e6 <_malloc_r+0xc6>
 800e1a8:	2a0b      	cmp	r2, #11
 800e1aa:	d916      	bls.n	800e1da <_malloc_r+0xba>
 800e1ac:	1961      	adds	r1, r4, r5
 800e1ae:	42a3      	cmp	r3, r4
 800e1b0:	6025      	str	r5, [r4, #0]
 800e1b2:	bf18      	it	ne
 800e1b4:	6059      	strne	r1, [r3, #4]
 800e1b6:	6863      	ldr	r3, [r4, #4]
 800e1b8:	bf08      	it	eq
 800e1ba:	6031      	streq	r1, [r6, #0]
 800e1bc:	5162      	str	r2, [r4, r5]
 800e1be:	604b      	str	r3, [r1, #4]
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f104 060b 	add.w	r6, r4, #11
 800e1c6:	f000 fa67 	bl	800e698 <__malloc_unlock>
 800e1ca:	f026 0607 	bic.w	r6, r6, #7
 800e1ce:	1d23      	adds	r3, r4, #4
 800e1d0:	1af2      	subs	r2, r6, r3
 800e1d2:	d0b6      	beq.n	800e142 <_malloc_r+0x22>
 800e1d4:	1b9b      	subs	r3, r3, r6
 800e1d6:	50a3      	str	r3, [r4, r2]
 800e1d8:	e7b3      	b.n	800e142 <_malloc_r+0x22>
 800e1da:	6862      	ldr	r2, [r4, #4]
 800e1dc:	42a3      	cmp	r3, r4
 800e1de:	bf0c      	ite	eq
 800e1e0:	6032      	streq	r2, [r6, #0]
 800e1e2:	605a      	strne	r2, [r3, #4]
 800e1e4:	e7ec      	b.n	800e1c0 <_malloc_r+0xa0>
 800e1e6:	4623      	mov	r3, r4
 800e1e8:	6864      	ldr	r4, [r4, #4]
 800e1ea:	e7b2      	b.n	800e152 <_malloc_r+0x32>
 800e1ec:	4634      	mov	r4, r6
 800e1ee:	6876      	ldr	r6, [r6, #4]
 800e1f0:	e7b9      	b.n	800e166 <_malloc_r+0x46>
 800e1f2:	230c      	movs	r3, #12
 800e1f4:	603b      	str	r3, [r7, #0]
 800e1f6:	4638      	mov	r0, r7
 800e1f8:	f000 fa4e 	bl	800e698 <__malloc_unlock>
 800e1fc:	e7a1      	b.n	800e142 <_malloc_r+0x22>
 800e1fe:	6025      	str	r5, [r4, #0]
 800e200:	e7de      	b.n	800e1c0 <_malloc_r+0xa0>
 800e202:	bf00      	nop
 800e204:	240106e8 	.word	0x240106e8

0800e208 <iprintf>:
 800e208:	b40f      	push	{r0, r1, r2, r3}
 800e20a:	4b0a      	ldr	r3, [pc, #40]	; (800e234 <iprintf+0x2c>)
 800e20c:	b513      	push	{r0, r1, r4, lr}
 800e20e:	681c      	ldr	r4, [r3, #0]
 800e210:	b124      	cbz	r4, 800e21c <iprintf+0x14>
 800e212:	69a3      	ldr	r3, [r4, #24]
 800e214:	b913      	cbnz	r3, 800e21c <iprintf+0x14>
 800e216:	4620      	mov	r0, r4
 800e218:	f7ff fe76 	bl	800df08 <__sinit>
 800e21c:	ab05      	add	r3, sp, #20
 800e21e:	9a04      	ldr	r2, [sp, #16]
 800e220:	68a1      	ldr	r1, [r4, #8]
 800e222:	9301      	str	r3, [sp, #4]
 800e224:	4620      	mov	r0, r4
 800e226:	f000 fab3 	bl	800e790 <_vfiprintf_r>
 800e22a:	b002      	add	sp, #8
 800e22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e230:	b004      	add	sp, #16
 800e232:	4770      	bx	lr
 800e234:	24000030 	.word	0x24000030

0800e238 <rand>:
 800e238:	4b16      	ldr	r3, [pc, #88]	; (800e294 <rand+0x5c>)
 800e23a:	b510      	push	{r4, lr}
 800e23c:	681c      	ldr	r4, [r3, #0]
 800e23e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e240:	b9b3      	cbnz	r3, 800e270 <rand+0x38>
 800e242:	2018      	movs	r0, #24
 800e244:	f000 fa1a 	bl	800e67c <malloc>
 800e248:	63a0      	str	r0, [r4, #56]	; 0x38
 800e24a:	b928      	cbnz	r0, 800e258 <rand+0x20>
 800e24c:	4602      	mov	r2, r0
 800e24e:	4b12      	ldr	r3, [pc, #72]	; (800e298 <rand+0x60>)
 800e250:	4812      	ldr	r0, [pc, #72]	; (800e29c <rand+0x64>)
 800e252:	214e      	movs	r1, #78	; 0x4e
 800e254:	f000 f8fe 	bl	800e454 <__assert_func>
 800e258:	4a11      	ldr	r2, [pc, #68]	; (800e2a0 <rand+0x68>)
 800e25a:	4b12      	ldr	r3, [pc, #72]	; (800e2a4 <rand+0x6c>)
 800e25c:	e9c0 2300 	strd	r2, r3, [r0]
 800e260:	4b11      	ldr	r3, [pc, #68]	; (800e2a8 <rand+0x70>)
 800e262:	6083      	str	r3, [r0, #8]
 800e264:	230b      	movs	r3, #11
 800e266:	8183      	strh	r3, [r0, #12]
 800e268:	2201      	movs	r2, #1
 800e26a:	2300      	movs	r3, #0
 800e26c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e270:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e272:	4a0e      	ldr	r2, [pc, #56]	; (800e2ac <rand+0x74>)
 800e274:	6920      	ldr	r0, [r4, #16]
 800e276:	6963      	ldr	r3, [r4, #20]
 800e278:	490d      	ldr	r1, [pc, #52]	; (800e2b0 <rand+0x78>)
 800e27a:	4342      	muls	r2, r0
 800e27c:	fb01 2203 	mla	r2, r1, r3, r2
 800e280:	fba0 0101 	umull	r0, r1, r0, r1
 800e284:	1c43      	adds	r3, r0, #1
 800e286:	eb42 0001 	adc.w	r0, r2, r1
 800e28a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e28e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e292:	bd10      	pop	{r4, pc}
 800e294:	24000030 	.word	0x24000030
 800e298:	080119fc 	.word	0x080119fc
 800e29c:	08011a13 	.word	0x08011a13
 800e2a0:	abcd330e 	.word	0xabcd330e
 800e2a4:	e66d1234 	.word	0xe66d1234
 800e2a8:	0005deec 	.word	0x0005deec
 800e2ac:	5851f42d 	.word	0x5851f42d
 800e2b0:	4c957f2d 	.word	0x4c957f2d

0800e2b4 <cleanup_glue>:
 800e2b4:	b538      	push	{r3, r4, r5, lr}
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	6809      	ldr	r1, [r1, #0]
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	b109      	cbz	r1, 800e2c2 <cleanup_glue+0xe>
 800e2be:	f7ff fff9 	bl	800e2b4 <cleanup_glue>
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2ca:	f000 b9eb 	b.w	800e6a4 <_free_r>
	...

0800e2d0 <_reclaim_reent>:
 800e2d0:	4b2c      	ldr	r3, [pc, #176]	; (800e384 <_reclaim_reent+0xb4>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4283      	cmp	r3, r0
 800e2d6:	b570      	push	{r4, r5, r6, lr}
 800e2d8:	4604      	mov	r4, r0
 800e2da:	d051      	beq.n	800e380 <_reclaim_reent+0xb0>
 800e2dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e2de:	b143      	cbz	r3, 800e2f2 <_reclaim_reent+0x22>
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d14a      	bne.n	800e37c <_reclaim_reent+0xac>
 800e2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e2e8:	6819      	ldr	r1, [r3, #0]
 800e2ea:	b111      	cbz	r1, 800e2f2 <_reclaim_reent+0x22>
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f000 f9d9 	bl	800e6a4 <_free_r>
 800e2f2:	6961      	ldr	r1, [r4, #20]
 800e2f4:	b111      	cbz	r1, 800e2fc <_reclaim_reent+0x2c>
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 f9d4 	bl	800e6a4 <_free_r>
 800e2fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e2fe:	b111      	cbz	r1, 800e306 <_reclaim_reent+0x36>
 800e300:	4620      	mov	r0, r4
 800e302:	f000 f9cf 	bl	800e6a4 <_free_r>
 800e306:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e308:	b111      	cbz	r1, 800e310 <_reclaim_reent+0x40>
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 f9ca 	bl	800e6a4 <_free_r>
 800e310:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e312:	b111      	cbz	r1, 800e31a <_reclaim_reent+0x4a>
 800e314:	4620      	mov	r0, r4
 800e316:	f000 f9c5 	bl	800e6a4 <_free_r>
 800e31a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e31c:	b111      	cbz	r1, 800e324 <_reclaim_reent+0x54>
 800e31e:	4620      	mov	r0, r4
 800e320:	f000 f9c0 	bl	800e6a4 <_free_r>
 800e324:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e326:	b111      	cbz	r1, 800e32e <_reclaim_reent+0x5e>
 800e328:	4620      	mov	r0, r4
 800e32a:	f000 f9bb 	bl	800e6a4 <_free_r>
 800e32e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e330:	b111      	cbz	r1, 800e338 <_reclaim_reent+0x68>
 800e332:	4620      	mov	r0, r4
 800e334:	f000 f9b6 	bl	800e6a4 <_free_r>
 800e338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e33a:	b111      	cbz	r1, 800e342 <_reclaim_reent+0x72>
 800e33c:	4620      	mov	r0, r4
 800e33e:	f000 f9b1 	bl	800e6a4 <_free_r>
 800e342:	69a3      	ldr	r3, [r4, #24]
 800e344:	b1e3      	cbz	r3, 800e380 <_reclaim_reent+0xb0>
 800e346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e348:	4620      	mov	r0, r4
 800e34a:	4798      	blx	r3
 800e34c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e34e:	b1b9      	cbz	r1, 800e380 <_reclaim_reent+0xb0>
 800e350:	4620      	mov	r0, r4
 800e352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e356:	f7ff bfad 	b.w	800e2b4 <cleanup_glue>
 800e35a:	5949      	ldr	r1, [r1, r5]
 800e35c:	b941      	cbnz	r1, 800e370 <_reclaim_reent+0xa0>
 800e35e:	3504      	adds	r5, #4
 800e360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e362:	2d80      	cmp	r5, #128	; 0x80
 800e364:	68d9      	ldr	r1, [r3, #12]
 800e366:	d1f8      	bne.n	800e35a <_reclaim_reent+0x8a>
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 f99b 	bl	800e6a4 <_free_r>
 800e36e:	e7ba      	b.n	800e2e6 <_reclaim_reent+0x16>
 800e370:	680e      	ldr	r6, [r1, #0]
 800e372:	4620      	mov	r0, r4
 800e374:	f000 f996 	bl	800e6a4 <_free_r>
 800e378:	4631      	mov	r1, r6
 800e37a:	e7ef      	b.n	800e35c <_reclaim_reent+0x8c>
 800e37c:	2500      	movs	r5, #0
 800e37e:	e7ef      	b.n	800e360 <_reclaim_reent+0x90>
 800e380:	bd70      	pop	{r4, r5, r6, pc}
 800e382:	bf00      	nop
 800e384:	24000030 	.word	0x24000030

0800e388 <_sbrk_r>:
 800e388:	b538      	push	{r3, r4, r5, lr}
 800e38a:	4d06      	ldr	r5, [pc, #24]	; (800e3a4 <_sbrk_r+0x1c>)
 800e38c:	2300      	movs	r3, #0
 800e38e:	4604      	mov	r4, r0
 800e390:	4608      	mov	r0, r1
 800e392:	602b      	str	r3, [r5, #0]
 800e394:	f7f2 ff6a 	bl	800126c <_sbrk>
 800e398:	1c43      	adds	r3, r0, #1
 800e39a:	d102      	bne.n	800e3a2 <_sbrk_r+0x1a>
 800e39c:	682b      	ldr	r3, [r5, #0]
 800e39e:	b103      	cbz	r3, 800e3a2 <_sbrk_r+0x1a>
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	bd38      	pop	{r3, r4, r5, pc}
 800e3a4:	240106f0 	.word	0x240106f0

0800e3a8 <__sread>:
 800e3a8:	b510      	push	{r4, lr}
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b0:	f000 fcb2 	bl	800ed18 <_read_r>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	bfab      	itete	ge
 800e3b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e3bc:	181b      	addge	r3, r3, r0
 800e3be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3c2:	bfac      	ite	ge
 800e3c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3c6:	81a3      	strhlt	r3, [r4, #12]
 800e3c8:	bd10      	pop	{r4, pc}

0800e3ca <__swrite>:
 800e3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ce:	461f      	mov	r7, r3
 800e3d0:	898b      	ldrh	r3, [r1, #12]
 800e3d2:	05db      	lsls	r3, r3, #23
 800e3d4:	4605      	mov	r5, r0
 800e3d6:	460c      	mov	r4, r1
 800e3d8:	4616      	mov	r6, r2
 800e3da:	d505      	bpl.n	800e3e8 <__swrite+0x1e>
 800e3dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e0:	2302      	movs	r3, #2
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	f000 f938 	bl	800e658 <_lseek_r>
 800e3e8:	89a3      	ldrh	r3, [r4, #12]
 800e3ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3f2:	81a3      	strh	r3, [r4, #12]
 800e3f4:	4632      	mov	r2, r6
 800e3f6:	463b      	mov	r3, r7
 800e3f8:	4628      	mov	r0, r5
 800e3fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fe:	f000 b817 	b.w	800e430 <_write_r>

0800e402 <__sseek>:
 800e402:	b510      	push	{r4, lr}
 800e404:	460c      	mov	r4, r1
 800e406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e40a:	f000 f925 	bl	800e658 <_lseek_r>
 800e40e:	1c43      	adds	r3, r0, #1
 800e410:	89a3      	ldrh	r3, [r4, #12]
 800e412:	bf15      	itete	ne
 800e414:	6560      	strne	r0, [r4, #84]	; 0x54
 800e416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e41a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e41e:	81a3      	strheq	r3, [r4, #12]
 800e420:	bf18      	it	ne
 800e422:	81a3      	strhne	r3, [r4, #12]
 800e424:	bd10      	pop	{r4, pc}

0800e426 <__sclose>:
 800e426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42a:	f000 b831 	b.w	800e490 <_close_r>
	...

0800e430 <_write_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d07      	ldr	r5, [pc, #28]	; (800e450 <_write_r+0x20>)
 800e434:	4604      	mov	r4, r0
 800e436:	4608      	mov	r0, r1
 800e438:	4611      	mov	r1, r2
 800e43a:	2200      	movs	r2, #0
 800e43c:	602a      	str	r2, [r5, #0]
 800e43e:	461a      	mov	r2, r3
 800e440:	f7f2 fef8 	bl	8001234 <_write>
 800e444:	1c43      	adds	r3, r0, #1
 800e446:	d102      	bne.n	800e44e <_write_r+0x1e>
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	b103      	cbz	r3, 800e44e <_write_r+0x1e>
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	bd38      	pop	{r3, r4, r5, pc}
 800e450:	240106f0 	.word	0x240106f0

0800e454 <__assert_func>:
 800e454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e456:	4614      	mov	r4, r2
 800e458:	461a      	mov	r2, r3
 800e45a:	4b09      	ldr	r3, [pc, #36]	; (800e480 <__assert_func+0x2c>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4605      	mov	r5, r0
 800e460:	68d8      	ldr	r0, [r3, #12]
 800e462:	b14c      	cbz	r4, 800e478 <__assert_func+0x24>
 800e464:	4b07      	ldr	r3, [pc, #28]	; (800e484 <__assert_func+0x30>)
 800e466:	9100      	str	r1, [sp, #0]
 800e468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e46c:	4906      	ldr	r1, [pc, #24]	; (800e488 <__assert_func+0x34>)
 800e46e:	462b      	mov	r3, r5
 800e470:	f000 f8e0 	bl	800e634 <fiprintf>
 800e474:	f000 fd22 	bl	800eebc <abort>
 800e478:	4b04      	ldr	r3, [pc, #16]	; (800e48c <__assert_func+0x38>)
 800e47a:	461c      	mov	r4, r3
 800e47c:	e7f3      	b.n	800e466 <__assert_func+0x12>
 800e47e:	bf00      	nop
 800e480:	24000030 	.word	0x24000030
 800e484:	08011a6e 	.word	0x08011a6e
 800e488:	08011a7b 	.word	0x08011a7b
 800e48c:	08011aa9 	.word	0x08011aa9

0800e490 <_close_r>:
 800e490:	b538      	push	{r3, r4, r5, lr}
 800e492:	4d06      	ldr	r5, [pc, #24]	; (800e4ac <_close_r+0x1c>)
 800e494:	2300      	movs	r3, #0
 800e496:	4604      	mov	r4, r0
 800e498:	4608      	mov	r0, r1
 800e49a:	602b      	str	r3, [r5, #0]
 800e49c:	f7f2 fed8 	bl	8001250 <_close>
 800e4a0:	1c43      	adds	r3, r0, #1
 800e4a2:	d102      	bne.n	800e4aa <_close_r+0x1a>
 800e4a4:	682b      	ldr	r3, [r5, #0]
 800e4a6:	b103      	cbz	r3, 800e4aa <_close_r+0x1a>
 800e4a8:	6023      	str	r3, [r4, #0]
 800e4aa:	bd38      	pop	{r3, r4, r5, pc}
 800e4ac:	240106f0 	.word	0x240106f0

0800e4b0 <__sflush_r>:
 800e4b0:	898a      	ldrh	r2, [r1, #12]
 800e4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b6:	4605      	mov	r5, r0
 800e4b8:	0710      	lsls	r0, r2, #28
 800e4ba:	460c      	mov	r4, r1
 800e4bc:	d458      	bmi.n	800e570 <__sflush_r+0xc0>
 800e4be:	684b      	ldr	r3, [r1, #4]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	dc05      	bgt.n	800e4d0 <__sflush_r+0x20>
 800e4c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	dc02      	bgt.n	800e4d0 <__sflush_r+0x20>
 800e4ca:	2000      	movs	r0, #0
 800e4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4d2:	2e00      	cmp	r6, #0
 800e4d4:	d0f9      	beq.n	800e4ca <__sflush_r+0x1a>
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4dc:	682f      	ldr	r7, [r5, #0]
 800e4de:	602b      	str	r3, [r5, #0]
 800e4e0:	d032      	beq.n	800e548 <__sflush_r+0x98>
 800e4e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	075a      	lsls	r2, r3, #29
 800e4e8:	d505      	bpl.n	800e4f6 <__sflush_r+0x46>
 800e4ea:	6863      	ldr	r3, [r4, #4]
 800e4ec:	1ac0      	subs	r0, r0, r3
 800e4ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4f0:	b10b      	cbz	r3, 800e4f6 <__sflush_r+0x46>
 800e4f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4f4:	1ac0      	subs	r0, r0, r3
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	4602      	mov	r2, r0
 800e4fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4fc:	6a21      	ldr	r1, [r4, #32]
 800e4fe:	4628      	mov	r0, r5
 800e500:	47b0      	blx	r6
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	89a3      	ldrh	r3, [r4, #12]
 800e506:	d106      	bne.n	800e516 <__sflush_r+0x66>
 800e508:	6829      	ldr	r1, [r5, #0]
 800e50a:	291d      	cmp	r1, #29
 800e50c:	d82c      	bhi.n	800e568 <__sflush_r+0xb8>
 800e50e:	4a2a      	ldr	r2, [pc, #168]	; (800e5b8 <__sflush_r+0x108>)
 800e510:	40ca      	lsrs	r2, r1
 800e512:	07d6      	lsls	r6, r2, #31
 800e514:	d528      	bpl.n	800e568 <__sflush_r+0xb8>
 800e516:	2200      	movs	r2, #0
 800e518:	6062      	str	r2, [r4, #4]
 800e51a:	04d9      	lsls	r1, r3, #19
 800e51c:	6922      	ldr	r2, [r4, #16]
 800e51e:	6022      	str	r2, [r4, #0]
 800e520:	d504      	bpl.n	800e52c <__sflush_r+0x7c>
 800e522:	1c42      	adds	r2, r0, #1
 800e524:	d101      	bne.n	800e52a <__sflush_r+0x7a>
 800e526:	682b      	ldr	r3, [r5, #0]
 800e528:	b903      	cbnz	r3, 800e52c <__sflush_r+0x7c>
 800e52a:	6560      	str	r0, [r4, #84]	; 0x54
 800e52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e52e:	602f      	str	r7, [r5, #0]
 800e530:	2900      	cmp	r1, #0
 800e532:	d0ca      	beq.n	800e4ca <__sflush_r+0x1a>
 800e534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e538:	4299      	cmp	r1, r3
 800e53a:	d002      	beq.n	800e542 <__sflush_r+0x92>
 800e53c:	4628      	mov	r0, r5
 800e53e:	f000 f8b1 	bl	800e6a4 <_free_r>
 800e542:	2000      	movs	r0, #0
 800e544:	6360      	str	r0, [r4, #52]	; 0x34
 800e546:	e7c1      	b.n	800e4cc <__sflush_r+0x1c>
 800e548:	6a21      	ldr	r1, [r4, #32]
 800e54a:	2301      	movs	r3, #1
 800e54c:	4628      	mov	r0, r5
 800e54e:	47b0      	blx	r6
 800e550:	1c41      	adds	r1, r0, #1
 800e552:	d1c7      	bne.n	800e4e4 <__sflush_r+0x34>
 800e554:	682b      	ldr	r3, [r5, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d0c4      	beq.n	800e4e4 <__sflush_r+0x34>
 800e55a:	2b1d      	cmp	r3, #29
 800e55c:	d001      	beq.n	800e562 <__sflush_r+0xb2>
 800e55e:	2b16      	cmp	r3, #22
 800e560:	d101      	bne.n	800e566 <__sflush_r+0xb6>
 800e562:	602f      	str	r7, [r5, #0]
 800e564:	e7b1      	b.n	800e4ca <__sflush_r+0x1a>
 800e566:	89a3      	ldrh	r3, [r4, #12]
 800e568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e56c:	81a3      	strh	r3, [r4, #12]
 800e56e:	e7ad      	b.n	800e4cc <__sflush_r+0x1c>
 800e570:	690f      	ldr	r7, [r1, #16]
 800e572:	2f00      	cmp	r7, #0
 800e574:	d0a9      	beq.n	800e4ca <__sflush_r+0x1a>
 800e576:	0793      	lsls	r3, r2, #30
 800e578:	680e      	ldr	r6, [r1, #0]
 800e57a:	bf08      	it	eq
 800e57c:	694b      	ldreq	r3, [r1, #20]
 800e57e:	600f      	str	r7, [r1, #0]
 800e580:	bf18      	it	ne
 800e582:	2300      	movne	r3, #0
 800e584:	eba6 0807 	sub.w	r8, r6, r7
 800e588:	608b      	str	r3, [r1, #8]
 800e58a:	f1b8 0f00 	cmp.w	r8, #0
 800e58e:	dd9c      	ble.n	800e4ca <__sflush_r+0x1a>
 800e590:	6a21      	ldr	r1, [r4, #32]
 800e592:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e594:	4643      	mov	r3, r8
 800e596:	463a      	mov	r2, r7
 800e598:	4628      	mov	r0, r5
 800e59a:	47b0      	blx	r6
 800e59c:	2800      	cmp	r0, #0
 800e59e:	dc06      	bgt.n	800e5ae <__sflush_r+0xfe>
 800e5a0:	89a3      	ldrh	r3, [r4, #12]
 800e5a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5a6:	81a3      	strh	r3, [r4, #12]
 800e5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ac:	e78e      	b.n	800e4cc <__sflush_r+0x1c>
 800e5ae:	4407      	add	r7, r0
 800e5b0:	eba8 0800 	sub.w	r8, r8, r0
 800e5b4:	e7e9      	b.n	800e58a <__sflush_r+0xda>
 800e5b6:	bf00      	nop
 800e5b8:	20400001 	.word	0x20400001

0800e5bc <_fflush_r>:
 800e5bc:	b538      	push	{r3, r4, r5, lr}
 800e5be:	690b      	ldr	r3, [r1, #16]
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	460c      	mov	r4, r1
 800e5c4:	b913      	cbnz	r3, 800e5cc <_fflush_r+0x10>
 800e5c6:	2500      	movs	r5, #0
 800e5c8:	4628      	mov	r0, r5
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}
 800e5cc:	b118      	cbz	r0, 800e5d6 <_fflush_r+0x1a>
 800e5ce:	6983      	ldr	r3, [r0, #24]
 800e5d0:	b90b      	cbnz	r3, 800e5d6 <_fflush_r+0x1a>
 800e5d2:	f7ff fc99 	bl	800df08 <__sinit>
 800e5d6:	4b14      	ldr	r3, [pc, #80]	; (800e628 <_fflush_r+0x6c>)
 800e5d8:	429c      	cmp	r4, r3
 800e5da:	d11b      	bne.n	800e614 <_fflush_r+0x58>
 800e5dc:	686c      	ldr	r4, [r5, #4]
 800e5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d0ef      	beq.n	800e5c6 <_fflush_r+0xa>
 800e5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5e8:	07d0      	lsls	r0, r2, #31
 800e5ea:	d404      	bmi.n	800e5f6 <_fflush_r+0x3a>
 800e5ec:	0599      	lsls	r1, r3, #22
 800e5ee:	d402      	bmi.n	800e5f6 <_fflush_r+0x3a>
 800e5f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5f2:	f7ff fd4c 	bl	800e08e <__retarget_lock_acquire_recursive>
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	4621      	mov	r1, r4
 800e5fa:	f7ff ff59 	bl	800e4b0 <__sflush_r>
 800e5fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e600:	07da      	lsls	r2, r3, #31
 800e602:	4605      	mov	r5, r0
 800e604:	d4e0      	bmi.n	800e5c8 <_fflush_r+0xc>
 800e606:	89a3      	ldrh	r3, [r4, #12]
 800e608:	059b      	lsls	r3, r3, #22
 800e60a:	d4dd      	bmi.n	800e5c8 <_fflush_r+0xc>
 800e60c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e60e:	f7ff fd3f 	bl	800e090 <__retarget_lock_release_recursive>
 800e612:	e7d9      	b.n	800e5c8 <_fflush_r+0xc>
 800e614:	4b05      	ldr	r3, [pc, #20]	; (800e62c <_fflush_r+0x70>)
 800e616:	429c      	cmp	r4, r3
 800e618:	d101      	bne.n	800e61e <_fflush_r+0x62>
 800e61a:	68ac      	ldr	r4, [r5, #8]
 800e61c:	e7df      	b.n	800e5de <_fflush_r+0x22>
 800e61e:	4b04      	ldr	r3, [pc, #16]	; (800e630 <_fflush_r+0x74>)
 800e620:	429c      	cmp	r4, r3
 800e622:	bf08      	it	eq
 800e624:	68ec      	ldreq	r4, [r5, #12]
 800e626:	e7da      	b.n	800e5de <_fflush_r+0x22>
 800e628:	080119b8 	.word	0x080119b8
 800e62c:	080119d8 	.word	0x080119d8
 800e630:	08011998 	.word	0x08011998

0800e634 <fiprintf>:
 800e634:	b40e      	push	{r1, r2, r3}
 800e636:	b503      	push	{r0, r1, lr}
 800e638:	4601      	mov	r1, r0
 800e63a:	ab03      	add	r3, sp, #12
 800e63c:	4805      	ldr	r0, [pc, #20]	; (800e654 <fiprintf+0x20>)
 800e63e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e642:	6800      	ldr	r0, [r0, #0]
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	f000 f8a3 	bl	800e790 <_vfiprintf_r>
 800e64a:	b002      	add	sp, #8
 800e64c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e650:	b003      	add	sp, #12
 800e652:	4770      	bx	lr
 800e654:	24000030 	.word	0x24000030

0800e658 <_lseek_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d07      	ldr	r5, [pc, #28]	; (800e678 <_lseek_r+0x20>)
 800e65c:	4604      	mov	r4, r0
 800e65e:	4608      	mov	r0, r1
 800e660:	4611      	mov	r1, r2
 800e662:	2200      	movs	r2, #0
 800e664:	602a      	str	r2, [r5, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	f7f2 fdfe 	bl	8001268 <_lseek>
 800e66c:	1c43      	adds	r3, r0, #1
 800e66e:	d102      	bne.n	800e676 <_lseek_r+0x1e>
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	b103      	cbz	r3, 800e676 <_lseek_r+0x1e>
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	bd38      	pop	{r3, r4, r5, pc}
 800e678:	240106f0 	.word	0x240106f0

0800e67c <malloc>:
 800e67c:	4b02      	ldr	r3, [pc, #8]	; (800e688 <malloc+0xc>)
 800e67e:	4601      	mov	r1, r0
 800e680:	6818      	ldr	r0, [r3, #0]
 800e682:	f7ff bd4d 	b.w	800e120 <_malloc_r>
 800e686:	bf00      	nop
 800e688:	24000030 	.word	0x24000030

0800e68c <__malloc_lock>:
 800e68c:	4801      	ldr	r0, [pc, #4]	; (800e694 <__malloc_lock+0x8>)
 800e68e:	f7ff bcfe 	b.w	800e08e <__retarget_lock_acquire_recursive>
 800e692:	bf00      	nop
 800e694:	240106e4 	.word	0x240106e4

0800e698 <__malloc_unlock>:
 800e698:	4801      	ldr	r0, [pc, #4]	; (800e6a0 <__malloc_unlock+0x8>)
 800e69a:	f7ff bcf9 	b.w	800e090 <__retarget_lock_release_recursive>
 800e69e:	bf00      	nop
 800e6a0:	240106e4 	.word	0x240106e4

0800e6a4 <_free_r>:
 800e6a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6a6:	2900      	cmp	r1, #0
 800e6a8:	d044      	beq.n	800e734 <_free_r+0x90>
 800e6aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ae:	9001      	str	r0, [sp, #4]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f1a1 0404 	sub.w	r4, r1, #4
 800e6b6:	bfb8      	it	lt
 800e6b8:	18e4      	addlt	r4, r4, r3
 800e6ba:	f7ff ffe7 	bl	800e68c <__malloc_lock>
 800e6be:	4a1e      	ldr	r2, [pc, #120]	; (800e738 <_free_r+0x94>)
 800e6c0:	9801      	ldr	r0, [sp, #4]
 800e6c2:	6813      	ldr	r3, [r2, #0]
 800e6c4:	b933      	cbnz	r3, 800e6d4 <_free_r+0x30>
 800e6c6:	6063      	str	r3, [r4, #4]
 800e6c8:	6014      	str	r4, [r2, #0]
 800e6ca:	b003      	add	sp, #12
 800e6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6d0:	f7ff bfe2 	b.w	800e698 <__malloc_unlock>
 800e6d4:	42a3      	cmp	r3, r4
 800e6d6:	d908      	bls.n	800e6ea <_free_r+0x46>
 800e6d8:	6825      	ldr	r5, [r4, #0]
 800e6da:	1961      	adds	r1, r4, r5
 800e6dc:	428b      	cmp	r3, r1
 800e6de:	bf01      	itttt	eq
 800e6e0:	6819      	ldreq	r1, [r3, #0]
 800e6e2:	685b      	ldreq	r3, [r3, #4]
 800e6e4:	1949      	addeq	r1, r1, r5
 800e6e6:	6021      	streq	r1, [r4, #0]
 800e6e8:	e7ed      	b.n	800e6c6 <_free_r+0x22>
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	b10b      	cbz	r3, 800e6f4 <_free_r+0x50>
 800e6f0:	42a3      	cmp	r3, r4
 800e6f2:	d9fa      	bls.n	800e6ea <_free_r+0x46>
 800e6f4:	6811      	ldr	r1, [r2, #0]
 800e6f6:	1855      	adds	r5, r2, r1
 800e6f8:	42a5      	cmp	r5, r4
 800e6fa:	d10b      	bne.n	800e714 <_free_r+0x70>
 800e6fc:	6824      	ldr	r4, [r4, #0]
 800e6fe:	4421      	add	r1, r4
 800e700:	1854      	adds	r4, r2, r1
 800e702:	42a3      	cmp	r3, r4
 800e704:	6011      	str	r1, [r2, #0]
 800e706:	d1e0      	bne.n	800e6ca <_free_r+0x26>
 800e708:	681c      	ldr	r4, [r3, #0]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	6053      	str	r3, [r2, #4]
 800e70e:	4421      	add	r1, r4
 800e710:	6011      	str	r1, [r2, #0]
 800e712:	e7da      	b.n	800e6ca <_free_r+0x26>
 800e714:	d902      	bls.n	800e71c <_free_r+0x78>
 800e716:	230c      	movs	r3, #12
 800e718:	6003      	str	r3, [r0, #0]
 800e71a:	e7d6      	b.n	800e6ca <_free_r+0x26>
 800e71c:	6825      	ldr	r5, [r4, #0]
 800e71e:	1961      	adds	r1, r4, r5
 800e720:	428b      	cmp	r3, r1
 800e722:	bf04      	itt	eq
 800e724:	6819      	ldreq	r1, [r3, #0]
 800e726:	685b      	ldreq	r3, [r3, #4]
 800e728:	6063      	str	r3, [r4, #4]
 800e72a:	bf04      	itt	eq
 800e72c:	1949      	addeq	r1, r1, r5
 800e72e:	6021      	streq	r1, [r4, #0]
 800e730:	6054      	str	r4, [r2, #4]
 800e732:	e7ca      	b.n	800e6ca <_free_r+0x26>
 800e734:	b003      	add	sp, #12
 800e736:	bd30      	pop	{r4, r5, pc}
 800e738:	240106e8 	.word	0x240106e8

0800e73c <__sfputc_r>:
 800e73c:	6893      	ldr	r3, [r2, #8]
 800e73e:	3b01      	subs	r3, #1
 800e740:	2b00      	cmp	r3, #0
 800e742:	b410      	push	{r4}
 800e744:	6093      	str	r3, [r2, #8]
 800e746:	da08      	bge.n	800e75a <__sfputc_r+0x1e>
 800e748:	6994      	ldr	r4, [r2, #24]
 800e74a:	42a3      	cmp	r3, r4
 800e74c:	db01      	blt.n	800e752 <__sfputc_r+0x16>
 800e74e:	290a      	cmp	r1, #10
 800e750:	d103      	bne.n	800e75a <__sfputc_r+0x1e>
 800e752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e756:	f000 baf1 	b.w	800ed3c <__swbuf_r>
 800e75a:	6813      	ldr	r3, [r2, #0]
 800e75c:	1c58      	adds	r0, r3, #1
 800e75e:	6010      	str	r0, [r2, #0]
 800e760:	7019      	strb	r1, [r3, #0]
 800e762:	4608      	mov	r0, r1
 800e764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <__sfputs_r>:
 800e76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76c:	4606      	mov	r6, r0
 800e76e:	460f      	mov	r7, r1
 800e770:	4614      	mov	r4, r2
 800e772:	18d5      	adds	r5, r2, r3
 800e774:	42ac      	cmp	r4, r5
 800e776:	d101      	bne.n	800e77c <__sfputs_r+0x12>
 800e778:	2000      	movs	r0, #0
 800e77a:	e007      	b.n	800e78c <__sfputs_r+0x22>
 800e77c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e780:	463a      	mov	r2, r7
 800e782:	4630      	mov	r0, r6
 800e784:	f7ff ffda 	bl	800e73c <__sfputc_r>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d1f3      	bne.n	800e774 <__sfputs_r+0xa>
 800e78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e790 <_vfiprintf_r>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	460d      	mov	r5, r1
 800e796:	b09d      	sub	sp, #116	; 0x74
 800e798:	4614      	mov	r4, r2
 800e79a:	4698      	mov	r8, r3
 800e79c:	4606      	mov	r6, r0
 800e79e:	b118      	cbz	r0, 800e7a8 <_vfiprintf_r+0x18>
 800e7a0:	6983      	ldr	r3, [r0, #24]
 800e7a2:	b90b      	cbnz	r3, 800e7a8 <_vfiprintf_r+0x18>
 800e7a4:	f7ff fbb0 	bl	800df08 <__sinit>
 800e7a8:	4b89      	ldr	r3, [pc, #548]	; (800e9d0 <_vfiprintf_r+0x240>)
 800e7aa:	429d      	cmp	r5, r3
 800e7ac:	d11b      	bne.n	800e7e6 <_vfiprintf_r+0x56>
 800e7ae:	6875      	ldr	r5, [r6, #4]
 800e7b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7b2:	07d9      	lsls	r1, r3, #31
 800e7b4:	d405      	bmi.n	800e7c2 <_vfiprintf_r+0x32>
 800e7b6:	89ab      	ldrh	r3, [r5, #12]
 800e7b8:	059a      	lsls	r2, r3, #22
 800e7ba:	d402      	bmi.n	800e7c2 <_vfiprintf_r+0x32>
 800e7bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7be:	f7ff fc66 	bl	800e08e <__retarget_lock_acquire_recursive>
 800e7c2:	89ab      	ldrh	r3, [r5, #12]
 800e7c4:	071b      	lsls	r3, r3, #28
 800e7c6:	d501      	bpl.n	800e7cc <_vfiprintf_r+0x3c>
 800e7c8:	692b      	ldr	r3, [r5, #16]
 800e7ca:	b9eb      	cbnz	r3, 800e808 <_vfiprintf_r+0x78>
 800e7cc:	4629      	mov	r1, r5
 800e7ce:	4630      	mov	r0, r6
 800e7d0:	f000 fb06 	bl	800ede0 <__swsetup_r>
 800e7d4:	b1c0      	cbz	r0, 800e808 <_vfiprintf_r+0x78>
 800e7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7d8:	07dc      	lsls	r4, r3, #31
 800e7da:	d50e      	bpl.n	800e7fa <_vfiprintf_r+0x6a>
 800e7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e0:	b01d      	add	sp, #116	; 0x74
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	4b7b      	ldr	r3, [pc, #492]	; (800e9d4 <_vfiprintf_r+0x244>)
 800e7e8:	429d      	cmp	r5, r3
 800e7ea:	d101      	bne.n	800e7f0 <_vfiprintf_r+0x60>
 800e7ec:	68b5      	ldr	r5, [r6, #8]
 800e7ee:	e7df      	b.n	800e7b0 <_vfiprintf_r+0x20>
 800e7f0:	4b79      	ldr	r3, [pc, #484]	; (800e9d8 <_vfiprintf_r+0x248>)
 800e7f2:	429d      	cmp	r5, r3
 800e7f4:	bf08      	it	eq
 800e7f6:	68f5      	ldreq	r5, [r6, #12]
 800e7f8:	e7da      	b.n	800e7b0 <_vfiprintf_r+0x20>
 800e7fa:	89ab      	ldrh	r3, [r5, #12]
 800e7fc:	0598      	lsls	r0, r3, #22
 800e7fe:	d4ed      	bmi.n	800e7dc <_vfiprintf_r+0x4c>
 800e800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e802:	f7ff fc45 	bl	800e090 <__retarget_lock_release_recursive>
 800e806:	e7e9      	b.n	800e7dc <_vfiprintf_r+0x4c>
 800e808:	2300      	movs	r3, #0
 800e80a:	9309      	str	r3, [sp, #36]	; 0x24
 800e80c:	2320      	movs	r3, #32
 800e80e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e812:	f8cd 800c 	str.w	r8, [sp, #12]
 800e816:	2330      	movs	r3, #48	; 0x30
 800e818:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e9dc <_vfiprintf_r+0x24c>
 800e81c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e820:	f04f 0901 	mov.w	r9, #1
 800e824:	4623      	mov	r3, r4
 800e826:	469a      	mov	sl, r3
 800e828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e82c:	b10a      	cbz	r2, 800e832 <_vfiprintf_r+0xa2>
 800e82e:	2a25      	cmp	r2, #37	; 0x25
 800e830:	d1f9      	bne.n	800e826 <_vfiprintf_r+0x96>
 800e832:	ebba 0b04 	subs.w	fp, sl, r4
 800e836:	d00b      	beq.n	800e850 <_vfiprintf_r+0xc0>
 800e838:	465b      	mov	r3, fp
 800e83a:	4622      	mov	r2, r4
 800e83c:	4629      	mov	r1, r5
 800e83e:	4630      	mov	r0, r6
 800e840:	f7ff ff93 	bl	800e76a <__sfputs_r>
 800e844:	3001      	adds	r0, #1
 800e846:	f000 80aa 	beq.w	800e99e <_vfiprintf_r+0x20e>
 800e84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e84c:	445a      	add	r2, fp
 800e84e:	9209      	str	r2, [sp, #36]	; 0x24
 800e850:	f89a 3000 	ldrb.w	r3, [sl]
 800e854:	2b00      	cmp	r3, #0
 800e856:	f000 80a2 	beq.w	800e99e <_vfiprintf_r+0x20e>
 800e85a:	2300      	movs	r3, #0
 800e85c:	f04f 32ff 	mov.w	r2, #4294967295
 800e860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e864:	f10a 0a01 	add.w	sl, sl, #1
 800e868:	9304      	str	r3, [sp, #16]
 800e86a:	9307      	str	r3, [sp, #28]
 800e86c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e870:	931a      	str	r3, [sp, #104]	; 0x68
 800e872:	4654      	mov	r4, sl
 800e874:	2205      	movs	r2, #5
 800e876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87a:	4858      	ldr	r0, [pc, #352]	; (800e9dc <_vfiprintf_r+0x24c>)
 800e87c:	f7f1 fd48 	bl	8000310 <memchr>
 800e880:	9a04      	ldr	r2, [sp, #16]
 800e882:	b9d8      	cbnz	r0, 800e8bc <_vfiprintf_r+0x12c>
 800e884:	06d1      	lsls	r1, r2, #27
 800e886:	bf44      	itt	mi
 800e888:	2320      	movmi	r3, #32
 800e88a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e88e:	0713      	lsls	r3, r2, #28
 800e890:	bf44      	itt	mi
 800e892:	232b      	movmi	r3, #43	; 0x2b
 800e894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e898:	f89a 3000 	ldrb.w	r3, [sl]
 800e89c:	2b2a      	cmp	r3, #42	; 0x2a
 800e89e:	d015      	beq.n	800e8cc <_vfiprintf_r+0x13c>
 800e8a0:	9a07      	ldr	r2, [sp, #28]
 800e8a2:	4654      	mov	r4, sl
 800e8a4:	2000      	movs	r0, #0
 800e8a6:	f04f 0c0a 	mov.w	ip, #10
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b0:	3b30      	subs	r3, #48	; 0x30
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	d94e      	bls.n	800e954 <_vfiprintf_r+0x1c4>
 800e8b6:	b1b0      	cbz	r0, 800e8e6 <_vfiprintf_r+0x156>
 800e8b8:	9207      	str	r2, [sp, #28]
 800e8ba:	e014      	b.n	800e8e6 <_vfiprintf_r+0x156>
 800e8bc:	eba0 0308 	sub.w	r3, r0, r8
 800e8c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	9304      	str	r3, [sp, #16]
 800e8c8:	46a2      	mov	sl, r4
 800e8ca:	e7d2      	b.n	800e872 <_vfiprintf_r+0xe2>
 800e8cc:	9b03      	ldr	r3, [sp, #12]
 800e8ce:	1d19      	adds	r1, r3, #4
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	9103      	str	r1, [sp, #12]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bfbb      	ittet	lt
 800e8d8:	425b      	neglt	r3, r3
 800e8da:	f042 0202 	orrlt.w	r2, r2, #2
 800e8de:	9307      	strge	r3, [sp, #28]
 800e8e0:	9307      	strlt	r3, [sp, #28]
 800e8e2:	bfb8      	it	lt
 800e8e4:	9204      	strlt	r2, [sp, #16]
 800e8e6:	7823      	ldrb	r3, [r4, #0]
 800e8e8:	2b2e      	cmp	r3, #46	; 0x2e
 800e8ea:	d10c      	bne.n	800e906 <_vfiprintf_r+0x176>
 800e8ec:	7863      	ldrb	r3, [r4, #1]
 800e8ee:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f0:	d135      	bne.n	800e95e <_vfiprintf_r+0x1ce>
 800e8f2:	9b03      	ldr	r3, [sp, #12]
 800e8f4:	1d1a      	adds	r2, r3, #4
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	9203      	str	r2, [sp, #12]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	bfb8      	it	lt
 800e8fe:	f04f 33ff 	movlt.w	r3, #4294967295
 800e902:	3402      	adds	r4, #2
 800e904:	9305      	str	r3, [sp, #20]
 800e906:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e9ec <_vfiprintf_r+0x25c>
 800e90a:	7821      	ldrb	r1, [r4, #0]
 800e90c:	2203      	movs	r2, #3
 800e90e:	4650      	mov	r0, sl
 800e910:	f7f1 fcfe 	bl	8000310 <memchr>
 800e914:	b140      	cbz	r0, 800e928 <_vfiprintf_r+0x198>
 800e916:	2340      	movs	r3, #64	; 0x40
 800e918:	eba0 000a 	sub.w	r0, r0, sl
 800e91c:	fa03 f000 	lsl.w	r0, r3, r0
 800e920:	9b04      	ldr	r3, [sp, #16]
 800e922:	4303      	orrs	r3, r0
 800e924:	3401      	adds	r4, #1
 800e926:	9304      	str	r3, [sp, #16]
 800e928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e92c:	482c      	ldr	r0, [pc, #176]	; (800e9e0 <_vfiprintf_r+0x250>)
 800e92e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e932:	2206      	movs	r2, #6
 800e934:	f7f1 fcec 	bl	8000310 <memchr>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d03f      	beq.n	800e9bc <_vfiprintf_r+0x22c>
 800e93c:	4b29      	ldr	r3, [pc, #164]	; (800e9e4 <_vfiprintf_r+0x254>)
 800e93e:	bb1b      	cbnz	r3, 800e988 <_vfiprintf_r+0x1f8>
 800e940:	9b03      	ldr	r3, [sp, #12]
 800e942:	3307      	adds	r3, #7
 800e944:	f023 0307 	bic.w	r3, r3, #7
 800e948:	3308      	adds	r3, #8
 800e94a:	9303      	str	r3, [sp, #12]
 800e94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94e:	443b      	add	r3, r7
 800e950:	9309      	str	r3, [sp, #36]	; 0x24
 800e952:	e767      	b.n	800e824 <_vfiprintf_r+0x94>
 800e954:	fb0c 3202 	mla	r2, ip, r2, r3
 800e958:	460c      	mov	r4, r1
 800e95a:	2001      	movs	r0, #1
 800e95c:	e7a5      	b.n	800e8aa <_vfiprintf_r+0x11a>
 800e95e:	2300      	movs	r3, #0
 800e960:	3401      	adds	r4, #1
 800e962:	9305      	str	r3, [sp, #20]
 800e964:	4619      	mov	r1, r3
 800e966:	f04f 0c0a 	mov.w	ip, #10
 800e96a:	4620      	mov	r0, r4
 800e96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e970:	3a30      	subs	r2, #48	; 0x30
 800e972:	2a09      	cmp	r2, #9
 800e974:	d903      	bls.n	800e97e <_vfiprintf_r+0x1ee>
 800e976:	2b00      	cmp	r3, #0
 800e978:	d0c5      	beq.n	800e906 <_vfiprintf_r+0x176>
 800e97a:	9105      	str	r1, [sp, #20]
 800e97c:	e7c3      	b.n	800e906 <_vfiprintf_r+0x176>
 800e97e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e982:	4604      	mov	r4, r0
 800e984:	2301      	movs	r3, #1
 800e986:	e7f0      	b.n	800e96a <_vfiprintf_r+0x1da>
 800e988:	ab03      	add	r3, sp, #12
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	462a      	mov	r2, r5
 800e98e:	4b16      	ldr	r3, [pc, #88]	; (800e9e8 <_vfiprintf_r+0x258>)
 800e990:	a904      	add	r1, sp, #16
 800e992:	4630      	mov	r0, r6
 800e994:	f3af 8000 	nop.w
 800e998:	4607      	mov	r7, r0
 800e99a:	1c78      	adds	r0, r7, #1
 800e99c:	d1d6      	bne.n	800e94c <_vfiprintf_r+0x1bc>
 800e99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9a0:	07d9      	lsls	r1, r3, #31
 800e9a2:	d405      	bmi.n	800e9b0 <_vfiprintf_r+0x220>
 800e9a4:	89ab      	ldrh	r3, [r5, #12]
 800e9a6:	059a      	lsls	r2, r3, #22
 800e9a8:	d402      	bmi.n	800e9b0 <_vfiprintf_r+0x220>
 800e9aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ac:	f7ff fb70 	bl	800e090 <__retarget_lock_release_recursive>
 800e9b0:	89ab      	ldrh	r3, [r5, #12]
 800e9b2:	065b      	lsls	r3, r3, #25
 800e9b4:	f53f af12 	bmi.w	800e7dc <_vfiprintf_r+0x4c>
 800e9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ba:	e711      	b.n	800e7e0 <_vfiprintf_r+0x50>
 800e9bc:	ab03      	add	r3, sp, #12
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	462a      	mov	r2, r5
 800e9c2:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <_vfiprintf_r+0x258>)
 800e9c4:	a904      	add	r1, sp, #16
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f000 f880 	bl	800eacc <_printf_i>
 800e9cc:	e7e4      	b.n	800e998 <_vfiprintf_r+0x208>
 800e9ce:	bf00      	nop
 800e9d0:	080119b8 	.word	0x080119b8
 800e9d4:	080119d8 	.word	0x080119d8
 800e9d8:	08011998 	.word	0x08011998
 800e9dc:	08011aaa 	.word	0x08011aaa
 800e9e0:	08011ab4 	.word	0x08011ab4
 800e9e4:	00000000 	.word	0x00000000
 800e9e8:	0800e76b 	.word	0x0800e76b
 800e9ec:	08011ab0 	.word	0x08011ab0

0800e9f0 <_printf_common>:
 800e9f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9f4:	4616      	mov	r6, r2
 800e9f6:	4699      	mov	r9, r3
 800e9f8:	688a      	ldr	r2, [r1, #8]
 800e9fa:	690b      	ldr	r3, [r1, #16]
 800e9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea00:	4293      	cmp	r3, r2
 800ea02:	bfb8      	it	lt
 800ea04:	4613      	movlt	r3, r2
 800ea06:	6033      	str	r3, [r6, #0]
 800ea08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ea0c:	4607      	mov	r7, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b10a      	cbz	r2, 800ea16 <_printf_common+0x26>
 800ea12:	3301      	adds	r3, #1
 800ea14:	6033      	str	r3, [r6, #0]
 800ea16:	6823      	ldr	r3, [r4, #0]
 800ea18:	0699      	lsls	r1, r3, #26
 800ea1a:	bf42      	ittt	mi
 800ea1c:	6833      	ldrmi	r3, [r6, #0]
 800ea1e:	3302      	addmi	r3, #2
 800ea20:	6033      	strmi	r3, [r6, #0]
 800ea22:	6825      	ldr	r5, [r4, #0]
 800ea24:	f015 0506 	ands.w	r5, r5, #6
 800ea28:	d106      	bne.n	800ea38 <_printf_common+0x48>
 800ea2a:	f104 0a19 	add.w	sl, r4, #25
 800ea2e:	68e3      	ldr	r3, [r4, #12]
 800ea30:	6832      	ldr	r2, [r6, #0]
 800ea32:	1a9b      	subs	r3, r3, r2
 800ea34:	42ab      	cmp	r3, r5
 800ea36:	dc26      	bgt.n	800ea86 <_printf_common+0x96>
 800ea38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ea3c:	1e13      	subs	r3, r2, #0
 800ea3e:	6822      	ldr	r2, [r4, #0]
 800ea40:	bf18      	it	ne
 800ea42:	2301      	movne	r3, #1
 800ea44:	0692      	lsls	r2, r2, #26
 800ea46:	d42b      	bmi.n	800eaa0 <_printf_common+0xb0>
 800ea48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ea4c:	4649      	mov	r1, r9
 800ea4e:	4638      	mov	r0, r7
 800ea50:	47c0      	blx	r8
 800ea52:	3001      	adds	r0, #1
 800ea54:	d01e      	beq.n	800ea94 <_printf_common+0xa4>
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	68e5      	ldr	r5, [r4, #12]
 800ea5a:	6832      	ldr	r2, [r6, #0]
 800ea5c:	f003 0306 	and.w	r3, r3, #6
 800ea60:	2b04      	cmp	r3, #4
 800ea62:	bf08      	it	eq
 800ea64:	1aad      	subeq	r5, r5, r2
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	6922      	ldr	r2, [r4, #16]
 800ea6a:	bf0c      	ite	eq
 800ea6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea70:	2500      	movne	r5, #0
 800ea72:	4293      	cmp	r3, r2
 800ea74:	bfc4      	itt	gt
 800ea76:	1a9b      	subgt	r3, r3, r2
 800ea78:	18ed      	addgt	r5, r5, r3
 800ea7a:	2600      	movs	r6, #0
 800ea7c:	341a      	adds	r4, #26
 800ea7e:	42b5      	cmp	r5, r6
 800ea80:	d11a      	bne.n	800eab8 <_printf_common+0xc8>
 800ea82:	2000      	movs	r0, #0
 800ea84:	e008      	b.n	800ea98 <_printf_common+0xa8>
 800ea86:	2301      	movs	r3, #1
 800ea88:	4652      	mov	r2, sl
 800ea8a:	4649      	mov	r1, r9
 800ea8c:	4638      	mov	r0, r7
 800ea8e:	47c0      	blx	r8
 800ea90:	3001      	adds	r0, #1
 800ea92:	d103      	bne.n	800ea9c <_printf_common+0xac>
 800ea94:	f04f 30ff 	mov.w	r0, #4294967295
 800ea98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea9c:	3501      	adds	r5, #1
 800ea9e:	e7c6      	b.n	800ea2e <_printf_common+0x3e>
 800eaa0:	18e1      	adds	r1, r4, r3
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	2030      	movs	r0, #48	; 0x30
 800eaa6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eaaa:	4422      	add	r2, r4
 800eaac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eab0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eab4:	3302      	adds	r3, #2
 800eab6:	e7c7      	b.n	800ea48 <_printf_common+0x58>
 800eab8:	2301      	movs	r3, #1
 800eaba:	4622      	mov	r2, r4
 800eabc:	4649      	mov	r1, r9
 800eabe:	4638      	mov	r0, r7
 800eac0:	47c0      	blx	r8
 800eac2:	3001      	adds	r0, #1
 800eac4:	d0e6      	beq.n	800ea94 <_printf_common+0xa4>
 800eac6:	3601      	adds	r6, #1
 800eac8:	e7d9      	b.n	800ea7e <_printf_common+0x8e>
	...

0800eacc <_printf_i>:
 800eacc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ead0:	7e0f      	ldrb	r7, [r1, #24]
 800ead2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ead4:	2f78      	cmp	r7, #120	; 0x78
 800ead6:	4691      	mov	r9, r2
 800ead8:	4680      	mov	r8, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	469a      	mov	sl, r3
 800eade:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eae2:	d807      	bhi.n	800eaf4 <_printf_i+0x28>
 800eae4:	2f62      	cmp	r7, #98	; 0x62
 800eae6:	d80a      	bhi.n	800eafe <_printf_i+0x32>
 800eae8:	2f00      	cmp	r7, #0
 800eaea:	f000 80d8 	beq.w	800ec9e <_printf_i+0x1d2>
 800eaee:	2f58      	cmp	r7, #88	; 0x58
 800eaf0:	f000 80a3 	beq.w	800ec3a <_printf_i+0x16e>
 800eaf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eaf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eafc:	e03a      	b.n	800eb74 <_printf_i+0xa8>
 800eafe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eb02:	2b15      	cmp	r3, #21
 800eb04:	d8f6      	bhi.n	800eaf4 <_printf_i+0x28>
 800eb06:	a101      	add	r1, pc, #4	; (adr r1, 800eb0c <_printf_i+0x40>)
 800eb08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb0c:	0800eb65 	.word	0x0800eb65
 800eb10:	0800eb79 	.word	0x0800eb79
 800eb14:	0800eaf5 	.word	0x0800eaf5
 800eb18:	0800eaf5 	.word	0x0800eaf5
 800eb1c:	0800eaf5 	.word	0x0800eaf5
 800eb20:	0800eaf5 	.word	0x0800eaf5
 800eb24:	0800eb79 	.word	0x0800eb79
 800eb28:	0800eaf5 	.word	0x0800eaf5
 800eb2c:	0800eaf5 	.word	0x0800eaf5
 800eb30:	0800eaf5 	.word	0x0800eaf5
 800eb34:	0800eaf5 	.word	0x0800eaf5
 800eb38:	0800ec85 	.word	0x0800ec85
 800eb3c:	0800eba9 	.word	0x0800eba9
 800eb40:	0800ec67 	.word	0x0800ec67
 800eb44:	0800eaf5 	.word	0x0800eaf5
 800eb48:	0800eaf5 	.word	0x0800eaf5
 800eb4c:	0800eca7 	.word	0x0800eca7
 800eb50:	0800eaf5 	.word	0x0800eaf5
 800eb54:	0800eba9 	.word	0x0800eba9
 800eb58:	0800eaf5 	.word	0x0800eaf5
 800eb5c:	0800eaf5 	.word	0x0800eaf5
 800eb60:	0800ec6f 	.word	0x0800ec6f
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	1d1a      	adds	r2, r3, #4
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	602a      	str	r2, [r5, #0]
 800eb6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb74:	2301      	movs	r3, #1
 800eb76:	e0a3      	b.n	800ecc0 <_printf_i+0x1f4>
 800eb78:	6820      	ldr	r0, [r4, #0]
 800eb7a:	6829      	ldr	r1, [r5, #0]
 800eb7c:	0606      	lsls	r6, r0, #24
 800eb7e:	f101 0304 	add.w	r3, r1, #4
 800eb82:	d50a      	bpl.n	800eb9a <_printf_i+0xce>
 800eb84:	680e      	ldr	r6, [r1, #0]
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	2e00      	cmp	r6, #0
 800eb8a:	da03      	bge.n	800eb94 <_printf_i+0xc8>
 800eb8c:	232d      	movs	r3, #45	; 0x2d
 800eb8e:	4276      	negs	r6, r6
 800eb90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb94:	485e      	ldr	r0, [pc, #376]	; (800ed10 <_printf_i+0x244>)
 800eb96:	230a      	movs	r3, #10
 800eb98:	e019      	b.n	800ebce <_printf_i+0x102>
 800eb9a:	680e      	ldr	r6, [r1, #0]
 800eb9c:	602b      	str	r3, [r5, #0]
 800eb9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eba2:	bf18      	it	ne
 800eba4:	b236      	sxthne	r6, r6
 800eba6:	e7ef      	b.n	800eb88 <_printf_i+0xbc>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	6820      	ldr	r0, [r4, #0]
 800ebac:	1d19      	adds	r1, r3, #4
 800ebae:	6029      	str	r1, [r5, #0]
 800ebb0:	0601      	lsls	r1, r0, #24
 800ebb2:	d501      	bpl.n	800ebb8 <_printf_i+0xec>
 800ebb4:	681e      	ldr	r6, [r3, #0]
 800ebb6:	e002      	b.n	800ebbe <_printf_i+0xf2>
 800ebb8:	0646      	lsls	r6, r0, #25
 800ebba:	d5fb      	bpl.n	800ebb4 <_printf_i+0xe8>
 800ebbc:	881e      	ldrh	r6, [r3, #0]
 800ebbe:	4854      	ldr	r0, [pc, #336]	; (800ed10 <_printf_i+0x244>)
 800ebc0:	2f6f      	cmp	r7, #111	; 0x6f
 800ebc2:	bf0c      	ite	eq
 800ebc4:	2308      	moveq	r3, #8
 800ebc6:	230a      	movne	r3, #10
 800ebc8:	2100      	movs	r1, #0
 800ebca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ebce:	6865      	ldr	r5, [r4, #4]
 800ebd0:	60a5      	str	r5, [r4, #8]
 800ebd2:	2d00      	cmp	r5, #0
 800ebd4:	bfa2      	ittt	ge
 800ebd6:	6821      	ldrge	r1, [r4, #0]
 800ebd8:	f021 0104 	bicge.w	r1, r1, #4
 800ebdc:	6021      	strge	r1, [r4, #0]
 800ebde:	b90e      	cbnz	r6, 800ebe4 <_printf_i+0x118>
 800ebe0:	2d00      	cmp	r5, #0
 800ebe2:	d04d      	beq.n	800ec80 <_printf_i+0x1b4>
 800ebe4:	4615      	mov	r5, r2
 800ebe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ebea:	fb03 6711 	mls	r7, r3, r1, r6
 800ebee:	5dc7      	ldrb	r7, [r0, r7]
 800ebf0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ebf4:	4637      	mov	r7, r6
 800ebf6:	42bb      	cmp	r3, r7
 800ebf8:	460e      	mov	r6, r1
 800ebfa:	d9f4      	bls.n	800ebe6 <_printf_i+0x11a>
 800ebfc:	2b08      	cmp	r3, #8
 800ebfe:	d10b      	bne.n	800ec18 <_printf_i+0x14c>
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	07de      	lsls	r6, r3, #31
 800ec04:	d508      	bpl.n	800ec18 <_printf_i+0x14c>
 800ec06:	6923      	ldr	r3, [r4, #16]
 800ec08:	6861      	ldr	r1, [r4, #4]
 800ec0a:	4299      	cmp	r1, r3
 800ec0c:	bfde      	ittt	le
 800ec0e:	2330      	movle	r3, #48	; 0x30
 800ec10:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ec14:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ec18:	1b52      	subs	r2, r2, r5
 800ec1a:	6122      	str	r2, [r4, #16]
 800ec1c:	f8cd a000 	str.w	sl, [sp]
 800ec20:	464b      	mov	r3, r9
 800ec22:	aa03      	add	r2, sp, #12
 800ec24:	4621      	mov	r1, r4
 800ec26:	4640      	mov	r0, r8
 800ec28:	f7ff fee2 	bl	800e9f0 <_printf_common>
 800ec2c:	3001      	adds	r0, #1
 800ec2e:	d14c      	bne.n	800ecca <_printf_i+0x1fe>
 800ec30:	f04f 30ff 	mov.w	r0, #4294967295
 800ec34:	b004      	add	sp, #16
 800ec36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec3a:	4835      	ldr	r0, [pc, #212]	; (800ed10 <_printf_i+0x244>)
 800ec3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ec40:	6829      	ldr	r1, [r5, #0]
 800ec42:	6823      	ldr	r3, [r4, #0]
 800ec44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ec48:	6029      	str	r1, [r5, #0]
 800ec4a:	061d      	lsls	r5, r3, #24
 800ec4c:	d514      	bpl.n	800ec78 <_printf_i+0x1ac>
 800ec4e:	07df      	lsls	r7, r3, #31
 800ec50:	bf44      	itt	mi
 800ec52:	f043 0320 	orrmi.w	r3, r3, #32
 800ec56:	6023      	strmi	r3, [r4, #0]
 800ec58:	b91e      	cbnz	r6, 800ec62 <_printf_i+0x196>
 800ec5a:	6823      	ldr	r3, [r4, #0]
 800ec5c:	f023 0320 	bic.w	r3, r3, #32
 800ec60:	6023      	str	r3, [r4, #0]
 800ec62:	2310      	movs	r3, #16
 800ec64:	e7b0      	b.n	800ebc8 <_printf_i+0xfc>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	f043 0320 	orr.w	r3, r3, #32
 800ec6c:	6023      	str	r3, [r4, #0]
 800ec6e:	2378      	movs	r3, #120	; 0x78
 800ec70:	4828      	ldr	r0, [pc, #160]	; (800ed14 <_printf_i+0x248>)
 800ec72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec76:	e7e3      	b.n	800ec40 <_printf_i+0x174>
 800ec78:	0659      	lsls	r1, r3, #25
 800ec7a:	bf48      	it	mi
 800ec7c:	b2b6      	uxthmi	r6, r6
 800ec7e:	e7e6      	b.n	800ec4e <_printf_i+0x182>
 800ec80:	4615      	mov	r5, r2
 800ec82:	e7bb      	b.n	800ebfc <_printf_i+0x130>
 800ec84:	682b      	ldr	r3, [r5, #0]
 800ec86:	6826      	ldr	r6, [r4, #0]
 800ec88:	6961      	ldr	r1, [r4, #20]
 800ec8a:	1d18      	adds	r0, r3, #4
 800ec8c:	6028      	str	r0, [r5, #0]
 800ec8e:	0635      	lsls	r5, r6, #24
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	d501      	bpl.n	800ec98 <_printf_i+0x1cc>
 800ec94:	6019      	str	r1, [r3, #0]
 800ec96:	e002      	b.n	800ec9e <_printf_i+0x1d2>
 800ec98:	0670      	lsls	r0, r6, #25
 800ec9a:	d5fb      	bpl.n	800ec94 <_printf_i+0x1c8>
 800ec9c:	8019      	strh	r1, [r3, #0]
 800ec9e:	2300      	movs	r3, #0
 800eca0:	6123      	str	r3, [r4, #16]
 800eca2:	4615      	mov	r5, r2
 800eca4:	e7ba      	b.n	800ec1c <_printf_i+0x150>
 800eca6:	682b      	ldr	r3, [r5, #0]
 800eca8:	1d1a      	adds	r2, r3, #4
 800ecaa:	602a      	str	r2, [r5, #0]
 800ecac:	681d      	ldr	r5, [r3, #0]
 800ecae:	6862      	ldr	r2, [r4, #4]
 800ecb0:	2100      	movs	r1, #0
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f7f1 fb2c 	bl	8000310 <memchr>
 800ecb8:	b108      	cbz	r0, 800ecbe <_printf_i+0x1f2>
 800ecba:	1b40      	subs	r0, r0, r5
 800ecbc:	6060      	str	r0, [r4, #4]
 800ecbe:	6863      	ldr	r3, [r4, #4]
 800ecc0:	6123      	str	r3, [r4, #16]
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ecc8:	e7a8      	b.n	800ec1c <_printf_i+0x150>
 800ecca:	6923      	ldr	r3, [r4, #16]
 800eccc:	462a      	mov	r2, r5
 800ecce:	4649      	mov	r1, r9
 800ecd0:	4640      	mov	r0, r8
 800ecd2:	47d0      	blx	sl
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	d0ab      	beq.n	800ec30 <_printf_i+0x164>
 800ecd8:	6823      	ldr	r3, [r4, #0]
 800ecda:	079b      	lsls	r3, r3, #30
 800ecdc:	d413      	bmi.n	800ed06 <_printf_i+0x23a>
 800ecde:	68e0      	ldr	r0, [r4, #12]
 800ece0:	9b03      	ldr	r3, [sp, #12]
 800ece2:	4298      	cmp	r0, r3
 800ece4:	bfb8      	it	lt
 800ece6:	4618      	movlt	r0, r3
 800ece8:	e7a4      	b.n	800ec34 <_printf_i+0x168>
 800ecea:	2301      	movs	r3, #1
 800ecec:	4632      	mov	r2, r6
 800ecee:	4649      	mov	r1, r9
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	47d0      	blx	sl
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	d09b      	beq.n	800ec30 <_printf_i+0x164>
 800ecf8:	3501      	adds	r5, #1
 800ecfa:	68e3      	ldr	r3, [r4, #12]
 800ecfc:	9903      	ldr	r1, [sp, #12]
 800ecfe:	1a5b      	subs	r3, r3, r1
 800ed00:	42ab      	cmp	r3, r5
 800ed02:	dcf2      	bgt.n	800ecea <_printf_i+0x21e>
 800ed04:	e7eb      	b.n	800ecde <_printf_i+0x212>
 800ed06:	2500      	movs	r5, #0
 800ed08:	f104 0619 	add.w	r6, r4, #25
 800ed0c:	e7f5      	b.n	800ecfa <_printf_i+0x22e>
 800ed0e:	bf00      	nop
 800ed10:	08011abb 	.word	0x08011abb
 800ed14:	08011acc 	.word	0x08011acc

0800ed18 <_read_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4d07      	ldr	r5, [pc, #28]	; (800ed38 <_read_r+0x20>)
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	4608      	mov	r0, r1
 800ed20:	4611      	mov	r1, r2
 800ed22:	2200      	movs	r2, #0
 800ed24:	602a      	str	r2, [r5, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	f7f2 fa76 	bl	8001218 <_read>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d102      	bne.n	800ed36 <_read_r+0x1e>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	b103      	cbz	r3, 800ed36 <_read_r+0x1e>
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	240106f0 	.word	0x240106f0

0800ed3c <__swbuf_r>:
 800ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3e:	460e      	mov	r6, r1
 800ed40:	4614      	mov	r4, r2
 800ed42:	4605      	mov	r5, r0
 800ed44:	b118      	cbz	r0, 800ed4e <__swbuf_r+0x12>
 800ed46:	6983      	ldr	r3, [r0, #24]
 800ed48:	b90b      	cbnz	r3, 800ed4e <__swbuf_r+0x12>
 800ed4a:	f7ff f8dd 	bl	800df08 <__sinit>
 800ed4e:	4b21      	ldr	r3, [pc, #132]	; (800edd4 <__swbuf_r+0x98>)
 800ed50:	429c      	cmp	r4, r3
 800ed52:	d12b      	bne.n	800edac <__swbuf_r+0x70>
 800ed54:	686c      	ldr	r4, [r5, #4]
 800ed56:	69a3      	ldr	r3, [r4, #24]
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	89a3      	ldrh	r3, [r4, #12]
 800ed5c:	071a      	lsls	r2, r3, #28
 800ed5e:	d52f      	bpl.n	800edc0 <__swbuf_r+0x84>
 800ed60:	6923      	ldr	r3, [r4, #16]
 800ed62:	b36b      	cbz	r3, 800edc0 <__swbuf_r+0x84>
 800ed64:	6923      	ldr	r3, [r4, #16]
 800ed66:	6820      	ldr	r0, [r4, #0]
 800ed68:	1ac0      	subs	r0, r0, r3
 800ed6a:	6963      	ldr	r3, [r4, #20]
 800ed6c:	b2f6      	uxtb	r6, r6
 800ed6e:	4283      	cmp	r3, r0
 800ed70:	4637      	mov	r7, r6
 800ed72:	dc04      	bgt.n	800ed7e <__swbuf_r+0x42>
 800ed74:	4621      	mov	r1, r4
 800ed76:	4628      	mov	r0, r5
 800ed78:	f7ff fc20 	bl	800e5bc <_fflush_r>
 800ed7c:	bb30      	cbnz	r0, 800edcc <__swbuf_r+0x90>
 800ed7e:	68a3      	ldr	r3, [r4, #8]
 800ed80:	3b01      	subs	r3, #1
 800ed82:	60a3      	str	r3, [r4, #8]
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	1c5a      	adds	r2, r3, #1
 800ed88:	6022      	str	r2, [r4, #0]
 800ed8a:	701e      	strb	r6, [r3, #0]
 800ed8c:	6963      	ldr	r3, [r4, #20]
 800ed8e:	3001      	adds	r0, #1
 800ed90:	4283      	cmp	r3, r0
 800ed92:	d004      	beq.n	800ed9e <__swbuf_r+0x62>
 800ed94:	89a3      	ldrh	r3, [r4, #12]
 800ed96:	07db      	lsls	r3, r3, #31
 800ed98:	d506      	bpl.n	800eda8 <__swbuf_r+0x6c>
 800ed9a:	2e0a      	cmp	r6, #10
 800ed9c:	d104      	bne.n	800eda8 <__swbuf_r+0x6c>
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4628      	mov	r0, r5
 800eda2:	f7ff fc0b 	bl	800e5bc <_fflush_r>
 800eda6:	b988      	cbnz	r0, 800edcc <__swbuf_r+0x90>
 800eda8:	4638      	mov	r0, r7
 800edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edac:	4b0a      	ldr	r3, [pc, #40]	; (800edd8 <__swbuf_r+0x9c>)
 800edae:	429c      	cmp	r4, r3
 800edb0:	d101      	bne.n	800edb6 <__swbuf_r+0x7a>
 800edb2:	68ac      	ldr	r4, [r5, #8]
 800edb4:	e7cf      	b.n	800ed56 <__swbuf_r+0x1a>
 800edb6:	4b09      	ldr	r3, [pc, #36]	; (800eddc <__swbuf_r+0xa0>)
 800edb8:	429c      	cmp	r4, r3
 800edba:	bf08      	it	eq
 800edbc:	68ec      	ldreq	r4, [r5, #12]
 800edbe:	e7ca      	b.n	800ed56 <__swbuf_r+0x1a>
 800edc0:	4621      	mov	r1, r4
 800edc2:	4628      	mov	r0, r5
 800edc4:	f000 f80c 	bl	800ede0 <__swsetup_r>
 800edc8:	2800      	cmp	r0, #0
 800edca:	d0cb      	beq.n	800ed64 <__swbuf_r+0x28>
 800edcc:	f04f 37ff 	mov.w	r7, #4294967295
 800edd0:	e7ea      	b.n	800eda8 <__swbuf_r+0x6c>
 800edd2:	bf00      	nop
 800edd4:	080119b8 	.word	0x080119b8
 800edd8:	080119d8 	.word	0x080119d8
 800eddc:	08011998 	.word	0x08011998

0800ede0 <__swsetup_r>:
 800ede0:	4b32      	ldr	r3, [pc, #200]	; (800eeac <__swsetup_r+0xcc>)
 800ede2:	b570      	push	{r4, r5, r6, lr}
 800ede4:	681d      	ldr	r5, [r3, #0]
 800ede6:	4606      	mov	r6, r0
 800ede8:	460c      	mov	r4, r1
 800edea:	b125      	cbz	r5, 800edf6 <__swsetup_r+0x16>
 800edec:	69ab      	ldr	r3, [r5, #24]
 800edee:	b913      	cbnz	r3, 800edf6 <__swsetup_r+0x16>
 800edf0:	4628      	mov	r0, r5
 800edf2:	f7ff f889 	bl	800df08 <__sinit>
 800edf6:	4b2e      	ldr	r3, [pc, #184]	; (800eeb0 <__swsetup_r+0xd0>)
 800edf8:	429c      	cmp	r4, r3
 800edfa:	d10f      	bne.n	800ee1c <__swsetup_r+0x3c>
 800edfc:	686c      	ldr	r4, [r5, #4]
 800edfe:	89a3      	ldrh	r3, [r4, #12]
 800ee00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee04:	0719      	lsls	r1, r3, #28
 800ee06:	d42c      	bmi.n	800ee62 <__swsetup_r+0x82>
 800ee08:	06dd      	lsls	r5, r3, #27
 800ee0a:	d411      	bmi.n	800ee30 <__swsetup_r+0x50>
 800ee0c:	2309      	movs	r3, #9
 800ee0e:	6033      	str	r3, [r6, #0]
 800ee10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ee14:	81a3      	strh	r3, [r4, #12]
 800ee16:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1a:	e03e      	b.n	800ee9a <__swsetup_r+0xba>
 800ee1c:	4b25      	ldr	r3, [pc, #148]	; (800eeb4 <__swsetup_r+0xd4>)
 800ee1e:	429c      	cmp	r4, r3
 800ee20:	d101      	bne.n	800ee26 <__swsetup_r+0x46>
 800ee22:	68ac      	ldr	r4, [r5, #8]
 800ee24:	e7eb      	b.n	800edfe <__swsetup_r+0x1e>
 800ee26:	4b24      	ldr	r3, [pc, #144]	; (800eeb8 <__swsetup_r+0xd8>)
 800ee28:	429c      	cmp	r4, r3
 800ee2a:	bf08      	it	eq
 800ee2c:	68ec      	ldreq	r4, [r5, #12]
 800ee2e:	e7e6      	b.n	800edfe <__swsetup_r+0x1e>
 800ee30:	0758      	lsls	r0, r3, #29
 800ee32:	d512      	bpl.n	800ee5a <__swsetup_r+0x7a>
 800ee34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ee36:	b141      	cbz	r1, 800ee4a <__swsetup_r+0x6a>
 800ee38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee3c:	4299      	cmp	r1, r3
 800ee3e:	d002      	beq.n	800ee46 <__swsetup_r+0x66>
 800ee40:	4630      	mov	r0, r6
 800ee42:	f7ff fc2f 	bl	800e6a4 <_free_r>
 800ee46:	2300      	movs	r3, #0
 800ee48:	6363      	str	r3, [r4, #52]	; 0x34
 800ee4a:	89a3      	ldrh	r3, [r4, #12]
 800ee4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee50:	81a3      	strh	r3, [r4, #12]
 800ee52:	2300      	movs	r3, #0
 800ee54:	6063      	str	r3, [r4, #4]
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	6023      	str	r3, [r4, #0]
 800ee5a:	89a3      	ldrh	r3, [r4, #12]
 800ee5c:	f043 0308 	orr.w	r3, r3, #8
 800ee60:	81a3      	strh	r3, [r4, #12]
 800ee62:	6923      	ldr	r3, [r4, #16]
 800ee64:	b94b      	cbnz	r3, 800ee7a <__swsetup_r+0x9a>
 800ee66:	89a3      	ldrh	r3, [r4, #12]
 800ee68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee70:	d003      	beq.n	800ee7a <__swsetup_r+0x9a>
 800ee72:	4621      	mov	r1, r4
 800ee74:	4630      	mov	r0, r6
 800ee76:	f000 f84d 	bl	800ef14 <__smakebuf_r>
 800ee7a:	89a0      	ldrh	r0, [r4, #12]
 800ee7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee80:	f010 0301 	ands.w	r3, r0, #1
 800ee84:	d00a      	beq.n	800ee9c <__swsetup_r+0xbc>
 800ee86:	2300      	movs	r3, #0
 800ee88:	60a3      	str	r3, [r4, #8]
 800ee8a:	6963      	ldr	r3, [r4, #20]
 800ee8c:	425b      	negs	r3, r3
 800ee8e:	61a3      	str	r3, [r4, #24]
 800ee90:	6923      	ldr	r3, [r4, #16]
 800ee92:	b943      	cbnz	r3, 800eea6 <__swsetup_r+0xc6>
 800ee94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee98:	d1ba      	bne.n	800ee10 <__swsetup_r+0x30>
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
 800ee9c:	0781      	lsls	r1, r0, #30
 800ee9e:	bf58      	it	pl
 800eea0:	6963      	ldrpl	r3, [r4, #20]
 800eea2:	60a3      	str	r3, [r4, #8]
 800eea4:	e7f4      	b.n	800ee90 <__swsetup_r+0xb0>
 800eea6:	2000      	movs	r0, #0
 800eea8:	e7f7      	b.n	800ee9a <__swsetup_r+0xba>
 800eeaa:	bf00      	nop
 800eeac:	24000030 	.word	0x24000030
 800eeb0:	080119b8 	.word	0x080119b8
 800eeb4:	080119d8 	.word	0x080119d8
 800eeb8:	08011998 	.word	0x08011998

0800eebc <abort>:
 800eebc:	b508      	push	{r3, lr}
 800eebe:	2006      	movs	r0, #6
 800eec0:	f000 f890 	bl	800efe4 <raise>
 800eec4:	2001      	movs	r0, #1
 800eec6:	f7f2 f9a1 	bl	800120c <_exit>

0800eeca <__swhatbuf_r>:
 800eeca:	b570      	push	{r4, r5, r6, lr}
 800eecc:	460e      	mov	r6, r1
 800eece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed2:	2900      	cmp	r1, #0
 800eed4:	b096      	sub	sp, #88	; 0x58
 800eed6:	4614      	mov	r4, r2
 800eed8:	461d      	mov	r5, r3
 800eeda:	da08      	bge.n	800eeee <__swhatbuf_r+0x24>
 800eedc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eee0:	2200      	movs	r2, #0
 800eee2:	602a      	str	r2, [r5, #0]
 800eee4:	061a      	lsls	r2, r3, #24
 800eee6:	d410      	bmi.n	800ef0a <__swhatbuf_r+0x40>
 800eee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeec:	e00e      	b.n	800ef0c <__swhatbuf_r+0x42>
 800eeee:	466a      	mov	r2, sp
 800eef0:	f000 f894 	bl	800f01c <_fstat_r>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	dbf1      	blt.n	800eedc <__swhatbuf_r+0x12>
 800eef8:	9a01      	ldr	r2, [sp, #4]
 800eefa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800eefe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef02:	425a      	negs	r2, r3
 800ef04:	415a      	adcs	r2, r3
 800ef06:	602a      	str	r2, [r5, #0]
 800ef08:	e7ee      	b.n	800eee8 <__swhatbuf_r+0x1e>
 800ef0a:	2340      	movs	r3, #64	; 0x40
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	b016      	add	sp, #88	; 0x58
 800ef12:	bd70      	pop	{r4, r5, r6, pc}

0800ef14 <__smakebuf_r>:
 800ef14:	898b      	ldrh	r3, [r1, #12]
 800ef16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef18:	079d      	lsls	r5, r3, #30
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460c      	mov	r4, r1
 800ef1e:	d507      	bpl.n	800ef30 <__smakebuf_r+0x1c>
 800ef20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	6123      	str	r3, [r4, #16]
 800ef28:	2301      	movs	r3, #1
 800ef2a:	6163      	str	r3, [r4, #20]
 800ef2c:	b002      	add	sp, #8
 800ef2e:	bd70      	pop	{r4, r5, r6, pc}
 800ef30:	ab01      	add	r3, sp, #4
 800ef32:	466a      	mov	r2, sp
 800ef34:	f7ff ffc9 	bl	800eeca <__swhatbuf_r>
 800ef38:	9900      	ldr	r1, [sp, #0]
 800ef3a:	4605      	mov	r5, r0
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff f8ef 	bl	800e120 <_malloc_r>
 800ef42:	b948      	cbnz	r0, 800ef58 <__smakebuf_r+0x44>
 800ef44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef48:	059a      	lsls	r2, r3, #22
 800ef4a:	d4ef      	bmi.n	800ef2c <__smakebuf_r+0x18>
 800ef4c:	f023 0303 	bic.w	r3, r3, #3
 800ef50:	f043 0302 	orr.w	r3, r3, #2
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	e7e3      	b.n	800ef20 <__smakebuf_r+0xc>
 800ef58:	4b0d      	ldr	r3, [pc, #52]	; (800ef90 <__smakebuf_r+0x7c>)
 800ef5a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	6020      	str	r0, [r4, #0]
 800ef60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef64:	81a3      	strh	r3, [r4, #12]
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	6163      	str	r3, [r4, #20]
 800ef6a:	9b01      	ldr	r3, [sp, #4]
 800ef6c:	6120      	str	r0, [r4, #16]
 800ef6e:	b15b      	cbz	r3, 800ef88 <__smakebuf_r+0x74>
 800ef70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef74:	4630      	mov	r0, r6
 800ef76:	f000 f863 	bl	800f040 <_isatty_r>
 800ef7a:	b128      	cbz	r0, 800ef88 <__smakebuf_r+0x74>
 800ef7c:	89a3      	ldrh	r3, [r4, #12]
 800ef7e:	f023 0303 	bic.w	r3, r3, #3
 800ef82:	f043 0301 	orr.w	r3, r3, #1
 800ef86:	81a3      	strh	r3, [r4, #12]
 800ef88:	89a0      	ldrh	r0, [r4, #12]
 800ef8a:	4305      	orrs	r5, r0
 800ef8c:	81a5      	strh	r5, [r4, #12]
 800ef8e:	e7cd      	b.n	800ef2c <__smakebuf_r+0x18>
 800ef90:	0800dea1 	.word	0x0800dea1

0800ef94 <_raise_r>:
 800ef94:	291f      	cmp	r1, #31
 800ef96:	b538      	push	{r3, r4, r5, lr}
 800ef98:	4604      	mov	r4, r0
 800ef9a:	460d      	mov	r5, r1
 800ef9c:	d904      	bls.n	800efa8 <_raise_r+0x14>
 800ef9e:	2316      	movs	r3, #22
 800efa0:	6003      	str	r3, [r0, #0]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800efaa:	b112      	cbz	r2, 800efb2 <_raise_r+0x1e>
 800efac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800efb0:	b94b      	cbnz	r3, 800efc6 <_raise_r+0x32>
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 f830 	bl	800f018 <_getpid_r>
 800efb8:	462a      	mov	r2, r5
 800efba:	4601      	mov	r1, r0
 800efbc:	4620      	mov	r0, r4
 800efbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efc2:	f000 b817 	b.w	800eff4 <_kill_r>
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	d00a      	beq.n	800efe0 <_raise_r+0x4c>
 800efca:	1c59      	adds	r1, r3, #1
 800efcc:	d103      	bne.n	800efd6 <_raise_r+0x42>
 800efce:	2316      	movs	r3, #22
 800efd0:	6003      	str	r3, [r0, #0]
 800efd2:	2001      	movs	r0, #1
 800efd4:	e7e7      	b.n	800efa6 <_raise_r+0x12>
 800efd6:	2400      	movs	r4, #0
 800efd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800efdc:	4628      	mov	r0, r5
 800efde:	4798      	blx	r3
 800efe0:	2000      	movs	r0, #0
 800efe2:	e7e0      	b.n	800efa6 <_raise_r+0x12>

0800efe4 <raise>:
 800efe4:	4b02      	ldr	r3, [pc, #8]	; (800eff0 <raise+0xc>)
 800efe6:	4601      	mov	r1, r0
 800efe8:	6818      	ldr	r0, [r3, #0]
 800efea:	f7ff bfd3 	b.w	800ef94 <_raise_r>
 800efee:	bf00      	nop
 800eff0:	24000030 	.word	0x24000030

0800eff4 <_kill_r>:
 800eff4:	b538      	push	{r3, r4, r5, lr}
 800eff6:	4d07      	ldr	r5, [pc, #28]	; (800f014 <_kill_r+0x20>)
 800eff8:	2300      	movs	r3, #0
 800effa:	4604      	mov	r4, r0
 800effc:	4608      	mov	r0, r1
 800effe:	4611      	mov	r1, r2
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	f7f2 f8fb 	bl	80011fc <_kill>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	d102      	bne.n	800f010 <_kill_r+0x1c>
 800f00a:	682b      	ldr	r3, [r5, #0]
 800f00c:	b103      	cbz	r3, 800f010 <_kill_r+0x1c>
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	bd38      	pop	{r3, r4, r5, pc}
 800f012:	bf00      	nop
 800f014:	240106f0 	.word	0x240106f0

0800f018 <_getpid_r>:
 800f018:	f7f2 b8ee 	b.w	80011f8 <_getpid>

0800f01c <_fstat_r>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	4d07      	ldr	r5, [pc, #28]	; (800f03c <_fstat_r+0x20>)
 800f020:	2300      	movs	r3, #0
 800f022:	4604      	mov	r4, r0
 800f024:	4608      	mov	r0, r1
 800f026:	4611      	mov	r1, r2
 800f028:	602b      	str	r3, [r5, #0]
 800f02a:	f7f2 f915 	bl	8001258 <_fstat>
 800f02e:	1c43      	adds	r3, r0, #1
 800f030:	d102      	bne.n	800f038 <_fstat_r+0x1c>
 800f032:	682b      	ldr	r3, [r5, #0]
 800f034:	b103      	cbz	r3, 800f038 <_fstat_r+0x1c>
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	bd38      	pop	{r3, r4, r5, pc}
 800f03a:	bf00      	nop
 800f03c:	240106f0 	.word	0x240106f0

0800f040 <_isatty_r>:
 800f040:	b538      	push	{r3, r4, r5, lr}
 800f042:	4d06      	ldr	r5, [pc, #24]	; (800f05c <_isatty_r+0x1c>)
 800f044:	2300      	movs	r3, #0
 800f046:	4604      	mov	r4, r0
 800f048:	4608      	mov	r0, r1
 800f04a:	602b      	str	r3, [r5, #0]
 800f04c:	f7f2 f90a 	bl	8001264 <_isatty>
 800f050:	1c43      	adds	r3, r0, #1
 800f052:	d102      	bne.n	800f05a <_isatty_r+0x1a>
 800f054:	682b      	ldr	r3, [r5, #0]
 800f056:	b103      	cbz	r3, 800f05a <_isatty_r+0x1a>
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	bd38      	pop	{r3, r4, r5, pc}
 800f05c:	240106f0 	.word	0x240106f0

0800f060 <_init>:
 800f060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f062:	bf00      	nop
 800f064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f066:	bc08      	pop	{r3}
 800f068:	469e      	mov	lr, r3
 800f06a:	4770      	bx	lr

0800f06c <_fini>:
 800f06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f06e:	bf00      	nop
 800f070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f072:	bc08      	pop	{r3}
 800f074:	469e      	mov	lr, r3
 800f076:	4770      	bx	lr
