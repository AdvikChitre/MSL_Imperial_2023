
Power Board Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082ac  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080085e8  080085e8  000185e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080085ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000011e8  20000010  080085fc  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200011f8  080085fc  000211f8  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026c58  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000050eb  00000000  00000000  00046c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ed0  00000000  00000000  0004bd90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001bc0  00000000  00000000  0004dc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003b6ae  00000000  00000000  0004f820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028712  00000000  00000000  0008aece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00175e39  00000000  00000000  000b35e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00229419  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007e6c  00000000  00000000  0022946c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	080084cc 	.word	0x080084cc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	080084cc 	.word	0x080084cc

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f897 	bl	80003fc <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20000bec 	.word	0x20000bec
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	001312cf 	.word	0x001312cf
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4824      	ldr	r0, [pc, #144]	; (80003b0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c1e      	ldr	r4, [pc, #120]	; (80003b8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c17      	ldr	r4, [pc, #92]	; (80003b8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b909      	cbnz	r1, 8000396 <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000392:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 8000394:	e7f9      	b.n	800038a <__tx_ts_wait>

08000396 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 8000396:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 800039a:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 800039e:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003a4:	e7d8      	b.n	8000358 <__tx_ts_restore>
 80003a6:	bf00      	nop

080003a8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003ac:	20000c88 	.word	0x20000c88
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003b0:	20000bf0 	.word	0x20000bf0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003b4:	20000bf4 	.word	0x20000bf4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003b8:	200011f4 	.word	0x200011f4

080003bc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003bc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003be:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003c2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003c6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003ca:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003cc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003d0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003d2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003d4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003d6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003d8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003da:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003dc:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003de:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003e0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003e2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003e8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ea:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003ee:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003f0:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003f8:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003fa:	4770      	bx	lr

080003fc <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003fc:	4922      	ldr	r1, [pc, #136]	; (8000488 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003fe:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000400:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000404:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000408:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800040a:	b13a      	cbz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800040c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000410:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000412:	b91a      	cbnz	r2, 800041c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000416:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800041a:	6018      	str	r0, [r3, #0]

0800041c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800041e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000420:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000422:	b122      	cbz	r2, 800042e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000424:	4b1c      	ldr	r3, [pc, #112]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000426:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800042a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800042c:	e008      	b.n	8000440 <__tx_timer_done>

0800042e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800042e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000432:	4b1a      	ldr	r3, [pc, #104]	; (800049c <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000434:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000436:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000438:	d101      	bne.n	800043e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800043a:	4b19      	ldr	r3, [pc, #100]	; (80004a0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800043c:	6818      	ldr	r0, [r3, #0]

0800043e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800043e:	6008      	str	r0, [r1, #0]

08000440 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000440:	4b13      	ldr	r3, [pc, #76]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000442:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000444:	b912      	cbnz	r2, 800044c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000446:	4914      	ldr	r1, [pc, #80]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000448:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800044a:	b1c8      	cbz	r0, 8000480 <__tx_timer_nothing_expired>

0800044c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800044c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800044e:	4912      	ldr	r1, [pc, #72]	; (8000498 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000450:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000452:	b108      	cbz	r0, 8000458 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000454:	f007 fd38 	bl	8007ec8 <_tx_timer_expiration_process>

08000458 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000458:	4b0d      	ldr	r3, [pc, #52]	; (8000490 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800045a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800045c:	b172      	cbz	r2, 800047c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800045e:	f007 fca5 	bl	8007dac <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000462:	4810      	ldr	r0, [pc, #64]	; (80004a4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000464:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000466:	b949      	cbnz	r1, 800047c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000468:	480f      	ldr	r0, [pc, #60]	; (80004a8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800046a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800046e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000470:	480f      	ldr	r0, [pc, #60]	; (80004b0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000476:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000478:	d000      	beq.n	800047c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800047a:	6002      	str	r2, [r0, #0]

0800047c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800047c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000480 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000480:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000484:	4770      	bx	lr
 8000486:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000488:	20000c94 	.word	0x20000c94
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800048c:	200011f4 	.word	0x200011f4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000490:	20000c98 	.word	0x20000c98
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000494:	20000d24 	.word	0x20000d24
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	20000d28 	.word	0x20000d28
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 800049c:	20000d20 	.word	0x20000d20
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004a0:	20000d1c 	.word	0x20000d1c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004a4:	20000c88 	.word	0x20000c88
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004a8:	20000bf0 	.word	0x20000bf0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004ac:	20000bf4 	.word	0x20000bf4
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004b0:	e000ed04 	.word	0xe000ed04

080004b4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af02      	add	r7, sp, #8
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004c0:	2334      	movs	r3, #52	; 0x34
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c8:	4a0a      	ldr	r2, [pc, #40]	; (80004f4 <tx_application_define+0x40>)
 80004ca:	490b      	ldr	r1, [pc, #44]	; (80004f8 <tx_application_define+0x44>)
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <tx_application_define+0x48>)
 80004ce:	f007 ff31 	bl	8008334 <_txe_byte_pool_create>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d109      	bne.n	80004ec <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <tx_application_define+0x48>)
 80004da:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004dc:	68b8      	ldr	r0, [r7, #8]
 80004de:	f000 f80f 	bl	8000500 <App_ThreadX_Init>
 80004e2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004ea:	e7fe      	b.n	80004ea <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000002c 	.word	0x2000002c
 80004f8:	080084e4 	.word	0x080084e4
 80004fc:	2000042c 	.word	0x2000042c

08000500 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000508:	2300      	movs	r3, #0
 800050a:	60fb      	str	r3, [r7, #12]
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 800050c:	68fb      	ldr	r3, [r7, #12]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800051e:	f007 f84b 	bl	80075b8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000532:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000536:	4909      	ldr	r1, [pc, #36]	; (800055c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <LL_AHB2_GRP1_EnableClock+0x34>)
 8000542:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800054c:	68fb      	ldr	r3, [r7, #12]
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	46020c00 	.word	0x46020c00

08000560 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <LL_APB1_GRP2_EnableClock+0x34>)
 800056a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800056e:	4909      	ldr	r1, [pc, #36]	; (8000594 <LL_APB1_GRP2_EnableClock+0x34>)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4313      	orrs	r3, r2
 8000574:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <LL_APB1_GRP2_EnableClock+0x34>)
 800057a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4013      	ands	r3, r2
 8000582:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000584:	68fb      	ldr	r3, [r7, #12]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	46020c00 	.word	0x46020c00

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fe7a 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f816 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 fac8 	bl	8000b38 <MX_GPIO_Init>
  MX_DCACHE1_Init();
 80005a8:	f000 f988 	bl	80008bc <MX_DCACHE1_Init>
  MX_FDCAN1_Init();
 80005ac:	f000 f99c 	bl	80008e8 <MX_FDCAN1_Init>
  MX_I2C2_Init();
 80005b0:	f000 f9e0 	bl	8000974 <MX_I2C2_Init>
  MX_ICACHE_Init();
 80005b4:	f000 fa26 	bl	8000a04 <MX_ICACHE_Init>
  MX_UCPD1_Init();
 80005b8:	f000 fa5c 	bl	8000a74 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005bc:	f000 fa90 	bl	8000ae0 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC4_Init();
 80005c0:	f000 f8e0 	bl	8000784 <MX_ADC4_Init>
  MX_ADC1_Init();
 80005c4:	f000 f89a 	bl	80006fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80005c8:	f7ff ffa7 	bl	800051a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x34>
	...

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b0a6      	sub	sp, #152	; 0x98
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	2260      	movs	r2, #96	; 0x60
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 ff6c 	bl	80084bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]
 8000606:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000608:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800060c:	f003 fc06 	bl	8003e1c <HAL_PWREx_ControlVoltageScaling>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x4a>
  {
    Error_Handler();
 8000616:	f000 faf7 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800061a:	2323      	movs	r3, #35	; 0x23
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000638:	2303      	movs	r3, #3
 800063a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV2;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000646:	2328      	movs	r3, #40	; 0x28
 8000648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000652:	2304      	movs	r3, #4
 8000654:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000658:	2304      	movs	r3, #4
 800065a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800065e:	230c      	movs	r3, #12
 8000660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800066e:	4618      	mov	r0, r3
 8000670:	f003 fc70 	bl	8003f54 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067a:	f000 fac5 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	231f      	movs	r3, #31
 8000680:	623b      	str	r3, [r7, #32]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2303      	movs	r3, #3
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2103      	movs	r1, #3
 800069c:	4618      	mov	r0, r3
 800069e:	f004 fb35 	bl	8004d0c <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80006a8:	f000 faae 	bl	8000c08 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <SystemClock_Config+0x128>)
 80006ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006b2:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <SystemClock_Config+0x128>)
 80006b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <SystemClock_Config+0x128>)
 80006be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80006ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006d2:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80006d4:	2300      	movs	r3, #0
 80006d6:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 80006d8:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 80006dc:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80006de:	2322      	movs	r3, #34	; 0x22
 80006e0:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80006e2:	2320      	movs	r3, #32
 80006e4:	61fb      	str	r3, [r7, #28]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fcb8 	bl	8006060 <HAL_RCCEx_CRSConfig>
}
 80006f0:	bf00      	nop
 80006f2:	3798      	adds	r7, #152	; 0x98
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	46020c00 	.word	0x46020c00

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_ADC1_Init+0x80>)
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <MX_ADC1_Init+0x84>)
 8000704:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_ADC1_Init+0x80>)
 8000708:	2200      	movs	r2, #0
 800070a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_ADC1_Init+0x80>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ADC1_Init+0x80>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_ADC1_Init+0x80>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x80>)
 8000720:	2204      	movs	r2, #4
 8000722:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_ADC1_Init+0x80>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x80>)
 800072c:	2200      	movs	r2, #0
 800072e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_ADC1_Init+0x80>)
 8000734:	2201      	movs	r2, #1
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000738:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_ADC1_Init+0x80>)
 800073a:	2200      	movs	r2, #0
 800073c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_ADC1_Init+0x80>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_ADC1_Init+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_ADC1_Init+0x80>)
 8000750:	2200      	movs	r2, #0
 8000752:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_ADC1_Init+0x80>)
 8000756:	2200      	movs	r2, #0
 8000758:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_ADC1_Init+0x80>)
 800075c:	2200      	movs	r2, #0
 800075e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_ADC1_Init+0x80>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_ADC1_Init+0x80>)
 800076a:	f001 f939 	bl	80019e0 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 fa48 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000460 	.word	0x20000460
 8000780:	42028000 	.word	0x42028000

08000784 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2220      	movs	r2, #32
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f007 fe93 	bl	80084bc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000796:	4b43      	ldr	r3, [pc, #268]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000798:	4a43      	ldr	r2, [pc, #268]	; (80008a8 <MX_ADC4_Init+0x124>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079c:	4b41      	ldr	r3, [pc, #260]	; (80008a4 <MX_ADC4_Init+0x120>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007a2:	4b40      	ldr	r3, [pc, #256]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hadc4.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80007ae:	4b3d      	ldr	r3, [pc, #244]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80007b4:	611a      	str	r2, [r3, #16]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoPowerOff = ADC_LOW_POWER_NONE;
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.NbrOfConversion = 1;
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007d8:	2200      	movs	r2, #0
 80007da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80007ea:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_LOW;
 80007f2:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80007f8:	669a      	str	r2, [r3, #104]	; 0x68
  hadc4.Init.VrefProtection = ADC_VREF_PPROT_NONE;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_ADC4_Init+0x120>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	66da      	str	r2, [r3, #108]	; 0x6c
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000802:	2200      	movs	r2, #0
 8000804:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.SamplingTimeCommon1 = ADC4_SAMPLETIME_1CYCLE_5;
 8000806:	4b27      	ldr	r3, [pc, #156]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000808:	2200      	movs	r2, #0
 800080a:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.SamplingTimeCommon2 = ADC4_SAMPLETIME_1CYCLE_5;
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <MX_ADC4_Init+0x120>)
 800080e:	2200      	movs	r2, #0
 8000810:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.OversamplingMode = DISABLE;
 8000812:	4b24      	ldr	r3, [pc, #144]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800081a:	4822      	ldr	r0, [pc, #136]	; (80008a4 <MX_ADC4_Init+0x120>)
 800081c:	f001 f8e0 	bl	80019e0 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC4_Init+0xa6>
  {
    Error_Handler();
 8000826:	f000 f9ef 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC4_CHANNEL_TEMPSENSOR;
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <MX_ADC4_Init+0x128>)
 800082c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC4_RANK_CHANNEL_NUMBER;
 800082e:	2301      	movs	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC4_SAMPLINGTIME_COMMON_1;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000836:	2304      	movs	r3, #4
 8000838:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	4619      	mov	r1, r3
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000844:	f001 fb96 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 800084e:	f000 f9db 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000852:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_ADC4_Init+0x12c>)
 8000854:	603b      	str	r3, [r7, #0]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4812      	ldr	r0, [pc, #72]	; (80008a4 <MX_ADC4_Init+0x120>)
 800085c:	f001 fb8a 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC4_Init+0xe6>
  {
    Error_Handler();
 8000866:	f000 f9cf 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC4_CHANNEL_VBAT;
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_ADC4_Init+0x130>)
 800086c:	603b      	str	r3, [r7, #0]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_ADC4_Init+0x120>)
 8000874:	f001 fb7e 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC4_Init+0xfe>
  {
    Error_Handler();
 800087e:	f000 f9c3 	bl	8000c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VCORE;
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <MX_ADC4_Init+0x134>)
 8000884:	603b      	str	r3, [r7, #0]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_ADC4_Init+0x120>)
 800088c:	f001 fb72 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_ADC4_Init+0x116>
  {
    Error_Handler();
 8000896:	f000 f9b7 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200004ec 	.word	0x200004ec
 80008a8:	46021000 	.word	0x46021000
 80008ac:	b6002000 	.word	0xb6002000
 80008b0:	80000001 	.word	0x80000001
 80008b4:	ba004000 	.word	0xba004000
 80008b8:	b2001000 	.word	0xb2001000

080008bc <MX_DCACHE1_Init>:
  * @brief DCACHE1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCACHE1_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DCACHE1_Init 0 */

  /* USER CODE BEGIN DCACHE1_Init 1 */

  /* USER CODE END DCACHE1_Init 1 */
  hdcache1.Instance = DCACHE1;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_DCACHE1_Init+0x24>)
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <MX_DCACHE1_Init+0x28>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdcache1.Init.ReadBurstType = DCACHE_READ_BURST_WRAP;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_DCACHE1_Init+0x24>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  if (HAL_DCACHE_Init(&hdcache1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_DCACHE1_Init+0x24>)
 80008ce:	f002 fb09 	bl	8002ee4 <HAL_DCACHE_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_DCACHE1_Init+0x20>
  {
    Error_Handler();
 80008d8:	f000 f996 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN DCACHE1_Init 2 */

  /* USER CODE END DCACHE1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000578 	.word	0x20000578
 80008e4:	40031400 	.word	0x40031400

080008e8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <MX_FDCAN1_Init+0x88>)
 80008f0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	; (800096c <MX_FDCAN1_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000904:	4b19      	ldr	r3, [pc, #100]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000906:	2200      	movs	r2, #0
 8000908:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_FDCAN1_Init+0x84>)
 800090c:	2200      	movs	r2, #0
 800090e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000918:	2210      	movs	r2, #16
 800091a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_FDCAN1_Init+0x84>)
 800091e:	2201      	movs	r2, #1
 8000920:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000924:	2202      	movs	r2, #2
 8000926:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_FDCAN1_Init+0x84>)
 800092a:	2202      	movs	r2, #2
 800092c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000930:	2201      	movs	r2, #1
 8000932:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000936:	2201      	movs	r2, #1
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_FDCAN1_Init+0x84>)
 800093c:	2201      	movs	r2, #1
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000942:	2201      	movs	r2, #1
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000948:	2200      	movs	r2, #0
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_FDCAN1_Init+0x84>)
 800094e:	2200      	movs	r2, #0
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_FDCAN1_Init+0x84>)
 8000954:	2200      	movs	r2, #0
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_FDCAN1_Init+0x84>)
 800095a:	f002 fb6f 	bl	800303c <HAL_FDCAN_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000964:	f000 f950 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200005a4 	.word	0x200005a4
 8000970:	4000a400 	.word	0x4000a400

08000974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <MX_I2C2_Init+0x84>)
 800097a:	4a20      	ldr	r2, [pc, #128]	; (80009fc <MX_I2C2_Init+0x88>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00601853;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_I2C2_Init+0x84>)
 8000980:	4a1f      	ldr	r2, [pc, #124]	; (8000a00 <MX_I2C2_Init+0x8c>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_I2C2_Init+0x84>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_I2C2_Init+0x84>)
 800098c:	2201      	movs	r2, #1
 800098e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_I2C2_Init+0x84>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_I2C2_Init+0x84>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_I2C2_Init+0x84>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a8:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009b0:	f002 fec4 	bl	800373c <HAL_I2C_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80009ba:	f000 f925 	bl	8000c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009be:	2100      	movs	r1, #0
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009c2:	f002 ff4a 	bl	800385a <HAL_I2CEx_ConfigAnalogFilter>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80009cc:	f000 f91c 	bl	8000c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009d0:	2100      	movs	r1, #0
 80009d2:	4809      	ldr	r0, [pc, #36]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009d4:	f002 ff8c 	bl	80038f0 <HAL_I2CEx_ConfigDigitalFilter>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 f913 	bl	8000c08 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c2, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_I2C2_Init+0x84>)
 80009e6:	f002 ffcf 	bl	8003988 <HAL_I2CEx_ConfigFastModePlus>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C2_Init+0x80>
  {
    Error_Handler();
 80009f0:	f000 f90a 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000608 	.word	0x20000608
 80009fc:	40005800 	.word	0x40005800
 8000a00:	00601853 	.word	0x00601853

08000a04 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ICACHE_Init 0 */

  /* USER CODE END ICACHE_Init 0 */

  ICACHE_RegionConfigTypeDef pRegionConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]

  /* USER CODE END ICACHE_Init 1 */

  /** Configure and enable a region for memory remapping.
  */
  if (HAL_ICACHE_Disable() != HAL_OK)
 8000a18:	f003 f836 	bl	8003a88 <HAL_ICACHE_Disable>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a22:	f000 f8f1 	bl	8000c08 <Error_Handler>
  }
  pRegionConfig.BaseAddress = 0x0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  pRegionConfig.RemapAddress = 0x0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  pRegionConfig.Size = ICACHE_REGIONSIZE_2MB;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
  pRegionConfig.TrafficRoute = ICACHE_MASTER1_PORT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  pRegionConfig.OutputBurstType = ICACHE_OUTPUT_BURST_WRAP;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_ICACHE_EnableRemapRegion(ICACHE_REGION_0, &pRegionConfig) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f003 f852 	bl	8003ae8 <HAL_ICACHE_EnableRemapRegion>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_ICACHE_Init+0x4a>
  {
    Error_Handler();
 8000a4a:	f000 f8dd 	bl	8000c08 <Error_Handler>
  }

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f002 ffea 	bl	8003a28 <HAL_ICACHE_ConfigAssociativityMode>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ICACHE_Init+0x5a>
  {
    Error_Handler();
 8000a5a:	f000 f8d5 	bl	8000c08 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a5e:	f003 f803 	bl	8003a68 <HAL_ICACHE_Enable>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ICACHE_Init+0x68>
  {
    Error_Handler();
 8000a68:	f000 f8ce 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a8a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a8e:	f7ff fd67 	bl	8000560 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a92:	2002      	movs	r0, #2
 8000a94:	f7ff fd48 	bl	8000528 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f7ff fd45 	bl	8000528 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_UCPD1_Init+0x64>)
 8000ab2:	f006 f97c 	bl	8006dae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000abc:	2303      	movs	r3, #3
 8000abe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_UCPD1_Init+0x68>)
 8000aca:	f006 f970 	bl	8006dae <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3718      	adds	r7, #24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	42020400 	.word	0x42020400
 8000adc:	42020000 	.word	0x42020000

08000ae0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000aec:	2206      	movs	r2, #6
 8000aee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000af2:	2202      	movs	r2, #2
 8000af4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000b1c:	f003 f836 	bl	8003b8c <HAL_PCD_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 f86f 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000065c 	.word	0x2000065c
 8000b34:	42040000 	.word	0x42040000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b44:	4a26      	ldr	r2, [pc, #152]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5c:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b80:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b9e:	4a10      	ldr	r2, [pc, #64]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000baa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000bbe:	f043 0308 	orr.w	r3, r3, #8
 8000bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_GPIO_Init+0xa8>)
 8000bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bcc:	f003 0308 	and.w	r3, r3, #8
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf6:	f000 fb7b 	bl	80012f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40001000 	.word	0x40001000

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <Error_Handler+0x8>
	...

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x3c>)
 8000c1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c20:	4a0b      	ldr	r2, [pc, #44]	; (8000c50 <HAL_MspInit+0x3c>)
 8000c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c26:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x3c>)
 8000c2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000c30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE3);
 8000c38:	2030      	movs	r0, #48	; 0x30
 8000c3a:	f000 fbab 	bl	8001394 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000c3e:	f000 fbd1 	bl	80013e4 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 fbba 	bl	80013bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	46020c00 	.word	0x46020c00

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0be      	sub	sp, #248	; 0xf8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	22c8      	movs	r2, #200	; 0xc8
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f007 fc21 	bl	80084bc <memset>
  if(hadc->Instance==ADC1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <HAL_ADC_MspInit+0x148>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d15f      	bne.n	8000d44 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0318 	add.w	r3, r7, #24
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f004 fc1f 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000ca8:	f7ff ffae 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cb2:	4a3b      	ldr	r2, [pc, #236]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cbc:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cd0:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cee:	4a2c      	ldr	r2, [pc, #176]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cf8:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    PA2     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d18:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <HAL_ADC_MspInit+0x150>)
 8000d20:	f002 fb34 	bl	800338c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d24:	2304      	movs	r3, #4
 8000d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481a      	ldr	r0, [pc, #104]	; (8000da8 <HAL_ADC_MspInit+0x154>)
 8000d3e:	f002 fb25 	bl	800338c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000d42:	e027      	b.n	8000d94 <HAL_ADC_MspInit+0x140>
  else if(hadc->Instance==ADC4)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a18      	ldr	r2, [pc, #96]	; (8000dac <HAL_ADC_MspInit+0x158>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d122      	bne.n	8000d94 <HAL_ADC_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000d4e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	4618      	mov	r0, r3
 8000d68:	f004 fbba 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_ADC_MspInit+0x122>
      Error_Handler();
 8000d72:	f7ff ff49 	bl	8000c08 <Error_Handler>
    __HAL_RCC_ADC4_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000d7e:	f043 0320 	orr.w	r3, r3, #32
 8000d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_ADC_MspInit+0x14c>)
 8000d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d8c:	f003 0320 	and.w	r3, r3, #32
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
}
 8000d94:	bf00      	nop
 8000d96:	37f8      	adds	r7, #248	; 0xf8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	42028000 	.word	0x42028000
 8000da0:	46020c00 	.word	0x46020c00
 8000da4:	42020800 	.word	0x42020800
 8000da8:	42020000 	.word	0x42020000
 8000dac:	46021000 	.word	0x46021000

08000db0 <HAL_DCACHE_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcache: DCACHE handle pointer
* @retval None
*/
void HAL_DCACHE_MspInit(DCACHE_HandleTypeDef* hdcache)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(hdcache->Instance==DCACHE1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <HAL_DCACHE_MspInit+0x3c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10e      	bne.n	8000de0 <HAL_DCACHE_MspInit+0x30>
  {
  /* USER CODE BEGIN DCACHE1_MspInit 0 */

  /* USER CODE END DCACHE1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCACHE1_CLK_ENABLE();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_DCACHE_MspInit+0x40>)
 8000dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc8:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <HAL_DCACHE_MspInit+0x40>)
 8000dca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000dce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <HAL_DCACHE_MspInit+0x40>)
 8000dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DCACHE1_MspInit 1 */

  /* USER CODE END DCACHE1_MspInit 1 */
  }

}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40031400 	.word	0x40031400
 8000df0:	46020c00 	.word	0x46020c00

08000df4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0bc      	sub	sp, #240	; 0xf0
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22c8      	movs	r2, #200	; 0xc8
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f007 fb51 	bl	80084bc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <HAL_FDCAN_MspInit+0xc8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d146      	bne.n	8000eb2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN1;
 8000e24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Fdcan1ClockSelection = RCC_FDCAN1CLKSOURCE_PLL1;
 8000e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fb4f 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000e48:	f7ff fede 	bl	8000c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e58:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e70:	4a13      	ldr	r2, [pc, #76]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e72:	f043 0308 	orr.w	r3, r3, #8
 8000e76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_FDCAN_MspInit+0xcc>)
 8000e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e80:	f003 0308 	and.w	r3, r3, #8
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ea0:	2309      	movs	r3, #9
 8000ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <HAL_FDCAN_MspInit+0xd0>)
 8000eae:	f002 fa6d 	bl	800338c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	37f0      	adds	r7, #240	; 0xf0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	4000a400 	.word	0x4000a400
 8000ec0:	46020c00 	.word	0x46020c00
 8000ec4:	42020c00 	.word	0x42020c00

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0bc      	sub	sp, #240	; 0xf0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	22c8      	movs	r2, #200	; 0xc8
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f007 fae7 	bl	80084bc <memset>
  if(hi2c->Instance==I2C2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a26      	ldr	r2, [pc, #152]	; (8000f8c <HAL_I2C_MspInit+0xc4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d145      	bne.n	8000f84 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ef8:	f04f 0280 	mov.w	r2, #128	; 0x80
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f004 fae7 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000f18:	f7ff fe76 	bl	8000c08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f2c:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f3a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f42:	2312      	movs	r3, #18
 8000f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f54:	2304      	movs	r3, #4
 8000f56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <HAL_I2C_MspInit+0xcc>)
 8000f62:	f002 fa13 	bl	800338c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f6c:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	37f0      	adds	r7, #240	; 0xf0
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40005800 	.word	0x40005800
 8000f90:	46020c00 	.word	0x46020c00
 8000f94:	42020400 	.word	0x42020400

08000f98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0be      	sub	sp, #248	; 0xf8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	22c8      	movs	r2, #200	; 0xc8
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f007 fa7f 	bl	80084bc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <HAL_PCD_MspInit+0x10c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d169      	bne.n	800109c <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fcc:	f04f 0300 	mov.w	r3, #0
 8000fd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	f107 0318 	add.w	r3, r7, #24
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 fa7e 	bl	80054e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8000fea:	f7ff fe0d 	bl	8000c08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8000ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ff4:	4a2c      	ldr	r2, [pc, #176]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ffe:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800100c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001010:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001026:	230a      	movs	r3, #10
 8001028:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	; (80010ac <HAL_PCD_MspInit+0x114>)
 8001034:	f002 f9aa 	bl	800338c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 800103a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800103e:	4a1a      	ldr	r2, [pc, #104]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001044:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 800104a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d119      	bne.n	8001098 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001082:	f002 ff57 	bl	8003f34 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 8001088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108c:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <HAL_PCD_MspInit+0x110>)
 800108e:	f023 0304 	bic.w	r3, r3, #4
 8001092:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001096:	e001      	b.n	800109c <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001098:	f002 ff4c 	bl	8003f34 <HAL_PWREx_EnableVddUSB>
}
 800109c:	bf00      	nop
 800109e:	37f8      	adds	r7, #248	; 0xf8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	42040000 	.word	0x42040000
 80010a8:	46020c00 	.word	0x46020c00
 80010ac:	42020000 	.word	0x42020000

080010b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_InitTick+0xcc>)
 80010c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_InitTick+0xcc>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80010d0:	4b2a      	ldr	r3, [pc, #168]	; (800117c <HAL_InitTick+0xcc>)
 80010d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010de:	f107 0210 	add.w	r2, r7, #16
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 f93b 	bl	8005364 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010ee:	f004 f925 	bl	800533c <HAL_RCC_GetPCLK1Freq>
 80010f2:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f6:	4a22      	ldr	r2, [pc, #136]	; (8001180 <HAL_InitTick+0xd0>)
 80010f8:	fba2 2303 	umull	r2, r3, r2, r3
 80010fc:	0c9b      	lsrs	r3, r3, #18
 80010fe:	3b01      	subs	r3, #1
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001102:	4b20      	ldr	r3, [pc, #128]	; (8001184 <HAL_InitTick+0xd4>)
 8001104:	4a20      	ldr	r2, [pc, #128]	; (8001188 <HAL_InitTick+0xd8>)
 8001106:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_InitTick+0xd4>)
 800110a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800110e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_InitTick+0xd4>)
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_InitTick+0xd4>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_InitTick+0xd4>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001122:	4818      	ldr	r0, [pc, #96]	; (8001184 <HAL_InitTick+0xd4>)
 8001124:	f005 f90e 	bl	8006344 <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 800112e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001132:	2b00      	cmp	r3, #0
 8001134:	d118      	bne.n	8001168 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001136:	4813      	ldr	r0, [pc, #76]	; (8001184 <HAL_InitTick+0xd4>)
 8001138:	f005 f966 	bl	8006408 <HAL_TIM_Base_Start_IT>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8001142:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b0f      	cmp	r3, #15
 800114e:	d808      	bhi.n	8001162 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001150:	2200      	movs	r2, #0
 8001152:	6879      	ldr	r1, [r7, #4]
 8001154:	2031      	movs	r0, #49	; 0x31
 8001156:	f001 fe9d 	bl	8002e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_InitTick+0xdc>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	e002      	b.n	8001168 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001168:	2031      	movs	r0, #49	; 0x31
 800116a:	f001 fead 	bl	8002ec8 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800116e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001172:	4618      	mov	r0, r3
 8001174:	3738      	adds	r7, #56	; 0x38
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	46020c00 	.word	0x46020c00
 8001180:	431bde83 	.word	0x431bde83
 8001184:	20000b68 	.word	0x20000b68
 8001188:	40001000 	.word	0x40001000
 800118c:	20000004 	.word	0x20000004

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <NMI_Handler+0x4>

08001196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <HardFault_Handler+0x4>

0800119c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <MemManage_Handler+0x4>

080011a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <BusFault_Handler+0x4>

080011a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <UsageFault_Handler+0x4>

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <TIM6_IRQHandler+0x10>)
 80011c2:	f005 f9c1 	bl	8006548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000b68 	.word	0x20000b68

080011d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <SystemInit+0x68>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <SystemInit+0x68>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <SystemInit+0x6c>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011ea:	4b14      	ldr	r3, [pc, #80]	; (800123c <SystemInit+0x6c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <SystemInit+0x6c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <SystemInit+0x6c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <SystemInit+0x6c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <SystemInit+0x6c>)
 8001202:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001206:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800120a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <SystemInit+0x6c>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <SystemInit+0x6c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <SystemInit+0x6c>)
 8001218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <SystemInit+0x6c>)
 8001220:	2200      	movs	r2, #0
 8001222:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SystemInit+0x68>)
 8001226:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800122a:	609a      	str	r2, [r3, #8]
  #endif
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	46020c00 	.word	0x46020c00

08001240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001244:	f7ff ffc4 	bl	80011d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800124a:	e003      	b.n	8001254 <LoopCopyDataInit>

0800124c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800124e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001252:	3104      	adds	r1, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001254:	480a      	ldr	r0, [pc, #40]	; (8001280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800125a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800125c:	d3f6      	bcc.n	800124c <CopyDataInit>
	ldr	r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001260:	e002      	b.n	8001268 <LoopFillZerobss>

08001262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001264:	f842 3b04 	str.w	r3, [r2], #4

08001268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <LoopForever+0x16>)
	cmp	r2, r3
 800126a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800126c:	d3f9      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f007 f901 	bl	8008474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001272:	f7ff f991 	bl	8000598 <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001278:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800127c:	080085ec 	.word	0x080085ec
	ldr	r0, =_sdata
 8001280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001284:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8001288:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800128c:	200011f8 	.word	0x200011f8

08001290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC1_IRQHandler>
	...

08001294 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_Init+0x4c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_Init+0x4c>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f001 fdea 	bl	8002e7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012aa:	f003 ff21 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80012ae:	4602      	mov	r2, r0
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_Init+0x50>)
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	490b      	ldr	r1, [pc, #44]	; (80012e8 <HAL_Init+0x54>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x58>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c4:	200f      	movs	r0, #15
 80012c6:	f7ff fef3 	bl	80010b0 <HAL_InitTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e002      	b.n	80012da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d4:	f7ff fc9e 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40022000 	.word	0x40022000
 80012e4:	46020c00 	.word	0x46020c00
 80012e8:	0800850c 	.word	0x0800850c
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000008 	.word	0x20000008
 8001314:	20000bb4 	.word	0x20000bb4

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000bb4 	.word	0x20000bb4

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_GetREVID+0x18>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	b29b      	uxth	r3, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e0044000 	.word	0xe0044000

08001394 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013a4:	4904      	ldr	r1, [pc, #16]	; (80013b8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	46007400 	.word	0x46007400

080013bc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 0202 	bic.w	r2, r3, #2
 80013cc:	4904      	ldr	r1, [pc, #16]	; (80013e0 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	600b      	str	r3, [r1, #0]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	46007400 	.word	0x46007400

080013e4 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80013f6:	f7ff ff8f 	bl	8001318 <HAL_GetTick>
 80013fa:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 80013fc:	e008      	b.n	8001410 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80013fe:	f7ff ff8b 	bl	8001318 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b0a      	cmp	r3, #10
 800140a:	d901      	bls.n	8001410 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e006      	b.n	800141e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	46007400 	.word	0x46007400

0800142c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	601a      	str	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LL_ADC_SetResolution+0x3c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d104      	bne.n	80014b4 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f023 020c 	bic.w	r2, r3, #12
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	60da      	str	r2, [r3, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	46021000 	.word	0x46021000

080014d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	3360      	adds	r3, #96	; 0x60
 80014e6:	461a      	mov	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	430b      	orrs	r3, r1
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800150a:	bf00      	nop
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3360      	adds	r3, #96	; 0x60
 8001524:	461a      	mov	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001542:	b480      	push	{r7}
 8001544:	b087      	sub	sp, #28
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3360      	adds	r3, #96	; 0x60
 8001552:	461a      	mov	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	431a      	orrs	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	371c      	adds	r7, #28
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3360      	adds	r3, #96	; 0x60
 8001588:	461a      	mov	r2, r3
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	431a      	orrs	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	601a      	str	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	371c      	adds	r7, #28
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b087      	sub	sp, #28
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3360      	adds	r3, #96	; 0x60
 80015be:	461a      	mov	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]
}
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	2a00      	cmp	r2, #0
 800160e:	d002      	beq.n	8001616 <LL_ADC_SetGainCompensation+0x32>
 8001610:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001614:	e000      	b.n	8001618 <LL_ADC_SetGainCompensation+0x34>
 8001616:	2200      	movs	r2, #0
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	695a      	ldr	r2, [r3, #20]
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2107      	movs	r1, #7
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	401a      	ands	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	6879      	ldr	r1, [r7, #4]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	431a      	orrs	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001668:	b480      	push	{r7}
 800166a:	b089      	sub	sp, #36	; 0x24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a2b      	ldr	r2, [pc, #172]	; (8001724 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d020      	beq.n	80016be <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	3330      	adds	r3, #48	; 0x30
 8001680:	461a      	mov	r2, r3
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	4413      	add	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	211f      	movs	r1, #31
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	401a      	ands	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0e9b      	lsrs	r3, r3, #26
 80016a8:	f003 011f 	and.w	r1, r3, #31
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	431a      	orrs	r2, r3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80016bc:	e02b      	b.n	8001716 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	210f      	movs	r1, #15
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	0e9b      	lsrs	r3, r3, #26
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	e010      	b.n	8001708 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 80016fc:	2320      	movs	r3, #32
 80016fe:	e003      	b.n	8001708 <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	b2db      	uxtb	r3, r3
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	f001 011f 	and.w	r1, r1, #31
 800170e:	408b      	lsls	r3, r1
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001716:	bf00      	nop
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	46021000 	.word	0x46021000

08001728 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d107      	bne.n	800174c <LL_ADC_REG_SetSequencerChAdd+0x24>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	0e9b      	lsrs	r3, r3, #26
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	2201      	movs	r2, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	e015      	b.n	8001778 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	60fb      	str	r3, [r7, #12]
  return result;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001762:	2320      	movs	r3, #32
 8001764:	e003      	b.n	800176e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	f003 031f 	and.w	r3, r3, #31
 8001772:	2201      	movs	r2, #1
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	0e9b      	lsrs	r3, r3, #26
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2101      	movs	r1, #1
 80017a6:	fa01 f303 	lsl.w	r3, r1, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b08b      	sub	sp, #44	; 0x2c
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4a2d      	ldr	r2, [pc, #180]	; (8001884 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d042      	beq.n	800185a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d104      	bne.n	80017e8 <LL_ADC_SetChannelSamplingTime+0x28>
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	f003 021f 	and.w	r2, r3, #31
 80017e6:	e011      	b.n	800180c <LL_ADC_SetChannelSamplingTime+0x4c>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	617b      	str	r3, [r7, #20]
  return result;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80017fe:	2320      	movs	r3, #32
 8001800:	e003      	b.n	800180a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fab3 f383 	clz	r3, r3
 8001808:	b2db      	uxtb	r3, r3
 800180a:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	0e5b      	lsrs	r3, r3, #25
 8001810:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001814:	460b      	mov	r3, r1
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	3314      	adds	r3, #20
 800182a:	461a      	mov	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	0e5b      	lsrs	r3, r3, #25
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2107      	movs	r1, #7
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	401a      	ands	r2, r3
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	431a      	orrs	r2, r3
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001858:	e00e      	b.n	8001878 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	0219      	lsls	r1, r3, #8
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	400b      	ands	r3, r1
 800186e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001872:	431a      	orrs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	615a      	str	r2, [r3, #20]
}
 8001878:	bf00      	nop
 800187a:	372c      	adds	r7, #44	; 0x2c
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	46021000 	.word	0x46021000

08001888 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0318 	and.w	r3, r3, #24
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80018ac:	40d9      	lsrs	r1, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	400b      	ands	r3, r1
 80018b2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80018b6:	431a      	orrs	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	000fffff 	.word	0x000fffff

080018d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6093      	str	r3, [r2, #8]
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001908:	d101      	bne.n	800190e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001930:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001954:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001958:	d101      	bne.n	800195e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <LL_ADC_IsEnabled+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_ADC_IsEnabled+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d101      	bne.n	80019aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d101      	bne.n	80019d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2b3      	b.n	8001f68 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a8b      	ldr	r2, [pc, #556]	; (8001c3c <HAL_ADC_Init+0x25c>)
 8001a0e:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff f91b 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff45 	bl	80018d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff7a 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d115      	bne.n	8001a82 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff5e 	bl	800191c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a60:	4b77      	ldr	r3, [pc, #476]	; (8001c40 <HAL_ADC_Init+0x260>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	099b      	lsrs	r3, r3, #6
 8001a66:	4a77      	ldr	r2, [pc, #476]	; (8001c44 <HAL_ADC_Init+0x264>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	3301      	adds	r3, #1
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a74:	e002      	b.n	8001a7c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f9      	bne.n	8001a76 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff5c 	bl	8001944 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10e      	bne.n	8001ab0 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a96:	f043 0210 	orr.w	r2, r3, #16
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aa2:	f043 0201 	orr.w	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff6c 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001aba:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8244 	bne.w	8001f52 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 8240 	bne.w	8001f52 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ad6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ada:	f043 0202 	orr.w	r2, r3, #2
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff ff40 	bl	800196c <LL_ADC_IsEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d140      	bne.n	8001b74 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a51      	ldr	r2, [pc, #324]	; (8001c3c <HAL_ADC_Init+0x25c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d028      	beq.n	8001b4e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_ADC_Init+0x268>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d109      	bne.n	8001b1a <HAL_ADC_Init+0x13a>
 8001b06:	4850      	ldr	r0, [pc, #320]	; (8001c48 <HAL_ADC_Init+0x268>)
 8001b08:	f7ff ff30 	bl	800196c <LL_ADC_IsEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf0c      	ite	eq
 8001b12:	2301      	moveq	r3, #1
 8001b14:	2300      	movne	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	e008      	b.n	8001b2c <HAL_ADC_Init+0x14c>
 8001b1a:	4848      	ldr	r0, [pc, #288]	; (8001c3c <HAL_ADC_Init+0x25c>)
 8001b1c:	f7ff ff26 	bl	800196c <LL_ADC_IsEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d021      	beq.n	8001b74 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a44      	ldr	r2, [pc, #272]	; (8001c48 <HAL_ADC_Init+0x268>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x15e>
 8001b3a:	4a44      	ldr	r2, [pc, #272]	; (8001c4c <HAL_ADC_Init+0x26c>)
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Init+0x160>
 8001b3e:	4a44      	ldr	r2, [pc, #272]	; (8001c50 <HAL_ADC_Init+0x270>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff fc70 	bl	800142c <LL_ADC_SetCommonClock>
 8001b4c:	e012      	b.n	8001b74 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f7ff fc9b 	bl	8001494 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_ADC_Init+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b6e:	4938      	ldr	r1, [pc, #224]	; (8001c50 <HAL_ADC_Init+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <HAL_ADC_Init+0x25c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d010      	beq.n	8001ba0 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b84:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b8a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001b90:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b98:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	e030      	b.n	8001c02 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7f1b      	ldrb	r3, [r3, #28]
 8001ba4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bac:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bae:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d002      	beq.n	8001bbe <HAL_ADC_Init+0x1de>
 8001bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bbc:	e000      	b.n	8001bc0 <HAL_ADC_Init+0x1e0>
 8001bbe:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001bc0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001bc6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	da04      	bge.n	8001bda <HAL_ADC_Init+0x1fa>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001bd8:	e001      	b.n	8001bde <HAL_ADC_Init+0x1fe>
 8001bda:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001bde:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4918      	ldr	r1, [pc, #96]	; (8001c48 <HAL_ADC_Init+0x268>)
 8001be6:	428b      	cmp	r3, r1
 8001be8:	d103      	bne.n	8001bf2 <HAL_ADC_Init+0x212>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf0:	e003      	b.n	8001bfa <HAL_ADC_Init+0x21a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001bfa:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bfc:	6a3a      	ldr	r2, [r7, #32]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d12f      	bne.n	8001c6c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_ADC_Init+0x25c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	045b      	lsls	r3, r3, #17
 8001c1e:	6a3a      	ldr	r2, [r7, #32]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	623b      	str	r3, [r7, #32]
 8001c24:	e022      	b.n	8001c6c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d111      	bne.n	8001c54 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c30:	6a3b      	ldr	r3, [r7, #32]
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	e018      	b.n	8001c6c <HAL_ADC_Init+0x28c>
 8001c3a:	bf00      	nop
 8001c3c:	46021000 	.word	0x46021000
 8001c40:	20000000 	.word	0x20000000
 8001c44:	053e2d63 	.word	0x053e2d63
 8001c48:	42028000 	.word	0x42028000
 8001c4c:	42028308 	.word	0x42028308
 8001c50:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a92      	ldr	r2, [pc, #584]	; (8001ebc <HAL_ADC_Init+0x4dc>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d018      	beq.n	8001ca8 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d009      	beq.n	8001c92 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c82:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	6a3a      	ldr	r2, [r7, #32]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	4b89      	ldr	r3, [pc, #548]	; (8001ec0 <HAL_ADC_Init+0x4e0>)
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	6a39      	ldr	r1, [r7, #32]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	60d3      	str	r3, [r2, #12]
 8001ca6:	e031      	b.n	8001d0c <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	6a3a      	ldr	r2, [r7, #32]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_ADC_Init+0x4e4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	6a39      	ldr	r1, [r7, #32]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d008      	beq.n	8001d0c <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_ADC_Init+0x4dc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	f000 8093 	beq.w	8001e3e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fe38 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001d22:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fe45 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8001d2e:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d161      	bne.n	8001dfa <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d15e      	bne.n	8001dfa <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7f1b      	ldrb	r3, [r3, #28]
 8001d40:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4960      	ldr	r1, [pc, #384]	; (8001ec8 <HAL_ADC_Init+0x4e8>)
 8001d48:	428b      	cmp	r3, r1
 8001d4a:	d102      	bne.n	8001d52 <HAL_ADC_Init+0x372>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	e002      	b.n	8001d58 <HAL_ADC_Init+0x378>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d56:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6812      	ldr	r2, [r2, #0]
 8001d6e:	6a39      	ldr	r1, [r7, #32]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7ff fc2c 	bl	80015e4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d11e      	bne.n	8001dd4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <HAL_ADC_Init+0x4ec>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001daa:	0411      	lsls	r1, r2, #16
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001db0:	4311      	orrs	r1, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001db6:	4311      	orrs	r1, r2
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001dc2:	0892      	lsrs	r2, r2, #2
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	611a      	str	r2, [r3, #16]
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	691a      	ldr	r2, [r3, #16]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d10c      	bne.n	8001e1c <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f023 010f 	bic.w	r1, r3, #15
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1a:	e007      	b.n	8001e2c <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 020f 	bic.w	r2, r2, #15
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e30:	f023 0303 	bic.w	r3, r3, #3
 8001e34:	f043 0201 	orr.w	r2, r3, #1
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e3c:	e092      	b.n	8001f64 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d111      	bne.n	8001e6c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e50:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001e56:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001e5c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691a      	ldr	r2, [r3, #16]
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_ADC_Init+0x4f0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	69f9      	ldr	r1, [r7, #28]
 8001e7c:	430b      	orrs	r3, r1
 8001e7e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6818      	ldr	r0, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f7ff fbcd 	bl	800162a <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001e9e:	f7ff fbc4 	bl	800162a <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d114      	bne.n	8001ed4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f062 020f 	orn	r2, r2, #15
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8001eba:	e024      	b.n	8001f06 <HAL_ADC_Init+0x526>
 8001ebc:	46021000 	.word	0x46021000
 8001ec0:	fff0c013 	.word	0xfff0c013
 8001ec4:	ffde800d 	.word	0xffde800d
 8001ec8:	42028000 	.word	0x42028000
 8001ecc:	fc00f81e 	.word	0xfc00f81e
 8001ed0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001edc:	d113      	bne.n	8001f06 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	f003 031c 	and.w	r3, r3, #28
 8001ef0:	f06f 020f 	mvn.w	r2, #15
 8001ef4:	fa02 f103 	lsl.w	r1, r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_ADC_Init+0x590>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	6a3a      	ldr	r2, [r7, #32]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d10b      	bne.n	8001f2e <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f20:	f023 0303 	bic.w	r3, r3, #3
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f2c:	e01a      	b.n	8001f64 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f32:	f023 0312 	bic.w	r3, r3, #18
 8001f36:	f043 0210 	orr.w	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f42:	f043 0201 	orr.w	r2, r3, #1
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f50:	e008      	b.n	8001f64 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f56:	f043 0210 	orr.w	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	833ffff3 	.word	0x833ffff3

08001f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b0bc      	sub	sp, #240	; 0xf0
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4aa8      	ldr	r2, [pc, #672]	; (8002230 <HAL_ADC_ConfigChannel+0x2bc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d103      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x36>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f000 beb5 	b.w	8002d14 <HAL_ADC_ConfigChannel+0xda0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fceb 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 8695 	bne.w	8002cee <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a99      	ldr	r2, [pc, #612]	; (8002230 <HAL_ADC_ConfigChannel+0x2bc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f000 83ea 	beq.w	80027a4 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d108      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x7a>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	e01d      	b.n	800202a <HAL_ADC_ConfigChannel+0xb6>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002002:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 800200a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e004      	b.n	8002020 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2201      	movs	r2, #1
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	69d1      	ldr	r1, [r2, #28]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	430b      	orrs	r3, r1
 8002036:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	f7ff fb0f 	bl	8001668 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc9f 	bl	8001992 <LL_ADC_REG_IsConversionOngoing>
 8002054:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fcab 	bl	80019b8 <LL_ADC_INJ_IsConversionOngoing>
 8002062:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 81ed 	bne.w	800244a <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 81e8 	bne.w	800244a <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	461a      	mov	r2, r3
 8002088:	f7ff fb9a 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d046      	beq.n	800213c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6919      	ldr	r1, [r3, #16]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80020be:	f7ff fa09 	bl	80014d4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6919      	ldr	r1, [r3, #16]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f7ff fa37 	bl	8001542 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7e9b      	ldrb	r3, [r3, #26]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d11e      	bne.n	800211a <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <HAL_ADC_ConfigChannel+0x17e>
 80020ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f0:	e000      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x180>
 80020f2:	2300      	movs	r3, #0
 80020f4:	461a      	mov	r2, r3
 80020f6:	f7ff fa5a 	bl	80015ae <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002106:	2b01      	cmp	r3, #1
 8002108:	d102      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x19c>
 800210a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800210e:	e000      	b.n	8002112 <HAL_ADC_ConfigChannel+0x19e>
 8002110:	2300      	movs	r3, #0
 8002112:	461a      	mov	r2, r3
 8002114:	f7ff fa30 	bl	8001578 <LL_ADC_SetOffsetSignedSaturation>
 8002118:	e197      	b.n	800244a <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2200      	movs	r2, #0
 8002124:	4619      	mov	r1, r3
 8002126:	f7ff fa42 	bl	80015ae <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	2200      	movs	r2, #0
 8002134:	4619      	mov	r1, r3
 8002136:	f7ff fa1f 	bl	8001578 <LL_ADC_SetOffsetSignedSaturation>
 800213a:	e186      	b.n	800244a <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f9e7 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x1f4>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff f9dc 	bl	8001516 <LL_ADC_GetOffsetChannel>
 800215e:	4603      	mov	r3, r0
 8002160:	0e9b      	lsrs	r3, r3, #26
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	e01e      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x232>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f9d1 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002174:	4603      	mov	r3, r0
 8002176:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800217e:	fa93 f3a3 	rbit	r3, r3
 8002182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800218a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 800218e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002196:	2320      	movs	r3, #32
 8002198:	e004      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800219a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d105      	bne.n	80021be <HAL_ADC_ConfigChannel+0x24a>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0e9b      	lsrs	r3, r3, #26
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	e018      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x27c>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80021d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80021da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80021e2:	2320      	movs	r3, #32
 80021e4:	e004      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80021e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2300      	movs	r3, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	f7ff f968 	bl	80014d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f983 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x2c0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff f978 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	e020      	b.n	8002272 <HAL_ADC_ConfigChannel+0x2fe>
 8002230:	46021000 	.word	0x46021000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f96b 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002252:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800225a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_ADC_ConfigChannel+0x316>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	0e9b      	lsrs	r3, r3, #26
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	e018      	b.n	80022bc <HAL_ADC_ConfigChannel+0x348>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80022a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80022ae:	2320      	movs	r3, #32
 80022b0:	e004      	b.n	80022bc <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80022b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022bc:	429a      	cmp	r2, r3
 80022be:	d107      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2101      	movs	r1, #1
 80022cc:	f7ff f902 	bl	80014d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2102      	movs	r1, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff f91d 	bl	8001516 <LL_ADC_GetOffsetChannel>
 80022dc:	4603      	mov	r3, r0
 80022de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10a      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x388>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2102      	movs	r1, #2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff f912 	bl	8001516 <LL_ADC_GetOffsetChannel>
 80022f2:	4603      	mov	r3, r0
 80022f4:	0e9b      	lsrs	r3, r3, #26
 80022f6:	f003 021f 	and.w	r2, r3, #31
 80022fa:	e01e      	b.n	800233a <HAL_ADC_ConfigChannel+0x3c6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2102      	movs	r1, #2
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff f907 	bl	8001516 <LL_ADC_GetOffsetChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800231a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800231e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002322:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e004      	b.n	8002338 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800232e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x3de>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0e9b      	lsrs	r3, r3, #26
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	e018      	b.n	8002384 <HAL_ADC_ConfigChannel+0x410>
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800235e:	fa93 f3a3 	rbit	r3, r3
 8002362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002366:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800236a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800236e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6818      	ldr	r0, [r3, #0]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2300      	movs	r3, #0
 8002392:	2102      	movs	r1, #2
 8002394:	f7ff f89e 	bl	80014d4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2103      	movs	r1, #3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f8b9 	bl	8001516 <LL_ADC_GetOffsetChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x450>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2103      	movs	r1, #3
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff f8ae 	bl	8001516 <LL_ADC_GetOffsetChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	0e9b      	lsrs	r3, r3, #26
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	e01a      	b.n	80023fa <HAL_ADC_ConfigChannel+0x486>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2103      	movs	r1, #3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f8a3 	bl	8001516 <LL_ADC_GetOffsetChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 80023ea:	2320      	movs	r3, #32
 80023ec:	e004      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80023ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x49e>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0e9b      	lsrs	r3, r3, #26
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	e011      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4c2>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 800242a:	2320      	movs	r3, #32
 800242c:	e003      	b.n	8002436 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 800242e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002430:	fab3 f383 	clz	r3, r3
 8002434:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002436:	429a      	cmp	r2, r3
 8002438:	d107      	bne.n	800244a <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	2103      	movs	r1, #3
 8002446:	f7ff f845 	bl	80014d4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fa8c 	bl	800196c <LL_ADC_IsEnabled>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 8456 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	461a      	mov	r2, r3
 800246a:	f7ff fa0d 	bl	8001888 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002476:	f040 80d6 	bne.w	8002626 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_ADC_ConfigChannel+0x52a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b09      	cmp	r3, #9
 8002494:	bf94      	ite	ls
 8002496:	2301      	movls	r3, #1
 8002498:	2300      	movhi	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e019      	b.n	80024d2 <HAL_ADC_ConfigChannel+0x55e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80024ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ae:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80024b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 80024b6:	2320      	movs	r3, #32
 80024b8:	e003      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 80024ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	bf94      	ite	ls
 80024cc:	2301      	movls	r3, #1
 80024ce:	2300      	movhi	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d04d      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x5fe>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d107      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x57e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	0e9b      	lsrs	r3, r3, #26
 80024e8:	3301      	adds	r3, #1
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f0:	e015      	b.n	800251e <HAL_ADC_ConfigChannel+0x5aa>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002502:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 800250e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	3301      	adds	r3, #1
 8002518:	069b      	lsls	r3, r3, #26
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <HAL_ADC_ConfigChannel+0x5ca>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0e9b      	lsrs	r3, r3, #26
 8002530:	3301      	adds	r3, #1
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	e017      	b.n	800256e <HAL_ADC_ConfigChannel+0x5fa>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800254c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2101      	movs	r1, #1
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	4313      	orrs	r3, r2
 8002570:	e04e      	b.n	8002610 <HAL_ADC_ConfigChannel+0x69c>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_ADC_ConfigChannel+0x61a>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	0e9b      	lsrs	r3, r3, #26
 8002584:	3301      	adds	r3, #1
 8002586:	069b      	lsls	r3, r3, #26
 8002588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258c:	e015      	b.n	80025ba <HAL_ADC_ConfigChannel+0x646>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800259c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80025aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	069b      	lsls	r3, r3, #26
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_ConfigChannel+0x666>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	0e9b      	lsrs	r3, r3, #26
 80025cc:	3301      	adds	r3, #1
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2101      	movs	r1, #1
 80025d4:	fa01 f303 	lsl.w	r3, r1, r3
 80025d8:	e017      	b.n	800260a <HAL_ADC_ConfigChannel+0x696>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80025f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	4313      	orrs	r3, r2
 800260c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6818      	ldr	r0, [r3, #0]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	461a      	mov	r2, r3
 800261e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002622:	f7ff f8cd 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f280 836c 	bge.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a97      	ldr	r2, [pc, #604]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x6ca>
 800263a:	4b97      	ldr	r3, [pc, #604]	; (8002898 <HAL_ADC_ConfigChannel+0x924>)
 800263c:	e000      	b.n	8002640 <HAL_ADC_ConfigChannel+0x6cc>
 800263e:	4b97      	ldr	r3, [pc, #604]	; (800289c <HAL_ADC_ConfigChannel+0x928>)
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe ff19 	bl	8001478 <LL_ADC_GetCommonPathInternalCh>
 8002646:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a91      	ldr	r2, [pc, #580]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d109      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x6f4>
 8002654:	488f      	ldr	r0, [pc, #572]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 8002656:	f7ff f989 	bl	800196c <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e008      	b.n	800267a <HAL_ADC_ConfigChannel+0x706>
 8002668:	488d      	ldr	r0, [pc, #564]	; (80028a0 <HAL_ADC_ConfigChannel+0x92c>)
 800266a:	f7ff f97f 	bl	800196c <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8088 	beq.w	8002790 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a87      	ldr	r2, [pc, #540]	; (80028a4 <HAL_ADC_ConfigChannel+0x930>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d132      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800268a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800268e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d12c      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a7e      	ldr	r2, [pc, #504]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d005      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x738>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <HAL_ADC_ConfigChannel+0x92c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	f040 832b 	bne.w	8002d02 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a78      	ldr	r2, [pc, #480]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x746>
 80026b6:	4a78      	ldr	r2, [pc, #480]	; (8002898 <HAL_ADC_ConfigChannel+0x924>)
 80026b8:	e000      	b.n	80026bc <HAL_ADC_ConfigChannel+0x748>
 80026ba:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_ADC_ConfigChannel+0x928>)
 80026bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f7fe fec3 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026cc:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_ADC_ConfigChannel+0x934>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	4a76      	ldr	r2, [pc, #472]	; (80028ac <HAL_ADC_ConfigChannel+0x938>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	3301      	adds	r3, #1
 80026dc:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80026de:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ee:	e308      	b.n	8002d02 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a6e      	ldr	r2, [pc, #440]	; (80028b0 <HAL_ADC_ConfigChannel+0x93c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d121      	bne.n	800273e <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11b      	bne.n	800273e <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a62      	ldr	r2, [pc, #392]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d005      	beq.n	800271c <HAL_ADC_ConfigChannel+0x7a8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a62      	ldr	r2, [pc, #392]	; (80028a0 <HAL_ADC_ConfigChannel+0x92c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f040 82f5 	bne.w	8002d06 <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a5c      	ldr	r2, [pc, #368]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x7b6>
 8002726:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <HAL_ADC_ConfigChannel+0x924>)
 8002728:	e000      	b.n	800272c <HAL_ADC_ConfigChannel+0x7b8>
 800272a:	4a5c      	ldr	r2, [pc, #368]	; (800289c <HAL_ADC_ConfigChannel+0x928>)
 800272c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7fe fe8b 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800273c:	e2e3      	b.n	8002d06 <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_ADC_ConfigChannel+0x940>)
 8002744:	4293      	cmp	r3, r2
 8002746:	f040 82df 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 82d8 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d005      	beq.n	800276e <HAL_ADC_ConfigChannel+0x7fa>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4e      	ldr	r2, [pc, #312]	; (80028a0 <HAL_ADC_ConfigChannel+0x92c>)
 8002768:	4293      	cmp	r3, r2
 800276a:	f040 82cd 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a48      	ldr	r2, [pc, #288]	; (8002894 <HAL_ADC_ConfigChannel+0x920>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <HAL_ADC_ConfigChannel+0x808>
 8002778:	4a47      	ldr	r2, [pc, #284]	; (8002898 <HAL_ADC_ConfigChannel+0x924>)
 800277a:	e000      	b.n	800277e <HAL_ADC_ConfigChannel+0x80a>
 800277c:	4a47      	ldr	r2, [pc, #284]	; (800289c <HAL_ADC_ConfigChannel+0x928>)
 800277e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002786:	4619      	mov	r1, r3
 8002788:	4610      	mov	r0, r2
 800278a:	f7fe fe62 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 800278e:	e2bb      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80027a2:	e2b1      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 80027ac:	f7fe fde4 	bl	8001378 <HAL_GetREVID>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b6:	d130      	bne.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a3e      	ldr	r2, [pc, #248]	; (80028b8 <HAL_ADC_ConfigChannel+0x944>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d103      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_ADC_ConfigChannel+0x948>)
 80027c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027c8:	e027      	b.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_ADC_ConfigChannel+0x94c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d103      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <HAL_ADC_ConfigChannel+0x950>)
 80027d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027da:	e01e      	b.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_ADC_ConfigChannel+0x954>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d103      	bne.n	80027ee <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_ADC_ConfigChannel+0x958>)
 80027e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027ec:	e015      	b.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <HAL_ADC_ConfigChannel+0x95c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d103      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_ADC_ConfigChannel+0x960>)
 80027fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027fe:	e00c      	b.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_ADC_ConfigChannel+0x964>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d103      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_ADC_ConfigChannel+0x95c>)
 800280c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002810:	e003      	b.n	800281a <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	f000 81a2 	beq.w	8002b68 <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800282c:	d004      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_ADC_ConfigChannel+0x968>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d107      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff71 	bl	8001728 <LL_ADC_REG_SetSequencerChAdd>
 8002846:	e0c1      	b.n	80029cc <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	210f      	movs	r1, #15
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002864:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x904>
 800286c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e037      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x974>
 8002878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d127      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8002890:	2320      	movs	r3, #32
 8002892:	e029      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x974>
 8002894:	42028000 	.word	0x42028000
 8002898:	42028308 	.word	0x42028308
 800289c:	46021308 	.word	0x46021308
 80028a0:	46021000 	.word	0x46021000
 80028a4:	ce080000 	.word	0xce080000
 80028a8:	20000000 	.word	0x20000000
 80028ac:	053e2d63 	.word	0x053e2d63
 80028b0:	ca040000 	.word	0xca040000
 80028b4:	80000001 	.word	0x80000001
 80028b8:	b6002000 	.word	0xb6002000
 80028bc:	da400000 	.word	0xda400000
 80028c0:	ba004000 	.word	0xba004000
 80028c4:	de800000 	.word	0xde800000
 80028c8:	b2001000 	.word	0xb2001000
 80028cc:	81000001 	.word	0x81000001
 80028d0:	d6200000 	.word	0xd6200000
 80028d4:	d2100000 	.word	0xd2100000
 80028d8:	d7200000 	.word	0xd7200000
 80028dc:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	6839      	ldr	r1, [r7, #0]
 80028ea:	6849      	ldr	r1, [r1, #4]
 80028ec:	f001 011f 	and.w	r1, r1, #31
 80028f0:	408b      	lsls	r3, r1
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	089b      	lsrs	r3, r3, #2
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	429a      	cmp	r2, r3
 8002908:	d860      	bhi.n	80029cc <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800290a:	f7fe fd35 	bl	8001378 <HAL_GetREVID>
 800290e:	4603      	mov	r3, r0
 8002910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002914:	d851      	bhi.n	80029ba <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800291a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x9c4>
 8002922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002926:	0e9b      	lsrs	r3, r3, #26
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2b13      	cmp	r3, #19
 800292e:	bf8c      	ite	hi
 8002930:	2301      	movhi	r3, #1
 8002932:	2300      	movls	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e016      	b.n	8002966 <HAL_ADC_ConfigChannel+0x9f2>
 8002938:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800293c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	61bb      	str	r3, [r7, #24]
  return result;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b13      	cmp	r3, #19
 800295e:	bf8c      	ite	hi
 8002960:	2301      	movhi	r3, #1
 8002962:	2300      	movls	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d027      	beq.n	80029ba <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 800296a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800296e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_ADC_ConfigChannel+0xa16>
 8002976:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	3b09      	subs	r3, #9
 8002982:	2201      	movs	r2, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	e015      	b.n	80029b6 <HAL_ADC_ConfigChannel+0xa42>
 800298a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800298e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	60fb      	str	r3, [r7, #12]
  return result;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e003      	b.n	80029ae <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b09      	subs	r3, #9
 80029b0:	2201      	movs	r2, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe fe4e 	bl	8001668 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80029da:	f7fe fef1 	bl	80017c0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f280 8190 	bge.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a97      	ldr	r2, [pc, #604]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0xa82>
 80029f2:	4b97      	ldr	r3, [pc, #604]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0xa84>
 80029f6:	4b97      	ldr	r3, [pc, #604]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fe fd3d 	bl	8001478 <LL_ADC_GetCommonPathInternalCh>
 80029fe:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a94      	ldr	r2, [pc, #592]	; (8002c58 <HAL_ADC_ConfigChannel+0xce4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d126      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d120      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a8b      	ldr	r2, [pc, #556]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0xab2>
 8002a22:	4a8b      	ldr	r2, [pc, #556]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002a24:	e000      	b.n	8002a28 <HAL_ADC_ConfigChannel+0xab4>
 8002a26:	4a8b      	ldr	r2, [pc, #556]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f7fe fd0d 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a38:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_ADC_ConfigChannel+0xce8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	4a88      	ldr	r2, [pc, #544]	; (8002c60 <HAL_ADC_ConfigChannel+0xcec>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002a4a:	e002      	b.n	8002a52 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002a58:	e067      	b.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a81      	ldr	r2, [pc, #516]	; (8002c64 <HAL_ADC_ConfigChannel+0xcf0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d116      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d110      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a75      	ldr	r2, [pc, #468]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0xb0a>
 8002a7a:	4a75      	ldr	r2, [pc, #468]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_ConfigChannel+0xb0c>
 8002a7e:	4a75      	ldr	r2, [pc, #468]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f7fe fce1 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 8002a90:	e04b      	b.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a74      	ldr	r2, [pc, #464]	; (8002c68 <HAL_ADC_ConfigChannel+0xcf4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d116      	bne.n	8002aca <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d110      	bne.n	8002aca <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a67      	ldr	r2, [pc, #412]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0xb42>
 8002ab2:	4a67      	ldr	r2, [pc, #412]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0xb44>
 8002ab6:	4a67      	ldr	r2, [pc, #412]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f7fe fcc5 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 8002ac8:	e02f      	b.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a67      	ldr	r2, [pc, #412]	; (8002c6c <HAL_ADC_ConfigChannel+0xcf8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d12a      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d124      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a62      	ldr	r2, [pc, #392]	; (8002c70 <HAL_ADC_ConfigChannel+0xcfc>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11f      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a57      	ldr	r2, [pc, #348]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0xb84>
 8002af4:	4a56      	ldr	r2, [pc, #344]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002af6:	e000      	b.n	8002afa <HAL_ADC_ConfigChannel+0xb86>
 8002af8:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b02:	4619      	mov	r1, r3
 8002b04:	4610      	mov	r0, r2
 8002b06:	f7fe fca4 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002b0a:	f7fe fc35 	bl	8001378 <HAL_GetREVID>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d809      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002b2a:	f7fe fc25 	bl	8001378 <HAL_GetREVID>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b34:	f040 80e8 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_ADC_ConfigChannel+0xd00>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	f040 80e2 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 80db 	bne.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002b66:	e0cf      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b76:	4a40      	ldr	r2, [pc, #256]	; (8002c78 <HAL_ADC_ConfigChannel+0xd04>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe fe02 	bl	800178e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f280 80ba 	bge.w	8002d08 <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0xc2e>
 8002b9e:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002ba0:	e000      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0xc30>
 8002ba2:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fc67 	bl	8001478 <LL_ADC_GetCommonPathInternalCh>
 8002baa:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <HAL_ADC_ConfigChannel+0xd08>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d110      	bne.n	8002bda <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0xc52>
 8002bc2:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002bc4:	e000      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0xc54>
 8002bc6:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	f7fe fc3d 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 8002bd8:	e06d      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a28      	ldr	r2, [pc, #160]	; (8002c80 <HAL_ADC_ConfigChannel+0xd0c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d110      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0xc7e>
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0xc80>
 8002bf2:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe fc27 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 8002c04:	e057      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_ADC_ConfigChannel+0xcf4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d110      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0xcaa>
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002c1c:	e000      	b.n	8002c20 <HAL_ADC_ConfigChannel+0xcac>
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_ADC_ConfigChannel+0xce0>)
 8002c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f7fe fc11 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
 8002c30:	e041      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <HAL_ADC_ConfigChannel+0xcf8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d13c      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a02      	ldr	r2, [pc, #8]	; (8002c4c <HAL_ADC_ConfigChannel+0xcd8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d11e      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0xd10>
 8002c46:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_ADC_ConfigChannel+0xcdc>)
 8002c48:	e01d      	b.n	8002c86 <HAL_ADC_ConfigChannel+0xd12>
 8002c4a:	bf00      	nop
 8002c4c:	42028000 	.word	0x42028000
 8002c50:	42028308 	.word	0x42028308
 8002c54:	46021308 	.word	0x46021308
 8002c58:	b6002000 	.word	0xb6002000
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	053e2d63 	.word	0x053e2d63
 8002c64:	ba004000 	.word	0xba004000
 8002c68:	80000001 	.word	0x80000001
 8002c6c:	b2001000 	.word	0xb2001000
 8002c70:	46021000 	.word	0x46021000
 8002c74:	d7200000 	.word	0xd7200000
 8002c78:	80000010 	.word	0x80000010
 8002c7c:	ce080000 	.word	0xce080000
 8002c80:	ca040000 	.word	0xca040000
 8002c84:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <HAL_ADC_ConfigChannel+0xda8>)
 8002c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c8a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7fe fbde 	bl	8001452 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002c96:	f7fe fb6f 	bl	8001378 <HAL_GetREVID>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d809      	bhi.n	8002cb6 <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002cb6:	f7fe fb5f 	bl	8001378 <HAL_GetREVID>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d122      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_ADC_ConfigChannel+0xdac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d11d      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d117      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f042 0201 	orr.w	r2, r2, #1
 8002ce8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002cec:	e00c      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cf2:	f043 0220 	orr.w	r2, r3, #32
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d06:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002d10:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	37f0      	adds	r7, #240	; 0xf0
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	46021308 	.word	0x46021308
 8002d20:	d7200000 	.word	0xd7200000

08002d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d40:	4013      	ands	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <__NVIC_SetPriorityGrouping+0x44>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	60d3      	str	r3, [r2, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d70:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <__NVIC_GetPriorityGrouping+0x18>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	f003 0307 	and.w	r3, r3, #7
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	e000ed00 	.word	0xe000ed00

08002d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	db0b      	blt.n	8002db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <__NVIC_EnableIRQ+0x38>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	2001      	movs	r0, #1
 8002daa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	e000e100 	.word	0xe000e100

08002dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	6039      	str	r1, [r7, #0]
 8002dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	db0a      	blt.n	8002dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	490c      	ldr	r1, [pc, #48]	; (8002e10 <__NVIC_SetPriority+0x4c>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	0112      	lsls	r2, r2, #4
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	440b      	add	r3, r1
 8002de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dec:	e00a      	b.n	8002e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4908      	ldr	r1, [pc, #32]	; (8002e14 <__NVIC_SetPriority+0x50>)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3b04      	subs	r3, #4
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	440b      	add	r3, r1
 8002e02:	761a      	strb	r2, [r3, #24]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	; 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f1c3 0307 	rsb	r3, r3, #7
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	bf28      	it	cs
 8002e36:	2304      	movcs	r3, #4
 8002e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	2b06      	cmp	r3, #6
 8002e40:	d902      	bls.n	8002e48 <NVIC_EncodePriority+0x30>
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3b03      	subs	r3, #3
 8002e46:	e000      	b.n	8002e4a <NVIC_EncodePriority+0x32>
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e60:	f04f 31ff 	mov.w	r1, #4294967295
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43d9      	mvns	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	4313      	orrs	r3, r2
         );
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff4c 	bl	8002d24 <__NVIC_SetPriorityGrouping>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea2:	f7ff ff63 	bl	8002d6c <__NVIC_GetPriorityGrouping>
 8002ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	6978      	ldr	r0, [r7, #20]
 8002eae:	f7ff ffb3 	bl	8002e18 <NVIC_EncodePriority>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff ff82 	bl	8002dc4 <__NVIC_SetPriority>
}
 8002ec0:	bf00      	nop
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff ff56 	bl	8002d88 <__NVIC_EnableIRQ>
}
 8002edc:	bf00      	nop
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DCACHE_Init>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHE.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_DCACHE_Init(DCACHE_HandleTypeDef *hdcache)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the DCACHE handle allocation */
  if (hdcache == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DCACHE_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e037      	b.n	8002f66 <HAL_DCACHE_Init+0x82>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));
  assert_param(IS_DCACHE_READ_BURST_TYPE(hdcache->Init.ReadBurstType));

  if (hdcache->State == HAL_DCACHE_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d119      	bne.n	8002f36 <HAL_DCACHE_Init+0x52>
  {
    /* Init the DCACHE Callback settings with legacy weak */
    hdcache->ErrorCallback                      = HAL_DCACHE_ErrorCallback;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <HAL_DCACHE_Init+0x8c>)
 8002f06:	609a      	str	r2, [r3, #8]
    hdcache->CleanByAddrCallback                = HAL_DCACHE_CleanByAddrCallback;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_DCACHE_Init+0x90>)
 8002f0c:	60da      	str	r2, [r3, #12]
    hdcache->InvalidateByAddrCallback           = HAL_DCACHE_InvalidateByAddrCallback;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_DCACHE_Init+0x94>)
 8002f12:	611a      	str	r2, [r3, #16]
    hdcache->InvalidateCompleteCallback         = HAL_DCACHE_InvalidateCompleteCallback;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <HAL_DCACHE_Init+0x98>)
 8002f18:	615a      	str	r2, [r3, #20]
    hdcache->CleanAndInvalidateByAddrCallback   = HAL_DCACHE_CleanAndInvalidateByAddrCallback;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_DCACHE_Init+0x9c>)
 8002f1e:	619a      	str	r2, [r3, #24]

    if (hdcache->MspInitCallback == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <HAL_DCACHE_Init+0x4a>
    {
      hdcache->MspInitCallback = HAL_DCACHE_MspInit;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <HAL_DCACHE_Init+0xa0>)
 8002f2c:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hdcache->MspInitCallback(hdcache);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
  }

  /* Init the error code */
  hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Init the DCACHE handle state */
  hdcache->State = HAL_DCACHE_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set requested read burst type */
  MODIFY_REG(hdcache->Instance->CR, DCACHE_CR_HBURST, hdcache->Init.ReadBurstType);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Enable the selected DCACHE peripheral */
  status = HAL_DCACHE_Enable(hdcache);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f814 	bl	8002f88 <HAL_DCACHE_Enable>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	08003027 	.word	0x08003027
 8002f74:	08002fd7 	.word	0x08002fd7
 8002f78:	08002feb 	.word	0x08002feb
 8002f7c:	08003013 	.word	0x08003013
 8002f80:	08002fff 	.word	0x08002fff
 8002f84:	08000db1 	.word	0x08000db1

08002f88 <HAL_DCACHE_Enable>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCACHE_Enable(DCACHE_HandleTypeDef *hdcache)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]

  /* Check the dcache handle allocation */
  if (hdcache == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_DCACHE_Enable+0x16>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e015      	b.n	8002fca <HAL_DCACHE_Enable+0x42>

  /* Check the parameters */
  assert_param(IS_DCACHE_ALL_INSTANCE(hdcache->Instance));

  /* Check no ongoing operation */
  if (READ_BIT(hdcache->Instance->SR, (DCACHE_SR_BUSYF | DCACHE_SR_BUSYCMDF)) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0309 	and.w	r3, r3, #9
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_DCACHE_Enable+0x2a>
  {
    /* Return busy status */
    status =  HAL_BUSY;
 8002fac:	2302      	movs	r3, #2
 8002fae:	73fb      	strb	r3, [r7, #15]
 8002fb0:	e00a      	b.n	8002fc8 <HAL_DCACHE_Enable+0x40>
  }
  else
  {
    /* Update the error code */
    hdcache->ErrorCode = HAL_DCACHE_ERROR_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Enable the selected DCACHE peripheral */
    SET_BIT(hdcache->Instance->CR, DCACHE_CR_EN);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0201 	orr.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_DCACHE_CleanByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanByAddrCallback() should be implemented in the user file
   */
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <HAL_DCACHE_InvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateByAddrCallback() should be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <HAL_DCACHE_CleanAndInvalidateByAddrCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_CleanAndInvalidateByAddrCallback(DCACHE_HandleTypeDef *hdcache)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_CleanAndInvalidateByAddrCallback() should be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <HAL_DCACHE_InvalidateCompleteCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_InvalidateCompleteCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_DCACHE_ErrorCallback>:
  * @param  hdcache Pointer to a DCACHE_HandleTypeDef structure that contains
  *                 the configuration information for the specified DCACHEx peripheral.
  * @retval None
  */
__weak void HAL_DCACHE_ErrorCallback(DCACHE_HandleTypeDef *hdcache)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  UNUSED(hdcache);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DCACHE_ErrorCallback() should be implemented in the user file
   */
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e142      	b.n	80032d4 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d106      	bne.n	8003068 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fd fec6 	bl	8000df4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003078:	f7fe f94e 	bl	8001318 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800307e:	e012      	b.n	80030a6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003080:	f7fe f94a 	bl	8001318 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b0a      	cmp	r3, #10
 800308c:	d90b      	bls.n	80030a6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	f043 0201 	orr.w	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2203      	movs	r2, #3
 800309e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e116      	b.n	80032d4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d0e5      	beq.n	8003080 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030c4:	f7fe f928 	bl	8001318 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030ca:	e012      	b.n	80030f2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030cc:	f7fe f924 	bl	8001318 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	d90b      	bls.n	80030f2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2203      	movs	r2, #3
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0f0      	b.n	80032d4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0e5      	beq.n	80030cc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0202 	orr.w	r2, r2, #2
 800310e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003110:	4a72      	ldr	r2, [pc, #456]	; (80032dc <HAL_FDCAN_Init+0x2a0>)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	7c1b      	ldrb	r3, [r3, #16]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d108      	bne.n	8003132 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312e:	619a      	str	r2, [r3, #24]
 8003130:	e007      	b.n	8003142 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003140:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7c5b      	ldrb	r3, [r3, #17]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d108      	bne.n	800315c <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e007      	b.n	800316c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800316a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7c9b      	ldrb	r3, [r3, #18]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003182:	619a      	str	r2, [r3, #24]
 8003184:	e007      	b.n	8003196 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003194:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80031ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691a      	ldr	r2, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0210 	bic.w	r2, r2, #16
 80031ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0204 	orr.w	r2, r2, #4
 80031e2:	619a      	str	r2, [r3, #24]
 80031e4:	e02c      	b.n	8003240 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d028      	beq.n	8003240 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d01c      	beq.n	8003230 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699a      	ldr	r2, [r3, #24]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003204:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f042 0210 	orr.w	r2, r2, #16
 8003214:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d110      	bne.n	8003240 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	699a      	ldr	r2, [r3, #24]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0220 	orr.w	r2, r2, #32
 800322c:	619a      	str	r2, [r3, #24]
 800322e:	e007      	b.n	8003240 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0220 	orr.w	r2, r2, #32
 800323e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	3b01      	subs	r3, #1
 8003246:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	3b01      	subs	r3, #1
 800324e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003250:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003258:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	3b01      	subs	r3, #1
 8003262:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003268:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800326a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003274:	d115      	bne.n	80032a2 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003280:	3b01      	subs	r3, #1
 8003282:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003284:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	3b01      	subs	r3, #1
 800328c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800328e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	3b01      	subs	r3, #1
 8003298:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800329e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032a0:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f811 	bl	80032e0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	4000a500 	.word	0x4000a500

080032e0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	041a      	lsls	r2, r3, #16
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003320:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	061a      	lsls	r2, r3, #24
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e005      	b.n	800336e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3304      	adds	r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	d3f3      	bcc.n	8003362 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	4000ac00 	.word	0x4000ac00

0800338c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800338c:	b480      	push	{r7}
 800338e:	b089      	sub	sp, #36	; 0x24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800339e:	e1ba      	b.n	8003716 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	2101      	movs	r1, #1
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 81aa 	beq.w	8003710 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_GPIO_Init+0x188>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d15d      	bne.n	8003480 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80033ca:	2201      	movs	r2, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0201 	and.w	r2, r3, #1
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80033f4:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_GPIO_Init+0x18c>)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033fc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80033fe:	4a46      	ldr	r2, [pc, #280]	; (8003518 <HAL_GPIO_Init+0x18c>)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	3208      	adds	r2, #8
 8003412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003416:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	4013      	ands	r3, r2
 800342c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220b      	movs	r2, #11
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	4313      	orrs	r3, r2
 8003440:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	08da      	lsrs	r2, r3, #3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3208      	adds	r2, #8
 800344a:	69f9      	ldr	r1, [r7, #28]
 800344c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	2203      	movs	r2, #3
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	43db      	mvns	r3, r3
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	4013      	ands	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2202      	movs	r2, #2
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	4313      	orrs	r3, r2
 8003476:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e067      	b.n	8003550 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d003      	beq.n	8003490 <HAL_GPIO_Init+0x104>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b12      	cmp	r3, #18
 800348e:	d145      	bne.n	800351c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	4313      	orrs	r3, r2
 8003508:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e01e      	b.n	8003550 <HAL_GPIO_Init+0x1c4>
 8003512:	bf00      	nop
 8003514:	46020000 	.word	0x46020000
 8003518:	08008564 	.word	0x08008564
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	4013      	ands	r3, r2
 8003532:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 0203 	and.w	r2, r3, #3
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	4313      	orrs	r3, r2
 8003548:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d00b      	beq.n	8003570 <HAL_GPIO_Init+0x1e4>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d007      	beq.n	8003570 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003564:	2b11      	cmp	r3, #17
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b12      	cmp	r3, #18
 800356e:	d130      	bne.n	80035d2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	4013      	ands	r3, r2
 8003586:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	4313      	orrs	r3, r2
 8003598:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80035a6:	2201      	movs	r2, #1
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 0201 	and.w	r2, r3, #1
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	69fa      	ldr	r2, [r7, #28]
 80035d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b03      	cmp	r3, #3
 80035d8:	d017      	beq.n	800360a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	2203      	movs	r2, #3
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	4313      	orrs	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	69fa      	ldr	r2, [r7, #28]
 8003608:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d07c      	beq.n	8003710 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003616:	4a47      	ldr	r2, [pc, #284]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	089b      	lsrs	r3, r3, #2
 800361c:	3318      	adds	r3, #24
 800361e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003622:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	220f      	movs	r2, #15
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	4013      	ands	r3, r2
 8003638:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0a9a      	lsrs	r2, r3, #10
 800363e:	4b3e      	ldr	r3, [pc, #248]	; (8003738 <HAL_GPIO_Init+0x3ac>)
 8003640:	4013      	ands	r3, r2
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	00d2      	lsls	r2, r2, #3
 800364a:	4093      	lsls	r3, r2
 800364c:	69fa      	ldr	r2, [r7, #28]
 800364e:	4313      	orrs	r3, r2
 8003650:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003652:	4938      	ldr	r1, [pc, #224]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3318      	adds	r3, #24
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	4013      	ands	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003684:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800368a:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	4013      	ands	r3, r2
 8003698:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80036b4:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 80036b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80036da:	4a16      	ldr	r2, [pc, #88]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 80036e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	4013      	ands	r3, r2
 80036f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4313      	orrs	r3, r2
 8003706:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003708:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <HAL_GPIO_Init+0x3a8>)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3301      	adds	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	f47f ae3d 	bne.w	80033a0 <HAL_GPIO_Init+0x14>
  }
}
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	3724      	adds	r7, #36	; 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	46022000 	.word	0x46022000
 8003738:	002f7f7f 	.word	0x002f7f7f

0800373c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e081      	b.n	8003852 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fbb0 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2224      	movs	r2, #36	; 0x24
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	e006      	b.n	80037c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d104      	bne.n	80037d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68da      	ldr	r2, [r3, #12]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691a      	ldr	r2, [r3, #16]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69d9      	ldr	r1, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	d138      	bne.n	80038e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800387a:	2302      	movs	r3, #2
 800387c:	e032      	b.n	80038e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038e2:	2302      	movs	r3, #2
  }
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b20      	cmp	r3, #32
 8003904:	d139      	bne.n	800397a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003910:	2302      	movs	r3, #2
 8003912:	e033      	b.n	800397c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003942:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_I2CEx_ConfigFastModePlus>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  FastModePlus New state of the Fast Mode Plus.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigFastModePlus(I2C_HandleTypeDef *hi2c, uint32_t FastModePlus)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_FASTMODEPLUS(FastModePlus));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b20      	cmp	r3, #32
 800399c:	d13c      	bne.n	8003a18 <HAL_I2CEx_ConfigFastModePlus+0x90>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_I2CEx_ConfigFastModePlus+0x24>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e036      	b.n	8003a1a <HAL_I2CEx_ConfigFastModePlus+0x92>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	; 0x24
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]

    if (FastModePlus == I2C_FASTMODEPLUS_ENABLE)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d108      	bne.n	80039e4 <HAL_I2CEx_ConfigFastModePlus+0x5c>
    {
      /* Set I2Cx FMP bit */
      hi2c->Instance->CR1 |= (I2C_CR1_FMP);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_I2CEx_ConfigFastModePlus+0x6c>
    }
    else
    {
      /* Reset I2Cx FMP bit */
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80039f2:	601a      	str	r2, [r3, #0]
    }

    __HAL_I2C_ENABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_I2CEx_ConfigFastModePlus+0x92>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e007      	b.n	8003a56 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0204 	bic.w	r2, r3, #4
 8003a4e:	4905      	ldr	r1, [pc, #20]	; (8003a64 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	40030400 	.word	0x40030400

08003a68 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <HAL_ICACHE_Enable+0x1c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a04      	ldr	r2, [pc, #16]	; (8003a84 <HAL_ICACHE_Enable+0x1c>)
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40030400 	.word	0x40030400

08003a88 <HAL_ICACHE_Disable>:
  * @note   This function waits for the cache being disabled but
  *         not for the end of the automatic cache invalidation procedure.
  * @retval HAL status (HAL_OK/HAL_TIMEOUT)
  */
HAL_StatusTypeDef HAL_ICACHE_Disable(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Make sure BSYENDF is reset before to disable the instruction cache */
  /* as it automatically starts a cache invalidation procedure */
  WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <HAL_ICACHE_Disable+0x5c>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	60da      	str	r2, [r3, #12]

  CLEAR_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_ICACHE_Disable+0x5c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <HAL_ICACHE_Disable+0x5c>)
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aa4:	f7fd fc38 	bl	8001318 <HAL_GetTick>
 8003aa8:	6038      	str	r0, [r7, #0]

  /* Wait for instruction cache being disabled */
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003aaa:	e00f      	b.n	8003acc <HAL_ICACHE_Disable+0x44>
  {
    if ((HAL_GetTick() - tickstart) > ICACHE_DISABLE_TIMEOUT_VALUE)
 8003aac:	f7fd fc34 	bl	8001318 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d908      	bls.n	8003acc <HAL_ICACHE_Disable+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_ICACHE_Disable+0x5c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_ICACHE_Disable+0x44>
      {
        status = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	71fb      	strb	r3, [r7, #7]
        break;
 8003aca:	e005      	b.n	8003ad8 <HAL_ICACHE_Disable+0x50>
  while (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003acc:	4b05      	ldr	r3, [pc, #20]	; (8003ae4 <HAL_ICACHE_Disable+0x5c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e9      	bne.n	8003aac <HAL_ICACHE_Disable+0x24>
      }
    }
  }

  return status;
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40030400 	.word	0x40030400

08003ae8 <HAL_ICACHE_EnableRemapRegion>:
                     This parameter can be a value of @arg @ref ICACHE_Region
  * @param  pRegionConfig  Pointer to structure of ICACHE region configuration parameters
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef  HAL_ICACHE_EnableRemapRegion(uint32_t Region, const ICACHE_RegionConfigTypeDef *const pRegionConfig)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ICACHE_REGION_SIZE(pRegionConfig->Size));
  assert_param(IS_ICACHE_REGION_TRAFFIC_ROUTE(pRegionConfig->TrafficRoute));
  assert_param(IS_ICACHE_REGION_OUTPUT_BURST_TYPE(pRegionConfig->OutputBurstType));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003af6:	4b22      	ldr	r3, [pc, #136]	; (8003b80 <HAL_ICACHE_EnableRemapRegion+0x98>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <HAL_ICACHE_EnableRemapRegion+0x20>
  {
    status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	75fb      	strb	r3, [r7, #23]
 8003b06:	e034      	b.n	8003b72 <HAL_ICACHE_EnableRemapRegion+0x8a>
  }
  else
  {
    /* Get region control register address */
    p_reg = &(ICACHE->CRR0) + (1U * Region);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_ICACHE_EnableRemapRegion+0x9c>)
 8003b0e:	4413      	add	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]

    /* Check region is not already enabled */
    if ((*p_reg & ICACHE_CRRx_REN) != 0U)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <HAL_ICACHE_EnableRemapRegion+0x3c>
    {
      status = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	75fb      	strb	r3, [r7, #23]
 8003b22:	e026      	b.n	8003b72 <HAL_ICACHE_EnableRemapRegion+0x8a>
      /* Region 8MB:   BaseAddress size 6 bits, RemapAddress size 9 bits  */
      /* Region 16MB:  BaseAddress size 5 bits, RemapAddress size 8 bits  */
      /* Region 32MB:  BaseAddress size 4 bits, RemapAddress size 7 bits  */
      /* Region 64MB:  BaseAddress size 3 bits, RemapAddress size 6 bits  */
      /* Region 128MB: BaseAddress size 2 bits, RemapAddress size 5 bits  */
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0d5a      	lsrs	r2, r3, #21
               (0xFFU & ~(pRegionConfig->Size - 1U));
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	425b      	negs	r3, r3
      value  = ((pRegionConfig->BaseAddress & 0x1FFFFFFFU) >> 21U) & \
 8003b30:	4013      	ands	r3, r2
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	60fb      	str	r3, [r7, #12]
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	095a      	lsrs	r2, r3, #5
                ((uint32_t)(0x7FFU & ~(pRegionConfig->Size - 1U)) << ICACHE_CRRx_REMAPADDR_Pos));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	425b      	negs	r3, r3
 8003b42:	041b      	lsls	r3, r3, #16
      value |= ((pRegionConfig->RemapAddress >> 5U) & \
 8003b44:	401a      	ands	r2, r3
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <HAL_ICACHE_EnableRemapRegion+0xa0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	025a      	lsls	r2, r3, #9
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	431a      	orrs	r2, r3
               pRegionConfig->OutputBurstType;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691b      	ldr	r3, [r3, #16]
      value |= (pRegionConfig->Size << ICACHE_CRRx_RSIZE_Pos) | pRegionConfig->TrafficRoute | \
 8003b60:	4313      	orrs	r3, r2
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
      *p_reg = (value | ICACHE_CRRx_REN);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	601a      	str	r2, [r3, #0]
    }
  }

  return status;
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	371c      	adds	r7, #28
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	40030400 	.word	0x40030400
 8003b84:	40030420 	.word	0x40030420
 8003b88:	07ff0000 	.word	0x07ff0000

08003b8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	b08f      	sub	sp, #60	; 0x3c
 8003b90:	af0a      	add	r7, sp, #40	; 0x28
 8003b92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e116      	b.n	8003dcc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d106      	bne.n	8003bbe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7fd f9ed 	bl	8000f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f003 f990 	bl	8006f02 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	687e      	ldr	r6, [r7, #4]
 8003bea:	466d      	mov	r5, sp
 8003bec:	f106 0410 	add.w	r4, r6, #16
 8003bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c00:	1d33      	adds	r3, r6, #4
 8003c02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c04:	6838      	ldr	r0, [r7, #0]
 8003c06:	f003 f950 	bl	8006eaa <USB_CoreInit>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e0d7      	b.n	8003dcc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 f97e 	bl	8006f24 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
 8003c2c:	e04a      	b.n	8003cc4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	333d      	adds	r3, #61	; 0x3d
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	333c      	adds	r3, #60	; 0x3c
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
 8003c5a:	b298      	uxth	r0, r3
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4413      	add	r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3356      	adds	r3, #86	; 0x56
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3340      	adds	r3, #64	; 0x40
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c82:	7bfa      	ldrb	r2, [r7, #15]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3344      	adds	r3, #68	; 0x44
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c96:	7bfa      	ldrb	r2, [r7, #15]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	3348      	adds	r3, #72	; 0x48
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003caa:	7bfa      	ldrb	r2, [r7, #15]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	334c      	adds	r3, #76	; 0x4c
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3af      	bcc.n	8003c2e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e044      	b.n	8003d5e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cd4:	7bfa      	ldrb	r2, [r7, #15]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	73fb      	strb	r3, [r7, #15]
 8003d5e:	7bfa      	ldrb	r2, [r7, #15]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d3b5      	bcc.n	8003cd4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	687e      	ldr	r6, [r7, #4]
 8003d70:	466d      	mov	r5, sp
 8003d72:	f106 0410 	add.w	r4, r6, #16
 8003d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d82:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d86:	1d33      	adds	r3, r6, #4
 8003d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f003 f916 	bl	8006fbc <USB_DevInit>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e014      	b.n	8003dcc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d102      	bne.n	8003dc0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 f80a 	bl	8003dd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 faba 	bl	800733e <USB_DevDisconnect>

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	f043 0303 	orr.w	r3, r3, #3
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d10b      	bne.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d905      	bls.n	8003e4a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e3e:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e057      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d90a      	bls.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	4a2a      	ldr	r2, [pc, #168]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e68:	60d3      	str	r3, [r2, #12]
 8003e6a:	e007      	b.n	8003e7c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003e74:	4925      	ldr	r1, [pc, #148]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e7c:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e82:	fba2 2303 	umull	r2, r3, r2, r3
 8003e86:	099b      	lsrs	r3, r3, #6
 8003e88:	2232      	movs	r2, #50	; 0x32
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003e90:	fba2 2303 	umull	r2, r3, r2, r3
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003e9a:	e002      	b.n	8003ea2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f3      	bne.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01b      	beq.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	099b      	lsrs	r3, r3, #6
 8003ec6:	2232      	movs	r2, #50	; 0x32
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	4a11      	ldr	r2, [pc, #68]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	099b      	lsrs	r3, r3, #6
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ed8:	e002      	b.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003ee0:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f3      	bne.n	8003eda <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e000      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	46020800 	.word	0x46020800
 8003f10:	20000000 	.word	0x20000000
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003f1c:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	46020800 	.word	0x46020800

08003f34 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	6113      	str	r3, [r2, #16]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	46020800 	.word	0x46020800

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	; 0x38
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f000 bec8 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f6e:	4b99      	ldr	r3, [pc, #612]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f78:	4b96      	ldr	r3, [pc, #600]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 816c 	beq.w	8004268 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x52>
 8003f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	f040 80de 	bne.w	800415a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 80da 	bne.w	800415a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f000 bea5 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb8:	4b86      	ldr	r3, [pc, #536]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_RCC_OscConfig+0x7a>
 8003fc4:	4b83      	ldr	r3, [pc, #524]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fcc:	e005      	b.n	8003fda <HAL_RCC_OscConfig+0x86>
 8003fce:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d255      	bcs.n	800408a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 f9f3 	bl	80053d4 <RCC_SetFlashLatencyFromMSIRange>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d002      	beq.n	8003ffa <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f000 be82 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003ffa:	4b76      	ldr	r3, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4a75      	ldr	r2, [pc, #468]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	4b73      	ldr	r3, [pc, #460]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	4970      	ldr	r1, [pc, #448]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004014:	4313      	orrs	r3, r2
 8004016:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004020:	d309      	bcc.n	8004036 <HAL_RCC_OscConfig+0xe2>
 8004022:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f023 021f 	bic.w	r2, r3, #31
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	4969      	ldr	r1, [pc, #420]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004030:	4313      	orrs	r3, r2
 8004032:	60cb      	str	r3, [r1, #12]
 8004034:	e07e      	b.n	8004134 <HAL_RCC_OscConfig+0x1e0>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	2b00      	cmp	r3, #0
 800403c:	da0a      	bge.n	8004054 <HAL_RCC_OscConfig+0x100>
 800403e:	4b65      	ldr	r3, [pc, #404]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	015b      	lsls	r3, r3, #5
 800404c:	4961      	ldr	r1, [pc, #388]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 800404e:	4313      	orrs	r3, r2
 8004050:	60cb      	str	r3, [r1, #12]
 8004052:	e06f      	b.n	8004134 <HAL_RCC_OscConfig+0x1e0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d30a      	bcc.n	8004074 <HAL_RCC_OscConfig+0x120>
 800405e:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	029b      	lsls	r3, r3, #10
 800406c:	4959      	ldr	r1, [pc, #356]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 800406e:	4313      	orrs	r3, r2
 8004070:	60cb      	str	r3, [r1, #12]
 8004072:	e05f      	b.n	8004134 <HAL_RCC_OscConfig+0x1e0>
 8004074:	4b57      	ldr	r3, [pc, #348]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	03db      	lsls	r3, r3, #15
 8004082:	4954      	ldr	r1, [pc, #336]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004084:	4313      	orrs	r3, r2
 8004086:	60cb      	str	r3, [r1, #12]
 8004088:	e054      	b.n	8004134 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800408a:	4b52      	ldr	r3, [pc, #328]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	4a51      	ldr	r2, [pc, #324]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004094:	6093      	str	r3, [r2, #8]
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	494c      	ldr	r1, [pc, #304]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80040b0:	d309      	bcc.n	80040c6 <HAL_RCC_OscConfig+0x172>
 80040b2:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f023 021f 	bic.w	r2, r3, #31
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4945      	ldr	r1, [pc, #276]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60cb      	str	r3, [r1, #12]
 80040c4:	e028      	b.n	8004118 <HAL_RCC_OscConfig+0x1c4>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da0a      	bge.n	80040e4 <HAL_RCC_OscConfig+0x190>
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	015b      	lsls	r3, r3, #5
 80040dc:	493d      	ldr	r1, [pc, #244]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	60cb      	str	r3, [r1, #12]
 80040e2:	e019      	b.n	8004118 <HAL_RCC_OscConfig+0x1c4>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d30a      	bcc.n	8004104 <HAL_RCC_OscConfig+0x1b0>
 80040ee:	4b39      	ldr	r3, [pc, #228]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	4935      	ldr	r1, [pc, #212]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	60cb      	str	r3, [r1, #12]
 8004102:	e009      	b.n	8004118 <HAL_RCC_OscConfig+0x1c4>
 8004104:	4b33      	ldr	r3, [pc, #204]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	03db      	lsls	r3, r3, #15
 8004112:	4930      	ldr	r1, [pc, #192]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004114:	4313      	orrs	r3, r2
 8004116:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f956 	bl	80053d4 <RCC_SetFlashLatencyFromMSIRange>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f000 bde5 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004134:	f001 f8e8 	bl	8005308 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004138:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_RCC_OscConfig+0x284>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f7fc ffb7 	bl	80010b0 <HAL_InitTick>
 8004142:	4603      	mov	r3, r0
 8004144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 808a 	beq.w	8004266 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004156:	f000 bdd2 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d066      	beq.n	8004230 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004162:	4b1c      	ldr	r3, [pc, #112]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800416e:	f7fd f8d3 	bl	8001318 <HAL_GetTick>
 8004172:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004174:	e009      	b.n	800418a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004176:	f7fd f8cf 	bl	8001318 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d902      	bls.n	800418a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	f000 bdba 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004196:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 800419c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041a0:	6093      	str	r3, [r2, #8]
 80041a2:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4909      	ldr	r1, [pc, #36]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041bc:	d30e      	bcc.n	80041dc <HAL_RCC_OscConfig+0x288>
 80041be:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f023 021f 	bic.w	r2, r3, #31
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	4902      	ldr	r1, [pc, #8]	; (80041d4 <HAL_RCC_OscConfig+0x280>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60cb      	str	r3, [r1, #12]
 80041d0:	e04a      	b.n	8004268 <HAL_RCC_OscConfig+0x314>
 80041d2:	bf00      	nop
 80041d4:	46020c00 	.word	0x46020c00
 80041d8:	20000004 	.word	0x20000004
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	da0a      	bge.n	80041fa <HAL_RCC_OscConfig+0x2a6>
 80041e4:	4b98      	ldr	r3, [pc, #608]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	015b      	lsls	r3, r3, #5
 80041f2:	4995      	ldr	r1, [pc, #596]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
 80041f8:	e036      	b.n	8004268 <HAL_RCC_OscConfig+0x314>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004202:	d30a      	bcc.n	800421a <HAL_RCC_OscConfig+0x2c6>
 8004204:	4b90      	ldr	r3, [pc, #576]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	029b      	lsls	r3, r3, #10
 8004212:	498d      	ldr	r1, [pc, #564]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
 8004218:	e026      	b.n	8004268 <HAL_RCC_OscConfig+0x314>
 800421a:	4b8b      	ldr	r3, [pc, #556]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	03db      	lsls	r3, r3, #15
 8004228:	4987      	ldr	r1, [pc, #540]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800422a:	4313      	orrs	r3, r2
 800422c:	60cb      	str	r3, [r1, #12]
 800422e:	e01b      	b.n	8004268 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004230:	4b85      	ldr	r3, [pc, #532]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a84      	ldr	r2, [pc, #528]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004236:	f023 0301 	bic.w	r3, r3, #1
 800423a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800423c:	f7fd f86c 	bl	8001318 <HAL_GetTick>
 8004240:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004242:	e009      	b.n	8004258 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004244:	f7fd f868 	bl	8001318 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d902      	bls.n	8004258 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	f000 bd53 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004258:	4b7b      	ldr	r3, [pc, #492]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ef      	bne.n	8004244 <HAL_RCC_OscConfig+0x2f0>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 808b 	beq.w	800438c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	2b08      	cmp	r3, #8
 800427a:	d005      	beq.n	8004288 <HAL_RCC_OscConfig+0x334>
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d109      	bne.n	8004296 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	2b03      	cmp	r3, #3
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d17d      	bne.n	800438c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f000 bd34 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429e:	d106      	bne.n	80042ae <HAL_RCC_OscConfig+0x35a>
 80042a0:	4b69      	ldr	r3, [pc, #420]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a68      	ldr	r2, [pc, #416]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042aa:	6013      	str	r3, [r2, #0]
 80042ac:	e041      	b.n	8004332 <HAL_RCC_OscConfig+0x3de>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b6:	d112      	bne.n	80042de <HAL_RCC_OscConfig+0x38a>
 80042b8:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a62      	ldr	r2, [pc, #392]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	4b60      	ldr	r3, [pc, #384]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5f      	ldr	r2, [pc, #380]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b5d      	ldr	r3, [pc, #372]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a5c      	ldr	r2, [pc, #368]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	e029      	b.n	8004332 <HAL_RCC_OscConfig+0x3de>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80042e6:	d112      	bne.n	800430e <HAL_RCC_OscConfig+0x3ba>
 80042e8:	4b57      	ldr	r3, [pc, #348]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a56      	ldr	r2, [pc, #344]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b54      	ldr	r3, [pc, #336]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a53      	ldr	r2, [pc, #332]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80042fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a50      	ldr	r2, [pc, #320]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	e011      	b.n	8004332 <HAL_RCC_OscConfig+0x3de>
 800430e:	4b4e      	ldr	r3, [pc, #312]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4d      	ldr	r2, [pc, #308]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a4a      	ldr	r2, [pc, #296]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004320:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b48      	ldr	r3, [pc, #288]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a47      	ldr	r2, [pc, #284]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800432c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004330:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d014      	beq.n	8004364 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800433a:	f7fc ffed 	bl	8001318 <HAL_GetTick>
 800433e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004340:	e009      	b.n	8004356 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004342:	f7fc ffe9 	bl	8001318 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b64      	cmp	r3, #100	; 0x64
 800434e:	d902      	bls.n	8004356 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	f000 bcd4 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	4b3c      	ldr	r3, [pc, #240]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0ef      	beq.n	8004342 <HAL_RCC_OscConfig+0x3ee>
 8004362:	e013      	b.n	800438c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004364:	f7fc ffd8 	bl	8001318 <HAL_GetTick>
 8004368:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800436a:	e009      	b.n	8004380 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800436c:	f7fc ffd4 	bl	8001318 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d902      	bls.n	8004380 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	f000 bcbf 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004380:	4b31      	ldr	r3, [pc, #196]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1ef      	bne.n	800436c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d05f      	beq.n	8004458 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439a:	2b04      	cmp	r3, #4
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x456>
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	d114      	bne.n	80043ce <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d111      	bne.n	80043ce <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f000 bca3 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	4920      	ldr	r1, [pc, #128]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80043cc:	e044      	b.n	8004458 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d024      	beq.n	8004420 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 80043dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043e2:	f7fc ff99 	bl	8001318 <HAL_GetTick>
 80043e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043e8:	e009      	b.n	80043fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ea:	f7fc ff95 	bl	8001318 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d902      	bls.n	80043fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	f000 bc80 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	490b      	ldr	r1, [pc, #44]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 800441a:	4313      	orrs	r3, r2
 800441c:	610b      	str	r3, [r1, #16]
 800441e:	e01b      	b.n	8004458 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_RCC_OscConfig+0x4f4>)
 8004426:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800442c:	f7fc ff74 	bl	8001318 <HAL_GetTick>
 8004430:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004432:	e00b      	b.n	800444c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fc ff70 	bl	8001318 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d904      	bls.n	800444c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	f000 bc5b 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
 8004448:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444c:	4baf      	ldr	r3, [pc, #700]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1ed      	bne.n	8004434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0308 	and.w	r3, r3, #8
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80c8 	beq.w	80045f6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800446c:	4ba7      	ldr	r3, [pc, #668]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800446e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004472:	f003 0304 	and.w	r3, r3, #4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d111      	bne.n	800449e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447a:	4ba4      	ldr	r3, [pc, #656]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800447c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004480:	4aa2      	ldr	r2, [pc, #648]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800448a:	4ba0      	ldr	r3, [pc, #640]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800449e:	4b9c      	ldr	r3, [pc, #624]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d119      	bne.n	80044de <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80044aa:	4b99      	ldr	r3, [pc, #612]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	4a98      	ldr	r2, [pc, #608]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fc ff2f 	bl	8001318 <HAL_GetTick>
 80044ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044bc:	e009      	b.n	80044d2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044be:	f7fc ff2b 	bl	8001318 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d902      	bls.n	80044d2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	f000 bc16 	b.w	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80044d2:	4b8f      	ldr	r3, [pc, #572]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0ef      	beq.n	80044be <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d05f      	beq.n	80045a6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80044e6:	4b89      	ldr	r3, [pc, #548]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80044e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ec:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d037      	beq.n	800456c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800450c:	2b00      	cmp	r3, #0
 800450e:	d101      	bne.n	8004514 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e3f4      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01b      	beq.n	8004556 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800451e:	4b7b      	ldr	r3, [pc, #492]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004524:	4a79      	ldr	r2, [pc, #484]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004526:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800452a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800452e:	f7fc fef3 	bl	8001318 <HAL_GetTick>
 8004532:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7fc feef 	bl	8001318 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b05      	cmp	r3, #5
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e3da      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004548:	4b70      	ldr	r3, [pc, #448]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800454a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800454e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1ef      	bne.n	8004536 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004556:	4b6d      	ldr	r3, [pc, #436]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800455c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	4969      	ldr	r1, [pc, #420]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004566:	4313      	orrs	r3, r2
 8004568:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800456c:	4b67      	ldr	r3, [pc, #412]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800456e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004572:	4a66      	ldr	r2, [pc, #408]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004574:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800457c:	f7fc fecc 	bl	8001318 <HAL_GetTick>
 8004580:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004584:	f7fc fec8 	bl	8001318 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b05      	cmp	r3, #5
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e3b3      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800459c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ef      	beq.n	8004584 <HAL_RCC_OscConfig+0x630>
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80045a6:	4b59      	ldr	r3, [pc, #356]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80045a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045ac:	4a57      	ldr	r2, [pc, #348]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80045ae:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80045b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80045b6:	f7fc feaf 	bl	8001318 <HAL_GetTick>
 80045ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045be:	f7fc feab 	bl	8001318 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e396      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80045d0:	4b4e      	ldr	r3, [pc, #312]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80045d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ef      	bne.n	80045be <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b49      	ldr	r3, [pc, #292]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80045e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ec:	4a47      	ldr	r2, [pc, #284]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80045ee:	f023 0304 	bic.w	r3, r3, #4
 80045f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8111 	beq.w	8004826 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460a:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800460c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d111      	bne.n	800463c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004618:	4b3c      	ldr	r3, [pc, #240]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461e:	4a3b      	ldr	r2, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004620:	f043 0304 	orr.w	r3, r3, #4
 8004624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004628:	4b38      	ldr	r3, [pc, #224]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800462a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800463c:	4b34      	ldr	r3, [pc, #208]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d118      	bne.n	800467a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004648:	4b31      	ldr	r3, [pc, #196]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	4a30      	ldr	r2, [pc, #192]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004654:	f7fc fe60 	bl	8001318 <HAL_GetTick>
 8004658:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465c:	f7fc fe5c 	bl	8001318 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e347      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800466e:	4b28      	ldr	r3, [pc, #160]	; (8004710 <HAL_RCC_OscConfig+0x7bc>)
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01f      	beq.n	80046c6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d010      	beq.n	80046b4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004692:	4b1e      	ldr	r3, [pc, #120]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 8004694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 800469a:	f043 0304 	orr.w	r3, r3, #4
 800469e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046a2:	4b1a      	ldr	r3, [pc, #104]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046b2:	e018      	b.n	80046e6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ba:	4a14      	ldr	r2, [pc, #80]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80046c4:	e00f      	b.n	80046e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046c6:	4b11      	ldr	r3, [pc, #68]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046cc:	4a0f      	ldr	r2, [pc, #60]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046d6:	4b0d      	ldr	r3, [pc, #52]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046dc:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x7b8>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d057      	beq.n	800479e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80046ee:	f7fc fe13 	bl	8001318 <HAL_GetTick>
 80046f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fc fe0f 	bl	8001318 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d905      	bls.n	8004714 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e2f8      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
 800470c:	46020c00 	.word	0x46020c00
 8004710:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004714:	4b9c      	ldr	r3, [pc, #624]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0e9      	beq.n	80046f6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01b      	beq.n	8004766 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800472e:	4b96      	ldr	r3, [pc, #600]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004734:	4a94      	ldr	r2, [pc, #592]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800473a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800473e:	e00a      	b.n	8004756 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004740:	f7fc fdea 	bl	8001318 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	f241 3288 	movw	r2, #5000	; 0x1388
 800474e:	4293      	cmp	r3, r2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e2d3      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004756:	4b8c      	ldr	r3, [pc, #560]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800475c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0ed      	beq.n	8004740 <HAL_RCC_OscConfig+0x7ec>
 8004764:	e053      	b.n	800480e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004766:	4b88      	ldr	r3, [pc, #544]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476c:	4a86      	ldr	r2, [pc, #536]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fc fdce 	bl	8001318 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e2b7      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800478e:	4b7e      	ldr	r3, [pc, #504]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1ed      	bne.n	8004778 <HAL_RCC_OscConfig+0x824>
 800479c:	e037      	b.n	800480e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800479e:	f7fc fdbb 	bl	8001318 <HAL_GetTick>
 80047a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fc fdb7 	bl	8001318 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e2a0      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	4b72      	ldr	r3, [pc, #456]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80047be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ed      	bne.n	80047a6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80047ca:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80047cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047d8:	4b6b      	ldr	r3, [pc, #428]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80047da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047de:	4a6a      	ldr	r2, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80047e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fc fd95 	bl	8001318 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e27e      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004800:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1ed      	bne.n	80047ea <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800480e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004812:	2b01      	cmp	r3, #1
 8004814:	d107      	bne.n	8004826 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4b5c      	ldr	r3, [pc, #368]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004818:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800481c:	4a5a      	ldr	r2, [pc, #360]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 800481e:	f023 0304 	bic.w	r3, r3, #4
 8004822:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	d036      	beq.n	80048a0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d019      	beq.n	800486e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800483a:	4b53      	ldr	r3, [pc, #332]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a52      	ldr	r2, [pc, #328]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004840:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004844:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004846:	f7fc fd67 	bl	8001318 <HAL_GetTick>
 800484a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484e:	f7fc fd63 	bl	8001318 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e24e      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004860:	4b49      	ldr	r3, [pc, #292]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x8fa>
 800486c:	e018      	b.n	80048a0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800486e:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a45      	ldr	r2, [pc, #276]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004878:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800487a:	f7fc fd4d 	bl	8001318 <HAL_GetTick>
 800487e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004882:	f7fc fd49 	bl	8001318 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e234      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004894:	4b3c      	ldr	r3, [pc, #240]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1f0      	bne.n	8004882 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d036      	beq.n	800491a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d019      	beq.n	80048e8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80048b4:	4b34      	ldr	r3, [pc, #208]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a33      	ldr	r2, [pc, #204]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80048ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048c0:	f7fc fd2a 	bl	8001318 <HAL_GetTick>
 80048c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80048c8:	f7fc fd26 	bl	8001318 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e211      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80048da:	4b2b      	ldr	r3, [pc, #172]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0f0      	beq.n	80048c8 <HAL_RCC_OscConfig+0x974>
 80048e6:	e018      	b.n	800491a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a26      	ldr	r2, [pc, #152]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048f4:	f7fc fd10 	bl	8001318 <HAL_GetTick>
 80048f8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80048fc:	f7fc fd0c 	bl	8001318 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e1f7      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800490e:	4b1e      	ldr	r3, [pc, #120]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f0      	bne.n	80048fc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d07f      	beq.n	8004a26 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	2b00      	cmp	r3, #0
 800492c:	d062      	beq.n	80049f4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800492e:	4b16      	ldr	r3, [pc, #88]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	4a15      	ldr	r2, [pc, #84]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004938:	6093      	str	r3, [r2, #8]
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	4910      	ldr	r1, [pc, #64]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004954:	d309      	bcc.n	800496a <HAL_RCC_OscConfig+0xa16>
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f023 021f 	bic.w	r2, r3, #31
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	4909      	ldr	r1, [pc, #36]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004964:	4313      	orrs	r3, r2
 8004966:	60cb      	str	r3, [r1, #12]
 8004968:	e02a      	b.n	80049c0 <HAL_RCC_OscConfig+0xa6c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	da0c      	bge.n	800498c <HAL_RCC_OscConfig+0xa38>
 8004972:	4b05      	ldr	r3, [pc, #20]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	4901      	ldr	r1, [pc, #4]	; (8004988 <HAL_RCC_OscConfig+0xa34>)
 8004982:	4313      	orrs	r3, r2
 8004984:	60cb      	str	r3, [r1, #12]
 8004986:	e01b      	b.n	80049c0 <HAL_RCC_OscConfig+0xa6c>
 8004988:	46020c00 	.word	0x46020c00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004994:	d30a      	bcc.n	80049ac <HAL_RCC_OscConfig+0xa58>
 8004996:	4ba1      	ldr	r3, [pc, #644]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	029b      	lsls	r3, r3, #10
 80049a4:	499d      	ldr	r1, [pc, #628]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60cb      	str	r3, [r1, #12]
 80049aa:	e009      	b.n	80049c0 <HAL_RCC_OscConfig+0xa6c>
 80049ac:	4b9b      	ldr	r3, [pc, #620]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	03db      	lsls	r3, r3, #15
 80049ba:	4998      	ldr	r1, [pc, #608]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80049c0:	4b96      	ldr	r3, [pc, #600]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a95      	ldr	r2, [pc, #596]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049cc:	f7fc fca4 	bl	8001318 <HAL_GetTick>
 80049d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80049d4:	f7fc fca0 	bl	8001318 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e18b      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80049e6:	4b8d      	ldr	r3, [pc, #564]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0xa80>
 80049f2:	e018      	b.n	8004a26 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80049f4:	4b89      	ldr	r3, [pc, #548]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a88      	ldr	r2, [pc, #544]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 80049fa:	f023 0310 	bic.w	r3, r3, #16
 80049fe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a00:	f7fc fc8a 	bl	8001318 <HAL_GetTick>
 8004a04:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004a08:	f7fc fc86 	bl	8001318 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e171      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004a1a:	4b80      	ldr	r3, [pc, #512]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8166 	beq.w	8004cfc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a36:	4b79      	ldr	r3, [pc, #484]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f003 030c 	and.w	r3, r3, #12
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	f000 80f2 	beq.w	8004c28 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f040 80c5 	bne.w	8004bd8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a4e:	4b73      	ldr	r3, [pc, #460]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a72      	ldr	r2, [pc, #456]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a58:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a5a:	f7fc fc5d 	bl	8001318 <HAL_GetTick>
 8004a5e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a62:	f7fc fc59 	bl	8001318 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e144      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a74:	4b69      	ldr	r3, [pc, #420]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a80:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d111      	bne.n	8004ab2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004a8e:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	4a61      	ldr	r2, [pc, #388]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004a96:	f043 0304 	orr.w	r3, r3, #4
 8004a9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004a9e:	4b5f      	ldr	r3, [pc, #380]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004ab2:	4b5b      	ldr	r3, [pc, #364]	; (8004c20 <HAL_RCC_OscConfig+0xccc>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004ac6:	4b56      	ldr	r3, [pc, #344]	; (8004c20 <HAL_RCC_OscConfig+0xccc>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	4a55      	ldr	r2, [pc, #340]	; (8004c20 <HAL_RCC_OscConfig+0xccc>)
 8004acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	0212      	lsls	r2, r2, #8
 8004aea:	4311      	orrs	r1, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004af0:	430a      	orrs	r2, r1
 8004af2:	494a      	ldr	r1, [pc, #296]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	628b      	str	r3, [r1, #40]	; 0x28
 8004af8:	4b48      	ldr	r3, [pc, #288]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afc:	4b49      	ldr	r3, [pc, #292]	; (8004c24 <HAL_RCC_OscConfig+0xcd0>)
 8004afe:	4013      	ands	r3, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b04:	3a01      	subs	r2, #1
 8004b06:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004b0e:	3a01      	subs	r2, #1
 8004b10:	0252      	lsls	r2, r2, #9
 8004b12:	b292      	uxth	r2, r2
 8004b14:	4311      	orrs	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0412      	lsls	r2, r2, #16
 8004b1e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	0612      	lsls	r2, r2, #24
 8004b2c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004b30:	430a      	orrs	r2, r1
 8004b32:	493a      	ldr	r1, [pc, #232]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b38:	4b38      	ldr	r3, [pc, #224]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	4a37      	ldr	r2, [pc, #220]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	4a34      	ldr	r2, [pc, #208]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b4e:	4b33      	ldr	r3, [pc, #204]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	4a32      	ldr	r2, [pc, #200]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b54:	f043 0310 	orr.w	r3, r3, #16
 8004b58:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f023 020c 	bic.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b66:	492d      	ldr	r1, [pc, #180]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004b6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d105      	bne.n	8004b80 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004b74:	4b2a      	ldr	r3, [pc, #168]	; (8004c20 <HAL_RCC_OscConfig+0xccc>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <HAL_RCC_OscConfig+0xccc>)
 8004b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b7e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004b80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004b88:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b98:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ba2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bb0:	f7fc fbb2 	bl	8001318 <HAL_GetTick>
 8004bb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fc fbae 	bl	8001318 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e099      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0xc64>
 8004bd6:	e091      	b.n	8004cfc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004be4:	f7fc fb98 	bl	8001318 <HAL_GetTick>
 8004be8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fc fb94 	bl	8001318 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e07f      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bfe:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0e:	4a03      	ldr	r2, [pc, #12]	; (8004c1c <HAL_RCC_OscConfig+0xcc8>)
 8004c10:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004c14:	f023 0303 	bic.w	r3, r3, #3
 8004c18:	6293      	str	r3, [r2, #40]	; 0x28
 8004c1a:	e06f      	b.n	8004cfc <HAL_RCC_OscConfig+0xda8>
 8004c1c:	46020c00 	.word	0x46020c00
 8004c20:	46020800 	.word	0x46020800
 8004c24:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004c28:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c2e:	4b36      	ldr	r3, [pc, #216]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c32:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d039      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0203 	and.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d132      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	0a1b      	lsrs	r3, r3, #8
 8004c4e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d129      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d122      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c74:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d11a      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	0a5b      	lsrs	r3, r3, #9
 8004c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d111      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c98:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d108      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	0e1b      	lsrs	r3, r3, #24
 8004ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004caa:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d001      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e024      	b.n	8004cfe <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d01a      	beq.n	8004cfc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004ccc:	f023 0310 	bic.w	r3, r3, #16
 8004cd0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd2:	f7fc fb21 	bl	8001318 <HAL_GetTick>
 8004cd6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004cd8:	bf00      	nop
 8004cda:	f7fc fb1d 	bl	8001318 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d0f9      	beq.n	8004cda <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	4a04      	ldr	r2, [pc, #16]	; (8004d08 <HAL_RCC_OscConfig+0xdb4>)
 8004cf6:	f043 0310 	orr.w	r3, r3, #16
 8004cfa:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3738      	adds	r7, #56	; 0x38
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	46020c00 	.word	0x46020c00

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e1d9      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d20:	4b9b      	ldr	r3, [pc, #620]	; (8004f90 <HAL_RCC_ClockConfig+0x284>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d910      	bls.n	8004d50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2e:	4b98      	ldr	r3, [pc, #608]	; (8004f90 <HAL_RCC_ClockConfig+0x284>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 020f 	bic.w	r2, r3, #15
 8004d36:	4996      	ldr	r1, [pc, #600]	; (8004f90 <HAL_RCC_ClockConfig+0x284>)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b94      	ldr	r3, [pc, #592]	; (8004f90 <HAL_RCC_ClockConfig+0x284>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e1c1      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d010      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	695a      	ldr	r2, [r3, #20]
 8004d60:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d908      	bls.n	8004d7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004d6c:	4b89      	ldr	r3, [pc, #548]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	4986      	ldr	r1, [pc, #536]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	4b81      	ldr	r3, [pc, #516]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d909      	bls.n	8004db0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004d9c:	4b7d      	ldr	r3, [pc, #500]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	497a      	ldr	r1, [pc, #488]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b74      	ldr	r3, [pc, #464]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d908      	bls.n	8004dde <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b71      	ldr	r3, [pc, #452]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	496e      	ldr	r1, [pc, #440]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d010      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	4b69      	ldr	r3, [pc, #420]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d908      	bls.n	8004e0c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004dfa:	4b66      	ldr	r3, [pc, #408]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	f023 020f 	bic.w	r2, r3, #15
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	4963      	ldr	r1, [pc, #396]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80d2 	beq.w	8004fbe <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d143      	bne.n	8004eae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d110      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e34:	4b57      	ldr	r3, [pc, #348]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e3a:	4a56      	ldr	r2, [pc, #344]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e3c:	f043 0304 	orr.w	r3, r3, #4
 8004e40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004e52:	2301      	movs	r3, #1
 8004e54:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004e56:	f7fc fa5f 	bl	8001318 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004e5c:	4b4e      	ldr	r3, [pc, #312]	; (8004f98 <HAL_RCC_ClockConfig+0x28c>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00f      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004e6a:	f7fc fa55 	bl	8001318 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e12b      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e7c:	4b46      	ldr	r3, [pc, #280]	; (8004f98 <HAL_RCC_ClockConfig+0x28c>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0f0      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e8e:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e94:	4a3f      	ldr	r2, [pc, #252]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004e96:	f023 0304 	bic.w	r3, r3, #4
 8004e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d121      	bne.n	8004eee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e112      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d107      	bne.n	8004ec6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eb6:	4b37      	ldr	r3, [pc, #220]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d115      	bne.n	8004eee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e106      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d107      	bne.n	8004ede <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0304 	and.w	r3, r3, #4
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e0fa      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0f2      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f023 0203 	bic.w	r2, r3, #3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	4926      	ldr	r1, [pc, #152]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004f00:	f7fc fa0a 	bl	8001318 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d112      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f0e:	e00a      	b.n	8004f26 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f10:	f7fc fa02 	bl	8001318 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0d6      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f26:	4b1b      	ldr	r3, [pc, #108]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d1ee      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x204>
 8004f32:	e044      	b.n	8004fbe <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d112      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f3c:	e00a      	b.n	8004f54 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f3e:	f7fc f9eb 	bl	8001318 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0bf      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f54:	4b0f      	ldr	r3, [pc, #60]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	f003 030c 	and.w	r3, r3, #12
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d1ee      	bne.n	8004f3e <HAL_RCC_ClockConfig+0x232>
 8004f60:	e02d      	b.n	8004fbe <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d123      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f6a:	e00a      	b.n	8004f82 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f6c:	f7fc f9d4 	bl	8001318 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e0a8      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f82:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_RCC_ClockConfig+0x288>)
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	f003 030c 	and.w	r3, r3, #12
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1ee      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x260>
 8004f8e:	e016      	b.n	8004fbe <HAL_RCC_ClockConfig+0x2b2>
 8004f90:	40022000 	.word	0x40022000
 8004f94:	46020c00 	.word	0x46020c00
 8004f98:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9c:	f7fc f9bc 	bl	8001318 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e090      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb2:	4b4a      	ldr	r3, [pc, #296]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d1ee      	bne.n	8004f9c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	4b43      	ldr	r3, [pc, #268]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d208      	bcs.n	8004fec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004fda:	4b40      	ldr	r3, [pc, #256]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 020f 	bic.w	r2, r3, #15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	493d      	ldr	r1, [pc, #244]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b3c      	ldr	r3, [pc, #240]	; (80050e0 <HAL_RCC_ClockConfig+0x3d4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d210      	bcs.n	800501c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <HAL_RCC_ClockConfig+0x3d4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 020f 	bic.w	r2, r3, #15
 8005002:	4937      	ldr	r1, [pc, #220]	; (80050e0 <HAL_RCC_ClockConfig+0x3d4>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCC_ClockConfig+0x3d4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e05b      	b.n	80050d4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	4b2b      	ldr	r3, [pc, #172]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005034:	429a      	cmp	r2, r3
 8005036:	d208      	bcs.n	800504a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005038:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4925      	ldr	r1, [pc, #148]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d012      	beq.n	800507c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	091b      	lsrs	r3, r3, #4
 8005060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005064:	429a      	cmp	r2, r3
 8005066:	d209      	bcs.n	800507c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005068:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	4919      	ldr	r1, [pc, #100]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 8005078:	4313      	orrs	r3, r2
 800507a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	4b13      	ldr	r3, [pc, #76]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005094:	429a      	cmp	r2, r3
 8005096:	d208      	bcs.n	80050aa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005098:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	490d      	ldr	r1, [pc, #52]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050aa:	f000 f821 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <HAL_RCC_ClockConfig+0x3d0>)
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	490a      	ldr	r1, [pc, #40]	; (80050e4 <HAL_RCC_ClockConfig+0x3d8>)
 80050ba:	5ccb      	ldrb	r3, [r1, r3]
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <HAL_RCC_ClockConfig+0x3dc>)
 80050c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_RCC_ClockConfig+0x3e0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb fff1 	bl	80010b0 <HAL_InitTick>
 80050ce:	4603      	mov	r3, r0
 80050d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	46020c00 	.word	0x46020c00
 80050e0:	40022000 	.word	0x40022000
 80050e4:	0800850c 	.word	0x0800850c
 80050e8:	20000000 	.word	0x20000000
 80050ec:	20000004 	.word	0x20000004

080050f0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b08b      	sub	sp, #44	; 0x2c
 80050f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050fe:	4b7b      	ldr	r3, [pc, #492]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 030c 	and.w	r3, r3, #12
 8005106:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005108:	4b78      	ldr	r3, [pc, #480]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x34>
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d121      	bne.n	8005162 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d11e      	bne.n	8005162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005124:	4b71      	ldr	r3, [pc, #452]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005130:	4b6e      	ldr	r3, [pc, #440]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005136:	0b1b      	lsrs	r3, r3, #12
 8005138:	f003 030f 	and.w	r3, r3, #15
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
 800513e:	e005      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005140:	4b6a      	ldr	r3, [pc, #424]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	0f1b      	lsrs	r3, r3, #28
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005160:	e00d      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005162:	4b62      	ldr	r3, [pc, #392]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 030c 	and.w	r3, r3, #12
 800516a:	2b04      	cmp	r3, #4
 800516c:	d102      	bne.n	8005174 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800516e:	4b61      	ldr	r3, [pc, #388]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	e004      	b.n	800517e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	2b08      	cmp	r3, #8
 8005178:	d101      	bne.n	800517e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800517a:	4b5f      	ldr	r3, [pc, #380]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800517c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	f040 80ac 	bne.w	80052de <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005186:	4b59      	ldr	r3, [pc, #356]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005190:	4b56      	ldr	r3, [pc, #344]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800519e:	4b53      	ldr	r3, [pc, #332]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051aa:	4b50      	ldr	r3, [pc, #320]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	08db      	lsrs	r3, r3, #3
 80051b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8086 	beq.w	80052da <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d003      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0xec>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d022      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x130>
 80051da:	e043      	b.n	8005264 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eddf 6a45 	vldr	s13, [pc, #276]	; 80052fc <HAL_RCC_GetSysClockFreq+0x20c>
 80051ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ee:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8005202:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005300 <HAL_RCC_GetSysClockFreq+0x210>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800521e:	e046      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	ee07 3a90 	vmov	s15, r3
 8005226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8005304 <HAL_RCC_GetSysClockFreq+0x214>
 800522e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005242:	ed97 6a01 	vldr	s12, [r7, #4]
 8005246:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005300 <HAL_RCC_GetSysClockFreq+0x210>
 800524a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800524e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005256:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800525a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800525e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005262:	e024      	b.n	80052ae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	ee07 3a90 	vmov	s15, r3
 800526a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	ee07 3a90 	vmov	s15, r3
 8005274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800528c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005290:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8005300 <HAL_RCC_GetSysClockFreq+0x210>
 8005294:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005298:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800529c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80052a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80052ac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	0e1b      	lsrs	r3, r3, #24
 80052b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b8:	3301      	adds	r3, #1
 80052ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d2:	ee17 3a90 	vmov	r3, s15
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	e001      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80052de:	6a3b      	ldr	r3, [r7, #32]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	372c      	adds	r7, #44	; 0x2c
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	46020c00 	.word	0x46020c00
 80052f0:	08008524 	.word	0x08008524
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	017d7840 	.word	0x017d7840
 80052fc:	4b742400 	.word	0x4b742400
 8005300:	46000000 	.word	0x46000000
 8005304:	4bbebc20 	.word	0x4bbebc20

08005308 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800530c:	f7ff fef0 	bl	80050f0 <HAL_RCC_GetSysClockFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b07      	ldr	r3, [pc, #28]	; (8005330 <HAL_RCC_GetHCLKFreq+0x28>)
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	4906      	ldr	r1, [pc, #24]	; (8005334 <HAL_RCC_GetHCLKFreq+0x2c>)
 800531c:	5ccb      	ldrb	r3, [r1, r3]
 800531e:	fa22 f303 	lsr.w	r3, r2, r3
 8005322:	4a05      	ldr	r2, [pc, #20]	; (8005338 <HAL_RCC_GetHCLKFreq+0x30>)
 8005324:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005326:	4b04      	ldr	r3, [pc, #16]	; (8005338 <HAL_RCC_GetHCLKFreq+0x30>)
 8005328:	681b      	ldr	r3, [r3, #0]
}
 800532a:	4618      	mov	r0, r3
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	46020c00 	.word	0x46020c00
 8005334:	0800850c 	.word	0x0800850c
 8005338:	20000000 	.word	0x20000000

0800533c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005340:	f7ff ffe2 	bl	8005308 <HAL_RCC_GetHCLKFreq>
 8005344:	4602      	mov	r2, r0
 8005346:	4b05      	ldr	r3, [pc, #20]	; (800535c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	4903      	ldr	r1, [pc, #12]	; (8005360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005352:	5ccb      	ldrb	r3, [r1, r3]
 8005354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	bd80      	pop	{r7, pc}
 800535c:	46020c00 	.word	0x46020c00
 8005360:	0800851c 	.word	0x0800851c

08005364 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	221f      	movs	r2, #31
 8005372:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005374:	4b15      	ldr	r3, [pc, #84]	; (80053cc <HAL_RCC_GetClockConfig+0x68>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005380:	4b12      	ldr	r3, [pc, #72]	; (80053cc <HAL_RCC_GetClockConfig+0x68>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <HAL_RCC_GetClockConfig+0x68>)
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005398:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_RCC_GetClockConfig+0x68>)
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <HAL_RCC_GetClockConfig+0x68>)
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RCC_GetClockConfig+0x6c>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 020f 	and.w	r2, r3, #15
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	46020c00 	.word	0x46020c00
 80053d0:	40022000 	.word	0x40022000

080053d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053dc:	4b3e      	ldr	r3, [pc, #248]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053ea:	f7fe fd95 	bl	8003f18 <HAL_PWREx_GetVoltageRange>
 80053ee:	6178      	str	r0, [r7, #20]
 80053f0:	e019      	b.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053f2:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f8:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053fa:	f043 0304 	orr.w	r3, r3, #4
 80053fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005402:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005404:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005410:	f7fe fd82 	bl	8003f18 <HAL_PWREx_GetVoltageRange>
 8005414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005416:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541c:	4a2e      	ldr	r2, [pc, #184]	; (80054d8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800541e:	f023 0304 	bic.w	r3, r3, #4
 8005422:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800542c:	d003      	beq.n	8005436 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005434:	d109      	bne.n	800544a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800543c:	d202      	bcs.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800543e:	2301      	movs	r3, #1
 8005440:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005442:	e033      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005448:	e030      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005450:	d208      	bcs.n	8005464 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005458:	d102      	bne.n	8005460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800545a:	2303      	movs	r3, #3
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	e025      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e035      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800546a:	d90f      	bls.n	800548c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005478:	d902      	bls.n	8005480 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800547a:	2300      	movs	r3, #0
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	e015      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005480:	2301      	movs	r3, #1
 8005482:	613b      	str	r3, [r7, #16]
 8005484:	e012      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005486:	2300      	movs	r3, #0
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e00f      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005492:	d109      	bne.n	80054a8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800549a:	d102      	bne.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800549c:	2301      	movs	r3, #1
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	e004      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80054a2:	2302      	movs	r3, #2
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	e001      	b.n	80054ac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80054a8:	2301      	movs	r3, #1
 80054aa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f023 020f 	bic.w	r2, r3, #15
 80054b4:	4909      	ldr	r1, [pc, #36]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d001      	beq.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e000      	b.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	46020c00 	.word	0x46020c00
 80054dc:	40022000 	.word	0x40022000

080054e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80054e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e4:	b0ba      	sub	sp, #232	; 0xe8
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054f2:	2300      	movs	r3, #0
 80054f4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005500:	f002 0401 	and.w	r4, r2, #1
 8005504:	2500      	movs	r5, #0
 8005506:	ea54 0305 	orrs.w	r3, r4, r5
 800550a:	d00b      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800550c:	4bcb      	ldr	r3, [pc, #812]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800550e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005512:	f023 0103 	bic.w	r1, r3, #3
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551c:	4ac7      	ldr	r2, [pc, #796]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 0802 	and.w	r8, r2, #2
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	ea58 0309 	orrs.w	r3, r8, r9
 8005538:	d00b      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800553a:	4bc0      	ldr	r3, [pc, #768]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800553c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005540:	f023 010c 	bic.w	r1, r3, #12
 8005544:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	4abc      	ldr	r2, [pc, #752]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800554c:	430b      	orrs	r3, r1
 800554e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f002 0a04 	and.w	sl, r2, #4
 800555e:	f04f 0b00 	mov.w	fp, #0
 8005562:	ea5a 030b 	orrs.w	r3, sl, fp
 8005566:	d00b      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005568:	4bb4      	ldr	r3, [pc, #720]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800556a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4ab0      	ldr	r2, [pc, #704]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f002 0308 	and.w	r3, r2, #8
 800558c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005590:	2300      	movs	r3, #0
 8005592:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005596:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800559a:	460b      	mov	r3, r1
 800559c:	4313      	orrs	r3, r2
 800559e:	d00b      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80055a0:	4ba6      	ldr	r3, [pc, #664]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b0:	4aa2      	ldr	r2, [pc, #648]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b2:	430b      	orrs	r3, r1
 80055b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	f002 0310 	and.w	r3, r2, #16
 80055c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4313      	orrs	r3, r2
 80055d6:	d00b      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80055d8:	4b98      	ldr	r3, [pc, #608]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e8:	4a94      	ldr	r2, [pc, #592]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	430b      	orrs	r3, r1
 80055ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f8:	f002 0320 	and.w	r3, r2, #32
 80055fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005606:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800560a:	460b      	mov	r3, r1
 800560c:	4313      	orrs	r3, r2
 800560e:	d00b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005610:	4b8a      	ldr	r3, [pc, #552]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005616:	f023 0107 	bic.w	r1, r3, #7
 800561a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800561e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005620:	4a86      	ldr	r2, [pc, #536]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005622:	430b      	orrs	r3, r1
 8005624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005638:	2300      	movs	r3, #0
 800563a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800563e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005642:	460b      	mov	r3, r1
 8005644:	4313      	orrs	r3, r2
 8005646:	d00b      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005648:	4b7c      	ldr	r3, [pc, #496]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800564a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800564e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005658:	4a78      	ldr	r2, [pc, #480]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565a:	430b      	orrs	r3, r1
 800565c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005660:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800566c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005676:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d00b      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005680:	4b6e      	ldr	r3, [pc, #440]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005686:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800568a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800568e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005690:	4a6a      	ldr	r2, [pc, #424]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005692:	430b      	orrs	r3, r1
 8005694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80056a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80056a8:	2300      	movs	r3, #0
 80056aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056ae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80056b2:	460b      	mov	r3, r1
 80056b4:	4313      	orrs	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80056b8:	4b60      	ldr	r3, [pc, #384]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	4a5c      	ldr	r2, [pc, #368]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ca:	430b      	orrs	r3, r1
 80056cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056e0:	2300      	movs	r3, #0
 80056e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80056ea:	460b      	mov	r3, r1
 80056ec:	4313      	orrs	r3, r2
 80056ee:	d00b      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80056f0:	4b52      	ldr	r3, [pc, #328]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80056fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	4a4e      	ldr	r2, [pc, #312]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005702:	430b      	orrs	r3, r1
 8005704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005714:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800571e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d00b      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005728:	4b44      	ldr	r3, [pc, #272]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800572a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800572e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005738:	4a40      	ldr	r2, [pc, #256]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800573a:	430b      	orrs	r3, r1
 800573c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800574c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005756:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800575a:	460b      	mov	r3, r1
 800575c:	4313      	orrs	r3, r2
 800575e:	d00b      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005760:	4b36      	ldr	r3, [pc, #216]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005766:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800576a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800576e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005770:	4a32      	ldr	r2, [pc, #200]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005772:	430b      	orrs	r3, r1
 8005774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005784:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005788:	2300      	movs	r3, #0
 800578a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800578e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005792:	460b      	mov	r3, r1
 8005794:	4313      	orrs	r3, r2
 8005796:	d00c      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005798:	4b28      	ldr	r3, [pc, #160]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800579e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057aa:	4a24      	ldr	r2, [pc, #144]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ac:	430b      	orrs	r3, r1
 80057ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80057be:	67bb      	str	r3, [r7, #120]	; 0x78
 80057c0:	2300      	movs	r3, #0
 80057c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80057c8:	460b      	mov	r3, r1
 80057ca:	4313      	orrs	r3, r2
 80057cc:	d04f      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80057ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d02d      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d827      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80057de:	2b60      	cmp	r3, #96	; 0x60
 80057e0:	d02e      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80057e2:	2b60      	cmp	r3, #96	; 0x60
 80057e4:	d823      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d006      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d81f      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x326>
 80057f2:	2b20      	cmp	r3, #32
 80057f4:	d011      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80057f6:	e01a      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057f8:	4b10      	ldr	r3, [pc, #64]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	4a0f      	ldr	r2, [pc, #60]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005802:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005804:	e01d      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580a:	3308      	adds	r3, #8
 800580c:	4618      	mov	r0, r3
 800580e:	f000 fc69 	bl	80060e4 <RCCEx_PLL2_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005818:	e013      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800581a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800581e:	332c      	adds	r3, #44	; 0x2c
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fcf7 	bl	8006214 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800582c:	e009      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005834:	e005      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005836:	bf00      	nop
 8005838:	e003      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800583a:	bf00      	nop
 800583c:	46020c00 	.word	0x46020c00
        break;
 8005840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005842:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10d      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800584a:	4bb6      	ldr	r3, [pc, #728]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800584c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005850:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	4ab1      	ldr	r2, [pc, #708]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800585e:	430b      	orrs	r3, r1
 8005860:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800586a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800587a:	673b      	str	r3, [r7, #112]	; 0x70
 800587c:	2300      	movs	r3, #0
 800587e:	677b      	str	r3, [r7, #116]	; 0x74
 8005880:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005884:	460b      	mov	r3, r1
 8005886:	4313      	orrs	r3, r2
 8005888:	d053      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800588a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005896:	d033      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589c:	d82c      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800589e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a2:	d02f      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80058a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a8:	d826      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80058aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058ae:	d008      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80058b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b4:	d820      	bhi.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80058ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058be:	d011      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80058c0:	e01a      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058c2:	4b98      	ldr	r3, [pc, #608]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	4a97      	ldr	r2, [pc, #604]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058cc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058ce:	e01a      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d4:	3308      	adds	r3, #8
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fc04 	bl	80060e4 <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058e2:	e010      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e8:	332c      	adds	r3, #44	; 0x2c
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fc92 	bl	8006214 <RCCEx_PLL3_Config>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058f6:	e006      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005900:	bf00      	nop
 8005902:	e000      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005906:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10d      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800590e:	4b85      	ldr	r3, [pc, #532]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005910:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005914:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800591c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005920:	4a80      	ldr	r2, [pc, #512]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005922:	430b      	orrs	r3, r1
 8005924:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005928:	e003      	b.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800592e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800593e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005940:	2300      	movs	r3, #0
 8005942:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005944:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005948:	460b      	mov	r3, r1
 800594a:	4313      	orrs	r3, r2
 800594c:	d046      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800594e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005956:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800595a:	d028      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800595c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005960:	d821      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005966:	d022      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800596c:	d81b      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800596e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005972:	d01c      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005974:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005978:	d815      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800597a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597e:	d008      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005984:	d80f      	bhi.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d011      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598e:	d00e      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005990:	e009      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005996:	3308      	adds	r3, #8
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fba3 	bl	80060e4 <RCCEx_PLL2_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059a4:	e004      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059ac:	e000      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80059ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80059b8:	4b5a      	ldr	r3, [pc, #360]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059be:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80059c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059ca:	4a56      	ldr	r2, [pc, #344]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059cc:	430b      	orrs	r3, r1
 80059ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059d2:	e003      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059d8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80059dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80059e8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ea:	2300      	movs	r3, #0
 80059ec:	667b      	str	r3, [r7, #100]	; 0x64
 80059ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d03f      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80059f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d81e      	bhi.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a4b 	.word	0x08005a4b
 8005a10:	08005a21 	.word	0x08005a21
 8005a14:	08005a2f 	.word	0x08005a2f
 8005a18:	08005a4b 	.word	0x08005a4b
 8005a1c:	08005a4b 	.word	0x08005a4b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a20:	4b40      	ldr	r3, [pc, #256]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	4a3f      	ldr	r2, [pc, #252]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005a2c:	e00e      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a32:	332c      	adds	r3, #44	; 0x2c
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 fbed 	bl	8006214 <RCCEx_PLL3_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a40:	e004      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a48:	e000      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005a4a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10d      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005a54:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a5a:	f023 0107 	bic.w	r1, r3, #7
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a6e:	e003      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a74:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a86:	2300      	movs	r3, #0
 8005a88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d04d      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aa0:	d028      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005aa2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aa6:	d821      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005aa8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005aac:	d024      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005aae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab2:	d81b      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005abe:	d815      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac8:	d110      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005ad6:	e012      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ad8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005adc:	332c      	adds	r3, #44	; 0x2c
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fb98 	bl	8006214 <RCCEx_PLL3_Config>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005aea:	e008      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005af2:	e004      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005af4:	bf00      	nop
 8005af6:	e002      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005af8:	bf00      	nop
 8005afa:	e000      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005afc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005afe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d110      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005b06:	4b07      	ldr	r3, [pc, #28]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b18:	4a02      	ldr	r2, [pc, #8]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005b22:	bf00      	nop
 8005b24:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b28:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b2c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005b3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b3e:	2300      	movs	r3, #0
 8005b40:	657b      	str	r3, [r7, #84]	; 0x54
 8005b42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005b46:	460b      	mov	r3, r1
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f000 80b5 	beq.w	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b54:	4b9d      	ldr	r3, [pc, #628]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b5a:	f003 0304 	and.w	r3, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d113      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b62:	4b9a      	ldr	r3, [pc, #616]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b68:	4a98      	ldr	r2, [pc, #608]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b6a:	f043 0304 	orr.w	r3, r3, #4
 8005b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b72:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b8a:	4b91      	ldr	r3, [pc, #580]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	4a90      	ldr	r2, [pc, #576]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005b90:	f043 0301 	orr.w	r3, r3, #1
 8005b94:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b96:	f7fb fbbf 	bl	8001318 <HAL_GetTick>
 8005b9a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b9e:	e00b      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba0:	f7fb fbba 	bl	8001318 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d903      	bls.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005bb6:	e005      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005bb8:	4b85      	ldr	r3, [pc, #532]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ed      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005bc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d165      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bcc:	4b7f      	ldr	r3, [pc, #508]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d023      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005be6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d01b      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bf2:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c00:	4b72      	ldr	r3, [pc, #456]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c06:	4a71      	ldr	r2, [pc, #452]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c10:	4b6e      	ldr	r3, [pc, #440]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c16:	4a6d      	ldr	r2, [pc, #436]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c20:	4a6a      	ldr	r2, [pc, #424]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d019      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c36:	f7fb fb6f 	bl	8001318 <HAL_GetTick>
 8005c3a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c3e:	e00d      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c40:	f7fb fb6a 	bl	8001318 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c4a:	1ad2      	subs	r2, r2, r3
 8005c4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d903      	bls.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005c5a:	e006      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5c:	4b5b      	ldr	r3, [pc, #364]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ea      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005c6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10d      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c72:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c84:	4a51      	ldr	r2, [pc, #324]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c86:	430b      	orrs	r3, r1
 8005c88:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c92:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005c96:	e003      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c98:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c9c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ca0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b48      	ldr	r3, [pc, #288]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cae:	4a47      	ldr	r2, [pc, #284]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cb0:	f023 0304 	bic.w	r3, r3, #4
 8005cb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005cc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	d042      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cdc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ce0:	d022      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005ce2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005ce6:	d81b      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005ce8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cec:	d011      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf2:	d815      	bhi.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d019      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cfc:	d110      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d02:	3308      	adds	r3, #8
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f9ed 	bl	80060e4 <RCCEx_PLL2_Config>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d10:	e00d      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d12:	4b2e      	ldr	r3, [pc, #184]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	4a2d      	ldr	r2, [pc, #180]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005d1e:	e006      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d26:	e002      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005d28:	bf00      	nop
 8005d2a:	e000      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005d2c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d2e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10d      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d3c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005d40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d48:	4a20      	ldr	r2, [pc, #128]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d56:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
 8005d68:	2300      	movs	r3, #0
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005d6c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d032      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d82:	d00b      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d88:	d804      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d008      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	d007      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d9a:	e004      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e002      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005da0:	bf00      	nop
 8005da2:	e000      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005da4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005da6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d112      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005dae:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005db0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005db4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005dc0:	4a02      	ldr	r2, [pc, #8]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005dc8:	e008      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005dca:	bf00      	nop
 8005dcc:	46020c00 	.word	0x46020c00
 8005dd0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005dd8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005ddc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dea:	2300      	movs	r3, #0
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d00c      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005df8:	4b98      	ldr	r3, [pc, #608]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dfe:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e0a:	4a94      	ldr	r2, [pc, #592]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e20:	2300      	movs	r3, #0
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34
 8005e24:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	d019      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e3a:	d105      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e3c:	4b87      	ldr	r3, [pc, #540]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	4a86      	ldr	r2, [pc, #536]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e46:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005e48:	4b84      	ldr	r3, [pc, #528]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e4e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e5a:	4a80      	ldr	r2, [pc, #512]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e5c:	430b      	orrs	r3, r1
 8005e5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e70:	2300      	movs	r3, #0
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e74:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	d00c      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005e7e:	4b77      	ldr	r3, [pc, #476]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e90:	4972      	ldr	r1, [pc, #456]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	d00c      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005eb4:	4b69      	ldr	r3, [pc, #420]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ec6:	4965      	ldr	r1, [pc, #404]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
 8005ee0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d00c      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005eea:	4b5c      	ldr	r3, [pc, #368]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ef0:	f023 0218 	bic.w	r2, r3, #24
 8005ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005efc:	4957      	ldr	r1, [pc, #348]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
 8005f16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	d032      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005f20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2c:	d105      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2e:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	4a4a      	ldr	r2, [pc, #296]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f38:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005f3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005f46:	d108      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 f8c8 	bl	80060e4 <RCCEx_PLL2_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005f5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10d      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005f62:	4b3e      	ldr	r3, [pc, #248]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f74:	4939      	ldr	r1, [pc, #228]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f82:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005f92:	60bb      	str	r3, [r7, #8]
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	d03a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fae:	d00e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb4:	d815      	bhi.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d017      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005fba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fbe:	d110      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fc0:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	4a25      	ldr	r2, [pc, #148]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fca:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005fcc:	e00e      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd2:	3308      	adds	r3, #8
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 f885 	bl	80060e4 <RCCEx_PLL2_Config>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005fe0:	e004      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005fe8:	e000      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005fea:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005ff4:	4b19      	ldr	r3, [pc, #100]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ffa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006006:	4915      	ldr	r1, [pc, #84]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006008:	4313      	orrs	r3, r2
 800600a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006014:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006024:	603b      	str	r3, [r7, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d00c      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006034:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800603a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006042:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006046:	4905      	ldr	r1, [pc, #20]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006048:	4313      	orrs	r3, r2
 800604a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800604e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006052:	4618      	mov	r0, r3
 8006054:	37e8      	adds	r7, #232	; 0xe8
 8006056:	46bd      	mov	sp, r7
 8006058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605c:	46020c00 	.word	0x46020c00

08006060 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(const RCC_CRSInitTypeDef *const pInit)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8006068:	4b1c      	ldr	r3, [pc, #112]	; (80060dc <HAL_RCCEx_CRSConfig+0x7c>)
 800606a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800606c:	4a1b      	ldr	r2, [pc, #108]	; (80060dc <HAL_RCCEx_CRSConfig+0x7c>)
 800606e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006072:	6753      	str	r3, [r2, #116]	; 0x74
  __HAL_RCC_CRS_RELEASE_RESET();
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <HAL_RCCEx_CRSConfig+0x7c>)
 8006076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006078:	4a18      	ldr	r2, [pc, #96]	; (80060dc <HAL_RCCEx_CRSConfig+0x7c>)
 800607a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800607e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	041b      	lsls	r3, r3, #16
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80060a8:	4a0d      	ldr	r2, [pc, #52]	; (80060e0 <HAL_RCCEx_CRSConfig+0x80>)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80060ae:	4b0c      	ldr	r3, [pc, #48]	; (80060e0 <HAL_RCCEx_CRSConfig+0x80>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	4908      	ldr	r1, [pc, #32]	; (80060e0 <HAL_RCCEx_CRSConfig+0x80>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <HAL_RCCEx_CRSConfig+0x80>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <HAL_RCCEx_CRSConfig+0x80>)
 80060c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80060cc:	6013      	str	r3, [r2, #0]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	46020c00 	.word	0x46020c00
 80060e0:	40006000 	.word	0x40006000

080060e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80060ec:	4b47      	ldr	r3, [pc, #284]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a46      	ldr	r2, [pc, #280]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80060f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060f8:	f7fb f90e 	bl	8001318 <HAL_GetTick>
 80060fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060fe:	e008      	b.n	8006112 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006100:	f7fb f90a 	bl	8001318 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e077      	b.n	8006202 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006112:	4b3e      	ldr	r3, [pc, #248]	; (800620c <RCCEx_PLL2_Config+0x128>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1f0      	bne.n	8006100 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800611e:	4b3b      	ldr	r3, [pc, #236]	; (800620c <RCCEx_PLL2_Config+0x128>)
 8006120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006122:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006126:	f023 0303 	bic.w	r3, r3, #3
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6852      	ldr	r2, [r2, #4]
 8006132:	3a01      	subs	r2, #1
 8006134:	0212      	lsls	r2, r2, #8
 8006136:	430a      	orrs	r2, r1
 8006138:	4934      	ldr	r1, [pc, #208]	; (800620c <RCCEx_PLL2_Config+0x128>)
 800613a:	4313      	orrs	r3, r2
 800613c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800613e:	4b33      	ldr	r3, [pc, #204]	; (800620c <RCCEx_PLL2_Config+0x128>)
 8006140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006142:	4b33      	ldr	r3, [pc, #204]	; (8006210 <RCCEx_PLL2_Config+0x12c>)
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6892      	ldr	r2, [r2, #8]
 800614a:	3a01      	subs	r2, #1
 800614c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68d2      	ldr	r2, [r2, #12]
 8006154:	3a01      	subs	r2, #1
 8006156:	0252      	lsls	r2, r2, #9
 8006158:	b292      	uxth	r2, r2
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6912      	ldr	r2, [r2, #16]
 8006160:	3a01      	subs	r2, #1
 8006162:	0412      	lsls	r2, r2, #16
 8006164:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6952      	ldr	r2, [r2, #20]
 800616e:	3a01      	subs	r2, #1
 8006170:	0612      	lsls	r2, r2, #24
 8006172:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006176:	430a      	orrs	r2, r1
 8006178:	4924      	ldr	r1, [pc, #144]	; (800620c <RCCEx_PLL2_Config+0x128>)
 800617a:	4313      	orrs	r3, r2
 800617c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800617e:	4b23      	ldr	r3, [pc, #140]	; (800620c <RCCEx_PLL2_Config+0x128>)
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	f023 020c 	bic.w	r2, r3, #12
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	4920      	ldr	r1, [pc, #128]	; (800620c <RCCEx_PLL2_Config+0x128>)
 800618c:	4313      	orrs	r3, r2
 800618e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006190:	4b1e      	ldr	r3, [pc, #120]	; (800620c <RCCEx_PLL2_Config+0x128>)
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	491c      	ldr	r1, [pc, #112]	; (800620c <RCCEx_PLL2_Config+0x128>)
 800619a:	4313      	orrs	r3, r2
 800619c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800619e:	4b1b      	ldr	r3, [pc, #108]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	4a1a      	ldr	r2, [pc, #104]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061a4:	f023 0310 	bic.w	r3, r3, #16
 80061a8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	69d2      	ldr	r2, [r2, #28]
 80061ba:	00d2      	lsls	r2, r2, #3
 80061bc:	4913      	ldr	r1, [pc, #76]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80061c2:	4b12      	ldr	r3, [pc, #72]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c6:	4a11      	ldr	r2, [pc, #68]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061c8:	f043 0310 	orr.w	r3, r3, #16
 80061cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80061ce:	4b0f      	ldr	r3, [pc, #60]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a0e      	ldr	r2, [pc, #56]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061da:	f7fb f89d 	bl	8001318 <HAL_GetTick>
 80061de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061e0:	e008      	b.n	80061f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061e2:	f7fb f899 	bl	8001318 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <RCCEx_PLL2_Config+0x128>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006200:	2300      	movs	r3, #0

}
 8006202:	4618      	mov	r0, r3
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	46020c00 	.word	0x46020c00
 8006210:	80800000 	.word	0x80800000

08006214 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800621c:	4b47      	ldr	r3, [pc, #284]	; (800633c <RCCEx_PLL3_Config+0x128>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a46      	ldr	r2, [pc, #280]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006226:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006228:	f7fb f876 	bl	8001318 <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800622e:	e008      	b.n	8006242 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006230:	f7fb f872 	bl	8001318 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e077      	b.n	8006332 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006242:	4b3e      	ldr	r3, [pc, #248]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1f0      	bne.n	8006230 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800624e:	4b3b      	ldr	r3, [pc, #236]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6852      	ldr	r2, [r2, #4]
 8006262:	3a01      	subs	r2, #1
 8006264:	0212      	lsls	r2, r2, #8
 8006266:	430a      	orrs	r2, r1
 8006268:	4934      	ldr	r1, [pc, #208]	; (800633c <RCCEx_PLL3_Config+0x128>)
 800626a:	4313      	orrs	r3, r2
 800626c:	630b      	str	r3, [r1, #48]	; 0x30
 800626e:	4b33      	ldr	r3, [pc, #204]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	4b33      	ldr	r3, [pc, #204]	; (8006340 <RCCEx_PLL3_Config+0x12c>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6892      	ldr	r2, [r2, #8]
 800627a:	3a01      	subs	r2, #1
 800627c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68d2      	ldr	r2, [r2, #12]
 8006284:	3a01      	subs	r2, #1
 8006286:	0252      	lsls	r2, r2, #9
 8006288:	b292      	uxth	r2, r2
 800628a:	4311      	orrs	r1, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6912      	ldr	r2, [r2, #16]
 8006290:	3a01      	subs	r2, #1
 8006292:	0412      	lsls	r2, r2, #16
 8006294:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6952      	ldr	r2, [r2, #20]
 800629e:	3a01      	subs	r2, #1
 80062a0:	0612      	lsls	r2, r2, #24
 80062a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80062a6:	430a      	orrs	r2, r1
 80062a8:	4924      	ldr	r1, [pc, #144]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80062ae:	4b23      	ldr	r3, [pc, #140]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f023 020c 	bic.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	4920      	ldr	r1, [pc, #128]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80062c0:	4b1e      	ldr	r3, [pc, #120]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	491c      	ldr	r1, [pc, #112]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80062ce:	4b1b      	ldr	r3, [pc, #108]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	4a1a      	ldr	r2, [pc, #104]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062d4:	f023 0310 	bic.w	r3, r3, #16
 80062d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062da:	4b18      	ldr	r3, [pc, #96]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	69d2      	ldr	r2, [r2, #28]
 80062ea:	00d2      	lsls	r2, r2, #3
 80062ec:	4913      	ldr	r1, [pc, #76]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	4a11      	ldr	r2, [pc, #68]	; (800633c <RCCEx_PLL3_Config+0x128>)
 80062f8:	f043 0310 	orr.w	r3, r3, #16
 80062fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80062fe:	4b0f      	ldr	r3, [pc, #60]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a0e      	ldr	r2, [pc, #56]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006308:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800630a:	f7fb f805 	bl	8001318 <HAL_GetTick>
 800630e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006310:	e008      	b.n	8006324 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006312:	f7fb f801 	bl	8001318 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b02      	cmp	r3, #2
 800631e:	d901      	bls.n	8006324 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e006      	b.n	8006332 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006324:	4b05      	ldr	r3, [pc, #20]	; (800633c <RCCEx_PLL3_Config+0x128>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d0f0      	beq.n	8006312 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	46020c00 	.word	0x46020c00
 8006340:	80800000 	.word	0x80800000

08006344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e049      	b.n	80063ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f841 	bl	80063f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f000 fa88 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b01      	cmp	r3, #1
 800641a:	d001      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e072      	b.n	8006506 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0201 	orr.w	r2, r2, #1
 8006436:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a35      	ldr	r2, [pc, #212]	; (8006514 <HAL_TIM_Base_Start_IT+0x10c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d040      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a34      	ldr	r2, [pc, #208]	; (8006518 <HAL_TIM_Base_Start_IT+0x110>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d03b      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006454:	d036      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800645e:	d031      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a2d      	ldr	r2, [pc, #180]	; (800651c <HAL_TIM_Base_Start_IT+0x114>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d02c      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <HAL_TIM_Base_Start_IT+0x118>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d027      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_TIM_Base_Start_IT+0x11c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d022      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a29      	ldr	r2, [pc, #164]	; (8006528 <HAL_TIM_Base_Start_IT+0x120>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d01d      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_TIM_Base_Start_IT+0x124>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d018      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_TIM_Base_Start_IT+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_TIM_Base_Start_IT+0x12c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00e      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a23      	ldr	r2, [pc, #140]	; (8006538 <HAL_TIM_Base_Start_IT+0x130>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d009      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a21      	ldr	r2, [pc, #132]	; (800653c <HAL_TIM_Base_Start_IT+0x134>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <HAL_TIM_Base_Start_IT+0xbc>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_TIM_Base_Start_IT+0x138>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d115      	bne.n	80064f0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <HAL_TIM_Base_Start_IT+0x13c>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2b06      	cmp	r3, #6
 80064d4:	d015      	beq.n	8006502 <HAL_TIM_Base_Start_IT+0xfa>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064dc:	d011      	beq.n	8006502 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0201 	orr.w	r2, r2, #1
 80064ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ee:	e008      	b.n	8006502 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e000      	b.n	8006504 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40012c00 	.word	0x40012c00
 8006518:	50012c00 	.word	0x50012c00
 800651c:	40000400 	.word	0x40000400
 8006520:	50000400 	.word	0x50000400
 8006524:	40000800 	.word	0x40000800
 8006528:	50000800 	.word	0x50000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	50000c00 	.word	0x50000c00
 8006534:	40013400 	.word	0x40013400
 8006538:	50013400 	.word	0x50013400
 800653c:	40014000 	.word	0x40014000
 8006540:	50014000 	.word	0x50014000
 8006544:	00010007 	.word	0x00010007

08006548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b02      	cmp	r3, #2
 800655c:	d122      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0302 	and.w	r3, r3, #2
 8006568:	2b02      	cmp	r3, #2
 800656a:	d11b      	bne.n	80065a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0202 	mvn.w	r2, #2
 8006574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f003 0303 	and.w	r3, r3, #3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f965 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 8006590:	e005      	b.n	800659e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f957 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f968 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d122      	bne.n	80065f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d11b      	bne.n	80065f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f06f 0204 	mvn.w	r2, #4
 80065c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 f93b 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 80065e4:	e005      	b.n	80065f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f92d 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f93e 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b08      	cmp	r3, #8
 8006604:	d122      	bne.n	800664c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	f003 0308 	and.w	r3, r3, #8
 8006610:	2b08      	cmp	r3, #8
 8006612:	d11b      	bne.n	800664c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f06f 0208 	mvn.w	r2, #8
 800661c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2204      	movs	r2, #4
 8006622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f003 0303 	and.w	r3, r3, #3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f911 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 8006638:	e005      	b.n	8006646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f903 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f914 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b10      	cmp	r3, #16
 8006658:	d122      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b10      	cmp	r3, #16
 8006666:	d11b      	bne.n	80066a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0210 	mvn.w	r2, #16
 8006670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2208      	movs	r2, #8
 8006676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006682:	2b00      	cmp	r3, #0
 8006684:	d003      	beq.n	800668e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8e7 	bl	800685a <HAL_TIM_IC_CaptureCallback>
 800668c:	e005      	b.n	800669a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8d9 	bl	8006846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f8ea 	bl	800686e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d10e      	bne.n	80066cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d107      	bne.n	80066cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f06f 0201 	mvn.w	r2, #1
 80066c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fa fa8c 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d10e      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e4:	2b80      	cmp	r3, #128	; 0x80
 80066e6:	d107      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9d4 	bl	8006aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	d10e      	bne.n	8006726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	d107      	bne.n	8006726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800671e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f9c7 	bl	8006ab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d10e      	bne.n	8006752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b40      	cmp	r3, #64	; 0x40
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f898 	bl	8006882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0320 	and.w	r3, r3, #32
 800675c:	2b20      	cmp	r3, #32
 800675e:	d10e      	bne.n	800677e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b20      	cmp	r3, #32
 800676c:	d107      	bne.n	800677e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f06f 0220 	mvn.w	r2, #32
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f987 	bl	8006a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800678c:	d10f      	bne.n	80067ae <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006798:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800679c:	d107      	bne.n	80067ae <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80067a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f98d 	bl	8006ac8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067bc:	d10f      	bne.n	80067de <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067cc:	d107      	bne.n	80067de <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80067d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f97f 	bl	8006adc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ec:	d10f      	bne.n	800680e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067fc:	d107      	bne.n	800680e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f971 	bl	8006af0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800681c:	d10f      	bne.n	800683e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006828:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800682c:	d107      	bne.n	800683e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f963 	bl	8006b04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800683e:	bf00      	nop
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
	...

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a68      	ldr	r2, [pc, #416]	; (8006a4c <TIM_Base_SetConfig+0x1b4>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d02b      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a67      	ldr	r2, [pc, #412]	; (8006a50 <TIM_Base_SetConfig+0x1b8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d027      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068be:	d023      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068c6:	d01f      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a62      	ldr	r2, [pc, #392]	; (8006a54 <TIM_Base_SetConfig+0x1bc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01b      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a61      	ldr	r2, [pc, #388]	; (8006a58 <TIM_Base_SetConfig+0x1c0>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d017      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a60      	ldr	r2, [pc, #384]	; (8006a5c <TIM_Base_SetConfig+0x1c4>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a5f      	ldr	r2, [pc, #380]	; (8006a60 <TIM_Base_SetConfig+0x1c8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a5e      	ldr	r2, [pc, #376]	; (8006a64 <TIM_Base_SetConfig+0x1cc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a5d      	ldr	r2, [pc, #372]	; (8006a68 <TIM_Base_SetConfig+0x1d0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a5c      	ldr	r2, [pc, #368]	; (8006a6c <TIM_Base_SetConfig+0x1d4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x70>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a5b      	ldr	r2, [pc, #364]	; (8006a70 <TIM_Base_SetConfig+0x1d8>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a4b      	ldr	r2, [pc, #300]	; (8006a4c <TIM_Base_SetConfig+0x1b4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d043      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a4a      	ldr	r2, [pc, #296]	; (8006a50 <TIM_Base_SetConfig+0x1b8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03f      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006930:	d03b      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006938:	d037      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a45      	ldr	r2, [pc, #276]	; (8006a54 <TIM_Base_SetConfig+0x1bc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d033      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a44      	ldr	r2, [pc, #272]	; (8006a58 <TIM_Base_SetConfig+0x1c0>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d02f      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a43      	ldr	r2, [pc, #268]	; (8006a5c <TIM_Base_SetConfig+0x1c4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d02b      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a42      	ldr	r2, [pc, #264]	; (8006a60 <TIM_Base_SetConfig+0x1c8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d027      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a41      	ldr	r2, [pc, #260]	; (8006a64 <TIM_Base_SetConfig+0x1cc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d023      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a40      	ldr	r2, [pc, #256]	; (8006a68 <TIM_Base_SetConfig+0x1d0>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d01f      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a3f      	ldr	r2, [pc, #252]	; (8006a6c <TIM_Base_SetConfig+0x1d4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d01b      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a3e      	ldr	r2, [pc, #248]	; (8006a70 <TIM_Base_SetConfig+0x1d8>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d017      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a3d      	ldr	r2, [pc, #244]	; (8006a74 <TIM_Base_SetConfig+0x1dc>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d013      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a3c      	ldr	r2, [pc, #240]	; (8006a78 <TIM_Base_SetConfig+0x1e0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00f      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a3b      	ldr	r2, [pc, #236]	; (8006a7c <TIM_Base_SetConfig+0x1e4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d00b      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a3a      	ldr	r2, [pc, #232]	; (8006a80 <TIM_Base_SetConfig+0x1e8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d007      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a39      	ldr	r2, [pc, #228]	; (8006a84 <TIM_Base_SetConfig+0x1ec>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d003      	beq.n	80069aa <TIM_Base_SetConfig+0x112>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a38      	ldr	r2, [pc, #224]	; (8006a88 <TIM_Base_SetConfig+0x1f0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d108      	bne.n	80069bc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a1a      	ldr	r2, [pc, #104]	; (8006a4c <TIM_Base_SetConfig+0x1b4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d023      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a19      	ldr	r2, [pc, #100]	; (8006a50 <TIM_Base_SetConfig+0x1b8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d01f      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <TIM_Base_SetConfig+0x1d4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d01b      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a1d      	ldr	r2, [pc, #116]	; (8006a70 <TIM_Base_SetConfig+0x1d8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d017      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a1c      	ldr	r2, [pc, #112]	; (8006a74 <TIM_Base_SetConfig+0x1dc>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d013      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <TIM_Base_SetConfig+0x1e0>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00f      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <TIM_Base_SetConfig+0x1e4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00b      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a19      	ldr	r2, [pc, #100]	; (8006a80 <TIM_Base_SetConfig+0x1e8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a18      	ldr	r2, [pc, #96]	; (8006a84 <TIM_Base_SetConfig+0x1ec>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_Base_SetConfig+0x198>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <TIM_Base_SetConfig+0x1f0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d103      	bne.n	8006a38 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	615a      	str	r2, [r3, #20]
}
 8006a3e:	bf00      	nop
 8006a40:	3714      	adds	r7, #20
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40012c00 	.word	0x40012c00
 8006a50:	50012c00 	.word	0x50012c00
 8006a54:	40000400 	.word	0x40000400
 8006a58:	50000400 	.word	0x50000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	50000800 	.word	0x50000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	50000c00 	.word	0x50000c00
 8006a6c:	40013400 	.word	0x40013400
 8006a70:	50013400 	.word	0x50013400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	50014000 	.word	0x50014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	50014400 	.word	0x50014400
 8006a84:	40014800 	.word	0x40014800
 8006a88:	50014800 	.word	0x50014800

08006a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aa8:	bf00      	nop
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b08b      	sub	sp, #44	; 0x2c
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	fa93 f3a3 	rbit	r3, r3
 8006b32:	613b      	str	r3, [r7, #16]
  return result;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8006b3e:	2320      	movs	r3, #32
 8006b40:	e003      	b.n	8006b4a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	fab3 f383 	clz	r3, r3
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	005b      	lsls	r3, r3, #1
 8006b4c:	2103      	movs	r1, #3
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	401a      	ands	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	fa93 f3a3 	rbit	r3, r3
 8006b60:	61fb      	str	r3, [r7, #28]
  return result;
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006b6c:	2320      	movs	r3, #32
 8006b6e:	e003      	b.n	8006b78 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	fab3 f383 	clz	r3, r3
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	005b      	lsls	r3, r3, #1
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	601a      	str	r2, [r3, #0]
}
 8006b86:	bf00      	nop
 8006b88:	372c      	adds	r7, #44	; 0x2c
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	43db      	mvns	r3, r3
 8006ba6:	401a      	ands	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	605a      	str	r2, [r3, #4]
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr

08006bc2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b08b      	sub	sp, #44	; 0x2c
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fa93 f3a3 	rbit	r3, r3
 8006bdc:	613b      	str	r3, [r7, #16]
  return result;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006be8:	2320      	movs	r3, #32
 8006bea:	e003      	b.n	8006bf4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	2103      	movs	r1, #3
 8006bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	401a      	ands	r2, r3
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	fa93 f3a3 	rbit	r3, r3
 8006c0a:	61fb      	str	r3, [r7, #28]
  return result;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006c16:	2320      	movs	r3, #32
 8006c18:	e003      	b.n	8006c22 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	fab3 f383 	clz	r3, r3
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	fa01 f303 	lsl.w	r3, r1, r3
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006c30:	bf00      	nop
 8006c32:	372c      	adds	r7, #44	; 0x2c
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b08b      	sub	sp, #44	; 0x2c
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	fa93 f3a3 	rbit	r3, r3
 8006c56:	613b      	str	r3, [r7, #16]
  return result;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8006c62:	2320      	movs	r3, #32
 8006c64:	e003      	b.n	8006c6e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	fab3 f383 	clz	r3, r3
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	2103      	movs	r1, #3
 8006c72:	fa01 f303 	lsl.w	r3, r1, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	401a      	ands	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	fa93 f3a3 	rbit	r3, r3
 8006c84:	61fb      	str	r3, [r7, #28]
  return result;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006c90:	2320      	movs	r3, #32
 8006c92:	e003      	b.n	8006c9c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	fab3 f383 	clz	r3, r3
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	60da      	str	r2, [r3, #12]
}
 8006caa:	bf00      	nop
 8006cac:	372c      	adds	r7, #44	; 0x2c
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b08b      	sub	sp, #44	; 0x2c
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1a      	ldr	r2, [r3, #32]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	fa93 f3a3 	rbit	r3, r3
 8006cd0:	613b      	str	r3, [r7, #16]
  return result;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006cdc:	2320      	movs	r3, #32
 8006cde:	e003      	b.n	8006ce8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	fab3 f383 	clz	r3, r3
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	210f      	movs	r1, #15
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	fa93 f3a3 	rbit	r3, r3
 8006cfe:	61fb      	str	r3, [r7, #28]
  return result;
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006d0a:	2320      	movs	r3, #32
 8006d0c:	e003      	b.n	8006d16 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	fab3 f383 	clz	r3, r3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006d24:	bf00      	nop
 8006d26:	372c      	adds	r7, #44	; 0x2c
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b08b      	sub	sp, #44	; 0x2c
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	0a1b      	lsrs	r3, r3, #8
 8006d44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	fa93 f3a3 	rbit	r3, r3
 8006d4c:	613b      	str	r3, [r7, #16]
  return result;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006d58:	2320      	movs	r3, #32
 8006d5a:	e003      	b.n	8006d64 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	fab3 f383 	clz	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	210f      	movs	r1, #15
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	401a      	ands	r2, r3
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	fa93 f3a3 	rbit	r3, r3
 8006d7c:	61fb      	str	r3, [r7, #28]
  return result;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	e003      	b.n	8006d94 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	fab3 f383 	clz	r3, r3
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006da2:	bf00      	nop
 8006da4:	372c      	adds	r7, #44	; 0x2c
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr

08006dae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b08a      	sub	sp, #40	; 0x28
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	fa93 f3a3 	rbit	r3, r3
 8006dc4:	617b      	str	r3, [r7, #20]
  return result;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <LL_GPIO_Init+0x26>
    return 32U;
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	e003      	b.n	8006ddc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	fab3 f383 	clz	r3, r3
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8006dde:	e058      	b.n	8006e92 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	2101      	movs	r1, #1
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	4013      	ands	r3, r2
 8006dee:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d04a      	beq.n	8006e8c <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d003      	beq.n	8006e06 <LL_GPIO_Init+0x58>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d10e      	bne.n	8006e24 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	6a39      	ldr	r1, [r7, #32]
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7ff fed7 	bl	8006bc2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6819      	ldr	r1, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff feb7 	bl	8006b92 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6a39      	ldr	r1, [r7, #32]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7ff ff05 	bl	8006c3c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d121      	bne.n	8006e7e <LL_GPIO_Init+0xd0>
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	fa93 f3a3 	rbit	r3, r3
 8006e44:	60bb      	str	r3, [r7, #8]
  return result;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <LL_GPIO_Init+0xa6>
    return 32U;
 8006e50:	2320      	movs	r3, #32
 8006e52:	e003      	b.n	8006e5c <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	fab3 f383 	clz	r3, r3
 8006e5a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8006e5c:	2b07      	cmp	r3, #7
 8006e5e:	d807      	bhi.n	8006e70 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6a39      	ldr	r1, [r7, #32]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ff24 	bl	8006cb6 <LL_GPIO_SetAFPin_0_7>
 8006e6e:	e006      	b.n	8006e7e <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6a39      	ldr	r1, [r7, #32]
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff ff59 	bl	8006d30 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	461a      	mov	r2, r3
 8006e84:	6a39      	ldr	r1, [r7, #32]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7ff fe46 	bl	8006b18 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	3301      	adds	r3, #1
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d19f      	bne.n	8006de0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3728      	adds	r7, #40	; 0x28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eaa:	b084      	sub	sp, #16
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	f107 001c 	add.w	r0, r7, #28
 8006eb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fa67 	bl	800739c <USB_CoreReset>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ee4:	e005      	b.n	8006ef2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006efe:	b004      	add	sp, #16
 8006f00:	4770      	bx	lr

08006f02 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f023 0201 	bic.w	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d115      	bne.n	8006f72 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f52:	2001      	movs	r0, #1
 8006f54:	f7fa f9ec 	bl	8001330 <HAL_Delay>
      ms++;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa0e 	bl	8007380 <USB_GetMode>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d01e      	beq.n	8006fa8 <USB_SetCurrentMode+0x84>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b31      	cmp	r3, #49	; 0x31
 8006f6e:	d9f0      	bls.n	8006f52 <USB_SetCurrentMode+0x2e>
 8006f70:	e01a      	b.n	8006fa8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f72:	78fb      	ldrb	r3, [r7, #3]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d115      	bne.n	8006fa4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f84:	2001      	movs	r0, #1
 8006f86:	f7fa f9d3 	bl	8001330 <HAL_Delay>
      ms++;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f9f5 	bl	8007380 <USB_GetMode>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <USB_SetCurrentMode+0x84>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b31      	cmp	r3, #49	; 0x31
 8006fa0:	d9f0      	bls.n	8006f84 <USB_SetCurrentMode+0x60>
 8006fa2:	e001      	b.n	8006fa8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e005      	b.n	8006fb4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2b32      	cmp	r3, #50	; 0x32
 8006fac:	d101      	bne.n	8006fb2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e000      	b.n	8006fb4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	e009      	b.n	8006ff0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	3340      	adds	r3, #64	; 0x40
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	3301      	adds	r3, #1
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b0e      	cmp	r3, #14
 8006ff4:	d9f2      	bls.n	8006fdc <USB_DevInit+0x20>
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11c      	bne.n	8007036 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800700a:	f043 0302 	orr.w	r3, r3, #2
 800700e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	e005      	b.n	8007042 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007048:	461a      	mov	r2, r3
 800704a:	2300      	movs	r3, #0
 800704c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800704e:	2103      	movs	r1, #3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f95b 	bl	800730c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007056:	2110      	movs	r1, #16
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8f3 	bl	8007244 <USB_FlushTxFifo>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d001      	beq.n	8007068 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f91f 	bl	80072ac <USB_FlushRxFifo>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800707e:	461a      	mov	r2, r3
 8007080:	2300      	movs	r3, #0
 8007082:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708a:	461a      	mov	r2, r3
 800708c:	2300      	movs	r3, #0
 800708e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	461a      	mov	r2, r3
 8007098:	2300      	movs	r3, #0
 800709a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800709c:	2300      	movs	r3, #0
 800709e:	613b      	str	r3, [r7, #16]
 80070a0:	e043      	b.n	800712a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070b8:	d118      	bne.n	80070ec <USB_DevInit+0x130>
    {
      if (i == 0U)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070cc:	461a      	mov	r2, r3
 80070ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	e013      	b.n	80070fe <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e2:	461a      	mov	r2, r3
 80070e4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	e008      	b.n	80070fe <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f8:	461a      	mov	r2, r3
 80070fa:	2300      	movs	r3, #0
 80070fc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	461a      	mov	r2, r3
 800710c:	2300      	movs	r3, #0
 800710e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	015a      	lsls	r2, r3, #5
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711c:	461a      	mov	r2, r3
 800711e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007122:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	3301      	adds	r3, #1
 8007128:	613b      	str	r3, [r7, #16]
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	429a      	cmp	r2, r3
 8007130:	d3b7      	bcc.n	80070a2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007132:	2300      	movs	r3, #0
 8007134:	613b      	str	r3, [r7, #16]
 8007136:	e043      	b.n	80071c0 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800714a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800714e:	d118      	bne.n	8007182 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10a      	bne.n	800716c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007162:	461a      	mov	r2, r3
 8007164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	e013      	b.n	8007194 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007178:	461a      	mov	r2, r3
 800717a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	e008      	b.n	8007194 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	461a      	mov	r2, r3
 8007190:	2300      	movs	r3, #0
 8007192:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a0:	461a      	mov	r2, r3
 80071a2:	2300      	movs	r3, #0
 80071a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b2:	461a      	mov	r2, r3
 80071b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80071b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d3b7      	bcc.n	8007138 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d105      	bne.n	80071fc <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f043 0210 	orr.w	r2, r3, #16
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	4b0f      	ldr	r3, [pc, #60]	; (8007240 <USB_DevInit+0x284>)
 8007202:	4313      	orrs	r3, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800720a:	2b00      	cmp	r3, #0
 800720c:	d005      	beq.n	800721a <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	f043 0208 	orr.w	r2, r3, #8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800721a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800721c:	2b01      	cmp	r3, #1
 800721e:	d107      	bne.n	8007230 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007228:	f043 0304 	orr.w	r3, r3, #4
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007230:	7dfb      	ldrb	r3, [r7, #23]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800723c:	b004      	add	sp, #16
 800723e:	4770      	bx	lr
 8007240:	803c3800 	.word	0x803c3800

08007244 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3301      	adds	r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <USB_FlushTxFifo+0x64>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e01b      	b.n	800729c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	daf2      	bge.n	8007252 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	019b      	lsls	r3, r3, #6
 8007274:	f043 0220 	orr.w	r2, r3, #32
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	3301      	adds	r3, #1
 8007280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a08      	ldr	r2, [pc, #32]	; (80072a8 <USB_FlushTxFifo+0x64>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d901      	bls.n	800728e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e006      	b.n	800729c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b20      	cmp	r3, #32
 8007298:	d0f0      	beq.n	800727c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	00030d40 	.word	0x00030d40

080072ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a11      	ldr	r2, [pc, #68]	; (8007308 <USB_FlushRxFifo+0x5c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d901      	bls.n	80072ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072c6:	2303      	movs	r3, #3
 80072c8:	e018      	b.n	80072fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	daf2      	bge.n	80072b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2210      	movs	r2, #16
 80072da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a08      	ldr	r2, [pc, #32]	; (8007308 <USB_FlushRxFifo+0x5c>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d901      	bls.n	80072ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e006      	b.n	80072fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d0f0      	beq.n	80072dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr
 8007308:	00030d40 	.word	0x00030d40

0800730c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732c:	4313      	orrs	r3, r2
 800732e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007358:	f023 0303 	bic.w	r3, r3, #3
 800735c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800736c:	f043 0302 	orr.w	r3, r3, #2
 8007370:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	f003 0301 	and.w	r3, r3, #1
}
 8007390:	4618      	mov	r0, r3
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3301      	adds	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a13      	ldr	r2, [pc, #76]	; (8007400 <USB_CoreReset+0x64>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d901      	bls.n	80073ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e01b      	b.n	80073f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	daf2      	bge.n	80073a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f043 0201 	orr.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4a09      	ldr	r2, [pc, #36]	; (8007400 <USB_CoreReset+0x64>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e006      	b.n	80073f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d0f0      	beq.n	80073d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	00030d40 	.word	0x00030d40

08007404 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08e      	sub	sp, #56	; 0x38
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8007412:	2234      	movs	r2, #52	; 0x34
 8007414:	2100      	movs	r1, #0
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f001 f850 	bl	80084bc <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	f1a3 0208 	sub.w	r2, r3, #8
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2202      	movs	r2, #2
 8007450:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8007456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	4413      	add	r3, r2
 800745c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	3b04      	subs	r3, #4
 8007462:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007470:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	3b04      	subs	r3, #4
 8007476:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800748e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8007494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007496:	3304      	adds	r3, #4
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <_tx_byte_pool_create+0x11c>)
 80074a2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	621a      	str	r2, [r3, #32]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074aa:	f3ef 8310 	mrs	r3, PRIMASK
 80074ae:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 80074b0:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 80074b2:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 80074b4:	b672      	cpsid	i
#endif
    return(int_posture);
 80074b6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4a19      	ldr	r2, [pc, #100]	; (8007524 <_tx_byte_pool_create+0x120>)
 80074be:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <_tx_byte_pool_create+0x124>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d109      	bne.n	80074dc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <_tx_byte_pool_create+0x128>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
 80074da:	e011      	b.n	8007500 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80074dc:	4b13      	ldr	r3, [pc, #76]	; (800752c <_tx_byte_pool_create+0x128>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a3a      	ldr	r2, [r7, #32]
 80074fe:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <_tx_byte_pool_create+0x124>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a08      	ldr	r2, [pc, #32]	; (8007528 <_tx_byte_pool_create+0x124>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f383 8810 	msr	PRIMASK, r3
}
 8007514:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3738      	adds	r7, #56	; 0x38
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	ffffeeee 	.word	0xffffeeee
 8007524:	42595445 	.word	0x42595445
 8007528:	20000be4 	.word	0x20000be4
 800752c:	20000be0 	.word	0x20000be0

08007530 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8007534:	f000 f960 	bl	80077f8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8007538:	f000 fce8 	bl	8007f0c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800753c:	4b12      	ldr	r3, [pc, #72]	; (8007588 <_tx_initialize_high_level+0x58>)
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <_tx_initialize_high_level+0x5c>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <_tx_initialize_high_level+0x60>)
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	4b11      	ldr	r3, [pc, #68]	; (8007594 <_tx_initialize_high_level+0x64>)
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8007554:	4b10      	ldr	r3, [pc, #64]	; (8007598 <_tx_initialize_high_level+0x68>)
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <_tx_initialize_high_level+0x6c>)
 800755c:	2200      	movs	r2, #0
 800755e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <_tx_initialize_high_level+0x70>)
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <_tx_initialize_high_level+0x74>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <_tx_initialize_high_level+0x78>)
 800756e:	2200      	movs	r2, #0
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	4b0e      	ldr	r3, [pc, #56]	; (80075ac <_tx_initialize_high_level+0x7c>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8007578:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <_tx_initialize_high_level+0x80>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	4b0d      	ldr	r3, [pc, #52]	; (80075b4 <_tx_initialize_high_level+0x84>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
#endif
}
 8007584:	bf00      	nop
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000bb8 	.word	0x20000bb8
 800758c:	20000bbc 	.word	0x20000bbc
 8007590:	20000bc0 	.word	0x20000bc0
 8007594:	20000bc4 	.word	0x20000bc4
 8007598:	20000bc8 	.word	0x20000bc8
 800759c:	20000bcc 	.word	0x20000bcc
 80075a0:	20000bd8 	.word	0x20000bd8
 80075a4:	20000bdc 	.word	0x20000bdc
 80075a8:	20000be0 	.word	0x20000be0
 80075ac:	20000be4 	.word	0x20000be4
 80075b0:	20000bd0 	.word	0x20000bd0
 80075b4:	20000bd4 	.word	0x20000bd4

080075b8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 80075bc:	4b10      	ldr	r3, [pc, #64]	; (8007600 <_tx_initialize_kernel_enter+0x48>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 80075c4:	d00c      	beq.n	80075e0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <_tx_initialize_kernel_enter+0x48>)
 80075c8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80075cc:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80075ce:	f7f8 fe53 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80075d2:	f7ff ffad 	bl	8007530 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <_tx_initialize_kernel_enter+0x4c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3301      	adds	r3, #1
 80075dc:	4a09      	ldr	r2, [pc, #36]	; (8007604 <_tx_initialize_kernel_enter+0x4c>)
 80075de:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <_tx_initialize_kernel_enter+0x48>)
 80075e2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80075e6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80075e8:	4b07      	ldr	r3, [pc, #28]	; (8007608 <_tx_initialize_kernel_enter+0x50>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7f8 ff61 	bl	80004b4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80075f2:	4b03      	ldr	r3, [pc, #12]	; (8007600 <_tx_initialize_kernel_enter+0x48>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80075f8:	f7f8 fe7a 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80075fc:	bf00      	nop
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	2000000c 	.word	0x2000000c
 8007604:	20000c88 	.word	0x20000c88
 8007608:	20000be8 	.word	0x20000be8

0800760c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b092      	sub	sp, #72	; 0x48
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	607a      	str	r2, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800761a:	2300      	movs	r3, #0
 800761c:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800761e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007620:	21ef      	movs	r1, #239	; 0xef
 8007622:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007624:	f000 ff4a 	bl	80084bc <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8007628:	22b0      	movs	r2, #176	; 0xb0
 800762a:	2100      	movs	r1, #0
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 ff45 	bl	80084bc <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007648:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800764e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007654:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800765a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007662:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007668:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007674:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8007676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007678:	3b01      	subs	r3, #1
 800767a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800767c:	4413      	add	r3, r2
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007684:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8007686:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800768a:	429a      	cmp	r2, r3
 800768c:	d007      	beq.n	800769e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800769c:	e006      	b.n	80076ac <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a2:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076a8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2203      	movs	r2, #3
 80076b0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	4a48      	ldr	r2, [pc, #288]	; (80077d8 <_tx_thread_create+0x1cc>)
 80076b6:	655a      	str	r2, [r3, #84]	; 0x54
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80076be:	4947      	ldr	r1, [pc, #284]	; (80077dc <_tx_thread_create+0x1d0>)
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7f8 fe7b 	bl	80003bc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80076c6:	f3ef 8310 	mrs	r3, PRIMASK
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80076d0:	b672      	cpsid	i
    return(int_posture);
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4a41      	ldr	r2, [pc, #260]	; (80077e0 <_tx_thread_create+0x1d4>)
 80076da:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80076dc:	4b41      	ldr	r3, [pc, #260]	; (80077e4 <_tx_thread_create+0x1d8>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10b      	bne.n	80076fc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80076e4:	4a40      	ldr	r2, [pc, #256]	; (80077e8 <_tx_thread_create+0x1dc>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80076fa:	e016      	b.n	800772a <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80076fc:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <_tx_thread_create+0x1dc>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007708:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800771e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800772a:	4b2e      	ldr	r3, [pc, #184]	; (80077e4 <_tx_thread_create+0x1d8>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	3301      	adds	r3, #1
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <_tx_thread_create+0x1d8>)
 8007732:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007734:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <_tx_thread_create+0x1e0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3301      	adds	r3, #1
 800773a:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <_tx_thread_create+0x1e0>)
 800773c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800773e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007740:	2b01      	cmp	r3, #1
 8007742:	d129      	bne.n	8007798 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007744:	f3ef 8305 	mrs	r3, IPSR
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800774a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800774c:	4b28      	ldr	r3, [pc, #160]	; (80077f0 <_tx_thread_create+0x1e4>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4313      	orrs	r3, r2
 8007752:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007756:	d30d      	bcc.n	8007774 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8007758:	4b26      	ldr	r3, [pc, #152]	; (80077f4 <_tx_thread_create+0x1e8>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800775e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007760:	2b00      	cmp	r3, #0
 8007762:	d009      	beq.n	8007778 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8007764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007768:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800776a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800776c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007770:	63da      	str	r2, [r3, #60]	; 0x3c
 8007772:	e001      	b.n	8007778 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8007774:	2300      	movs	r3, #0
 8007776:	647b      	str	r3, [r7, #68]	; 0x44
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	f383 8810 	msr	PRIMASK, r3
}
 8007782:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f8f9 	bl	800797c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800778a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01e      	beq.n	80077ce <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8007790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007794:	63da      	str	r2, [r3, #60]	; 0x3c
 8007796:	e01a      	b.n	80077ce <_tx_thread_create+0x1c2>
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f383 8810 	msr	PRIMASK, r3
}
 80077a2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80077a4:	f3ef 8310 	mrs	r3, PRIMASK
 80077a8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80077aa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80077ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80077ae:	b672      	cpsid	i
    return(int_posture);
 80077b0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80077b2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80077b4:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <_tx_thread_create+0x1e0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	4a0c      	ldr	r2, [pc, #48]	; (80077ec <_tx_thread_create+0x1e0>)
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f383 8810 	msr	PRIMASK, r3
}
 80077c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80077ca:	f000 f89d 	bl	8007908 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3748      	adds	r7, #72	; 0x48
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	08007e51 	.word	0x08007e51
 80077dc:	08007871 	.word	0x08007871
 80077e0:	54485244 	.word	0x54485244
 80077e4:	20000bfc 	.word	0x20000bfc
 80077e8:	20000bf8 	.word	0x20000bf8
 80077ec:	20000c88 	.word	0x20000c88
 80077f0:	2000000c 	.word	0x2000000c
 80077f4:	20000bf4 	.word	0x20000bf4

080077f8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80077fc:	4b12      	ldr	r3, [pc, #72]	; (8007848 <_tx_thread_initialize+0x50>)
 80077fe:	2200      	movs	r2, #0
 8007800:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007802:	4b12      	ldr	r3, [pc, #72]	; (800784c <_tx_thread_initialize+0x54>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	4b11      	ldr	r3, [pc, #68]	; (8007850 <_tx_thread_initialize+0x58>)
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <_tx_thread_initialize+0x5c>)
 8007810:	2220      	movs	r2, #32
 8007812:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007814:	2280      	movs	r2, #128	; 0x80
 8007816:	2100      	movs	r1, #0
 8007818:	480f      	ldr	r0, [pc, #60]	; (8007858 <_tx_thread_initialize+0x60>)
 800781a:	f000 fe4f 	bl	80084bc <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <_tx_thread_initialize+0x64>)
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007824:	4b0e      	ldr	r3, [pc, #56]	; (8007860 <_tx_thread_initialize+0x68>)
 8007826:	2200      	movs	r2, #0
 8007828:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800782a:	4b0e      	ldr	r3, [pc, #56]	; (8007864 <_tx_thread_initialize+0x6c>)
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <_tx_thread_initialize+0x70>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <_tx_thread_initialize+0x74>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800783e:	4a0b      	ldr	r2, [pc, #44]	; (800786c <_tx_thread_initialize+0x74>)
 8007840:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000bf0 	.word	0x20000bf0
 800784c:	20000bf4 	.word	0x20000bf4
 8007850:	20000c00 	.word	0x20000c00
 8007854:	20000c04 	.word	0x20000c04
 8007858:	20000c08 	.word	0x20000c08
 800785c:	20000bf8 	.word	0x20000bf8
 8007860:	20000bfc 	.word	0x20000bfc
 8007864:	20000c88 	.word	0x20000c88
 8007868:	20000c8c 	.word	0x20000c8c
 800786c:	20000c90 	.word	0x20000c90

08007870 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007876:	4b21      	ldr	r3, [pc, #132]	; (80078fc <_tx_thread_shell_entry+0x8c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <_tx_thread_shell_entry+0x90>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8007890:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <_tx_thread_shell_entry+0x90>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69f8      	ldr	r0, [r7, #28]
 8007896:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007898:	f3ef 8310 	mrs	r3, PRIMASK
 800789c:	607b      	str	r3, [r7, #4]
    return(posture);
 800789e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80078a0:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80078a2:	b672      	cpsid	i
    return(int_posture);
 80078a4:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80078a6:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2201      	movs	r2, #1
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	2201      	movs	r2, #1
 80078b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	2200      	movs	r2, #0
 80078b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <_tx_thread_shell_entry+0x94>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	3301      	adds	r3, #1
 80078c0:	4a10      	ldr	r2, [pc, #64]	; (8007904 <_tx_thread_shell_entry+0x94>)
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f383 8810 	msr	PRIMASK, r3
}
 80078ce:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80078d0:	f3ef 8314 	mrs	r3, CONTROL
 80078d4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80078d6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80078d8:	617b      	str	r3, [r7, #20]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 0304 	bic.w	r3, r3, #4
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f383 8814 	msr	CONTROL, r3
}
 80078ec:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80078ee:	69f8      	ldr	r0, [r7, #28]
 80078f0:	f000 f944 	bl	8007b7c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80078f4:	bf00      	nop
 80078f6:	3720      	adds	r7, #32
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	20000bf0 	.word	0x20000bf0
 8007900:	20000c8c 	.word	0x20000c8c
 8007904:	20000c88 	.word	0x20000c88

08007908 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8007908:	b480      	push	{r7}
 800790a:	b089      	sub	sp, #36	; 0x24
 800790c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800790e:	4b17      	ldr	r3, [pc, #92]	; (800796c <_tx_thread_system_preempt_check+0x64>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d121      	bne.n	800795e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <_tx_thread_system_preempt_check+0x68>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8007920:	4b14      	ldr	r3, [pc, #80]	; (8007974 <_tx_thread_system_preempt_check+0x6c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d017      	beq.n	800795e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800792e:	4b12      	ldr	r3, [pc, #72]	; (8007978 <_tx_thread_system_preempt_check+0x70>)
 8007930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007934:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007936:	f3ef 8305 	mrs	r3, IPSR
 800793a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800793c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10c      	bne.n	800795c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007942:	f3ef 8310 	mrs	r3, PRIMASK
 8007946:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007948:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800794a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800794c:	b662      	cpsie	i
}
 800794e:	bf00      	nop
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800795c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800795e:	bf00      	nop
 8007960:	3724      	adds	r7, #36	; 0x24
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000c88 	.word	0x20000c88
 8007970:	20000bf0 	.word	0x20000bf0
 8007974:	20000bf4 	.word	0x20000bf4
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007984:	f3ef 8310 	mrs	r3, PRIMASK
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800798a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800798e:	b672      	cpsid	i
    return(int_posture);
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8007992:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	334c      	adds	r3, #76	; 0x4c
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fb91 	bl	80080c8 <_tx_timer_system_deactivate>
 80079a6:	e002      	b.n	80079ae <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80079ae:	4b6c      	ldr	r3, [pc, #432]	; (8007b60 <_tx_thread_system_resume+0x1e4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	4a6a      	ldr	r2, [pc, #424]	; (8007b60 <_tx_thread_system_resume+0x1e4>)
 80079b6:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	2b00      	cmp	r3, #0
 80079be:	f040 8083 	bne.w	8007ac8 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8097 	beq.w	8007afa <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d172      	bne.n	8007aba <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80079e0:	4a60      	ldr	r2, [pc, #384]	; (8007b64 <_tx_thread_system_resume+0x1e8>)
 80079e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80079ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d154      	bne.n	8007a9a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80079f0:	495c      	ldr	r1, [pc, #368]	; (8007b64 <_tx_thread_system_resume+0x1e8>)
 80079f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8007a06:	2201      	movs	r2, #1
 8007a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8007a10:	4b55      	ldr	r3, [pc, #340]	; (8007b68 <_tx_thread_system_resume+0x1ec>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a16:	4313      	orrs	r3, r2
 8007a18:	4a53      	ldr	r2, [pc, #332]	; (8007b68 <_tx_thread_system_resume+0x1ec>)
 8007a1a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8007a1c:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <_tx_thread_system_resume+0x1f0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d269      	bcs.n	8007afa <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8007a26:	4a51      	ldr	r2, [pc, #324]	; (8007b6c <_tx_thread_system_resume+0x1f0>)
 8007a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8007a2c:	4b50      	ldr	r3, [pc, #320]	; (8007b70 <_tx_thread_system_resume+0x1f4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8007a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d103      	bne.n	8007a40 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8007a38:	4a4d      	ldr	r2, [pc, #308]	; (8007b70 <_tx_thread_system_resume+0x1f4>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e05c      	b.n	8007afa <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8007a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d257      	bcs.n	8007afa <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8007a4a:	4a49      	ldr	r2, [pc, #292]	; (8007b70 <_tx_thread_system_resume+0x1f4>)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	f383 8810 	msr	PRIMASK, r3
}
 8007a5a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007a5c:	4b40      	ldr	r3, [pc, #256]	; (8007b60 <_tx_thread_system_resume+0x1e4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8007a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d174      	bne.n	8007b52 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007a68:	4b42      	ldr	r3, [pc, #264]	; (8007b74 <_tx_thread_system_resume+0x1f8>)
 8007a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007a70:	f3ef 8305 	mrs	r3, IPSR
 8007a74:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10c      	bne.n	8007a96 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8007a84:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007a86:	b662      	cpsie	i
}
 8007a88:	bf00      	nop
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f383 8810 	msr	PRIMASK, r3
}
 8007a94:	bf00      	nop
}
 8007a96:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8007a98:	e05b      	b.n	8007b52 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8007a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8007aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab0:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab6:	621a      	str	r2, [r3, #32]
 8007ab8:	e01f      	b.n	8007afa <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2203      	movs	r2, #3
 8007ac4:	631a      	str	r2, [r3, #48]	; 0x30
 8007ac6:	e018      	b.n	8007afa <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d014      	beq.n	8007afa <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d010      	beq.n	8007afa <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	631a      	str	r2, [r3, #48]	; 0x30
 8007aec:	e005      	b.n	8007afa <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2203      	movs	r2, #3
 8007af8:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007afa:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <_tx_thread_system_resume+0x1fc>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b02:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f383 8810 	msr	PRIMASK, r3
}
 8007b0a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <_tx_thread_system_resume+0x1f4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d020      	beq.n	8007b58 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007b16:	4b12      	ldr	r3, [pc, #72]	; (8007b60 <_tx_thread_system_resume+0x1e4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d11a      	bne.n	8007b58 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007b22:	4b14      	ldr	r3, [pc, #80]	; (8007b74 <_tx_thread_system_resume+0x1f8>)
 8007b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b28:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007b2a:	f3ef 8305 	mrs	r3, IPSR
 8007b2e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007b30:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b36:	f3ef 8310 	mrs	r3, PRIMASK
 8007b3a:	613b      	str	r3, [r7, #16]
    return(posture);
 8007b3c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8007b3e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007b40:	b662      	cpsie	i
}
 8007b42:	bf00      	nop
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f383 8810 	msr	PRIMASK, r3
}
 8007b4e:	bf00      	nop
}
 8007b50:	e001      	b.n	8007b56 <_tx_thread_system_resume+0x1da>
                                return;
 8007b52:	bf00      	nop
 8007b54:	e000      	b.n	8007b58 <_tx_thread_system_resume+0x1dc>
 8007b56:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8007b58:	3758      	adds	r7, #88	; 0x58
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20000c88 	.word	0x20000c88
 8007b64:	20000c08 	.word	0x20000c08
 8007b68:	20000c00 	.word	0x20000c00
 8007b6c:	20000c04 	.word	0x20000c04
 8007b70:	20000bf4 	.word	0x20000bf4
 8007b74:	e000ed04 	.word	0xe000ed04
 8007b78:	20000bf0 	.word	0x20000bf0

08007b7c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b09e      	sub	sp, #120	; 0x78
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8007b84:	4b81      	ldr	r3, [pc, #516]	; (8007d8c <_tx_thread_system_suspend+0x210>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8007b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8007b92:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8007b94:	b672      	cpsid	i
    return(int_posture);
 8007b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8007b98:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d112      	bne.n	8007bc8 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8007ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d008      	beq.n	8007bc0 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb4:	d004      	beq.n	8007bc0 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	334c      	adds	r3, #76	; 0x4c
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fa22 	bl	8008004 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	4a72      	ldr	r2, [pc, #456]	; (8007d90 <_tx_thread_system_suspend+0x214>)
 8007bc6:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007bc8:	4b72      	ldr	r3, [pc, #456]	; (8007d94 <_tx_thread_system_suspend+0x218>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	4a71      	ldr	r2, [pc, #452]	; (8007d94 <_tx_thread_system_suspend+0x218>)
 8007bd0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	f040 80a6 	bne.w	8007d28 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6a1b      	ldr	r3, [r3, #32]
 8007bec:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8007bee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d015      	beq.n	8007c22 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8007c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c06:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007c08:	4a63      	ldr	r2, [pc, #396]	; (8007d98 <_tx_thread_system_suspend+0x21c>)
 8007c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d157      	bne.n	8007cc6 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8007c16:	4960      	ldr	r1, [pc, #384]	; (8007d98 <_tx_thread_system_suspend+0x21c>)
 8007c18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c20:	e051      	b.n	8007cc6 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8007c22:	4a5d      	ldr	r2, [pc, #372]	; (8007d98 <_tx_thread_system_suspend+0x21c>)
 8007c24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c26:	2100      	movs	r1, #0
 8007c28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8007c36:	4b59      	ldr	r3, [pc, #356]	; (8007d9c <_tx_thread_system_suspend+0x220>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	4013      	ands	r3, r2
 8007c40:	4a56      	ldr	r2, [pc, #344]	; (8007d9c <_tx_thread_system_suspend+0x220>)
 8007c42:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8007c44:	2300      	movs	r3, #0
 8007c46:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007c48:	4b54      	ldr	r3, [pc, #336]	; (8007d9c <_tx_thread_system_suspend+0x220>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d12b      	bne.n	8007cac <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007c54:	4b52      	ldr	r3, [pc, #328]	; (8007da0 <_tx_thread_system_suspend+0x224>)
 8007c56:	2220      	movs	r2, #32
 8007c58:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007c5a:	4b52      	ldr	r3, [pc, #328]	; (8007da4 <_tx_thread_system_suspend+0x228>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
 8007c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c62:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c66:	f383 8810 	msr	PRIMASK, r3
}
 8007c6a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007c6c:	4b49      	ldr	r3, [pc, #292]	; (8007d94 <_tx_thread_system_suspend+0x218>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8007c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 8081 	bne.w	8007d7c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007c7a:	4b4b      	ldr	r3, [pc, #300]	; (8007da8 <_tx_thread_system_suspend+0x22c>)
 8007c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c80:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007c82:	f3ef 8305 	mrs	r3, IPSR
 8007c86:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8007c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10c      	bne.n	8007ca8 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8007c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007c98:	b662      	cpsie	i
}
 8007c9a:	bf00      	nop
 8007c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca2:	f383 8810 	msr	PRIMASK, r3
}
 8007ca6:	bf00      	nop
}
 8007ca8:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8007caa:	e067      	b.n	8007d7c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8007cac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cae:	fa93 f3a3 	rbit	r3, r3
 8007cb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cb6:	fab3 f383 	clz	r3, r3
 8007cba:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8007cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc0:	4413      	add	r3, r2
 8007cc2:	4a37      	ldr	r2, [pc, #220]	; (8007da0 <_tx_thread_system_suspend+0x224>)
 8007cc4:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8007cc6:	4b37      	ldr	r3, [pc, #220]	; (8007da4 <_tx_thread_system_suspend+0x228>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d12b      	bne.n	8007d28 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007cd0:	4b33      	ldr	r3, [pc, #204]	; (8007da0 <_tx_thread_system_suspend+0x224>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a30      	ldr	r2, [pc, #192]	; (8007d98 <_tx_thread_system_suspend+0x21c>)
 8007cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cda:	4a32      	ldr	r2, [pc, #200]	; (8007da4 <_tx_thread_system_suspend+0x228>)
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f383 8810 	msr	PRIMASK, r3
}
 8007ce8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007cea:	4b2a      	ldr	r3, [pc, #168]	; (8007d94 <_tx_thread_system_suspend+0x218>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d144      	bne.n	8007d80 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007cf6:	4b2c      	ldr	r3, [pc, #176]	; (8007da8 <_tx_thread_system_suspend+0x22c>)
 8007cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007cfe:	f3ef 8305 	mrs	r3, IPSR
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10c      	bne.n	8007d24 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007d14:	b662      	cpsie	i
}
 8007d16:	bf00      	nop
 8007d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	f383 8810 	msr	PRIMASK, r3
}
 8007d22:	bf00      	nop
}
 8007d24:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007d26:	e02b      	b.n	8007d80 <_tx_thread_system_suspend+0x204>
 8007d28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f383 8810 	msr	PRIMASK, r3
}
 8007d32:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007d34:	4b1b      	ldr	r3, [pc, #108]	; (8007da4 <_tx_thread_system_suspend+0x228>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d022      	beq.n	8007d84 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <_tx_thread_system_suspend+0x218>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8007d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d11c      	bne.n	8007d84 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007d4a:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <_tx_thread_system_suspend+0x22c>)
 8007d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d50:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007d52:	f3ef 8305 	mrs	r3, IPSR
 8007d56:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007d58:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10c      	bne.n	8007d78 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d62:	617b      	str	r3, [r7, #20]
    return(posture);
 8007d64:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8007d66:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007d68:	b662      	cpsie	i
}
 8007d6a:	bf00      	nop
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f383 8810 	msr	PRIMASK, r3
}
 8007d76:	bf00      	nop
}
 8007d78:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8007d7a:	e003      	b.n	8007d84 <_tx_thread_system_suspend+0x208>
                return;
 8007d7c:	bf00      	nop
 8007d7e:	e002      	b.n	8007d86 <_tx_thread_system_suspend+0x20a>
            return;
 8007d80:	bf00      	nop
 8007d82:	e000      	b.n	8007d86 <_tx_thread_system_suspend+0x20a>
    return;
 8007d84:	bf00      	nop
}
 8007d86:	3778      	adds	r7, #120	; 0x78
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20000bf0 	.word	0x20000bf0
 8007d90:	200011f4 	.word	0x200011f4
 8007d94:	20000c88 	.word	0x20000c88
 8007d98:	20000c08 	.word	0x20000c08
 8007d9c:	20000c00 	.word	0x20000c00
 8007da0:	20000c04 	.word	0x20000c04
 8007da4:	20000bf4 	.word	0x20000bf4
 8007da8:	e000ed04 	.word	0xe000ed04

08007dac <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007db2:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <_tx_thread_time_slice+0x8c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007db8:	f3ef 8310 	mrs	r3, PRIMASK
 8007dbc:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8007dc0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007dc2:	b672      	cpsid	i
    return(int_posture);
 8007dc4:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8007dc6:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007dc8:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <_tx_thread_time_slice+0x90>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d024      	beq.n	8007e1e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d120      	bne.n	8007e1e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <_tx_thread_time_slice+0x94>)
 8007dea:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d013      	beq.n	8007e1e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d10d      	bne.n	8007e1e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	6a12      	ldr	r2, [r2, #32]
 8007e0a:	490e      	ldr	r1, [pc, #56]	; (8007e44 <_tx_thread_time_slice+0x98>)
 8007e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007e10:	4b0d      	ldr	r3, [pc, #52]	; (8007e48 <_tx_thread_time_slice+0x9c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0b      	ldr	r2, [pc, #44]	; (8007e44 <_tx_thread_time_slice+0x98>)
 8007e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <_tx_thread_time_slice+0xa0>)
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f383 8810 	msr	PRIMASK, r3
}
 8007e28:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8007e2a:	bf00      	nop
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000bf0 	.word	0x20000bf0
 8007e3c:	20000c98 	.word	0x20000c98
 8007e40:	200011f4 	.word	0x200011f4
 8007e44:	20000c08 	.word	0x20000c08
 8007e48:	20000c04 	.word	0x20000c04
 8007e4c:	20000bf4 	.word	0x20000bf4

08007e50 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08a      	sub	sp, #40	; 0x28
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007e5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e60:	617b      	str	r3, [r7, #20]
    return(posture);
 8007e62:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007e64:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007e66:	b672      	cpsid	i
    return(int_posture);
 8007e68:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8007e6a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	2b04      	cmp	r3, #4
 8007e72:	d10e      	bne.n	8007e92 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007e74:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <_tx_thread_timeout+0x74>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <_tx_thread_timeout+0x74>)
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f383 8810 	msr	PRIMASK, r3
}
 8007e88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e8c:	f7ff fd76 	bl	800797c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007e90:	e013      	b.n	8007eba <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e96:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f383 8810 	msr	PRIMASK, r3
}
 8007eaa:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007eb8:	4798      	blx	r3
}
 8007eba:	bf00      	nop
 8007ebc:	3728      	adds	r7, #40	; 0x28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20000c88 	.word	0x20000c88

08007ec8 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ece:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed2:	607b      	str	r3, [r7, #4]
    return(posture);
 8007ed4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8007ed6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007ed8:	b672      	cpsid	i
    return(int_posture);
 8007eda:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8007edc:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <_tx_timer_expiration_process+0x3c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	4a07      	ldr	r2, [pc, #28]	; (8007f04 <_tx_timer_expiration_process+0x3c>)
 8007ee6:	6013      	str	r3, [r2, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007ef4:	4804      	ldr	r0, [pc, #16]	; (8007f08 <_tx_timer_expiration_process+0x40>)
 8007ef6:	f7ff fd41 	bl	800797c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007efa:	bf00      	nop
 8007efc:	3710      	adds	r7, #16
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000c88 	.word	0x20000c88
 8007f08:	20000d38 	.word	0x20000d38

08007f0c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b089      	sub	sp, #36	; 0x24
 8007f10:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007f12:	4b28      	ldr	r3, [pc, #160]	; (8007fb4 <_tx_timer_initialize+0xa8>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007f18:	4b27      	ldr	r3, [pc, #156]	; (8007fb8 <_tx_timer_initialize+0xac>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007f1e:	4b27      	ldr	r3, [pc, #156]	; (8007fbc <_tx_timer_initialize+0xb0>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007f24:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <_tx_timer_initialize+0xb4>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8007f2a:	4b26      	ldr	r3, [pc, #152]	; (8007fc4 <_tx_timer_initialize+0xb8>)
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	2100      	movs	r1, #0
 8007f34:	4824      	ldr	r0, [pc, #144]	; (8007fc8 <_tx_timer_initialize+0xbc>)
 8007f36:	f000 fac1 	bl	80084bc <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8007f3a:	4b24      	ldr	r3, [pc, #144]	; (8007fcc <_tx_timer_initialize+0xc0>)
 8007f3c:	4a22      	ldr	r2, [pc, #136]	; (8007fc8 <_tx_timer_initialize+0xbc>)
 8007f3e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007f40:	4b23      	ldr	r3, [pc, #140]	; (8007fd0 <_tx_timer_initialize+0xc4>)
 8007f42:	4a21      	ldr	r2, [pc, #132]	; (8007fc8 <_tx_timer_initialize+0xbc>)
 8007f44:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007f46:	4b23      	ldr	r3, [pc, #140]	; (8007fd4 <_tx_timer_initialize+0xc8>)
 8007f48:	4a23      	ldr	r2, [pc, #140]	; (8007fd8 <_tx_timer_initialize+0xcc>)
 8007f4a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007f4c:	4b21      	ldr	r3, [pc, #132]	; (8007fd4 <_tx_timer_initialize+0xc8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3304      	adds	r3, #4
 8007f52:	4a20      	ldr	r2, [pc, #128]	; (8007fd4 <_tx_timer_initialize+0xc8>)
 8007f54:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007f56:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <_tx_timer_initialize+0xd0>)
 8007f58:	4a21      	ldr	r2, [pc, #132]	; (8007fe0 <_tx_timer_initialize+0xd4>)
 8007f5a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007f5c:	4b21      	ldr	r3, [pc, #132]	; (8007fe4 <_tx_timer_initialize+0xd8>)
 8007f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f62:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007f64:	4b20      	ldr	r3, [pc, #128]	; (8007fe8 <_tx_timer_initialize+0xdc>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8007f6a:	4b1c      	ldr	r3, [pc, #112]	; (8007fdc <_tx_timer_initialize+0xd0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <_tx_timer_initialize+0xd8>)
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	491d      	ldr	r1, [pc, #116]	; (8007fe8 <_tx_timer_initialize+0xdc>)
 8007f74:	6809      	ldr	r1, [r1, #0]
 8007f76:	481c      	ldr	r0, [pc, #112]	; (8007fe8 <_tx_timer_initialize+0xdc>)
 8007f78:	6800      	ldr	r0, [r0, #0]
 8007f7a:	2400      	movs	r4, #0
 8007f7c:	9405      	str	r4, [sp, #20]
 8007f7e:	2400      	movs	r4, #0
 8007f80:	9404      	str	r4, [sp, #16]
 8007f82:	9003      	str	r0, [sp, #12]
 8007f84:	9102      	str	r1, [sp, #8]
 8007f86:	9201      	str	r2, [sp, #4]
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	4b18      	ldr	r3, [pc, #96]	; (8007fec <_tx_timer_initialize+0xe0>)
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <_tx_timer_initialize+0xe4>)
 8007f8e:	4919      	ldr	r1, [pc, #100]	; (8007ff4 <_tx_timer_initialize+0xe8>)
 8007f90:	4819      	ldr	r0, [pc, #100]	; (8007ff8 <_tx_timer_initialize+0xec>)
 8007f92:	f7ff fb3b 	bl	800760c <_tx_thread_create>
 8007f96:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e5      	bne.n	8007f6a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007f9e:	4b17      	ldr	r3, [pc, #92]	; (8007ffc <_tx_timer_initialize+0xf0>)
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007fa4:	4b16      	ldr	r3, [pc, #88]	; (8008000 <_tx_timer_initialize+0xf4>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd90      	pop	{r4, r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	20000c94 	.word	0x20000c94
 8007fb8:	200011f4 	.word	0x200011f4
 8007fbc:	20000c98 	.word	0x20000c98
 8007fc0:	20000d28 	.word	0x20000d28
 8007fc4:	20000d34 	.word	0x20000d34
 8007fc8:	20000c9c 	.word	0x20000c9c
 8007fcc:	20000d1c 	.word	0x20000d1c
 8007fd0:	20000d24 	.word	0x20000d24
 8007fd4:	20000d20 	.word	0x20000d20
 8007fd8:	20000d18 	.word	0x20000d18
 8007fdc:	20000de8 	.word	0x20000de8
 8007fe0:	20000df4 	.word	0x20000df4
 8007fe4:	20000dec 	.word	0x20000dec
 8007fe8:	20000df0 	.word	0x20000df0
 8007fec:	4154494d 	.word	0x4154494d
 8007ff0:	08008139 	.word	0x08008139
 8007ff4:	080084f8 	.word	0x080084f8
 8007ff8:	20000d38 	.word	0x20000d38
 8007ffc:	20000d2c 	.word	0x20000d2c
 8008000:	20000d30 	.word	0x20000d30

08008004 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8008004:	b480      	push	{r7}
 8008006:	b089      	sub	sp, #36	; 0x24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d04a      	beq.n	80080ae <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800801e:	d046      	beq.n	80080ae <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d142      	bne.n	80080ae <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b20      	cmp	r3, #32
 800802c:	d902      	bls.n	8008034 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800802e:	231f      	movs	r3, #31
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e002      	b.n	800803a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	3b01      	subs	r3, #1
 8008038:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800803a:	4b20      	ldr	r3, [pc, #128]	; (80080bc <_tx_timer_system_activate+0xb8>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	4413      	add	r3, r2
 8008044:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8008046:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <_tx_timer_system_activate+0xbc>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	429a      	cmp	r2, r3
 800804e:	d30b      	bcc.n	8008068 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8008050:	4b1b      	ldr	r3, [pc, #108]	; (80080c0 <_tx_timer_system_activate+0xbc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69fa      	ldr	r2, [r7, #28]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	109b      	asrs	r3, r3, #2
 800805a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800805c:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <_tx_timer_system_activate+0xc0>)
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d109      	bne.n	8008084 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	e011      	b.n	80080a8 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80080ae:	bf00      	nop
 80080b0:	3724      	adds	r7, #36	; 0x24
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000d24 	.word	0x20000d24
 80080c0:	20000d20 	.word	0x20000d20
 80080c4:	20000d1c 	.word	0x20000d1c

080080c8 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d026      	beq.n	800812a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d108      	bne.n	80080fc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d117      	bne.n	8008124 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e013      	b.n	8008124 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d105      	bne.n	8008124 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	619a      	str	r2, [r3, #24]
    }
}
 800812a:	bf00      	nop
 800812c:	371c      	adds	r7, #28
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b098      	sub	sp, #96	; 0x60
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8008140:	2300      	movs	r3, #0
 8008142:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a73      	ldr	r2, [pc, #460]	; (8008314 <_tx_timer_thread_entry+0x1dc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	f040 80de 	bne.w	800830a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800814e:	f3ef 8310 	mrs	r3, PRIMASK
 8008152:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8008154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8008158:	b672      	cpsid	i
    return(int_posture);
 800815a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800815c:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800815e:	4b6e      	ldr	r3, [pc, #440]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f107 020c 	add.w	r2, r7, #12
 8008172:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8008174:	4b68      	ldr	r3, [pc, #416]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800817c:	4b66      	ldr	r3, [pc, #408]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3304      	adds	r3, #4
 8008182:	4a65      	ldr	r2, [pc, #404]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 8008184:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008186:	4b64      	ldr	r3, [pc, #400]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b64      	ldr	r3, [pc, #400]	; (800831c <_tx_timer_thread_entry+0x1e4>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d103      	bne.n	800819a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8008192:	4b63      	ldr	r3, [pc, #396]	; (8008320 <_tx_timer_thread_entry+0x1e8>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a60      	ldr	r2, [pc, #384]	; (8008318 <_tx_timer_thread_entry+0x1e0>)
 8008198:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800819a:	4b62      	ldr	r3, [pc, #392]	; (8008324 <_tx_timer_thread_entry+0x1ec>)
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
 80081a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f383 8810 	msr	PRIMASK, r3
}
 80081aa:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081ac:	f3ef 8310 	mrs	r3, PRIMASK
 80081b0:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80081b6:	b672      	cpsid	i
    return(int_posture);
 80081b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80081ba:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80081bc:	e07f      	b.n	80082be <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80081cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d102      	bne.n	80081da <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	e00e      	b.n	80081f8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80081da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80081e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081e4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80081e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ea:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80081ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ee:	f107 020c 	add.w	r2, r7, #12
 80081f2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80081f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081f6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80081f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d911      	bls.n	8008224 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008212:	f107 0208 	add.w	r2, r7, #8
 8008216:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8008218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800821a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800821c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800821e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	e01a      	b.n	800825a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8008224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800822a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8008230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008236:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8008238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d009      	beq.n	8008254 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8008240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008242:	f107 0208 	add.w	r2, r7, #8
 8008246:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8008248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800824c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800824e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008250:	60bb      	str	r3, [r7, #8]
 8008252:	e002      	b.n	800825a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8008254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008256:	2200      	movs	r2, #0
 8008258:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800825a:	4a33      	ldr	r2, [pc, #204]	; (8008328 <_tx_timer_thread_entry+0x1f0>)
 800825c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008262:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008266:	f383 8810 	msr	PRIMASK, r3
}
 800826a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800826c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8008272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008274:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008276:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008278:	f3ef 8310 	mrs	r3, PRIMASK
 800827c:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800827e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008282:	b672      	cpsid	i
    return(int_posture);
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008286:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008288:	4b27      	ldr	r3, [pc, #156]	; (8008328 <_tx_timer_thread_entry+0x1f0>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008292:	429a      	cmp	r2, r3
 8008294:	d105      	bne.n	80082a2 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008298:	2200      	movs	r2, #0
 800829a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800829c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800829e:	f7ff feb1 	bl	8008004 <_tx_timer_system_activate>
 80082a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f383 8810 	msr	PRIMASK, r3
}
 80082ac:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80082ae:	f3ef 8310 	mrs	r3, PRIMASK
 80082b2:	623b      	str	r3, [r7, #32]
    return(posture);
 80082b4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80082b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80082b8:	b672      	cpsid	i
    return(int_posture);
 80082ba:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80082bc:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f47f af7c 	bne.w	80081be <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80082c6:	4b17      	ldr	r3, [pc, #92]	; (8008324 <_tx_timer_thread_entry+0x1ec>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d116      	bne.n	80082fc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80082ce:	4b17      	ldr	r3, [pc, #92]	; (800832c <_tx_timer_thread_entry+0x1f4>)
 80082d0:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80082d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082d4:	2203      	movs	r2, #3
 80082d6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80082d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082da:	2201      	movs	r2, #1
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80082de:	4b14      	ldr	r3, [pc, #80]	; (8008330 <_tx_timer_thread_entry+0x1f8>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	4a12      	ldr	r2, [pc, #72]	; (8008330 <_tx_timer_thread_entry+0x1f8>)
 80082e6:	6013      	str	r3, [r2, #0]
 80082e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f383 8810 	msr	PRIMASK, r3
}
 80082f2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80082f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80082f6:	f7ff fc41 	bl	8007b7c <_tx_thread_system_suspend>
 80082fa:	e728      	b.n	800814e <_tx_timer_thread_entry+0x16>
 80082fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f383 8810 	msr	PRIMASK, r3
}
 8008306:	bf00      	nop
            TX_DISABLE
 8008308:	e721      	b.n	800814e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800830a:	bf00      	nop
 800830c:	3760      	adds	r7, #96	; 0x60
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	4154494d 	.word	0x4154494d
 8008318:	20000d24 	.word	0x20000d24
 800831c:	20000d20 	.word	0x20000d20
 8008320:	20000d1c 	.word	0x20000d1c
 8008324:	20000d28 	.word	0x20000d28
 8008328:	20000d34 	.word	0x20000d34
 800832c:	20000d38 	.word	0x20000d38
 8008330:	20000c88 	.word	0x20000c88

08008334 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b092      	sub	sp, #72	; 0x48
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008342:	2300      	movs	r3, #0
 8008344:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d102      	bne.n	8008352 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800834c:	2302      	movs	r3, #2
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
 8008350:	e075      	b.n	800843e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8008352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008354:	2b34      	cmp	r3, #52	; 0x34
 8008356:	d002      	beq.n	800835e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008358:	2302      	movs	r3, #2
 800835a:	647b      	str	r3, [r7, #68]	; 0x44
 800835c:	e06f      	b.n	800843e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800835e:	f3ef 8310 	mrs	r3, PRIMASK
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8008368:	b672      	cpsid	i
    return(int_posture);
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800836c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800836e:	4b3b      	ldr	r3, [pc, #236]	; (800845c <_txe_byte_pool_create+0x128>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a39      	ldr	r2, [pc, #228]	; (800845c <_txe_byte_pool_create+0x128>)
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	f383 8810 	msr	PRIMASK, r3
}
 8008382:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008384:	4b36      	ldr	r3, [pc, #216]	; (8008460 <_txe_byte_pool_create+0x12c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800838a:	2300      	movs	r3, #0
 800838c:	643b      	str	r3, [r7, #64]	; 0x40
 800838e:	e009      	b.n	80083a4 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008394:	429a      	cmp	r2, r3
 8008396:	d00b      	beq.n	80083b0 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800839e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a0:	3301      	adds	r3, #1
 80083a2:	643b      	str	r3, [r7, #64]	; 0x40
 80083a4:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <_txe_byte_pool_create+0x130>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d3f0      	bcc.n	8008390 <_txe_byte_pool_create+0x5c>
 80083ae:	e000      	b.n	80083b2 <_txe_byte_pool_create+0x7e>
                break;
 80083b0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083b2:	f3ef 8310 	mrs	r3, PRIMASK
 80083b6:	623b      	str	r3, [r7, #32]
    return(posture);
 80083b8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80083ba:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083bc:	b672      	cpsid	i
    return(int_posture);
 80083be:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80083c0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80083c2:	4b26      	ldr	r3, [pc, #152]	; (800845c <_txe_byte_pool_create+0x128>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	4a24      	ldr	r2, [pc, #144]	; (800845c <_txe_byte_pool_create+0x128>)
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	f383 8810 	msr	PRIMASK, r3
}
 80083d6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80083d8:	f7ff fa96 	bl	8007908 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d102      	bne.n	80083ea <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80083e4:	2302      	movs	r3, #2
 80083e6:	647b      	str	r3, [r7, #68]	; 0x44
 80083e8:	e029      	b.n	800843e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80083f0:	2303      	movs	r3, #3
 80083f2:	647b      	str	r3, [r7, #68]	; 0x44
 80083f4:	e023      	b.n	800843e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b63      	cmp	r3, #99	; 0x63
 80083fa:	d802      	bhi.n	8008402 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80083fc:	2305      	movs	r3, #5
 80083fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008400:	e01d      	b.n	800843e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008402:	4b19      	ldr	r3, [pc, #100]	; (8008468 <_txe_byte_pool_create+0x134>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <_txe_byte_pool_create+0x138>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d101      	bne.n	8008414 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008410:	2313      	movs	r3, #19
 8008412:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008414:	f3ef 8305 	mrs	r3, IPSR
 8008418:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800841a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800841c:	4b14      	ldr	r3, [pc, #80]	; (8008470 <_txe_byte_pool_create+0x13c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4313      	orrs	r3, r2
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008426:	f3ef 8305 	mrs	r3, IPSR
 800842a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800842c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <_txe_byte_pool_create+0x13c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4313      	orrs	r3, r2
 8008434:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008438:	d201      	bcs.n	800843e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800843a:	2313      	movs	r3, #19
 800843c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008440:	2b00      	cmp	r3, #0
 8008442:	d106      	bne.n	8008452 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7fe ffda 	bl	8007404 <_tx_byte_pool_create>
 8008450:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8008452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8008454:	4618      	mov	r0, r3
 8008456:	3748      	adds	r7, #72	; 0x48
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000c88 	.word	0x20000c88
 8008460:	20000be0 	.word	0x20000be0
 8008464:	20000be4 	.word	0x20000be4
 8008468:	20000bf0 	.word	0x20000bf0
 800846c:	20000d38 	.word	0x20000d38
 8008470:	2000000c 	.word	0x2000000c

08008474 <__libc_init_array>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4d0d      	ldr	r5, [pc, #52]	; (80084ac <__libc_init_array+0x38>)
 8008478:	2600      	movs	r6, #0
 800847a:	4c0d      	ldr	r4, [pc, #52]	; (80084b0 <__libc_init_array+0x3c>)
 800847c:	1b64      	subs	r4, r4, r5
 800847e:	10a4      	asrs	r4, r4, #2
 8008480:	42a6      	cmp	r6, r4
 8008482:	d109      	bne.n	8008498 <__libc_init_array+0x24>
 8008484:	4d0b      	ldr	r5, [pc, #44]	; (80084b4 <__libc_init_array+0x40>)
 8008486:	2600      	movs	r6, #0
 8008488:	4c0b      	ldr	r4, [pc, #44]	; (80084b8 <__libc_init_array+0x44>)
 800848a:	f000 f81f 	bl	80084cc <_init>
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	42a6      	cmp	r6, r4
 8008494:	d105      	bne.n	80084a2 <__libc_init_array+0x2e>
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	f855 3b04 	ldr.w	r3, [r5], #4
 800849c:	3601      	adds	r6, #1
 800849e:	4798      	blx	r3
 80084a0:	e7ee      	b.n	8008480 <__libc_init_array+0xc>
 80084a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a6:	3601      	adds	r6, #1
 80084a8:	4798      	blx	r3
 80084aa:	e7f2      	b.n	8008492 <__libc_init_array+0x1e>
 80084ac:	080085e4 	.word	0x080085e4
 80084b0:	080085e4 	.word	0x080085e4
 80084b4:	080085e4 	.word	0x080085e4
 80084b8:	080085e8 	.word	0x080085e8

080084bc <memset>:
 80084bc:	4402      	add	r2, r0
 80084be:	4603      	mov	r3, r0
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d100      	bne.n	80084c6 <memset+0xa>
 80084c4:	4770      	bx	lr
 80084c6:	f803 1b01 	strb.w	r1, [r3], #1
 80084ca:	e7f9      	b.n	80084c0 <memset+0x4>

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
