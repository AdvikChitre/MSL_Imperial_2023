
Gateway Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021308  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003218  080215d8  080215d8  000315d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080247f0  080247f0  000347f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080247f4  080247f4  000347f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000018c  24000000  080247f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .RxDecripSection 00000060  2400018c  08024984  0004018c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 00000060  240001ec  080249e4  000401ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0000e6b0  2400024c  08024a44  0004024c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2400e8fc  08024a44  0004e8fc  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0004024c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004ad1d  00000000  00000000  0004027a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000a4b1  00000000  00000000  0008af97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003590  00000000  00000000  00095448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 000032c0  00000000  00000000  000989d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018e05  00000000  00000000  0009bc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004fd5b  00000000  00000000  000b4a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00181d80  00000000  00000000  001047f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00286578  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000e920  00000000  00000000  002865c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400024c 	.word	0x2400024c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080215c0 	.word	0x080215c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000250 	.word	0x24000250
 800030c:	080215c0 	.word	0x080215c0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003b6:	4b42      	ldr	r3, [pc, #264]	; (80004c0 <main+0x110>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d11b      	bne.n	80003fa <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003ce:	4b3c      	ldr	r3, [pc, #240]	; (80004c0 <main+0x110>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003d6:	f3bf 8f4f 	dsb	sy
}
 80003da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003dc:	f3bf 8f6f 	isb	sy
}
 80003e0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003e2:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <main+0x110>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a36      	ldr	r2, [pc, #216]	; (80004c0 <main+0x110>)
 80003e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ec:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003ee:	f3bf 8f4f 	dsb	sy
}
 80003f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003f4:	f3bf 8f6f 	isb	sy
}
 80003f8:	e000      	b.n	80003fc <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003fa:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003fc:	4b30      	ldr	r3, [pc, #192]	; (80004c0 <main+0x110>)
 80003fe:	695b      	ldr	r3, [r3, #20]
 8000400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000404:	2b00      	cmp	r3, #0
 8000406:	d138      	bne.n	800047a <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <main+0x110>)
 800040a:	2200      	movs	r2, #0
 800040c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000410:	f3bf 8f4f 	dsb	sy
}
 8000414:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000416:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <main+0x110>)
 8000418:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800041c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	0b5b      	lsrs	r3, r3, #13
 8000422:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000426:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	08db      	lsrs	r3, r3, #3
 800042c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000430:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	015a      	lsls	r2, r3, #5
 8000436:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800043a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000440:	491f      	ldr	r1, [pc, #124]	; (80004c0 <main+0x110>)
 8000442:	4313      	orrs	r3, r2
 8000444:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	1e5a      	subs	r2, r3, #1
 800044c:	607a      	str	r2, [r7, #4]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d1ef      	bne.n	8000432 <main+0x82>
    } while(sets-- != 0U);
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	1e5a      	subs	r2, r3, #1
 8000456:	60ba      	str	r2, [r7, #8]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d1e5      	bne.n	8000428 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800045c:	f3bf 8f4f 	dsb	sy
}
 8000460:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <main+0x110>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <main+0x110>)
 8000468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800046c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800046e:	f3bf 8f4f 	dsb	sy
}
 8000472:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000474:	f3bf 8f6f 	isb	sy
}
 8000478:	e000      	b.n	800047c <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800047a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047c:	f000 ffa6 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000480:	f000 f826 	bl	80004d0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000484:	f000 f892 	bl	80005ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000488:	f000 f9f4 	bl	8000874 <MX_GPIO_Init>
  MX_DTS_Init();
 800048c:	f000 f8be 	bl	800060c <MX_DTS_Init>
  MX_FDCAN1_Init();
 8000490:	f000 f8e6 	bl	8000660 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000494:	f000 f948 	bl	8000728 <MX_FDCAN2_Init>
  MX_SDMMC1_SD_Init();
 8000498:	f000 f9aa 	bl	80007f0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800049c:	f00c fa22 	bl	800c8e4 <MX_FATFS_Init>
  MX_TIM14_Init();
 80004a0:	f000 f9c4 	bl	800082c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004a4:	f00f f96c 	bl	800f780 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004a8:	4a06      	ldr	r2, [pc, #24]	; (80004c4 <main+0x114>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4806      	ldr	r0, [pc, #24]	; (80004c8 <main+0x118>)
 80004ae:	f00f f9e8 	bl	800f882 <osThreadNew>
 80004b2:	4603      	mov	r3, r0
 80004b4:	4a05      	ldr	r2, [pc, #20]	; (80004cc <main+0x11c>)
 80004b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004b8:	f00f f9a8 	bl	800f80c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004bc:	e7fe      	b.n	80004bc <main+0x10c>
 80004be:	bf00      	nop
 80004c0:	e000ed00 	.word	0xe000ed00
 80004c4:	0802451c 	.word	0x0802451c
 80004c8:	0800094d 	.word	0x0800094d
 80004cc:	24000494 	.word	0x24000494

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09c      	sub	sp, #112	; 0x70
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004da:	224c      	movs	r2, #76	; 0x4c
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f020 f8a5 	bl	802062e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	1d3b      	adds	r3, r7, #4
 80004e6:	2220      	movs	r2, #32
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f020 f89f 	bl	802062e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f0:	2002      	movs	r0, #2
 80004f2:	f005 f891 	bl	8005618 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004f6:	2300      	movs	r3, #0
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	4b2b      	ldr	r3, [pc, #172]	; (80005a8 <SystemClock_Config+0xd8>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a2a      	ldr	r2, [pc, #168]	; (80005a8 <SystemClock_Config+0xd8>)
 8000500:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xd8>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000512:	bf00      	nop
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <SystemClock_Config+0xd8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800051c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000520:	d1f8      	bne.n	8000514 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000522:	2301      	movs	r3, #1
 8000524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000526:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	2302      	movs	r3, #2
 800052e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000530:	2302      	movs	r3, #2
 8000532:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000534:	2302      	movs	r3, #2
 8000536:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000538:	232c      	movs	r3, #44	; 0x2c
 800053a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800053c:	2301      	movs	r3, #1
 800053e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000540:	2305      	movs	r3, #5
 8000542:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000544:	2302      	movs	r3, #2
 8000546:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000548:	230c      	movs	r3, #12
 800054a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800054c:	2300      	movs	r3, #0
 800054e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f005 f8a7 	bl	80056ac <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000564:	f000 fa10 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	233f      	movs	r3, #63	; 0x3f
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2303      	movs	r3, #3
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000574:	2308      	movs	r3, #8
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2103      	movs	r1, #3
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fc66 	bl	8005e60 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800059a:	f000 f9f5 	bl	8000988 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3770      	adds	r7, #112	; 0x70
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58024800 	.word	0x58024800

080005ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b0ae      	sub	sp, #184	; 0xb8
 80005b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	22b8      	movs	r2, #184	; 0xb8
 80005b6:	2100      	movs	r1, #0
 80005b8:	4618      	mov	r0, r3
 80005ba:	f020 f838 	bl	802062e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80005be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005c2:	f04f 0300 	mov.w	r3, #0
 80005c6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 80005ca:	2305      	movs	r3, #5
 80005cc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 5;
 80005d6:	2305      	movs	r3, #5
 80005d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80005ea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80005ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 ffec 	bl	80065d0 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80005fe:	f000 f9c3 	bl	8000988 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	37b8      	adds	r7, #184	; 0xb8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <MX_DTS_Init>:
  * @brief DTS Initialization Function
  * @param None
  * @retval None
  */
static void MX_DTS_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END DTS_Init 0 */

  /* USER CODE BEGIN DTS_Init 1 */

  /* USER CODE END DTS_Init 1 */
  hdts.Instance = DTS;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_DTS_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_DTS_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  hdts.Init.QuickMeasure = DTS_QUICKMEAS_DISABLE;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_DTS_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hdts.Init.RefClock = DTS_REFCLKSEL_PCLK;
 800061c:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_DTS_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hdts.Init.TriggerInput = DTS_TRIGGER_HW_NONE;
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_DTS_Init+0x4c>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hdts.Init.SamplingTime = DTS_SMP_TIME_1_CYCLE;
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_DTS_Init+0x4c>)
 800062a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062e:	611a      	str	r2, [r3, #16]
  hdts.Init.Divider = 0;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_DTS_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  hdts.Init.HighThreshold = 0x0;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_DTS_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  hdts.Init.LowThreshold = 0x0;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_DTS_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_DTS_Init(&hdts) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_DTS_Init+0x4c>)
 8000644:	f001 f836 	bl	80016b4 <HAL_DTS_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_DTS_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f99b 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN DTS_Init 2 */

  /* USER CODE END DTS_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	24000268 	.word	0x24000268
 800065c:	58006800 	.word	0x58006800

08000660 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000666:	4a2f      	ldr	r2, [pc, #188]	; (8000724 <MX_FDCAN1_Init+0xc4>)
 8000668:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000684:	2200      	movs	r2, #0
 8000686:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 800068a:	2208      	movs	r2, #8
 800068c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000690:	2201      	movs	r2, #1
 8000692:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000696:	220d      	movs	r2, #13
 8000698:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800069a:	4b21      	ldr	r3, [pc, #132]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 800069c:	2202      	movs	r2, #2
 800069e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006a2:	2208      	movs	r2, #8
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006ae:	220d      	movs	r2, #13
 80006b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006de:	2204      	movs	r2, #4
 80006e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 8000708:	2204      	movs	r2, #4
 800070a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_FDCAN1_Init+0xc0>)
 800070e:	f002 fc91 	bl	8003034 <HAL_FDCAN_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000718:	f000 f936 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	2400028c 	.word	0x2400028c
 8000724:	4000a000 	.word	0x4000a000

08000728 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800072c:	4b2e      	ldr	r3, [pc, #184]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800072e:	4a2f      	ldr	r2, [pc, #188]	; (80007ec <MX_FDCAN2_Init+0xc4>)
 8000730:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000732:	4b2d      	ldr	r3, [pc, #180]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000738:	4b2b      	ldr	r3, [pc, #172]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000740:	2200      	movs	r2, #0
 8000742:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000744:	4b28      	ldr	r3, [pc, #160]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000746:	2200      	movs	r2, #0
 8000748:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800074c:	2200      	movs	r2, #0
 800074e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000750:	4b25      	ldr	r3, [pc, #148]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000752:	2210      	movs	r2, #16
 8000754:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000758:	2201      	movs	r2, #1
 800075a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800075e:	2202      	movs	r2, #2
 8000760:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000764:	2202      	movs	r2, #2
 8000766:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800076a:	2201      	movs	r2, #1
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800076e:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000770:	2201      	movs	r2, #1
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000774:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000776:	2201      	movs	r2, #1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800077a:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800077c:	2201      	movs	r2, #1
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000782:	2200      	movs	r2, #0
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000788:	2200      	movs	r2, #0
 800078a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800078e:	2200      	movs	r2, #0
 8000790:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 8000794:	2200      	movs	r2, #0
 8000796:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 800079a:	2204      	movs	r2, #4
 800079c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80007bc:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_FDCAN2_Init+0xc0>)
 80007d6:	f002 fc2d 	bl	8003034 <HAL_FDCAN_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80007e0:	f000 f8d2 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2400032c 	.word	0x2400032c
 80007ec:	4000a400 	.word	0x4000a400

080007f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <MX_SDMMC1_SD_Init+0x38>)
 80007f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	; (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	240003cc 	.word	0x240003cc
 8000828:	52007000 	.word	0x52007000

0800082c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_TIM14_Init+0x40>)
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <MX_TIM14_Init+0x44>)
 8000834:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1374;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_TIM14_Init+0x40>)
 8000838:	f240 525e 	movw	r2, #1374	; 0x55e
 800083c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_TIM14_Init+0x40>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 100;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_TIM14_Init+0x40>)
 8000846:	2264      	movs	r2, #100	; 0x64
 8000848:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_TIM14_Init+0x40>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_TIM14_Init+0x40>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_TIM14_Init+0x40>)
 8000858:	f009 fc8a 	bl	800a170 <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000862:	f000 f891 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	24000448 	.word	0x24000448
 8000870:	40002000 	.word	0x40002000

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_GPIO_Init+0xd0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	f003 0304 	and.w	r3, r3, #4
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <MX_GPIO_Init+0xd0>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SDMMC1_CD_Pin */
  GPIO_InitStruct.Pin = SDMMC1_CD_Pin;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDMMC1_CD_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000936:	f003 f9f5 	bl	8003d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	58024400 	.word	0x58024400
 8000948:	58020000 	.word	0x58020000

0800094c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000954:	f00c f9ee 	bl	800cd34 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000958:	f01f f840 	bl	801f9dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f00f f822 	bl	800f9a6 <osDelay>
 8000962:	e7fb      	b.n	800095c <StartDefaultTask+0x10>

08000964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a04      	ldr	r2, [pc, #16]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d101      	bne.n	800097a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000976:	f000 fd65 	bl	8001444 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40001000 	.word	0x40001000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x38>)
 800099c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009a0:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <HAL_MspInit+0x38>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <HAL_MspInit+0x38>)
 80009ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	210f      	movs	r1, #15
 80009bc:	f06f 0001 	mvn.w	r0, #1
 80009c0:	f000 fe50 	bl	8001664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024400 	.word	0x58024400

080009d0 <HAL_DTS_MspInit>:
* This function configures the hardware resources used in this example
* @param hdts: DTS handle pointer
* @retval None
*/
void HAL_DTS_MspInit(DTS_HandleTypeDef* hdts)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if(hdts->Instance==DTS)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_DTS_MspInit+0x3c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d10e      	bne.n	8000a00 <HAL_DTS_MspInit+0x30>
  {
  /* USER CODE BEGIN DTS_MspInit 0 */

  /* USER CODE END DTS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DTS_CLK_ENABLE();
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_DTS_MspInit+0x40>)
 80009e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009e8:	4a09      	ldr	r2, [pc, #36]	; (8000a10 <HAL_DTS_MspInit+0x40>)
 80009ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <HAL_DTS_MspInit+0x40>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DTS_MspInit 1 */

  /* USER CODE END DTS_MspInit 1 */
  }

}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	58006800 	.word	0x58006800
 8000a10:	58024400 	.word	0x58024400

08000a14 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <HAL_FDCAN_MspInit+0x134>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d147      	bne.n	8000ac6 <HAL_FDCAN_MspInit+0xb2>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000a36:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a43      	ldr	r2, [pc, #268]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000a3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d10e      	bne.n	8000a66 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a4e:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a54:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000a58:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a38      	ldr	r2, [pc, #224]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a6e:	f043 0308 	orr.w	r3, r3, #8
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a84:	2303      	movs	r3, #3
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a94:	2309      	movs	r3, #9
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482d      	ldr	r0, [pc, #180]	; (8000b54 <HAL_FDCAN_MspInit+0x140>)
 8000aa0:	f003 f940 	bl	8003d24 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	2105      	movs	r1, #5
 8000aa8:	2013      	movs	r0, #19
 8000aaa:	f000 fddb 	bl	8001664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000aae:	2013      	movs	r0, #19
 8000ab0:	f000 fdf2 	bl	8001698 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2105      	movs	r1, #5
 8000ab8:	2015      	movs	r0, #21
 8000aba:	f000 fdd3 	bl	8001664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000abe:	2015      	movs	r0, #21
 8000ac0:	f000 fdea 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000ac4:	e03b      	b.n	8000b3e <HAL_FDCAN_MspInit+0x12a>
  else if(hfdcan->Instance==FDCAN2)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <HAL_FDCAN_MspInit+0x144>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d136      	bne.n	8000b3e <HAL_FDCAN_MspInit+0x12a>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ad0:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000ad8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_FDCAN_MspInit+0x138>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d10e      	bne.n	8000b00 <HAL_FDCAN_MspInit+0xec>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000ae4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000af2:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000af4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_FDCAN_MspInit+0x13c>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000b2e:	2309      	movs	r3, #9
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4808      	ldr	r0, [pc, #32]	; (8000b5c <HAL_FDCAN_MspInit+0x148>)
 8000b3a:	f003 f8f3 	bl	8003d24 <HAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3730      	adds	r7, #48	; 0x30
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	4000a000 	.word	0x4000a000
 8000b4c:	24000498 	.word	0x24000498
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020c00 	.word	0x58020c00
 8000b58:	4000a400 	.word	0x4000a400
 8000b5c:	58020400 	.word	0x58020400

08000b60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ba      	sub	sp, #232	; 0xe8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	22b8      	movs	r2, #184	; 0xb8
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f01f fd54 	bl	802062e <memset>
  if(hsd->Instance==SDMMC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a38      	ldr	r2, [pc, #224]	; (8000c6c <HAL_SD_MspInit+0x10c>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d169      	bne.n	8000c64 <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f005 fd13 	bl	80065d0 <HAL_RCCEx_PeriphCLKConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000bb0:	f7ff feea 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000bb4:	4b2e      	ldr	r3, [pc, #184]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bba:	4a2d      	ldr	r2, [pc, #180]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bc6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_SD_MspInit+0x110>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000c0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c28:	230c      	movs	r3, #12
 8000c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c32:	4619      	mov	r1, r3
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <HAL_SD_MspInit+0x114>)
 8000c36:	f003 f875 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000c52:	230c      	movs	r3, #12
 8000c54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <HAL_SD_MspInit+0x118>)
 8000c60:	f003 f860 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000c64:	bf00      	nop
 8000c66:	37e8      	adds	r7, #232	; 0xe8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	52007000 	.word	0x52007000
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58020800 	.word	0x58020800
 8000c78:	58020c00 	.word	0x58020c00

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_TIM_Base_MspInit+0x48>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d116      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2105      	movs	r1, #5
 8000cb0:	202d      	movs	r0, #45	; 0x2d
 8000cb2:	f000 fcd7 	bl	8001664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000cb6:	202d      	movs	r0, #45	; 0x2d
 8000cb8:	f000 fcee 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40002000 	.word	0x40002000
 8000cc8:	58024400 	.word	0x58024400

08000ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	d827      	bhi.n	8000d2a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	2036      	movs	r0, #54	; 0x36
 8000ce0:	f000 fcc0 	bl	8001664 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ce4:	2036      	movs	r0, #54	; 0x36
 8000ce6:	f000 fcd7 	bl	8001698 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000cea:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <HAL_InitTick+0xc4>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <HAL_InitTick+0xc8>)
 8000cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_InitTick+0xc8>)
 8000cf8:	f043 0310 	orr.w	r3, r3, #16
 8000cfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_InitTick+0xc8>)
 8000d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d06:	f003 0310 	and.w	r3, r3, #16
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0e:	f107 0210 	add.w	r2, r7, #16
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 fc17 	bl	800654c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d106      	bne.n	8000d36 <HAL_InitTick+0x6a>
 8000d28:	e001      	b.n	8000d2e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e02b      	b.n	8000d86 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d2e:	f005 fbf7 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8000d32:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000d34:	e004      	b.n	8000d40 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d36:	f005 fbf3 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d42:	4a15      	ldr	r2, [pc, #84]	; (8000d98 <HAL_InitTick+0xcc>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	0c9b      	lsrs	r3, r3, #18
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d50:	4a13      	ldr	r2, [pc, #76]	; (8000da0 <HAL_InitTick+0xd4>)
 8000d52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d5a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d60:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d70:	f009 f9fe 	bl	800a170 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d7a:	4808      	ldr	r0, [pc, #32]	; (8000d9c <HAL_InitTick+0xd0>)
 8000d7c:	f009 fa50 	bl	800a220 <HAL_TIM_Base_Start_IT>
 8000d80:	4603      	mov	r3, r0
 8000d82:	e000      	b.n	8000d86 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3740      	adds	r7, #64	; 0x40
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000008 	.word	0x24000008
 8000d94:	58024400 	.word	0x58024400
 8000d98:	431bde83 	.word	0x431bde83
 8000d9c:	2400049c 	.word	0x2400049c
 8000da0:	40001000 	.word	0x40001000

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000dd6:	f002 fb0b 	bl	80033f0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2400028c 	.word	0x2400028c

08000de4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <FDCAN1_IT1_IRQHandler+0x10>)
 8000dea:	f002 fb01 	bl	80033f0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400028c 	.word	0x2400028c

08000df8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000dfe:	f009 fa95 	bl	800a32c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	24000448 	.word	0x24000448

08000e0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e10:	4802      	ldr	r0, [pc, #8]	; (8000e1c <TIM6_DAC_IRQHandler+0x10>)
 8000e12:	f009 fa8b 	bl	800a32c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2400049c 	.word	0x2400049c

08000e20 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <OTG_HS_IRQHandler+0x10>)
 8000e26:	f003 fa96 	bl	8004356 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2400e1c0 	.word	0x2400e1c0

08000e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_kill>:

int _kill(int pid, int sig)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <_kill+0x20>)
 8000e50:	2216      	movs	r2, #22
 8000e52:	601a      	str	r2, [r3, #0]
  return -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	2400e8f8 	.word	0x2400e8f8

08000e68 <_exit>:

void _exit (int status)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff ffe5 	bl	8000e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e7a:	e7fe      	b.n	8000e7a <_exit+0x12>

08000e7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e00a      	b.n	8000ea4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8e:	f3af 8000 	nop.w
 8000e92:	4601      	mov	r1, r0
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	b2ca      	uxtb	r2, r1
 8000e9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf0      	blt.n	8000e8e <_read+0x12>
  }

  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e009      	b.n	8000edc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	60ba      	str	r2, [r7, #8]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf1      	blt.n	8000ec8 <_write+0x12>
  }
  return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_close>:

int _close(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f16:	605a      	str	r2, [r3, #4]
  return 0;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_isatty>:

int _isatty(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d205      	bcs.n	8000f94 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <_sbrk+0x6c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	371c      	adds	r7, #28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	24050000 	.word	0x24050000
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	240004e8 	.word	0x240004e8
 8000fc0:	2400e900 	.word	0x2400e900
 8000fc4:	2400e8f8 	.word	0x2400e8f8

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b32      	ldr	r3, [pc, #200]	; (8001098 <SystemInit+0xd0>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a31      	ldr	r2, [pc, #196]	; (8001098 <SystemInit+0xd0>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <SystemInit+0xd4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	2b06      	cmp	r3, #6
 8000fe6:	d807      	bhi.n	8000ff8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <SystemInit+0xd4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f023 030f 	bic.w	r3, r3, #15
 8000ff0:	4a2a      	ldr	r2, [pc, #168]	; (800109c <SystemInit+0xd4>)
 8000ff2:	f043 0307 	orr.w	r3, r3, #7
 8000ff6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <SystemInit+0xd8>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <SystemInit+0xd8>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <SystemInit+0xd8>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <SystemInit+0xd8>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4924      	ldr	r1, [pc, #144]	; (80010a0 <SystemInit+0xd8>)
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <SystemInit+0xdc>)
 8001012:	4013      	ands	r3, r2
 8001014:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <SystemInit+0xd4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001022:	4b1e      	ldr	r3, [pc, #120]	; (800109c <SystemInit+0xd4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 030f 	bic.w	r3, r3, #15
 800102a:	4a1c      	ldr	r2, [pc, #112]	; (800109c <SystemInit+0xd4>)
 800102c:	f043 0307 	orr.w	r3, r3, #7
 8001030:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <SystemInit+0xd8>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <SystemInit+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <SystemInit+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001044:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <SystemInit+0xd8>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <SystemInit+0xe0>)
 8001048:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <SystemInit+0xd8>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <SystemInit+0xe4>)
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <SystemInit+0xd8>)
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <SystemInit+0xe8>)
 8001054:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <SystemInit+0xd8>)
 8001058:	2200      	movs	r2, #0
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <SystemInit+0xd8>)
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <SystemInit+0xe8>)
 8001060:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <SystemInit+0xd8>)
 8001064:	2200      	movs	r2, #0
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <SystemInit+0xd8>)
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <SystemInit+0xe8>)
 800106c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <SystemInit+0xd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <SystemInit+0xd8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a09      	ldr	r2, [pc, #36]	; (80010a0 <SystemInit+0xd8>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <SystemInit+0xd8>)
 8001082:	2200      	movs	r2, #0
 8001084:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <SystemInit+0xec>)
 8001088:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800108c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	52002000 	.word	0x52002000
 80010a0:	58024400 	.word	0x58024400
 80010a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80010a8:	02020200 	.word	0x02020200
 80010ac:	01ff0000 	.word	0x01ff0000
 80010b0:	01010280 	.word	0x01010280
 80010b4:	52004000 	.word	0x52004000

080010b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010bc:	f7ff ff84 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	; (80010f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	; (8001104 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e6:	f01f fa5d 	bl	80205a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ea:	f7ff f961 	bl	80003b0 <main>
  bx  lr
 80010ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80010f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f8:	2400018c 	.word	0x2400018c
  ldr r2, =_sidata
 80010fc:	080247f8 	.word	0x080247f8
  ldr r2, =_sbss
 8001100:	2400024c 	.word	0x2400024c
  ldr r4, =_ebss
 8001104:	2400e8fc 	.word	0x2400e8fc

08001108 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC3_IRQHandler>

0800110a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <LAN8742_RegisterBusIO+0x28>
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <LAN8742_RegisterBusIO+0x28>
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <LAN8742_RegisterBusIO+0x28>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e014      	b.n	8001162 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d17c      	bne.n	8001288 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d002      	beq.n	800119c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2220      	movs	r2, #32
 80011a0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e01c      	b.n	80011e2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	2112      	movs	r1, #18
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	4798      	blx	r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da03      	bge.n	80011c4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80011bc:	f06f 0304 	mvn.w	r3, #4
 80011c0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80011c2:	e00b      	b.n	80011dc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d105      	bne.n	80011dc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
         break;
 80011da:	e005      	b.n	80011e8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2b1f      	cmp	r3, #31
 80011e6:	d9df      	bls.n	80011a8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b1f      	cmp	r3, #31
 80011ee:	d902      	bls.n	80011f6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011f0:	f06f 0302 	mvn.w	r3, #2
 80011f4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d145      	bne.n	8001288 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6810      	ldr	r0, [r2, #0]
 8001204:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001208:	2100      	movs	r1, #0
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	db37      	blt.n	8001282 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6810      	ldr	r0, [r2, #0]
 800121a:	f107 0208 	add.w	r2, r7, #8
 800121e:	2100      	movs	r1, #0
 8001220:	4798      	blx	r3
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	db28      	blt.n	800127a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4798      	blx	r3
 800122e:	4603      	mov	r3, r0
 8001230:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001232:	e01c      	b.n	800126e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4798      	blx	r3
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001246:	d80e      	bhi.n	8001266 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6810      	ldr	r0, [r2, #0]
 8001250:	f107 0208 	add.w	r2, r7, #8
 8001254:	2100      	movs	r1, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	da07      	bge.n	800126e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800125e:	f06f 0304 	mvn.w	r3, #4
 8001262:	613b      	str	r3, [r7, #16]
                 break;
 8001264:	e010      	b.n	8001288 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001266:	f06f 0301 	mvn.w	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
               break;
 800126c:	e00c      	b.n	8001288 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1dd      	bne.n	8001234 <LAN8742_Init+0xc6>
 8001278:	e006      	b.n	8001288 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800127a:	f06f 0304 	mvn.w	r3, #4
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e002      	b.n	8001288 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001282:	f06f 0303 	mvn.w	r3, #3
 8001286:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d112      	bne.n	80012b4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4798      	blx	r3
 8001294:	4603      	mov	r3, r0
 8001296:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001298:	bf00      	nop
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	4798      	blx	r3
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012ac:	d9f5      	bls.n	800129a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2201      	movs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80012b4:	693b      	ldr	r3, [r7, #16]
 }
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6810      	ldr	r0, [r2, #0]
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	2101      	movs	r1, #1
 80012d8:	4798      	blx	r3
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da02      	bge.n	80012e6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012e0:	f06f 0304 	mvn.w	r3, #4
 80012e4:	e06e      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6810      	ldr	r0, [r2, #0]
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	2101      	movs	r1, #1
 80012f4:	4798      	blx	r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da02      	bge.n	8001302 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012fc:	f06f 0304 	mvn.w	r3, #4
 8001300:	e060      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800130c:	2301      	movs	r3, #1
 800130e:	e059      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	f107 020c 	add.w	r2, r7, #12
 800131c:	2100      	movs	r1, #0
 800131e:	4798      	blx	r3
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	da02      	bge.n	800132c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001326:	f06f 0304 	mvn.w	r3, #4
 800132a:	e04b      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11b      	bne.n	800136e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <LAN8742_GetLinkState+0x90>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800134a:	2302      	movs	r3, #2
 800134c:	e03a      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001358:	2303      	movs	r3, #3
 800135a:	e033      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001366:	2304      	movs	r3, #4
 8001368:	e02c      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800136a:	2305      	movs	r3, #5
 800136c:	e02a      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6810      	ldr	r0, [r2, #0]
 8001376:	f107 020c 	add.w	r2, r7, #12
 800137a:	211f      	movs	r1, #31
 800137c:	4798      	blx	r3
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	da02      	bge.n	800138a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001384:	f06f 0304 	mvn.w	r3, #4
 8001388:	e01c      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001394:	2306      	movs	r3, #6
 8001396:	e015      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 031c 	and.w	r3, r3, #28
 800139e:	2b18      	cmp	r3, #24
 80013a0:	d101      	bne.n	80013a6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013a2:	2302      	movs	r3, #2
 80013a4:	e00e      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 031c 	and.w	r3, r3, #28
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d101      	bne.n	80013b4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e007      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 031c 	and.w	r3, r3, #28
 80013ba:	2b14      	cmp	r3, #20
 80013bc:	d101      	bne.n	80013c2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013be:	2304      	movs	r3, #4
 80013c0:	e000      	b.n	80013c4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013c2:	2305      	movs	r3, #5
    }				
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f000 f93b 	bl	800164e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d8:	f004 fef8 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_Init+0x68>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4913      	ldr	r1, [pc, #76]	; (8001438 <HAL_Init+0x6c>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_Init+0x68>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <HAL_Init+0x6c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	f003 031f 	and.w	r3, r3, #31
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x70>)
 800140e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_Init+0x74>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001416:	200f      	movs	r0, #15
 8001418:	f7ff fc58 	bl	8000ccc <HAL_InitTick>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e002      	b.n	800142c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001426:	f7ff fab5 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58024400 	.word	0x58024400
 8001438:	08024540 	.word	0x08024540
 800143c:	24000004 	.word	0x24000004
 8001440:	24000000 	.word	0x24000000

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2400000c 	.word	0x2400000c
 8001468:	240004ec 	.word	0x240004ec

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	240004ec 	.word	0x240004ec

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2400000c 	.word	0x2400000c

080014cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014dc:	4904      	ldr	r1, [pc, #16]	; (80014f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58000400 	.word	0x58000400

080014f4 <__NVIC_SetPriorityGrouping>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 800151e:	4313      	orrs	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <__NVIC_SetPriorityGrouping+0x40>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	05fa0000 	.word	0x05fa0000

0800153c <__NVIC_GetPriorityGrouping>:
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff4c 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff63 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb3 	bl	80015e8 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff82 	bl	8001594 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff56 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DTS_Init>:
  *         parameters in the DTS_InitTypeDef and initialize the associated handle.
  * @param  hdts  DTS handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DTS_Init(DTS_HandleTypeDef *hdts)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the DTS handle allocation */
  if (hdts == NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d101      	bne.n	80016c6 <HAL_DTS_Init+0x12>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e089      	b.n	80017da <HAL_DTS_Init+0x126>
  assert_param(IS_DTS_TRIGGERINPUT(hdts->Init.TriggerInput));
  assert_param(IS_DTS_SAMPLINGTIME(hdts->Init.SamplingTime));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.HighThreshold));
  assert_param(IS_DTS_THRESHOLD(hdts->Init.LowThreshold));

  if (hdts->State == HAL_DTS_STATE_RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <HAL_DTS_Init+0x24>

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hdts->MspInitCallback(hdts);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_DTS_MspInit(hdts);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff f97c 	bl	80009d0 <HAL_DTS_MspInit>
#endif /* USE_HAL_DTS_REGISTER_CALLBACKS */
  }

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check ramp coefficient */
  if (hdts->Instance->RAMPVALR == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_DTS_Init+0x3a>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e075      	b.n	80017da <HAL_DTS_Init+0x126>
  }

  /* Check factory calibration temperature  */
  if (hdts->Instance->T0VALR1 == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_DTS_Init+0x48>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e06e      	b.n	80017da <HAL_DTS_Init+0x126>
  }

  /* Check Quick Measure option is enabled or disabled */
  if (hdts->Init.QuickMeasure == DTS_QUICKMEAS_DISABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d108      	bne.n	8001716 <HAL_DTS_Init+0x62>
    if (hdts->Init.RefClock == DTS_REFCLKSEL_PCLK)
    {
      assert_param(IS_DTS_DIVIDER_RATIO_NUMBER(hdts->Init.Divider));
    }
    /* Quick measurement mode disabled */
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	e00e      	b.n	8001734 <HAL_DTS_Init+0x80>
  }
  else
  {
    /* DTS_QUICKMEAS_ENABLE shall be used only when the LSE clock is
       selected as reference clock */
    if (hdts->Init.RefClock != DTS_REFCLKSEL_LSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171e:	d001      	beq.n	8001724 <HAL_DTS_Init+0x70>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e05a      	b.n	80017da <HAL_DTS_Init+0x126>
    }

    /* Quick measurement mode enabled - no calibration needed */
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_Q_MEAS_OPT);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* set the DTS clk source */
  if (hdts->Init.RefClock == DTS_REFCLKSEL_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173c:	d108      	bne.n	8001750 <HAL_DTS_Init+0x9c>
  {
    SET_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_DTS_Init+0xac>
  }
  else
  {
    CLEAR_BIT(hdts->Instance->CFGR1, DTS_CFGR1_REFCLK_SEL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800175e:	601a      	str	r2, [r3, #0]
  }

  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_HSREF_CLK_DIV, (hdts->Init.Divider << DTS_CFGR1_HSREF_CLK_DIV_Pos));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	061a      	lsls	r2, r3, #24
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_SMP_TIME, hdts->Init.SamplingTime);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->CFGR1, DTS_CFGR1_TS1_INTRIG_SEL, hdts->Init.TriggerInput);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68da      	ldr	r2, [r3, #12]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_HITTHD, (hdts->Init.HighThreshold << DTS_ITR1_TS1_HITTHD_Pos));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	b299      	uxth	r1, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	615a      	str	r2, [r3, #20]
  MODIFY_REG(hdts->Instance->ITR1, DTS_ITR1_TS1_LITTHD, hdts->Init.LowThreshold);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_DTS_Init+0x130>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	69d1      	ldr	r1, [r2, #28]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6153      	str	r3, [r2, #20]

  /* Change the DTS state */
  hdts->State = HAL_DTS_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	ffff0000 	.word	0xffff0000

080017e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e0cf      	b.n	800199a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001800:	2b00      	cmp	r3, #0
 8001802:	d106      	bne.n	8001812 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2223      	movs	r2, #35	; 0x23
 8001808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f00b fd63 	bl	800d2d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001812:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <HAL_ETH_Init+0x1bc>)
 8001814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001818:	4a62      	ldr	r2, [pc, #392]	; (80019a4 <HAL_ETH_Init+0x1bc>)
 800181a:	f043 0302 	orr.w	r3, r3, #2
 800181e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001822:	4b60      	ldr	r3, [pc, #384]	; (80019a4 <HAL_ETH_Init+0x1bc>)
 8001824:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a1b      	ldrb	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d103      	bne.n	8001840 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fe47 	bl	80014cc <HAL_SYSCFG_ETHInterfaceSelect>
 800183e:	e003      	b.n	8001848 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001840:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001844:	f7ff fe42 	bl	80014cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001848:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_ETH_Init+0x1c0>)
 800184a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001862:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001864:	f7ff fe02 	bl	800146c <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800186a:	e011      	b.n	8001890 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800186c:	f7ff fdfe 	bl	800146c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800187a:	d909      	bls.n	8001890 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2204      	movs	r2, #4
 8001880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	22e0      	movs	r2, #224	; 0xe0
 8001888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e084      	b.n	800199a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1e4      	bne.n	800186c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fdfa 	bl	800249c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80018a8:	f004 fe0a 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a3f      	ldr	r2, [pc, #252]	; (80019ac <HAL_ETH_Init+0x1c4>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9a      	lsrs	r2, r3, #18
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3a01      	subs	r2, #1
 80018bc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 ffe5 	bl	8002890 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80018d2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	22e0      	movs	r2, #224	; 0xe0
 80018fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e049      	b.n	800199a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_ETH_Init+0x1c8>)
 8001914:	4013      	ands	r3, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6952      	ldr	r2, [r2, #20]
 800191a:	0051      	lsls	r1, r2, #1
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001926:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f001 f84d 	bl	80029ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f001 f893 	bl	8002a5c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	3305      	adds	r3, #5
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3304      	adds	r3, #4
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	3303      	adds	r3, #3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	061a      	lsls	r2, r3, #24
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	3302      	adds	r3, #2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	041b      	lsls	r3, r3, #16
 8001968:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	3301      	adds	r3, #1
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001974:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001982:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001984:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2210      	movs	r2, #16
 8001994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
 80019a8:	58000400 	.word	0x58000400
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	ffff8001 	.word	0xffff8001

080019b4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c2:	2b10      	cmp	r3, #16
 80019c4:	d179      	bne.n	8001aba <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2223      	movs	r2, #35	; 0x23
 80019ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b38      	ldr	r3, [pc, #224]	; (8001ac4 <HAL_ETH_Start_IT+0x110>)
 80019e2:	430b      	orrs	r3, r1
 80019e4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b34      	ldr	r3, [pc, #208]	; (8001ac8 <HAL_ETH_Start_IT+0x114>)
 80019f6:	430b      	orrs	r3, r1
 80019f8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2204      	movs	r2, #4
 8001a00:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f9eb 	bl	8001dde <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0202 	orr.w	r2, r2, #2
 8001a16:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0201 	orr.w	r2, r2, #1
 8001a38:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a54:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a70:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001a88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a8c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aaa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2223      	movs	r2, #35	; 0x23
 8001ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	e000      	b.n	8001abc <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	0c020060 	.word	0x0c020060
 8001ac8:	0c20c000 	.word	0x0c20c000

08001acc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ada:	2b23      	cmp	r3, #35	; 0x23
 8001adc:	d165      	bne.n	8001baa <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2223      	movs	r2, #35	; 0x23
 8001ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_ETH_Stop_IT+0xec>)
 8001af8:	400b      	ands	r3, r1
 8001afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001afe:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b1a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b36:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0202 	bic.w	r2, r2, #2
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	e00e      	b.n	8001b92 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	3212      	adds	r2, #18
 8001b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d9ed      	bls.n	8001b74 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
  }
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	ffff2f3e 	.word	0xffff2f3e

08001bbc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd2:	f043 0201 	orr.w	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e03a      	b.n	8001c56 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be6:	2b23      	cmp	r3, #35	; 0x23
 8001be8:	d134      	bne.n	8001c54 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	6839      	ldr	r1, [r7, #0]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 ff8e 	bl	8002b18 <ETH_Prepare_Tx_Descriptors>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c08:	f043 0202 	orr.w	r2, r3, #2
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e01f      	b.n	8001c56 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c16:	f3bf 8f4f 	dsb	sy
}
 8001c1a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d904      	bls.n	8001c38 <HAL_ETH_Transmit_IT+0x7c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	1f1a      	subs	r2, r3, #4
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3106      	adds	r1, #6
 8001c44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c48:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c4c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b088      	sub	sp, #32
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0a5      	b.n	8001dd6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c90:	2b23      	cmp	r3, #35	; 0x23
 8001c92:	d001      	beq.n	8001c98 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e09e      	b.n	8001dd6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	3212      	adds	r2, #18
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cae:	f1c3 0304 	rsb	r3, r3, #4
 8001cb2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cb4:	e067      	b.n	8001d86 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <HAL_ETH_ReadData+0x88>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03d      	beq.n	8001d62 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00d      	beq.n	8001d2c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f00b fc81 	bl	800d648 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	441a      	add	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d902      	bls.n	8001d74 <HAL_ETH_ReadData+0x116>
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3b04      	subs	r3, #4
 8001d72:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	3212      	adds	r2, #18
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db06      	blt.n	8001d9c <HAL_ETH_ReadData+0x13e>
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d202      	bcs.n	8001d9c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d08c      	beq.n	8001cb6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	441a      	add	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f000 f814 	bl	8001dde <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d108      	bne.n	8001dd4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e000      	b.n	8001dd6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3720      	adds	r7, #32
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b088      	sub	sp, #32
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001dea:	2301      	movs	r3, #1
 8001dec:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001df2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	3212      	adds	r2, #18
 8001dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dfe:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e04:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e06:	e03b      	b.n	8001e80 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d112      	bne.n	8001e36 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00b fbe7 	bl	800d5e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d102      	bne.n	8001e26 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	74fb      	strb	r3, [r7, #19]
 8001e24:	e007      	b.n	8001e36 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	461a      	mov	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001e36:	7cfb      	ldrb	r3, [r7, #19]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d021      	beq.n	8001e80 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e3c:	f3bf 8f5f 	dmb	sy
}
 8001e40:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	e003      	b.n	8001e5c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001e5a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d902      	bls.n	8001e6e <ETH_UpdateDescriptor+0x90>
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	3212      	adds	r2, #18
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	617b      	str	r3, [r7, #20]
      desccount--;
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <ETH_UpdateDescriptor+0xae>
 8001e86:	7cfb      	ldrb	r3, [r7, #19]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1bd      	bne.n	8001e08 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d00d      	beq.n	8001eb2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001ed8:	e03f      	b.n	8001f5a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001eda:	2301      	movs	r3, #1
 8001edc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d106      	bne.n	8001f02 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001f02:	7bbb      	ldrb	r3, [r7, #14]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d028      	beq.n	8001f5a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db1b      	blt.n	8001f56 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	3304      	adds	r3, #4
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00b fbf4 	bl	800d718 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3304      	adds	r3, #4
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f54:	e001      	b.n	8001f5a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <HAL_ETH_ReleaseTxPacket+0xac>
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1b9      	bne.n	8001eda <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e03e      	b.n	8002010 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f9a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	055b      	lsls	r3, r3, #21
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	041b      	lsls	r3, r3, #16
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f043 030c 	orr.w	r3, r3, #12
 8001fbe:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001fd2:	f7ff fa4b 	bl	800146c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fd8:	e009      	b.n	8001fee <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001fda:	f7ff fa47 	bl	800146c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe8:	d901      	bls.n	8001fee <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e010      	b.n	8002010 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ed      	bne.n	8001fda <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002006:	b29b      	uxth	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e03c      	b.n	80020b4 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002042:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	055b      	lsls	r3, r3, #21
 800204e:	4313      	orrs	r3, r2
 8002050:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f023 030c 	bic.w	r3, r3, #12
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_ETH_WritePHYRegister+0xa4>)
 800207a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800207e:	4a0f      	ldr	r2, [pc, #60]	; (80020bc <HAL_ETH_WritePHYRegister+0xa4>)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002086:	f7ff f9f1 	bl	800146c <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800208c:	e009      	b.n	80020a2 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800208e:	f7ff f9ed 	bl	800146c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800209c:	d901      	bls.n	80020a2 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e008      	b.n	80020b4 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ed      	bne.n	800208e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40028000 	.word	0x40028000

080020c0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e1c3      	b.n	800245c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf14      	ite	ne
 80020f0:	2301      	movne	r3, #1
 80020f2:	2300      	moveq	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	bf0c      	ite	eq
 800211a:	2301      	moveq	r3, #1
 800211c:	2300      	movne	r3, #0
 800211e:	b2db      	uxtb	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	461a      	mov	r2, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf14      	ite	ne
 800216a:	2301      	movne	r3, #1
 800216c:	2300      	moveq	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf14      	ite	ne
 80021ba:	2301      	movne	r3, #1
 80021bc:	2300      	moveq	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	bf0c      	ite	eq
 80021d4:	2301      	moveq	r3, #1
 80021d6:	2300      	movne	r3, #0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf0c      	ite	eq
 80021ee:	2301      	moveq	r3, #1
 80021f0:	2300      	movne	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	461a      	mov	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf14      	ite	ne
 8002208:	2301      	movne	r3, #1
 800220a:	2300      	moveq	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221e:	2b00      	cmp	r3, #0
 8002220:	bf14      	ite	ne
 8002222:	2301      	movne	r3, #1
 8002224:	2300      	moveq	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf14      	ite	ne
 800223c:	2301      	movne	r3, #1
 800223e:	2300      	moveq	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800224e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002252:	2b00      	cmp	r3, #0
 8002254:	bf14      	ite	ne
 8002256:	2301      	movne	r3, #1
 8002258:	2300      	moveq	r3, #0
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bf0c      	ite	eq
 80022b4:	2301      	moveq	r3, #1
 80022b6:	2300      	movne	r3, #0
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	461a      	mov	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80022e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002304:	2b00      	cmp	r3, #0
 8002306:	bf14      	ite	ne
 8002308:	2301      	movne	r3, #1
 800230a:	2300      	moveq	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0e5b      	lsrs	r3, r3, #25
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf0c      	ite	eq
 800237a:	2301      	moveq	r3, #1
 800237c:	2300      	movne	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b29a      	uxth	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf14      	ite	ne
 80023b4:	2301      	movne	r3, #1
 80023b6:	2300      	moveq	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023e8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023f8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e00b      	b.n	8002494 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002482:	2b10      	cmp	r3, #16
 8002484:	d105      	bne.n	8002492 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002486:	6839      	ldr	r1, [r7, #0]
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f85f 	bl	800254c <ETH_SetMACConfig>

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80024b6:	f004 f803 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80024ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4a1e      	ldr	r2, [pc, #120]	; (8002538 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d908      	bls.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d804      	bhi.n	80024d6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	e027      	b.n	8002526 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d908      	bls.n	80024f0 <HAL_ETH_SetMDIOClockRange+0x54>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d204      	bcs.n	80024f0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	e01a      	b.n	8002526 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d303      	bcc.n	8002500 <HAL_ETH_SetMDIOClockRange+0x64>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d911      	bls.n	8002524 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4a10      	ldr	r2, [pc, #64]	; (8002544 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d908      	bls.n	800251a <HAL_ETH_SetMDIOClockRange+0x7e>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_ETH_SetMDIOClockRange+0xac>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d804      	bhi.n	800251a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e005      	b.n	8002526 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e000      	b.n	8002526 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002524:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002530:	bf00      	nop
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	01312cff 	.word	0x01312cff
 800253c:	02160ebf 	.word	0x02160ebf
 8002540:	03938700 	.word	0x03938700
 8002544:	05f5e0ff 	.word	0x05f5e0ff
 8002548:	08f0d17f 	.word	0x08f0d17f

0800254c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800255e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	791b      	ldrb	r3, [r3, #4]
 8002564:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002566:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7b1b      	ldrb	r3, [r3, #12]
 800256c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800256e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	7b5b      	ldrb	r3, [r3, #13]
 8002574:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002576:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7b9b      	ldrb	r3, [r3, #14]
 800257c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800257e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	7bdb      	ldrb	r3, [r3, #15]
 8002584:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002586:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	7c12      	ldrb	r2, [r2, #16]
 800258c:	2a00      	cmp	r2, #0
 800258e:	d102      	bne.n	8002596 <ETH_SetMACConfig+0x4a>
 8002590:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0x4c>
 8002596:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002598:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	7c52      	ldrb	r2, [r2, #17]
 800259e:	2a00      	cmp	r2, #0
 80025a0:	d102      	bne.n	80025a8 <ETH_SetMACConfig+0x5c>
 80025a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025a6:	e000      	b.n	80025aa <ETH_SetMACConfig+0x5e>
 80025a8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80025aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	7c9b      	ldrb	r3, [r3, #18]
 80025b0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80025b2:	431a      	orrs	r2, r3
               macconf->Speed |
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80025b8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80025be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	7f1b      	ldrb	r3, [r3, #28]
 80025c4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80025c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	7f5b      	ldrb	r3, [r3, #29]
 80025cc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80025ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	7f92      	ldrb	r2, [r2, #30]
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d102      	bne.n	80025de <ETH_SetMACConfig+0x92>
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	e000      	b.n	80025e0 <ETH_SetMACConfig+0x94>
 80025de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80025e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	7fdb      	ldrb	r3, [r3, #31]
 80025e6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80025e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	f892 2020 	ldrb.w	r2, [r2, #32]
 80025f0:	2a00      	cmp	r2, #0
 80025f2:	d102      	bne.n	80025fa <ETH_SetMACConfig+0xae>
 80025f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f8:	e000      	b.n	80025fc <ETH_SetMACConfig+0xb0>
 80025fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80025fc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800260a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800260c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <ETH_SetMACConfig+0x22c>)
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	430b      	orrs	r3, r1
 8002628:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002636:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002638:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002640:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800264a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800264c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002654:	2a00      	cmp	r2, #0
 8002656:	d102      	bne.n	800265e <ETH_SetMACConfig+0x112>
 8002658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0x114>
 800265e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002660:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	4b42      	ldr	r3, [pc, #264]	; (800277c <ETH_SetMACConfig+0x230>)
 8002672:	4013      	ands	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	68f9      	ldr	r1, [r7, #12]
 800267a:	430b      	orrs	r3, r1
 800267c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002684:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68da      	ldr	r2, [r3, #12]
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <ETH_SetMACConfig+0x234>)
 8002696:	4013      	ands	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	430b      	orrs	r3, r1
 80026a0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80026a8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80026b6:	2a00      	cmp	r2, #0
 80026b8:	d101      	bne.n	80026be <ETH_SetMACConfig+0x172>
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	e000      	b.n	80026c0 <ETH_SetMACConfig+0x174>
 80026be:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80026c0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026d2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80026d6:	4013      	ands	r3, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	68f9      	ldr	r1, [r7, #12]
 80026de:	430b      	orrs	r3, r1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80026e8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80026f0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f023 0103 	bic.w	r1, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	430a      	orrs	r2, r1
 800270a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002716:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002732:	2a00      	cmp	r2, #0
 8002734:	d101      	bne.n	800273a <ETH_SetMACConfig+0x1ee>
 8002736:	2240      	movs	r2, #64	; 0x40
 8002738:	e000      	b.n	800273c <ETH_SetMACConfig+0x1f0>
 800273a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800273c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002744:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002746:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800274e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800275c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	430a      	orrs	r2, r1
 8002768:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	00048083 	.word	0x00048083
 800277c:	c0f88000 	.word	0xc0f88000
 8002780:	fffffef0 	.word	0xfffffef0

08002784 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <ETH_SetDMAConfig+0xf8>)
 800279a:	4013      	ands	r3, r2
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6811      	ldr	r1, [r2, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027aa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	791b      	ldrb	r3, [r3, #4]
 80027b0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7b1b      	ldrb	r3, [r3, #12]
 80027bc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4b2c      	ldr	r3, [pc, #176]	; (8002880 <ETH_SetDMAConfig+0xfc>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027dc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	7b5b      	ldrb	r3, [r3, #13]
 80027e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <ETH_SetDMAConfig+0x100>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	430b      	orrs	r3, r1
 8002804:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002808:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	7d1b      	ldrb	r3, [r3, #20]
 8002814:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002816:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	7f5b      	ldrb	r3, [r3, #29]
 800281c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800281e:	4313      	orrs	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <ETH_SetDMAConfig+0x104>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	430b      	orrs	r3, r1
 800283a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800283e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	7f1b      	ldrb	r3, [r3, #28]
 8002846:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002858:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <ETH_SetDMAConfig+0x108>)
 800285e:	4013      	ands	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	68f9      	ldr	r1, [r7, #12]
 8002866:	430b      	orrs	r3, r1
 8002868:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800286c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	ffff87fd 	.word	0xffff87fd
 8002880:	ffff2ffe 	.word	0xffff2ffe
 8002884:	fffec000 	.word	0xfffec000
 8002888:	ffc0efef 	.word	0xffc0efef
 800288c:	7fc0ffff 	.word	0x7fc0ffff

08002890 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0a4      	sub	sp, #144	; 0x90
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800289e:	2300      	movs	r3, #0
 80028a0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80028d8:	2300      	movs	r3, #0
 80028da:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80028e8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800290a:	2300      	movs	r3, #0
 800290c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800290e:	2300      	movs	r3, #0
 8002910:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002912:	2300      	movs	r3, #0
 8002914:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002928:	2320      	movs	r3, #32
 800292a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800292e:	2301      	movs	r3, #1
 8002930:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800293a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002940:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002944:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800294c:	2302      	movs	r3, #2
 800294e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800296a:	2300      	movs	r3, #0
 800296c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800296e:	2301      	movs	r3, #1
 8002970:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fde6 	bl	800254c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002980:	2301      	movs	r3, #1
 8002982:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002984:	2301      	movs	r3, #1
 8002986:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002992:	2300      	movs	r3, #0
 8002994:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800299a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800299e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80029a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80029b0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fee1 	bl	8002784 <ETH_SetDMAConfig>
}
 80029c2:	bf00      	nop
 80029c4:	3790      	adds	r7, #144	; 0x90
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e01d      	b.n	8002a14 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68d9      	ldr	r1, [r3, #12]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2200      	movs	r2, #0
 80029f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2200      	movs	r2, #0
 80029fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	3206      	adds	r2, #6
 8002a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3301      	adds	r3, #1
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d9de      	bls.n	80029d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a4c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	e023      	b.n	8002ab2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	3212      	adds	r2, #18
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d9d8      	bls.n	8002a6a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b06:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b08d      	sub	sp, #52	; 0x34
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	3318      	adds	r3, #24
 8002b28:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5a:	d007      	beq.n	8002b6c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	3304      	adds	r3, #4
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e259      	b.n	8003024 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d044      	beq.n	8002c06 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	4b75      	ldr	r3, [pc, #468]	; (8002d58 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ba8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d027      	beq.n	8002c06 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	041b      	lsls	r3, r3, #16
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	6a3b      	ldr	r3, [r7, #32]
 8002bc6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	431a      	orrs	r2, r3
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002bf4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c04:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	4b51      	ldr	r3, [pc, #324]	; (8002d5c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	6992      	ldr	r2, [r2, #24]
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d036      	beq.n	8002cb6 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c54:	f3bf 8f5f 	dmb	sy
}
 8002c58:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	3301      	adds	r3, #1
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d902      	bls.n	8002c78 <ETH_Prepare_Tx_Descriptors+0x160>
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	3b04      	subs	r3, #4
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	3301      	adds	r3, #1
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c94:	d10f      	bne.n	8002cb6 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca0:	f3bf 8f5f 	dmb	sy
}
 8002ca4:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e1b6      	b.n	8003024 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	4b24      	ldr	r3, [pc, #144]	; (8002d5c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	6852      	ldr	r2, [r2, #4]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	0412      	lsls	r2, r2, #16
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	e008      	b.n	8002d18 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	6a3a      	ldr	r2, [r7, #32]
 8002d16:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d021      	beq.n	8002d68 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	04db      	lsls	r3, r3, #19
 8002d32:	431a      	orrs	r2, r3
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4b09      	ldr	r3, [pc, #36]	; (8002d64 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	69d2      	ldr	r2, [r2, #28]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e02e      	b.n	8002db6 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002d58:	ffff0000 	.word	0xffff0000
 8002d5c:	ffffc000 	.word	0xffffc000
 8002d60:	c000ffff 	.word	0xc000ffff
 8002d64:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	4b7b      	ldr	r3, [pc, #492]	; (8002f5c <ETH_Prepare_Tx_Descriptors+0x444>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	431a      	orrs	r2, r3
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0304 	and.w	r3, r3, #4
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002dec:	f3bf 8f5f 	dmb	sy
}
 8002df0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80da 	beq.w	8002fc0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e1e:	e0cf      	b.n	8002fc0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	3301      	adds	r3, #1
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d902      	bls.n	8002e3e <ETH_Prepare_Tx_Descriptors+0x326>
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	3b04      	subs	r3, #4
 8002e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e46:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e60:	d007      	beq.n	8002e72 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	3304      	adds	r3, #4
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d029      	beq.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e84:	e019      	b.n	8002eba <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e86:	f3bf 8f5f 	dmb	sy
}
 8002e8a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d902      	bls.n	8002eaa <ETH_Prepare_Tx_Descriptors+0x392>
 8002ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea6:	3b04      	subs	r3, #4
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eb2:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d3e1      	bcc.n	8002e86 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e0ae      	b.n	8003024 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	6852      	ldr	r2, [r2, #4]
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	6852      	ldr	r2, [r2, #4]
 8002f12:	0412      	lsls	r2, r2, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	e008      	b.n	8002f2e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d018      	beq.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	69d2      	ldr	r2, [r2, #28]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	e020      	b.n	8002f9c <ETH_Prepare_Tx_Descriptors+0x484>
 8002f5a:	bf00      	nop
 8002f5c:	ffff8000 	.word	0xffff8000
 8002f60:	ffffc000 	.word	0xffffc000
 8002f64:	c000ffff 	.word	0xc000ffff
 8002f68:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	4b2f      	ldr	r3, [pc, #188]	; (8003030 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	6852      	ldr	r2, [r2, #4]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fa2:	f3bf 8f5f 	dmb	sy
}
 8002fa6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f47f af2b 	bne.w	8002e20 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e005      	b.n	8002fea <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	3304      	adds	r3, #4
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	4413      	add	r3, r2
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800301e:	b662      	cpsie	i
}
 8003020:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3734      	adds	r7, #52	; 0x34
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	ffff8000 	.word	0xffff8000

08003034 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b098      	sub	sp, #96	; 0x60
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800303c:	4a84      	ldr	r2, [pc, #528]	; (8003250 <HAL_FDCAN_Init+0x21c>)
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	4611      	mov	r1, r2
 8003044:	224c      	movs	r2, #76	; 0x4c
 8003046:	4618      	mov	r0, r3
 8003048:	f01d fae3 	bl	8020612 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1c6      	b.n	80033e4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7e      	ldr	r2, [pc, #504]	; (8003254 <HAL_FDCAN_Init+0x220>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d106      	bne.n	800306e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003068:	461a      	mov	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fcc6 	bl	8000a14 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0210 	bic.w	r2, r2, #16
 8003096:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003098:	f7fe f9e8 	bl	800146c <HAL_GetTick>
 800309c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800309e:	e014      	b.n	80030ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030a0:	f7fe f9e4 	bl	800146c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b0a      	cmp	r3, #10
 80030ac:	d90d      	bls.n	80030ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030b4:	f043 0201 	orr.w	r2, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2203      	movs	r2, #3
 80030c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e18c      	b.n	80033e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d0e3      	beq.n	80030a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e8:	f7fe f9c0 	bl	800146c <HAL_GetTick>
 80030ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030ee:	e014      	b.n	800311a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030f0:	f7fe f9bc 	bl	800146c <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b0a      	cmp	r3, #10
 80030fc:	d90d      	bls.n	800311a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2203      	movs	r2, #3
 8003112:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e164      	b.n	80033e4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0e3      	beq.n	80030f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699a      	ldr	r2, [r3, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0202 	orr.w	r2, r2, #2
 8003136:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	7c1b      	ldrb	r3, [r3, #16]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314e:	619a      	str	r2, [r3, #24]
 8003150:	e007      	b.n	8003162 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003160:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7c5b      	ldrb	r3, [r3, #17]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003178:	619a      	str	r2, [r3, #24]
 800317a:	e007      	b.n	800318c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800318a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7c9b      	ldrb	r3, [r3, #18]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d108      	bne.n	80031a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a2:	619a      	str	r2, [r3, #24]
 80031a4:	e007      	b.n	80031b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80031da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0210 	bic.w	r2, r2, #16
 80031ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d108      	bne.n	8003206 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0204 	orr.w	r2, r2, #4
 8003202:	619a      	str	r2, [r3, #24]
 8003204:	e030      	b.n	8003268 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02c      	beq.n	8003268 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d020      	beq.n	8003258 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699a      	ldr	r2, [r3, #24]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003224:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0210 	orr.w	r2, r2, #16
 8003234:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d114      	bne.n	8003268 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699a      	ldr	r2, [r3, #24]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0220 	orr.w	r2, r2, #32
 800324c:	619a      	str	r2, [r3, #24]
 800324e:	e00b      	b.n	8003268 <HAL_FDCAN_Init+0x234>
 8003250:	080215e4 	.word	0x080215e4
 8003254:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0220 	orr.w	r2, r2, #32
 8003266:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	3b01      	subs	r3, #1
 800326e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	3b01      	subs	r3, #1
 8003276:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003278:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003280:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	3b01      	subs	r3, #1
 800328a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003290:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003292:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329c:	d115      	bne.n	80032ca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	3b01      	subs	r3, #1
 80032aa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80032ac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	3b01      	subs	r3, #1
 80032b4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80032b6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	3b01      	subs	r3, #1
 80032c0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80032c6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80032c8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f0:	4413      	add	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d011      	beq.n	800331a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80032fe:	f023 0107 	bic.w	r1, r3, #7
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	3360      	adds	r3, #96	; 0x60
 800330a:	443b      	add	r3, r7
 800330c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d011      	beq.n	8003346 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800332a:	f023 0107 	bic.w	r1, r3, #7
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	3360      	adds	r3, #96	; 0x60
 8003336:	443b      	add	r3, r7
 8003338:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334a:	2b00      	cmp	r3, #0
 800334c:	d012      	beq.n	8003374 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003356:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	3360      	adds	r3, #96	; 0x60
 8003362:	443b      	add	r3, r7
 8003364:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003368:	011a      	lsls	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003384:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3360      	adds	r3, #96	; 0x60
 8003390:	443b      	add	r3, r7
 8003392:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a11      	ldr	r2, [pc, #68]	; (80033ec <HAL_FDCAN_Init+0x3b8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d107      	bne.n	80033bc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f022 0203 	bic.w	r2, r2, #3
 80033ba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fb1f 	bl	8003a18 <FDCAN_CalcultateRamBlockAddresses>
 80033da:	4603      	mov	r3, r0
 80033dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80033e0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3760      	adds	r7, #96	; 0x60
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	4000a000 	.word	0x4000a000

080033f0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b096      	sub	sp, #88	; 0x58
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80033f8:	4b9a      	ldr	r3, [pc, #616]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	079b      	lsls	r3, r3, #30
 80033fe:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	079b      	lsls	r3, r3, #30
 8003406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003408:	4013      	ands	r3, r2
 800340a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003412:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003416:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003420:	4013      	ands	r3, r2
 8003422:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003438:	4013      	ands	r3, r2
 800343a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	4013      	ands	r3, r2
 8003452:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800345e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003468:	4013      	ands	r3, r2
 800346a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003472:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003476:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003480:	4013      	ands	r3, r2
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80034a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034b4:	651a      	str	r2, [r3, #80]	; 0x50
 80034b6:	4b6b      	ldr	r3, [pc, #428]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fa5f 	bl	8003980 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	0a9b      	lsrs	r3, r3, #10
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d01d      	beq.n	800350a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80034ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d0:	0a9b      	lsrs	r3, r3, #10
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d017      	beq.n	800350a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ee:	4013      	ands	r3, r2
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003502:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa12 	bl	800392e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800350a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003516:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_FDCAN_IRQHandler+0x278>)
 8003518:	400b      	ands	r3, r1
 800351a:	6513      	str	r3, [r2, #80]	; 0x50
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 800351e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003520:	0f9b      	lsrs	r3, r3, #30
 8003522:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003524:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f9c0 	bl	80038ac <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800352c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00d      	beq.n	800354e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003538:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_FDCAN_IRQHandler+0x278>)
 800353a:	400b      	ands	r3, r1
 800353c:	6513      	str	r3, [r2, #80]	; 0x50
 800353e:	4a49      	ldr	r2, [pc, #292]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 8003540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003542:	0f9b      	lsrs	r3, r3, #30
 8003544:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f9ba 	bl	80038c2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800354e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00d      	beq.n	8003570 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800355a:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_FDCAN_IRQHandler+0x278>)
 800355c:	400b      	ands	r3, r1
 800355e:	6513      	str	r3, [r2, #80]	; 0x50
 8003560:	4a40      	ldr	r2, [pc, #256]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 8003562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003564:	0f9b      	lsrs	r3, r3, #30
 8003566:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003568:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f9b4 	bl	80038d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_FDCAN_IRQHandler+0x278>)
 800357e:	400b      	ands	r3, r1
 8003580:	6513      	str	r3, [r2, #80]	; 0x50
 8003582:	4a38      	ldr	r2, [pc, #224]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 8003584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003586:	0f9b      	lsrs	r3, r3, #30
 8003588:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800358a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f9ae 	bl	80038ee <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003594:	0adb      	lsrs	r3, r3, #11
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d010      	beq.n	80035c0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	0adb      	lsrs	r3, r3, #11
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b2:	651a      	str	r2, [r3, #80]	; 0x50
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f9a2 	bl	8003904 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80035c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01d      	beq.n	8003608 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80035cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ce:	0a5b      	lsrs	r3, r3, #9
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d017      	beq.n	8003608 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	4013      	ands	r3, r2
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f8:	651a      	str	r2, [r3, #80]	; 0x50
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f988 	bl	8003918 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360a:	0cdb      	lsrs	r3, r3, #19
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	0cdb      	lsrs	r3, r3, #19
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003628:	651a      	str	r2, [r3, #80]	; 0x50
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f987 	bl	8003944 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d016      	beq.n	8003670 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003656:	651a      	str	r2, [r3, #80]	; 0x50
 8003658:	4b02      	ldr	r3, [pc, #8]	; (8003664 <HAL_FDCAN_IRQHandler+0x274>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	e004      	b.n	800366c <HAL_FDCAN_IRQHandler+0x27c>
 8003662:	bf00      	nop
 8003664:	4000a800 	.word	0x4000a800
 8003668:	3fcfffff 	.word	0x3fcfffff
 800366c:	f000 f974 	bl	8003958 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003690:	651a      	str	r2, [r3, #80]	; 0x50
 8003692:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8003694:	2200      	movs	r2, #0
 8003696:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f967 	bl	800396c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800369e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a0:	0c5b      	lsrs	r3, r3, #17
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	0c5b      	lsrs	r3, r3, #17
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00f      	beq.n	80036d6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036be:	651a      	str	r2, [r3, #80]	; 0x50
 80036c0:	4b77      	ldr	r3, [pc, #476]	; (80038a0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80036d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_FDCAN_IRQHandler+0x4b4>)
 80036e4:	400b      	ands	r3, r1
 80036e6:	6513      	str	r3, [r2, #80]	; 0x50
 80036e8:	4a6d      	ldr	r2, [pc, #436]	; (80038a0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80036ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ec:	0f9b      	lsrs	r3, r3, #30
 80036ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80036f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f958 	bl	80039a8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80036f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d011      	beq.n	8003722 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003704:	4b67      	ldr	r3, [pc, #412]	; (80038a4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003706:	400b      	ands	r3, r1
 8003708:	6513      	str	r3, [r2, #80]	; 0x50
 800370a:	4a65      	ldr	r2, [pc, #404]	; (80038a0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	0f9b      	lsrs	r3, r3, #30
 8003710:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a60      	ldr	r2, [pc, #384]	; (80038a8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	f040 80ac 	bne.w	8003886 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a4 	beq.w	8003886 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003752:	4013      	ands	r3, r2
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800376a:	4013      	ands	r3, r2
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	4013      	ands	r3, r2
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8003790:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	4013      	ands	r3, r2
 800379c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80037a8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80037d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8f1 	bl	80039be <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037e8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80037ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8f1 	bl	80039d4 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01a      	beq.n	8003834 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	099b      	lsrs	r3, r3, #6
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003810:	0c1b      	lsrs	r3, r3, #16
 8003812:	b29b      	uxth	r3, r3
 8003814:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2240      	movs	r2, #64	; 0x40
 8003828:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8db 	bl	80039ea <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8003842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8dc 	bl	8003a02 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00b      	beq.n	8003868 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	431a      	orrs	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f87f 	bl	8003994 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003896:	bf00      	nop
 8003898:	3758      	adds	r7, #88	; 0x58
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	4000a800 	.word	0x4000a800
 80038a4:	3fcfffff 	.word	0x3fcfffff
 80038a8:	4000a000 	.word	0x4000a000

080038ac <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80039be:	b480      	push	{r7}
 80039c0:	b083      	sub	sp, #12
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a2e:	4ba7      	ldr	r3, [pc, #668]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	0091      	lsls	r1, r2, #2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a48:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	4413      	add	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a6e:	4b97      	ldr	r3, [pc, #604]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	0091      	lsls	r1, r2, #2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a88:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003ab0:	4b86      	ldr	r3, [pc, #536]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	0091      	lsls	r1, r2, #2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	430b      	orrs	r3, r1
 8003abe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003aca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	041a      	lsls	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4413      	add	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003af8:	4b74      	ldr	r3, [pc, #464]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	0091      	lsls	r1, r2, #2
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6812      	ldr	r2, [r2, #0]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b12:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	041a      	lsls	r2, r3, #16
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4413      	add	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003b40:	4b62      	ldr	r3, [pc, #392]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	0091      	lsls	r1, r2, #2
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003b6c:	4b57      	ldr	r3, [pc, #348]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	0091      	lsls	r1, r2, #2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b86:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	041a      	lsls	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0091      	lsls	r1, r2, #2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003bc8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd0:	041a      	lsls	r2, r3, #16
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003be4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bec:	061a      	lsls	r2, r3, #24
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	009a      	lsls	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	441a      	add	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003c4a:	fb01 f303 	mul.w	r3, r1, r3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003c62:	fb01 f303 	mul.w	r3, r1, r3
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	441a      	add	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003c92:	fb01 f303 	mul.w	r3, r1, r3
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	441a      	add	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc2:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d915      	bls.n	8003cf4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003cc8:	e006      	b.n	8003cd8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003cca:	bf00      	nop
 8003ccc:	ffff0003 	.word	0xffff0003
 8003cd0:	10002b00 	.word	0x10002b00
 8003cd4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2203      	movs	r2, #3
 8003cec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e010      	b.n	8003d16 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e005      	b.n	8003d08 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d3f3      	bcc.n	8003cfc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d32:	4b86      	ldr	r3, [pc, #536]	; (8003f4c <HAL_GPIO_Init+0x228>)
 8003d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d36:	e18c      	b.n	8004052 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 817e 	beq.w	800404c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d005      	beq.n	8003d68 <HAL_GPIO_Init+0x44>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d130      	bne.n	8003dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2203      	movs	r2, #3
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d9e:	2201      	movs	r2, #1
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	091b      	lsrs	r3, r3, #4
 8003db4:	f003 0201 	and.w	r2, r3, #1
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d017      	beq.n	8003e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4013      	ands	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d123      	bne.n	8003e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	220f      	movs	r2, #15
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80d8 	beq.w	800404c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_GPIO_Init+0x22c>)
 8003e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ea2:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <HAL_GPIO_Init+0x22c>)
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003eac:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <HAL_GPIO_Init+0x22c>)
 8003eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_GPIO_Init+0x230>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <HAL_GPIO_Init+0x234>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d04a      	beq.n	8003f7c <HAL_GPIO_Init+0x258>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_GPIO_Init+0x238>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <HAL_GPIO_Init+0x222>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <HAL_GPIO_Init+0x23c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d025      	beq.n	8003f42 <HAL_GPIO_Init+0x21e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_GPIO_Init+0x240>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d01f      	beq.n	8003f3e <HAL_GPIO_Init+0x21a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <HAL_GPIO_Init+0x244>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d019      	beq.n	8003f3a <HAL_GPIO_Init+0x216>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_GPIO_Init+0x248>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x212>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a17      	ldr	r2, [pc, #92]	; (8003f70 <HAL_GPIO_Init+0x24c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00d      	beq.n	8003f32 <HAL_GPIO_Init+0x20e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_GPIO_Init+0x250>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <HAL_GPIO_Init+0x20a>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a15      	ldr	r2, [pc, #84]	; (8003f78 <HAL_GPIO_Init+0x254>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d101      	bne.n	8003f2a <HAL_GPIO_Init+0x206>
 8003f26:	2309      	movs	r3, #9
 8003f28:	e029      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f2a:	230a      	movs	r3, #10
 8003f2c:	e027      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f2e:	2307      	movs	r3, #7
 8003f30:	e025      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f32:	2306      	movs	r3, #6
 8003f34:	e023      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f36:	2305      	movs	r3, #5
 8003f38:	e021      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	e01f      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e01d      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e01b      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e019      	b.n	8003f7e <HAL_GPIO_Init+0x25a>
 8003f4a:	bf00      	nop
 8003f4c:	58000080 	.word	0x58000080
 8003f50:	58024400 	.word	0x58024400
 8003f54:	58000400 	.word	0x58000400
 8003f58:	58020000 	.word	0x58020000
 8003f5c:	58020400 	.word	0x58020400
 8003f60:	58020800 	.word	0x58020800
 8003f64:	58020c00 	.word	0x58020c00
 8003f68:	58021000 	.word	0x58021000
 8003f6c:	58021400 	.word	0x58021400
 8003f70:	58021800 	.word	0x58021800
 8003f74:	58021c00 	.word	0x58021c00
 8003f78:	58022400 	.word	0x58022400
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	f002 0203 	and.w	r2, r2, #3
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	4093      	lsls	r3, r2
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f8e:	4938      	ldr	r1, [pc, #224]	; (8004070 <HAL_GPIO_Init+0x34c>)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	3302      	adds	r3, #2
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003fc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	43db      	mvns	r3, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4013      	ands	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	3301      	adds	r3, #1
 8004050:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f ae6b 	bne.w	8003d38 <HAL_GPIO_Init+0x14>
  }
}
 8004062:	bf00      	nop
 8004064:	bf00      	nop
 8004066:	3724      	adds	r7, #36	; 0x24
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	58000400 	.word	0x58000400

08004074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	887b      	ldrh	r3, [r7, #2]
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	e001      	b.n	8004096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	b08f      	sub	sp, #60	; 0x3c
 80040a8:	af0a      	add	r7, sp, #40	; 0x28
 80040aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e116      	b.n	80042e4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f01b fe65 	bl	801fda0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2203      	movs	r2, #3
 80040da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d102      	bne.n	80040f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f007 f9c0 	bl	800b47a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	687e      	ldr	r6, [r7, #4]
 8004102:	466d      	mov	r5, sp
 8004104:	f106 0410 	add.w	r4, r6, #16
 8004108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800410c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800410e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004114:	e885 0003 	stmia.w	r5, {r0, r1}
 8004118:	1d33      	adds	r3, r6, #4
 800411a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800411c:	6838      	ldr	r0, [r7, #0]
 800411e:	f007 f88b 	bl	800b238 <USB_CoreInit>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0d7      	b.n	80042e4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2100      	movs	r1, #0
 800413a:	4618      	mov	r0, r3
 800413c:	f007 f9ae 	bl	800b49c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e04a      	b.n	80041dc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	333d      	adds	r3, #61	; 0x3d
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800415a:	7bfa      	ldrb	r2, [r7, #15]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	333c      	adds	r3, #60	; 0x3c
 800416a:	7bfa      	ldrb	r2, [r7, #15]
 800416c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	b298      	uxth	r0, r3
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3356      	adds	r3, #86	; 0x56
 8004182:	4602      	mov	r2, r0
 8004184:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3340      	adds	r3, #64	; 0x40
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3344      	adds	r3, #68	; 0x44
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041ae:	7bfa      	ldrb	r2, [r7, #15]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3348      	adds	r3, #72	; 0x48
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	334c      	adds	r3, #76	; 0x4c
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3301      	adds	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d3af      	bcc.n	8004146 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	e044      	b.n	8004276 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041ec:	7bfa      	ldrb	r2, [r7, #15]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4413      	add	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004202:	7bfa      	ldrb	r2, [r7, #15]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004214:	7bfa      	ldrb	r2, [r7, #15]
 8004216:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	4613      	mov	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	3301      	adds	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3b5      	bcc.n	80041ec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	687e      	ldr	r6, [r7, #4]
 8004288:	466d      	mov	r5, sp
 800428a:	f106 0410 	add.w	r4, r6, #16
 800428e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800429a:	e885 0003 	stmia.w	r5, {r0, r1}
 800429e:	1d33      	adds	r3, r6, #4
 80042a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042a2:	6838      	ldr	r0, [r7, #0]
 80042a4:	f007 f946 	bl	800b534 <USB_DevInit>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d005      	beq.n	80042ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e014      	b.n	80042e4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f001 f970 	bl	80055b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4618      	mov	r0, r3
 80042de:	f008 f988 	bl	800c5f2 <USB_DevDisconnect>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_PCD_Start+0x1c>
 8004304:	2302      	movs	r3, #2
 8004306:	e022      	b.n	800434e <HAL_PCD_Start+0x62>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8004320:	2b01      	cmp	r3, #1
 8004322:	d105      	bne.n	8004330 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f007 f88f 	bl	800b458 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f008 f936 	bl	800c5b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004356:	b590      	push	{r4, r7, lr}
 8004358:	b08d      	sub	sp, #52	; 0x34
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f008 f9f4 	bl	800c75a <USB_GetMode>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	f040 84b7 	bne.w	8004ce8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f008 f958 	bl	800c634 <USB_ReadInterrupts>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 84ad 	beq.w	8004ce6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	0a1b      	lsrs	r3, r3, #8
 8004396:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f008 f945 	bl	800c634 <USB_ReadInterrupts>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d107      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f002 0202 	and.w	r2, r2, #2
 80043c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f008 f933 	bl	800c634 <USB_ReadInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d161      	bne.n	800449c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0210 	bic.w	r2, r2, #16
 80043e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f003 020f 	and.w	r2, r3, #15
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	0c5b      	lsrs	r3, r3, #17
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b02      	cmp	r3, #2
 8004412:	d124      	bne.n	800445e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d035      	beq.n	800448c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800442a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800442e:	b29b      	uxth	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	6a38      	ldr	r0, [r7, #32]
 8004434:	f007 ff6a 	bl	800c30c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004444:	441a      	add	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004456:	441a      	add	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	615a      	str	r2, [r3, #20]
 800445c:	e016      	b.n	800448c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	0c5b      	lsrs	r3, r3, #17
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	2b06      	cmp	r3, #6
 8004468:	d110      	bne.n	800448c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004470:	2208      	movs	r2, #8
 8004472:	4619      	mov	r1, r3
 8004474:	6a38      	ldr	r0, [r7, #32]
 8004476:	f007 ff49 	bl	800c30c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	091b      	lsrs	r3, r3, #4
 8004482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004486:	441a      	add	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0210 	orr.w	r2, r2, #16
 800449a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f008 f8c7 	bl	800c634 <USB_ReadInterrupts>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044b0:	f040 80a7 	bne.w	8004602 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f008 f8cc 	bl	800c65a <USB_ReadDevAllOutEpInterrupt>
 80044c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044c4:	e099      	b.n	80045fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 808e 	beq.w	80045ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	4611      	mov	r1, r2
 80044dc:	4618      	mov	r0, r3
 80044de:	f008 f8f0 	bl	800c6c2 <USB_ReadDevOutEPInterrupt>
 80044e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2301      	movs	r3, #1
 80044fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 fed2 	bl	80052ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00c      	beq.n	800452c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451e:	461a      	mov	r2, r3
 8004520:	2308      	movs	r3, #8
 8004522:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 ffa8 	bl	800547c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2310      	movs	r3, #16
 8004546:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d030      	beq.n	80045b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455a:	2b80      	cmp	r3, #128	; 0x80
 800455c:	d109      	bne.n	8004572 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800456c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004570:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004574:	4613      	mov	r3, r2
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	4413      	add	r3, r2
 8004584:	3304      	adds	r3, #4
 8004586:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d108      	bne.n	80045a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2200      	movs	r2, #0
 8004594:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f01b fcf7 	bl	801ff90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	2302      	movs	r3, #2
 80045b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d008      	beq.n	80045d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ca:	461a      	mov	r2, r3
 80045cc:	2320      	movs	r3, #32
 80045ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	461a      	mov	r2, r3
 80045e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	3301      	adds	r3, #1
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f47f af62 	bne.w	80044c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f008 f814 	bl	800c634 <USB_ReadInterrupts>
 800460c:	4603      	mov	r3, r0
 800460e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004612:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004616:	f040 80db 	bne.w	80047d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f008 f835 	bl	800c68e <USB_ReadDevAllInEpInterrupt>
 8004624:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800462a:	e0cd      	b.n	80047c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80c2 	beq.w	80047bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f008 f85b 	bl	800c6fe <USB_ReadDevInEPInterrupt>
 8004648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d057      	beq.n	8004704 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	2201      	movs	r2, #1
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	43db      	mvns	r3, r3
 800466e:	69f9      	ldr	r1, [r7, #28]
 8004670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004674:	4013      	ands	r3, r2
 8004676:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004684:	461a      	mov	r2, r3
 8004686:	2301      	movs	r3, #1
 8004688:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d132      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3348      	adds	r3, #72	; 0x48
 80046a2:	6819      	ldr	r1, [r3, #0]
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4403      	add	r3, r0
 80046b2:	3344      	adds	r3, #68	; 0x44
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4419      	add	r1, r3
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4403      	add	r3, r0
 80046c6:	3348      	adds	r3, #72	; 0x48
 80046c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d113      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	334c      	adds	r3, #76	; 0x4c
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d108      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046f0:	461a      	mov	r2, r3
 80046f2:	2101      	movs	r1, #1
 80046f4:	f008 f864 	bl	800c7c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	4619      	mov	r1, r3
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f01b fbc1 	bl	801fe86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	461a      	mov	r2, r3
 800471c:	2308      	movs	r3, #8
 800471e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004736:	461a      	mov	r2, r3
 8004738:	2310      	movs	r3, #16
 800473a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d008      	beq.n	8004758 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	461a      	mov	r2, r3
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d023      	beq.n	80047aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004764:	6a38      	ldr	r0, [r7, #32]
 8004766:	f007 f843 	bl	800b7f0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800476a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	3338      	adds	r3, #56	; 0x38
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	3304      	adds	r3, #4
 800477c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	78db      	ldrb	r3, [r3, #3]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d108      	bne.n	8004798 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	b2db      	uxtb	r3, r3
 8004790:	4619      	mov	r1, r3
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f01b fc0e 	bl	801ffb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	461a      	mov	r2, r3
 80047a6:	2302      	movs	r3, #2
 80047a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fcea 	bl	8005190 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	3301      	adds	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f47f af2e 	bne.w	800462c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f007 ff2d 	bl	800c634 <USB_ReadInterrupts>
 80047da:	4603      	mov	r3, r0
 80047dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e4:	d122      	bne.n	800482c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	69fa      	ldr	r2, [r7, #28]
 80047f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004800:	2b01      	cmp	r3, #1
 8004802:	d108      	bne.n	8004816 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800480c:	2100      	movs	r1, #0
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fef6 	bl	8005600 <HAL_PCDEx_LPM_Callback>
 8004814:	e002      	b.n	800481c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f01b fbac 	bl	801ff74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695a      	ldr	r2, [r3, #20]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800482a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f007 feff 	bl	800c634 <USB_ReadInterrupts>
 8004836:	4603      	mov	r3, r0
 8004838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004840:	d112      	bne.n	8004868 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f01b fb68 	bl	801ff28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004866:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f007 fee1 	bl	800c634 <USB_ReadInterrupts>
 8004872:	4603      	mov	r3, r0
 8004874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487c:	d121      	bne.n	80048c2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800488c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d111      	bne.n	80048bc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	089b      	lsrs	r3, r3, #2
 80048a8:	f003 020f 	and.w	r2, r3, #15
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048b2:	2101      	movs	r1, #1
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fea3 	bl	8005600 <HAL_PCDEx_LPM_Callback>
 80048ba:	e002      	b.n	80048c2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f01b fb33 	bl	801ff28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f007 feb4 	bl	800c634 <USB_ReadInterrupts>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	f040 80b7 	bne.w	8004a48 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2110      	movs	r1, #16
 80048f4:	4618      	mov	r0, r3
 80048f6:	f006 ff7b 	bl	800b7f0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fa:	2300      	movs	r3, #0
 80048fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fe:	e046      	b.n	800498e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	461a      	mov	r2, r3
 800490e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004912:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004924:	0151      	lsls	r1, r2, #5
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	440a      	add	r2, r1
 800492a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004932:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004940:	461a      	mov	r2, r3
 8004942:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004946:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	69fa      	ldr	r2, [r7, #28]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004962:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004966:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004982:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004986:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	3301      	adds	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d3b3      	bcc.n	8004900 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c4:	f043 030b 	orr.w	r3, r3, #11
 80049c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049da:	f043 030b 	orr.w	r3, r3, #11
 80049de:	6453      	str	r3, [r2, #68]	; 0x44
 80049e0:	e015      	b.n	8004a0e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	4619      	mov	r1, r3
 80049f2:	f242 032b 	movw	r3, #8235	; 0x202b
 80049f6:	4313      	orrs	r3, r2
 80049f8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a08:	f043 030b 	orr.w	r3, r3, #11
 8004a0c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a20:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a32:	461a      	mov	r2, r3
 8004a34:	f007 fec4 	bl	800c7c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695a      	ldr	r2, [r3, #20]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f007 fdf1 	bl	800c634 <USB_ReadInterrupts>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a5c:	d124      	bne.n	8004aa8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f007 fe88 	bl	800c778 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f006 ff3c 	bl	800b8ea <USB_GetDevSpeed>
 8004a72:	4603      	mov	r3, r0
 8004a74:	461a      	mov	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681c      	ldr	r4, [r3, #0]
 8004a7e:	f001 fd1f 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8004a82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f006 fc41 	bl	800b314 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f01b fa1f 	bl	801fed6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f007 fdc1 	bl	800c634 <USB_ReadInterrupts>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d10a      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f01b f9fc 	bl	801feba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f002 0208 	and.w	r2, r2, #8
 8004ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f007 fdac 	bl	800c634 <USB_ReadInterrupts>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d122      	bne.n	8004b2c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af2:	2301      	movs	r3, #1
 8004af4:	627b      	str	r3, [r7, #36]	; 0x24
 8004af6:	e014      	b.n	8004b22 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	440b      	add	r3, r1
 8004b06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 fb09 	bl	800512e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	3301      	adds	r3, #1
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d3e5      	bcc.n	8004af8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f007 fd7f 	bl	800c634 <USB_ReadInterrupts>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b40:	d13b      	bne.n	8004bba <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b42:	2301      	movs	r3, #1
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	e02b      	b.n	8004ba0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3340      	adds	r3, #64	; 0x40
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d115      	bne.n	8004b9a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da12      	bge.n	8004b9a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	333f      	adds	r3, #63	; 0x3f
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 faca 	bl	800512e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d3ce      	bcc.n	8004b48 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f007 fd38 	bl	800c634 <USB_ReadInterrupts>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bce:	d155      	bne.n	8004c7c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd4:	e045      	b.n	8004c62 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d12e      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bfe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da2b      	bge.n	8004c5c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c10:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d121      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c58:	6053      	str	r3, [r2, #4]
            break;
 8004c5a:	e007      	b.n	8004c6c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5e:	3301      	adds	r3, #1
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d3b4      	bcc.n	8004bd6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f007 fcd7 	bl	800c634 <USB_ReadInterrupts>
 8004c86:	4603      	mov	r3, r0
 8004c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d10a      	bne.n	8004ca8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f01b f9a0 	bl	801ffd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ca6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f007 fcc1 	bl	800c634 <USB_ReadInterrupts>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d115      	bne.n	8004ce8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d002      	beq.n	8004cd4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f01b f990 	bl	801fff4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	e000      	b.n	8004ce8 <HAL_PCD_IRQHandler+0x992>
      return;
 8004ce6:	bf00      	nop
    }
  }
}
 8004ce8:	3734      	adds	r7, #52	; 0x34
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd90      	pop	{r4, r7, pc}

08004cee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b082      	sub	sp, #8
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_PCD_SetAddress+0x1a>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e013      	b.n	8004d30 <HAL_PCD_SetAddress+0x42>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	78fa      	ldrb	r2, [r7, #3]
 8004d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f007 fc1f 	bl	800c564 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	4608      	mov	r0, r1
 8004d42:	4611      	mov	r1, r2
 8004d44:	461a      	mov	r2, r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	70fb      	strb	r3, [r7, #3]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	803b      	strh	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da0f      	bge.n	8004d7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d5e:	78fb      	ldrb	r3, [r7, #3]
 8004d60:	f003 020f 	and.w	r2, r3, #15
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	3338      	adds	r3, #56	; 0x38
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	4413      	add	r3, r2
 8004d72:	3304      	adds	r3, #4
 8004d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	705a      	strb	r2, [r3, #1]
 8004d7c:	e00f      	b.n	8004d9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	f003 020f 	and.w	r2, r3, #15
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	4413      	add	r3, r2
 8004d94:	3304      	adds	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004daa:	883a      	ldrh	r2, [r7, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	78ba      	ldrb	r2, [r7, #2]
 8004db4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	785b      	ldrb	r3, [r3, #1]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dc8:	78bb      	ldrb	r3, [r7, #2]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d102      	bne.n	8004dd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_PCD_EP_Open+0xaa>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e00e      	b.n	8004e00 <HAL_PCD_EP_Open+0xc8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68f9      	ldr	r1, [r7, #12]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f006 fd9f 	bl	800b934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004dfe:	7afb      	ldrb	r3, [r7, #11]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	da0f      	bge.n	8004e3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	3338      	adds	r3, #56	; 0x38
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	4413      	add	r3, r2
 8004e30:	3304      	adds	r3, #4
 8004e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	705a      	strb	r2, [r3, #1]
 8004e3a:	e00f      	b.n	8004e5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 020f 	and.w	r2, r3, #15
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	3304      	adds	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_PCD_EP_Close+0x6e>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e00e      	b.n	8004e94 <HAL_PCD_EP_Close+0x8c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68f9      	ldr	r1, [r7, #12]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f006 fddd 	bl	800ba44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eac:	7afb      	ldrb	r3, [r7, #11]
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ede:	7afb      	ldrb	r3, [r7, #11]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d102      	bne.n	8004ef8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	f006 fe79 	bl	800bbfc <USB_EPStartXfer>

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 020f 	and.w	r2, r3, #15
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	460b      	mov	r3, r1
 8004f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f54:	7afb      	ldrb	r3, [r7, #11]
 8004f56:	f003 020f 	and.w	r2, r3, #15
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	3338      	adds	r3, #56	; 0x38
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4413      	add	r3, r2
 8004f68:	3304      	adds	r3, #4
 8004f6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2201      	movs	r2, #1
 8004f82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f84:	7afb      	ldrb	r3, [r7, #11]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d102      	bne.n	8004f9e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	461a      	mov	r2, r3
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	f006 fe26 	bl	800bbfc <USB_EPStartXfer>

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 020f 	and.w	r2, r3, #15
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d901      	bls.n	8004fd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e050      	b.n	800507a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da0f      	bge.n	8005000 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 020f 	and.w	r2, r3, #15
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	3338      	adds	r3, #56	; 0x38
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	705a      	strb	r2, [r3, #1]
 8004ffe:	e00d      	b.n	800501c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	3304      	adds	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005022:	78fb      	ldrb	r3, [r7, #3]
 8005024:	f003 030f 	and.w	r3, r3, #15
 8005028:	b2da      	uxtb	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_PCD_EP_SetStall+0x82>
 8005038:	2302      	movs	r3, #2
 800503a:	e01e      	b.n	800507a <HAL_PCD_EP_SetStall+0xc0>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68f9      	ldr	r1, [r7, #12]
 800504a:	4618      	mov	r0, r3
 800504c:	f007 f9b6 	bl	800c3bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	b2d9      	uxtb	r1, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800506a:	461a      	mov	r2, r3
 800506c:	f007 fba8 	bl	800c7c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d901      	bls.n	80050a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e042      	b.n	8005126 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	da0f      	bge.n	80050c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 020f 	and.w	r2, r3, #15
 80050ae:	4613      	mov	r3, r2
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	3338      	adds	r3, #56	; 0x38
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	4413      	add	r3, r2
 80050bc:	3304      	adds	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	705a      	strb	r2, [r3, #1]
 80050c6:	e00f      	b.n	80050e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	f003 020f 	and.w	r2, r3, #15
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	3304      	adds	r3, #4
 80050e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_PCD_EP_ClrStall+0x86>
 8005104:	2302      	movs	r3, #2
 8005106:	e00e      	b.n	8005126 <HAL_PCD_EP_ClrStall+0xa4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	f007 f9be 	bl	800c498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800513a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	da0c      	bge.n	800515c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	3338      	adds	r3, #56	; 0x38
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	4413      	add	r3, r2
 8005156:	3304      	adds	r3, #4
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	e00c      	b.n	8005176 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800515c:	78fb      	ldrb	r3, [r7, #3]
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	4613      	mov	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	3304      	adds	r3, #4
 8005174:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68f9      	ldr	r1, [r7, #12]
 800517c:	4618      	mov	r0, r3
 800517e:	f006 ffdd 	bl	800c13c <USB_EPStopXfer>
 8005182:	4603      	mov	r3, r0
 8005184:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005186:	7afb      	ldrb	r3, [r7, #11]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08a      	sub	sp, #40	; 0x28
 8005194:	af02      	add	r7, sp, #8
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4613      	mov	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	3338      	adds	r3, #56	; 0x38
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	695a      	ldr	r2, [r3, #20]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d901      	bls.n	80051c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e06c      	b.n	80052a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051ec:	e02b      	b.n	8005246 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	d902      	bls.n	800520a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3303      	adds	r3, #3
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68d9      	ldr	r1, [r3, #12]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005222:	b2db      	uxtb	r3, r3
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4603      	mov	r3, r0
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f007 f831 	bl	800c290 <USB_WritePacket>

    ep->xfer_buff  += len;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	441a      	add	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	441a      	add	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	b29b      	uxth	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	429a      	cmp	r2, r3
 800525a:	d809      	bhi.n	8005270 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005264:	429a      	cmp	r2, r3
 8005266:	d203      	bcs.n	8005270 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1be      	bne.n	80051ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	d811      	bhi.n	80052a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	2201      	movs	r2, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	43db      	mvns	r3, r3
 8005296:	6939      	ldr	r1, [r7, #16]
 8005298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800529c:	4013      	ands	r3, r2
 800529e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3720      	adds	r7, #32
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	333c      	adds	r3, #60	; 0x3c
 80052c4:	3304      	adds	r3, #4
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d17b      	bne.n	80053da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d015      	beq.n	8005318 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4a61      	ldr	r2, [pc, #388]	; (8005474 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	f240 80b9 	bls.w	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 80b3 	beq.w	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	461a      	mov	r2, r3
 8005310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005314:	6093      	str	r3, [r2, #8]
 8005316:	e0a7      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f003 0320 	and.w	r3, r3, #32
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	461a      	mov	r2, r3
 8005330:	2320      	movs	r3, #32
 8005332:	6093      	str	r3, [r2, #8]
 8005334:	e098      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	f040 8093 	bne.w	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4a4b      	ldr	r2, [pc, #300]	; (8005474 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d90f      	bls.n	800536a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005360:	461a      	mov	r2, r3
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	6093      	str	r3, [r2, #8]
 8005368:	e07e      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	0159      	lsls	r1, r3, #5
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	440b      	add	r3, r1
 800538c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005396:	1ad2      	subs	r2, r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d114      	bne.n	80053cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053b4:	461a      	mov	r2, r3
 80053b6:	2101      	movs	r1, #1
 80053b8:	f007 fa02 	bl	800c7c0 <USB_EP0_OutStart>
 80053bc:	e006      	b.n	80053cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	441a      	add	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f01a fd3c 	bl	801fe50 <HAL_PCD_DataOutStageCallback>
 80053d8:	e046      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d124      	bne.n	800542c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	461a      	mov	r2, r3
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	6093      	str	r3, [r2, #8]
 8005400:	e032      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	2320      	movs	r3, #32
 800541c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f01a fd13 	bl	801fe50 <HAL_PCD_DataOutStageCallback>
 800542a:	e01d      	b.n	8005468 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d114      	bne.n	800545c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d108      	bne.n	800545c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005454:	461a      	mov	r2, r3
 8005456:	2100      	movs	r1, #0
 8005458:	f007 f9b2 	bl	800c7c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f01a fcf4 	bl	801fe50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3720      	adds	r7, #32
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	4f54300a 	.word	0x4f54300a
 8005478:	4f54310a 	.word	0x4f54310a

0800547c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	333c      	adds	r3, #60	; 0x3c
 8005494:	3304      	adds	r3, #4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <PCD_EP_OutSetupPacket_int+0x88>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d90e      	bls.n	80054d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c8:	461a      	mov	r2, r3
 80054ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f01a fcab 	bl	801fe2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4a0a      	ldr	r2, [pc, #40]	; (8005504 <PCD_EP_OutSetupPacket_int+0x88>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d90c      	bls.n	80054f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d108      	bne.n	80054f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054f0:	461a      	mov	r2, r3
 80054f2:	2101      	movs	r1, #1
 80054f4:	f007 f964 	bl	800c7c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	4f54300a 	.word	0x4f54300a

08005508 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
 8005514:	4613      	mov	r3, r2
 8005516:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d107      	bne.n	8005536 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005526:	883b      	ldrh	r3, [r7, #0]
 8005528:	0419      	lsls	r1, r3, #16
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	430a      	orrs	r2, r1
 8005532:	629a      	str	r2, [r3, #40]	; 0x28
 8005534:	e028      	b.n	8005588 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4413      	add	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005544:	2300      	movs	r3, #0
 8005546:	73fb      	strb	r3, [r7, #15]
 8005548:	e00d      	b.n	8005566 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	3340      	adds	r3, #64	; 0x40
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	4413      	add	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	3301      	adds	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
 8005566:	7bfa      	ldrb	r2, [r7, #15]
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	3b01      	subs	r3, #1
 800556c:	429a      	cmp	r2, r3
 800556e:	d3ec      	bcc.n	800554a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005570:	883b      	ldrh	r3, [r7, #0]
 8005572:	0418      	lsls	r0, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6819      	ldr	r1, [r3, #0]
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	3b01      	subs	r3, #1
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	4302      	orrs	r2, r0
 8005580:	3340      	adds	r3, #64	; 0x40
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	440b      	add	r3, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	887a      	ldrh	r2, [r7, #2]
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e6:	4b05      	ldr	r3, [pc, #20]	; (80055fc <HAL_PCDEx_ActivateLPM+0x44>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	10000003 	.word	0x10000003

08005600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	460b      	mov	r3, r1
 800560a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005620:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d00a      	beq.n	8005642 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d001      	beq.n	800563e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e01f      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e01d      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	f023 0207 	bic.w	r2, r3, #7
 800564a:	490f      	ldr	r1, [pc, #60]	; (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4313      	orrs	r3, r2
 8005650:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005652:	f7fb ff0b 	bl	800146c <HAL_GetTick>
 8005656:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005658:	e009      	b.n	800566e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800565a:	f7fb ff07 	bl	800146c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005668:	d901      	bls.n	800566e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e007      	b.n	800567e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_PWREx_ConfigSupply+0x70>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567a:	d1ee      	bne.n	800565a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	58024800 	.word	0x58024800

0800568c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569a:	60d3      	str	r3, [r2, #12]
}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	58024800 	.word	0x58024800

080056ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e3c8      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0301 	and.w	r3, r3, #1
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 8087 	beq.w	80057da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056cc:	4b88      	ldr	r3, [pc, #544]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056d6:	4b86      	ldr	r3, [pc, #536]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d007      	beq.n	80056f2 <HAL_RCC_OscConfig+0x46>
 80056e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e4:	2b18      	cmp	r3, #24
 80056e6:	d110      	bne.n	800570a <HAL_RCC_OscConfig+0x5e>
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d10b      	bne.n	800570a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f2:	4b7f      	ldr	r3, [pc, #508]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d06c      	beq.n	80057d8 <HAL_RCC_OscConfig+0x12c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d168      	bne.n	80057d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e3a2      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005712:	d106      	bne.n	8005722 <HAL_RCC_OscConfig+0x76>
 8005714:	4b76      	ldr	r3, [pc, #472]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a75      	ldr	r2, [pc, #468]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800571a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	e02e      	b.n	8005780 <HAL_RCC_OscConfig+0xd4>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10c      	bne.n	8005744 <HAL_RCC_OscConfig+0x98>
 800572a:	4b71      	ldr	r3, [pc, #452]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a70      	ldr	r2, [pc, #448]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	4b6e      	ldr	r3, [pc, #440]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6d      	ldr	r2, [pc, #436]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800573c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	e01d      	b.n	8005780 <HAL_RCC_OscConfig+0xd4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800574c:	d10c      	bne.n	8005768 <HAL_RCC_OscConfig+0xbc>
 800574e:	4b68      	ldr	r3, [pc, #416]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a67      	ldr	r2, [pc, #412]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	4b65      	ldr	r3, [pc, #404]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a64      	ldr	r2, [pc, #400]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005764:	6013      	str	r3, [r2, #0]
 8005766:	e00b      	b.n	8005780 <HAL_RCC_OscConfig+0xd4>
 8005768:	4b61      	ldr	r3, [pc, #388]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a60      	ldr	r2, [pc, #384]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800576e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	4b5e      	ldr	r3, [pc, #376]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5d      	ldr	r2, [pc, #372]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800577a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800577e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d013      	beq.n	80057b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fb fe70 	bl	800146c <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005790:	f7fb fe6c 	bl	800146c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	; 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e356      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057a2:	4b53      	ldr	r3, [pc, #332]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0f0      	beq.n	8005790 <HAL_RCC_OscConfig+0xe4>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fb fe5c 	bl	800146c <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fb fe58 	bl	800146c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e342      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057ca:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x10c>
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 808c 	beq.w	8005900 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e8:	4b41      	ldr	r3, [pc, #260]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057f2:	4b3f      	ldr	r3, [pc, #252]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80057f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d007      	beq.n	800580e <HAL_RCC_OscConfig+0x162>
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	2b18      	cmp	r3, #24
 8005802:	d137      	bne.n	8005874 <HAL_RCC_OscConfig+0x1c8>
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d132      	bne.n	8005874 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800580e:	4b38      	ldr	r3, [pc, #224]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_RCC_OscConfig+0x17a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e314      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f023 0219 	bic.w	r2, r3, #25
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	492f      	ldr	r1, [pc, #188]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005838:	f7fb fe18 	bl	800146c <HAL_GetTick>
 800583c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005840:	f7fb fe14 	bl	800146c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e2fe      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	061b      	lsls	r3, r3, #24
 800586c:	4920      	ldr	r1, [pc, #128]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005872:	e045      	b.n	8005900 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d026      	beq.n	80058ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f023 0219 	bic.w	r2, r3, #25
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4919      	ldr	r1, [pc, #100]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800588e:	f7fb fded 	bl	800146c <HAL_GetTick>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005896:	f7fb fde9 	bl	800146c <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e2d3      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058a8:	4b11      	ldr	r3, [pc, #68]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b4:	4b0e      	ldr	r3, [pc, #56]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	061b      	lsls	r3, r3, #24
 80058c2:	490b      	ldr	r1, [pc, #44]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	604b      	str	r3, [r1, #4]
 80058c8:	e01a      	b.n	8005900 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a08      	ldr	r2, [pc, #32]	; (80058f0 <HAL_RCC_OscConfig+0x244>)
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fb fdc9 	bl	800146c <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058de:	f7fb fdc5 	bl	800146c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d903      	bls.n	80058f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e2af      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
 80058f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80058f4:	4b96      	ldr	r3, [pc, #600]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1ee      	bne.n	80058de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d06a      	beq.n	80059e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800590c:	4b90      	ldr	r3, [pc, #576]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005914:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005916:	4b8e      	ldr	r3, [pc, #568]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	2b08      	cmp	r3, #8
 8005920:	d007      	beq.n	8005932 <HAL_RCC_OscConfig+0x286>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b18      	cmp	r3, #24
 8005926:	d11b      	bne.n	8005960 <HAL_RCC_OscConfig+0x2b4>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	2b01      	cmp	r3, #1
 8005930:	d116      	bne.n	8005960 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005932:	4b87      	ldr	r3, [pc, #540]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_RCC_OscConfig+0x29e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	2b80      	cmp	r3, #128	; 0x80
 8005944:	d001      	beq.n	800594a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e282      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800594a:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	061b      	lsls	r3, r3, #24
 8005958:	497d      	ldr	r1, [pc, #500]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800595a:	4313      	orrs	r3, r2
 800595c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800595e:	e040      	b.n	80059e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d023      	beq.n	80059b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005968:	4b79      	ldr	r3, [pc, #484]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a78      	ldr	r2, [pc, #480]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800596e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fb fd7a 	bl	800146c <HAL_GetTick>
 8005978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800597c:	f7fb fd76 	bl	800146c <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e260      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800598e:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0f0      	beq.n	800597c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800599a:	4b6d      	ldr	r3, [pc, #436]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	061b      	lsls	r3, r3, #24
 80059a8:	4969      	ldr	r1, [pc, #420]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60cb      	str	r3, [r1, #12]
 80059ae:	e018      	b.n	80059e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a66      	ldr	r2, [pc, #408]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fb fd56 	bl	800146c <HAL_GetTick>
 80059c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80059c4:	f7fb fd52 	bl	800146c <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e23c      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059d6:	4b5e      	ldr	r3, [pc, #376]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d036      	beq.n	8005a5c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d019      	beq.n	8005a2a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f6:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	4a55      	ldr	r2, [pc, #340]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 80059fc:	f043 0301 	orr.w	r3, r3, #1
 8005a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fb fd33 	bl	800146c <HAL_GetTick>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0a:	f7fb fd2f 	bl	800146c <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e219      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a1c:	4b4c      	ldr	r3, [pc, #304]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f0      	beq.n	8005a0a <HAL_RCC_OscConfig+0x35e>
 8005a28:	e018      	b.n	8005a5c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a2a:	4b49      	ldr	r3, [pc, #292]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2e:	4a48      	ldr	r2, [pc, #288]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a36:	f7fb fd19 	bl	800146c <HAL_GetTick>
 8005a3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fb fd15 	bl	800146c <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e1ff      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a50:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d036      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a70:	4b37      	ldr	r3, [pc, #220]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a36      	ldr	r2, [pc, #216]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a7c:	f7fb fcf6 	bl	800146c <HAL_GetTick>
 8005a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a84:	f7fb fcf2 	bl	800146c <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1dc      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x3d8>
 8005aa2:	e018      	b.n	8005ad6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aa4:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005aaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005aae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ab0:	f7fb fcdc 	bl	800146c <HAL_GetTick>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ab8:	f7fb fcd8 	bl	800146c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e1c2      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005aca:	4b21      	ldr	r3, [pc, #132]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f0      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8086 	beq.w	8005bf0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <HAL_RCC_OscConfig+0x4a8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <HAL_RCC_OscConfig+0x4a8>)
 8005aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005af0:	f7fb fcbc 	bl	800146c <HAL_GetTick>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fb fcb8 	bl	800146c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	; 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e1a2      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <HAL_RCC_OscConfig+0x4a8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d106      	bne.n	8005b2c <HAL_RCC_OscConfig+0x480>
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	4a0b      	ldr	r2, [pc, #44]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2a:	e032      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e6>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d111      	bne.n	8005b58 <HAL_RCC_OscConfig+0x4ac>
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b38:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b3a:	f023 0301 	bic.w	r3, r3, #1
 8005b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b40:	4b03      	ldr	r3, [pc, #12]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b44:	4a02      	ldr	r2, [pc, #8]	; (8005b50 <HAL_RCC_OscConfig+0x4a4>)
 8005b46:	f023 0304 	bic.w	r3, r3, #4
 8005b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b4c:	e021      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e6>
 8005b4e:	bf00      	nop
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	2b05      	cmp	r3, #5
 8005b5e:	d10c      	bne.n	8005b7a <HAL_RCC_OscConfig+0x4ce>
 8005b60:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	4a82      	ldr	r2, [pc, #520]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b66:	f043 0304 	orr.w	r3, r3, #4
 8005b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6c:	4b80      	ldr	r3, [pc, #512]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	4a7f      	ldr	r2, [pc, #508]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b72:	f043 0301 	orr.w	r3, r3, #1
 8005b76:	6713      	str	r3, [r2, #112]	; 0x70
 8005b78:	e00b      	b.n	8005b92 <HAL_RCC_OscConfig+0x4e6>
 8005b7a:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	4a7c      	ldr	r2, [pc, #496]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	6713      	str	r3, [r2, #112]	; 0x70
 8005b86:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	4a79      	ldr	r2, [pc, #484]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d015      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9a:	f7fb fc67 	bl	800146c <HAL_GetTick>
 8005b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba0:	e00a      	b.n	8005bb8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fb fc63 	bl	800146c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e14b      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bb8:	4b6d      	ldr	r3, [pc, #436]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d0ee      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x4f6>
 8005bc4:	e014      	b.n	8005bf0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bc6:	f7fb fc51 	bl	800146c <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bce:	f7fb fc4d 	bl	800146c <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e135      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005be4:	4b62      	ldr	r3, [pc, #392]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1ee      	bne.n	8005bce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 812a 	beq.w	8005e4e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005bfa:	4b5d      	ldr	r3, [pc, #372]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c02:	2b18      	cmp	r3, #24
 8005c04:	f000 80ba 	beq.w	8005d7c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	f040 8095 	bne.w	8005d3c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a56      	ldr	r2, [pc, #344]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fb fc25 	bl	800146c <HAL_GetTick>
 8005c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c26:	f7fb fc21 	bl	800146c <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e10b      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c38:	4b4d      	ldr	r3, [pc, #308]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1f0      	bne.n	8005c26 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c44:	4b4a      	ldr	r3, [pc, #296]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c48:	4b4a      	ldr	r3, [pc, #296]	; (8005d74 <HAL_RCC_OscConfig+0x6c8>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c54:	0112      	lsls	r2, r2, #4
 8005c56:	430a      	orrs	r2, r1
 8005c58:	4945      	ldr	r1, [pc, #276]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	628b      	str	r3, [r1, #40]	; 0x28
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	025b      	lsls	r3, r3, #9
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	041b      	lsls	r3, r3, #16
 8005c7c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	3b01      	subs	r3, #1
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c8e:	4938      	ldr	r1, [pc, #224]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c90:	4313      	orrs	r3, r2
 8005c92:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c94:	4b36      	ldr	r3, [pc, #216]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	4a35      	ldr	r2, [pc, #212]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ca0:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca4:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <HAL_RCC_OscConfig+0x6cc>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cac:	00d2      	lsls	r2, r2, #3
 8005cae:	4930      	ldr	r1, [pc, #192]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cb4:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	f023 020c 	bic.w	r2, r3, #12
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	492b      	ldr	r1, [pc, #172]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005cc6:	4b2a      	ldr	r3, [pc, #168]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cca:	f023 0202 	bic.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	4927      	ldr	r1, [pc, #156]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cd8:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	4a24      	ldr	r2, [pc, #144]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ce4:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	4a21      	ldr	r2, [pc, #132]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cf0:	4b1f      	ldr	r3, [pc, #124]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005cfc:	4b1c      	ldr	r3, [pc, #112]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d08:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a18      	ldr	r2, [pc, #96]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d14:	f7fb fbaa 	bl	800146c <HAL_GetTick>
 8005d18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fb fba6 	bl	800146c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e090      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x670>
 8005d3a:	e088      	b.n	8005e4e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3c:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fb fb90 	bl	800146c <HAL_GetTick>
 8005d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d50:	f7fb fb8c 	bl	800146c <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e076      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d62:	4b03      	ldr	r3, [pc, #12]	; (8005d70 <HAL_RCC_OscConfig+0x6c4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1f0      	bne.n	8005d50 <HAL_RCC_OscConfig+0x6a4>
 8005d6e:	e06e      	b.n	8005e4e <HAL_RCC_OscConfig+0x7a2>
 8005d70:	58024400 	.word	0x58024400
 8005d74:	fffffc0c 	.word	0xfffffc0c
 8005d78:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d7c:	4b36      	ldr	r3, [pc, #216]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d82:	4b35      	ldr	r3, [pc, #212]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d031      	beq.n	8005df4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f003 0203 	and.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d12a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	091b      	lsrs	r3, r3, #4
 8005da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d122      	bne.n	8005df4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d11a      	bne.n	8005df4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	0a5b      	lsrs	r3, r3, #9
 8005dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d111      	bne.n	8005df4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	0c1b      	lsrs	r3, r3, #16
 8005dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d108      	bne.n	8005df4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	0e1b      	lsrs	r3, r3, #24
 8005de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e02b      	b.n	8005e50 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005df8:	4b17      	ldr	r3, [pc, #92]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dfc:	08db      	lsrs	r3, r3, #3
 8005dfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d01f      	beq.n	8005e4e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005e0e:	4b12      	ldr	r3, [pc, #72]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a11      	ldr	r2, [pc, #68]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e1a:	f7fb fb27 	bl	800146c <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005e20:	bf00      	nop
 8005e22:	f7fb fb23 	bl	800146c <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d0f9      	beq.n	8005e22 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e2e:	4b0a      	ldr	r3, [pc, #40]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e32:	4b0a      	ldr	r3, [pc, #40]	; (8005e5c <HAL_RCC_OscConfig+0x7b0>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e3a:	00d2      	lsls	r2, r2, #3
 8005e3c:	4906      	ldr	r1, [pc, #24]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	4a04      	ldr	r2, [pc, #16]	; (8005e58 <HAL_RCC_OscConfig+0x7ac>)
 8005e48:	f043 0301 	orr.w	r3, r3, #1
 8005e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3730      	adds	r7, #48	; 0x30
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	58024400 	.word	0x58024400
 8005e5c:	ffff0007 	.word	0xffff0007

08005e60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e19c      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e74:	4b8a      	ldr	r3, [pc, #552]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d910      	bls.n	8005ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e82:	4b87      	ldr	r3, [pc, #540]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f023 020f 	bic.w	r2, r3, #15
 8005e8a:	4985      	ldr	r1, [pc, #532]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b83      	ldr	r3, [pc, #524]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e184      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d010      	beq.n	8005ed2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	4b7b      	ldr	r3, [pc, #492]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d908      	bls.n	8005ed2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ec0:	4b78      	ldr	r3, [pc, #480]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	4975      	ldr	r1, [pc, #468]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d010      	beq.n	8005f00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	4b70      	ldr	r3, [pc, #448]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d908      	bls.n	8005f00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eee:	4b6d      	ldr	r3, [pc, #436]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	496a      	ldr	r1, [pc, #424]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0310 	and.w	r3, r3, #16
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d010      	beq.n	8005f2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699a      	ldr	r2, [r3, #24]
 8005f10:	4b64      	ldr	r3, [pc, #400]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d908      	bls.n	8005f2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f1c:	4b61      	ldr	r3, [pc, #388]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	495e      	ldr	r1, [pc, #376]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d010      	beq.n	8005f5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	4b59      	ldr	r3, [pc, #356]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d908      	bls.n	8005f5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f4a:	4b56      	ldr	r3, [pc, #344]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	4953      	ldr	r1, [pc, #332]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d010      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b4d      	ldr	r3, [pc, #308]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d908      	bls.n	8005f8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f78:	4b4a      	ldr	r3, [pc, #296]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f023 020f 	bic.w	r2, r3, #15
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4947      	ldr	r1, [pc, #284]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d055      	beq.n	8006042 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f96:	4b43      	ldr	r3, [pc, #268]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4940      	ldr	r1, [pc, #256]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fb0:	4b3c      	ldr	r3, [pc, #240]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d121      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0f6      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d107      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005fc8:	4b36      	ldr	r3, [pc, #216]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d115      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e0ea      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005fe0:	4b30      	ldr	r3, [pc, #192]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0de      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e0d6      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f023 0207 	bic.w	r2, r3, #7
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4925      	ldr	r1, [pc, #148]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 800600e:	4313      	orrs	r3, r2
 8006010:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006012:	f7fb fa2b 	bl	800146c <HAL_GetTick>
 8006016:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006018:	e00a      	b.n	8006030 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800601a:	f7fb fa27 	bl	800146c <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f241 3288 	movw	r2, #5000	; 0x1388
 8006028:	4293      	cmp	r3, r2
 800602a:	d901      	bls.n	8006030 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e0be      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006030:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	429a      	cmp	r2, r3
 8006040:	d1eb      	bne.n	800601a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d010      	beq.n	8006070 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	429a      	cmp	r2, r3
 800605c:	d208      	bcs.n	8006070 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800605e:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f023 020f 	bic.w	r2, r3, #15
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	490e      	ldr	r1, [pc, #56]	; (80060a4 <HAL_RCC_ClockConfig+0x244>)
 800606c:	4313      	orrs	r3, r2
 800606e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d214      	bcs.n	80060a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b08      	ldr	r3, [pc, #32]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f023 020f 	bic.w	r2, r3, #15
 8006086:	4906      	ldr	r1, [pc, #24]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	4313      	orrs	r3, r2
 800608c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608e:	4b04      	ldr	r3, [pc, #16]	; (80060a0 <HAL_RCC_ClockConfig+0x240>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	683a      	ldr	r2, [r7, #0]
 8006098:	429a      	cmp	r2, r3
 800609a:	d005      	beq.n	80060a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e086      	b.n	80061ae <HAL_RCC_ClockConfig+0x34e>
 80060a0:	52002000 	.word	0x52002000
 80060a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d010      	beq.n	80060d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	4b3f      	ldr	r3, [pc, #252]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d208      	bcs.n	80060d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80060c4:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	4939      	ldr	r1, [pc, #228]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d010      	beq.n	8006104 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695a      	ldr	r2, [r3, #20]
 80060e6:	4b34      	ldr	r3, [pc, #208]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d208      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060f2:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	492e      	ldr	r1, [pc, #184]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006100:	4313      	orrs	r3, r2
 8006102:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b00      	cmp	r3, #0
 800610e:	d010      	beq.n	8006132 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	4b28      	ldr	r3, [pc, #160]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800611c:	429a      	cmp	r2, r3
 800611e:	d208      	bcs.n	8006132 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006120:	4b25      	ldr	r3, [pc, #148]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006122:	69db      	ldr	r3, [r3, #28]
 8006124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	4922      	ldr	r1, [pc, #136]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 800612e:	4313      	orrs	r3, r2
 8006130:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d010      	beq.n	8006160 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	69da      	ldr	r2, [r3, #28]
 8006142:	4b1d      	ldr	r3, [pc, #116]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800614a:	429a      	cmp	r2, r3
 800614c:	d208      	bcs.n	8006160 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800614e:	4b1a      	ldr	r3, [pc, #104]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	69db      	ldr	r3, [r3, #28]
 800615a:	4917      	ldr	r1, [pc, #92]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 800615c:	4313      	orrs	r3, r2
 800615e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006160:	f000 f834 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 8006164:	4602      	mov	r2, r0
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	f003 030f 	and.w	r3, r3, #15
 8006170:	4912      	ldr	r1, [pc, #72]	; (80061bc <HAL_RCC_ClockConfig+0x35c>)
 8006172:	5ccb      	ldrb	r3, [r1, r3]
 8006174:	f003 031f 	and.w	r3, r3, #31
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
 800617c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800617e:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <HAL_RCC_ClockConfig+0x358>)
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f003 030f 	and.w	r3, r3, #15
 8006186:	4a0d      	ldr	r2, [pc, #52]	; (80061bc <HAL_RCC_ClockConfig+0x35c>)
 8006188:	5cd3      	ldrb	r3, [r2, r3]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <HAL_RCC_ClockConfig+0x360>)
 8006196:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006198:	4a0a      	ldr	r2, [pc, #40]	; (80061c4 <HAL_RCC_ClockConfig+0x364>)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <HAL_RCC_ClockConfig+0x368>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fa fd92 	bl	8000ccc <HAL_InitTick>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	58024400 	.word	0x58024400
 80061bc:	08024540 	.word	0x08024540
 80061c0:	24000004 	.word	0x24000004
 80061c4:	24000000 	.word	0x24000000
 80061c8:	24000008 	.word	0x24000008

080061cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061d2:	4bb3      	ldr	r3, [pc, #716]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061da:	2b18      	cmp	r3, #24
 80061dc:	f200 8155 	bhi.w	800648a <HAL_RCC_GetSysClockFreq+0x2be>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800624d 	.word	0x0800624d
 80061ec:	0800648b 	.word	0x0800648b
 80061f0:	0800648b 	.word	0x0800648b
 80061f4:	0800648b 	.word	0x0800648b
 80061f8:	0800648b 	.word	0x0800648b
 80061fc:	0800648b 	.word	0x0800648b
 8006200:	0800648b 	.word	0x0800648b
 8006204:	0800648b 	.word	0x0800648b
 8006208:	08006273 	.word	0x08006273
 800620c:	0800648b 	.word	0x0800648b
 8006210:	0800648b 	.word	0x0800648b
 8006214:	0800648b 	.word	0x0800648b
 8006218:	0800648b 	.word	0x0800648b
 800621c:	0800648b 	.word	0x0800648b
 8006220:	0800648b 	.word	0x0800648b
 8006224:	0800648b 	.word	0x0800648b
 8006228:	08006279 	.word	0x08006279
 800622c:	0800648b 	.word	0x0800648b
 8006230:	0800648b 	.word	0x0800648b
 8006234:	0800648b 	.word	0x0800648b
 8006238:	0800648b 	.word	0x0800648b
 800623c:	0800648b 	.word	0x0800648b
 8006240:	0800648b 	.word	0x0800648b
 8006244:	0800648b 	.word	0x0800648b
 8006248:	0800627f 	.word	0x0800627f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800624c:	4b94      	ldr	r3, [pc, #592]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006258:	4b91      	ldr	r3, [pc, #580]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	4a90      	ldr	r2, [pc, #576]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800626a:	e111      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800626c:	4b8d      	ldr	r3, [pc, #564]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800626e:	61bb      	str	r3, [r7, #24]
      break;
 8006270:	e10e      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006272:	4b8d      	ldr	r3, [pc, #564]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006274:	61bb      	str	r3, [r7, #24]
      break;
 8006276:	e10b      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006278:	4b8c      	ldr	r3, [pc, #560]	; (80064ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800627a:	61bb      	str	r3, [r7, #24]
      break;
 800627c:	e108      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800627e:	4b88      	ldr	r3, [pc, #544]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006288:	4b85      	ldr	r3, [pc, #532]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628c:	091b      	lsrs	r3, r3, #4
 800628e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006292:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006294:	4b82      	ldr	r3, [pc, #520]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800629e:	4b80      	ldr	r3, [pc, #512]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	fb02 f303 	mul.w	r3, r2, r3
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80e1 	beq.w	8006484 <HAL_RCC_GetSysClockFreq+0x2b8>
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	f000 8083 	beq.w	80063d0 <HAL_RCC_GetSysClockFreq+0x204>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	f200 80a1 	bhi.w	8006414 <HAL_RCC_GetSysClockFreq+0x248>
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_RCC_GetSysClockFreq+0x114>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d056      	beq.n	800638c <HAL_RCC_GetSysClockFreq+0x1c0>
 80062de:	e099      	b.n	8006414 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062e0:	4b6f      	ldr	r3, [pc, #444]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d02d      	beq.n	8006348 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ec:	4b6c      	ldr	r3, [pc, #432]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	08db      	lsrs	r3, r3, #3
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	4a6b      	ldr	r2, [pc, #428]	; (80064a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062f8:	fa22 f303 	lsr.w	r3, r2, r3
 80062fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006316:	4b62      	ldr	r3, [pc, #392]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	ed97 6a02 	vldr	s12, [r7, #8]
 800632a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800632e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800633a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006342:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006346:	e087      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eddf 6a58 	vldr	s13, [pc, #352]	; 80064b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635a:	4b51      	ldr	r3, [pc, #324]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636a:	ed97 6a02 	vldr	s12, [r7, #8]
 800636e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800638a:	e065      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006396:	eddf 6a48 	vldr	s13, [pc, #288]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800639a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639e:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80063b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063ce:	e043      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80064bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80063de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063e2:	4b2f      	ldr	r3, [pc, #188]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ea:	ee07 3a90 	vmov	s15, r3
 80063ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800640a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006412:	e021      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80064b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006426:	4b1e      	ldr	r3, [pc, #120]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006436:	ed97 6a02 	vldr	s12, [r7, #8]
 800643a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80064b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800643e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800644a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800644e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006456:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006458:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645c:	0a5b      	lsrs	r3, r3, #9
 800645e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006462:	3301      	adds	r3, #1
 8006464:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	ee07 3a90 	vmov	s15, r3
 800646c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006470:	edd7 6a07 	vldr	s13, [r7, #28]
 8006474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800647c:	ee17 3a90 	vmov	r3, s15
 8006480:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006482:	e005      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
      break;
 8006488:	e002      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800648c:	61bb      	str	r3, [r7, #24]
      break;
 800648e:	bf00      	nop
  }

  return sysclockfreq;
 8006490:	69bb      	ldr	r3, [r7, #24]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3724      	adds	r7, #36	; 0x24
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	58024400 	.word	0x58024400
 80064a4:	03d09000 	.word	0x03d09000
 80064a8:	003d0900 	.word	0x003d0900
 80064ac:	017d7840 	.word	0x017d7840
 80064b0:	46000000 	.word	0x46000000
 80064b4:	4c742400 	.word	0x4c742400
 80064b8:	4a742400 	.word	0x4a742400
 80064bc:	4bbebc20 	.word	0x4bbebc20

080064c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80064c6:	f7ff fe81 	bl	80061cc <HAL_RCC_GetSysClockFreq>
 80064ca:	4602      	mov	r2, r0
 80064cc:	4b10      	ldr	r3, [pc, #64]	; (8006510 <HAL_RCC_GetHCLKFreq+0x50>)
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	0a1b      	lsrs	r3, r3, #8
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	490f      	ldr	r1, [pc, #60]	; (8006514 <HAL_RCC_GetHCLKFreq+0x54>)
 80064d8:	5ccb      	ldrb	r3, [r1, r3]
 80064da:	f003 031f 	and.w	r3, r3, #31
 80064de:	fa22 f303 	lsr.w	r3, r2, r3
 80064e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <HAL_RCC_GetHCLKFreq+0x50>)
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f003 030f 	and.w	r3, r3, #15
 80064ec:	4a09      	ldr	r2, [pc, #36]	; (8006514 <HAL_RCC_GetHCLKFreq+0x54>)
 80064ee:	5cd3      	ldrb	r3, [r2, r3]
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	fa22 f303 	lsr.w	r3, r2, r3
 80064fa:	4a07      	ldr	r2, [pc, #28]	; (8006518 <HAL_RCC_GetHCLKFreq+0x58>)
 80064fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064fe:	4a07      	ldr	r2, [pc, #28]	; (800651c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <HAL_RCC_GetHCLKFreq+0x58>)
 8006506:	681b      	ldr	r3, [r3, #0]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	58024400 	.word	0x58024400
 8006514:	08024540 	.word	0x08024540
 8006518:	24000004 	.word	0x24000004
 800651c:	24000000 	.word	0x24000000

08006520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006524:	f7ff ffcc 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 8006528:	4602      	mov	r2, r0
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	091b      	lsrs	r3, r3, #4
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	4904      	ldr	r1, [pc, #16]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006536:	5ccb      	ldrb	r3, [r1, r3]
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006540:	4618      	mov	r0, r3
 8006542:	bd80      	pop	{r7, pc}
 8006544:	58024400 	.word	0x58024400
 8006548:	08024540 	.word	0x08024540

0800654c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	223f      	movs	r2, #63	; 0x3f
 800655a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800655c:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	f003 0207 	and.w	r2, r3, #7
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006568:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800658c:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 800658e:	69db      	ldr	r3, [r3, #28]
 8006590:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006598:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80065a4:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_RCC_GetClockConfig+0x7c>)
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_RCC_GetClockConfig+0x80>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	601a      	str	r2, [r3, #0]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	58024400 	.word	0x58024400
 80065cc:	52002000 	.word	0x52002000

080065d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065d4:	b0c6      	sub	sp, #280	; 0x118
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80065f4:	2500      	movs	r5, #0
 80065f6:	ea54 0305 	orrs.w	r3, r4, r5
 80065fa:	d049      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80065fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006602:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006606:	d02f      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800660c:	d828      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800660e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006612:	d01a      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006618:	d822      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800661e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006622:	d007      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006624:	e01c      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006626:	4bab      	ldr	r3, [pc, #684]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	4aaa      	ldr	r2, [pc, #680]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800662c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006630:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006632:	e01a      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006638:	3308      	adds	r3, #8
 800663a:	2102      	movs	r1, #2
 800663c:	4618      	mov	r0, r3
 800663e:	f002 fa49 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006642:	4603      	mov	r3, r0
 8006644:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006648:	e00f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664e:	3328      	adds	r3, #40	; 0x28
 8006650:	2102      	movs	r1, #2
 8006652:	4618      	mov	r0, r3
 8006654:	f002 faf0 	bl	8008c38 <RCCEx_PLL3_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800665e:	e004      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006672:	4b98      	ldr	r3, [pc, #608]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006680:	4a94      	ldr	r2, [pc, #592]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006682:	430b      	orrs	r3, r1
 8006684:	6513      	str	r3, [r2, #80]	; 0x50
 8006686:	e003      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800668c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800669c:	f04f 0900 	mov.w	r9, #0
 80066a0:	ea58 0309 	orrs.w	r3, r8, r9
 80066a4:	d047      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d82a      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066cd 	.word	0x080066cd
 80066bc:	080066db 	.word	0x080066db
 80066c0:	080066f1 	.word	0x080066f1
 80066c4:	0800670f 	.word	0x0800670f
 80066c8:	0800670f 	.word	0x0800670f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066cc:	4b81      	ldr	r3, [pc, #516]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	4a80      	ldr	r2, [pc, #512]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066d8:	e01a      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066de:	3308      	adds	r3, #8
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f002 f9f6 	bl	8008ad4 <RCCEx_PLL2_Config>
 80066e8:	4603      	mov	r3, r0
 80066ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ee:	e00f      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	3328      	adds	r3, #40	; 0x28
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f002 fa9d 	bl	8008c38 <RCCEx_PLL3_Config>
 80066fe:	4603      	mov	r3, r0
 8006700:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006704:	e004      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800670e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006710:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006718:	4b6e      	ldr	r3, [pc, #440]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	f023 0107 	bic.w	r1, r3, #7
 8006720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006726:	4a6b      	ldr	r2, [pc, #428]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6513      	str	r3, [r2, #80]	; 0x50
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006732:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006742:	f04f 0b00 	mov.w	fp, #0
 8006746:	ea5a 030b 	orrs.w	r3, sl, fp
 800674a:	d05b      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006754:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006758:	d03b      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800675a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800675e:	d834      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006764:	d037      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800676a:	d82e      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800676c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006770:	d033      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006772:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006776:	d828      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677c:	d01a      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800677e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006782:	d822      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8006788:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800678c:	d007      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800678e:	e01c      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006790:	4b50      	ldr	r3, [pc, #320]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	4a4f      	ldr	r2, [pc, #316]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800679c:	e01e      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800679e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a2:	3308      	adds	r3, #8
 80067a4:	2100      	movs	r1, #0
 80067a6:	4618      	mov	r0, r3
 80067a8:	f002 f994 	bl	8008ad4 <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067b2:	e013      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067b8:	3328      	adds	r3, #40	; 0x28
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f002 fa3b 	bl	8008c38 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067c8:	e008      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80067da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10b      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067e4:	4b3b      	ldr	r3, [pc, #236]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80067ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067f4:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067f6:	430b      	orrs	r3, r1
 80067f8:	6593      	str	r3, [r2, #88]	; 0x58
 80067fa:	e003      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006814:	2300      	movs	r3, #0
 8006816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800681a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800681e:	460b      	mov	r3, r1
 8006820:	4313      	orrs	r3, r2
 8006822:	d05d      	beq.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800682c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006830:	d03b      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006832:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006836:	d834      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800683c:	d037      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800683e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006842:	d82e      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006844:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006848:	d033      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800684a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800684e:	d828      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006850:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006854:	d01a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800685a:	d822      	bhi.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d003      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006864:	d007      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006866:	e01c      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006868:	4b1a      	ldr	r3, [pc, #104]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800686a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800686e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006874:	e01e      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687a:	3308      	adds	r3, #8
 800687c:	2100      	movs	r1, #0
 800687e:	4618      	mov	r0, r3
 8006880:	f002 f928 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800688a:	e013      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006890:	3328      	adds	r3, #40	; 0x28
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f002 f9cf 	bl	8008c38 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80068a0:	e008      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80068b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10d      	bne.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068bc:	4b05      	ldr	r3, [pc, #20]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80068cc:	4a01      	ldr	r2, [pc, #4]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	6593      	str	r3, [r2, #88]	; 0x58
 80068d2:	e005      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80068d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d03a      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006906:	2b30      	cmp	r3, #48	; 0x30
 8006908:	d01f      	beq.n	800694a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800690a:	2b30      	cmp	r3, #48	; 0x30
 800690c:	d819      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800690e:	2b20      	cmp	r3, #32
 8006910:	d00c      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006912:	2b20      	cmp	r3, #32
 8006914:	d815      	bhi.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d019      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800691a:	2b10      	cmp	r3, #16
 800691c:	d111      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691e:	4baa      	ldr	r3, [pc, #680]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006922:	4aa9      	ldr	r2, [pc, #676]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800692a:	e011      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800692c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006930:	3308      	adds	r3, #8
 8006932:	2102      	movs	r1, #2
 8006934:	4618      	mov	r0, r3
 8006936:	f002 f8cd 	bl	8008ad4 <RCCEx_PLL2_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006940:	e006      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006948:	e002      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800694a:	bf00      	nop
 800694c:	e000      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800694e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006950:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006958:	4b9b      	ldr	r3, [pc, #620]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800695a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006966:	4a98      	ldr	r2, [pc, #608]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006968:	430b      	orrs	r3, r1
 800696a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800696c:	e003      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006972:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006982:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006986:	2300      	movs	r3, #0
 8006988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800698c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006990:	460b      	mov	r3, r1
 8006992:	4313      	orrs	r3, r2
 8006994:	d051      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a0:	d035      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80069a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069a6:	d82e      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	d031      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80069ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b2:	d828      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b8:	d01a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80069ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069be:	d822      	bhi.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80069c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c8:	d007      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80069ca:	e01c      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069cc:	4b7e      	ldr	r3, [pc, #504]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	4a7d      	ldr	r2, [pc, #500]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80069d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069d8:	e01c      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069de:	3308      	adds	r3, #8
 80069e0:	2100      	movs	r1, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	f002 f876 	bl	8008ad4 <RCCEx_PLL2_Config>
 80069e8:	4603      	mov	r3, r0
 80069ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069ee:	e011      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069f4:	3328      	adds	r3, #40	; 0x28
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f91d 	bl	8008c38 <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006a04:	e006      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a0c:	e002      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006a0e:	bf00      	nop
 8006a10:	e000      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a1c:	4b6a      	ldr	r3, [pc, #424]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a20:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	4a67      	ldr	r2, [pc, #412]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6513      	str	r3, [r2, #80]	; 0x50
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006a46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4313      	orrs	r3, r2
 8006a58:	d053      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a64:	d033      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006a66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a6a:	d82c      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a70:	d02f      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a76:	d826      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a7c:	d02b      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a82:	d820      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a88:	d012      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006a8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a8e:	d81a      	bhi.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d022      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a98:	d115      	bne.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f002 f816 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006aae:	e015      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab4:	3328      	adds	r3, #40	; 0x28
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f002 f8bd 	bl	8008c38 <RCCEx_PLL3_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e00a      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006adc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ae4:	4b38      	ldr	r3, [pc, #224]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af2:	4a35      	ldr	r2, [pc, #212]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006af4:	430b      	orrs	r3, r1
 8006af6:	6513      	str	r3, [r2, #80]	; 0x50
 8006af8:	e003      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006afe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b12:	2300      	movs	r3, #0
 8006b14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006b18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d058      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b2e:	d033      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b34:	d82c      	bhi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3a:	d02f      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b40:	d826      	bhi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b46:	d02b      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b4c:	d820      	bhi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b52:	d012      	beq.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006b54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b58:	d81a      	bhi.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d022      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b62:	d115      	bne.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b68:	3308      	adds	r3, #8
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f001 ffb1 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006b72:	4603      	mov	r3, r0
 8006b74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b78:	e015      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b7e:	3328      	adds	r3, #40	; 0x28
 8006b80:	2101      	movs	r1, #1
 8006b82:	4618      	mov	r0, r3
 8006b84:	f002 f858 	bl	8008c38 <RCCEx_PLL3_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b8e:	e00a      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b96:	e006      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b98:	bf00      	nop
 8006b9a:	e004      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006b9c:	bf00      	nop
 8006b9e:	e002      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ba0:	bf00      	nop
 8006ba2:	e000      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10e      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bbe:	4a02      	ldr	r2, [pc, #8]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8006bc4:	e006      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006bc6:	bf00      	nop
 8006bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bdc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006be4:	2300      	movs	r3, #0
 8006be6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	d037      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bfe:	d00e      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d816      	bhi.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d018      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c0e:	d111      	bne.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c10:	4bc4      	ldr	r3, [pc, #784]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	4ac3      	ldr	r2, [pc, #780]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c1c:	e00f      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c22:	3308      	adds	r3, #8
 8006c24:	2101      	movs	r1, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f001 ff54 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c32:	e004      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c3a:	e000      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c46:	4bb7      	ldr	r3, [pc, #732]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c54:	4ab3      	ldr	r2, [pc, #716]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6513      	str	r3, [r2, #80]	; 0x50
 8006c5a:	e003      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c74:	2300      	movs	r3, #0
 8006c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4313      	orrs	r3, r2
 8006c82:	d039      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d81c      	bhi.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006c8e:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006ca5 	.word	0x08006ca5
 8006c9c:	08006cb3 	.word	0x08006cb3
 8006ca0:	08006cd1 	.word	0x08006cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca4:	4b9f      	ldr	r3, [pc, #636]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4a9e      	ldr	r2, [pc, #632]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	2102      	movs	r1, #2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 ff0a 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cc6:	e004      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006cce:	e000      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cda:	4b92      	ldr	r3, [pc, #584]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	f023 0103 	bic.w	r1, r3, #3
 8006ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	4a8e      	ldr	r2, [pc, #568]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cea:	430b      	orrs	r3, r1
 8006cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cee:	e003      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d12:	460b      	mov	r3, r1
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f000 8099 	beq.w	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1a:	4b83      	ldr	r3, [pc, #524]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a82      	ldr	r2, [pc, #520]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d26:	f7fa fba1 	bl	800146c <HAL_GetTick>
 8006d2a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d2e:	e00b      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d30:	f7fa fb9c 	bl	800146c <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b64      	cmp	r3, #100	; 0x64
 8006d3e:	d903      	bls.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d46:	e005      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d48:	4b77      	ldr	r3, [pc, #476]	; (8006f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0ed      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006d54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d173      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d5c:	4b71      	ldr	r3, [pc, #452]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d68:	4053      	eors	r3, r2
 8006d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d015      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d72:	4b6c      	ldr	r3, [pc, #432]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d7e:	4b69      	ldr	r3, [pc, #420]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	4a68      	ldr	r2, [pc, #416]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d8a:	4b66      	ldr	r3, [pc, #408]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8e:	4a65      	ldr	r2, [pc, #404]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d96:	4a63      	ldr	r2, [pc, #396]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006daa:	d118      	bne.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fa fb5e 	bl	800146c <HAL_GetTick>
 8006db0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006db4:	e00d      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fa fb59 	bl	800146c <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d903      	bls.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006dd0:	e005      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dd2:	4b54      	ldr	r3, [pc, #336]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd6:	f003 0302 	and.w	r3, r3, #2
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0eb      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006dde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d129      	bne.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df6:	d10e      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006df8:	4b4a      	ldr	r3, [pc, #296]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e08:	091a      	lsrs	r2, r3, #4
 8006e0a:	4b48      	ldr	r3, [pc, #288]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	4a45      	ldr	r2, [pc, #276]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e10:	430b      	orrs	r3, r1
 8006e12:	6113      	str	r3, [r2, #16]
 8006e14:	e005      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006e16:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	4a42      	ldr	r2, [pc, #264]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e20:	6113      	str	r3, [r2, #16]
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e32:	4a3c      	ldr	r2, [pc, #240]	; (8006f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e34:	430b      	orrs	r3, r1
 8006e36:	6713      	str	r3, [r2, #112]	; 0x70
 8006e38:	e008      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006e42:	e003      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006e48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f002 0301 	and.w	r3, r2, #1
 8006e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006e66:	460b      	mov	r3, r1
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f000 808f 	beq.w	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e74:	2b28      	cmp	r3, #40	; 0x28
 8006e76:	d871      	bhi.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006f65 	.word	0x08006f65
 8006e84:	08006f5d 	.word	0x08006f5d
 8006e88:	08006f5d 	.word	0x08006f5d
 8006e8c:	08006f5d 	.word	0x08006f5d
 8006e90:	08006f5d 	.word	0x08006f5d
 8006e94:	08006f5d 	.word	0x08006f5d
 8006e98:	08006f5d 	.word	0x08006f5d
 8006e9c:	08006f5d 	.word	0x08006f5d
 8006ea0:	08006f31 	.word	0x08006f31
 8006ea4:	08006f5d 	.word	0x08006f5d
 8006ea8:	08006f5d 	.word	0x08006f5d
 8006eac:	08006f5d 	.word	0x08006f5d
 8006eb0:	08006f5d 	.word	0x08006f5d
 8006eb4:	08006f5d 	.word	0x08006f5d
 8006eb8:	08006f5d 	.word	0x08006f5d
 8006ebc:	08006f5d 	.word	0x08006f5d
 8006ec0:	08006f47 	.word	0x08006f47
 8006ec4:	08006f5d 	.word	0x08006f5d
 8006ec8:	08006f5d 	.word	0x08006f5d
 8006ecc:	08006f5d 	.word	0x08006f5d
 8006ed0:	08006f5d 	.word	0x08006f5d
 8006ed4:	08006f5d 	.word	0x08006f5d
 8006ed8:	08006f5d 	.word	0x08006f5d
 8006edc:	08006f5d 	.word	0x08006f5d
 8006ee0:	08006f65 	.word	0x08006f65
 8006ee4:	08006f5d 	.word	0x08006f5d
 8006ee8:	08006f5d 	.word	0x08006f5d
 8006eec:	08006f5d 	.word	0x08006f5d
 8006ef0:	08006f5d 	.word	0x08006f5d
 8006ef4:	08006f5d 	.word	0x08006f5d
 8006ef8:	08006f5d 	.word	0x08006f5d
 8006efc:	08006f5d 	.word	0x08006f5d
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f5d 	.word	0x08006f5d
 8006f0c:	08006f5d 	.word	0x08006f5d
 8006f10:	08006f5d 	.word	0x08006f5d
 8006f14:	08006f5d 	.word	0x08006f5d
 8006f18:	08006f5d 	.word	0x08006f5d
 8006f1c:	08006f5d 	.word	0x08006f5d
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	58024400 	.word	0x58024400
 8006f28:	58024800 	.word	0x58024800
 8006f2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f34:	3308      	adds	r3, #8
 8006f36:	2101      	movs	r1, #1
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f001 fdcb 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f44:	e00f      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f4a:	3328      	adds	r3, #40	; 0x28
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f001 fe72 	bl	8008c38 <RCCEx_PLL3_Config>
 8006f54:	4603      	mov	r3, r0
 8006f56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f5a:	e004      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10a      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f6e:	4bbf      	ldr	r3, [pc, #764]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7c:	4abb      	ldr	r2, [pc, #748]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f7e:	430b      	orrs	r3, r1
 8006f80:	6553      	str	r3, [r2, #84]	; 0x54
 8006f82:	e003      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	f002 0302 	and.w	r3, r2, #2
 8006f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	d041      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	2b05      	cmp	r3, #5
 8006fb4:	d824      	bhi.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08007009 	.word	0x08007009
 8006fc0:	08006fd5 	.word	0x08006fd5
 8006fc4:	08006feb 	.word	0x08006feb
 8006fc8:	08007009 	.word	0x08007009
 8006fcc:	08007009 	.word	0x08007009
 8006fd0:	08007009 	.word	0x08007009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd8:	3308      	adds	r3, #8
 8006fda:	2101      	movs	r1, #1
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 fd79 	bl	8008ad4 <RCCEx_PLL2_Config>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fe8:	e00f      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fee:	3328      	adds	r3, #40	; 0x28
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 fe20 	bl	8008c38 <RCCEx_PLL3_Config>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006ffe:	e004      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007006:	e000      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007012:	4b96      	ldr	r3, [pc, #600]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007016:	f023 0107 	bic.w	r1, r3, #7
 800701a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007020:	4a92      	ldr	r2, [pc, #584]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007022:	430b      	orrs	r3, r1
 8007024:	6553      	str	r3, [r2, #84]	; 0x54
 8007026:	e003      	b.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007028:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800702c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f002 0304 	and.w	r3, r2, #4
 800703c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007040:	2300      	movs	r3, #0
 8007042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007046:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800704a:	460b      	mov	r3, r1
 800704c:	4313      	orrs	r3, r2
 800704e:	d044      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007058:	2b05      	cmp	r3, #5
 800705a:	d825      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	080070b1 	.word	0x080070b1
 8007068:	0800707d 	.word	0x0800707d
 800706c:	08007093 	.word	0x08007093
 8007070:	080070b1 	.word	0x080070b1
 8007074:	080070b1 	.word	0x080070b1
 8007078:	080070b1 	.word	0x080070b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800707c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007080:	3308      	adds	r3, #8
 8007082:	2101      	movs	r1, #1
 8007084:	4618      	mov	r0, r3
 8007086:	f001 fd25 	bl	8008ad4 <RCCEx_PLL2_Config>
 800708a:	4603      	mov	r3, r0
 800708c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007090:	e00f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	3328      	adds	r3, #40	; 0x28
 8007098:	2101      	movs	r1, #1
 800709a:	4618      	mov	r0, r3
 800709c:	f001 fdcc 	bl	8008c38 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80070a6:	e004      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80070b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070ba:	4b6c      	ldr	r3, [pc, #432]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070be:	f023 0107 	bic.w	r1, r3, #7
 80070c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ca:	4a68      	ldr	r2, [pc, #416]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6593      	str	r3, [r2, #88]	; 0x58
 80070d0:	e003      	b.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f002 0320 	and.w	r3, r2, #32
 80070e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070ea:	2300      	movs	r3, #0
 80070ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80070f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4313      	orrs	r3, r2
 80070f8:	d055      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007106:	d033      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007108:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800710c:	d82c      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d02f      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d826      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800711a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800711e:	d02b      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007120:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007124:	d820      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800712a:	d012      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800712c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007130:	d81a      	bhi.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d022      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800713a:	d115      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800713c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007140:	3308      	adds	r3, #8
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fcc5 	bl	8008ad4 <RCCEx_PLL2_Config>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007150:	e015      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	3328      	adds	r3, #40	; 0x28
 8007158:	2102      	movs	r1, #2
 800715a:	4618      	mov	r0, r3
 800715c:	f001 fd6c 	bl	8008c38 <RCCEx_PLL3_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007166:	e00a      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800716e:	e006      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800717c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800717e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007192:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007196:	4a35      	ldr	r2, [pc, #212]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007198:	430b      	orrs	r3, r1
 800719a:	6553      	str	r3, [r2, #84]	; 0x54
 800719c:	e003      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80071b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071b6:	2300      	movs	r3, #0
 80071b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80071c0:	460b      	mov	r3, r1
 80071c2:	4313      	orrs	r3, r2
 80071c4:	d058      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071d2:	d033      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80071d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071d8:	d82c      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d02f      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80071e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e4:	d826      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071ea:	d02b      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80071ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071f0:	d820      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f6:	d012      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80071f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fc:	d81a      	bhi.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d022      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007206:	d115      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800720c:	3308      	adds	r3, #8
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f001 fc5f 	bl	8008ad4 <RCCEx_PLL2_Config>
 8007216:	4603      	mov	r3, r0
 8007218:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800721c:	e015      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007222:	3328      	adds	r3, #40	; 0x28
 8007224:	2102      	movs	r1, #2
 8007226:	4618      	mov	r0, r3
 8007228:	f001 fd06 	bl	8008c38 <RCCEx_PLL3_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007232:	e00a      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800723a:	e006      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800723c:	bf00      	nop
 800723e:	e004      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007240:	bf00      	nop
 8007242:	e002      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007244:	bf00      	nop
 8007246:	e000      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10e      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007252:	4b06      	ldr	r3, [pc, #24]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007256:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007262:	4a02      	ldr	r2, [pc, #8]	; (800726c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007264:	430b      	orrs	r3, r1
 8007266:	6593      	str	r3, [r2, #88]	; 0x58
 8007268:	e006      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007280:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007288:	2300      	movs	r3, #0
 800728a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800728e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007292:	460b      	mov	r3, r1
 8007294:	4313      	orrs	r3, r2
 8007296:	d055      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800729c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072a4:	d033      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80072a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80072aa:	d82c      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b0:	d02f      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80072b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b6:	d826      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072bc:	d02b      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80072be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072c2:	d820      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072c8:	d012      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80072ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ce:	d81a      	bhi.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d022      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80072d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d8:	d115      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072de:	3308      	adds	r3, #8
 80072e0:	2100      	movs	r1, #0
 80072e2:	4618      	mov	r0, r3
 80072e4:	f001 fbf6 	bl	8008ad4 <RCCEx_PLL2_Config>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072ee:	e015      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f4:	3328      	adds	r3, #40	; 0x28
 80072f6:	2102      	movs	r1, #2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 fc9d 	bl	8008c38 <RCCEx_PLL3_Config>
 80072fe:	4603      	mov	r3, r0
 8007300:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007304:	e00a      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800730c:	e006      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800730e:	bf00      	nop
 8007310:	e004      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007312:	bf00      	nop
 8007314:	e002      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007316:	bf00      	nop
 8007318:	e000      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800731a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10b      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007324:	4ba0      	ldr	r3, [pc, #640]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800732c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007330:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007334:	4a9c      	ldr	r2, [pc, #624]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007336:	430b      	orrs	r3, r1
 8007338:	6593      	str	r3, [r2, #88]	; 0x58
 800733a:	e003      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007340:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f002 0308 	and.w	r3, r2, #8
 8007350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007354:	2300      	movs	r3, #0
 8007356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800735a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800735e:	460b      	mov	r3, r1
 8007360:	4313      	orrs	r3, r2
 8007362:	d01e      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8007364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d10c      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007376:	3328      	adds	r3, #40	; 0x28
 8007378:	2102      	movs	r1, #2
 800737a:	4618      	mov	r0, r3
 800737c:	f001 fc5c 	bl	8008c38 <RCCEx_PLL3_Config>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800738c:	4b86      	ldr	r3, [pc, #536]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800738e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007390:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800739c:	4a82      	ldr	r2, [pc, #520]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800739e:	430b      	orrs	r3, r1
 80073a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073aa:	f002 0310 	and.w	r3, r2, #16
 80073ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073b2:	2300      	movs	r3, #0
 80073b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80073bc:	460b      	mov	r3, r1
 80073be:	4313      	orrs	r3, r2
 80073c0:	d01e      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ce:	d10c      	bne.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d4:	3328      	adds	r3, #40	; 0x28
 80073d6:	2102      	movs	r1, #2
 80073d8:	4618      	mov	r0, r3
 80073da:	f001 fc2d 	bl	8008c38 <RCCEx_PLL3_Config>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073ea:	4b6f      	ldr	r3, [pc, #444]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073fa:	4a6b      	ldr	r2, [pc, #428]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073fc:	430b      	orrs	r3, r1
 80073fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800740c:	67bb      	str	r3, [r7, #120]	; 0x78
 800740e:	2300      	movs	r3, #0
 8007410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007412:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007416:	460b      	mov	r3, r1
 8007418:	4313      	orrs	r3, r2
 800741a:	d03e      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800741c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007428:	d022      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800742a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800742e:	d81b      	bhi.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007438:	d00b      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800743a:	e015      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800743c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007440:	3308      	adds	r3, #8
 8007442:	2100      	movs	r1, #0
 8007444:	4618      	mov	r0, r3
 8007446:	f001 fb45 	bl	8008ad4 <RCCEx_PLL2_Config>
 800744a:	4603      	mov	r3, r0
 800744c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007450:	e00f      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007456:	3328      	adds	r3, #40	; 0x28
 8007458:	2102      	movs	r1, #2
 800745a:	4618      	mov	r0, r3
 800745c:	f001 fbec 	bl	8008c38 <RCCEx_PLL3_Config>
 8007460:	4603      	mov	r3, r0
 8007462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007466:	e004      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800746e:	e000      	b.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8007470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007472:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10b      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800747a:	4b4b      	ldr	r3, [pc, #300]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800748a:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800748c:	430b      	orrs	r3, r1
 800748e:	6593      	str	r3, [r2, #88]	; 0x58
 8007490:	e003      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007496:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80074a6:	673b      	str	r3, [r7, #112]	; 0x70
 80074a8:	2300      	movs	r3, #0
 80074aa:	677b      	str	r3, [r7, #116]	; 0x74
 80074ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80074b0:	460b      	mov	r3, r1
 80074b2:	4313      	orrs	r3, r2
 80074b4:	d03b      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c2:	d01f      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80074c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074c8:	d818      	bhi.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80074ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ce:	d003      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80074d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d4:	d007      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80074d6:	e011      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d8:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	4a32      	ldr	r2, [pc, #200]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074e4:	e00f      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ea:	3328      	adds	r3, #40	; 0x28
 80074ec:	2101      	movs	r1, #1
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 fba2 	bl	8008c38 <RCCEx_PLL3_Config>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80074fa:	e004      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007502:	e000      	b.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800751a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751e:	4a22      	ldr	r2, [pc, #136]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007520:	430b      	orrs	r3, r1
 8007522:	6553      	str	r3, [r2, #84]	; 0x54
 8007524:	e003      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800752a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800752e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800753a:	66bb      	str	r3, [r7, #104]	; 0x68
 800753c:	2300      	movs	r3, #0
 800753e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007540:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007544:	460b      	mov	r3, r1
 8007546:	4313      	orrs	r3, r2
 8007548:	d034      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	2b00      	cmp	r3, #0
 8007552:	d003      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8007554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007558:	d007      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800755a:	e011      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007568:	e00e      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800756a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800756e:	3308      	adds	r3, #8
 8007570:	2102      	movs	r1, #2
 8007572:	4618      	mov	r0, r3
 8007574:	f001 faae 	bl	8008ad4 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800757e:	e003      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007588:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10d      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759e:	4a02      	ldr	r2, [pc, #8]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075a4:	e006      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80075a6:	bf00      	nop
 80075a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80075c0:	663b      	str	r3, [r7, #96]	; 0x60
 80075c2:	2300      	movs	r3, #0
 80075c4:	667b      	str	r3, [r7, #100]	; 0x64
 80075c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80075ca:	460b      	mov	r3, r1
 80075cc:	4313      	orrs	r3, r2
 80075ce:	d00c      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d4:	3328      	adds	r3, #40	; 0x28
 80075d6:	2102      	movs	r1, #2
 80075d8:	4618      	mov	r0, r3
 80075da:	f001 fb2d 	bl	8008c38 <RCCEx_PLL3_Config>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d002      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80075f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f8:	2300      	movs	r3, #0
 80075fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007600:	460b      	mov	r3, r1
 8007602:	4313      	orrs	r3, r2
 8007604:	d036      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800760a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007610:	d018      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007616:	d811      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800761c:	d014      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800761e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007622:	d80b      	bhi.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007624:	2b00      	cmp	r3, #0
 8007626:	d011      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800762c:	d106      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762e:	4bb7      	ldr	r3, [pc, #732]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	4ab6      	ldr	r2, [pc, #728]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800763a:	e008      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007642:	e004      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007644:	bf00      	nop
 8007646:	e002      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800764c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007652:	2b00      	cmp	r3, #0
 8007654:	d10a      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007656:	4bad      	ldr	r3, [pc, #692]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007664:	4aa9      	ldr	r2, [pc, #676]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007666:	430b      	orrs	r3, r1
 8007668:	6553      	str	r3, [r2, #84]	; 0x54
 800766a:	e003      	b.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800766c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007670:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007680:	653b      	str	r3, [r7, #80]	; 0x50
 8007682:	2300      	movs	r3, #0
 8007684:	657b      	str	r3, [r7, #84]	; 0x54
 8007686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d009      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007690:	4b9e      	ldr	r3, [pc, #632]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007694:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	4a9b      	ldr	r2, [pc, #620]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80076b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b2:	2300      	movs	r3, #0
 80076b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80076ba:	460b      	mov	r3, r1
 80076bc:	4313      	orrs	r3, r2
 80076be:	d009      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076c0:	4b92      	ldr	r3, [pc, #584]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80076c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076ce:	4a8f      	ldr	r2, [pc, #572]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076d0:	430b      	orrs	r3, r1
 80076d2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076dc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80076e0:	643b      	str	r3, [r7, #64]	; 0x40
 80076e2:	2300      	movs	r3, #0
 80076e4:	647b      	str	r3, [r7, #68]	; 0x44
 80076e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80076ea:	460b      	mov	r3, r1
 80076ec:	4313      	orrs	r3, r2
 80076ee:	d00e      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076f0:	4b86      	ldr	r3, [pc, #536]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	4a85      	ldr	r2, [pc, #532]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80076fa:	6113      	str	r3, [r2, #16]
 80076fc:	4b83      	ldr	r3, [pc, #524]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076fe:	6919      	ldr	r1, [r3, #16]
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007708:	4a80      	ldr	r2, [pc, #512]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800770a:	430b      	orrs	r3, r1
 800770c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800770e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007716:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800771a:	63bb      	str	r3, [r7, #56]	; 0x38
 800771c:	2300      	movs	r3, #0
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007720:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007724:	460b      	mov	r3, r1
 8007726:	4313      	orrs	r3, r2
 8007728:	d009      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800772a:	4b78      	ldr	r3, [pc, #480]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800772c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800772e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	4a74      	ldr	r2, [pc, #464]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800773a:	430b      	orrs	r3, r1
 800773c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800773e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800774a:	633b      	str	r3, [r7, #48]	; 0x30
 800774c:	2300      	movs	r3, #0
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
 8007750:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007754:	460b      	mov	r3, r1
 8007756:	4313      	orrs	r3, r2
 8007758:	d00a      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800775a:	4b6c      	ldr	r3, [pc, #432]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800776a:	4a68      	ldr	r2, [pc, #416]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800776c:	430b      	orrs	r3, r1
 800776e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	2100      	movs	r1, #0
 800777a:	62b9      	str	r1, [r7, #40]	; 0x28
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007782:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007786:	460b      	mov	r3, r1
 8007788:	4313      	orrs	r3, r2
 800778a:	d011      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007790:	3308      	adds	r3, #8
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f001 f99d 	bl	8008ad4 <RCCEx_PLL2_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80077a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d003      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	2100      	movs	r1, #0
 80077ba:	6239      	str	r1, [r7, #32]
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
 80077c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077c6:	460b      	mov	r3, r1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d011      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077d0:	3308      	adds	r3, #8
 80077d2:	2101      	movs	r1, #1
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f97d 	bl	8008ad4 <RCCEx_PLL2_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80077e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	2100      	movs	r1, #0
 80077fa:	61b9      	str	r1, [r7, #24]
 80077fc:	f003 0304 	and.w	r3, r3, #4
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007806:	460b      	mov	r3, r1
 8007808:	4313      	orrs	r3, r2
 800780a:	d011      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800780c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007810:	3308      	adds	r3, #8
 8007812:	2102      	movs	r1, #2
 8007814:	4618      	mov	r0, r3
 8007816:	f001 f95d 	bl	8008ad4 <RCCEx_PLL2_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007820:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800782c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	2100      	movs	r1, #0
 800783a:	6139      	str	r1, [r7, #16]
 800783c:	f003 0308 	and.w	r3, r3, #8
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007846:	460b      	mov	r3, r1
 8007848:	4313      	orrs	r3, r2
 800784a:	d011      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800784c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007850:	3328      	adds	r3, #40	; 0x28
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f9ef 	bl	8008c38 <RCCEx_PLL3_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8007860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007864:	2b00      	cmp	r3, #0
 8007866:	d003      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800786c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	2100      	movs	r1, #0
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007886:	460b      	mov	r3, r1
 8007888:	4313      	orrs	r3, r2
 800788a:	d011      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800788c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007890:	3328      	adds	r3, #40	; 0x28
 8007892:	2101      	movs	r1, #1
 8007894:	4618      	mov	r0, r3
 8007896:	f001 f9cf 	bl	8008c38 <RCCEx_PLL3_Config>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80078a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	2100      	movs	r1, #0
 80078ba:	6039      	str	r1, [r7, #0]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	607b      	str	r3, [r7, #4]
 80078c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078c6:	460b      	mov	r3, r1
 80078c8:	4313      	orrs	r3, r2
 80078ca:	d011      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80078d0:	3328      	adds	r3, #40	; 0x28
 80078d2:	2102      	movs	r1, #2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f9af 	bl	8008c38 <RCCEx_PLL3_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80078e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80078ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80078f0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d101      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80078f8:	2300      	movs	r3, #0
 80078fa:	e000      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
}
 80078fe:	4618      	mov	r0, r3
 8007900:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007904:	46bd      	mov	sp, r7
 8007906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800790a:	bf00      	nop
 800790c:	58024400 	.word	0x58024400

08007910 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b090      	sub	sp, #64	; 0x40
 8007914:	af00      	add	r7, sp, #0
 8007916:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800791a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007922:	430b      	orrs	r3, r1
 8007924:	f040 8094 	bne.w	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007928:	4b9b      	ldr	r3, [pc, #620]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800792a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	2b04      	cmp	r3, #4
 8007936:	f200 8087 	bhi.w	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007955 	.word	0x08007955
 8007944:	0800797d 	.word	0x0800797d
 8007948:	080079a5 	.word	0x080079a5
 800794c:	08007a41 	.word	0x08007a41
 8007950:	080079cd 	.word	0x080079cd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007954:	4b90      	ldr	r3, [pc, #576]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800795c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007960:	d108      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007966:	4618      	mov	r0, r3
 8007968:	f000 ff62 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800796c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007970:	f000 bc93 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007978:	f000 bc8f 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800797c:	4b86      	ldr	r3, [pc, #536]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007988:	d108      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800798a:	f107 0318 	add.w	r3, r7, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f000 fca6 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007998:	f000 bc7f 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079a0:	f000 bc7b 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80079a4:	4b7c      	ldr	r3, [pc, #496]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079b0:	d108      	bne.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fde6 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80079c0:	f000 bc6b 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c8:	f000 bc67 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079cc:	4b72      	ldr	r3, [pc, #456]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079d6:	4b70      	ldr	r3, [pc, #448]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d10c      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d109      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079e8:	4b6b      	ldr	r3, [pc, #428]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	08db      	lsrs	r3, r3, #3
 80079ee:	f003 0303 	and.w	r3, r3, #3
 80079f2:	4a6a      	ldr	r2, [pc, #424]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
 80079f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079fa:	e01f      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079fc:	4b66      	ldr	r3, [pc, #408]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a08:	d106      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a10:	d102      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007a12:	4b63      	ldr	r3, [pc, #396]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a16:	e011      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a18:	4b5f      	ldr	r3, [pc, #380]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a24:	d106      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a2c:	d102      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007a2e:	4b5d      	ldr	r3, [pc, #372]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a32:	e003      	b.n	8007a3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007a38:	f000 bc2f 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007a3c:	f000 bc2d 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007a40:	4b59      	ldr	r3, [pc, #356]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a44:	f000 bc29 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a4c:	f000 bc25 	b.w	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a54:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8007a58:	430b      	orrs	r3, r1
 8007a5a:	f040 80a7 	bne.w	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8007a5e:	4b4e      	ldr	r3, [pc, #312]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a62:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007a66:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a6e:	d054      	beq.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a76:	f200 808b 	bhi.w	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a80:	f000 8083 	beq.w	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a8a:	f200 8081 	bhi.w	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a94:	d02f      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a9c:	d878      	bhi.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aaa:	d012      	beq.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8007aac:	e070      	b.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007aae:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aba:	d107      	bne.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 feb5 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aca:	e3e6      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ad0:	e3e3      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad2:	4b31      	ldr	r3, [pc, #196]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ade:	d107      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ae0:	f107 0318 	add.w	r3, r7, #24
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 fbfb 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007aee:	e3d4      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007af4:	e3d1      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007af6:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b02:	d107      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b04:	f107 030c 	add.w	r3, r7, #12
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fd3d 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b12:	e3c2      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b14:	2300      	movs	r3, #0
 8007b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b18:	e3bf      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b1a:	4b1f      	ldr	r3, [pc, #124]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b24:	4b1c      	ldr	r3, [pc, #112]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d10c      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b36:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	08db      	lsrs	r3, r3, #3
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	4a16      	ldr	r2, [pc, #88]	; (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007b42:	fa22 f303 	lsr.w	r3, r2, r3
 8007b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b48:	e01e      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b56:	d106      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b64:	e010      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b66:	4b0c      	ldr	r3, [pc, #48]	; (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b72:	d106      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7a:	d102      	bne.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007b7c:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b80:	e002      	b.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007b82:	2300      	movs	r3, #0
 8007b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007b86:	e388      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b88:	e387      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b8e:	e384      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007b90:	2300      	movs	r3, #0
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b94:	e381      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007b96:	bf00      	nop
 8007b98:	58024400 	.word	0x58024400
 8007b9c:	03d09000 	.word	0x03d09000
 8007ba0:	003d0900 	.word	0x003d0900
 8007ba4:	017d7840 	.word	0x017d7840
 8007ba8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bb0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	f040 809c 	bne.w	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007bba:	4b9e      	ldr	r3, [pc, #632]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007bc2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bca:	d054      	beq.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bd2:	f200 808b 	bhi.w	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bdc:	f000 8083 	beq.w	8007ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007be6:	f200 8081 	bhi.w	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bf0:	d02f      	beq.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bf8:	d878      	bhi.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c06:	d012      	beq.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007c08:	e070      	b.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007c0a:	4b8a      	ldr	r3, [pc, #552]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c16:	d107      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fe07 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c26:	e338      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c2c:	e335      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c2e:	4b81      	ldr	r3, [pc, #516]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c3c:	f107 0318 	add.w	r3, r7, #24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fb4d 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c4a:	e326      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c50:	e323      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c52:	4b78      	ldr	r3, [pc, #480]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c5e:	d107      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c60:	f107 030c 	add.w	r3, r7, #12
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fc8f 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007c6e:	e314      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c74:	e311      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c76:	4b6f      	ldr	r3, [pc, #444]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c80:	4b6c      	ldr	r3, [pc, #432]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d10c      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c92:	4b68      	ldr	r3, [pc, #416]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	08db      	lsrs	r3, r3, #3
 8007c98:	f003 0303 	and.w	r3, r3, #3
 8007c9c:	4a66      	ldr	r2, [pc, #408]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ca4:	e01e      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ca6:	4b63      	ldr	r3, [pc, #396]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cba:	d102      	bne.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007cbc:	4b5f      	ldr	r3, [pc, #380]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc0:	e010      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007cc2:	4b5c      	ldr	r3, [pc, #368]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cce:	d106      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd6:	d102      	bne.n	8007cde <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007cd8:	4b59      	ldr	r3, [pc, #356]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cdc:	e002      	b.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ce2:	e2da      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ce4:	e2d9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ce6:	4b57      	ldr	r3, [pc, #348]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cea:	e2d6      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cf0:	e2d3      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cf6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007cfa:	430b      	orrs	r3, r1
 8007cfc:	f040 80a7 	bne.w	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007d00:	4b4c      	ldr	r3, [pc, #304]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d04:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d10:	d055      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d18:	f200 8096 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d22:	f000 8084 	beq.w	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d2c:	f200 808c 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d36:	d030      	beq.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d3e:	f200 8083 	bhi.w	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4e:	d012      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007d50:	e07a      	b.n	8007e48 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007d52:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d5e:	d107      	bne.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fd63 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d6e:	e294      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d74:	e291      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007d76:	4b2f      	ldr	r3, [pc, #188]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d82:	d107      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d84:	f107 0318 	add.w	r3, r7, #24
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 faa9 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d92:	e282      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d94:	2300      	movs	r3, #0
 8007d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d98:	e27f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da6:	d107      	bne.n	8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007da8:	f107 030c 	add.w	r3, r7, #12
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fbeb 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007db6:	e270      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007dbc:	e26d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dbe:	4b1d      	ldr	r3, [pc, #116]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d10c      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	08db      	lsrs	r3, r3, #3
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	4a14      	ldr	r2, [pc, #80]	; (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007dec:	e01e      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dee:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e02:	d102      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007e04:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e08:	e010      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e0a:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e16:	d106      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e1e:	d102      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007e20:	4b07      	ldr	r3, [pc, #28]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007e2a:	e236      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e2c:	e235      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e2e:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e32:	e232      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007e34:	58024400 	.word	0x58024400
 8007e38:	03d09000 	.word	0x03d09000
 8007e3c:	003d0900 	.word	0x003d0900
 8007e40:	017d7840 	.word	0x017d7840
 8007e44:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e4c:	e225      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e52:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007e56:	430b      	orrs	r3, r1
 8007e58:	f040 8085 	bne.w	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007e5c:	4b9c      	ldr	r3, [pc, #624]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007e64:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e6c:	d06b      	beq.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e74:	d874      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e7c:	d056      	beq.n	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e84:	d86c      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e8c:	d03b      	beq.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007e94:	d864      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e9c:	d021      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea4:	d85c      	bhi.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d004      	beq.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb2:	d004      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007eb4:	e054      	b.n	8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007eb6:	f7fe fb33 	bl	8006520 <HAL_RCC_GetPCLK1Freq>
 8007eba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007ebc:	e1ed      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ebe:	4b84      	ldr	r3, [pc, #528]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eca:	d107      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ecc:	f107 0318 	add.w	r3, r7, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fa05 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007eda:	e1de      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ee0:	e1db      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ee2:	4b7b      	ldr	r3, [pc, #492]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eee:	d107      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ef0:	f107 030c 	add.w	r3, r7, #12
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fb47 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007efe:	e1cc      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f04:	e1c9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007f06:	4b72      	ldr	r3, [pc, #456]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0304 	and.w	r3, r3, #4
 8007f0e:	2b04      	cmp	r3, #4
 8007f10:	d109      	bne.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f12:	4b6f      	ldr	r3, [pc, #444]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	08db      	lsrs	r3, r3, #3
 8007f18:	f003 0303 	and.w	r3, r3, #3
 8007f1c:	4a6d      	ldr	r2, [pc, #436]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f24:	e1b9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f2a:	e1b6      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007f2c:	4b68      	ldr	r3, [pc, #416]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f38:	d102      	bne.n	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007f3a:	4b67      	ldr	r3, [pc, #412]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f3e:	e1ac      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f44:	e1a9      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007f46:	4b62      	ldr	r3, [pc, #392]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f52:	d102      	bne.n	8007f5a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007f54:	4b61      	ldr	r3, [pc, #388]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f58:	e19f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f5e:	e19c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f64:	e199      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	d173      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007f72:	4b57      	ldr	r3, [pc, #348]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007f7a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f82:	d02f      	beq.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8a:	d863      	bhi.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f98:	d012      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007f9a:	e05b      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007f9c:	4b4c      	ldr	r3, [pc, #304]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa8:	d107      	bne.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007faa:	f107 0318 	add.w	r3, r7, #24
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f996 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb8:	e16f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fbe:	e16c      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fc0:	4b43      	ldr	r3, [pc, #268]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fcc:	d107      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fad8 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fdc:	e15d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fe2:	e15a      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe4:	4b3a      	ldr	r3, [pc, #232]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fee:	4b38      	ldr	r3, [pc, #224]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b04      	cmp	r3, #4
 8007ff8:	d10c      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008000:	4b33      	ldr	r3, [pc, #204]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	08db      	lsrs	r3, r3, #3
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	4a32      	ldr	r2, [pc, #200]	; (80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008012:	e01e      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008014:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800801c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008020:	d106      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8008022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008028:	d102      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800802a:	4b2b      	ldr	r3, [pc, #172]	; (80080d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800802c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800802e:	e010      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008030:	4b27      	ldr	r3, [pc, #156]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800803c:	d106      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008044:	d102      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008046:	4b25      	ldr	r3, [pc, #148]	; (80080dc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800804a:	e002      	b.n	8008052 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008050:	e123      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008052:	e122      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008058:	e11f      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800805a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008062:	430b      	orrs	r3, r1
 8008064:	d13c      	bne.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008066:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800806e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	2b00      	cmp	r3, #0
 8008074:	d004      	beq.n	8008080 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800807c:	d012      	beq.n	80080a4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800807e:	e023      	b.n	80080c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800808c:	d107      	bne.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800808e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fbcc 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800809c:	e0fd      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080a2:	e0fa      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b0:	d107      	bne.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b2:	f107 0318 	add.w	r3, r7, #24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f912 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080c0:	e0eb      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080c2:	2300      	movs	r3, #0
 80080c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c6:	e0e8      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080cc:	e0e5      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
 80080d4:	03d09000 	.word	0x03d09000
 80080d8:	003d0900 	.word	0x003d0900
 80080dc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80080e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80080e8:	430b      	orrs	r3, r1
 80080ea:	f040 8085 	bne.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80080ee:	4b6d      	ldr	r3, [pc, #436]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80080f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080fe:	d06b      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008106:	d874      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800810e:	d056      	beq.n	80081be <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008116:	d86c      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800811a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800811e:	d03b      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008126:	d864      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812e:	d021      	beq.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008136:	d85c      	bhi.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008144:	d004      	beq.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008146:	e054      	b.n	80081f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008148:	f000 f8b4 	bl	80082b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800814c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800814e:	e0a4      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008150:	4b54      	ldr	r3, [pc, #336]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800815c:	d107      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815e:	f107 0318 	add.w	r3, r7, #24
 8008162:	4618      	mov	r0, r3
 8008164:	f000 f8bc 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800816c:	e095      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008172:	e092      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008174:	4b4b      	ldr	r3, [pc, #300]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800817c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008180:	d107      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008182:	f107 030c 	add.w	r3, r7, #12
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f9fe 	bl	8008588 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008190:	e083      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008196:	e080      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008198:	4b42      	ldr	r3, [pc, #264]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 0304 	and.w	r3, r3, #4
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d109      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081a4:	4b3f      	ldr	r3, [pc, #252]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	08db      	lsrs	r3, r3, #3
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	4a3e      	ldr	r2, [pc, #248]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80081b0:	fa22 f303 	lsr.w	r3, r2, r3
 80081b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b6:	e070      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081bc:	e06d      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80081be:	4b39      	ldr	r3, [pc, #228]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ca:	d102      	bne.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80081cc:	4b37      	ldr	r3, [pc, #220]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d0:	e063      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081d6:	e060      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80081d8:	4b32      	ldr	r3, [pc, #200]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e4:	d102      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80081e6:	4b32      	ldr	r3, [pc, #200]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081ea:	e056      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f0:	e053      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081f6:	e050      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008200:	430b      	orrs	r3, r1
 8008202:	d148      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008204:	4b27      	ldr	r3, [pc, #156]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800820c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800820e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008214:	d02a      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800821c:	d838      	bhi.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800822a:	d00d      	beq.n	8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800822c:	e030      	b.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800822e:	4b1d      	ldr	r3, [pc, #116]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800823a:	d102      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800823c:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008240:	e02b      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008246:	e028      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008248:	4b16      	ldr	r3, [pc, #88]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008254:	d107      	bne.n	8008266 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fae8 	bl	8008830 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008264:	e019      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800826a:	e016      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800826c:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008278:	d107      	bne.n	800828a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800827a:	f107 0318 	add.w	r3, r7, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f000 f82e 	bl	80082e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008288:	e007      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828e:	e004      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008294:	e001      	b.n	800829a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800829a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800829c:	4618      	mov	r0, r3
 800829e:	3740      	adds	r7, #64	; 0x40
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	58024400 	.word	0x58024400
 80082a8:	03d09000 	.word	0x03d09000
 80082ac:	003d0900 	.word	0x003d0900
 80082b0:	017d7840 	.word	0x017d7840

080082b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80082b8:	f7fe f902 	bl	80064c0 <HAL_RCC_GetHCLKFreq>
 80082bc:	4602      	mov	r2, r0
 80082be:	4b06      	ldr	r3, [pc, #24]	; (80082d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	091b      	lsrs	r3, r3, #4
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	4904      	ldr	r1, [pc, #16]	; (80082dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80082ca:	5ccb      	ldrb	r3, [r1, r3]
 80082cc:	f003 031f 	and.w	r3, r3, #31
 80082d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	58024400 	.word	0x58024400
 80082dc:	08024540 	.word	0x08024540

080082e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b089      	sub	sp, #36	; 0x24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082e8:	4ba1      	ldr	r3, [pc, #644]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	f003 0303 	and.w	r3, r3, #3
 80082f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082f2:	4b9f      	ldr	r3, [pc, #636]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f6:	0b1b      	lsrs	r3, r3, #12
 80082f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082fe:	4b9c      	ldr	r3, [pc, #624]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	091b      	lsrs	r3, r3, #4
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800830a:	4b99      	ldr	r3, [pc, #612]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830e:	08db      	lsrs	r3, r3, #3
 8008310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	fb02 f303 	mul.w	r3, r2, r3
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008322:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8111 	beq.w	8008550 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	f000 8083 	beq.w	800843c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b02      	cmp	r3, #2
 800833a:	f200 80a1 	bhi.w	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d003      	beq.n	800834c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d056      	beq.n	80083f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800834a:	e099      	b.n	8008480 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800834c:	4b88      	ldr	r3, [pc, #544]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0320 	and.w	r3, r3, #32
 8008354:	2b00      	cmp	r3, #0
 8008356:	d02d      	beq.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008358:	4b85      	ldr	r3, [pc, #532]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	08db      	lsrs	r3, r3, #3
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	4a84      	ldr	r2, [pc, #528]	; (8008574 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008364:	fa22 f303 	lsr.w	r3, r2, r3
 8008368:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b7b      	ldr	r3, [pc, #492]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008392:	ed97 6a03 	vldr	s12, [r7, #12]
 8008396:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80083b2:	e087      	b.n	80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800857c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80083c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083c6:	4b6a      	ldr	r3, [pc, #424]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80083da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083f6:	e065      	b.n	80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	ee07 3a90 	vmov	s15, r3
 80083fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008402:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840a:	4b59      	ldr	r3, [pc, #356]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841a:	ed97 6a03 	vldr	s12, [r7, #12]
 800841e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800842e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008436:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843a:	e043      	b.n	80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008446:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008584 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b48      	ldr	r3, [pc, #288]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800847e:	e021      	b.n	80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008580 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b37      	ldr	r3, [pc, #220]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008578 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80084c4:	4b2a      	ldr	r3, [pc, #168]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	0a5b      	lsrs	r3, r3, #9
 80084ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ce:	ee07 3a90 	vmov	s15, r3
 80084d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084de:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ea:	ee17 2a90 	vmov	r2, s15
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084f2:	4b1f      	ldr	r3, [pc, #124]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084fc:	ee07 3a90 	vmov	s15, r3
 8008500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008508:	ee37 7a87 	vadd.f32	s14, s15, s14
 800850c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008510:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008514:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008518:	ee17 2a90 	vmov	r2, s15
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008520:	4b13      	ldr	r3, [pc, #76]	; (8008570 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	0e1b      	lsrs	r3, r3, #24
 8008526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852a:	ee07 3a90 	vmov	s15, r3
 800852e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800853a:	edd7 6a07 	vldr	s13, [r7, #28]
 800853e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008546:	ee17 2a90 	vmov	r2, s15
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800854e:	e008      	b.n	8008562 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	609a      	str	r2, [r3, #8]
}
 8008562:	bf00      	nop
 8008564:	3724      	adds	r7, #36	; 0x24
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	58024400 	.word	0x58024400
 8008574:	03d09000 	.word	0x03d09000
 8008578:	46000000 	.word	0x46000000
 800857c:	4c742400 	.word	0x4c742400
 8008580:	4a742400 	.word	0x4a742400
 8008584:	4bbebc20 	.word	0x4bbebc20

08008588 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	; 0x24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008590:	4ba1      	ldr	r3, [pc, #644]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800859a:	4b9f      	ldr	r3, [pc, #636]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	0d1b      	lsrs	r3, r3, #20
 80085a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80085a6:	4b9c      	ldr	r3, [pc, #624]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	0a1b      	lsrs	r3, r3, #8
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80085b2:	4b99      	ldr	r3, [pc, #612]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	08db      	lsrs	r3, r3, #3
 80085b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	fb02 f303 	mul.w	r3, r2, r3
 80085c2:	ee07 3a90 	vmov	s15, r3
 80085c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8111 	beq.w	80087f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b02      	cmp	r3, #2
 80085da:	f000 8083 	beq.w	80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	f200 80a1 	bhi.w	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d056      	beq.n	80086a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085f2:	e099      	b.n	8008728 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f4:	4b88      	ldr	r3, [pc, #544]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0320 	and.w	r3, r3, #32
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d02d      	beq.n	800865c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008600:	4b85      	ldr	r3, [pc, #532]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	08db      	lsrs	r3, r3, #3
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	4a84      	ldr	r2, [pc, #528]	; (800881c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800860c:	fa22 f303 	lsr.w	r3, r2, r3
 8008610:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	ee07 3a90 	vmov	s15, r3
 8008618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862a:	4b7b      	ldr	r3, [pc, #492]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863a:	ed97 6a03 	vldr	s12, [r7, #12]
 800863e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800864e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008656:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800865a:	e087      	b.n	800876c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008666:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008824 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800866e:	4b6a      	ldr	r3, [pc, #424]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008682:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800868e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800869e:	e065      	b.n	800876c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b2:	4b59      	ldr	r3, [pc, #356]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086ba:	ee07 3a90 	vmov	s15, r3
 80086be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086e2:	e043      	b.n	800876c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800882c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f6:	4b48      	ldr	r3, [pc, #288]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086fe:	ee07 3a90 	vmov	s15, r3
 8008702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008706:	ed97 6a03 	vldr	s12, [r7, #12]
 800870a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800870e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800871a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800871e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008726:	e021      	b.n	800876c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008732:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800873a:	4b37      	ldr	r3, [pc, #220]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800873c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008742:	ee07 3a90 	vmov	s15, r3
 8008746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800874a:	ed97 6a03 	vldr	s12, [r7, #12]
 800874e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008820 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800875a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800875e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800876a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800876c:	4b2a      	ldr	r3, [pc, #168]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	0a5b      	lsrs	r3, r3, #9
 8008772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008782:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008786:	edd7 6a07 	vldr	s13, [r7, #28]
 800878a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800878e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008792:	ee17 2a90 	vmov	r2, s15
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800879a:	4b1f      	ldr	r3, [pc, #124]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	0c1b      	lsrs	r3, r3, #16
 80087a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087a4:	ee07 3a90 	vmov	s15, r3
 80087a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087c0:	ee17 2a90 	vmov	r2, s15
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80087c8:	4b13      	ldr	r3, [pc, #76]	; (8008818 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087cc:	0e1b      	lsrs	r3, r3, #24
 80087ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d2:	ee07 3a90 	vmov	s15, r3
 80087d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80087e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087ee:	ee17 2a90 	vmov	r2, s15
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087f6:	e008      	b.n	800880a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	609a      	str	r2, [r3, #8]
}
 800880a:	bf00      	nop
 800880c:	3724      	adds	r7, #36	; 0x24
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	58024400 	.word	0x58024400
 800881c:	03d09000 	.word	0x03d09000
 8008820:	46000000 	.word	0x46000000
 8008824:	4c742400 	.word	0x4c742400
 8008828:	4a742400 	.word	0x4a742400
 800882c:	4bbebc20 	.word	0x4bbebc20

08008830 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008830:	b480      	push	{r7}
 8008832:	b089      	sub	sp, #36	; 0x24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008838:	4ba0      	ldr	r3, [pc, #640]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f003 0303 	and.w	r3, r3, #3
 8008840:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008842:	4b9e      	ldr	r3, [pc, #632]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	091b      	lsrs	r3, r3, #4
 8008848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800884c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800884e:	4b9b      	ldr	r3, [pc, #620]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008858:	4b98      	ldr	r3, [pc, #608]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800885a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885c:	08db      	lsrs	r3, r3, #3
 800885e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008862:	693a      	ldr	r2, [r7, #16]
 8008864:	fb02 f303 	mul.w	r3, r2, r3
 8008868:	ee07 3a90 	vmov	s15, r3
 800886c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008870:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8111 	beq.w	8008a9e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b02      	cmp	r3, #2
 8008880:	f000 8083 	beq.w	800898a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b02      	cmp	r3, #2
 8008888:	f200 80a1 	bhi.w	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d056      	beq.n	8008946 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008898:	e099      	b.n	80089ce <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889a:	4b88      	ldr	r3, [pc, #544]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d02d      	beq.n	8008902 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088a6:	4b85      	ldr	r3, [pc, #532]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a83      	ldr	r2, [pc, #524]	; (8008ac0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	ee07 3a90 	vmov	s15, r3
 80088c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d0:	4b7a      	ldr	r3, [pc, #488]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d8:	ee07 3a90 	vmov	s15, r3
 80088dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80088e4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088fc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008900:	e087      	b.n	8008a12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008910:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008914:	4b69      	ldr	r3, [pc, #420]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	ed97 6a03 	vldr	s12, [r7, #12]
 8008928:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800892c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800893c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008940:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008944:	e065      	b.n	8008a12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	ee07 3a90 	vmov	s15, r3
 800894c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008950:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008acc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8008954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008958:	4b58      	ldr	r3, [pc, #352]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800895a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008960:	ee07 3a90 	vmov	s15, r3
 8008964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008968:	ed97 6a03 	vldr	s12, [r7, #12]
 800896c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008970:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008974:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800897c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008984:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008988:	e043      	b.n	8008a12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	ee07 3a90 	vmov	s15, r3
 8008990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008994:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008ad0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800899c:	4b47      	ldr	r3, [pc, #284]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a4:	ee07 3a90 	vmov	s15, r3
 80089a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80089b0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80089cc:	e021      	b.n	8008a12 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	ee07 3a90 	vmov	s15, r3
 80089d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80089dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089e0:	4b36      	ldr	r3, [pc, #216]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e8:	ee07 3a90 	vmov	s15, r3
 80089ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80089f4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008ac4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80089f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008a10:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008a12:	4b2a      	ldr	r3, [pc, #168]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a16:	0a5b      	lsrs	r3, r3, #9
 8008a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1c:	ee07 3a90 	vmov	s15, r3
 8008a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a38:	ee17 2a90 	vmov	r2, s15
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008a40:	4b1e      	ldr	r3, [pc, #120]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a66:	ee17 2a90 	vmov	r2, s15
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a72:	0e1b      	lsrs	r3, r3, #24
 8008a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a78:	ee07 3a90 	vmov	s15, r3
 8008a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a88:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a94:	ee17 2a90 	vmov	r2, s15
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	609a      	str	r2, [r3, #8]
}
 8008ab0:	bf00      	nop
 8008ab2:	3724      	adds	r7, #36	; 0x24
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	58024400 	.word	0x58024400
 8008ac0:	03d09000 	.word	0x03d09000
 8008ac4:	46000000 	.word	0x46000000
 8008ac8:	4c742400 	.word	0x4c742400
 8008acc:	4a742400 	.word	0x4a742400
 8008ad0:	4bbebc20 	.word	0x4bbebc20

08008ad4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008ae2:	4b53      	ldr	r3, [pc, #332]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d101      	bne.n	8008af2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e099      	b.n	8008c26 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008af2:	4b4f      	ldr	r3, [pc, #316]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a4e      	ldr	r2, [pc, #312]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008afc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008afe:	f7f8 fcb5 	bl	800146c <HAL_GetTick>
 8008b02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b04:	e008      	b.n	8008b18 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b06:	f7f8 fcb1 	bl	800146c <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d901      	bls.n	8008b18 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e086      	b.n	8008c26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b18:	4b45      	ldr	r3, [pc, #276]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1f0      	bne.n	8008b06 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b24:	4b42      	ldr	r3, [pc, #264]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	031b      	lsls	r3, r3, #12
 8008b32:	493f      	ldr	r1, [pc, #252]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	628b      	str	r3, [r1, #40]	; 0x28
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	025b      	lsls	r3, r3, #9
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	041b      	lsls	r3, r3, #16
 8008b56:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008b5a:	431a      	orrs	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	061b      	lsls	r3, r3, #24
 8008b64:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b68:	4931      	ldr	r1, [pc, #196]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008b6e:	4b30      	ldr	r3, [pc, #192]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	492d      	ldr	r1, [pc, #180]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b80:	4b2b      	ldr	r3, [pc, #172]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b84:	f023 0220 	bic.w	r2, r3, #32
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	4928      	ldr	r1, [pc, #160]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b92:	4b27      	ldr	r3, [pc, #156]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	4a26      	ldr	r2, [pc, #152]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	f023 0310 	bic.w	r3, r3, #16
 8008b9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b9e:	4b24      	ldr	r3, [pc, #144]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008ba0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <RCCEx_PLL2_Config+0x160>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	69d2      	ldr	r2, [r2, #28]
 8008baa:	00d2      	lsls	r2, r2, #3
 8008bac:	4920      	ldr	r1, [pc, #128]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008bb2:	4b1f      	ldr	r3, [pc, #124]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb6:	4a1e      	ldr	r2, [pc, #120]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bb8:	f043 0310 	orr.w	r3, r3, #16
 8008bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d106      	bne.n	8008bd2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008bc4:	4b1a      	ldr	r3, [pc, #104]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc8:	4a19      	ldr	r2, [pc, #100]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bce:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008bd0:	e00f      	b.n	8008bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d106      	bne.n	8008be6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008bd8:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	4a14      	ldr	r2, [pc, #80]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008be4:	e005      	b.n	8008bf2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008be6:	4b12      	ldr	r3, [pc, #72]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	4a11      	ldr	r2, [pc, #68]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bf0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008bf2:	4b0f      	ldr	r3, [pc, #60]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a0e      	ldr	r2, [pc, #56]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008bf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008bfc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bfe:	f7f8 fc35 	bl	800146c <HAL_GetTick>
 8008c02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c04:	e008      	b.n	8008c18 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c06:	f7f8 fc31 	bl	800146c <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e006      	b.n	8008c26 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <RCCEx_PLL2_Config+0x15c>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0f0      	beq.n	8008c06 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400
 8008c34:	ffff0007 	.word	0xffff0007

08008c38 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c42:	2300      	movs	r3, #0
 8008c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c46:	4b53      	ldr	r3, [pc, #332]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d101      	bne.n	8008c56 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e099      	b.n	8008d8a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008c56:	4b4f      	ldr	r3, [pc, #316]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a4e      	ldr	r2, [pc, #312]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c62:	f7f8 fc03 	bl	800146c <HAL_GetTick>
 8008c66:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c6a:	f7f8 fbff 	bl	800146c <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e086      	b.n	8008d8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c7c:	4b45      	ldr	r3, [pc, #276]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1f0      	bne.n	8008c6a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c88:	4b42      	ldr	r3, [pc, #264]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	051b      	lsls	r3, r3, #20
 8008c96:	493f      	ldr	r1, [pc, #252]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	628b      	str	r3, [r1, #40]	; 0x28
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	025b      	lsls	r3, r3, #9
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	3b01      	subs	r3, #1
 8008cb8:	041b      	lsls	r3, r3, #16
 8008cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	691b      	ldr	r3, [r3, #16]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	061b      	lsls	r3, r3, #24
 8008cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ccc:	4931      	ldr	r1, [pc, #196]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008cd2:	4b30      	ldr	r3, [pc, #192]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	492d      	ldr	r1, [pc, #180]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008ce4:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	4928      	ldr	r1, [pc, #160]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008cf6:	4b27      	ldr	r3, [pc, #156]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfa:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d02:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <RCCEx_PLL3_Config+0x160>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	69d2      	ldr	r2, [r2, #28]
 8008d0e:	00d2      	lsls	r2, r2, #3
 8008d10:	4920      	ldr	r1, [pc, #128]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d16:	4b1f      	ldr	r3, [pc, #124]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d106      	bne.n	8008d36 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d28:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a19      	ldr	r2, [pc, #100]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d34:	e00f      	b.n	8008d56 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d106      	bne.n	8008d4a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008d3c:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d40:	4a14      	ldr	r2, [pc, #80]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d48:	e005      	b.n	8008d56 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008d4a:	4b12      	ldr	r3, [pc, #72]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4e:	4a11      	ldr	r2, [pc, #68]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008d56:	4b0f      	ldr	r3, [pc, #60]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a0e      	ldr	r2, [pc, #56]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d62:	f7f8 fb83 	bl	800146c <HAL_GetTick>
 8008d66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d68:	e008      	b.n	8008d7c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008d6a:	f7f8 fb7f 	bl	800146c <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	d901      	bls.n	8008d7c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e006      	b.n	8008d8a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <RCCEx_PLL3_Config+0x15c>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0f0      	beq.n	8008d6a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	58024400 	.word	0x58024400
 8008d98:	ffff0007 	.word	0xffff0007

08008d9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08a      	sub	sp, #40	; 0x28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e075      	b.n	8008e9a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7f7 fecd 	bl	8000b60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f868 	bl	8008ea4 <HAL_SD_InitCard>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e05d      	b.n	8008e9a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fbed 	bl	80095c4 <HAL_SD_GetCardStatus>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e052      	b.n	8008e9a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008df4:	7e3b      	ldrb	r3, [r7, #24]
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008dfa:	7e7b      	ldrb	r3, [r7, #25]
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d10a      	bne.n	8008e1e <HAL_SD_Init+0x82>
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <HAL_SD_Init+0x78>
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d004      	beq.n	8008e1e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8008e1c:	e00b      	b.n	8008e36 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d104      	bne.n	8008e30 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e2c:	659a      	str	r2, [r3, #88]	; 0x58
 8008e2e:	e002      	b.n	8008e36 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fcab 	bl	8009798 <HAL_SD_ConfigWideBusOperation>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e026      	b.n	8008e9a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008e4c:	f7f8 fb0e 	bl	800146c <HAL_GetTick>
 8008e50:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008e52:	e011      	b.n	8008e78 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e54:	f7f8 fb0a 	bl	800146c <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d109      	bne.n	8008e78 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e6a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e010      	b.n	8008e9a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fd9f 	bl	80099bc <HAL_SD_GetCardState>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	d1e7      	bne.n	8008e54 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3728      	adds	r7, #40	; 0x28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b08d      	sub	sp, #52	; 0x34
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ebc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008ec0:	f04f 0100 	mov.w	r1, #0
 8008ec4:	f7fe fd24 	bl	8007910 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ec8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d109      	bne.n	8008ee4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008ede:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e070      	b.n	8008fc6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	4a39      	ldr	r2, [pc, #228]	; (8008fd0 <HAL_SD_InitCard+0x12c>)
 8008eea:	fba2 2303 	umull	r2, r3, r2, r3
 8008eee:	091b      	lsrs	r3, r3, #4
 8008ef0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681c      	ldr	r4, [r3, #0]
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f107 0318 	add.w	r3, r7, #24
 8008efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008f00:	e882 0003 	stmia.w	r2, {r0, r1}
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f001 fc1a 	bl	800a744 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f001 fc4c 	bl	800a7b2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008f32:	4a28      	ldr	r2, [pc, #160]	; (8008fd4 <HAL_SD_InitCard+0x130>)
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7f8 faa1 	bl	8001484 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fe28 	bl	8009b98 <SD_PowerON>
 8008f48:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e02e      	b.n	8008fc6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fd47 	bl	80099fc <SD_InitCard>
 8008f6e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e01b      	b.n	8008fc6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f96:	4618      	mov	r0, r3
 8008f98:	f001 fca0 	bl	800a8dc <SDMMC_CmdBlockLength>
 8008f9c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00f      	beq.n	8008fc4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a0b      	ldr	r2, [pc, #44]	; (8008fd8 <HAL_SD_InitCard+0x134>)
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	e000      	b.n	8008fc6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	372c      	adds	r7, #44	; 0x2c
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd90      	pop	{r4, r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	014f8b59 	.word	0x014f8b59
 8008fd4:	00012110 	.word	0x00012110
 8008fd8:	1fe00fff 	.word	0x1fe00fff

08008fdc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08c      	sub	sp, #48	; 0x30
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e08d      	b.n	8009120 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b01      	cmp	r3, #1
 800900e:	f040 8086 	bne.w	800911e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	441a      	add	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009022:	429a      	cmp	r2, r3
 8009024:	d907      	bls.n	8009036 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e074      	b.n	8009120 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2203      	movs	r2, #3
 800903a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2200      	movs	r2, #0
 8009044:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	025a      	lsls	r2, r3, #9
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	2b01      	cmp	r3, #1
 800905a:	d002      	beq.n	8009062 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800905e:	025b      	lsls	r3, r3, #9
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009062:	f04f 33ff 	mov.w	r3, #4294967295
 8009066:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	025b      	lsls	r3, r3, #9
 800906c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800906e:	2390      	movs	r3, #144	; 0x90
 8009070:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009072:	2302      	movs	r3, #2
 8009074:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009076:	2300      	movs	r3, #0
 8009078:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800907a:	2300      	movs	r3, #0
 800907c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f107 0210 	add.w	r2, r7, #16
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f001 fbfb 	bl	800a884 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800909c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2201      	movs	r2, #1
 80090ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d90a      	bls.n	80090ca <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2282      	movs	r2, #130	; 0x82
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 fc51 	bl	800a968 <SDMMC_CmdReadMultiBlock>
 80090c6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80090c8:	e009      	b.n	80090de <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2281      	movs	r2, #129	; 0x81
 80090ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fc23 	bl	800a922 <SDMMC_CmdReadSingleBlock>
 80090dc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d012      	beq.n	800910a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a0f      	ldr	r2, [pc, #60]	; (8009128 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	431a      	orrs	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2200      	movs	r2, #0
 8009104:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e00a      	b.n	8009120 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009118:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	e000      	b.n	8009120 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800911e:	2302      	movs	r3, #2
  }
}
 8009120:	4618      	mov	r0, r3
 8009122:	3730      	adds	r7, #48	; 0x30
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	1fe00fff 	.word	0x1fe00fff

0800912c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b08c      	sub	sp, #48	; 0x30
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
 8009138:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d107      	bne.n	8009154 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009148:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e08d      	b.n	8009270 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	f040 8086 	bne.w	800926e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2200      	movs	r2, #0
 8009166:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	441a      	add	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009172:	429a      	cmp	r2, r3
 8009174:	d907      	bls.n	8009186 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e074      	b.n	8009270 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2203      	movs	r2, #3
 800918a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2200      	movs	r2, #0
 8009194:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	025a      	lsls	r2, r3, #9
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d002      	beq.n	80091b2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80091ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ae:	025b      	lsls	r3, r3, #9
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091b2:	f04f 33ff 	mov.w	r3, #4294967295
 80091b6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	025b      	lsls	r3, r3, #9
 80091bc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80091be:	2390      	movs	r3, #144	; 0x90
 80091c0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f107 0210 	add.w	r2, r7, #16
 80091d6:	4611      	mov	r1, r2
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fb53 	bl	800a884 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2201      	movs	r2, #1
 80091fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d90a      	bls.n	800921a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	22a0      	movs	r2, #160	; 0xa0
 8009208:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009210:	4618      	mov	r0, r3
 8009212:	f001 fbef 	bl	800a9f4 <SDMMC_CmdWriteMultiBlock>
 8009216:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009218:	e009      	b.n	800922e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2290      	movs	r2, #144	; 0x90
 800921e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009226:	4618      	mov	r0, r3
 8009228:	f001 fbc1 	bl	800a9ae <SDMMC_CmdWriteSingleBlock>
 800922c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d012      	beq.n	800925a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a0f      	ldr	r2, [pc, #60]	; (8009278 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800923a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	431a      	orrs	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e00a      	b.n	8009270 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8009268:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	e000      	b.n	8009270 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800926e:	2302      	movs	r3, #2
  }
}
 8009270:	4618      	mov	r0, r3
 8009272:	3730      	adds	r7, #48	; 0x30
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	1fe00fff 	.word	0x1fe00fff

0800927c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800928a:	0f9b      	lsrs	r3, r3, #30
 800928c:	b2da      	uxtb	r2, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009296:	0e9b      	lsrs	r3, r3, #26
 8009298:	b2db      	uxtb	r3, r3
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092a8:	0e1b      	lsrs	r3, r3, #24
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ba:	0c1b      	lsrs	r3, r3, #16
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092dc:	0d1b      	lsrs	r3, r3, #20
 80092de:	b29a      	uxth	r2, r3
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e8:	0c1b      	lsrs	r3, r3, #16
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fa:	0bdb      	lsrs	r3, r3, #15
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800930c:	0b9b      	lsrs	r3, r3, #14
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	b2da      	uxtb	r2, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800931e:	0b5b      	lsrs	r3, r3, #13
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009330:	0b1b      	lsrs	r3, r3, #12
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2200      	movs	r2, #0
 8009342:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d163      	bne.n	8009414 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009350:	009a      	lsls	r2, r3, #2
 8009352:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009356:	4013      	ands	r3, r2
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800935c:	0f92      	lsrs	r2, r2, #30
 800935e:	431a      	orrs	r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009368:	0edb      	lsrs	r3, r3, #27
 800936a:	b2db      	uxtb	r3, r3
 800936c:	f003 0307 	and.w	r3, r3, #7
 8009370:	b2da      	uxtb	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800937a:	0e1b      	lsrs	r3, r3, #24
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	b2da      	uxtb	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800938c:	0d5b      	lsrs	r3, r3, #21
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0307 	and.w	r3, r3, #7
 8009394:	b2da      	uxtb	r2, r3
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800939e:	0c9b      	lsrs	r3, r3, #18
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	f003 0307 	and.w	r3, r3, #7
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b0:	0bdb      	lsrs	r3, r3, #15
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	7e1b      	ldrb	r3, [r3, #24]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0307 	and.w	r3, r3, #7
 80093d2:	3302      	adds	r3, #2
 80093d4:	2201      	movs	r2, #1
 80093d6:	fa02 f303 	lsl.w	r3, r2, r3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093de:	fb03 f202 	mul.w	r2, r3, r2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	7a1b      	ldrb	r3, [r3, #8]
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 030f 	and.w	r3, r3, #15
 80093f0:	2201      	movs	r2, #1
 80093f2:	409a      	lsls	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009400:	0a52      	lsrs	r2, r2, #9
 8009402:	fb03 f202 	mul.w	r2, r3, r2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009410:	655a      	str	r2, [r3, #84]	; 0x54
 8009412:	e031      	b.n	8009478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009418:	2b01      	cmp	r3, #1
 800941a:	d11d      	bne.n	8009458 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009420:	041b      	lsls	r3, r3, #16
 8009422:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	431a      	orrs	r2, r3
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	3301      	adds	r3, #1
 8009438:	029a      	lsls	r2, r3, #10
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800944c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	655a      	str	r2, [r3, #84]	; 0x54
 8009456:	e00f      	b.n	8009478 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a58      	ldr	r2, [pc, #352]	; (80095c0 <HAL_SD_GetCardCSD+0x344>)
 800945e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e09d      	b.n	80095b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800947c:	0b9b      	lsrs	r3, r3, #14
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800948e:	09db      	lsrs	r3, r3, #7
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009496:	b2da      	uxtb	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b0:	0fdb      	lsrs	r3, r3, #31
 80094b2:	b2da      	uxtb	r2, r3
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094bc:	0f5b      	lsrs	r3, r3, #29
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f003 0303 	and.w	r3, r3, #3
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ce:	0e9b      	lsrs	r3, r3, #26
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	f003 0307 	and.w	r3, r3, #7
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094e0:	0d9b      	lsrs	r3, r3, #22
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	f003 030f 	and.w	r3, r3, #15
 80094e8:	b2da      	uxtb	r2, r3
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094f2:	0d5b      	lsrs	r3, r3, #21
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	f003 0301 	and.w	r3, r3, #1
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800950e:	0c1b      	lsrs	r3, r3, #16
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009522:	0bdb      	lsrs	r3, r3, #15
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009536:	0b9b      	lsrs	r3, r3, #14
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800954a:	0b5b      	lsrs	r3, r3, #13
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955e:	0b1b      	lsrs	r3, r3, #12
 8009560:	b2db      	uxtb	r3, r3
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	b2da      	uxtb	r2, r3
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009572:	0a9b      	lsrs	r3, r3, #10
 8009574:	b2db      	uxtb	r3, r3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	b2db      	uxtb	r3, r3
 800958a:	f003 0303 	and.w	r3, r3, #3
 800958e:	b2da      	uxtb	r2, r3
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959a:	085b      	lsrs	r3, r3, #1
 800959c:	b2db      	uxtb	r3, r3
 800959e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr
 80095c0:	1fe00fff 	.word	0x1fe00fff

080095c4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b094      	sub	sp, #80	; 0x50
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d101      	bne.n	80095e4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	e0a7      	b.n	8009734 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80095e4:	f107 0308 	add.w	r3, r7, #8
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fb62 	bl	8009cb4 <SD_SendSDStatus>
 80095f0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80095f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d011      	beq.n	800961c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a4f      	ldr	r2, [pc, #316]	; (800973c <HAL_SD_GetCardStatus+0x178>)
 80095fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800961a:	e070      	b.n	80096fe <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	099b      	lsrs	r3, r3, #6
 8009620:	b2db      	uxtb	r3, r3
 8009622:	f003 0303 	and.w	r3, r3, #3
 8009626:	b2da      	uxtb	r2, r3
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	095b      	lsrs	r3, r3, #5
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2da      	uxtb	r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	0a1b      	lsrs	r3, r3, #8
 8009640:	b29b      	uxth	r3, r3
 8009642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009646:	b29a      	uxth	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	0e1b      	lsrs	r3, r3, #24
 800964c:	b29b      	uxth	r3, r3
 800964e:	4313      	orrs	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	061a      	lsls	r2, r3, #24
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009662:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0a1b      	lsrs	r3, r3, #8
 8009668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800966c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	0e1b      	lsrs	r3, r3, #24
 8009672:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	b2da      	uxtb	r2, r3
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	0d1b      	lsrs	r3, r3, #20
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 030f 	and.w	r3, r3, #15
 8009694:	b2da      	uxtb	r2, r3
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	b29b      	uxth	r3, r3
 80096a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	0a9b      	lsrs	r3, r3, #10
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	0a1b      	lsrs	r3, r3, #8
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f003 0303 	and.w	r3, r3, #3
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	091b      	lsrs	r3, r3, #4
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	f003 030f 	and.w	r3, r3, #15
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	f003 030f 	and.w	r3, r3, #15
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	0e1b      	lsrs	r3, r3, #24
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009706:	4618      	mov	r0, r3
 8009708:	f001 f8e8 	bl	800a8dc <SDMMC_CmdBlockLength>
 800970c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800970e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00d      	beq.n	8009730 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a08      	ldr	r2, [pc, #32]	; (800973c <HAL_SD_GetCardStatus+0x178>)
 800971a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009720:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009730:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009734:	4618      	mov	r0, r3
 8009736:	3750      	adds	r7, #80	; 0x50
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	1fe00fff 	.word	0x1fe00fff

08009740 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009798:	b590      	push	{r4, r7, lr}
 800979a:	b08d      	sub	sp, #52	; 0x34
 800979c:	af02      	add	r7, sp, #8
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2203      	movs	r2, #3
 80097ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d02e      	beq.n	8009816 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097be:	d106      	bne.n	80097ce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	635a      	str	r2, [r3, #52]	; 0x34
 80097cc:	e029      	b.n	8009822 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097d4:	d10a      	bne.n	80097ec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fb64 	bl	8009ea4 <SD_WideBus_Enable>
 80097dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097e2:	6a3b      	ldr	r3, [r7, #32]
 80097e4:	431a      	orrs	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	635a      	str	r2, [r3, #52]	; 0x34
 80097ea:	e01a      	b.n	8009822 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fba1 	bl	8009f3a <SD_WideBus_Disable>
 80097f8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	431a      	orrs	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	635a      	str	r2, [r3, #52]	; 0x34
 8009806:	e00c      	b.n	8009822 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	635a      	str	r2, [r3, #52]	; 0x34
 8009814:	e005      	b.n	8009822 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a5f      	ldr	r2, [pc, #380]	; (80099ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8009830:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009838:	e096      	b.n	8009968 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800983a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800983e:	f04f 0100 	mov.w	r1, #0
 8009842:	f7fe f865 	bl	8007910 <HAL_RCCEx_GetPeriphCLKFreq>
 8009846:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 8083 	beq.w	8009956 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689b      	ldr	r3, [r3, #8]
 800985a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	695a      	ldr	r2, [r3, #20]
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4950      	ldr	r1, [pc, #320]	; (80099b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800986e:	fba1 1303 	umull	r1, r3, r1, r3
 8009872:	0e1b      	lsrs	r3, r3, #24
 8009874:	429a      	cmp	r2, r3
 8009876:	d303      	bcc.n	8009880 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	61bb      	str	r3, [r7, #24]
 800987e:	e05a      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009888:	d103      	bne.n	8009892 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	e051      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800989a:	d126      	bne.n	80098ea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10e      	bne.n	80098c2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	4a43      	ldr	r2, [pc, #268]	; (80099b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d906      	bls.n	80098ba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	4a40      	ldr	r2, [pc, #256]	; (80099b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	0e5b      	lsrs	r3, r3, #25
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	e03d      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	61bb      	str	r3, [r7, #24]
 80098c0:	e039      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	005b      	lsls	r3, r3, #1
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ce:	4a39      	ldr	r2, [pc, #228]	; (80099b4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d906      	bls.n	80098e2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4a36      	ldr	r2, [pc, #216]	; (80099b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098d8:	fba2 2303 	umull	r2, r3, r2, r3
 80098dc:	0e5b      	lsrs	r3, r3, #25
 80098de:	61bb      	str	r3, [r7, #24]
 80098e0:	e029      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	e025      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d10e      	bne.n	8009910 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	4a30      	ldr	r2, [pc, #192]	; (80099b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d906      	bls.n	8009908 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4a2c      	ldr	r2, [pc, #176]	; (80099b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	0e1b      	lsrs	r3, r3, #24
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	e016      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	61bb      	str	r3, [r7, #24]
 800990e:	e012      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	695b      	ldr	r3, [r3, #20]
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	fbb2 f3f3 	udiv	r3, r2, r3
 800991c:	4a26      	ldr	r2, [pc, #152]	; (80099b8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d906      	bls.n	8009930 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	4a22      	ldr	r2, [pc, #136]	; (80099b0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	0e1b      	lsrs	r3, r3, #24
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	e002      	b.n	8009936 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681c      	ldr	r4, [r3, #0]
 800993a:	466a      	mov	r2, sp
 800993c:	f107 0314 	add.w	r3, r7, #20
 8009940:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009944:	e882 0003 	stmia.w	r2, {r0, r1}
 8009948:	f107 0308 	add.w	r3, r7, #8
 800994c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800994e:	4620      	mov	r0, r4
 8009950:	f000 fef8 	bl	800a744 <SDMMC_Init>
 8009954:	e008      	b.n	8009968 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800995a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009962:	2301      	movs	r3, #1
 8009964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009970:	4618      	mov	r0, r3
 8009972:	f000 ffb3 	bl	800a8dc <SDMMC_CmdBlockLength>
 8009976:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <HAL_SD_ConfigWideBusOperation+0x214>)
 8009984:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80099a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	372c      	adds	r7, #44	; 0x2c
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd90      	pop	{r4, r7, pc}
 80099ac:	1fe00fff 	.word	0x1fe00fff
 80099b0:	55e63b89 	.word	0x55e63b89
 80099b4:	02faf080 	.word	0x02faf080
 80099b8:	017d7840 	.word	0x017d7840

080099bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80099c8:	f107 030c 	add.w	r3, r7, #12
 80099cc:	4619      	mov	r1, r3
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa40 	bl	8009e54 <SD_SendStatus>
 80099d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	0a5b      	lsrs	r3, r3, #9
 80099ec:	f003 030f 	and.w	r3, r3, #15
 80099f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80099f2:	693b      	ldr	r3, [r7, #16]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3718      	adds	r7, #24
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b090      	sub	sp, #64	; 0x40
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8009a08:	f7f7 fd30 	bl	800146c <HAL_GetTick>
 8009a0c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fede 	bl	800a7d4 <SDMMC_GetPowerState>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d102      	bne.n	8009a24 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009a22:	e0b5      	b.n	8009b90 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d02e      	beq.n	8009a8a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 f8eb 	bl	800ac0c <SDMMC_CmdSendCID>
 8009a36:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <SD_InitCard+0x46>
    {
      return errorstate;
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a40:	e0a6      	b.n	8009b90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 ff08 	bl	800a85e <SDMMC_GetResponse>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2104      	movs	r1, #4
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 feff 	bl	800a85e <SDMMC_GetResponse>
 8009a60:	4602      	mov	r2, r0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2108      	movs	r1, #8
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f000 fef6 	bl	800a85e <SDMMC_GetResponse>
 8009a72:	4602      	mov	r2, r0
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	210c      	movs	r1, #12
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 feed 	bl	800a85e <SDMMC_GetResponse>
 8009a84:	4602      	mov	r2, r0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d01d      	beq.n	8009ace <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8009a92:	e019      	b.n	8009ac8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f107 020a 	add.w	r2, r7, #10
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f001 f8f3 	bl	800ac8a <SDMMC_CmdSetRelAdd>
 8009aa4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	e06f      	b.n	8009b90 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009ab0:	f7f7 fcdc 	bl	800146c <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3287 	movw	r2, #4999	; 0x1387
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d902      	bls.n	8009ac8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8009ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac6:	e063      	b.n	8009b90 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009ac8:	897b      	ldrh	r3, [r7, #10]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0e2      	beq.n	8009a94 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d036      	beq.n	8009b44 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009ad6:	897b      	ldrh	r3, [r7, #10]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ae6:	041b      	lsls	r3, r3, #16
 8009ae8:	4619      	mov	r1, r3
 8009aea:	4610      	mov	r0, r2
 8009aec:	f001 f8ad 	bl	800ac4a <SDMMC_CmdSendCSD>
 8009af0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <SD_InitCard+0x100>
    {
      return errorstate;
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	e049      	b.n	8009b90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2100      	movs	r1, #0
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 feab 	bl	800a85e <SDMMC_GetResponse>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2104      	movs	r1, #4
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fea2 	bl	800a85e <SDMMC_GetResponse>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2108      	movs	r1, #8
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 fe99 	bl	800a85e <SDMMC_GetResponse>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	210c      	movs	r1, #12
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f000 fe90 	bl	800a85e <SDMMC_GetResponse>
 8009b3e:	4602      	mov	r2, r0
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2104      	movs	r1, #4
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fe87 	bl	800a85e <SDMMC_GetResponse>
 8009b50:	4603      	mov	r3, r0
 8009b52:	0d1a      	lsrs	r2, r3, #20
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009b58:	f107 030c 	add.w	r3, r7, #12
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fb8c 	bl	800927c <HAL_SD_GetCardCSD>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d002      	beq.n	8009b70 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b6e:	e00f      	b.n	8009b90 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b78:	041b      	lsls	r3, r3, #16
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4610      	mov	r0, r2
 8009b7e:	f000 ff5c 	bl	800aa3a <SDMMC_CmdSelDesel>
 8009b82:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <SD_InitCard+0x192>
  {
    return errorstate;
 8009b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8c:	e000      	b.n	8009b90 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3740      	adds	r7, #64	; 0x40
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f000 ff65 	bl	800aa80 <SDMMC_CmdGoIdleState>
 8009bb6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	e072      	b.n	8009ca8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 ff78 	bl	800aabc <SDMMC_CmdOperCond>
 8009bcc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bd4:	d10d      	bne.n	8009bf2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f000 ff4d 	bl	800aa80 <SDMMC_CmdGoIdleState>
 8009be6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d004      	beq.n	8009bf8 <SD_PowerON+0x60>
    {
      return errorstate;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	e05a      	b.n	8009ca8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d137      	bne.n	8009c70 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2100      	movs	r1, #0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 ff78 	bl	800aafc <SDMMC_CmdAppCommand>
 8009c0c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d02d      	beq.n	8009c70 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c18:	e046      	b.n	8009ca8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 ff6b 	bl	800aafc <SDMMC_CmdAppCommand>
 8009c26:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d001      	beq.n	8009c32 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	e03a      	b.n	8009ca8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	491e      	ldr	r1, [pc, #120]	; (8009cb0 <SD_PowerON+0x118>)
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 ff82 	bl	800ab42 <SDMMC_CmdAppOperCommand>
 8009c3e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c4a:	e02d      	b.n	8009ca8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fe03 	bl	800a85e <SDMMC_GetResponse>
 8009c58:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	0fdb      	lsrs	r3, r3, #31
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <SD_PowerON+0xce>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e000      	b.n	8009c68 <SD_PowerON+0xd0>
 8009c66:	2300      	movs	r3, #0
 8009c68:	613b      	str	r3, [r7, #16]

    count++;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d802      	bhi.n	8009c80 <SD_PowerON+0xe8>
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0cc      	beq.n	8009c1a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d902      	bls.n	8009c90 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009c8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c8e:	e00b      	b.n	8009ca8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3718      	adds	r7, #24
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	c1100000 	.word	0xc1100000

08009cb4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08c      	sub	sp, #48	; 0x30
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009cbe:	f7f7 fbd5 	bl	800146c <HAL_GetTick>
 8009cc2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2100      	movs	r1, #0
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fdc5 	bl	800a85e <SDMMC_GetResponse>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cde:	d102      	bne.n	8009ce6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ce4:	e0b0      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2140      	movs	r1, #64	; 0x40
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 fdf5 	bl	800a8dc <SDMMC_CmdBlockLength>
 8009cf2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	e0a0      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0e:	041b      	lsls	r3, r3, #16
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f000 fef2 	bl	800aafc <SDMMC_CmdAppCommand>
 8009d18:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d005      	beq.n	8009d2c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	e08d      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d30:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009d36:	2360      	movs	r3, #96	; 0x60
 8009d38:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009d42:	2301      	movs	r3, #1
 8009d44:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f107 0208 	add.w	r2, r7, #8
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f000 fd97 	bl	800a884 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 ffda 	bl	800ad14 <SDMMC_CmdStatusRegister>
 8009d60:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d02b      	beq.n	8009dc0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	e069      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d013      	beq.n	8009daa <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009d82:	2300      	movs	r3, #0
 8009d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d86:	e00d      	b.n	8009da4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 fd03 	bl	800a798 <SDMMC_ReadFIFO>
 8009d92:	4602      	mov	r2, r0
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	601a      	str	r2, [r3, #0]
        pData++;
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	3304      	adds	r3, #4
 8009d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	3301      	adds	r3, #1
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	2b07      	cmp	r3, #7
 8009da8:	d9ee      	bls.n	8009d88 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009daa:	f7f7 fb5f 	bl	800146c <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d102      	bne.n	8009dc0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009dba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dbe:	e043      	b.n	8009e48 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0d2      	beq.n	8009d74 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ddc:	2308      	movs	r3, #8
 8009dde:	e033      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009dee:	2302      	movs	r3, #2
 8009df0:	e02a      	b.n	8009e48 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	f003 0320 	and.w	r3, r3, #32
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d017      	beq.n	8009e30 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009e00:	2320      	movs	r3, #32
 8009e02:	e021      	b.n	8009e48 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fcc5 	bl	800a798 <SDMMC_ReadFIFO>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e12:	601a      	str	r2, [r3, #0]
    pData++;
 8009e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e16:	3304      	adds	r3, #4
 8009e18:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e1a:	f7f7 fb27 	bl	800146c <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d102      	bne.n	8009e30 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e2e:	e00b      	b.n	8009e48 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e2      	bne.n	8009e04 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a03      	ldr	r2, [pc, #12]	; (8009e50 <SD_SendSDStatus+0x19c>)
 8009e44:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3730      	adds	r7, #48	; 0x30
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	18000f3a 	.word	0x18000f3a

08009e54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d102      	bne.n	8009e6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e68:	e018      	b.n	8009e9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e72:	041b      	lsls	r3, r3, #16
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f000 ff29 	bl	800acce <SDMMC_CmdSendStatus>
 8009e7c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	e009      	b.n	8009e9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fce5 	bl	800a85e <SDMMC_GetResponse>
 8009e94:	4602      	mov	r2, r0
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 fccf 	bl	800a85e <SDMMC_GetResponse>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eca:	d102      	bne.n	8009ed2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ecc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ed0:	e02f      	b.n	8009f32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ed2:	f107 030c 	add.w	r3, r7, #12
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f879 	bl	8009fd0 <SD_FindSCR>
 8009ede:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	e023      	b.n	8009f32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01c      	beq.n	8009f2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efc:	041b      	lsls	r3, r3, #16
 8009efe:	4619      	mov	r1, r3
 8009f00:	4610      	mov	r0, r2
 8009f02:	f000 fdfb 	bl	800aafc <SDMMC_CmdAppCommand>
 8009f06:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	e00f      	b.n	8009f32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2102      	movs	r1, #2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 fe32 	bl	800ab82 <SDMMC_CmdBusWidth>
 8009f1e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	e003      	b.n	8009f32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	e001      	b.n	8009f32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009f42:	2300      	movs	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	2300      	movs	r3, #0
 8009f48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2100      	movs	r1, #0
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fc84 	bl	800a85e <SDMMC_GetResponse>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f60:	d102      	bne.n	8009f68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f66:	e02f      	b.n	8009fc8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f68:	f107 030c 	add.w	r3, r7, #12
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f82e 	bl	8009fd0 <SD_FindSCR>
 8009f74:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	e023      	b.n	8009fc8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d01c      	beq.n	8009fc4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f92:	041b      	lsls	r3, r3, #16
 8009f94:	4619      	mov	r1, r3
 8009f96:	4610      	mov	r0, r2
 8009f98:	f000 fdb0 	bl	800aafc <SDMMC_CmdAppCommand>
 8009f9c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	e00f      	b.n	8009fc8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2100      	movs	r1, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fde7 	bl	800ab82 <SDMMC_CmdBusWidth>
 8009fb4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	e003      	b.n	8009fc8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	e001      	b.n	8009fc8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009fda:	f7f7 fa47 	bl	800146c <HAL_GetTick>
 8009fde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60bb      	str	r3, [r7, #8]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2108      	movs	r1, #8
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fc70 	bl	800a8dc <SDMMC_CmdBlockLength>
 8009ffc:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a006:	e0ad      	b.n	800a164 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a010:	041b      	lsls	r3, r3, #16
 800a012:	4619      	mov	r1, r3
 800a014:	4610      	mov	r0, r2
 800a016:	f000 fd71 	bl	800aafc <SDMMC_CmdAppCommand>
 800a01a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	e09e      	b.n	800a164 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a026:	f04f 33ff 	mov.w	r3, #4294967295
 800a02a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a02c:	2308      	movs	r3, #8
 800a02e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a030:	2330      	movs	r3, #48	; 0x30
 800a032:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a034:	2302      	movs	r3, #2
 800a036:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a038:	2300      	movs	r3, #0
 800a03a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a03c:	2301      	movs	r3, #1
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f107 0210 	add.w	r2, r7, #16
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fc1a 	bl	800a884 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f000 fdb7 	bl	800abc8 <SDMMC_CmdSendSCR>
 800a05a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800a05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d027      	beq.n	800a0b2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	e07e      	b.n	800a164 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a06c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d113      	bne.n	800a09c <SD_FindSCR+0xcc>
 800a074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a076:	2b00      	cmp	r3, #0
 800a078:	d110      	bne.n	800a09c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fb8a 	bl	800a798 <SDMMC_ReadFIFO>
 800a084:	4603      	mov	r3, r0
 800a086:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fb83 	bl	800a798 <SDMMC_ReadFIFO>
 800a092:	4603      	mov	r3, r0
 800a094:	60fb      	str	r3, [r7, #12]
      index++;
 800a096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a098:	3301      	adds	r3, #1
 800a09a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a09c:	f7f7 f9e6 	bl	800146c <HAL_GetTick>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0aa:	d102      	bne.n	800a0b2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a0ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b0:	e058      	b.n	800a164 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b8:	f240 532a 	movw	r3, #1322	; 0x52a
 800a0bc:	4013      	ands	r3, r2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0d1      	beq.n	800a066 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c8:	f003 0308 	and.w	r3, r3, #8
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a0d8:	2308      	movs	r3, #8
 800a0da:	e043      	b.n	800a164 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d005      	beq.n	800a0f6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a0f2:	2302      	movs	r3, #2
 800a0f4:	e036      	b.n	800a164 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d005      	beq.n	800a110 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2220      	movs	r2, #32
 800a10a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a10c:	2320      	movs	r3, #32
 800a10e:	e029      	b.n	800a164 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a15      	ldr	r2, [pc, #84]	; (800a16c <SD_FindSCR+0x19c>)
 800a116:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	061a      	lsls	r2, r3, #24
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	021b      	lsls	r3, r3, #8
 800a120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a124:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	0a1b      	lsrs	r3, r3, #8
 800a12a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a12e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	0e1b      	lsrs	r3, r3, #24
 800a134:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800a136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a138:	601a      	str	r2, [r3, #0]
    scr++;
 800a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13c:	3304      	adds	r3, #4
 800a13e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	061a      	lsls	r2, r3, #24
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	021b      	lsls	r3, r3, #8
 800a148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a14c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	0a1b      	lsrs	r3, r3, #8
 800a152:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a156:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	0e1b      	lsrs	r3, r3, #24
 800a15c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3738      	adds	r7, #56	; 0x38
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	18000f3a 	.word	0x18000f3a

0800a170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e049      	b.n	800a216 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f7f6 fd70 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	f000 fa04 	bl	800a5bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2201      	movs	r2, #1
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b01      	cmp	r3, #1
 800a232:	d001      	beq.n	800a238 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e05e      	b.n	800a2f6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f042 0201 	orr.w	r2, r2, #1
 800a24e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a2b      	ldr	r2, [pc, #172]	; (800a304 <HAL_TIM_Base_Start_IT+0xe4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d02c      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a262:	d027      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a27      	ldr	r2, [pc, #156]	; (800a308 <HAL_TIM_Base_Start_IT+0xe8>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d022      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a26      	ldr	r2, [pc, #152]	; (800a30c <HAL_TIM_Base_Start_IT+0xec>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d01d      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a24      	ldr	r2, [pc, #144]	; (800a310 <HAL_TIM_Base_Start_IT+0xf0>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d018      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a23      	ldr	r2, [pc, #140]	; (800a314 <HAL_TIM_Base_Start_IT+0xf4>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d013      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a21      	ldr	r2, [pc, #132]	; (800a318 <HAL_TIM_Base_Start_IT+0xf8>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d00e      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a20      	ldr	r2, [pc, #128]	; (800a31c <HAL_TIM_Base_Start_IT+0xfc>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d009      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a1e      	ldr	r2, [pc, #120]	; (800a320 <HAL_TIM_Base_Start_IT+0x100>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d004      	beq.n	800a2b4 <HAL_TIM_Base_Start_IT+0x94>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <HAL_TIM_Base_Start_IT+0x104>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d115      	bne.n	800a2e0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	689a      	ldr	r2, [r3, #8]
 800a2ba:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <HAL_TIM_Base_Start_IT+0x108>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b06      	cmp	r3, #6
 800a2c4:	d015      	beq.n	800a2f2 <HAL_TIM_Base_Start_IT+0xd2>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2cc:	d011      	beq.n	800a2f2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f042 0201 	orr.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2de:	e008      	b.n	800a2f2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f042 0201 	orr.w	r2, r2, #1
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	e000      	b.n	800a2f4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40010000 	.word	0x40010000
 800a308:	40000400 	.word	0x40000400
 800a30c:	40000800 	.word	0x40000800
 800a310:	40000c00 	.word	0x40000c00
 800a314:	40010400 	.word	0x40010400
 800a318:	40001800 	.word	0x40001800
 800a31c:	40014000 	.word	0x40014000
 800a320:	4000e000 	.word	0x4000e000
 800a324:	4000e400 	.word	0x4000e400
 800a328:	00010007 	.word	0x00010007

0800a32c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f003 0302 	and.w	r3, r3, #2
 800a33e:	2b02      	cmp	r3, #2
 800a340:	d122      	bne.n	800a388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d11b      	bne.n	800a388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f06f 0202 	mvn.w	r2, #2
 800a358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f905 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a374:	e005      	b.n	800a382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f8f7 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f908 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	f003 0304 	and.w	r3, r3, #4
 800a392:	2b04      	cmp	r3, #4
 800a394:	d122      	bne.n	800a3dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f003 0304 	and.w	r3, r3, #4
 800a3a0:	2b04      	cmp	r3, #4
 800a3a2:	d11b      	bne.n	800a3dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f06f 0204 	mvn.w	r2, #4
 800a3ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2202      	movs	r2, #2
 800a3b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f8db 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a3c8:	e005      	b.n	800a3d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f8cd 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f8de 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 0308 	and.w	r3, r3, #8
 800a3e6:	2b08      	cmp	r3, #8
 800a3e8:	d122      	bne.n	800a430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
 800a3f4:	2b08      	cmp	r3, #8
 800a3f6:	d11b      	bne.n	800a430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f06f 0208 	mvn.w	r2, #8
 800a400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2204      	movs	r2, #4
 800a406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	69db      	ldr	r3, [r3, #28]
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f8b1 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a41c:	e005      	b.n	800a42a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f8a3 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f8b4 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	f003 0310 	and.w	r3, r3, #16
 800a43a:	2b10      	cmp	r3, #16
 800a43c:	d122      	bne.n	800a484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d11b      	bne.n	800a484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f06f 0210 	mvn.w	r2, #16
 800a454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2208      	movs	r2, #8
 800a45a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f887 	bl	800a57e <HAL_TIM_IC_CaptureCallback>
 800a470:	e005      	b.n	800a47e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f879 	bl	800a56a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 f88a 	bl	800a592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2200      	movs	r2, #0
 800a482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d10e      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0301 	and.w	r3, r3, #1
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d107      	bne.n	800a4b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0201 	mvn.w	r2, #1
 800a4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7f6 fa5a 	bl	8000964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ba:	2b80      	cmp	r3, #128	; 0x80
 800a4bc:	d10e      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c8:	2b80      	cmp	r3, #128	; 0x80
 800a4ca:	d107      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f920 	bl	800a71c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ea:	d10e      	bne.n	800a50a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4f6:	2b80      	cmp	r3, #128	; 0x80
 800a4f8:	d107      	bne.n	800a50a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f913 	bl	800a730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a514:	2b40      	cmp	r3, #64	; 0x40
 800a516:	d10e      	bne.n	800a536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	d107      	bne.n	800a536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a52e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f838 	bl	800a5a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f003 0320 	and.w	r3, r3, #32
 800a540:	2b20      	cmp	r3, #32
 800a542:	d10e      	bne.n	800a562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b20      	cmp	r3, #32
 800a550:	d107      	bne.n	800a562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f06f 0220 	mvn.w	r2, #32
 800a55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8d3 	bl	800a708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a56a:	b480      	push	{r7}
 800a56c:	b083      	sub	sp, #12
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a572:	bf00      	nop
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a57e:	b480      	push	{r7}
 800a580:	b083      	sub	sp, #12
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a586:	bf00      	nop
 800a588:	370c      	adds	r7, #12
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a592:	b480      	push	{r7}
 800a594:	b083      	sub	sp, #12
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b083      	sub	sp, #12
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5ae:	bf00      	nop
 800a5b0:	370c      	adds	r7, #12
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b8:	4770      	bx	lr
	...

0800a5bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a44      	ldr	r2, [pc, #272]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d013      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5da:	d00f      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	4a41      	ldr	r2, [pc, #260]	; (800a6e4 <TIM_Base_SetConfig+0x128>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00b      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a40      	ldr	r2, [pc, #256]	; (800a6e8 <TIM_Base_SetConfig+0x12c>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d007      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a3f      	ldr	r2, [pc, #252]	; (800a6ec <TIM_Base_SetConfig+0x130>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_Base_SetConfig+0x40>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a3e      	ldr	r2, [pc, #248]	; (800a6f0 <TIM_Base_SetConfig+0x134>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d108      	bne.n	800a60e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a33      	ldr	r2, [pc, #204]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d027      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a61c:	d023      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a30      	ldr	r2, [pc, #192]	; (800a6e4 <TIM_Base_SetConfig+0x128>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d01f      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	4a2f      	ldr	r2, [pc, #188]	; (800a6e8 <TIM_Base_SetConfig+0x12c>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d01b      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a2e      	ldr	r2, [pc, #184]	; (800a6ec <TIM_Base_SetConfig+0x130>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d017      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a2d      	ldr	r2, [pc, #180]	; (800a6f0 <TIM_Base_SetConfig+0x134>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d013      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a2c      	ldr	r2, [pc, #176]	; (800a6f4 <TIM_Base_SetConfig+0x138>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00f      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a2b      	ldr	r2, [pc, #172]	; (800a6f8 <TIM_Base_SetConfig+0x13c>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00b      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a2a      	ldr	r2, [pc, #168]	; (800a6fc <TIM_Base_SetConfig+0x140>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d007      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a29      	ldr	r2, [pc, #164]	; (800a700 <TIM_Base_SetConfig+0x144>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d003      	beq.n	800a666 <TIM_Base_SetConfig+0xaa>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a28      	ldr	r2, [pc, #160]	; (800a704 <TIM_Base_SetConfig+0x148>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d108      	bne.n	800a678 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	68db      	ldr	r3, [r3, #12]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	689a      	ldr	r2, [r3, #8]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a10      	ldr	r2, [pc, #64]	; (800a6e0 <TIM_Base_SetConfig+0x124>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d00f      	beq.n	800a6c4 <TIM_Base_SetConfig+0x108>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a12      	ldr	r2, [pc, #72]	; (800a6f0 <TIM_Base_SetConfig+0x134>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00b      	beq.n	800a6c4 <TIM_Base_SetConfig+0x108>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a11      	ldr	r2, [pc, #68]	; (800a6f4 <TIM_Base_SetConfig+0x138>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d007      	beq.n	800a6c4 <TIM_Base_SetConfig+0x108>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a10      	ldr	r2, [pc, #64]	; (800a6f8 <TIM_Base_SetConfig+0x13c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d003      	beq.n	800a6c4 <TIM_Base_SetConfig+0x108>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a0f      	ldr	r2, [pc, #60]	; (800a6fc <TIM_Base_SetConfig+0x140>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d103      	bne.n	800a6cc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	615a      	str	r2, [r3, #20]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	40010000 	.word	0x40010000
 800a6e4:	40000400 	.word	0x40000400
 800a6e8:	40000800 	.word	0x40000800
 800a6ec:	40000c00 	.word	0x40000c00
 800a6f0:	40010400 	.word	0x40010400
 800a6f4:	40014000 	.word	0x40014000
 800a6f8:	40014400 	.word	0x40014400
 800a6fc:	40014800 	.word	0x40014800
 800a700:	4000e000 	.word	0x4000e000
 800a704:	4000e400 	.word	0x4000e400

0800a708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a744:	b084      	sub	sp, #16
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	f107 001c 	add.w	r0, r7, #28
 800a752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a75a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a75c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a75e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a762:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a764:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a766:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a76a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a76c:	68fa      	ldr	r2, [r7, #12]
 800a76e:	4313      	orrs	r3, r2
 800a770:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	4b07      	ldr	r3, [pc, #28]	; (800a794 <SDMMC_Init+0x50>)
 800a778:	4013      	ands	r3, r2
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	b004      	add	sp, #16
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	ffc02c00 	.word	0xffc02c00

0800a798 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b083      	sub	sp, #12
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f043 0203 	orr.w	r2, r3, #3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0303 	and.w	r3, r3, #3
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a80e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800a814:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800a81a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	4313      	orrs	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68da      	ldr	r2, [r3, #12]
 800a826:	4b06      	ldr	r3, [pc, #24]	; (800a840 <SDMMC_SendCommand+0x50>)
 800a828:	4013      	ands	r3, r2
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	fffee0c0 	.word	0xfffee0c0

0800a844 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	b2db      	uxtb	r3, r3
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a85e:	b480      	push	{r7}
 800a860:	b085      	sub	sp, #20
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	3314      	adds	r3, #20
 800a86c:	461a      	mov	r2, r3
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	4413      	add	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	685a      	ldr	r2, [r3, #4]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a8aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800a8b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800a8b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	431a      	orrs	r2, r3
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0

}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3714      	adds	r7, #20
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b088      	sub	sp, #32
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a8ea:	2310      	movs	r3, #16
 800a8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8fe:	f107 0308 	add.w	r3, r7, #8
 800a902:	4619      	mov	r1, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff ff73 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a90e:	2110      	movs	r1, #16
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fa21 	bl	800ad58 <SDMMC_GetCmdResp1>
 800a916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a918:	69fb      	ldr	r3, [r7, #28]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3720      	adds	r7, #32
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b088      	sub	sp, #32
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a930:	2311      	movs	r3, #17
 800a932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a934:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a93e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a944:	f107 0308 	add.w	r3, r7, #8
 800a948:	4619      	mov	r1, r3
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7ff ff50 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a950:	f241 3288 	movw	r2, #5000	; 0x1388
 800a954:	2111      	movs	r1, #17
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f9fe 	bl	800ad58 <SDMMC_GetCmdResp1>
 800a95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95e:	69fb      	ldr	r3, [r7, #28]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b088      	sub	sp, #32
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a976:	2312      	movs	r3, #18
 800a978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a97a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a97e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a980:	2300      	movs	r3, #0
 800a982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a98a:	f107 0308 	add.w	r3, r7, #8
 800a98e:	4619      	mov	r1, r3
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff ff2d 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a996:	f241 3288 	movw	r2, #5000	; 0x1388
 800a99a:	2112      	movs	r1, #18
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f9db 	bl	800ad58 <SDMMC_GetCmdResp1>
 800a9a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a4:	69fb      	ldr	r3, [r7, #28]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3720      	adds	r7, #32
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b088      	sub	sp, #32
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a9bc:	2318      	movs	r3, #24
 800a9be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9d0:	f107 0308 	add.w	r3, r7, #8
 800a9d4:	4619      	mov	r1, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f7ff ff0a 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a9dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9e0:	2118      	movs	r1, #24
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f9b8 	bl	800ad58 <SDMMC_GetCmdResp1>
 800a9e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9ea:	69fb      	ldr	r3, [r7, #28]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3720      	adds	r7, #32
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aa02:	2319      	movs	r3, #25
 800aa04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa16:	f107 0308 	add.w	r3, r7, #8
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff fee7 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aa22:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa26:	2119      	movs	r1, #25
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f995 	bl	800ad58 <SDMMC_GetCmdResp1>
 800aa2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa30:	69fb      	ldr	r3, [r7, #28]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3720      	adds	r7, #32
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b088      	sub	sp, #32
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aa48:	2307      	movs	r3, #7
 800aa4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa52:	2300      	movs	r3, #0
 800aa54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa5c:	f107 0308 	add.w	r3, r7, #8
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f7ff fec4 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aa68:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa6c:	2107      	movs	r1, #7
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f972 	bl	800ad58 <SDMMC_GetCmdResp1>
 800aa74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa76:	69fb      	ldr	r3, [r7, #28]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3720      	adds	r7, #32
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b088      	sub	sp, #32
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aa90:	2300      	movs	r3, #0
 800aa92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa94:	2300      	movs	r3, #0
 800aa96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa9e:	f107 0308 	add.w	r3, r7, #8
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7ff fea3 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fb96 	bl	800b1dc <SDMMC_GetCmdError>
 800aab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab2:	69fb      	ldr	r3, [r7, #28]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3720      	adds	r7, #32
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b088      	sub	sp, #32
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aac4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aaca:	2308      	movs	r3, #8
 800aacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aace:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad4:	2300      	movs	r3, #0
 800aad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aadc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aade:	f107 0308 	add.w	r3, r7, #8
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fe83 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fb28 	bl	800b140 <SDMMC_GetCmdResp7>
 800aaf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3720      	adds	r7, #32
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ab0a:	2337      	movs	r3, #55	; 0x37
 800ab0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab14:	2300      	movs	r3, #0
 800ab16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab1e:	f107 0308 	add.w	r3, r7, #8
 800ab22:	4619      	mov	r1, r3
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff fe63 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ab2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab2e:	2137      	movs	r1, #55	; 0x37
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f911 	bl	800ad58 <SDMMC_GetCmdResp1>
 800ab36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab38:	69fb      	ldr	r3, [r7, #28]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b088      	sub	sp, #32
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ab50:	2329      	movs	r3, #41	; 0x29
 800ab52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff fe40 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 fa2d 	bl	800afd0 <SDMMC_GetCmdResp3>
 800ab76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab78:	69fb      	ldr	r3, [r7, #28]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b088      	sub	sp, #32
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ab90:	2306      	movs	r3, #6
 800ab92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aba2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aba4:	f107 0308 	add.w	r3, r7, #8
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fe20 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800abb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb4:	2106      	movs	r1, #6
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f8ce 	bl	800ad58 <SDMMC_GetCmdResp1>
 800abbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abbe:	69fb      	ldr	r3, [r7, #28]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3720      	adds	r7, #32
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800abd4:	2333      	movs	r3, #51	; 0x33
 800abd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abde:	2300      	movs	r3, #0
 800abe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abe6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abe8:	f107 0308 	add.w	r3, r7, #8
 800abec:	4619      	mov	r1, r3
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7ff fdfe 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800abf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf8:	2133      	movs	r1, #51	; 0x33
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f8ac 	bl	800ad58 <SDMMC_GetCmdResp1>
 800ac00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac02:	69fb      	ldr	r3, [r7, #28]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3720      	adds	r7, #32
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b088      	sub	sp, #32
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac18:	2302      	movs	r3, #2
 800ac1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac2c:	f107 0308 	add.w	r3, r7, #8
 800ac30:	4619      	mov	r1, r3
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f7ff fddc 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f97f 	bl	800af3c <SDMMC_GetCmdResp2>
 800ac3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac40:	69fb      	ldr	r3, [r7, #28]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3720      	adds	r7, #32
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ac58:	2309      	movs	r3, #9
 800ac5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac6c:	f107 0308 	add.w	r3, r7, #8
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f7ff fdbc 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f95f 	bl	800af3c <SDMMC_GetCmdResp2>
 800ac7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac80:	69fb      	ldr	r3, [r7, #28]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3720      	adds	r7, #32
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b088      	sub	sp, #32
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fd9c 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	2103      	movs	r1, #3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f9c7 	bl	800b050 <SDMMC_GetCmdResp6>
 800acc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc4:	69fb      	ldr	r3, [r7, #28]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3720      	adds	r7, #32
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b088      	sub	sp, #32
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800acdc:	230d      	movs	r3, #13
 800acde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ace0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf0:	f107 0308 	add.w	r3, r7, #8
 800acf4:	4619      	mov	r1, r3
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f7ff fd7a 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800acfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad00:	210d      	movs	r1, #13
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f828 	bl	800ad58 <SDMMC_GetCmdResp1>
 800ad08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0a:	69fb      	ldr	r3, [r7, #28]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3720      	adds	r7, #32
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ad20:	230d      	movs	r3, #13
 800ad22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad34:	f107 0308 	add.w	r3, r7, #8
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7ff fd58 	bl	800a7f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ad40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad44:	210d      	movs	r1, #13
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f806 	bl	800ad58 <SDMMC_GetCmdResp1>
 800ad4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3720      	adds	r7, #32
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b088      	sub	sp, #32
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	460b      	mov	r3, r1
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ad66:	4b70      	ldr	r3, [pc, #448]	; (800af28 <SDMMC_GetCmdResp1+0x1d0>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a70      	ldr	r2, [pc, #448]	; (800af2c <SDMMC_GetCmdResp1+0x1d4>)
 800ad6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad70:	0a5a      	lsrs	r2, r3, #9
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	1e5a      	subs	r2, r3, #1
 800ad7e:	61fa      	str	r2, [r7, #28]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad88:	e0c9      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ad90:	69ba      	ldr	r2, [r7, #24]
 800ad92:	4b67      	ldr	r3, [pc, #412]	; (800af30 <SDMMC_GetCmdResp1+0x1d8>)
 800ad94:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0ef      	beq.n	800ad7a <SDMMC_GetCmdResp1+0x22>
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d1ea      	bne.n	800ad7a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	f003 0304 	and.w	r3, r3, #4
 800adac:	2b00      	cmp	r3, #0
 800adae:	d004      	beq.n	800adba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2204      	movs	r2, #4
 800adb4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800adb6:	2304      	movs	r3, #4
 800adb8:	e0b1      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adbe:	f003 0301 	and.w	r3, r3, #1
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800adcc:	2301      	movs	r3, #1
 800adce:	e0a6      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a58      	ldr	r2, [pc, #352]	; (800af34 <SDMMC_GetCmdResp1+0x1dc>)
 800add4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f7ff fd34 	bl	800a844 <SDMMC_GetCommandResponse>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d001      	beq.n	800adea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e099      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800adea:	2100      	movs	r1, #0
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f7ff fd36 	bl	800a85e <SDMMC_GetResponse>
 800adf2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4b50      	ldr	r3, [pc, #320]	; (800af38 <SDMMC_GetCmdResp1+0x1e0>)
 800adf8:	4013      	ands	r3, r2
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800adfe:	2300      	movs	r3, #0
 800ae00:	e08d      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	da02      	bge.n	800ae0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ae0c:	e087      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d001      	beq.n	800ae1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	e080      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d001      	beq.n	800ae2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae26:	2380      	movs	r3, #128	; 0x80
 800ae28:	e079      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae38:	e071      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae44:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae48:	e069      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ae54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae58:	e061      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae68:	e059      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d002      	beq.n	800ae7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae78:	e051      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d002      	beq.n	800ae8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ae88:	e049      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae98:	e041      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d002      	beq.n	800aeaa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aea8:	e039      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d002      	beq.n	800aeba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aeb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aeb8:	e031      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aec4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aec8:	e029      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aed4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aed8:	e021      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aee8:	e019      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aef4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aef8:	e011      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af00:	2b00      	cmp	r3, #0
 800af02:	d002      	beq.n	800af0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800af04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af08:	e009      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f003 0308 	and.w	r3, r3, #8
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800af14:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800af18:	e001      	b.n	800af1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800af1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3720      	adds	r7, #32
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	24000000 	.word	0x24000000
 800af2c:	10624dd3 	.word	0x10624dd3
 800af30:	00200045 	.word	0x00200045
 800af34:	002000c5 	.word	0x002000c5
 800af38:	fdffe008 	.word	0xfdffe008

0800af3c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800af3c:	b480      	push	{r7}
 800af3e:	b085      	sub	sp, #20
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800af44:	4b1f      	ldr	r3, [pc, #124]	; (800afc4 <SDMMC_GetCmdResp2+0x88>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a1f      	ldr	r2, [pc, #124]	; (800afc8 <SDMMC_GetCmdResp2+0x8c>)
 800af4a:	fba2 2303 	umull	r2, r3, r2, r3
 800af4e:	0a5b      	lsrs	r3, r3, #9
 800af50:	f241 3288 	movw	r2, #5000	; 0x1388
 800af54:	fb02 f303 	mul.w	r3, r2, r3
 800af58:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	1e5a      	subs	r2, r3, #1
 800af5e:	60fa      	str	r2, [r7, #12]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d102      	bne.n	800af6a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af68:	e026      	b.n	800afb8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af6e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800af76:	2b00      	cmp	r3, #0
 800af78:	d0ef      	beq.n	800af5a <SDMMC_GetCmdResp2+0x1e>
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1ea      	bne.n	800af5a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2204      	movs	r2, #4
 800af94:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af96:	2304      	movs	r3, #4
 800af98:	e00e      	b.n	800afb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2201      	movs	r2, #1
 800afaa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afac:	2301      	movs	r3, #1
 800afae:	e003      	b.n	800afb8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a06      	ldr	r2, [pc, #24]	; (800afcc <SDMMC_GetCmdResp2+0x90>)
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3714      	adds	r7, #20
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	24000000 	.word	0x24000000
 800afc8:	10624dd3 	.word	0x10624dd3
 800afcc:	002000c5 	.word	0x002000c5

0800afd0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afd8:	4b1a      	ldr	r3, [pc, #104]	; (800b044 <SDMMC_GetCmdResp3+0x74>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a1a      	ldr	r2, [pc, #104]	; (800b048 <SDMMC_GetCmdResp3+0x78>)
 800afde:	fba2 2303 	umull	r2, r3, r2, r3
 800afe2:	0a5b      	lsrs	r3, r3, #9
 800afe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
 800afec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	1e5a      	subs	r2, r3, #1
 800aff2:	60fa      	str	r2, [r7, #12]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800affc:	e01b      	b.n	800b036 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0ef      	beq.n	800afee <SDMMC_GetCmdResp3+0x1e>
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1ea      	bne.n	800afee <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2204      	movs	r2, #4
 800b028:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b02a:	2304      	movs	r3, #4
 800b02c:	e003      	b.n	800b036 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a06      	ldr	r2, [pc, #24]	; (800b04c <SDMMC_GetCmdResp3+0x7c>)
 800b032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3714      	adds	r7, #20
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	24000000 	.word	0x24000000
 800b048:	10624dd3 	.word	0x10624dd3
 800b04c:	002000c5 	.word	0x002000c5

0800b050 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	460b      	mov	r3, r1
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b05e:	4b35      	ldr	r3, [pc, #212]	; (800b134 <SDMMC_GetCmdResp6+0xe4>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a35      	ldr	r2, [pc, #212]	; (800b138 <SDMMC_GetCmdResp6+0xe8>)
 800b064:	fba2 2303 	umull	r2, r3, r2, r3
 800b068:	0a5b      	lsrs	r3, r3, #9
 800b06a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06e:	fb02 f303 	mul.w	r3, r2, r3
 800b072:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	1e5a      	subs	r2, r3, #1
 800b078:	61fa      	str	r2, [r7, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d102      	bne.n	800b084 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b07e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b082:	e052      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b088:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b090:	2b00      	cmp	r3, #0
 800b092:	d0ef      	beq.n	800b074 <SDMMC_GetCmdResp6+0x24>
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1ea      	bne.n	800b074 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	f003 0304 	and.w	r3, r3, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d004      	beq.n	800b0b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0b0:	2304      	movs	r3, #4
 800b0b2:	e03a      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e02f      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f7ff fbba 	bl	800a844 <SDMMC_GetCommandResponse>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d001      	beq.n	800b0de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e025      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	4a16      	ldr	r2, [pc, #88]	; (800b13c <SDMMC_GetCmdResp6+0xec>)
 800b0e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fbb9 	bl	800a85e <SDMMC_GetResponse>
 800b0ec:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d106      	bne.n	800b106 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	0c1b      	lsrs	r3, r3, #16
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b102:	2300      	movs	r3, #0
 800b104:	e011      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b114:	e009      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b124:	e001      	b.n	800b12a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3720      	adds	r7, #32
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	24000000 	.word	0x24000000
 800b138:	10624dd3 	.word	0x10624dd3
 800b13c:	002000c5 	.word	0x002000c5

0800b140 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b148:	4b22      	ldr	r3, [pc, #136]	; (800b1d4 <SDMMC_GetCmdResp7+0x94>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a22      	ldr	r2, [pc, #136]	; (800b1d8 <SDMMC_GetCmdResp7+0x98>)
 800b14e:	fba2 2303 	umull	r2, r3, r2, r3
 800b152:	0a5b      	lsrs	r3, r3, #9
 800b154:	f241 3288 	movw	r2, #5000	; 0x1388
 800b158:	fb02 f303 	mul.w	r3, r2, r3
 800b15c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	1e5a      	subs	r2, r3, #1
 800b162:	60fa      	str	r2, [r7, #12]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d102      	bne.n	800b16e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b168:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b16c:	e02c      	b.n	800b1c8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b172:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d0ef      	beq.n	800b15e <SDMMC_GetCmdResp7+0x1e>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1ea      	bne.n	800b15e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18c:	f003 0304 	and.w	r3, r3, #4
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2204      	movs	r2, #4
 800b198:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b19a:	2304      	movs	r3, #4
 800b19c:	e014      	b.n	800b1c8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d004      	beq.n	800b1b4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e009      	b.n	800b1c8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2240      	movs	r2, #64	; 0x40
 800b1c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b1c6:	2300      	movs	r3, #0

}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	24000000 	.word	0x24000000
 800b1d8:	10624dd3 	.word	0x10624dd3

0800b1dc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1e4:	4b11      	ldr	r3, [pc, #68]	; (800b22c <SDMMC_GetCmdError+0x50>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a11      	ldr	r2, [pc, #68]	; (800b230 <SDMMC_GetCmdError+0x54>)
 800b1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ee:	0a5b      	lsrs	r3, r3, #9
 800b1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	1e5a      	subs	r2, r3, #1
 800b1fe:	60fa      	str	r2, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b208:	e009      	b.n	800b21e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0f1      	beq.n	800b1fa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a06      	ldr	r2, [pc, #24]	; (800b234 <SDMMC_GetCmdError+0x58>)
 800b21a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3714      	adds	r7, #20
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	24000000 	.word	0x24000000
 800b230:	10624dd3 	.word	0x10624dd3
 800b234:	002000c5 	.word	0x002000c5

0800b238 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b238:	b084      	sub	sp, #16
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b084      	sub	sp, #16
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	f107 001c 	add.w	r0, r7, #28
 800b246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d120      	bne.n	800b292 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b254:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68da      	ldr	r2, [r3, #12]
 800b260:	4b2a      	ldr	r3, [pc, #168]	; (800b30c <USB_CoreInit+0xd4>)
 800b262:	4013      	ands	r3, r2
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	68db      	ldr	r3, [r3, #12]
 800b26c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f001 faf8 	bl	800c87c <USB_CoreReset>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
 800b290:	e01a      	b.n	800b2c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 faec 	bl	800c87c <USB_CoreReset>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	639a      	str	r2, [r3, #56]	; 0x38
 800b2ba:	e005      	b.n	800b2c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d116      	bne.n	800b2fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2dc:	4b0c      	ldr	r3, [pc, #48]	; (800b310 <USB_CoreInit+0xd8>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	f043 0206 	orr.w	r2, r3, #6
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	f043 0220 	orr.w	r2, r3, #32
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b308:	b004      	add	sp, #16
 800b30a:	4770      	bx	lr
 800b30c:	ffbdffbf 	.word	0xffbdffbf
 800b310:	03ee0000 	.word	0x03ee0000

0800b314 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b314:	b480      	push	{r7}
 800b316:	b087      	sub	sp, #28
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	4613      	mov	r3, r2
 800b320:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b322:	79fb      	ldrb	r3, [r7, #7]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d165      	bne.n	800b3f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	4a41      	ldr	r2, [pc, #260]	; (800b430 <USB_SetTurnaroundTime+0x11c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d906      	bls.n	800b33e <USB_SetTurnaroundTime+0x2a>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4a40      	ldr	r2, [pc, #256]	; (800b434 <USB_SetTurnaroundTime+0x120>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d202      	bcs.n	800b33e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b338:	230f      	movs	r3, #15
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e062      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	4a3c      	ldr	r2, [pc, #240]	; (800b434 <USB_SetTurnaroundTime+0x120>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d306      	bcc.n	800b354 <USB_SetTurnaroundTime+0x40>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	4a3b      	ldr	r2, [pc, #236]	; (800b438 <USB_SetTurnaroundTime+0x124>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d202      	bcs.n	800b354 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b34e:	230e      	movs	r3, #14
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	e057      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	4a38      	ldr	r2, [pc, #224]	; (800b438 <USB_SetTurnaroundTime+0x124>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d306      	bcc.n	800b36a <USB_SetTurnaroundTime+0x56>
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	4a37      	ldr	r2, [pc, #220]	; (800b43c <USB_SetTurnaroundTime+0x128>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d202      	bcs.n	800b36a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b364:	230d      	movs	r3, #13
 800b366:	617b      	str	r3, [r7, #20]
 800b368:	e04c      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	4a33      	ldr	r2, [pc, #204]	; (800b43c <USB_SetTurnaroundTime+0x128>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d306      	bcc.n	800b380 <USB_SetTurnaroundTime+0x6c>
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	4a32      	ldr	r2, [pc, #200]	; (800b440 <USB_SetTurnaroundTime+0x12c>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d802      	bhi.n	800b380 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b37a:	230c      	movs	r3, #12
 800b37c:	617b      	str	r3, [r7, #20]
 800b37e:	e041      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	4a2f      	ldr	r2, [pc, #188]	; (800b440 <USB_SetTurnaroundTime+0x12c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d906      	bls.n	800b396 <USB_SetTurnaroundTime+0x82>
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	4a2e      	ldr	r2, [pc, #184]	; (800b444 <USB_SetTurnaroundTime+0x130>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d802      	bhi.n	800b396 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b390:	230b      	movs	r3, #11
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	e036      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	4a2a      	ldr	r2, [pc, #168]	; (800b444 <USB_SetTurnaroundTime+0x130>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d906      	bls.n	800b3ac <USB_SetTurnaroundTime+0x98>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	4a29      	ldr	r2, [pc, #164]	; (800b448 <USB_SetTurnaroundTime+0x134>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d802      	bhi.n	800b3ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b3a6:	230a      	movs	r3, #10
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	e02b      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	4a26      	ldr	r2, [pc, #152]	; (800b448 <USB_SetTurnaroundTime+0x134>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d906      	bls.n	800b3c2 <USB_SetTurnaroundTime+0xae>
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	4a25      	ldr	r2, [pc, #148]	; (800b44c <USB_SetTurnaroundTime+0x138>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d202      	bcs.n	800b3c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b3bc:	2309      	movs	r3, #9
 800b3be:	617b      	str	r3, [r7, #20]
 800b3c0:	e020      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	4a21      	ldr	r2, [pc, #132]	; (800b44c <USB_SetTurnaroundTime+0x138>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d306      	bcc.n	800b3d8 <USB_SetTurnaroundTime+0xc4>
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	4a20      	ldr	r2, [pc, #128]	; (800b450 <USB_SetTurnaroundTime+0x13c>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d802      	bhi.n	800b3d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b3d2:	2308      	movs	r3, #8
 800b3d4:	617b      	str	r3, [r7, #20]
 800b3d6:	e015      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	4a1d      	ldr	r2, [pc, #116]	; (800b450 <USB_SetTurnaroundTime+0x13c>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d906      	bls.n	800b3ee <USB_SetTurnaroundTime+0xda>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	4a1c      	ldr	r2, [pc, #112]	; (800b454 <USB_SetTurnaroundTime+0x140>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d202      	bcs.n	800b3ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b3e8:	2307      	movs	r3, #7
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	e00a      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b3ee:	2306      	movs	r3, #6
 800b3f0:	617b      	str	r3, [r7, #20]
 800b3f2:	e007      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b3f4:	79fb      	ldrb	r3, [r7, #7]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d102      	bne.n	800b400 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b3fa:	2309      	movs	r3, #9
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	e001      	b.n	800b404 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b400:	2309      	movs	r3, #9
 800b402:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	68da      	ldr	r2, [r3, #12]
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	029b      	lsls	r3, r3, #10
 800b418:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b41c:	431a      	orrs	r2, r3
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	00d8acbf 	.word	0x00d8acbf
 800b434:	00e4e1c0 	.word	0x00e4e1c0
 800b438:	00f42400 	.word	0x00f42400
 800b43c:	01067380 	.word	0x01067380
 800b440:	011a499f 	.word	0x011a499f
 800b444:	01312cff 	.word	0x01312cff
 800b448:	014ca43f 	.word	0x014ca43f
 800b44c:	016e3600 	.word	0x016e3600
 800b450:	01a6ab1f 	.word	0x01a6ab1f
 800b454:	01e84800 	.word	0x01e84800

0800b458 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f043 0201 	orr.w	r2, r3, #1
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr

0800b47a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b47a:	b480      	push	{r7}
 800b47c:	b083      	sub	sp, #12
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f023 0201 	bic.w	r2, r3, #1
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4b8:	78fb      	ldrb	r3, [r7, #3]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d115      	bne.n	800b4ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	f7f5 ffda 	bl	8001484 <HAL_Delay>
      ms++;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 f93f 	bl	800c75a <USB_GetMode>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d01e      	beq.n	800b520 <USB_SetCurrentMode+0x84>
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b31      	cmp	r3, #49	; 0x31
 800b4e6:	d9f0      	bls.n	800b4ca <USB_SetCurrentMode+0x2e>
 800b4e8:	e01a      	b.n	800b520 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d115      	bne.n	800b51c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4fc:	2001      	movs	r0, #1
 800b4fe:	f7f5 ffc1 	bl	8001484 <HAL_Delay>
      ms++;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3301      	adds	r3, #1
 800b506:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f001 f926 	bl	800c75a <USB_GetMode>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <USB_SetCurrentMode+0x84>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2b31      	cmp	r3, #49	; 0x31
 800b518:	d9f0      	bls.n	800b4fc <USB_SetCurrentMode+0x60>
 800b51a:	e001      	b.n	800b520 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e005      	b.n	800b52c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2b32      	cmp	r3, #50	; 0x32
 800b524:	d101      	bne.n	800b52a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	e000      	b.n	800b52c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b534:	b084      	sub	sp, #16
 800b536:	b580      	push	{r7, lr}
 800b538:	b086      	sub	sp, #24
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
 800b53e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b546:	2300      	movs	r3, #0
 800b548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b54e:	2300      	movs	r3, #0
 800b550:	613b      	str	r3, [r7, #16]
 800b552:	e009      	b.n	800b568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	3340      	adds	r3, #64	; 0x40
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	3301      	adds	r3, #1
 800b566:	613b      	str	r3, [r7, #16]
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	2b0e      	cmp	r3, #14
 800b56c:	d9f2      	bls.n	800b554 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11c      	bne.n	800b5ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b582:	f043 0302 	orr.w	r3, r3, #2
 800b586:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b58c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	e005      	b.n	800b5ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	680b      	ldr	r3, [r1, #0]
 800b5d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d10c      	bne.n	800b5fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f965 	bl	800b8b8 <USB_SetDevSpeed>
 800b5ee:	e008      	b.n	800b602 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f960 	bl	800b8b8 <USB_SetDevSpeed>
 800b5f8:	e003      	b.n	800b602 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b5fa:	2103      	movs	r1, #3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 f95b 	bl	800b8b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b602:	2110      	movs	r1, #16
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f8f3 	bl	800b7f0 <USB_FlushTxFifo>
 800b60a:	4603      	mov	r3, r0
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d001      	beq.n	800b614 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f91f 	bl	800b858 <USB_FlushRxFifo>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d001      	beq.n	800b624 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62a:	461a      	mov	r2, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b636:	461a      	mov	r2, r3
 800b638:	2300      	movs	r3, #0
 800b63a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b642:	461a      	mov	r2, r3
 800b644:	2300      	movs	r3, #0
 800b646:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	e043      	b.n	800b6d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b660:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b664:	d118      	bne.n	800b698 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10a      	bne.n	800b682 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b678:	461a      	mov	r2, r3
 800b67a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	e013      	b.n	800b6aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b68e:	461a      	mov	r2, r3
 800b690:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	e008      	b.n	800b6aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	015a      	lsls	r2, r3, #5
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4413      	add	r3, r2
 800b6c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d3b7      	bcc.n	800b64e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6de:	2300      	movs	r3, #0
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	e043      	b.n	800b76c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	015a      	lsls	r2, r3, #5
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6fa:	d118      	bne.n	800b72e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70e:	461a      	mov	r2, r3
 800b710:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b714:	6013      	str	r3, [r2, #0]
 800b716:	e013      	b.n	800b740 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b724:	461a      	mov	r2, r3
 800b726:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b72a:	6013      	str	r3, [r2, #0]
 800b72c:	e008      	b.n	800b740 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73a:	461a      	mov	r2, r3
 800b73c:	2300      	movs	r3, #0
 800b73e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74c:	461a      	mov	r2, r3
 800b74e:	2300      	movs	r3, #0
 800b750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	015a      	lsls	r2, r3, #5
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	4413      	add	r3, r2
 800b75a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75e:	461a      	mov	r2, r3
 800b760:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b764:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	3301      	adds	r3, #1
 800b76a:	613b      	str	r3, [r7, #16]
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	693a      	ldr	r2, [r7, #16]
 800b770:	429a      	cmp	r2, r3
 800b772:	d3b7      	bcc.n	800b6e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77a:	691b      	ldr	r3, [r3, #16]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b782:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b786:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2200      	movs	r2, #0
 800b78c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b794:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d105      	bne.n	800b7a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	699b      	ldr	r3, [r3, #24]
 800b7a0:	f043 0210 	orr.w	r2, r3, #16
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	699a      	ldr	r2, [r3, #24]
 800b7ac:	4b0e      	ldr	r3, [pc, #56]	; (800b7e8 <USB_DevInit+0x2b4>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d005      	beq.n	800b7c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	f043 0208 	orr.w	r2, r3, #8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d105      	bne.n	800b7d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	699a      	ldr	r2, [r3, #24]
 800b7d0:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <USB_DevInit+0x2b8>)
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7e4:	b004      	add	sp, #16
 800b7e6:	4770      	bx	lr
 800b7e8:	803c3800 	.word	0x803c3800
 800b7ec:	40000004 	.word	0x40000004

0800b7f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	3301      	adds	r3, #1
 800b802:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4a13      	ldr	r2, [pc, #76]	; (800b854 <USB_FlushTxFifo+0x64>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d901      	bls.n	800b810 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e01b      	b.n	800b848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	daf2      	bge.n	800b7fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	019b      	lsls	r3, r3, #6
 800b820:	f043 0220 	orr.w	r2, r3, #32
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	3301      	adds	r3, #1
 800b82c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	4a08      	ldr	r2, [pc, #32]	; (800b854 <USB_FlushTxFifo+0x64>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d901      	bls.n	800b83a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b836:	2303      	movs	r3, #3
 800b838:	e006      	b.n	800b848 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	f003 0320 	and.w	r3, r3, #32
 800b842:	2b20      	cmp	r3, #32
 800b844:	d0f0      	beq.n	800b828 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	00030d40 	.word	0x00030d40

0800b858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b858:	b480      	push	{r7}
 800b85a:	b085      	sub	sp, #20
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b860:	2300      	movs	r3, #0
 800b862:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3301      	adds	r3, #1
 800b868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <USB_FlushRxFifo+0x5c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d901      	bls.n	800b876 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e018      	b.n	800b8a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	daf2      	bge.n	800b864 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2210      	movs	r2, #16
 800b886:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4a08      	ldr	r2, [pc, #32]	; (800b8b4 <USB_FlushRxFifo+0x5c>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d901      	bls.n	800b89a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e006      	b.n	800b8a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	f003 0310 	and.w	r3, r3, #16
 800b8a2:	2b10      	cmp	r3, #16
 800b8a4:	d0f0      	beq.n	800b888 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3714      	adds	r7, #20
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	00030d40 	.word	0x00030d40

0800b8b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	78fb      	ldrb	r3, [r7, #3]
 800b8d2:	68f9      	ldr	r1, [r7, #12]
 800b8d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f003 0306 	and.w	r3, r3, #6
 800b902:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d102      	bne.n	800b910 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b90a:	2300      	movs	r3, #0
 800b90c:	75fb      	strb	r3, [r7, #23]
 800b90e:	e00a      	b.n	800b926 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b02      	cmp	r3, #2
 800b914:	d002      	beq.n	800b91c <USB_GetDevSpeed+0x32>
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b06      	cmp	r3, #6
 800b91a:	d102      	bne.n	800b922 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b91c:	2302      	movs	r3, #2
 800b91e:	75fb      	strb	r3, [r7, #23]
 800b920:	e001      	b.n	800b926 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b922:	230f      	movs	r3, #15
 800b924:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b926:	7dfb      	ldrb	r3, [r7, #23]
}
 800b928:	4618      	mov	r0, r3
 800b92a:	371c      	adds	r7, #28
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d139      	bne.n	800b9c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b956:	69da      	ldr	r2, [r3, #28]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	f003 030f 	and.w	r3, r3, #15
 800b960:	2101      	movs	r1, #1
 800b962:	fa01 f303 	lsl.w	r3, r1, r3
 800b966:	b29b      	uxth	r3, r3
 800b968:	68f9      	ldr	r1, [r7, #12]
 800b96a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b96e:	4313      	orrs	r3, r2
 800b970:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d153      	bne.n	800ba30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	015a      	lsls	r2, r3, #5
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4413      	add	r3, r2
 800b990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	791b      	ldrb	r3, [r3, #4]
 800b9a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	059b      	lsls	r3, r3, #22
 800b9aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9ac:	431a      	orrs	r2, r3
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	0159      	lsls	r1, r3, #5
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	440b      	add	r3, r1
 800b9b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	4b20      	ldr	r3, [pc, #128]	; (800ba40 <USB_ActivateEndpoint+0x10c>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	600b      	str	r3, [r1, #0]
 800b9c2:	e035      	b.n	800ba30 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	f003 030f 	and.w	r3, r3, #15
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9da:	041b      	lsls	r3, r3, #16
 800b9dc:	68f9      	ldr	r1, [r7, #12]
 800b9de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	015a      	lsls	r2, r3, #5
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d119      	bne.n	800ba30 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	791b      	ldrb	r3, [r3, #4]
 800ba16:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	431a      	orrs	r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	0159      	lsls	r1, r3, #5
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	440b      	add	r3, r1
 800ba24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba28:	4619      	mov	r1, r3
 800ba2a:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <USB_ActivateEndpoint+0x10c>)
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba30:	2300      	movs	r3, #0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3c:	4770      	bx	lr
 800ba3e:	bf00      	nop
 800ba40:	10008000 	.word	0x10008000

0800ba44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	785b      	ldrb	r3, [r3, #1]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d161      	bne.n	800bb24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	015a      	lsls	r2, r3, #5
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4413      	add	r3, r2
 800ba68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba76:	d11f      	bne.n	800bab8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	0151      	lsls	r1, r2, #5
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	440a      	add	r2, r1
 800ba8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ba96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	015a      	lsls	r2, r3, #5
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	0151      	lsls	r1, r2, #5
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	440a      	add	r2, r1
 800baae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800babe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	2101      	movs	r1, #1
 800baca:	fa01 f303 	lsl.w	r3, r1, r3
 800bace:	b29b      	uxth	r3, r3
 800bad0:	43db      	mvns	r3, r3
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bad8:	4013      	ands	r3, r2
 800bada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	69da      	ldr	r2, [r3, #28]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	f003 030f 	and.w	r3, r3, #15
 800baec:	2101      	movs	r1, #1
 800baee:	fa01 f303 	lsl.w	r3, r1, r3
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	43db      	mvns	r3, r3
 800baf6:	68f9      	ldr	r1, [r7, #12]
 800baf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bafc:	4013      	ands	r3, r2
 800bafe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	015a      	lsls	r2, r3, #5
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	0159      	lsls	r1, r3, #5
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	440b      	add	r3, r1
 800bb16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4b35      	ldr	r3, [pc, #212]	; (800bbf4 <USB_DeactivateEndpoint+0x1b0>)
 800bb1e:	4013      	ands	r3, r2
 800bb20:	600b      	str	r3, [r1, #0]
 800bb22:	e060      	b.n	800bbe6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	015a      	lsls	r2, r3, #5
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb3a:	d11f      	bne.n	800bb7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	68ba      	ldr	r2, [r7, #8]
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	0151      	lsls	r1, r2, #5
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	440a      	add	r2, r1
 800bb72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 030f 	and.w	r3, r3, #15
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	fa01 f303 	lsl.w	r3, r1, r3
 800bb92:	041b      	lsls	r3, r3, #16
 800bb94:	43db      	mvns	r3, r3
 800bb96:	68f9      	ldr	r1, [r7, #12]
 800bb98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba6:	69da      	ldr	r2, [r3, #28]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	f003 030f 	and.w	r3, r3, #15
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb6:	041b      	lsls	r3, r3, #16
 800bbb8:	43db      	mvns	r3, r3
 800bbba:	68f9      	ldr	r1, [r7, #12]
 800bbbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	0159      	lsls	r1, r3, #5
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	440b      	add	r3, r1
 800bbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <USB_DeactivateEndpoint+0x1b4>)
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3714      	adds	r7, #20
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	ec337800 	.word	0xec337800
 800bbf8:	eff37800 	.word	0xeff37800

0800bbfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	; 0x28
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	4613      	mov	r3, r2
 800bc08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	785b      	ldrb	r3, [r3, #1]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	f040 8181 	bne.w	800bf20 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d132      	bne.n	800bc8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	015a      	lsls	r2, r3, #5
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc32:	691a      	ldr	r2, [r3, #16]
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	0159      	lsls	r1, r3, #5
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	440b      	add	r3, r1
 800bc3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc40:	4619      	mov	r1, r3
 800bc42:	4ba5      	ldr	r3, [pc, #660]	; (800bed8 <USB_EPStartXfer+0x2dc>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	015a      	lsls	r2, r3, #5
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	4413      	add	r3, r2
 800bc50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc54:	691b      	ldr	r3, [r3, #16]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	0151      	lsls	r1, r2, #5
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	440a      	add	r2, r1
 800bc5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	69fb      	ldr	r3, [r7, #28]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc74:	691a      	ldr	r2, [r3, #16]
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	0159      	lsls	r1, r3, #5
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	440b      	add	r3, r1
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	4619      	mov	r1, r3
 800bc84:	4b95      	ldr	r3, [pc, #596]	; (800bedc <USB_EPStartXfer+0x2e0>)
 800bc86:	4013      	ands	r3, r2
 800bc88:	610b      	str	r3, [r1, #16]
 800bc8a:	e092      	b.n	800bdb2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc98:	691a      	ldr	r2, [r3, #16]
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	0159      	lsls	r1, r3, #5
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	440b      	add	r3, r1
 800bca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca6:	4619      	mov	r1, r3
 800bca8:	4b8c      	ldr	r3, [pc, #560]	; (800bedc <USB_EPStartXfer+0x2e0>)
 800bcaa:	4013      	ands	r3, r2
 800bcac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcba:	691a      	ldr	r2, [r3, #16]
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	0159      	lsls	r1, r3, #5
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4b83      	ldr	r3, [pc, #524]	; (800bed8 <USB_EPStartXfer+0x2dc>)
 800bccc:	4013      	ands	r3, r2
 800bcce:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d11a      	bne.n	800bd0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	691a      	ldr	r2, [r3, #16]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d903      	bls.n	800bcea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	689a      	ldr	r2, [r3, #8]
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	015a      	lsls	r2, r3, #5
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	0151      	lsls	r1, r2, #5
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	440a      	add	r2, r1
 800bd00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd08:	6113      	str	r3, [r2, #16]
 800bd0a:	e01b      	b.n	800bd44 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd18:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	6919      	ldr	r1, [r3, #16]
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	440b      	add	r3, r1
 800bd24:	1e59      	subs	r1, r3, #1
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd2e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bd30:	4b6b      	ldr	r3, [pc, #428]	; (800bee0 <USB_EPStartXfer+0x2e4>)
 800bd32:	400b      	ands	r3, r1
 800bd34:	69b9      	ldr	r1, [r7, #24]
 800bd36:	0148      	lsls	r0, r1, #5
 800bd38:	69f9      	ldr	r1, [r7, #28]
 800bd3a:	4401      	add	r1, r0
 800bd3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd40:	4313      	orrs	r3, r2
 800bd42:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	015a      	lsls	r2, r3, #5
 800bd48:	69fb      	ldr	r3, [r7, #28]
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd50:	691a      	ldr	r2, [r3, #16]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd5a:	69b9      	ldr	r1, [r7, #24]
 800bd5c:	0148      	lsls	r0, r1, #5
 800bd5e:	69f9      	ldr	r1, [r7, #28]
 800bd60:	4401      	add	r1, r0
 800bd62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd66:	4313      	orrs	r3, r2
 800bd68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	791b      	ldrb	r3, [r3, #4]
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d11f      	bne.n	800bdb2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	015a      	lsls	r2, r3, #5
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	4413      	add	r3, r2
 800bd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	0151      	lsls	r1, r2, #5
 800bd84:	69fa      	ldr	r2, [r7, #28]
 800bd86:	440a      	add	r2, r1
 800bd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	015a      	lsls	r2, r3, #5
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	69ba      	ldr	r2, [r7, #24]
 800bda2:	0151      	lsls	r1, r2, #5
 800bda4:	69fa      	ldr	r2, [r7, #28]
 800bda6:	440a      	add	r2, r1
 800bda8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bdb2:	79fb      	ldrb	r3, [r7, #7]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d14b      	bne.n	800be50 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d009      	beq.n	800bdd4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	015a      	lsls	r2, r3, #5
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdcc:	461a      	mov	r2, r3
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	791b      	ldrb	r3, [r3, #4]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d128      	bne.n	800be2e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d110      	bne.n	800be0e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	69ba      	ldr	r2, [r7, #24]
 800bdfc:	0151      	lsls	r1, r2, #5
 800bdfe:	69fa      	ldr	r2, [r7, #28]
 800be00:	440a      	add	r2, r1
 800be02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	e00f      	b.n	800be2e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	015a      	lsls	r2, r3, #5
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	4413      	add	r3, r2
 800be16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	69ba      	ldr	r2, [r7, #24]
 800be1e:	0151      	lsls	r1, r2, #5
 800be20:	69fa      	ldr	r2, [r7, #28]
 800be22:	440a      	add	r2, r1
 800be24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	015a      	lsls	r2, r3, #5
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	4413      	add	r3, r2
 800be36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	0151      	lsls	r1, r2, #5
 800be40:	69fa      	ldr	r2, [r7, #28]
 800be42:	440a      	add	r2, r1
 800be44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	e16a      	b.n	800c126 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	69ba      	ldr	r2, [r7, #24]
 800be60:	0151      	lsls	r1, r2, #5
 800be62:	69fa      	ldr	r2, [r7, #28]
 800be64:	440a      	add	r2, r1
 800be66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d015      	beq.n	800bea4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f000 8152 	beq.w	800c126 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	f003 030f 	and.w	r3, r3, #15
 800be92:	2101      	movs	r1, #1
 800be94:	fa01 f303 	lsl.w	r3, r1, r3
 800be98:	69f9      	ldr	r1, [r7, #28]
 800be9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be9e:	4313      	orrs	r3, r2
 800bea0:	634b      	str	r3, [r1, #52]	; 0x34
 800bea2:	e140      	b.n	800c126 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d117      	bne.n	800bee4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	0151      	lsls	r1, r2, #5
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	440a      	add	r2, r1
 800beca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	e016      	b.n	800bf04 <USB_EPStartXfer+0x308>
 800bed6:	bf00      	nop
 800bed8:	e007ffff 	.word	0xe007ffff
 800bedc:	fff80000 	.word	0xfff80000
 800bee0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	015a      	lsls	r2, r3, #5
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	4413      	add	r3, r2
 800beec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	0151      	lsls	r1, r2, #5
 800bef6:	69fa      	ldr	r2, [r7, #28]
 800bef8:	440a      	add	r2, r1
 800befa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800befe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf02:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	68d9      	ldr	r1, [r3, #12]
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	781a      	ldrb	r2, [r3, #0]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	691b      	ldr	r3, [r3, #16]
 800bf10:	b298      	uxth	r0, r3
 800bf12:	79fb      	ldrb	r3, [r7, #7]
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	4603      	mov	r3, r0
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 f9b9 	bl	800c290 <USB_WritePacket>
 800bf1e:	e102      	b.n	800c126 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf2c:	691a      	ldr	r2, [r3, #16]
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	0159      	lsls	r1, r3, #5
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	440b      	add	r3, r1
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4b7c      	ldr	r3, [pc, #496]	; (800c130 <USB_EPStartXfer+0x534>)
 800bf3e:	4013      	ands	r3, r2
 800bf40:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4e:	691a      	ldr	r2, [r3, #16]
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	0159      	lsls	r1, r3, #5
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	440b      	add	r3, r1
 800bf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4b75      	ldr	r3, [pc, #468]	; (800c134 <USB_EPStartXfer+0x538>)
 800bf60:	4013      	ands	r3, r2
 800bf62:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bf64:	69bb      	ldr	r3, [r7, #24]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d12f      	bne.n	800bfca <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	689a      	ldr	r2, [r3, #8]
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	689a      	ldr	r2, [r3, #8]
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	015a      	lsls	r2, r3, #5
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	4413      	add	r3, r2
 800bf8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8e:	691a      	ldr	r2, [r3, #16]
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf98:	69b9      	ldr	r1, [r7, #24]
 800bf9a:	0148      	lsls	r0, r1, #5
 800bf9c:	69f9      	ldr	r1, [r7, #28]
 800bf9e:	4401      	add	r1, r0
 800bfa0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	015a      	lsls	r2, r3, #5
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	4413      	add	r3, r2
 800bfb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	69ba      	ldr	r2, [r7, #24]
 800bfb8:	0151      	lsls	r1, r2, #5
 800bfba:	69fa      	ldr	r2, [r7, #28]
 800bfbc:	440a      	add	r2, r1
 800bfbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bfc6:	6113      	str	r3, [r2, #16]
 800bfc8:	e05f      	b.n	800c08a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d123      	bne.n	800c01a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	015a      	lsls	r2, r3, #5
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	4413      	add	r3, r2
 800bfda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfde:	691a      	ldr	r2, [r3, #16]
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfe8:	69b9      	ldr	r1, [r7, #24]
 800bfea:	0148      	lsls	r0, r1, #5
 800bfec:	69f9      	ldr	r1, [r7, #28]
 800bfee:	4401      	add	r1, r0
 800bff0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bff4:	4313      	orrs	r3, r2
 800bff6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	69ba      	ldr	r2, [r7, #24]
 800c008:	0151      	lsls	r1, r2, #5
 800c00a:	69fa      	ldr	r2, [r7, #28]
 800c00c:	440a      	add	r2, r1
 800c00e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c012:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c016:	6113      	str	r3, [r2, #16]
 800c018:	e037      	b.n	800c08a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	691a      	ldr	r2, [r3, #16]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	4413      	add	r3, r2
 800c024:	1e5a      	subs	r2, r3, #1
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c02e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	8afa      	ldrh	r2, [r7, #22]
 800c036:	fb03 f202 	mul.w	r2, r3, r2
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	015a      	lsls	r2, r3, #5
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	4413      	add	r3, r2
 800c046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	8afb      	ldrh	r3, [r7, #22]
 800c04e:	04d9      	lsls	r1, r3, #19
 800c050:	4b39      	ldr	r3, [pc, #228]	; (800c138 <USB_EPStartXfer+0x53c>)
 800c052:	400b      	ands	r3, r1
 800c054:	69b9      	ldr	r1, [r7, #24]
 800c056:	0148      	lsls	r0, r1, #5
 800c058:	69f9      	ldr	r1, [r7, #28]
 800c05a:	4401      	add	r1, r0
 800c05c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c060:	4313      	orrs	r3, r2
 800c062:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	691a      	ldr	r2, [r3, #16]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c07a:	69b9      	ldr	r1, [r7, #24]
 800c07c:	0148      	lsls	r0, r1, #5
 800c07e:	69f9      	ldr	r1, [r7, #28]
 800c080:	4401      	add	r1, r0
 800c082:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c086:	4313      	orrs	r3, r2
 800c088:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	d10d      	bne.n	800c0ac <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c090:	68bb      	ldr	r3, [r7, #8]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d009      	beq.n	800c0ac <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	68d9      	ldr	r1, [r3, #12]
 800c09c:	69bb      	ldr	r3, [r7, #24]
 800c09e:	015a      	lsls	r2, r3, #5
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a8:	460a      	mov	r2, r1
 800c0aa:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	791b      	ldrb	r3, [r3, #4]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d128      	bne.n	800c106 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d110      	bne.n	800c0e6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	015a      	lsls	r2, r3, #5
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	69ba      	ldr	r2, [r7, #24]
 800c0d4:	0151      	lsls	r1, r2, #5
 800c0d6:	69fa      	ldr	r2, [r7, #28]
 800c0d8:	440a      	add	r2, r1
 800c0da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0e2:	6013      	str	r3, [r2, #0]
 800c0e4:	e00f      	b.n	800c106 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	0151      	lsls	r1, r2, #5
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	440a      	add	r2, r1
 800c0fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c104:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	69ba      	ldr	r2, [r7, #24]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c120:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c124:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	fff80000 	.word	0xfff80000
 800c134:	e007ffff 	.word	0xe007ffff
 800c138:	1ff80000 	.word	0x1ff80000

0800c13c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b087      	sub	sp, #28
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c146:	2300      	movs	r3, #0
 800c148:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c14a:	2300      	movs	r3, #0
 800c14c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	785b      	ldrb	r3, [r3, #1]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d14a      	bne.n	800c1f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	015a      	lsls	r2, r3, #5
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	4413      	add	r3, r2
 800c164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c16e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c172:	f040 8086 	bne.w	800c282 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	015a      	lsls	r2, r3, #5
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4413      	add	r3, r2
 800c180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	7812      	ldrb	r2, [r2, #0]
 800c18a:	0151      	lsls	r1, r2, #5
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	440a      	add	r2, r1
 800c190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c198:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	015a      	lsls	r2, r3, #5
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c1bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f242 7210 	movw	r2, #10000	; 0x2710
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d902      	bls.n	800c1d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	75fb      	strb	r3, [r7, #23]
          break;
 800c1d2:	e056      	b.n	800c282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1ec:	d0e7      	beq.n	800c1be <USB_EPStopXfer+0x82>
 800c1ee:	e048      	b.n	800c282 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c208:	d13b      	bne.n	800c282 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	7812      	ldrb	r2, [r2, #0]
 800c21e:	0151      	lsls	r1, r2, #5
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	440a      	add	r2, r1
 800c224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c228:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c22c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	015a      	lsls	r2, r3, #5
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	4413      	add	r3, r2
 800c238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	7812      	ldrb	r2, [r2, #0]
 800c242:	0151      	lsls	r1, r2, #5
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	440a      	add	r2, r1
 800c248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c24c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c250:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3301      	adds	r3, #1
 800c256:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f242 7210 	movw	r2, #10000	; 0x2710
 800c25e:	4293      	cmp	r3, r2
 800c260:	d902      	bls.n	800c268 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	75fb      	strb	r3, [r7, #23]
          break;
 800c266:	e00c      	b.n	800c282 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	4413      	add	r3, r2
 800c272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c27c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c280:	d0e7      	beq.n	800c252 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c282:	7dfb      	ldrb	r3, [r7, #23]
}
 800c284:	4618      	mov	r0, r3
 800c286:	371c      	adds	r7, #28
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c290:	b480      	push	{r7}
 800c292:	b089      	sub	sp, #36	; 0x24
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4611      	mov	r1, r2
 800c29c:	461a      	mov	r2, r3
 800c29e:	460b      	mov	r3, r1
 800c2a0:	71fb      	strb	r3, [r7, #7]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c2ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d123      	bne.n	800c2fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c2b6:	88bb      	ldrh	r3, [r7, #4]
 800c2b8:	3303      	adds	r3, #3
 800c2ba:	089b      	lsrs	r3, r3, #2
 800c2bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e018      	b.n	800c2f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c2c4:	79fb      	ldrb	r3, [r7, #7]
 800c2c6:	031a      	lsls	r2, r3, #12
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	4413      	add	r3, r2
 800c2cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c2f0:	69bb      	ldr	r3, [r7, #24]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	61bb      	str	r3, [r7, #24]
 800c2f6:	69ba      	ldr	r2, [r7, #24]
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d3e2      	bcc.n	800c2c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3724      	adds	r7, #36	; 0x24
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b08b      	sub	sp, #44	; 0x2c
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c322:	88fb      	ldrh	r3, [r7, #6]
 800c324:	089b      	lsrs	r3, r3, #2
 800c326:	b29b      	uxth	r3, r3
 800c328:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c32a:	88fb      	ldrh	r3, [r7, #6]
 800c32c:	f003 0303 	and.w	r3, r3, #3
 800c330:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c332:	2300      	movs	r3, #0
 800c334:	623b      	str	r3, [r7, #32]
 800c336:	e014      	b.n	800c362 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c342:	601a      	str	r2, [r3, #0]
    pDest++;
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	3301      	adds	r3, #1
 800c348:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34c:	3301      	adds	r3, #1
 800c34e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c352:	3301      	adds	r3, #1
 800c354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	3301      	adds	r3, #1
 800c35a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c35c:	6a3b      	ldr	r3, [r7, #32]
 800c35e:	3301      	adds	r3, #1
 800c360:	623b      	str	r3, [r7, #32]
 800c362:	6a3a      	ldr	r2, [r7, #32]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	429a      	cmp	r2, r3
 800c368:	d3e6      	bcc.n	800c338 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c36a:	8bfb      	ldrh	r3, [r7, #30]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d01e      	beq.n	800c3ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c370:	2300      	movs	r3, #0
 800c372:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c37a:	461a      	mov	r2, r3
 800c37c:	f107 0310 	add.w	r3, r7, #16
 800c380:	6812      	ldr	r2, [r2, #0]
 800c382:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c384:	693a      	ldr	r2, [r7, #16]
 800c386:	6a3b      	ldr	r3, [r7, #32]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	fa22 f303 	lsr.w	r3, r2, r3
 800c390:	b2da      	uxtb	r2, r3
 800c392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c394:	701a      	strb	r2, [r3, #0]
      i++;
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	3301      	adds	r3, #1
 800c39a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	3301      	adds	r3, #1
 800c3a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c3a2:	8bfb      	ldrh	r3, [r7, #30]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c3a8:	8bfb      	ldrh	r3, [r7, #30]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1ea      	bne.n	800c384 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	372c      	adds	r7, #44	; 0x2c
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	785b      	ldrb	r3, [r3, #1]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d12c      	bne.n	800c432 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	db12      	blt.n	800c410 <USB_EPSetStall+0x54>
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00f      	beq.n	800c410 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	015a      	lsls	r2, r3, #5
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	0151      	lsls	r1, r2, #5
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	440a      	add	r2, r1
 800c406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c40a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c40e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	015a      	lsls	r2, r3, #5
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4413      	add	r3, r2
 800c418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	0151      	lsls	r1, r2, #5
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	440a      	add	r2, r1
 800c426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c42a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	e02b      	b.n	800c48a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	015a      	lsls	r2, r3, #5
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	4413      	add	r3, r2
 800c43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	db12      	blt.n	800c46a <USB_EPSetStall+0xae>
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d00f      	beq.n	800c46a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	015a      	lsls	r2, r3, #5
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	4413      	add	r3, r2
 800c452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	0151      	lsls	r1, r2, #5
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	440a      	add	r2, r1
 800c460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c464:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c468:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	0151      	lsls	r1, r2, #5
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	440a      	add	r2, r1
 800c480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c484:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c488:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c498:	b480      	push	{r7}
 800c49a:	b085      	sub	sp, #20
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	785b      	ldrb	r3, [r3, #1]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d128      	bne.n	800c506 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	015a      	lsls	r2, r3, #5
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68ba      	ldr	r2, [r7, #8]
 800c4c4:	0151      	lsls	r1, r2, #5
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	440a      	add	r2, r1
 800c4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c4d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	791b      	ldrb	r3, [r3, #4]
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d003      	beq.n	800c4e4 <USB_EPClearStall+0x4c>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	791b      	ldrb	r3, [r3, #4]
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d138      	bne.n	800c556 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c502:	6013      	str	r3, [r2, #0]
 800c504:	e027      	b.n	800c556 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	015a      	lsls	r2, r3, #5
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	0151      	lsls	r1, r2, #5
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	440a      	add	r2, r1
 800c51c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c520:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c524:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	791b      	ldrb	r3, [r3, #4]
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d003      	beq.n	800c536 <USB_EPClearStall+0x9e>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	791b      	ldrb	r3, [r3, #4]
 800c532:	2b02      	cmp	r3, #2
 800c534:	d10f      	bne.n	800c556 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	015a      	lsls	r2, r3, #5
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4413      	add	r3, r2
 800c53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	0151      	lsls	r1, r2, #5
 800c548:	68fa      	ldr	r2, [r7, #12]
 800c54a:	440a      	add	r2, r1
 800c54c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c554:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3714      	adds	r7, #20
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c582:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c586:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	78fb      	ldrb	r3, [r7, #3]
 800c592:	011b      	lsls	r3, r3, #4
 800c594:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c598:	68f9      	ldr	r1, [r7, #12]
 800c59a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5ca:	f023 0303 	bic.w	r3, r3, #3
 800c5ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5de:	f023 0302 	bic.w	r3, r3, #2
 800c5e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b085      	sub	sp, #20
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c60c:	f023 0303 	bic.w	r3, r3, #3
 800c610:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c620:	f043 0302 	orr.w	r3, r3, #2
 800c624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c634:	b480      	push	{r7}
 800c636:	b085      	sub	sp, #20
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	4013      	ands	r3, r2
 800c64a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c64c:	68fb      	ldr	r3, [r7, #12]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3714      	adds	r7, #20
 800c652:	46bd      	mov	sp, r7
 800c654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c658:	4770      	bx	lr

0800c65a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b085      	sub	sp, #20
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c676:	69db      	ldr	r3, [r3, #28]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	4013      	ands	r3, r2
 800c67c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	0c1b      	lsrs	r3, r3, #16
}
 800c682:	4618      	mov	r0, r3
 800c684:	3714      	adds	r7, #20
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c68e:	b480      	push	{r7}
 800c690:	b085      	sub	sp, #20
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6aa:	69db      	ldr	r3, [r3, #28]
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	b29b      	uxth	r3, r3
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3714      	adds	r7, #20
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c0:	4770      	bx	lr

0800c6c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	015a      	lsls	r2, r3, #5
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	4413      	add	r3, r2
 800c6da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c6f0:	68bb      	ldr	r3, [r7, #8]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b087      	sub	sp, #28
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c722:	78fb      	ldrb	r3, [r7, #3]
 800c724:	f003 030f 	and.w	r3, r3, #15
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	fa22 f303 	lsr.w	r3, r2, r3
 800c72e:	01db      	lsls	r3, r3, #7
 800c730:	b2db      	uxtb	r3, r3
 800c732:	693a      	ldr	r2, [r7, #16]
 800c734:	4313      	orrs	r3, r2
 800c736:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c738:	78fb      	ldrb	r3, [r7, #3]
 800c73a:	015a      	lsls	r2, r3, #5
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	4013      	ands	r3, r2
 800c74a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c74c:	68bb      	ldr	r3, [r7, #8]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	371c      	adds	r7, #28
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	695b      	ldr	r3, [r3, #20]
 800c766:	f003 0301 	and.w	r3, r3, #1
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
	...

0800c778 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c792:	4619      	mov	r1, r3
 800c794:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <USB_ActivateSetup+0x44>)
 800c796:	4013      	ands	r3, r2
 800c798:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	fffff800 	.word	0xfffff800

0800c7c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b087      	sub	sp, #28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	607a      	str	r2, [r7, #4]
 800c7cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	333c      	adds	r3, #60	; 0x3c
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	4a26      	ldr	r2, [pc, #152]	; (800c878 <USB_EP0_OutStart+0xb8>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d90a      	bls.n	800c7fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7f4:	d101      	bne.n	800c7fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e037      	b.n	800c86a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c800:	461a      	mov	r2, r3
 800c802:	2300      	movs	r3, #0
 800c804:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c818:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c828:	f043 0318 	orr.w	r3, r3, #24
 800c82c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	697a      	ldr	r2, [r7, #20]
 800c838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c83c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c840:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	2b01      	cmp	r3, #1
 800c846:	d10f      	bne.n	800c868 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c84e:	461a      	mov	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c862:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c866:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	371c      	adds	r7, #28
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr
 800c876:	bf00      	nop
 800c878:	4f54300a 	.word	0x4f54300a

0800c87c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c884:	2300      	movs	r3, #0
 800c886:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4a13      	ldr	r2, [pc, #76]	; (800c8e0 <USB_CoreReset+0x64>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d901      	bls.n	800c89a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c896:	2303      	movs	r3, #3
 800c898:	e01b      	b.n	800c8d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	daf2      	bge.n	800c888 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	f043 0201 	orr.w	r2, r3, #1
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	4a09      	ldr	r2, [pc, #36]	; (800c8e0 <USB_CoreReset+0x64>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d901      	bls.n	800c8c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e006      	b.n	800c8d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	691b      	ldr	r3, [r3, #16]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d0f0      	beq.n	800c8b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	00030d40 	.word	0x00030d40

0800c8e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c8e8:	4904      	ldr	r1, [pc, #16]	; (800c8fc <MX_FATFS_Init+0x18>)
 800c8ea:	4805      	ldr	r0, [pc, #20]	; (800c900 <MX_FATFS_Init+0x1c>)
 800c8ec:	f002 fef4 	bl	800f6d8 <FATFS_LinkDriver>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	4b03      	ldr	r3, [pc, #12]	; (800c904 <MX_FATFS_Init+0x20>)
 800c8f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c8f8:	bf00      	nop
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	240004f4 	.word	0x240004f4
 800c900:	08024550 	.word	0x08024550
 800c904:	240004f0 	.word	0x240004f0

0800c908 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c912:	f000 f871 	bl	800c9f8 <BSP_SD_IsDetected>
 800c916:	4603      	mov	r3, r0
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d001      	beq.n	800c920 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c91c:	2302      	movs	r3, #2
 800c91e:	e012      	b.n	800c946 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c920:	480b      	ldr	r0, [pc, #44]	; (800c950 <BSP_SD_Init+0x48>)
 800c922:	f7fc fa3b 	bl	8008d9c <HAL_SD_Init>
 800c926:	4603      	mov	r3, r0
 800c928:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c92a:	79fb      	ldrb	r3, [r7, #7]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c934:	4806      	ldr	r0, [pc, #24]	; (800c950 <BSP_SD_Init+0x48>)
 800c936:	f7fc ff2f 	bl	8009798 <HAL_SD_ConfigWideBusOperation>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d001      	beq.n	800c944 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c944:	79fb      	ldrb	r3, [r7, #7]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
 800c94e:	bf00      	nop
 800c950:	240003cc 	.word	0x240003cc

0800c954 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	68f9      	ldr	r1, [r7, #12]
 800c96a:	4806      	ldr	r0, [pc, #24]	; (800c984 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c96c:	f7fc fb36 	bl	8008fdc <HAL_SD_ReadBlocks_DMA>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	240003cc 	.word	0x240003cc

0800c988 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68ba      	ldr	r2, [r7, #8]
 800c99c:	68f9      	ldr	r1, [r7, #12]
 800c99e:	4806      	ldr	r0, [pc, #24]	; (800c9b8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c9a0:	f7fc fbc4 	bl	800912c <HAL_SD_WriteBlocks_DMA>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	240003cc 	.word	0x240003cc

0800c9bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c9c0:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <BSP_SD_GetCardState+0x1c>)
 800c9c2:	f7fc fffb 	bl	80099bc <HAL_SD_GetCardState>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b04      	cmp	r3, #4
 800c9ca:	bf14      	ite	ne
 800c9cc:	2301      	movne	r3, #1
 800c9ce:	2300      	moveq	r3, #0
 800c9d0:	b2db      	uxtb	r3, r3
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	240003cc 	.word	0x240003cc

0800c9dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c9e4:	6879      	ldr	r1, [r7, #4]
 800c9e6:	4803      	ldr	r0, [pc, #12]	; (800c9f4 <BSP_SD_GetCardInfo+0x18>)
 800c9e8:	f7fc feaa 	bl	8009740 <HAL_SD_GetCardInfo>
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	240003cc 	.word	0x240003cc

0800c9f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c9fe:	2301      	movs	r3, #1
 800ca00:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca02:	f000 f80b 	bl	800ca1c <BSP_PlatformIsDetected>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca10:	79fb      	ldrb	r3, [r7, #7]
 800ca12:	b2db      	uxtb	r3, r3
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b082      	sub	sp, #8
 800ca20:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca22:	2301      	movs	r3, #1
 800ca24:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca26:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ca2a:	4806      	ldr	r0, [pc, #24]	; (800ca44 <BSP_PlatformIsDetected+0x28>)
 800ca2c:	f7f7 fb22 	bl	8004074 <HAL_GPIO_ReadPin>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ca36:	2300      	movs	r3, #0
 800ca38:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3708      	adds	r7, #8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	58020000 	.word	0x58020000

0800ca48 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800ca50:	f002 ff02 	bl	800f858 <osKernelGetTickCount>
 800ca54:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800ca56:	e006      	b.n	800ca66 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca58:	f7ff ffb0 	bl	800c9bc <BSP_SD_GetCardState>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d101      	bne.n	800ca66 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	e009      	b.n	800ca7a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800ca66:	f002 fef7 	bl	800f858 <osKernelGetTickCount>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d8f0      	bhi.n	800ca58 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ca76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
	...

0800ca84 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ca8e:	4b0b      	ldr	r3, [pc, #44]	; (800cabc <SD_CheckStatus+0x38>)
 800ca90:	2201      	movs	r2, #1
 800ca92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ca94:	f7ff ff92 	bl	800c9bc <BSP_SD_GetCardState>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d107      	bne.n	800caae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <SD_CheckStatus+0x38>)
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	f023 0301 	bic.w	r3, r3, #1
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b04      	ldr	r3, [pc, #16]	; (800cabc <SD_CheckStatus+0x38>)
 800caac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800caae:	4b03      	ldr	r3, [pc, #12]	; (800cabc <SD_CheckStatus+0x38>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	b2db      	uxtb	r3, r3
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}
 800cabc:	2400000d 	.word	0x2400000d

0800cac0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800caca:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <SD_initialize+0x7c>)
 800cacc:	2201      	movs	r2, #1
 800cace:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cad0:	f002 fe7a 	bl	800f7c8 <osKernelGetState>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d129      	bne.n	800cb2e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cada:	f7ff ff15 	bl	800c908 <BSP_SD_Init>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d107      	bne.n	800caf4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff ffcc 	bl	800ca84 <SD_CheckStatus>
 800caec:	4603      	mov	r3, r0
 800caee:	461a      	mov	r2, r3
 800caf0:	4b12      	ldr	r3, [pc, #72]	; (800cb3c <SD_initialize+0x7c>)
 800caf2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800caf4:	4b11      	ldr	r3, [pc, #68]	; (800cb3c <SD_initialize+0x7c>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	b2db      	uxtb	r3, r3
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d017      	beq.n	800cb2e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800cafe:	4b10      	ldr	r3, [pc, #64]	; (800cb40 <SD_initialize+0x80>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d107      	bne.n	800cb16 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800cb06:	2200      	movs	r2, #0
 800cb08:	2102      	movs	r1, #2
 800cb0a:	200a      	movs	r0, #10
 800cb0c:	f003 f994 	bl	800fe38 <osMessageQueueNew>
 800cb10:	4603      	mov	r3, r0
 800cb12:	4a0b      	ldr	r2, [pc, #44]	; (800cb40 <SD_initialize+0x80>)
 800cb14:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800cb16:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <SD_initialize+0x80>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d107      	bne.n	800cb2e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800cb1e:	4b07      	ldr	r3, [pc, #28]	; (800cb3c <SD_initialize+0x7c>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f043 0301 	orr.w	r3, r3, #1
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <SD_initialize+0x7c>)
 800cb2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cb2e:	4b03      	ldr	r3, [pc, #12]	; (800cb3c <SD_initialize+0x7c>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	b2db      	uxtb	r3, r3
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	2400000d 	.word	0x2400000d
 800cb40:	240004f8 	.word	0x240004f8

0800cb44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff ff97 	bl	800ca84 <SD_CheckStatus>
 800cb56:	4603      	mov	r3, r0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cb74:	f247 5030 	movw	r0, #30000	; 0x7530
 800cb78:	f7ff ff66 	bl	800ca48 <SD_CheckStatusWithTimeout>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	da01      	bge.n	800cb86 <SD_read+0x26>
  {
    return res;
 800cb82:	7ffb      	ldrb	r3, [r7, #31]
 800cb84:	e02f      	b.n	800cbe6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	68b8      	ldr	r0, [r7, #8]
 800cb8c:	f7ff fee2 	bl	800c954 <BSP_SD_ReadBlocks_DMA>
 800cb90:	4603      	mov	r3, r0
 800cb92:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800cb94:	7fbb      	ldrb	r3, [r7, #30]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d124      	bne.n	800cbe4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cb9a:	4b15      	ldr	r3, [pc, #84]	; (800cbf0 <SD_read+0x90>)
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	f107 0112 	add.w	r1, r7, #18
 800cba2:	f247 5330 	movw	r3, #30000	; 0x7530
 800cba6:	2200      	movs	r2, #0
 800cba8:	f003 fa1a 	bl	800ffe0 <osMessageQueueGet>
 800cbac:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d117      	bne.n	800cbe4 <SD_read+0x84>
 800cbb4:	8a7b      	ldrh	r3, [r7, #18]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d114      	bne.n	800cbe4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800cbba:	f002 fe4d 	bl	800f858 <osKernelGetTickCount>
 800cbbe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cbc0:	e007      	b.n	800cbd2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cbc2:	f7ff fefb 	bl	800c9bc <BSP_SD_GetCardState>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <SD_read+0x72>
              {
                res = RES_OK;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cbd0:	e008      	b.n	800cbe4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cbd2:	f002 fe41 	bl	800f858 <osKernelGetTickCount>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	f247 522f 	movw	r2, #29999	; 0x752f
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d9ee      	bls.n	800cbc2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cbe4:	7ffb      	ldrb	r3, [r7, #31]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	240004f8 	.word	0x240004f8

0800cbf4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b088      	sub	sp, #32
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60b9      	str	r1, [r7, #8]
 800cbfc:	607a      	str	r2, [r7, #4]
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc08:	f247 5030 	movw	r0, #30000	; 0x7530
 800cc0c:	f7ff ff1c 	bl	800ca48 <SD_CheckStatusWithTimeout>
 800cc10:	4603      	mov	r3, r0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da01      	bge.n	800cc1a <SD_write+0x26>
  {
    return res;
 800cc16:	7ffb      	ldrb	r3, [r7, #31]
 800cc18:	e02d      	b.n	800cc76 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	f7ff feb2 	bl	800c988 <BSP_SD_WriteBlocks_DMA>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d124      	bne.n	800cc74 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cc2a:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <SD_write+0x8c>)
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f107 0112 	add.w	r1, r7, #18
 800cc32:	f247 5330 	movw	r3, #30000	; 0x7530
 800cc36:	2200      	movs	r2, #0
 800cc38:	f003 f9d2 	bl	800ffe0 <osMessageQueueGet>
 800cc3c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d117      	bne.n	800cc74 <SD_write+0x80>
 800cc44:	8a7b      	ldrh	r3, [r7, #18]
 800cc46:	2b02      	cmp	r3, #2
 800cc48:	d114      	bne.n	800cc74 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800cc4a:	f002 fe05 	bl	800f858 <osKernelGetTickCount>
 800cc4e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cc50:	e007      	b.n	800cc62 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc52:	f7ff feb3 	bl	800c9bc <BSP_SD_GetCardState>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <SD_write+0x6e>
          {
            res = RES_OK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	77fb      	strb	r3, [r7, #31]
            break;
 800cc60:	e008      	b.n	800cc74 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cc62:	f002 fdf9 	bl	800f858 <osKernelGetTickCount>
 800cc66:	4602      	mov	r2, r0
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	f247 522f 	movw	r2, #29999	; 0x752f
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d9ee      	bls.n	800cc52 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800cc74:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3720      	adds	r7, #32
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	240004f8 	.word	0x240004f8

0800cc84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08c      	sub	sp, #48	; 0x30
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	603a      	str	r2, [r7, #0]
 800cc8e:	71fb      	strb	r3, [r7, #7]
 800cc90:	460b      	mov	r3, r1
 800cc92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cc9a:	4b25      	ldr	r3, [pc, #148]	; (800cd30 <SD_ioctl+0xac>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <SD_ioctl+0x28>
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e03c      	b.n	800cd26 <SD_ioctl+0xa2>

  switch (cmd)
 800ccac:	79bb      	ldrb	r3, [r7, #6]
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	d834      	bhi.n	800cd1c <SD_ioctl+0x98>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <SD_ioctl+0x34>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800ccc9 	.word	0x0800ccc9
 800ccbc:	0800ccd1 	.word	0x0800ccd1
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800cd03 	.word	0x0800cd03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ccce:	e028      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ccd0:	f107 0308 	add.w	r3, r7, #8
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7ff fe81 	bl	800c9dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ccda:	6a3a      	ldr	r2, [r7, #32]
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cce6:	e01c      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cce8:	f107 0308 	add.w	r3, r7, #8
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fe75 	bl	800c9dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ccf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd00:	e00f      	b.n	800cd22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd02:	f107 0308 	add.w	r3, r7, #8
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fe68 	bl	800c9dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	0a5a      	lsrs	r2, r3, #9
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd1a:	e002      	b.n	800cd22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd1c:	2304      	movs	r3, #4
 800cd1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3730      	adds	r7, #48	; 0x30
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	2400000d 	.word	0x2400000d

0800cd34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	2000      	movs	r0, #0
 800cd3e:	f006 fc7d 	bl	801363c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800cd42:	4b23      	ldr	r3, [pc, #140]	; (800cdd0 <MX_LWIP_Init+0x9c>)
 800cd44:	2200      	movs	r2, #0
 800cd46:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800cd48:	4b22      	ldr	r3, [pc, #136]	; (800cdd4 <MX_LWIP_Init+0xa0>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800cd4e:	4b22      	ldr	r3, [pc, #136]	; (800cdd8 <MX_LWIP_Init+0xa4>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800cd54:	4b21      	ldr	r3, [pc, #132]	; (800cddc <MX_LWIP_Init+0xa8>)
 800cd56:	9302      	str	r3, [sp, #8]
 800cd58:	4b21      	ldr	r3, [pc, #132]	; (800cde0 <MX_LWIP_Init+0xac>)
 800cd5a:	9301      	str	r3, [sp, #4]
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <MX_LWIP_Init+0xa4>)
 800cd62:	4a1c      	ldr	r2, [pc, #112]	; (800cdd4 <MX_LWIP_Init+0xa0>)
 800cd64:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <MX_LWIP_Init+0x9c>)
 800cd66:	481f      	ldr	r0, [pc, #124]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd68:	f007 faea 	bl	8014340 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800cd6c:	481d      	ldr	r0, [pc, #116]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd6e:	f007 fca1 	bl	80146b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800cd72:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd78:	089b      	lsrs	r3, r3, #2
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800cd84:	4817      	ldr	r0, [pc, #92]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd86:	f007 fca5 	bl	80146d4 <netif_set_up>
 800cd8a:	e002      	b.n	800cd92 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800cd8c:	4815      	ldr	r0, [pc, #84]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd8e:	f007 fd0d 	bl	80147ac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800cd92:	4915      	ldr	r1, [pc, #84]	; (800cde8 <MX_LWIP_Init+0xb4>)
 800cd94:	4813      	ldr	r0, [pc, #76]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cd96:	f007 fda3 	bl	80148e0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800cd9a:	2224      	movs	r2, #36	; 0x24
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4813      	ldr	r0, [pc, #76]	; (800cdec <MX_LWIP_Init+0xb8>)
 800cda0:	f013 fc45 	bl	802062e <memset>
  attributes.name = "EthLink";
 800cda4:	4b11      	ldr	r3, [pc, #68]	; (800cdec <MX_LWIP_Init+0xb8>)
 800cda6:	4a12      	ldr	r2, [pc, #72]	; (800cdf0 <MX_LWIP_Init+0xbc>)
 800cda8:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800cdaa:	4b10      	ldr	r3, [pc, #64]	; (800cdec <MX_LWIP_Init+0xb8>)
 800cdac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cdb0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800cdb2:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <MX_LWIP_Init+0xb8>)
 800cdb4:	2210      	movs	r2, #16
 800cdb6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800cdb8:	4a0c      	ldr	r2, [pc, #48]	; (800cdec <MX_LWIP_Init+0xb8>)
 800cdba:	490a      	ldr	r1, [pc, #40]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cdbc:	480d      	ldr	r0, [pc, #52]	; (800cdf4 <MX_LWIP_Init+0xc0>)
 800cdbe:	f002 fd60 	bl	800f882 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800cdc2:	4808      	ldr	r0, [pc, #32]	; (800cde4 <MX_LWIP_Init+0xb0>)
 800cdc4:	f00e fef4 	bl	801bbb0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800cdc8:	bf00      	nop
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	24000534 	.word	0x24000534
 800cdd4:	24000538 	.word	0x24000538
 800cdd8:	2400053c 	.word	0x2400053c
 800cddc:	08013579 	.word	0x08013579
 800cde0:	0800d22d 	.word	0x0800d22d
 800cde4:	240004fc 	.word	0x240004fc
 800cde8:	0800cdf9 	.word	0x0800cdf9
 800cdec:	24000540 	.word	0x24000540
 800cdf0:	08021630 	.word	0x08021630
 800cdf4:	0800d4cd 	.word	0x0800d4cd

0800cdf8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b0aa      	sub	sp, #168	; 0xa8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800ce26:	f107 0310 	add.w	r3, r7, #16
 800ce2a:	2264      	movs	r2, #100	; 0x64
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f013 fbfd 	bl	802062e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ce34:	4b85      	ldr	r3, [pc, #532]	; (800d04c <low_level_init+0x240>)
 800ce36:	4a86      	ldr	r2, [pc, #536]	; (800d050 <low_level_init+0x244>)
 800ce38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800ce3e:	2380      	movs	r3, #128	; 0x80
 800ce40:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800ce42:	23e1      	movs	r3, #225	; 0xe1
 800ce44:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800ce46:	2300      	movs	r3, #0
 800ce48:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800ce52:	4a7e      	ldr	r2, [pc, #504]	; (800d04c <low_level_init+0x240>)
 800ce54:	f107 0308 	add.w	r3, r7, #8
 800ce58:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ce5a:	4b7c      	ldr	r3, [pc, #496]	; (800d04c <low_level_init+0x240>)
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ce60:	4b7a      	ldr	r3, [pc, #488]	; (800d04c <low_level_init+0x240>)
 800ce62:	4a7c      	ldr	r2, [pc, #496]	; (800d054 <low_level_init+0x248>)
 800ce64:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ce66:	4b79      	ldr	r3, [pc, #484]	; (800d04c <low_level_init+0x240>)
 800ce68:	4a7b      	ldr	r2, [pc, #492]	; (800d058 <low_level_init+0x24c>)
 800ce6a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800ce6c:	4b77      	ldr	r3, [pc, #476]	; (800d04c <low_level_init+0x240>)
 800ce6e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800ce72:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ce74:	4875      	ldr	r0, [pc, #468]	; (800d04c <low_level_init+0x240>)
 800ce76:	f7f4 fcb7 	bl	80017e8 <HAL_ETH_Init>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ce80:	2238      	movs	r2, #56	; 0x38
 800ce82:	2100      	movs	r1, #0
 800ce84:	4875      	ldr	r0, [pc, #468]	; (800d05c <low_level_init+0x250>)
 800ce86:	f013 fbd2 	bl	802062e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ce8a:	4b74      	ldr	r3, [pc, #464]	; (800d05c <low_level_init+0x250>)
 800ce8c:	2221      	movs	r2, #33	; 0x21
 800ce8e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ce90:	4b72      	ldr	r3, [pc, #456]	; (800d05c <low_level_init+0x250>)
 800ce92:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ce96:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800ce98:	4b70      	ldr	r3, [pc, #448]	; (800d05c <low_level_init+0x250>)
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800ce9e:	4870      	ldr	r0, [pc, #448]	; (800d060 <low_level_init+0x254>)
 800cea0:	f007 f908 	bl	80140b4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2206      	movs	r2, #6
 800cea8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800ceac:	4b67      	ldr	r3, [pc, #412]	; (800d04c <low_level_init+0x240>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	781a      	ldrb	r2, [r3, #0]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800ceb8:	4b64      	ldr	r3, [pc, #400]	; (800d04c <low_level_init+0x240>)
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	785a      	ldrb	r2, [r3, #1]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800cec4:	4b61      	ldr	r3, [pc, #388]	; (800d04c <low_level_init+0x240>)
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	789a      	ldrb	r2, [r3, #2]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800ced0:	4b5e      	ldr	r3, [pc, #376]	; (800d04c <low_level_init+0x240>)
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	78da      	ldrb	r2, [r3, #3]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800cedc:	4b5b      	ldr	r3, [pc, #364]	; (800d04c <low_level_init+0x240>)
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	791a      	ldrb	r2, [r3, #4]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800cee8:	4b58      	ldr	r3, [pc, #352]	; (800d04c <low_level_init+0x240>)
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	795a      	ldrb	r2, [r3, #5]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cefa:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cf02:	f043 030a 	orr.w	r3, r3, #10
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800cf0e:	2200      	movs	r2, #0
 800cf10:	2101      	movs	r1, #1
 800cf12:	2001      	movs	r0, #1
 800cf14:	f002 fe70 	bl	800fbf8 <osSemaphoreNew>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	4a52      	ldr	r2, [pc, #328]	; (800d064 <low_level_init+0x258>)
 800cf1c:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2101      	movs	r1, #1
 800cf22:	2001      	movs	r0, #1
 800cf24:	f002 fe68 	bl	800fbf8 <osSemaphoreNew>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	4a4f      	ldr	r2, [pc, #316]	; (800d068 <low_level_init+0x25c>)
 800cf2c:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800cf2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cf32:	2224      	movs	r2, #36	; 0x24
 800cf34:	2100      	movs	r1, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f013 fb79 	bl	802062e <memset>
  attributes.name = "EthIf";
 800cf3c:	4b4b      	ldr	r3, [pc, #300]	; (800d06c <low_level_init+0x260>)
 800cf3e:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800cf40:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800cf44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800cf48:	2330      	movs	r3, #48	; 0x30
 800cf4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800cf4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800cf52:	461a      	mov	r2, r3
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	4846      	ldr	r0, [pc, #280]	; (800d070 <low_level_init+0x264>)
 800cf58:	f002 fc93 	bl	800f882 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800cf5c:	4945      	ldr	r1, [pc, #276]	; (800d074 <low_level_init+0x268>)
 800cf5e:	4846      	ldr	r0, [pc, #280]	; (800d078 <low_level_init+0x26c>)
 800cf60:	f7f4 f8d3 	bl	800110a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800cf64:	4844      	ldr	r0, [pc, #272]	; (800d078 <low_level_init+0x26c>)
 800cf66:	f7f4 f902 	bl	800116e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800cf6a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d165      	bne.n	800d03e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cf72:	4841      	ldr	r0, [pc, #260]	; (800d078 <low_level_init+0x26c>)
 800cf74:	f7f4 f9a3 	bl	80012be <LAN8742_GetLinkState>
 800cf78:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800cf7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	dc06      	bgt.n	800cf92 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f007 fc7b 	bl	8014880 <netif_set_link_down>
      netif_set_down(netif);
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f007 fc0e 	bl	80147ac <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800cf90:	e057      	b.n	800d042 <low_level_init+0x236>
      switch (PHYLinkState)
 800cf92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf96:	3b02      	subs	r3, #2
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d82b      	bhi.n	800cff4 <low_level_init+0x1e8>
 800cf9c:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <low_level_init+0x198>)
 800cf9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa2:	bf00      	nop
 800cfa4:	0800cfb5 	.word	0x0800cfb5
 800cfa8:	0800cfc7 	.word	0x0800cfc7
 800cfac:	0800cfd7 	.word	0x0800cfd7
 800cfb0:	0800cfe7 	.word	0x0800cfe7
        duplex = ETH_FULLDUPLEX_MODE;
 800cfb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800cfbc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800cfc4:	e01f      	b.n	800d006 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800cfcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800cfd4:	e017      	b.n	800d006 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800cfd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800cfe4:	e00f      	b.n	800d006 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800cfec:	2300      	movs	r3, #0
 800cfee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800cff2:	e008      	b.n	800d006 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800cff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800cffc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d004:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d006:	f107 0310 	add.w	r3, r7, #16
 800d00a:	4619      	mov	r1, r3
 800d00c:	480f      	ldr	r0, [pc, #60]	; (800d04c <low_level_init+0x240>)
 800d00e:	f7f5 f857 	bl	80020c0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800d012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d016:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800d018:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d01c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d01e:	f107 0310 	add.w	r3, r7, #16
 800d022:	4619      	mov	r1, r3
 800d024:	4809      	ldr	r0, [pc, #36]	; (800d04c <low_level_init+0x240>)
 800d026:	f7f5 fa1f 	bl	8002468 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800d02a:	4808      	ldr	r0, [pc, #32]	; (800d04c <low_level_init+0x240>)
 800d02c:	f7f4 fcc2 	bl	80019b4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f007 fb4f 	bl	80146d4 <netif_set_up>
    netif_set_link_up(netif);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f007 fbea 	bl	8014810 <netif_set_link_up>
}
 800d03c:	e001      	b.n	800d042 <low_level_init+0x236>
    Error_Handler();
 800d03e:	f7f3 fca3 	bl	8000988 <Error_Handler>
}
 800d042:	bf00      	nop
 800d044:	37a8      	adds	r7, #168	; 0xa8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	24004ef8 	.word	0x24004ef8
 800d050:	40028000 	.word	0x40028000
 800d054:	240001ec 	.word	0x240001ec
 800d058:	2400018c 	.word	0x2400018c
 800d05c:	24004fa8 	.word	0x24004fa8
 800d060:	08024564 	.word	0x08024564
 800d064:	24004ef0 	.word	0x24004ef0
 800d068:	24004ef4 	.word	0x24004ef4
 800d06c:	08021638 	.word	0x08021638
 800d070:	0800d1d9 	.word	0x0800d1d9
 800d074:	24000010 	.word	0x24000010
 800d078:	24004fe0 	.word	0x24004fe0

0800d07c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b092      	sub	sp, #72	; 0x48
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800d086:	2300      	movs	r3, #0
 800d088:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800d094:	f107 030c 	add.w	r3, r7, #12
 800d098:	2230      	movs	r2, #48	; 0x30
 800d09a:	2100      	movs	r1, #0
 800d09c:	4618      	mov	r0, r3
 800d09e:	f013 fac6 	bl	802062e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800d0a2:	f107 030c 	add.w	r3, r7, #12
 800d0a6:	2230      	movs	r2, #48	; 0x30
 800d0a8:	2100      	movs	r1, #0
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f013 fabf 	bl	802062e <memset>

  for(q = p; q != NULL; q = q->next)
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0b4:	e045      	b.n	800d142 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800d0b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0b8:	2b03      	cmp	r3, #3
 800d0ba:	d902      	bls.n	800d0c2 <low_level_output+0x46>
      return ERR_IF;
 800d0bc:	f06f 030b 	mvn.w	r3, #11
 800d0c0:	e065      	b.n	800d18e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800d0c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0c4:	6859      	ldr	r1, [r3, #4]
 800d0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	3348      	adds	r3, #72	; 0x48
 800d0d2:	443b      	add	r3, r7
 800d0d4:	3b3c      	subs	r3, #60	; 0x3c
 800d0d6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800d0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0da:	895b      	ldrh	r3, [r3, #10]
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	005b      	lsls	r3, r3, #1
 800d0e4:	4413      	add	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	3348      	adds	r3, #72	; 0x48
 800d0ea:	443b      	add	r3, r7
 800d0ec:	3b38      	subs	r3, #56	; 0x38
 800d0ee:	6019      	str	r1, [r3, #0]

    if(i>0)
 800d0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d011      	beq.n	800d11a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800d0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f8:	1e5a      	subs	r2, r3, #1
 800d0fa:	f107 000c 	add.w	r0, r7, #12
 800d0fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d100:	460b      	mov	r3, r1
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	440b      	add	r3, r1
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	18c1      	adds	r1, r0, r3
 800d10a:	4613      	mov	r3, r2
 800d10c:	005b      	lsls	r3, r3, #1
 800d10e:	4413      	add	r3, r2
 800d110:	009b      	lsls	r3, r3, #2
 800d112:	3348      	adds	r3, #72	; 0x48
 800d114:	443b      	add	r3, r7
 800d116:	3b34      	subs	r3, #52	; 0x34
 800d118:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800d11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800d122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d124:	4613      	mov	r3, r2
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	4413      	add	r3, r2
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	3348      	adds	r3, #72	; 0x48
 800d12e:	443b      	add	r3, r7
 800d130:	3b34      	subs	r3, #52	; 0x34
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
    }

    i++;
 800d136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d138:	3301      	adds	r3, #1
 800d13a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800d13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	643b      	str	r3, [r7, #64]	; 0x40
 800d142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d144:	2b00      	cmp	r3, #0
 800d146:	d1b6      	bne.n	800d0b6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	891b      	ldrh	r3, [r3, #8]
 800d14c:	461a      	mov	r2, r3
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <low_level_output+0x11c>)
 800d150:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800d152:	4a11      	ldr	r2, [pc, #68]	; (800d198 <low_level_output+0x11c>)
 800d154:	f107 030c 	add.w	r3, r7, #12
 800d158:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800d15a:	4a0f      	ldr	r2, [pc, #60]	; (800d198 <low_level_output+0x11c>)
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800d160:	6838      	ldr	r0, [r7, #0]
 800d162:	f008 f811 	bl	8015188 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800d166:	490c      	ldr	r1, [pc, #48]	; (800d198 <low_level_output+0x11c>)
 800d168:	480c      	ldr	r0, [pc, #48]	; (800d19c <low_level_output+0x120>)
 800d16a:	f7f4 fd27 	bl	8001bbc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800d16e:	bf00      	nop
 800d170:	4b0b      	ldr	r3, [pc, #44]	; (800d1a0 <low_level_output+0x124>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f04f 31ff 	mov.w	r1, #4294967295
 800d178:	4618      	mov	r0, r3
 800d17a:	f002 fdc7 	bl	800fd0c <osSemaphoreAcquire>
 800d17e:	4603      	mov	r3, r0
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f5      	bne.n	800d170 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800d184:	4805      	ldr	r0, [pc, #20]	; (800d19c <low_level_output+0x120>)
 800d186:	f7f4 fe98 	bl	8001eba <HAL_ETH_ReleaseTxPacket>

  return errval;
 800d18a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3748      	adds	r7, #72	; 0x48
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	24004fa8 	.word	0x24004fa8
 800d19c:	24004ef8 	.word	0x24004ef8
 800d1a0:	24004ef4 	.word	0x24004ef4

0800d1a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800d1b0:	4b07      	ldr	r3, [pc, #28]	; (800d1d0 <low_level_input+0x2c>)
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d105      	bne.n	800d1c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800d1b8:	f107 030c 	add.w	r3, r7, #12
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4805      	ldr	r0, [pc, #20]	; (800d1d4 <low_level_input+0x30>)
 800d1c0:	f7f4 fd4d 	bl	8001c5e <HAL_ETH_ReadData>
  }

  return p;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	24004eec 	.word	0x24004eec
 800d1d4:	24004ef8 	.word	0x24004ef8

0800d1d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d1e8:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <ethernetif_input+0x50>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f002 fd8b 	bl	800fd0c <osSemaphoreAcquire>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1f5      	bne.n	800d1e8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800d1fc:	68b8      	ldr	r0, [r7, #8]
 800d1fe:	f7ff ffd1 	bl	800d1a4 <low_level_input>
 800d202:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00a      	beq.n	800d220 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	68b9      	ldr	r1, [r7, #8]
 800d210:	68f8      	ldr	r0, [r7, #12]
 800d212:	4798      	blx	r3
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f007 ff0e 	bl	801503c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1ea      	bne.n	800d1fc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d226:	e7df      	b.n	800d1e8 <ethernetif_input+0x10>
 800d228:	24004ef0 	.word	0x24004ef0

0800d22c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <ethernetif_init+0x1c>
 800d23a:	4b0e      	ldr	r3, [pc, #56]	; (800d274 <ethernetif_init+0x48>)
 800d23c:	f240 12f5 	movw	r2, #501	; 0x1f5
 800d240:	490d      	ldr	r1, [pc, #52]	; (800d278 <ethernetif_init+0x4c>)
 800d242:	480e      	ldr	r0, [pc, #56]	; (800d27c <ethernetif_init+0x50>)
 800d244:	f013 fa90 	bl	8020768 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2273      	movs	r2, #115	; 0x73
 800d24c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2274      	movs	r2, #116	; 0x74
 800d254:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a09      	ldr	r2, [pc, #36]	; (800d280 <ethernetif_init+0x54>)
 800d25c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a08      	ldr	r2, [pc, #32]	; (800d284 <ethernetif_init+0x58>)
 800d262:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff fdd1 	bl	800ce0c <low_level_init>

  return ERR_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	08021640 	.word	0x08021640
 800d278:	0802165c 	.word	0x0802165c
 800d27c:	0802166c 	.word	0x0802166c
 800d280:	0801da7d 	.word	0x0801da7d
 800d284:	0800d07d 	.word	0x0800d07d

0800d288 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800d294:	68f9      	ldr	r1, [r7, #12]
 800d296:	4809      	ldr	r0, [pc, #36]	; (800d2bc <pbuf_free_custom+0x34>)
 800d298:	f006 fffc 	bl	8014294 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800d29c:	4b08      	ldr	r3, [pc, #32]	; (800d2c0 <pbuf_free_custom+0x38>)
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d107      	bne.n	800d2b4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800d2a4:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <pbuf_free_custom+0x38>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800d2aa:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <pbuf_free_custom+0x3c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f002 fd7e 	bl	800fdb0 <osSemaphoreRelease>
  }
}
 800d2b4:	bf00      	nop
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	08024564 	.word	0x08024564
 800d2c0:	24004eec 	.word	0x24004eec
 800d2c4:	24004ef0 	.word	0x24004ef0

0800d2c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d2cc:	f7f4 f8ce 	bl	800146c <HAL_GetTick>
 800d2d0:	4603      	mov	r3, r0
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08e      	sub	sp, #56	; 0x38
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	605a      	str	r2, [r3, #4]
 800d2ea:	609a      	str	r2, [r3, #8]
 800d2ec:	60da      	str	r2, [r3, #12]
 800d2ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a49      	ldr	r2, [pc, #292]	; (800d41c <HAL_ETH_MspInit+0x144>)
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	f040 808b 	bne.w	800d412 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800d2fc:	4b48      	ldr	r3, [pc, #288]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d2fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d302:	4a47      	ldr	r2, [pc, #284]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d308:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d30c:	4b44      	ldr	r3, [pc, #272]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d30e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d316:	623b      	str	r3, [r7, #32]
 800d318:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800d31a:	4b41      	ldr	r3, [pc, #260]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d31c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d320:	4a3f      	ldr	r2, [pc, #252]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d326:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d32a:	4b3d      	ldr	r3, [pc, #244]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d32c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d334:	61fb      	str	r3, [r7, #28]
 800d336:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800d338:	4b39      	ldr	r3, [pc, #228]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d33a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d33e:	4a38      	ldr	r2, [pc, #224]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d344:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d348:	4b35      	ldr	r3, [pc, #212]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d34a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d352:	61bb      	str	r3, [r7, #24]
 800d354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d35c:	4a30      	ldr	r2, [pc, #192]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d35e:	f043 0304 	orr.w	r3, r3, #4
 800d362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d366:	4b2e      	ldr	r3, [pc, #184]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d36c:	f003 0304 	and.w	r3, r3, #4
 800d370:	617b      	str	r3, [r7, #20]
 800d372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d374:	4b2a      	ldr	r3, [pc, #168]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d37a:	4a29      	ldr	r2, [pc, #164]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d37c:	f043 0301 	orr.w	r3, r3, #1
 800d380:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d384:	4b26      	ldr	r3, [pc, #152]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
 800d390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d392:	4b23      	ldr	r3, [pc, #140]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d398:	4a21      	ldr	r2, [pc, #132]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d39a:	f043 0302 	orr.w	r3, r3, #2
 800d39e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d3a2:	4b1f      	ldr	r3, [pc, #124]	; (800d420 <HAL_ETH_MspInit+0x148>)
 800d3a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d3a8:	f003 0302 	and.w	r3, r3, #2
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800d3b0:	2332      	movs	r3, #50	; 0x32
 800d3b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d3c0:	230b      	movs	r3, #11
 800d3c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d3c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4816      	ldr	r0, [pc, #88]	; (800d424 <HAL_ETH_MspInit+0x14c>)
 800d3cc:	f7f6 fcaa 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800d3d0:	2386      	movs	r3, #134	; 0x86
 800d3d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3d4:	2302      	movs	r3, #2
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d3e0:	230b      	movs	r3, #11
 800d3e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	480f      	ldr	r0, [pc, #60]	; (800d428 <HAL_ETH_MspInit+0x150>)
 800d3ec:	f7f6 fc9a 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800d3f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d3f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3fe:	2300      	movs	r3, #0
 800d400:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d402:	230b      	movs	r3, #11
 800d404:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d40a:	4619      	mov	r1, r3
 800d40c:	4807      	ldr	r0, [pc, #28]	; (800d42c <HAL_ETH_MspInit+0x154>)
 800d40e:	f7f6 fc89 	bl	8003d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d412:	bf00      	nop
 800d414:	3738      	adds	r7, #56	; 0x38
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	40028000 	.word	0x40028000
 800d420:	58024400 	.word	0x58024400
 800d424:	58020800 	.word	0x58020800
 800d428:	58020000 	.word	0x58020000
 800d42c:	58020400 	.word	0x58020400

0800d430 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800d434:	4802      	ldr	r0, [pc, #8]	; (800d440 <ETH_PHY_IO_Init+0x10>)
 800d436:	f7f5 f831 	bl	800249c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	24004ef8 	.word	0x24004ef8

0800d444 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800d444:	b480      	push	{r7}
 800d446:	af00      	add	r7, sp, #0
  return 0;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	68ba      	ldr	r2, [r7, #8]
 800d464:	68f9      	ldr	r1, [r7, #12]
 800d466:	4807      	ldr	r0, [pc, #28]	; (800d484 <ETH_PHY_IO_ReadReg+0x30>)
 800d468:	f7f4 fd82 	bl	8001f70 <HAL_ETH_ReadPHYRegister>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d002      	beq.n	800d478 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800d472:	f04f 33ff 	mov.w	r3, #4294967295
 800d476:	e000      	b.n	800d47a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	24004ef8 	.word	0x24004ef8

0800d488 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	68f9      	ldr	r1, [r7, #12]
 800d49a:	4807      	ldr	r0, [pc, #28]	; (800d4b8 <ETH_PHY_IO_WriteReg+0x30>)
 800d49c:	f7f4 fdbc 	bl	8002018 <HAL_ETH_WritePHYRegister>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d002      	beq.n	800d4ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800d4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4aa:	e000      	b.n	800d4ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	24004ef8 	.word	0x24004ef8

0800d4bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d4c0:	f7f3 ffd4 	bl	800146c <HAL_GetTick>
 800d4c4:	4603      	mov	r3, r0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b0a0      	sub	sp, #128	; 0x80
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800d4d4:	f107 0308 	add.w	r3, r7, #8
 800d4d8:	2264      	movs	r2, #100	; 0x64
 800d4da:	2100      	movs	r1, #0
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f013 f8a6 	bl	802062e <memset>
  int32_t PHYLinkState = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d4f6:	483a      	ldr	r0, [pc, #232]	; (800d5e0 <ethernet_link_thread+0x114>)
 800d4f8:	f7f3 fee1 	bl	80012be <LAN8742_GetLinkState>
 800d4fc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800d4fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d504:	089b      	lsrs	r3, r3, #2
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00c      	beq.n	800d52a <ethernet_link_thread+0x5e>
 800d510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d512:	2b01      	cmp	r3, #1
 800d514:	dc09      	bgt.n	800d52a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800d516:	4833      	ldr	r0, [pc, #204]	; (800d5e4 <ethernet_link_thread+0x118>)
 800d518:	f7f4 fad8 	bl	8001acc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800d51c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d51e:	f007 f945 	bl	80147ac <netif_set_down>
    netif_set_link_down(netif);
 800d522:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d524:	f007 f9ac 	bl	8014880 <netif_set_link_down>
 800d528:	e055      	b.n	800d5d6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800d52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d52c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d530:	f003 0304 	and.w	r3, r3, #4
 800d534:	2b00      	cmp	r3, #0
 800d536:	d14e      	bne.n	800d5d6 <ethernet_link_thread+0x10a>
 800d538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	dd4b      	ble.n	800d5d6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800d53e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d540:	3b02      	subs	r3, #2
 800d542:	2b03      	cmp	r3, #3
 800d544:	d82a      	bhi.n	800d59c <ethernet_link_thread+0xd0>
 800d546:	a201      	add	r2, pc, #4	; (adr r2, 800d54c <ethernet_link_thread+0x80>)
 800d548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d54c:	0800d55d 	.word	0x0800d55d
 800d550:	0800d56f 	.word	0x0800d56f
 800d554:	0800d57f 	.word	0x0800d57f
 800d558:	0800d58f 	.word	0x0800d58f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d55c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d560:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d566:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d568:	2301      	movs	r3, #1
 800d56a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d56c:	e017      	b.n	800d59e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d56e:	2300      	movs	r3, #0
 800d570:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800d572:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d576:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d578:	2301      	movs	r3, #1
 800d57a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d57c:	e00f      	b.n	800d59e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800d57e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d582:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d584:	2300      	movs	r3, #0
 800d586:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d588:	2301      	movs	r3, #1
 800d58a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d58c:	e007      	b.n	800d59e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800d58e:	2300      	movs	r3, #0
 800d590:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800d592:	2300      	movs	r3, #0
 800d594:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800d596:	2301      	movs	r3, #1
 800d598:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800d59a:	e000      	b.n	800d59e <ethernet_link_thread+0xd2>
    default:
      break;
 800d59c:	bf00      	nop
    }

    if(linkchanged)
 800d59e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d018      	beq.n	800d5d6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d5a4:	f107 0308 	add.w	r3, r7, #8
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	480e      	ldr	r0, [pc, #56]	; (800d5e4 <ethernet_link_thread+0x118>)
 800d5ac:	f7f4 fd88 	bl	80020c0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800d5b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5b2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800d5b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5b6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d5b8:	f107 0308 	add.w	r3, r7, #8
 800d5bc:	4619      	mov	r1, r3
 800d5be:	4809      	ldr	r0, [pc, #36]	; (800d5e4 <ethernet_link_thread+0x118>)
 800d5c0:	f7f4 ff52 	bl	8002468 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800d5c4:	4807      	ldr	r0, [pc, #28]	; (800d5e4 <ethernet_link_thread+0x118>)
 800d5c6:	f7f4 f9f5 	bl	80019b4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800d5ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5cc:	f007 f882 	bl	80146d4 <netif_set_up>
      netif_set_link_up(netif);
 800d5d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d5d2:	f007 f91d 	bl	8014810 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800d5d6:	2064      	movs	r0, #100	; 0x64
 800d5d8:	f002 f9e5 	bl	800f9a6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d5dc:	e78b      	b.n	800d4f6 <ethernet_link_thread+0x2a>
 800d5de:	bf00      	nop
 800d5e0:	24004fe0 	.word	0x24004fe0
 800d5e4:	24004ef8 	.word	0x24004ef8

0800d5e8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b086      	sub	sp, #24
 800d5ec:	af02      	add	r7, sp, #8
 800d5ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800d5f0:	4812      	ldr	r0, [pc, #72]	; (800d63c <HAL_ETH_RxAllocateCallback+0x54>)
 800d5f2:	f006 fddb 	bl	80141ac <memp_malloc_pool>
 800d5f6:	60f8      	str	r0, [r7, #12]
  if (p)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d014      	beq.n	800d628 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f103 0220 	add.w	r2, r3, #32
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4a0d      	ldr	r2, [pc, #52]	; (800d640 <HAL_ETH_RxAllocateCallback+0x58>)
 800d60c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d616:	9201      	str	r2, [sp, #4]
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2241      	movs	r2, #65	; 0x41
 800d61e:	2100      	movs	r1, #0
 800d620:	2000      	movs	r0, #0
 800d622:	f007 fb51 	bl	8014cc8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d626:	e005      	b.n	800d634 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d628:	4b06      	ldr	r3, [pc, #24]	; (800d644 <HAL_ETH_RxAllocateCallback+0x5c>)
 800d62a:	2201      	movs	r2, #1
 800d62c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
}
 800d634:	bf00      	nop
 800d636:	3710      	adds	r7, #16
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	08024564 	.word	0x08024564
 800d640:	0800d289 	.word	0x0800d289
 800d644:	24004eec 	.word	0x24004eec

0800d648 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d648:	b480      	push	{r7}
 800d64a:	b08d      	sub	sp, #52	; 0x34
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800d65e:	2300      	movs	r3, #0
 800d660:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3b20      	subs	r3, #32
 800d666:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d670:	2200      	movs	r2, #0
 800d672:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d676:	887a      	ldrh	r2, [r7, #2]
 800d678:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d103      	bne.n	800d68a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d686:	601a      	str	r2, [r3, #0]
 800d688:	e003      	b.n	800d692 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d690:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d696:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d69e:	e009      	b.n	800d6b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a2:	891a      	ldrh	r2, [r3, #8]
 800d6a4:	887b      	ldrh	r3, [r7, #2]
 800d6a6:	4413      	add	r3, r2
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1f2      	bne.n	800d6a0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d6ba:	887b      	ldrh	r3, [r7, #2]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	623a      	str	r2, [r7, #32]
 800d6c0:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	dd1d      	ble.n	800d704 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800d6c8:	6a3b      	ldr	r3, [r7, #32]
 800d6ca:	f003 021f 	and.w	r2, r3, #31
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800d6d4:	6a3b      	ldr	r3, [r7, #32]
 800d6d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800d6d8:	f3bf 8f4f 	dsb	sy
}
 800d6dc:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800d6de:	4a0d      	ldr	r2, [pc, #52]	; (800d714 <HAL_ETH_RxLinkCallback+0xcc>)
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	3320      	adds	r3, #32
 800d6ea:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	3b20      	subs	r3, #32
 800d6f0:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	dcf2      	bgt.n	800d6de <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800d6f8:	f3bf 8f4f 	dsb	sy
}
 800d6fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d6fe:	f3bf 8f6f 	isb	sy
}
 800d702:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800d704:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d706:	bf00      	nop
 800d708:	3734      	adds	r7, #52	; 0x34
 800d70a:	46bd      	mov	sp, r7
 800d70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop
 800d714:	e000ed00 	.word	0xe000ed00

0800d718 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f007 fc8b 	bl	801503c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
	...

0800d730 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	460b      	mov	r3, r1
 800d73a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d73c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d740:	f012 fdf6 	bl	8020330 <USBD_static_malloc>
 800d744:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d109      	bne.n	800d760 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32b0      	adds	r2, #176	; 0xb0
 800d756:	2100      	movs	r1, #0
 800d758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d75c:	2302      	movs	r3, #2
 800d75e:	e0d4      	b.n	800d90a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d760:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d764:	2100      	movs	r1, #0
 800d766:	68f8      	ldr	r0, [r7, #12]
 800d768:	f012 ff61 	bl	802062e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	32b0      	adds	r2, #176	; 0xb0
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	32b0      	adds	r2, #176	; 0xb0
 800d786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	7c1b      	ldrb	r3, [r3, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d138      	bne.n	800d80a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d798:	4b5e      	ldr	r3, [pc, #376]	; (800d914 <USBD_CDC_Init+0x1e4>)
 800d79a:	7819      	ldrb	r1, [r3, #0]
 800d79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7a0:	2202      	movs	r2, #2
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f012 fca1 	bl	80200ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d7a8:	4b5a      	ldr	r3, [pc, #360]	; (800d914 <USBD_CDC_Init+0x1e4>)
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	f003 020f 	and.w	r2, r3, #15
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3324      	adds	r3, #36	; 0x24
 800d7be:	2201      	movs	r2, #1
 800d7c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d7c2:	4b55      	ldr	r3, [pc, #340]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d7c4:	7819      	ldrb	r1, [r3, #0]
 800d7c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f012 fc8c 	bl	80200ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d7d2:	4b51      	ldr	r3, [pc, #324]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d7d4:	781b      	ldrb	r3, [r3, #0]
 800d7d6:	f003 020f 	and.w	r2, r3, #15
 800d7da:	6879      	ldr	r1, [r7, #4]
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	440b      	add	r3, r1
 800d7e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d7ee:	4b4b      	ldr	r3, [pc, #300]	; (800d91c <USBD_CDC_Init+0x1ec>)
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	f003 020f 	and.w	r2, r3, #15
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	4413      	add	r3, r2
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	440b      	add	r3, r1
 800d802:	3326      	adds	r3, #38	; 0x26
 800d804:	2210      	movs	r2, #16
 800d806:	801a      	strh	r2, [r3, #0]
 800d808:	e035      	b.n	800d876 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d80a:	4b42      	ldr	r3, [pc, #264]	; (800d914 <USBD_CDC_Init+0x1e4>)
 800d80c:	7819      	ldrb	r1, [r3, #0]
 800d80e:	2340      	movs	r3, #64	; 0x40
 800d810:	2202      	movs	r2, #2
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f012 fc69 	bl	80200ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d818:	4b3e      	ldr	r3, [pc, #248]	; (800d914 <USBD_CDC_Init+0x1e4>)
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	f003 020f 	and.w	r2, r3, #15
 800d820:	6879      	ldr	r1, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	440b      	add	r3, r1
 800d82c:	3324      	adds	r3, #36	; 0x24
 800d82e:	2201      	movs	r2, #1
 800d830:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d832:	4b39      	ldr	r3, [pc, #228]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d834:	7819      	ldrb	r1, [r3, #0]
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	2202      	movs	r2, #2
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f012 fc55 	bl	80200ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d840:	4b35      	ldr	r3, [pc, #212]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	f003 020f 	and.w	r2, r3, #15
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	440b      	add	r3, r1
 800d854:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d858:	2201      	movs	r2, #1
 800d85a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d85c:	4b2f      	ldr	r3, [pc, #188]	; (800d91c <USBD_CDC_Init+0x1ec>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	f003 020f 	and.w	r2, r3, #15
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	4613      	mov	r3, r2
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	440b      	add	r3, r1
 800d870:	3326      	adds	r3, #38	; 0x26
 800d872:	2210      	movs	r2, #16
 800d874:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d876:	4b29      	ldr	r3, [pc, #164]	; (800d91c <USBD_CDC_Init+0x1ec>)
 800d878:	7819      	ldrb	r1, [r3, #0]
 800d87a:	2308      	movs	r3, #8
 800d87c:	2203      	movs	r2, #3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f012 fc33 	bl	80200ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d884:	4b25      	ldr	r3, [pc, #148]	; (800d91c <USBD_CDC_Init+0x1ec>)
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	f003 020f 	and.w	r2, r3, #15
 800d88c:	6879      	ldr	r1, [r7, #4]
 800d88e:	4613      	mov	r3, r2
 800d890:	009b      	lsls	r3, r3, #2
 800d892:	4413      	add	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	440b      	add	r3, r1
 800d898:	3324      	adds	r3, #36	; 0x24
 800d89a:	2201      	movs	r2, #1
 800d89c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	33b0      	adds	r3, #176	; 0xb0
 800d8b0:	009b      	lsls	r3, r3, #2
 800d8b2:	4413      	add	r3, r2
 800d8b4:	685b      	ldr	r3, [r3, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d101      	bne.n	800d8d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	e018      	b.n	800d90a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7c1b      	ldrb	r3, [r3, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d10a      	bne.n	800d8f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d8e0:	4b0d      	ldr	r3, [pc, #52]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d8e2:	7819      	ldrb	r1, [r3, #0]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d8ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f012 fcea 	bl	80202c8 <USBD_LL_PrepareReceive>
 800d8f4:	e008      	b.n	800d908 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d8f6:	4b08      	ldr	r3, [pc, #32]	; (800d918 <USBD_CDC_Init+0x1e8>)
 800d8f8:	7819      	ldrb	r1, [r3, #0]
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f012 fce0 	bl	80202c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	3710      	adds	r7, #16
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	240000ab 	.word	0x240000ab
 800d918:	240000ac 	.word	0x240000ac
 800d91c:	240000ad 	.word	0x240000ad

0800d920 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d92c:	4b3a      	ldr	r3, [pc, #232]	; (800da18 <USBD_CDC_DeInit+0xf8>)
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	4619      	mov	r1, r3
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f012 fbff 	bl	8020136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d938:	4b37      	ldr	r3, [pc, #220]	; (800da18 <USBD_CDC_DeInit+0xf8>)
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 020f 	and.w	r2, r3, #15
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	440b      	add	r3, r1
 800d94c:	3324      	adds	r3, #36	; 0x24
 800d94e:	2200      	movs	r2, #0
 800d950:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d952:	4b32      	ldr	r3, [pc, #200]	; (800da1c <USBD_CDC_DeInit+0xfc>)
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	4619      	mov	r1, r3
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f012 fbec 	bl	8020136 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d95e:	4b2f      	ldr	r3, [pc, #188]	; (800da1c <USBD_CDC_DeInit+0xfc>)
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	f003 020f 	and.w	r2, r3, #15
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	4613      	mov	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	440b      	add	r3, r1
 800d972:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d976:	2200      	movs	r2, #0
 800d978:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d97a:	4b29      	ldr	r3, [pc, #164]	; (800da20 <USBD_CDC_DeInit+0x100>)
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	4619      	mov	r1, r3
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f012 fbd8 	bl	8020136 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d986:	4b26      	ldr	r3, [pc, #152]	; (800da20 <USBD_CDC_DeInit+0x100>)
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	f003 020f 	and.w	r2, r3, #15
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	3324      	adds	r3, #36	; 0x24
 800d99c:	2200      	movs	r2, #0
 800d99e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d9a0:	4b1f      	ldr	r3, [pc, #124]	; (800da20 <USBD_CDC_DeInit+0x100>)
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	f003 020f 	and.w	r2, r3, #15
 800d9a8:	6879      	ldr	r1, [r7, #4]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	009b      	lsls	r3, r3, #2
 800d9b2:	440b      	add	r3, r1
 800d9b4:	3326      	adds	r3, #38	; 0x26
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	32b0      	adds	r2, #176	; 0xb0
 800d9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d01f      	beq.n	800da0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	33b0      	adds	r3, #176	; 0xb0
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	32b0      	adds	r2, #176	; 0xb0
 800d9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f012 fcac 	bl	802034c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	32b0      	adds	r2, #176	; 0xb0
 800d9fe:	2100      	movs	r1, #0
 800da00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3708      	adds	r7, #8
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	240000ab 	.word	0x240000ab
 800da1c:	240000ac 	.word	0x240000ac
 800da20:	240000ad 	.word	0x240000ad

0800da24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
 800da2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	32b0      	adds	r2, #176	; 0xb0
 800da38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800da3e:	2300      	movs	r3, #0
 800da40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800da42:	2300      	movs	r3, #0
 800da44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	e0bf      	b.n	800dbd4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d050      	beq.n	800db02 <USBD_CDC_Setup+0xde>
 800da60:	2b20      	cmp	r3, #32
 800da62:	f040 80af 	bne.w	800dbc4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	88db      	ldrh	r3, [r3, #6]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d03a      	beq.n	800dae4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	b25b      	sxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	da1b      	bge.n	800dab0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	33b0      	adds	r3, #176	; 0xb0
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	689b      	ldr	r3, [r3, #8]
 800da8a:	683a      	ldr	r2, [r7, #0]
 800da8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800da8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800da90:	683a      	ldr	r2, [r7, #0]
 800da92:	88d2      	ldrh	r2, [r2, #6]
 800da94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	88db      	ldrh	r3, [r3, #6]
 800da9a:	2b07      	cmp	r3, #7
 800da9c:	bf28      	it	cs
 800da9e:	2307      	movcs	r3, #7
 800daa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	89fa      	ldrh	r2, [r7, #14]
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f001 fd49 	bl	800f540 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800daae:	e090      	b.n	800dbd2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	785a      	ldrb	r2, [r3, #1]
 800dab4:	693b      	ldr	r3, [r7, #16]
 800dab6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	88db      	ldrh	r3, [r3, #6]
 800dabe:	2b3f      	cmp	r3, #63	; 0x3f
 800dac0:	d803      	bhi.n	800daca <USBD_CDC_Setup+0xa6>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	88db      	ldrh	r3, [r3, #6]
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	e000      	b.n	800dacc <USBD_CDC_Setup+0xa8>
 800daca:	2240      	movs	r2, #64	; 0x40
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dad2:	6939      	ldr	r1, [r7, #16]
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800dada:	461a      	mov	r2, r3
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 fd5b 	bl	800f598 <USBD_CtlPrepareRx>
      break;
 800dae2:	e076      	b.n	800dbd2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	33b0      	adds	r3, #176	; 0xb0
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	7850      	ldrb	r0, [r2, #1]
 800dafa:	2200      	movs	r2, #0
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	4798      	blx	r3
      break;
 800db00:	e067      	b.n	800dbd2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	785b      	ldrb	r3, [r3, #1]
 800db06:	2b0b      	cmp	r3, #11
 800db08:	d851      	bhi.n	800dbae <USBD_CDC_Setup+0x18a>
 800db0a:	a201      	add	r2, pc, #4	; (adr r2, 800db10 <USBD_CDC_Setup+0xec>)
 800db0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db10:	0800db41 	.word	0x0800db41
 800db14:	0800dbbd 	.word	0x0800dbbd
 800db18:	0800dbaf 	.word	0x0800dbaf
 800db1c:	0800dbaf 	.word	0x0800dbaf
 800db20:	0800dbaf 	.word	0x0800dbaf
 800db24:	0800dbaf 	.word	0x0800dbaf
 800db28:	0800dbaf 	.word	0x0800dbaf
 800db2c:	0800dbaf 	.word	0x0800dbaf
 800db30:	0800dbaf 	.word	0x0800dbaf
 800db34:	0800dbaf 	.word	0x0800dbaf
 800db38:	0800db6b 	.word	0x0800db6b
 800db3c:	0800db95 	.word	0x0800db95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d107      	bne.n	800db5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800db4c:	f107 030a 	add.w	r3, r7, #10
 800db50:	2202      	movs	r2, #2
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f001 fcf3 	bl	800f540 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db5a:	e032      	b.n	800dbc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800db5c:	6839      	ldr	r1, [r7, #0]
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f001 fc7d 	bl	800f45e <USBD_CtlError>
            ret = USBD_FAIL;
 800db64:	2303      	movs	r3, #3
 800db66:	75fb      	strb	r3, [r7, #23]
          break;
 800db68:	e02b      	b.n	800dbc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b03      	cmp	r3, #3
 800db74:	d107      	bne.n	800db86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800db76:	f107 030d 	add.w	r3, r7, #13
 800db7a:	2201      	movs	r2, #1
 800db7c:	4619      	mov	r1, r3
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fcde 	bl	800f540 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800db84:	e01d      	b.n	800dbc2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f001 fc68 	bl	800f45e <USBD_CtlError>
            ret = USBD_FAIL;
 800db8e:	2303      	movs	r3, #3
 800db90:	75fb      	strb	r3, [r7, #23]
          break;
 800db92:	e016      	b.n	800dbc2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d00f      	beq.n	800dbc0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f001 fc5b 	bl	800f45e <USBD_CtlError>
            ret = USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800dbac:	e008      	b.n	800dbc0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800dbae:	6839      	ldr	r1, [r7, #0]
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 fc54 	bl	800f45e <USBD_CtlError>
          ret = USBD_FAIL;
 800dbb6:	2303      	movs	r3, #3
 800dbb8:	75fb      	strb	r3, [r7, #23]
          break;
 800dbba:	e002      	b.n	800dbc2 <USBD_CDC_Setup+0x19e>
          break;
 800dbbc:	bf00      	nop
 800dbbe:	e008      	b.n	800dbd2 <USBD_CDC_Setup+0x1ae>
          break;
 800dbc0:	bf00      	nop
      }
      break;
 800dbc2:	e006      	b.n	800dbd2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f001 fc49 	bl	800f45e <USBD_CtlError>
      ret = USBD_FAIL;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	75fb      	strb	r3, [r7, #23]
      break;
 800dbd0:	bf00      	nop
  }

  return (uint8_t)ret;
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3718      	adds	r7, #24
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	32b0      	adds	r2, #176	; 0xb0
 800dbfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e065      	b.n	800dcd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	32b0      	adds	r2, #176	; 0xb0
 800dc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dc16:	78fb      	ldrb	r3, [r7, #3]
 800dc18:	f003 020f 	and.w	r2, r3, #15
 800dc1c:	6879      	ldr	r1, [r7, #4]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4413      	add	r3, r2
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	440b      	add	r3, r1
 800dc28:	3318      	adds	r3, #24
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d02f      	beq.n	800dc90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dc30:	78fb      	ldrb	r3, [r7, #3]
 800dc32:	f003 020f 	and.w	r2, r3, #15
 800dc36:	6879      	ldr	r1, [r7, #4]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	4413      	add	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	440b      	add	r3, r1
 800dc42:	3318      	adds	r3, #24
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	78fb      	ldrb	r3, [r7, #3]
 800dc48:	f003 010f 	and.w	r1, r3, #15
 800dc4c:	68f8      	ldr	r0, [r7, #12]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	00db      	lsls	r3, r3, #3
 800dc52:	440b      	add	r3, r1
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	4403      	add	r3, r0
 800dc58:	3344      	adds	r3, #68	; 0x44
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800dc60:	fb01 f303 	mul.w	r3, r1, r3
 800dc64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d112      	bne.n	800dc90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dc6a:	78fb      	ldrb	r3, [r7, #3]
 800dc6c:	f003 020f 	and.w	r2, r3, #15
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	4613      	mov	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	009b      	lsls	r3, r3, #2
 800dc7a:	440b      	add	r3, r1
 800dc7c:	3318      	adds	r3, #24
 800dc7e:	2200      	movs	r2, #0
 800dc80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dc82:	78f9      	ldrb	r1, [r7, #3]
 800dc84:	2300      	movs	r3, #0
 800dc86:	2200      	movs	r2, #0
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f012 fafc 	bl	8020286 <USBD_LL_Transmit>
 800dc8e:	e01f      	b.n	800dcd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2200      	movs	r2, #0
 800dc94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	33b0      	adds	r3, #176	; 0xb0
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4413      	add	r3, r2
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d010      	beq.n	800dcd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	33b0      	adds	r3, #176	; 0xb0
 800dcb8:	009b      	lsls	r3, r3, #2
 800dcba:	4413      	add	r3, r2
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800dcc6:	68ba      	ldr	r2, [r7, #8]
 800dcc8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800dccc:	78fa      	ldrb	r2, [r7, #3]
 800dcce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
 800dce2:	460b      	mov	r3, r1
 800dce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	32b0      	adds	r2, #176	; 0xb0
 800dcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	32b0      	adds	r2, #176	; 0xb0
 800dd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dd08:	2303      	movs	r3, #3
 800dd0a:	e01a      	b.n	800dd42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dd0c:	78fb      	ldrb	r3, [r7, #3]
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f012 fafa 	bl	802030a <USBD_LL_GetRxDataSize>
 800dd16:	4602      	mov	r2, r0
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	33b0      	adds	r3, #176	; 0xb0
 800dd28:	009b      	lsls	r3, r3, #2
 800dd2a:	4413      	add	r3, r2
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800dd36:	68fa      	ldr	r2, [r7, #12]
 800dd38:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	32b0      	adds	r2, #176	; 0xb0
 800dd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e025      	b.n	800ddb8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	33b0      	adds	r3, #176	; 0xb0
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d01a      	beq.n	800ddb6 <USBD_CDC_EP0_RxReady+0x6c>
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800dd86:	2bff      	cmp	r3, #255	; 0xff
 800dd88:	d015      	beq.n	800ddb6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	33b0      	adds	r3, #176	; 0xb0
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	4413      	add	r3, r2
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800dda2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dda4:	68fa      	ldr	r2, [r7, #12]
 800dda6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ddaa:	b292      	uxth	r2, r2
 800ddac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	22ff      	movs	r2, #255	; 0xff
 800ddb2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ddb6:	2300      	movs	r3, #0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3710      	adds	r7, #16
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b086      	sub	sp, #24
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ddc8:	2182      	movs	r1, #130	; 0x82
 800ddca:	4818      	ldr	r0, [pc, #96]	; (800de2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ddcc:	f000 fd0f 	bl	800e7ee <USBD_GetEpDesc>
 800ddd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ddd2:	2101      	movs	r1, #1
 800ddd4:	4815      	ldr	r0, [pc, #84]	; (800de2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ddd6:	f000 fd0a 	bl	800e7ee <USBD_GetEpDesc>
 800ddda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dddc:	2181      	movs	r1, #129	; 0x81
 800ddde:	4813      	ldr	r0, [pc, #76]	; (800de2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dde0:	f000 fd05 	bl	800e7ee <USBD_GetEpDesc>
 800dde4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2210      	movs	r2, #16
 800ddf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d006      	beq.n	800de06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de00:	711a      	strb	r2, [r3, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d006      	beq.n	800de1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de14:	711a      	strb	r2, [r3, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2243      	movs	r2, #67	; 0x43
 800de1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de20:	4b02      	ldr	r3, [pc, #8]	; (800de2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800de22:	4618      	mov	r0, r3
 800de24:	3718      	adds	r7, #24
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	24000068 	.word	0x24000068

0800de30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800de38:	2182      	movs	r1, #130	; 0x82
 800de3a:	4818      	ldr	r0, [pc, #96]	; (800de9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de3c:	f000 fcd7 	bl	800e7ee <USBD_GetEpDesc>
 800de40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800de42:	2101      	movs	r1, #1
 800de44:	4815      	ldr	r0, [pc, #84]	; (800de9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de46:	f000 fcd2 	bl	800e7ee <USBD_GetEpDesc>
 800de4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800de4c:	2181      	movs	r1, #129	; 0x81
 800de4e:	4813      	ldr	r0, [pc, #76]	; (800de9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800de50:	f000 fccd 	bl	800e7ee <USBD_GetEpDesc>
 800de54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2210      	movs	r2, #16
 800de60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	2200      	movs	r2, #0
 800de6c:	711a      	strb	r2, [r3, #4]
 800de6e:	2200      	movs	r2, #0
 800de70:	f042 0202 	orr.w	r2, r2, #2
 800de74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d006      	beq.n	800de8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	2200      	movs	r2, #0
 800de80:	711a      	strb	r2, [r3, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f042 0202 	orr.w	r2, r2, #2
 800de88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2243      	movs	r2, #67	; 0x43
 800de8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800de90:	4b02      	ldr	r3, [pc, #8]	; (800de9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800de92:	4618      	mov	r0, r3
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	24000068 	.word	0x24000068

0800dea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dea8:	2182      	movs	r1, #130	; 0x82
 800deaa:	4818      	ldr	r0, [pc, #96]	; (800df0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800deac:	f000 fc9f 	bl	800e7ee <USBD_GetEpDesc>
 800deb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800deb2:	2101      	movs	r1, #1
 800deb4:	4815      	ldr	r0, [pc, #84]	; (800df0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800deb6:	f000 fc9a 	bl	800e7ee <USBD_GetEpDesc>
 800deba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800debc:	2181      	movs	r1, #129	; 0x81
 800debe:	4813      	ldr	r0, [pc, #76]	; (800df0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dec0:	f000 fc95 	bl	800e7ee <USBD_GetEpDesc>
 800dec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2210      	movs	r2, #16
 800ded0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	2200      	movs	r2, #0
 800dedc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dee0:	711a      	strb	r2, [r3, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d006      	beq.n	800defa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2200      	movs	r2, #0
 800def0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def4:	711a      	strb	r2, [r3, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2243      	movs	r2, #67	; 0x43
 800defe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800df00:	4b02      	ldr	r3, [pc, #8]	; (800df0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800df02:	4618      	mov	r0, r3
 800df04:	3718      	adds	r7, #24
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	24000068 	.word	0x24000068

0800df10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800df10:	b480      	push	{r7}
 800df12:	b083      	sub	sp, #12
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	220a      	movs	r2, #10
 800df1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800df1e:	4b03      	ldr	r3, [pc, #12]	; (800df2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800df20:	4618      	mov	r0, r3
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr
 800df2c:	24000024 	.word	0x24000024

0800df30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800df40:	2303      	movs	r3, #3
 800df42:	e009      	b.n	800df58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	33b0      	adds	r3, #176	; 0xb0
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	370c      	adds	r7, #12
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr

0800df64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800df64:	b480      	push	{r7}
 800df66:	b087      	sub	sp, #28
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	32b0      	adds	r2, #176	; 0xb0
 800df7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800df86:	2303      	movs	r3, #3
 800df88:	e008      	b.n	800df9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	32b0      	adds	r2, #176	; 0xb0
 800dfbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d101      	bne.n	800dfcc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	e004      	b.n	800dfd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3714      	adds	r7, #20
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
	...

0800dfe4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	32b0      	adds	r2, #176	; 0xb0
 800dff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dffa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	32b0      	adds	r2, #176	; 0xb0
 800e006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e00e:	2303      	movs	r3, #3
 800e010:	e018      	b.n	800e044 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	7c1b      	ldrb	r3, [r3, #16]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d10a      	bne.n	800e030 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e01a:	4b0c      	ldr	r3, [pc, #48]	; (800e04c <USBD_CDC_ReceivePacket+0x68>)
 800e01c:	7819      	ldrb	r1, [r3, #0]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e024:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f012 f94d 	bl	80202c8 <USBD_LL_PrepareReceive>
 800e02e:	e008      	b.n	800e042 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e030:	4b06      	ldr	r3, [pc, #24]	; (800e04c <USBD_CDC_ReceivePacket+0x68>)
 800e032:	7819      	ldrb	r1, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e03a:	2340      	movs	r3, #64	; 0x40
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f012 f943 	bl	80202c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e042:	2300      	movs	r3, #0
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}
 800e04c:	240000ac 	.word	0x240000ac

0800e050 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	4613      	mov	r3, r2
 800e05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d101      	bne.n	800e068 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e064:	2303      	movs	r3, #3
 800e066:	e01f      	b.n	800e0a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d003      	beq.n	800e08e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	68ba      	ldr	r2, [r7, #8]
 800e08a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2201      	movs	r2, #1
 800e092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	79fa      	ldrb	r2, [r7, #7]
 800e09a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f011 ffb7 	bl	8020010 <USBD_LL_Init>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3718      	adds	r7, #24
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d101      	bne.n	800e0c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	e025      	b.n	800e114 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	32ae      	adds	r2, #174	; 0xae
 800e0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d00f      	beq.n	800e104 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	32ae      	adds	r2, #174	; 0xae
 800e0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f4:	f107 020e 	add.w	r2, r7, #14
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	4798      	blx	r3
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e10a:	1c5a      	adds	r2, r3, #1
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b082      	sub	sp, #8
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f011 ffc5 	bl	80200b4 <USBD_LL_Start>
 800e12a:	4603      	mov	r3, r0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e13c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b084      	sub	sp, #16
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
 800e152:	460b      	mov	r3, r1
 800e154:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e160:	2b00      	cmp	r3, #0
 800e162:	d009      	beq.n	800e178 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	78fa      	ldrb	r2, [r7, #3]
 800e16e:	4611      	mov	r1, r2
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	4798      	blx	r3
 800e174:	4603      	mov	r3, r0
 800e176:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e178:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3710      	adds	r7, #16
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}

0800e182 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b084      	sub	sp, #16
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	460b      	mov	r3, r1
 800e18c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e18e:	2300      	movs	r3, #0
 800e190:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	4611      	mov	r1, r2
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	4798      	blx	r3
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f001 f90e 	bl	800f3ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e1dc:	461a      	mov	r2, r3
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e1ea:	f003 031f 	and.w	r3, r3, #31
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d01a      	beq.n	800e228 <USBD_LL_SetupStage+0x72>
 800e1f2:	2b02      	cmp	r3, #2
 800e1f4:	d822      	bhi.n	800e23c <USBD_LL_SetupStage+0x86>
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d002      	beq.n	800e200 <USBD_LL_SetupStage+0x4a>
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d00a      	beq.n	800e214 <USBD_LL_SetupStage+0x5e>
 800e1fe:	e01d      	b.n	800e23c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e206:	4619      	mov	r1, r3
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 fb65 	bl	800e8d8 <USBD_StdDevReq>
 800e20e:	4603      	mov	r3, r0
 800e210:	73fb      	strb	r3, [r7, #15]
      break;
 800e212:	e020      	b.n	800e256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f000 fbcd 	bl	800e9bc <USBD_StdItfReq>
 800e222:	4603      	mov	r3, r0
 800e224:	73fb      	strb	r3, [r7, #15]
      break;
 800e226:	e016      	b.n	800e256 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e22e:	4619      	mov	r1, r3
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fc2f 	bl	800ea94 <USBD_StdEPReq>
 800e236:	4603      	mov	r3, r0
 800e238:	73fb      	strb	r3, [r7, #15]
      break;
 800e23a:	e00c      	b.n	800e256 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e242:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e246:	b2db      	uxtb	r3, r3
 800e248:	4619      	mov	r1, r3
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f011 ff92 	bl	8020174 <USBD_LL_StallEP>
 800e250:	4603      	mov	r3, r0
 800e252:	73fb      	strb	r3, [r7, #15]
      break;
 800e254:	bf00      	nop
  }

  return ret;
 800e256:	7bfb      	ldrb	r3, [r7, #15]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3710      	adds	r7, #16
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b086      	sub	sp, #24
 800e264:	af00      	add	r7, sp, #0
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	460b      	mov	r3, r1
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e272:	7afb      	ldrb	r3, [r7, #11]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d16e      	bne.n	800e356 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e27e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e286:	2b03      	cmp	r3, #3
 800e288:	f040 8098 	bne.w	800e3bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	689a      	ldr	r2, [r3, #8]
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	429a      	cmp	r2, r3
 800e296:	d913      	bls.n	800e2c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e298:	693b      	ldr	r3, [r7, #16]
 800e29a:	689a      	ldr	r2, [r3, #8]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	1ad2      	subs	r2, r2, r3
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	68da      	ldr	r2, [r3, #12]
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	bf28      	it	cs
 800e2b2:	4613      	movcs	r3, r2
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	6879      	ldr	r1, [r7, #4]
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f001 f98a 	bl	800f5d2 <USBD_CtlContinueRx>
 800e2be:	e07d      	b.n	800e3bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e2c6:	f003 031f 	and.w	r3, r3, #31
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d014      	beq.n	800e2f8 <USBD_LL_DataOutStage+0x98>
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d81d      	bhi.n	800e30e <USBD_LL_DataOutStage+0xae>
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <USBD_LL_DataOutStage+0x7c>
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d003      	beq.n	800e2e2 <USBD_LL_DataOutStage+0x82>
 800e2da:	e018      	b.n	800e30e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	75bb      	strb	r3, [r7, #22]
            break;
 800e2e0:	e018      	b.n	800e314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f000 fa64 	bl	800e7ba <USBD_CoreFindIF>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	75bb      	strb	r3, [r7, #22]
            break;
 800e2f6:	e00d      	b.n	800e314 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	4619      	mov	r1, r3
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f000 fa66 	bl	800e7d4 <USBD_CoreFindEP>
 800e308:	4603      	mov	r3, r0
 800e30a:	75bb      	strb	r3, [r7, #22]
            break;
 800e30c:	e002      	b.n	800e314 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	75bb      	strb	r3, [r7, #22]
            break;
 800e312:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e314:	7dbb      	ldrb	r3, [r7, #22]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d119      	bne.n	800e34e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e320:	b2db      	uxtb	r3, r3
 800e322:	2b03      	cmp	r3, #3
 800e324:	d113      	bne.n	800e34e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e326:	7dba      	ldrb	r2, [r7, #22]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	32ae      	adds	r2, #174	; 0xae
 800e32c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00b      	beq.n	800e34e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e336:	7dba      	ldrb	r2, [r7, #22]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e33e:	7dba      	ldrb	r2, [r7, #22]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	32ae      	adds	r2, #174	; 0xae
 800e344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e348:	691b      	ldr	r3, [r3, #16]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f001 f950 	bl	800f5f4 <USBD_CtlSendStatus>
 800e354:	e032      	b.n	800e3bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e356:	7afb      	ldrb	r3, [r7, #11]
 800e358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	4619      	mov	r1, r3
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 fa37 	bl	800e7d4 <USBD_CoreFindEP>
 800e366:	4603      	mov	r3, r0
 800e368:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e36a:	7dbb      	ldrb	r3, [r7, #22]
 800e36c:	2bff      	cmp	r3, #255	; 0xff
 800e36e:	d025      	beq.n	800e3bc <USBD_LL_DataOutStage+0x15c>
 800e370:	7dbb      	ldrb	r3, [r7, #22]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d122      	bne.n	800e3bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b03      	cmp	r3, #3
 800e380:	d117      	bne.n	800e3b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e382:	7dba      	ldrb	r2, [r7, #22]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	32ae      	adds	r2, #174	; 0xae
 800e388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00f      	beq.n	800e3b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e392:	7dba      	ldrb	r2, [r7, #22]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e39a:	7dba      	ldrb	r2, [r7, #22]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	32ae      	adds	r2, #174	; 0xae
 800e3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a4:	699b      	ldr	r3, [r3, #24]
 800e3a6:	7afa      	ldrb	r2, [r7, #11]
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	4798      	blx	r3
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e3b2:	7dfb      	ldrb	r3, [r7, #23]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e3b8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ba:	e000      	b.n	800e3be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e3bc:	2300      	movs	r3, #0
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b086      	sub	sp, #24
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	60f8      	str	r0, [r7, #12]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	607a      	str	r2, [r7, #4]
 800e3d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e3d4:	7afb      	ldrb	r3, [r7, #11]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d16f      	bne.n	800e4ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3314      	adds	r3, #20
 800e3de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d15a      	bne.n	800e4a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	689a      	ldr	r2, [r3, #8]
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	68db      	ldr	r3, [r3, #12]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d914      	bls.n	800e420 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	689a      	ldr	r2, [r3, #8]
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	68db      	ldr	r3, [r3, #12]
 800e3fe:	1ad2      	subs	r2, r2, r3
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	461a      	mov	r2, r3
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	f001 f8b2 	bl	800f576 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e412:	2300      	movs	r3, #0
 800e414:	2200      	movs	r2, #0
 800e416:	2100      	movs	r1, #0
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f011 ff55 	bl	80202c8 <USBD_LL_PrepareReceive>
 800e41e:	e03f      	b.n	800e4a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	68da      	ldr	r2, [r3, #12]
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d11c      	bne.n	800e466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	685a      	ldr	r2, [r3, #4]
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e434:	429a      	cmp	r2, r3
 800e436:	d316      	bcc.n	800e466 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	685a      	ldr	r2, [r3, #4]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e442:	429a      	cmp	r2, r3
 800e444:	d20f      	bcs.n	800e466 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e446:	2200      	movs	r2, #0
 800e448:	2100      	movs	r1, #0
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f001 f893 	bl	800f576 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e458:	2300      	movs	r3, #0
 800e45a:	2200      	movs	r2, #0
 800e45c:	2100      	movs	r1, #0
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	f011 ff32 	bl	80202c8 <USBD_LL_PrepareReceive>
 800e464:	e01c      	b.n	800e4a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b03      	cmp	r3, #3
 800e470:	d10f      	bne.n	800e492 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d009      	beq.n	800e492 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2200      	movs	r2, #0
 800e482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e48c:	68db      	ldr	r3, [r3, #12]
 800e48e:	68f8      	ldr	r0, [r7, #12]
 800e490:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e492:	2180      	movs	r1, #128	; 0x80
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f011 fe6d 	bl	8020174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f001 f8bd 	bl	800f61a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d03a      	beq.n	800e520 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7ff fe42 	bl	800e134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e4b8:	e032      	b.n	800e520 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e4ba:	7afb      	ldrb	r3, [r7, #11]
 800e4bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	68f8      	ldr	r0, [r7, #12]
 800e4c6:	f000 f985 	bl	800e7d4 <USBD_CoreFindEP>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	2bff      	cmp	r3, #255	; 0xff
 800e4d2:	d025      	beq.n	800e520 <USBD_LL_DataInStage+0x15a>
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d122      	bne.n	800e520 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d11c      	bne.n	800e520 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e4e6:	7dfa      	ldrb	r2, [r7, #23]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	32ae      	adds	r2, #174	; 0xae
 800e4ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4f0:	695b      	ldr	r3, [r3, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d014      	beq.n	800e520 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e4f6:	7dfa      	ldrb	r2, [r7, #23]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e4fe:	7dfa      	ldrb	r2, [r7, #23]
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	32ae      	adds	r2, #174	; 0xae
 800e504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e508:	695b      	ldr	r3, [r3, #20]
 800e50a:	7afa      	ldrb	r2, [r7, #11]
 800e50c:	4611      	mov	r1, r2
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	4798      	blx	r3
 800e512:	4603      	mov	r3, r0
 800e514:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e516:	7dbb      	ldrb	r3, [r7, #22]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	e000      	b.n	800e522 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b084      	sub	sp, #16
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2201      	movs	r2, #1
 800e53a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2200      	movs	r2, #0
 800e54a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e562:	2b00      	cmp	r3, #0
 800e564:	d014      	beq.n	800e590 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00e      	beq.n	800e590 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	6852      	ldr	r2, [r2, #4]
 800e57e:	b2d2      	uxtb	r2, r2
 800e580:	4611      	mov	r1, r2
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	4798      	blx	r3
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d001      	beq.n	800e590 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e58c:	2303      	movs	r3, #3
 800e58e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e590:	2340      	movs	r3, #64	; 0x40
 800e592:	2200      	movs	r2, #0
 800e594:	2100      	movs	r1, #0
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f011 fda7 	bl	80200ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2201      	movs	r2, #1
 800e5a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2240      	movs	r2, #64	; 0x40
 800e5a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e5ac:	2340      	movs	r3, #64	; 0x40
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2180      	movs	r1, #128	; 0x80
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f011 fd99 	bl	80200ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2240      	movs	r2, #64	; 0x40
 800e5c2:	621a      	str	r2, [r3, #32]

  return ret;
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e5ce:	b480      	push	{r7}
 800e5d0:	b083      	sub	sp, #12
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	78fa      	ldrb	r2, [r7, #3]
 800e5de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b04      	cmp	r3, #4
 800e600:	d006      	beq.n	800e610 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2204      	movs	r2, #4
 800e614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr

0800e626 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e626:	b480      	push	{r7}
 800e628:	b083      	sub	sp, #12
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e634:	b2db      	uxtb	r3, r3
 800e636:	2b04      	cmp	r3, #4
 800e638:	d106      	bne.n	800e648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e640:	b2da      	uxtb	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	370c      	adds	r7, #12
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b082      	sub	sp, #8
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b03      	cmp	r3, #3
 800e668:	d110      	bne.n	800e68c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e670:	2b00      	cmp	r3, #0
 800e672:	d00b      	beq.n	800e68c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e67a:	69db      	ldr	r3, [r3, #28]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d005      	beq.n	800e68c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e686:	69db      	ldr	r3, [r3, #28]
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b082      	sub	sp, #8
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	460b      	mov	r3, r1
 800e6a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	32ae      	adds	r2, #174	; 0xae
 800e6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e6b4:	2303      	movs	r3, #3
 800e6b6:	e01c      	b.n	800e6f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	2b03      	cmp	r3, #3
 800e6c2:	d115      	bne.n	800e6f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	32ae      	adds	r2, #174	; 0xae
 800e6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6d2:	6a1b      	ldr	r3, [r3, #32]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d00b      	beq.n	800e6f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	32ae      	adds	r2, #174	; 0xae
 800e6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	78fa      	ldrb	r2, [r7, #3]
 800e6ea:	4611      	mov	r1, r2
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b082      	sub	sp, #8
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	460b      	mov	r3, r1
 800e704:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	32ae      	adds	r2, #174	; 0xae
 800e710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d101      	bne.n	800e71c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e718:	2303      	movs	r3, #3
 800e71a:	e01c      	b.n	800e756 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e722:	b2db      	uxtb	r3, r3
 800e724:	2b03      	cmp	r3, #3
 800e726:	d115      	bne.n	800e754 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	32ae      	adds	r2, #174	; 0xae
 800e732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00b      	beq.n	800e754 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	32ae      	adds	r2, #174	; 0xae
 800e746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e74c:	78fa      	ldrb	r2, [r7, #3]
 800e74e:	4611      	mov	r1, r2
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e75e:	b480      	push	{r7}
 800e760:	b083      	sub	sp, #12
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d00e      	beq.n	800e7b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	6852      	ldr	r2, [r2, #4]
 800e79e:	b2d2      	uxtb	r2, r2
 800e7a0:	4611      	mov	r1, r2
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	4798      	blx	r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d001      	beq.n	800e7b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}

0800e7ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e7ba:	b480      	push	{r7}
 800e7bc:	b083      	sub	sp, #12
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e7c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b083      	sub	sp, #12
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	460b      	mov	r3, r1
 800e7de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e7e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	370c      	adds	r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ec:	4770      	bx	lr

0800e7ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b086      	sub	sp, #24
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	885b      	ldrh	r3, [r3, #2]
 800e80a:	b29a      	uxth	r2, r3
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	b29b      	uxth	r3, r3
 800e812:	429a      	cmp	r2, r3
 800e814:	d920      	bls.n	800e858 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e81e:	e013      	b.n	800e848 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e820:	f107 030a 	add.w	r3, r7, #10
 800e824:	4619      	mov	r1, r3
 800e826:	6978      	ldr	r0, [r7, #20]
 800e828:	f000 f81b 	bl	800e862 <USBD_GetNextDesc>
 800e82c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	785b      	ldrb	r3, [r3, #1]
 800e832:	2b05      	cmp	r3, #5
 800e834:	d108      	bne.n	800e848 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	789b      	ldrb	r3, [r3, #2]
 800e83e:	78fa      	ldrb	r2, [r7, #3]
 800e840:	429a      	cmp	r2, r3
 800e842:	d008      	beq.n	800e856 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e844:	2300      	movs	r3, #0
 800e846:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	885b      	ldrh	r3, [r3, #2]
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	897b      	ldrh	r3, [r7, #10]
 800e850:	429a      	cmp	r2, r3
 800e852:	d8e5      	bhi.n	800e820 <USBD_GetEpDesc+0x32>
 800e854:	e000      	b.n	800e858 <USBD_GetEpDesc+0x6a>
          break;
 800e856:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e858:	693b      	ldr	r3, [r7, #16]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e862:	b480      	push	{r7}
 800e864:	b085      	sub	sp, #20
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	881a      	ldrh	r2, [r3, #0]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	4413      	add	r3, r2
 800e87c:	b29a      	uxth	r2, r3
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	4413      	add	r3, r2
 800e88c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e88e:	68fb      	ldr	r3, [r7, #12]
}
 800e890:	4618      	mov	r0, r3
 800e892:	3714      	adds	r7, #20
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr

0800e89c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e89c:	b480      	push	{r7}
 800e89e:	b087      	sub	sp, #28
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	3301      	adds	r3, #1
 800e8b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e8ba:	8a3b      	ldrh	r3, [r7, #16]
 800e8bc:	021b      	lsls	r3, r3, #8
 800e8be:	b21a      	sxth	r2, r3
 800e8c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e8c4:	4313      	orrs	r3, r2
 800e8c6:	b21b      	sxth	r3, r3
 800e8c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e8ca:	89fb      	ldrh	r3, [r7, #14]
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	371c      	adds	r7, #28
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr

0800e8d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8ee:	2b40      	cmp	r3, #64	; 0x40
 800e8f0:	d005      	beq.n	800e8fe <USBD_StdDevReq+0x26>
 800e8f2:	2b40      	cmp	r3, #64	; 0x40
 800e8f4:	d857      	bhi.n	800e9a6 <USBD_StdDevReq+0xce>
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00f      	beq.n	800e91a <USBD_StdDevReq+0x42>
 800e8fa:	2b20      	cmp	r3, #32
 800e8fc:	d153      	bne.n	800e9a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	32ae      	adds	r2, #174	; 0xae
 800e908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	6839      	ldr	r1, [r7, #0]
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	4798      	blx	r3
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
      break;
 800e918:	e04a      	b.n	800e9b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	785b      	ldrb	r3, [r3, #1]
 800e91e:	2b09      	cmp	r3, #9
 800e920:	d83b      	bhi.n	800e99a <USBD_StdDevReq+0xc2>
 800e922:	a201      	add	r2, pc, #4	; (adr r2, 800e928 <USBD_StdDevReq+0x50>)
 800e924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e928:	0800e97d 	.word	0x0800e97d
 800e92c:	0800e991 	.word	0x0800e991
 800e930:	0800e99b 	.word	0x0800e99b
 800e934:	0800e987 	.word	0x0800e987
 800e938:	0800e99b 	.word	0x0800e99b
 800e93c:	0800e95b 	.word	0x0800e95b
 800e940:	0800e951 	.word	0x0800e951
 800e944:	0800e99b 	.word	0x0800e99b
 800e948:	0800e973 	.word	0x0800e973
 800e94c:	0800e965 	.word	0x0800e965
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fa3c 	bl	800edd0 <USBD_GetDescriptor>
          break;
 800e958:	e024      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e95a:	6839      	ldr	r1, [r7, #0]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 fba1 	bl	800f0a4 <USBD_SetAddress>
          break;
 800e962:	e01f      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fbe0 	bl	800f12c <USBD_SetConfig>
 800e96c:	4603      	mov	r3, r0
 800e96e:	73fb      	strb	r3, [r7, #15]
          break;
 800e970:	e018      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e972:	6839      	ldr	r1, [r7, #0]
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f000 fc83 	bl	800f280 <USBD_GetConfig>
          break;
 800e97a:	e013      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e97c:	6839      	ldr	r1, [r7, #0]
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f000 fcb4 	bl	800f2ec <USBD_GetStatus>
          break;
 800e984:	e00e      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e986:	6839      	ldr	r1, [r7, #0]
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 fce3 	bl	800f354 <USBD_SetFeature>
          break;
 800e98e:	e009      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f000 fd07 	bl	800f3a6 <USBD_ClrFeature>
          break;
 800e998:	e004      	b.n	800e9a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fd5e 	bl	800f45e <USBD_CtlError>
          break;
 800e9a2:	bf00      	nop
      }
      break;
 800e9a4:	e004      	b.n	800e9b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e9a6:	6839      	ldr	r1, [r7, #0]
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f000 fd58 	bl	800f45e <USBD_CtlError>
      break;
 800e9ae:	bf00      	nop
  }

  return ret;
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop

0800e9bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9d2:	2b40      	cmp	r3, #64	; 0x40
 800e9d4:	d005      	beq.n	800e9e2 <USBD_StdItfReq+0x26>
 800e9d6:	2b40      	cmp	r3, #64	; 0x40
 800e9d8:	d852      	bhi.n	800ea80 <USBD_StdItfReq+0xc4>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d001      	beq.n	800e9e2 <USBD_StdItfReq+0x26>
 800e9de:	2b20      	cmp	r3, #32
 800e9e0:	d14e      	bne.n	800ea80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	2b02      	cmp	r3, #2
 800e9ee:	d840      	bhi.n	800ea72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	889b      	ldrh	r3, [r3, #4]
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d836      	bhi.n	800ea68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	889b      	ldrh	r3, [r3, #4]
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	4619      	mov	r1, r3
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f7ff fed9 	bl	800e7ba <USBD_CoreFindIF>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea0c:	7bbb      	ldrb	r3, [r7, #14]
 800ea0e:	2bff      	cmp	r3, #255	; 0xff
 800ea10:	d01d      	beq.n	800ea4e <USBD_StdItfReq+0x92>
 800ea12:	7bbb      	ldrb	r3, [r7, #14]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d11a      	bne.n	800ea4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ea18:	7bba      	ldrb	r2, [r7, #14]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	32ae      	adds	r2, #174	; 0xae
 800ea1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00f      	beq.n	800ea48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ea28:	7bba      	ldrb	r2, [r7, #14]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ea30:	7bba      	ldrb	r2, [r7, #14]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	32ae      	adds	r2, #174	; 0xae
 800ea36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea3a:	689b      	ldr	r3, [r3, #8]
 800ea3c:	6839      	ldr	r1, [r7, #0]
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	4798      	blx	r3
 800ea42:	4603      	mov	r3, r0
 800ea44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea46:	e004      	b.n	800ea52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ea4c:	e001      	b.n	800ea52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	88db      	ldrh	r3, [r3, #6]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d110      	bne.n	800ea7c <USBD_StdItfReq+0xc0>
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10d      	bne.n	800ea7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f000 fdc7 	bl	800f5f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ea66:	e009      	b.n	800ea7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ea68:	6839      	ldr	r1, [r7, #0]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fcf7 	bl	800f45e <USBD_CtlError>
          break;
 800ea70:	e004      	b.n	800ea7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ea72:	6839      	ldr	r1, [r7, #0]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 fcf2 	bl	800f45e <USBD_CtlError>
          break;
 800ea7a:	e000      	b.n	800ea7e <USBD_StdItfReq+0xc2>
          break;
 800ea7c:	bf00      	nop
      }
      break;
 800ea7e:	e004      	b.n	800ea8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ea80:	6839      	ldr	r1, [r7, #0]
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 fceb 	bl	800f45e <USBD_CtlError>
      break;
 800ea88:	bf00      	nop
  }

  return ret;
 800ea8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3710      	adds	r7, #16
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	889b      	ldrh	r3, [r3, #4]
 800eaa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eab0:	2b40      	cmp	r3, #64	; 0x40
 800eab2:	d007      	beq.n	800eac4 <USBD_StdEPReq+0x30>
 800eab4:	2b40      	cmp	r3, #64	; 0x40
 800eab6:	f200 817f 	bhi.w	800edb8 <USBD_StdEPReq+0x324>
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d02a      	beq.n	800eb14 <USBD_StdEPReq+0x80>
 800eabe:	2b20      	cmp	r3, #32
 800eac0:	f040 817a 	bne.w	800edb8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eac4:	7bbb      	ldrb	r3, [r7, #14]
 800eac6:	4619      	mov	r1, r3
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f7ff fe83 	bl	800e7d4 <USBD_CoreFindEP>
 800eace:	4603      	mov	r3, r0
 800ead0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ead2:	7b7b      	ldrb	r3, [r7, #13]
 800ead4:	2bff      	cmp	r3, #255	; 0xff
 800ead6:	f000 8174 	beq.w	800edc2 <USBD_StdEPReq+0x32e>
 800eada:	7b7b      	ldrb	r3, [r7, #13]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f040 8170 	bne.w	800edc2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800eae2:	7b7a      	ldrb	r2, [r7, #13]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eaea:	7b7a      	ldrb	r2, [r7, #13]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	32ae      	adds	r2, #174	; 0xae
 800eaf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 8163 	beq.w	800edc2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eafc:	7b7a      	ldrb	r2, [r7, #13]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	32ae      	adds	r2, #174	; 0xae
 800eb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	4798      	blx	r3
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eb12:	e156      	b.n	800edc2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	785b      	ldrb	r3, [r3, #1]
 800eb18:	2b03      	cmp	r3, #3
 800eb1a:	d008      	beq.n	800eb2e <USBD_StdEPReq+0x9a>
 800eb1c:	2b03      	cmp	r3, #3
 800eb1e:	f300 8145 	bgt.w	800edac <USBD_StdEPReq+0x318>
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f000 809b 	beq.w	800ec5e <USBD_StdEPReq+0x1ca>
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d03c      	beq.n	800eba6 <USBD_StdEPReq+0x112>
 800eb2c:	e13e      	b.n	800edac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb34:	b2db      	uxtb	r3, r3
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d002      	beq.n	800eb40 <USBD_StdEPReq+0xac>
 800eb3a:	2b03      	cmp	r3, #3
 800eb3c:	d016      	beq.n	800eb6c <USBD_StdEPReq+0xd8>
 800eb3e:	e02c      	b.n	800eb9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00d      	beq.n	800eb62 <USBD_StdEPReq+0xce>
 800eb46:	7bbb      	ldrb	r3, [r7, #14]
 800eb48:	2b80      	cmp	r3, #128	; 0x80
 800eb4a:	d00a      	beq.n	800eb62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb4c:	7bbb      	ldrb	r3, [r7, #14]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f011 fb0f 	bl	8020174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb56:	2180      	movs	r1, #128	; 0x80
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f011 fb0b 	bl	8020174 <USBD_LL_StallEP>
 800eb5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb60:	e020      	b.n	800eba4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 fc7a 	bl	800f45e <USBD_CtlError>
              break;
 800eb6a:	e01b      	b.n	800eba4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	885b      	ldrh	r3, [r3, #2]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10e      	bne.n	800eb92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eb74:	7bbb      	ldrb	r3, [r7, #14]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00b      	beq.n	800eb92 <USBD_StdEPReq+0xfe>
 800eb7a:	7bbb      	ldrb	r3, [r7, #14]
 800eb7c:	2b80      	cmp	r3, #128	; 0x80
 800eb7e:	d008      	beq.n	800eb92 <USBD_StdEPReq+0xfe>
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	88db      	ldrh	r3, [r3, #6]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d104      	bne.n	800eb92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800eb88:	7bbb      	ldrb	r3, [r7, #14]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f011 faf1 	bl	8020174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fd2e 	bl	800f5f4 <USBD_CtlSendStatus>

              break;
 800eb98:	e004      	b.n	800eba4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800eb9a:	6839      	ldr	r1, [r7, #0]
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f000 fc5e 	bl	800f45e <USBD_CtlError>
              break;
 800eba2:	bf00      	nop
          }
          break;
 800eba4:	e107      	b.n	800edb6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d002      	beq.n	800ebb8 <USBD_StdEPReq+0x124>
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	d016      	beq.n	800ebe4 <USBD_StdEPReq+0x150>
 800ebb6:	e04b      	b.n	800ec50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebb8:	7bbb      	ldrb	r3, [r7, #14]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00d      	beq.n	800ebda <USBD_StdEPReq+0x146>
 800ebbe:	7bbb      	ldrb	r3, [r7, #14]
 800ebc0:	2b80      	cmp	r3, #128	; 0x80
 800ebc2:	d00a      	beq.n	800ebda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f011 fad3 	bl	8020174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ebce:	2180      	movs	r1, #128	; 0x80
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f011 facf 	bl	8020174 <USBD_LL_StallEP>
 800ebd6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ebd8:	e040      	b.n	800ec5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 fc3e 	bl	800f45e <USBD_CtlError>
              break;
 800ebe2:	e03b      	b.n	800ec5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	885b      	ldrh	r3, [r3, #2]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d136      	bne.n	800ec5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
 800ebee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d004      	beq.n	800ec00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ebf6:	7bbb      	ldrb	r3, [r7, #14]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f011 fad9 	bl	80201b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f000 fcf7 	bl	800f5f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ec06:	7bbb      	ldrb	r3, [r7, #14]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff fde2 	bl	800e7d4 <USBD_CoreFindEP>
 800ec10:	4603      	mov	r3, r0
 800ec12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec14:	7b7b      	ldrb	r3, [r7, #13]
 800ec16:	2bff      	cmp	r3, #255	; 0xff
 800ec18:	d01f      	beq.n	800ec5a <USBD_StdEPReq+0x1c6>
 800ec1a:	7b7b      	ldrb	r3, [r7, #13]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d11c      	bne.n	800ec5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ec20:	7b7a      	ldrb	r2, [r7, #13]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ec28:	7b7a      	ldrb	r2, [r7, #13]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	32ae      	adds	r2, #174	; 0xae
 800ec2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec32:	689b      	ldr	r3, [r3, #8]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d010      	beq.n	800ec5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ec38:	7b7a      	ldrb	r2, [r7, #13]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	32ae      	adds	r2, #174	; 0xae
 800ec3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec42:	689b      	ldr	r3, [r3, #8]
 800ec44:	6839      	ldr	r1, [r7, #0]
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	4798      	blx	r3
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ec4e:	e004      	b.n	800ec5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fc03 	bl	800f45e <USBD_CtlError>
              break;
 800ec58:	e000      	b.n	800ec5c <USBD_StdEPReq+0x1c8>
              break;
 800ec5a:	bf00      	nop
          }
          break;
 800ec5c:	e0ab      	b.n	800edb6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d002      	beq.n	800ec70 <USBD_StdEPReq+0x1dc>
 800ec6a:	2b03      	cmp	r3, #3
 800ec6c:	d032      	beq.n	800ecd4 <USBD_StdEPReq+0x240>
 800ec6e:	e097      	b.n	800eda0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec70:	7bbb      	ldrb	r3, [r7, #14]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d007      	beq.n	800ec86 <USBD_StdEPReq+0x1f2>
 800ec76:	7bbb      	ldrb	r3, [r7, #14]
 800ec78:	2b80      	cmp	r3, #128	; 0x80
 800ec7a:	d004      	beq.n	800ec86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fbed 	bl	800f45e <USBD_CtlError>
                break;
 800ec84:	e091      	b.n	800edaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	da0b      	bge.n	800eca6 <USBD_StdEPReq+0x212>
 800ec8e:	7bbb      	ldrb	r3, [r7, #14]
 800ec90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ec94:	4613      	mov	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	4413      	add	r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	3310      	adds	r3, #16
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	4413      	add	r3, r2
 800eca2:	3304      	adds	r3, #4
 800eca4:	e00b      	b.n	800ecbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eca6:	7bbb      	ldrb	r3, [r7, #14]
 800eca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ecac:	4613      	mov	r3, r2
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	009b      	lsls	r3, r3, #2
 800ecb4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	4413      	add	r3, r2
 800ecbc:	3304      	adds	r3, #4
 800ecbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	2202      	movs	r2, #2
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fc37 	bl	800f540 <USBD_CtlSendData>
              break;
 800ecd2:	e06a      	b.n	800edaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ecd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	da11      	bge.n	800ed00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ecdc:	7bbb      	ldrb	r3, [r7, #14]
 800ecde:	f003 020f 	and.w	r2, r3, #15
 800ece2:	6879      	ldr	r1, [r7, #4]
 800ece4:	4613      	mov	r3, r2
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	4413      	add	r3, r2
 800ecea:	009b      	lsls	r3, r3, #2
 800ecec:	440b      	add	r3, r1
 800ecee:	3324      	adds	r3, #36	; 0x24
 800ecf0:	881b      	ldrh	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d117      	bne.n	800ed26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f000 fbb0 	bl	800f45e <USBD_CtlError>
                  break;
 800ecfe:	e054      	b.n	800edaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed00:	7bbb      	ldrb	r3, [r7, #14]
 800ed02:	f003 020f 	and.w	r2, r3, #15
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	440b      	add	r3, r1
 800ed12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed16:	881b      	ldrh	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d104      	bne.n	800ed26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fb9d 	bl	800f45e <USBD_CtlError>
                  break;
 800ed24:	e041      	b.n	800edaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da0b      	bge.n	800ed46 <USBD_StdEPReq+0x2b2>
 800ed2e:	7bbb      	ldrb	r3, [r7, #14]
 800ed30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed34:	4613      	mov	r3, r2
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	009b      	lsls	r3, r3, #2
 800ed3c:	3310      	adds	r3, #16
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	4413      	add	r3, r2
 800ed42:	3304      	adds	r3, #4
 800ed44:	e00b      	b.n	800ed5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed46:	7bbb      	ldrb	r3, [r7, #14]
 800ed48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ed60:	7bbb      	ldrb	r3, [r7, #14]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <USBD_StdEPReq+0x2d8>
 800ed66:	7bbb      	ldrb	r3, [r7, #14]
 800ed68:	2b80      	cmp	r3, #128	; 0x80
 800ed6a:	d103      	bne.n	800ed74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	e00e      	b.n	800ed92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ed74:	7bbb      	ldrb	r3, [r7, #14]
 800ed76:	4619      	mov	r1, r3
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f011 fa39 	bl	80201f0 <USBD_LL_IsStallEP>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d003      	beq.n	800ed8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	2201      	movs	r2, #1
 800ed88:	601a      	str	r2, [r3, #0]
 800ed8a:	e002      	b.n	800ed92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2202      	movs	r2, #2
 800ed96:	4619      	mov	r1, r3
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fbd1 	bl	800f540 <USBD_CtlSendData>
              break;
 800ed9e:	e004      	b.n	800edaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800eda0:	6839      	ldr	r1, [r7, #0]
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f000 fb5b 	bl	800f45e <USBD_CtlError>
              break;
 800eda8:	bf00      	nop
          }
          break;
 800edaa:	e004      	b.n	800edb6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800edac:	6839      	ldr	r1, [r7, #0]
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 fb55 	bl	800f45e <USBD_CtlError>
          break;
 800edb4:	bf00      	nop
      }
      break;
 800edb6:	e005      	b.n	800edc4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800edb8:	6839      	ldr	r1, [r7, #0]
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f000 fb4f 	bl	800f45e <USBD_CtlError>
      break;
 800edc0:	e000      	b.n	800edc4 <USBD_StdEPReq+0x330>
      break;
 800edc2:	bf00      	nop
  }

  return ret;
 800edc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
 800edd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800edda:	2300      	movs	r3, #0
 800eddc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800edde:	2300      	movs	r3, #0
 800ede0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ede2:	2300      	movs	r3, #0
 800ede4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	885b      	ldrh	r3, [r3, #2]
 800edea:	0a1b      	lsrs	r3, r3, #8
 800edec:	b29b      	uxth	r3, r3
 800edee:	3b01      	subs	r3, #1
 800edf0:	2b06      	cmp	r3, #6
 800edf2:	f200 8128 	bhi.w	800f046 <USBD_GetDescriptor+0x276>
 800edf6:	a201      	add	r2, pc, #4	; (adr r2, 800edfc <USBD_GetDescriptor+0x2c>)
 800edf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edfc:	0800ee19 	.word	0x0800ee19
 800ee00:	0800ee31 	.word	0x0800ee31
 800ee04:	0800ee71 	.word	0x0800ee71
 800ee08:	0800f047 	.word	0x0800f047
 800ee0c:	0800f047 	.word	0x0800f047
 800ee10:	0800efe7 	.word	0x0800efe7
 800ee14:	0800f013 	.word	0x0800f013
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	7c12      	ldrb	r2, [r2, #16]
 800ee24:	f107 0108 	add.w	r1, r7, #8
 800ee28:	4610      	mov	r0, r2
 800ee2a:	4798      	blx	r3
 800ee2c:	60f8      	str	r0, [r7, #12]
      break;
 800ee2e:	e112      	b.n	800f056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	7c1b      	ldrb	r3, [r3, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d10d      	bne.n	800ee54 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee40:	f107 0208 	add.w	r2, r7, #8
 800ee44:	4610      	mov	r0, r2
 800ee46:	4798      	blx	r3
 800ee48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	2202      	movs	r2, #2
 800ee50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ee52:	e100      	b.n	800f056 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee5c:	f107 0208 	add.w	r2, r7, #8
 800ee60:	4610      	mov	r0, r2
 800ee62:	4798      	blx	r3
 800ee64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	2202      	movs	r2, #2
 800ee6c:	701a      	strb	r2, [r3, #0]
      break;
 800ee6e:	e0f2      	b.n	800f056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	885b      	ldrh	r3, [r3, #2]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	2b05      	cmp	r3, #5
 800ee78:	f200 80ac 	bhi.w	800efd4 <USBD_GetDescriptor+0x204>
 800ee7c:	a201      	add	r2, pc, #4	; (adr r2, 800ee84 <USBD_GetDescriptor+0xb4>)
 800ee7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee82:	bf00      	nop
 800ee84:	0800ee9d 	.word	0x0800ee9d
 800ee88:	0800eed1 	.word	0x0800eed1
 800ee8c:	0800ef05 	.word	0x0800ef05
 800ee90:	0800ef39 	.word	0x0800ef39
 800ee94:	0800ef6d 	.word	0x0800ef6d
 800ee98:	0800efa1 	.word	0x0800efa1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00b      	beq.n	800eec0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	7c12      	ldrb	r2, [r2, #16]
 800eeb4:	f107 0108 	add.w	r1, r7, #8
 800eeb8:	4610      	mov	r0, r2
 800eeba:	4798      	blx	r3
 800eebc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eebe:	e091      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eec0:	6839      	ldr	r1, [r7, #0]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 facb 	bl	800f45e <USBD_CtlError>
            err++;
 800eec8:	7afb      	ldrb	r3, [r7, #11]
 800eeca:	3301      	adds	r3, #1
 800eecc:	72fb      	strb	r3, [r7, #11]
          break;
 800eece:	e089      	b.n	800efe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eed6:	689b      	ldr	r3, [r3, #8]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00b      	beq.n	800eef4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	7c12      	ldrb	r2, [r2, #16]
 800eee8:	f107 0108 	add.w	r1, r7, #8
 800eeec:	4610      	mov	r0, r2
 800eeee:	4798      	blx	r3
 800eef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eef2:	e077      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eef4:	6839      	ldr	r1, [r7, #0]
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 fab1 	bl	800f45e <USBD_CtlError>
            err++;
 800eefc:	7afb      	ldrb	r3, [r7, #11]
 800eefe:	3301      	adds	r3, #1
 800ef00:	72fb      	strb	r3, [r7, #11]
          break;
 800ef02:	e06f      	b.n	800efe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00b      	beq.n	800ef28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef16:	68db      	ldr	r3, [r3, #12]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	7c12      	ldrb	r2, [r2, #16]
 800ef1c:	f107 0108 	add.w	r1, r7, #8
 800ef20:	4610      	mov	r0, r2
 800ef22:	4798      	blx	r3
 800ef24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef26:	e05d      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef28:	6839      	ldr	r1, [r7, #0]
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fa97 	bl	800f45e <USBD_CtlError>
            err++;
 800ef30:	7afb      	ldrb	r3, [r7, #11]
 800ef32:	3301      	adds	r3, #1
 800ef34:	72fb      	strb	r3, [r7, #11]
          break;
 800ef36:	e055      	b.n	800efe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00b      	beq.n	800ef5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef4a:	691b      	ldr	r3, [r3, #16]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	7c12      	ldrb	r2, [r2, #16]
 800ef50:	f107 0108 	add.w	r1, r7, #8
 800ef54:	4610      	mov	r0, r2
 800ef56:	4798      	blx	r3
 800ef58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef5a:	e043      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef5c:	6839      	ldr	r1, [r7, #0]
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fa7d 	bl	800f45e <USBD_CtlError>
            err++;
 800ef64:	7afb      	ldrb	r3, [r7, #11]
 800ef66:	3301      	adds	r3, #1
 800ef68:	72fb      	strb	r3, [r7, #11]
          break;
 800ef6a:	e03b      	b.n	800efe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00b      	beq.n	800ef90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef7e:	695b      	ldr	r3, [r3, #20]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	7c12      	ldrb	r2, [r2, #16]
 800ef84:	f107 0108 	add.w	r1, r7, #8
 800ef88:	4610      	mov	r0, r2
 800ef8a:	4798      	blx	r3
 800ef8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef8e:	e029      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef90:	6839      	ldr	r1, [r7, #0]
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fa63 	bl	800f45e <USBD_CtlError>
            err++;
 800ef98:	7afb      	ldrb	r3, [r7, #11]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef9e:	e021      	b.n	800efe4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa6:	699b      	ldr	r3, [r3, #24]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00b      	beq.n	800efc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efb2:	699b      	ldr	r3, [r3, #24]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	7c12      	ldrb	r2, [r2, #16]
 800efb8:	f107 0108 	add.w	r1, r7, #8
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
 800efc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efc2:	e00f      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fa49 	bl	800f45e <USBD_CtlError>
            err++;
 800efcc:	7afb      	ldrb	r3, [r7, #11]
 800efce:	3301      	adds	r3, #1
 800efd0:	72fb      	strb	r3, [r7, #11]
          break;
 800efd2:	e007      	b.n	800efe4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800efd4:	6839      	ldr	r1, [r7, #0]
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 fa41 	bl	800f45e <USBD_CtlError>
          err++;
 800efdc:	7afb      	ldrb	r3, [r7, #11]
 800efde:	3301      	adds	r3, #1
 800efe0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800efe2:	bf00      	nop
      }
      break;
 800efe4:	e037      	b.n	800f056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	7c1b      	ldrb	r3, [r3, #16]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d109      	bne.n	800f002 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eff6:	f107 0208 	add.w	r2, r7, #8
 800effa:	4610      	mov	r0, r2
 800effc:	4798      	blx	r3
 800effe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f000:	e029      	b.n	800f056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fa2a 	bl	800f45e <USBD_CtlError>
        err++;
 800f00a:	7afb      	ldrb	r3, [r7, #11]
 800f00c:	3301      	adds	r3, #1
 800f00e:	72fb      	strb	r3, [r7, #11]
      break;
 800f010:	e021      	b.n	800f056 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	7c1b      	ldrb	r3, [r3, #16]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10d      	bne.n	800f036 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f022:	f107 0208 	add.w	r2, r7, #8
 800f026:	4610      	mov	r0, r2
 800f028:	4798      	blx	r3
 800f02a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3301      	adds	r3, #1
 800f030:	2207      	movs	r2, #7
 800f032:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f034:	e00f      	b.n	800f056 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 fa10 	bl	800f45e <USBD_CtlError>
        err++;
 800f03e:	7afb      	ldrb	r3, [r7, #11]
 800f040:	3301      	adds	r3, #1
 800f042:	72fb      	strb	r3, [r7, #11]
      break;
 800f044:	e007      	b.n	800f056 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f046:	6839      	ldr	r1, [r7, #0]
 800f048:	6878      	ldr	r0, [r7, #4]
 800f04a:	f000 fa08 	bl	800f45e <USBD_CtlError>
      err++;
 800f04e:	7afb      	ldrb	r3, [r7, #11]
 800f050:	3301      	adds	r3, #1
 800f052:	72fb      	strb	r3, [r7, #11]
      break;
 800f054:	bf00      	nop
  }

  if (err != 0U)
 800f056:	7afb      	ldrb	r3, [r7, #11]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d11e      	bne.n	800f09a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	88db      	ldrh	r3, [r3, #6]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d016      	beq.n	800f092 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f064:	893b      	ldrh	r3, [r7, #8]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00e      	beq.n	800f088 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	88da      	ldrh	r2, [r3, #6]
 800f06e:	893b      	ldrh	r3, [r7, #8]
 800f070:	4293      	cmp	r3, r2
 800f072:	bf28      	it	cs
 800f074:	4613      	movcs	r3, r2
 800f076:	b29b      	uxth	r3, r3
 800f078:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f07a:	893b      	ldrh	r3, [r7, #8]
 800f07c:	461a      	mov	r2, r3
 800f07e:	68f9      	ldr	r1, [r7, #12]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 fa5d 	bl	800f540 <USBD_CtlSendData>
 800f086:	e009      	b.n	800f09c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 f9e7 	bl	800f45e <USBD_CtlError>
 800f090:	e004      	b.n	800f09c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 faae 	bl	800f5f4 <USBD_CtlSendStatus>
 800f098:	e000      	b.n	800f09c <USBD_GetDescriptor+0x2cc>
    return;
 800f09a:	bf00      	nop
  }
}
 800f09c:	3710      	adds	r7, #16
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop

0800f0a4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	889b      	ldrh	r3, [r3, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d131      	bne.n	800f11a <USBD_SetAddress+0x76>
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	88db      	ldrh	r3, [r3, #6]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d12d      	bne.n	800f11a <USBD_SetAddress+0x76>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	885b      	ldrh	r3, [r3, #2]
 800f0c2:	2b7f      	cmp	r3, #127	; 0x7f
 800f0c4:	d829      	bhi.n	800f11a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	885b      	ldrh	r3, [r3, #2]
 800f0ca:	b2db      	uxtb	r3, r3
 800f0cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0d0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	2b03      	cmp	r3, #3
 800f0dc:	d104      	bne.n	800f0e8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f0de:	6839      	ldr	r1, [r7, #0]
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 f9bc 	bl	800f45e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0e6:	e01d      	b.n	800f124 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	7bfa      	ldrb	r2, [r7, #15]
 800f0ec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	6878      	ldr	r0, [r7, #4]
 800f0f6:	f011 f8a7 	bl	8020248 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fa7a 	bl	800f5f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f100:	7bfb      	ldrb	r3, [r7, #15]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d004      	beq.n	800f110 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2202      	movs	r2, #2
 800f10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f10e:	e009      	b.n	800f124 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f118:	e004      	b.n	800f124 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f99e 	bl	800f45e <USBD_CtlError>
  }
}
 800f122:	bf00      	nop
 800f124:	bf00      	nop
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f136:	2300      	movs	r3, #0
 800f138:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	885b      	ldrh	r3, [r3, #2]
 800f13e:	b2da      	uxtb	r2, r3
 800f140:	4b4e      	ldr	r3, [pc, #312]	; (800f27c <USBD_SetConfig+0x150>)
 800f142:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f144:	4b4d      	ldr	r3, [pc, #308]	; (800f27c <USBD_SetConfig+0x150>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d905      	bls.n	800f158 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f14c:	6839      	ldr	r1, [r7, #0]
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f985 	bl	800f45e <USBD_CtlError>
    return USBD_FAIL;
 800f154:	2303      	movs	r3, #3
 800f156:	e08c      	b.n	800f272 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b02      	cmp	r3, #2
 800f162:	d002      	beq.n	800f16a <USBD_SetConfig+0x3e>
 800f164:	2b03      	cmp	r3, #3
 800f166:	d029      	beq.n	800f1bc <USBD_SetConfig+0x90>
 800f168:	e075      	b.n	800f256 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f16a:	4b44      	ldr	r3, [pc, #272]	; (800f27c <USBD_SetConfig+0x150>)
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d020      	beq.n	800f1b4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f172:	4b42      	ldr	r3, [pc, #264]	; (800f27c <USBD_SetConfig+0x150>)
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	461a      	mov	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f17c:	4b3f      	ldr	r3, [pc, #252]	; (800f27c <USBD_SetConfig+0x150>)
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	4619      	mov	r1, r3
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f7fe ffe1 	bl	800e14a <USBD_SetClassConfig>
 800f188:	4603      	mov	r3, r0
 800f18a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d008      	beq.n	800f1a4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f192:	6839      	ldr	r1, [r7, #0]
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f000 f962 	bl	800f45e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2202      	movs	r2, #2
 800f19e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1a2:	e065      	b.n	800f270 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f1a4:	6878      	ldr	r0, [r7, #4]
 800f1a6:	f000 fa25 	bl	800f5f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2203      	movs	r2, #3
 800f1ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f1b2:	e05d      	b.n	800f270 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fa1d 	bl	800f5f4 <USBD_CtlSendStatus>
      break;
 800f1ba:	e059      	b.n	800f270 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f1bc:	4b2f      	ldr	r3, [pc, #188]	; (800f27c <USBD_SetConfig+0x150>)
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d112      	bne.n	800f1ea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2202      	movs	r2, #2
 800f1c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f1cc:	4b2b      	ldr	r3, [pc, #172]	; (800f27c <USBD_SetConfig+0x150>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f1d6:	4b29      	ldr	r3, [pc, #164]	; (800f27c <USBD_SetConfig+0x150>)
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f7fe ffd0 	bl	800e182 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fa06 	bl	800f5f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f1e8:	e042      	b.n	800f270 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f1ea:	4b24      	ldr	r3, [pc, #144]	; (800f27c <USBD_SetConfig+0x150>)
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	461a      	mov	r2, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	429a      	cmp	r2, r3
 800f1f6:	d02a      	beq.n	800f24e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7fe ffbe 	bl	800e182 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f206:	4b1d      	ldr	r3, [pc, #116]	; (800f27c <USBD_SetConfig+0x150>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f210:	4b1a      	ldr	r3, [pc, #104]	; (800f27c <USBD_SetConfig+0x150>)
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	4619      	mov	r1, r3
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f7fe ff97 	bl	800e14a <USBD_SetClassConfig>
 800f21c:	4603      	mov	r3, r0
 800f21e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f220:	7bfb      	ldrb	r3, [r7, #15]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d00f      	beq.n	800f246 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f226:	6839      	ldr	r1, [r7, #0]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f918 	bl	800f45e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	b2db      	uxtb	r3, r3
 800f234:	4619      	mov	r1, r3
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7fe ffa3 	bl	800e182 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2202      	movs	r2, #2
 800f240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f244:	e014      	b.n	800f270 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 f9d4 	bl	800f5f4 <USBD_CtlSendStatus>
      break;
 800f24c:	e010      	b.n	800f270 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f000 f9d0 	bl	800f5f4 <USBD_CtlSendStatus>
      break;
 800f254:	e00c      	b.n	800f270 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f256:	6839      	ldr	r1, [r7, #0]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f000 f900 	bl	800f45e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f25e:	4b07      	ldr	r3, [pc, #28]	; (800f27c <USBD_SetConfig+0x150>)
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fe ff8c 	bl	800e182 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f26a:	2303      	movs	r3, #3
 800f26c:	73fb      	strb	r3, [r7, #15]
      break;
 800f26e:	bf00      	nop
  }

  return ret;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}
 800f27a:	bf00      	nop
 800f27c:	24005000 	.word	0x24005000

0800f280 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b082      	sub	sp, #8
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	88db      	ldrh	r3, [r3, #6]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d004      	beq.n	800f29c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f292:	6839      	ldr	r1, [r7, #0]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f000 f8e2 	bl	800f45e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f29a:	e023      	b.n	800f2e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	dc02      	bgt.n	800f2ae <USBD_GetConfig+0x2e>
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	dc03      	bgt.n	800f2b4 <USBD_GetConfig+0x34>
 800f2ac:	e015      	b.n	800f2da <USBD_GetConfig+0x5a>
 800f2ae:	2b03      	cmp	r3, #3
 800f2b0:	d00b      	beq.n	800f2ca <USBD_GetConfig+0x4a>
 800f2b2:	e012      	b.n	800f2da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3308      	adds	r3, #8
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f93c 	bl	800f540 <USBD_CtlSendData>
        break;
 800f2c8:	e00c      	b.n	800f2e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3304      	adds	r3, #4
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f934 	bl	800f540 <USBD_CtlSendData>
        break;
 800f2d8:	e004      	b.n	800f2e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f2da:	6839      	ldr	r1, [r7, #0]
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f000 f8be 	bl	800f45e <USBD_CtlError>
        break;
 800f2e2:	bf00      	nop
}
 800f2e4:	bf00      	nop
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	3b01      	subs	r3, #1
 800f300:	2b02      	cmp	r3, #2
 800f302:	d81e      	bhi.n	800f342 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	88db      	ldrh	r3, [r3, #6]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d004      	beq.n	800f316 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f8a5 	bl	800f45e <USBD_CtlError>
        break;
 800f314:	e01a      	b.n	800f34c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	2201      	movs	r2, #1
 800f31a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f322:	2b00      	cmp	r3, #0
 800f324:	d005      	beq.n	800f332 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	68db      	ldr	r3, [r3, #12]
 800f32a:	f043 0202 	orr.w	r2, r3, #2
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	330c      	adds	r3, #12
 800f336:	2202      	movs	r2, #2
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f900 	bl	800f540 <USBD_CtlSendData>
      break;
 800f340:	e004      	b.n	800f34c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 f88a 	bl	800f45e <USBD_CtlError>
      break;
 800f34a:	bf00      	nop
  }
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
 800f35c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	885b      	ldrh	r3, [r3, #2]
 800f362:	2b01      	cmp	r3, #1
 800f364:	d107      	bne.n	800f376 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	2201      	movs	r2, #1
 800f36a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f940 	bl	800f5f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f374:	e013      	b.n	800f39e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	885b      	ldrh	r3, [r3, #2]
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d10b      	bne.n	800f396 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	889b      	ldrh	r3, [r3, #4]
 800f382:	0a1b      	lsrs	r3, r3, #8
 800f384:	b29b      	uxth	r3, r3
 800f386:	b2da      	uxtb	r2, r3
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f930 	bl	800f5f4 <USBD_CtlSendStatus>
}
 800f394:	e003      	b.n	800f39e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f860 	bl	800f45e <USBD_CtlError>
}
 800f39e:	bf00      	nop
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
 800f3ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d80b      	bhi.n	800f3d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	885b      	ldrh	r3, [r3, #2]
 800f3c2:	2b01      	cmp	r3, #1
 800f3c4:	d10c      	bne.n	800f3e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f910 	bl	800f5f4 <USBD_CtlSendStatus>
      }
      break;
 800f3d4:	e004      	b.n	800f3e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f840 	bl	800f45e <USBD_CtlError>
      break;
 800f3de:	e000      	b.n	800f3e2 <USBD_ClrFeature+0x3c>
      break;
 800f3e0:	bf00      	nop
  }
}
 800f3e2:	bf00      	nop
 800f3e4:	3708      	adds	r7, #8
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b084      	sub	sp, #16
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	781a      	ldrb	r2, [r3, #0]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	3301      	adds	r3, #1
 800f404:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	781a      	ldrb	r2, [r3, #0]
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	3301      	adds	r3, #1
 800f412:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f7ff fa41 	bl	800e89c <SWAPBYTE>
 800f41a:	4603      	mov	r3, r0
 800f41c:	461a      	mov	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	3301      	adds	r3, #1
 800f426:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	3301      	adds	r3, #1
 800f42c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f42e:	68f8      	ldr	r0, [r7, #12]
 800f430:	f7ff fa34 	bl	800e89c <SWAPBYTE>
 800f434:	4603      	mov	r3, r0
 800f436:	461a      	mov	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	3301      	adds	r3, #1
 800f440:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3301      	adds	r3, #1
 800f446:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f7ff fa27 	bl	800e89c <SWAPBYTE>
 800f44e:	4603      	mov	r3, r0
 800f450:	461a      	mov	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	80da      	strh	r2, [r3, #6]
}
 800f456:	bf00      	nop
 800f458:	3710      	adds	r7, #16
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b082      	sub	sp, #8
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f468:	2180      	movs	r1, #128	; 0x80
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f010 fe82 	bl	8020174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f470:	2100      	movs	r1, #0
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f010 fe7e 	bl	8020174 <USBD_LL_StallEP>
}
 800f478:	bf00      	nop
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b086      	sub	sp, #24
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f48c:	2300      	movs	r3, #0
 800f48e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d036      	beq.n	800f504 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f49a:	6938      	ldr	r0, [r7, #16]
 800f49c:	f000 f836 	bl	800f50c <USBD_GetLen>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	005b      	lsls	r3, r3, #1
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f4ae:	7dfb      	ldrb	r3, [r7, #23]
 800f4b0:	68ba      	ldr	r2, [r7, #8]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	7812      	ldrb	r2, [r2, #0]
 800f4b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4ba:	7dfb      	ldrb	r3, [r7, #23]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f4c0:	7dfb      	ldrb	r3, [r7, #23]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	2203      	movs	r2, #3
 800f4c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f4d0:	e013      	b.n	800f4fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f4d2:	7dfb      	ldrb	r3, [r7, #23]
 800f4d4:	68ba      	ldr	r2, [r7, #8]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	693a      	ldr	r2, [r7, #16]
 800f4da:	7812      	ldrb	r2, [r2, #0]
 800f4dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	613b      	str	r3, [r7, #16]
    idx++;
 800f4e4:	7dfb      	ldrb	r3, [r7, #23]
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f4ea:	7dfb      	ldrb	r3, [r7, #23]
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800f4f4:	7dfb      	ldrb	r3, [r7, #23]
 800f4f6:	3301      	adds	r3, #1
 800f4f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e7      	bne.n	800f4d2 <USBD_GetString+0x52>
 800f502:	e000      	b.n	800f506 <USBD_GetString+0x86>
    return;
 800f504:	bf00      	nop
  }
}
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f50c:	b480      	push	{r7}
 800f50e:	b085      	sub	sp, #20
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f514:	2300      	movs	r3, #0
 800f516:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f51c:	e005      	b.n	800f52a <USBD_GetLen+0x1e>
  {
    len++;
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	3301      	adds	r3, #1
 800f522:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	3301      	adds	r3, #1
 800f528:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1f5      	bne.n	800f51e <USBD_GetLen+0x12>
  }

  return len;
 800f532:	7bfb      	ldrb	r3, [r7, #15]
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f540:	b580      	push	{r7, lr}
 800f542:	b084      	sub	sp, #16
 800f544:	af00      	add	r7, sp, #0
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	60b9      	str	r1, [r7, #8]
 800f54a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2202      	movs	r2, #2
 800f550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	687a      	ldr	r2, [r7, #4]
 800f558:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	2100      	movs	r1, #0
 800f566:	68f8      	ldr	r0, [r7, #12]
 800f568:	f010 fe8d 	bl	8020286 <USBD_LL_Transmit>

  return USBD_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b084      	sub	sp, #16
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	60f8      	str	r0, [r7, #12]
 800f57e:	60b9      	str	r1, [r7, #8]
 800f580:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	2100      	movs	r1, #0
 800f588:	68f8      	ldr	r0, [r7, #12]
 800f58a:	f010 fe7c 	bl	8020286 <USBD_LL_Transmit>

  return USBD_OK;
 800f58e:	2300      	movs	r3, #0
}
 800f590:	4618      	mov	r0, r3
 800f592:	3710      	adds	r7, #16
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}

0800f598 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2203      	movs	r2, #3
 800f5a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	687a      	ldr	r2, [r7, #4]
 800f5b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f010 fe80 	bl	80202c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}

0800f5d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f5d2:	b580      	push	{r7, lr}
 800f5d4:	b084      	sub	sp, #16
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	60f8      	str	r0, [r7, #12]
 800f5da:	60b9      	str	r1, [r7, #8]
 800f5dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	68f8      	ldr	r0, [r7, #12]
 800f5e6:	f010 fe6f 	bl	80202c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5ea:	2300      	movs	r3, #0
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2204      	movs	r2, #4
 800f600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f604:	2300      	movs	r3, #0
 800f606:	2200      	movs	r2, #0
 800f608:	2100      	movs	r1, #0
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f010 fe3b 	bl	8020286 <USBD_LL_Transmit>

  return USBD_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b082      	sub	sp, #8
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2205      	movs	r2, #5
 800f626:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f62a:	2300      	movs	r3, #0
 800f62c:	2200      	movs	r2, #0
 800f62e:	2100      	movs	r1, #0
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f010 fe49 	bl	80202c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f636:	2300      	movs	r3, #0
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f640:	b480      	push	{r7}
 800f642:	b087      	sub	sp, #28
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	60b9      	str	r1, [r7, #8]
 800f64a:	4613      	mov	r3, r2
 800f64c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f64e:	2301      	movs	r3, #1
 800f650:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f656:	4b1f      	ldr	r3, [pc, #124]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f658:	7a5b      	ldrb	r3, [r3, #9]
 800f65a:	b2db      	uxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d131      	bne.n	800f6c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f660:	4b1c      	ldr	r3, [pc, #112]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f662:	7a5b      	ldrb	r3, [r3, #9]
 800f664:	b2db      	uxtb	r3, r3
 800f666:	461a      	mov	r2, r3
 800f668:	4b1a      	ldr	r3, [pc, #104]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f66a:	2100      	movs	r1, #0
 800f66c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f66e:	4b19      	ldr	r3, [pc, #100]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f670:	7a5b      	ldrb	r3, [r3, #9]
 800f672:	b2db      	uxtb	r3, r3
 800f674:	4a17      	ldr	r2, [pc, #92]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	4413      	add	r3, r2
 800f67a:	68fa      	ldr	r2, [r7, #12]
 800f67c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f67e:	4b15      	ldr	r3, [pc, #84]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f680:	7a5b      	ldrb	r3, [r3, #9]
 800f682:	b2db      	uxtb	r3, r3
 800f684:	461a      	mov	r2, r3
 800f686:	4b13      	ldr	r3, [pc, #76]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f688:	4413      	add	r3, r2
 800f68a:	79fa      	ldrb	r2, [r7, #7]
 800f68c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f68e:	4b11      	ldr	r3, [pc, #68]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f690:	7a5b      	ldrb	r3, [r3, #9]
 800f692:	b2db      	uxtb	r3, r3
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	b2d1      	uxtb	r1, r2
 800f698:	4a0e      	ldr	r2, [pc, #56]	; (800f6d4 <FATFS_LinkDriverEx+0x94>)
 800f69a:	7251      	strb	r1, [r2, #9]
 800f69c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f69e:	7dbb      	ldrb	r3, [r7, #22]
 800f6a0:	3330      	adds	r3, #48	; 0x30
 800f6a2:	b2da      	uxtb	r2, r3
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	223a      	movs	r2, #58	; 0x3a
 800f6ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	3302      	adds	r3, #2
 800f6b4:	222f      	movs	r2, #47	; 0x2f
 800f6b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	3303      	adds	r3, #3
 800f6bc:	2200      	movs	r2, #0
 800f6be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f6c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	24005004 	.word	0x24005004

0800f6d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
 800f6e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f7ff ffaa 	bl	800f640 <FATFS_LinkDriverEx>
 800f6ec:	4603      	mov	r3, r0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3708      	adds	r7, #8
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <__NVIC_SetPriority>:
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	4603      	mov	r3, r0
 800f700:	6039      	str	r1, [r7, #0]
 800f702:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	db0a      	blt.n	800f722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	490c      	ldr	r1, [pc, #48]	; (800f744 <__NVIC_SetPriority+0x4c>)
 800f712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f716:	0112      	lsls	r2, r2, #4
 800f718:	b2d2      	uxtb	r2, r2
 800f71a:	440b      	add	r3, r1
 800f71c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f720:	e00a      	b.n	800f738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	b2da      	uxtb	r2, r3
 800f726:	4908      	ldr	r1, [pc, #32]	; (800f748 <__NVIC_SetPriority+0x50>)
 800f728:	88fb      	ldrh	r3, [r7, #6]
 800f72a:	f003 030f 	and.w	r3, r3, #15
 800f72e:	3b04      	subs	r3, #4
 800f730:	0112      	lsls	r2, r2, #4
 800f732:	b2d2      	uxtb	r2, r2
 800f734:	440b      	add	r3, r1
 800f736:	761a      	strb	r2, [r3, #24]
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr
 800f744:	e000e100 	.word	0xe000e100
 800f748:	e000ed00 	.word	0xe000ed00

0800f74c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f74c:	b580      	push	{r7, lr}
 800f74e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f750:	4b05      	ldr	r3, [pc, #20]	; (800f768 <SysTick_Handler+0x1c>)
 800f752:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f754:	f002 fcb8 	bl	80120c8 <xTaskGetSchedulerState>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d001      	beq.n	800f762 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f75e:	f003 fb9b 	bl	8012e98 <xPortSysTickHandler>
  }
}
 800f762:	bf00      	nop
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	e000e010 	.word	0xe000e010

0800f76c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f76c:	b580      	push	{r7, lr}
 800f76e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f770:	2100      	movs	r1, #0
 800f772:	f06f 0004 	mvn.w	r0, #4
 800f776:	f7ff ffbf 	bl	800f6f8 <__NVIC_SetPriority>
#endif
}
 800f77a:	bf00      	nop
 800f77c:	bd80      	pop	{r7, pc}
	...

0800f780 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f786:	f3ef 8305 	mrs	r3, IPSR
 800f78a:	603b      	str	r3, [r7, #0]
  return(result);
 800f78c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d003      	beq.n	800f79a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f792:	f06f 0305 	mvn.w	r3, #5
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	e00c      	b.n	800f7b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f79a:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <osKernelInitialize+0x44>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d105      	bne.n	800f7ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f7a2:	4b08      	ldr	r3, [pc, #32]	; (800f7c4 <osKernelInitialize+0x44>)
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	607b      	str	r3, [r7, #4]
 800f7ac:	e002      	b.n	800f7b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f7b4:	687b      	ldr	r3, [r7, #4]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	370c      	adds	r7, #12
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c0:	4770      	bx	lr
 800f7c2:	bf00      	nop
 800f7c4:	24005010 	.word	0x24005010

0800f7c8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f7ce:	f002 fc7b 	bl	80120c8 <xTaskGetSchedulerState>
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d004      	beq.n	800f7e2 <osKernelGetState+0x1a>
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	d105      	bne.n	800f7e8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f7dc:	2302      	movs	r3, #2
 800f7de:	607b      	str	r3, [r7, #4]
      break;
 800f7e0:	e00c      	b.n	800f7fc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	607b      	str	r3, [r7, #4]
      break;
 800f7e6:	e009      	b.n	800f7fc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f7e8:	4b07      	ldr	r3, [pc, #28]	; (800f808 <osKernelGetState+0x40>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d102      	bne.n	800f7f6 <osKernelGetState+0x2e>
        state = osKernelReady;
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f7f4:	e001      	b.n	800f7fa <osKernelGetState+0x32>
        state = osKernelInactive;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	607b      	str	r3, [r7, #4]
      break;
 800f7fa:	bf00      	nop
  }

  return (state);
 800f7fc:	687b      	ldr	r3, [r7, #4]
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	24005010 	.word	0x24005010

0800f80c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f812:	f3ef 8305 	mrs	r3, IPSR
 800f816:	603b      	str	r3, [r7, #0]
  return(result);
 800f818:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d003      	beq.n	800f826 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f81e:	f06f 0305 	mvn.w	r3, #5
 800f822:	607b      	str	r3, [r7, #4]
 800f824:	e010      	b.n	800f848 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f826:	4b0b      	ldr	r3, [pc, #44]	; (800f854 <osKernelStart+0x48>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	2b01      	cmp	r3, #1
 800f82c:	d109      	bne.n	800f842 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f82e:	f7ff ff9d 	bl	800f76c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f832:	4b08      	ldr	r3, [pc, #32]	; (800f854 <osKernelStart+0x48>)
 800f834:	2202      	movs	r2, #2
 800f836:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f838:	f001 ffc8 	bl	80117cc <vTaskStartScheduler>
      stat = osOK;
 800f83c:	2300      	movs	r3, #0
 800f83e:	607b      	str	r3, [r7, #4]
 800f840:	e002      	b.n	800f848 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f842:	f04f 33ff 	mov.w	r3, #4294967295
 800f846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f848:	687b      	ldr	r3, [r7, #4]
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	24005010 	.word	0x24005010

0800f858 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f85e:	f3ef 8305 	mrs	r3, IPSR
 800f862:	603b      	str	r3, [r7, #0]
  return(result);
 800f864:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f866:	2b00      	cmp	r3, #0
 800f868:	d003      	beq.n	800f872 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f86a:	f002 f8db 	bl	8011a24 <xTaskGetTickCountFromISR>
 800f86e:	6078      	str	r0, [r7, #4]
 800f870:	e002      	b.n	800f878 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f872:	f002 f8c7 	bl	8011a04 <xTaskGetTickCount>
 800f876:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f878:	687b      	ldr	r3, [r7, #4]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3708      	adds	r7, #8
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}

0800f882 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f882:	b580      	push	{r7, lr}
 800f884:	b08e      	sub	sp, #56	; 0x38
 800f886:	af04      	add	r7, sp, #16
 800f888:	60f8      	str	r0, [r7, #12]
 800f88a:	60b9      	str	r1, [r7, #8]
 800f88c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f88e:	2300      	movs	r3, #0
 800f890:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f892:	f3ef 8305 	mrs	r3, IPSR
 800f896:	617b      	str	r3, [r7, #20]
  return(result);
 800f898:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d17e      	bne.n	800f99c <osThreadNew+0x11a>
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d07b      	beq.n	800f99c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f8a4:	2380      	movs	r3, #128	; 0x80
 800f8a6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f8a8:	2318      	movs	r3, #24
 800f8aa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f8b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d045      	beq.n	800f948 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <osThreadNew+0x48>
        name = attr->name;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	699b      	ldr	r3, [r3, #24]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d002      	beq.n	800f8d8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	699b      	ldr	r3, [r3, #24]
 800f8d6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d008      	beq.n	800f8f0 <osThreadNew+0x6e>
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	2b38      	cmp	r3, #56	; 0x38
 800f8e2:	d805      	bhi.n	800f8f0 <osThreadNew+0x6e>
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	f003 0301 	and.w	r3, r3, #1
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <osThreadNew+0x72>
        return (NULL);
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e054      	b.n	800f99e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	695b      	ldr	r3, [r3, #20]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d003      	beq.n	800f904 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	695b      	ldr	r3, [r3, #20]
 800f900:	089b      	lsrs	r3, r3, #2
 800f902:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <osThreadNew+0xa8>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	2bbb      	cmp	r3, #187	; 0xbb
 800f912:	d90a      	bls.n	800f92a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d006      	beq.n	800f92a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	695b      	ldr	r3, [r3, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d002      	beq.n	800f92a <osThreadNew+0xa8>
        mem = 1;
 800f924:	2301      	movs	r3, #1
 800f926:	61bb      	str	r3, [r7, #24]
 800f928:	e010      	b.n	800f94c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d10c      	bne.n	800f94c <osThreadNew+0xca>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	68db      	ldr	r3, [r3, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d108      	bne.n	800f94c <osThreadNew+0xca>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	691b      	ldr	r3, [r3, #16]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d104      	bne.n	800f94c <osThreadNew+0xca>
          mem = 0;
 800f942:	2300      	movs	r3, #0
 800f944:	61bb      	str	r3, [r7, #24]
 800f946:	e001      	b.n	800f94c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f948:	2300      	movs	r3, #0
 800f94a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d110      	bne.n	800f974 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f95a:	9202      	str	r2, [sp, #8]
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	6a3a      	ldr	r2, [r7, #32]
 800f966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f001 fd43 	bl	80113f4 <xTaskCreateStatic>
 800f96e:	4603      	mov	r3, r0
 800f970:	613b      	str	r3, [r7, #16]
 800f972:	e013      	b.n	800f99c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d110      	bne.n	800f99c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f97a:	6a3b      	ldr	r3, [r7, #32]
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	f107 0310 	add.w	r3, r7, #16
 800f982:	9301      	str	r3, [sp, #4]
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f98c:	68f8      	ldr	r0, [r7, #12]
 800f98e:	f001 fd8e 	bl	80114ae <xTaskCreate>
 800f992:	4603      	mov	r3, r0
 800f994:	2b01      	cmp	r3, #1
 800f996:	d001      	beq.n	800f99c <osThreadNew+0x11a>
            hTask = NULL;
 800f998:	2300      	movs	r3, #0
 800f99a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f99c:	693b      	ldr	r3, [r7, #16]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3728      	adds	r7, #40	; 0x28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9ae:	f3ef 8305 	mrs	r3, IPSR
 800f9b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800f9b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d003      	beq.n	800f9c2 <osDelay+0x1c>
    stat = osErrorISR;
 800f9ba:	f06f 0305 	mvn.w	r3, #5
 800f9be:	60fb      	str	r3, [r7, #12]
 800f9c0:	e007      	b.n	800f9d2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f001 fec9 	bl	8011764 <vTaskDelay>
    }
  }

  return (stat);
 800f9d2:	68fb      	ldr	r3, [r7, #12]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9e8:	f3ef 8305 	mrs	r3, IPSR
 800f9ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800f9ee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d174      	bne.n	800fade <osMutexNew+0x102>
    if (attr != NULL) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d003      	beq.n	800fa02 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	61bb      	str	r3, [r7, #24]
 800fa00:	e001      	b.n	800fa06 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800fa02:	2300      	movs	r3, #0
 800fa04:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	f003 0301 	and.w	r3, r3, #1
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d002      	beq.n	800fa16 <osMutexNew+0x3a>
      rmtx = 1U;
 800fa10:	2301      	movs	r3, #1
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e001      	b.n	800fa1a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	f003 0308 	and.w	r3, r3, #8
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d15c      	bne.n	800fade <osMutexNew+0x102>
      mem = -1;
 800fa24:	f04f 33ff 	mov.w	r3, #4294967295
 800fa28:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d015      	beq.n	800fa5c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	689b      	ldr	r3, [r3, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d006      	beq.n	800fa46 <osMutexNew+0x6a>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	68db      	ldr	r3, [r3, #12]
 800fa3c:	2b4f      	cmp	r3, #79	; 0x4f
 800fa3e:	d902      	bls.n	800fa46 <osMutexNew+0x6a>
          mem = 1;
 800fa40:	2301      	movs	r3, #1
 800fa42:	613b      	str	r3, [r7, #16]
 800fa44:	e00c      	b.n	800fa60 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d108      	bne.n	800fa60 <osMutexNew+0x84>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d104      	bne.n	800fa60 <osMutexNew+0x84>
            mem = 0;
 800fa56:	2300      	movs	r3, #0
 800fa58:	613b      	str	r3, [r7, #16]
 800fa5a:	e001      	b.n	800fa60 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d112      	bne.n	800fa8c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800fa66:	697b      	ldr	r3, [r7, #20]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d007      	beq.n	800fa7c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	689b      	ldr	r3, [r3, #8]
 800fa70:	4619      	mov	r1, r3
 800fa72:	2004      	movs	r0, #4
 800fa74:	f000 fd69 	bl	801054a <xQueueCreateMutexStatic>
 800fa78:	61f8      	str	r0, [r7, #28]
 800fa7a:	e016      	b.n	800faaa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	689b      	ldr	r3, [r3, #8]
 800fa80:	4619      	mov	r1, r3
 800fa82:	2001      	movs	r0, #1
 800fa84:	f000 fd61 	bl	801054a <xQueueCreateMutexStatic>
 800fa88:	61f8      	str	r0, [r7, #28]
 800fa8a:	e00e      	b.n	800faaa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10b      	bne.n	800faaa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d004      	beq.n	800faa2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800fa98:	2004      	movs	r0, #4
 800fa9a:	f000 fd3e 	bl	801051a <xQueueCreateMutex>
 800fa9e:	61f8      	str	r0, [r7, #28]
 800faa0:	e003      	b.n	800faaa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800faa2:	2001      	movs	r0, #1
 800faa4:	f000 fd39 	bl	801051a <xQueueCreateMutex>
 800faa8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800faaa:	69fb      	ldr	r3, [r7, #28]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00c      	beq.n	800faca <osMutexNew+0xee>
        if (attr != NULL) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d003      	beq.n	800fabe <osMutexNew+0xe2>
          name = attr->name;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	60fb      	str	r3, [r7, #12]
 800fabc:	e001      	b.n	800fac2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800fabe:	2300      	movs	r3, #0
 800fac0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800fac2:	68f9      	ldr	r1, [r7, #12]
 800fac4:	69f8      	ldr	r0, [r7, #28]
 800fac6:	f001 fc0d 	bl	80112e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	2b00      	cmp	r3, #0
 800face:	d006      	beq.n	800fade <osMutexNew+0x102>
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d003      	beq.n	800fade <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	f043 0301 	orr.w	r3, r3, #1
 800fadc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800fade:	69fb      	ldr	r3, [r7, #28]
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3720      	adds	r7, #32
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f023 0301 	bic.w	r3, r3, #1
 800faf8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800fb02:	2300      	movs	r3, #0
 800fb04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb06:	f3ef 8305 	mrs	r3, IPSR
 800fb0a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb0c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d003      	beq.n	800fb1a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800fb12:	f06f 0305 	mvn.w	r3, #5
 800fb16:	617b      	str	r3, [r7, #20]
 800fb18:	e02c      	b.n	800fb74 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d103      	bne.n	800fb28 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800fb20:	f06f 0303 	mvn.w	r3, #3
 800fb24:	617b      	str	r3, [r7, #20]
 800fb26:	e025      	b.n	800fb74 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d011      	beq.n	800fb52 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6938      	ldr	r0, [r7, #16]
 800fb32:	f000 fd59 	bl	80105e8 <xQueueTakeMutexRecursive>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d01b      	beq.n	800fb74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d003      	beq.n	800fb4a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800fb42:	f06f 0301 	mvn.w	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	e014      	b.n	800fb74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fb4a:	f06f 0302 	mvn.w	r3, #2
 800fb4e:	617b      	str	r3, [r7, #20]
 800fb50:	e010      	b.n	800fb74 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800fb52:	6839      	ldr	r1, [r7, #0]
 800fb54:	6938      	ldr	r0, [r7, #16]
 800fb56:	f001 f8ed 	bl	8010d34 <xQueueSemaphoreTake>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d009      	beq.n	800fb74 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d003      	beq.n	800fb6e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800fb66:	f06f 0301 	mvn.w	r3, #1
 800fb6a:	617b      	str	r3, [r7, #20]
 800fb6c:	e002      	b.n	800fb74 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fb6e:	f06f 0302 	mvn.w	r3, #2
 800fb72:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800fb74:	697b      	ldr	r3, [r7, #20]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3718      	adds	r7, #24
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b086      	sub	sp, #24
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f023 0301 	bic.w	r3, r3, #1
 800fb8c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800fb96:	2300      	movs	r3, #0
 800fb98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb9a:	f3ef 8305 	mrs	r3, IPSR
 800fb9e:	60bb      	str	r3, [r7, #8]
  return(result);
 800fba0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d003      	beq.n	800fbae <osMutexRelease+0x30>
    stat = osErrorISR;
 800fba6:	f06f 0305 	mvn.w	r3, #5
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	e01f      	b.n	800fbee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d103      	bne.n	800fbbc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800fbb4:	f06f 0303 	mvn.w	r3, #3
 800fbb8:	617b      	str	r3, [r7, #20]
 800fbba:	e018      	b.n	800fbee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d009      	beq.n	800fbd6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800fbc2:	6938      	ldr	r0, [r7, #16]
 800fbc4:	f000 fcdc 	bl	8010580 <xQueueGiveMutexRecursive>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d00f      	beq.n	800fbee <osMutexRelease+0x70>
        stat = osErrorResource;
 800fbce:	f06f 0302 	mvn.w	r3, #2
 800fbd2:	617b      	str	r3, [r7, #20]
 800fbd4:	e00b      	b.n	800fbee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	2200      	movs	r2, #0
 800fbda:	2100      	movs	r1, #0
 800fbdc:	6938      	ldr	r0, [r7, #16]
 800fbde:	f000 fda3 	bl	8010728 <xQueueGenericSend>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d002      	beq.n	800fbee <osMutexRelease+0x70>
        stat = osErrorResource;
 800fbe8:	f06f 0302 	mvn.w	r3, #2
 800fbec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fbee:	697b      	ldr	r3, [r7, #20]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}

0800fbf8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b08a      	sub	sp, #40	; 0x28
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	60f8      	str	r0, [r7, #12]
 800fc00:	60b9      	str	r1, [r7, #8]
 800fc02:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fc04:	2300      	movs	r3, #0
 800fc06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc08:	f3ef 8305 	mrs	r3, IPSR
 800fc0c:	613b      	str	r3, [r7, #16]
  return(result);
 800fc0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d175      	bne.n	800fd00 <osSemaphoreNew+0x108>
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d072      	beq.n	800fd00 <osSemaphoreNew+0x108>
 800fc1a:	68ba      	ldr	r2, [r7, #8]
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d86e      	bhi.n	800fd00 <osSemaphoreNew+0x108>
    mem = -1;
 800fc22:	f04f 33ff 	mov.w	r3, #4294967295
 800fc26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d015      	beq.n	800fc5a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d006      	beq.n	800fc44 <osSemaphoreNew+0x4c>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	2b4f      	cmp	r3, #79	; 0x4f
 800fc3c:	d902      	bls.n	800fc44 <osSemaphoreNew+0x4c>
        mem = 1;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	61bb      	str	r3, [r7, #24]
 800fc42:	e00c      	b.n	800fc5e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d108      	bne.n	800fc5e <osSemaphoreNew+0x66>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d104      	bne.n	800fc5e <osSemaphoreNew+0x66>
          mem = 0;
 800fc54:	2300      	movs	r3, #0
 800fc56:	61bb      	str	r3, [r7, #24]
 800fc58:	e001      	b.n	800fc5e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc64:	d04c      	beq.n	800fd00 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d128      	bne.n	800fcbe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fc6c:	69bb      	ldr	r3, [r7, #24]
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d10a      	bne.n	800fc88 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	2203      	movs	r2, #3
 800fc78:	9200      	str	r2, [sp, #0]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	2001      	movs	r0, #1
 800fc80:	f000 fb5c 	bl	801033c <xQueueGenericCreateStatic>
 800fc84:	61f8      	str	r0, [r7, #28]
 800fc86:	e005      	b.n	800fc94 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fc88:	2203      	movs	r2, #3
 800fc8a:	2100      	movs	r1, #0
 800fc8c:	2001      	movs	r0, #1
 800fc8e:	f000 fbcd 	bl	801042c <xQueueGenericCreate>
 800fc92:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fc94:	69fb      	ldr	r3, [r7, #28]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d022      	beq.n	800fce0 <osSemaphoreNew+0xe8>
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d01f      	beq.n	800fce0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fca0:	2300      	movs	r3, #0
 800fca2:	2200      	movs	r2, #0
 800fca4:	2100      	movs	r1, #0
 800fca6:	69f8      	ldr	r0, [r7, #28]
 800fca8:	f000 fd3e 	bl	8010728 <xQueueGenericSend>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d016      	beq.n	800fce0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fcb2:	69f8      	ldr	r0, [r7, #28]
 800fcb4:	f001 f9ca 	bl	801104c <vQueueDelete>
            hSemaphore = NULL;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	61fb      	str	r3, [r7, #28]
 800fcbc:	e010      	b.n	800fce0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d108      	bne.n	800fcd6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	68b9      	ldr	r1, [r7, #8]
 800fccc:	68f8      	ldr	r0, [r7, #12]
 800fcce:	f000 fcc1 	bl	8010654 <xQueueCreateCountingSemaphoreStatic>
 800fcd2:	61f8      	str	r0, [r7, #28]
 800fcd4:	e004      	b.n	800fce0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fcd6:	68b9      	ldr	r1, [r7, #8]
 800fcd8:	68f8      	ldr	r0, [r7, #12]
 800fcda:	f000 fcf2 	bl	80106c2 <xQueueCreateCountingSemaphore>
 800fcde:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00c      	beq.n	800fd00 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d003      	beq.n	800fcf4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	617b      	str	r3, [r7, #20]
 800fcf2:	e001      	b.n	800fcf8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fcf8:	6979      	ldr	r1, [r7, #20]
 800fcfa:	69f8      	ldr	r0, [r7, #28]
 800fcfc:	f001 faf2 	bl	80112e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fd00:	69fb      	ldr	r3, [r7, #28]
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	3720      	adds	r7, #32
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b086      	sub	sp, #24
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fd1e:	693b      	ldr	r3, [r7, #16]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d103      	bne.n	800fd2c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fd24:	f06f 0303 	mvn.w	r3, #3
 800fd28:	617b      	str	r3, [r7, #20]
 800fd2a:	e039      	b.n	800fda0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd2c:	f3ef 8305 	mrs	r3, IPSR
 800fd30:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd32:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d022      	beq.n	800fd7e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d003      	beq.n	800fd46 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fd3e:	f06f 0303 	mvn.w	r3, #3
 800fd42:	617b      	str	r3, [r7, #20]
 800fd44:	e02c      	b.n	800fda0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fd46:	2300      	movs	r3, #0
 800fd48:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	461a      	mov	r2, r3
 800fd50:	2100      	movs	r1, #0
 800fd52:	6938      	ldr	r0, [r7, #16]
 800fd54:	f001 f8fa 	bl	8010f4c <xQueueReceiveFromISR>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d003      	beq.n	800fd66 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fd5e:	f06f 0302 	mvn.w	r3, #2
 800fd62:	617b      	str	r3, [r7, #20]
 800fd64:	e01c      	b.n	800fda0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d019      	beq.n	800fda0 <osSemaphoreAcquire+0x94>
 800fd6c:	4b0f      	ldr	r3, [pc, #60]	; (800fdac <osSemaphoreAcquire+0xa0>)
 800fd6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd72:	601a      	str	r2, [r3, #0]
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	e010      	b.n	800fda0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fd7e:	6839      	ldr	r1, [r7, #0]
 800fd80:	6938      	ldr	r0, [r7, #16]
 800fd82:	f000 ffd7 	bl	8010d34 <xQueueSemaphoreTake>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b01      	cmp	r3, #1
 800fd8a:	d009      	beq.n	800fda0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fd92:	f06f 0301 	mvn.w	r3, #1
 800fd96:	617b      	str	r3, [r7, #20]
 800fd98:	e002      	b.n	800fda0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fd9a:	f06f 0302 	mvn.w	r3, #2
 800fd9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fda0:	697b      	ldr	r3, [r7, #20]
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	e000ed04 	.word	0xe000ed04

0800fdb0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d103      	bne.n	800fdce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fdc6:	f06f 0303 	mvn.w	r3, #3
 800fdca:	617b      	str	r3, [r7, #20]
 800fdcc:	e02c      	b.n	800fe28 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdce:	f3ef 8305 	mrs	r3, IPSR
 800fdd2:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d01a      	beq.n	800fe10 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fdda:	2300      	movs	r3, #0
 800fddc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fdde:	f107 0308 	add.w	r3, r7, #8
 800fde2:	4619      	mov	r1, r3
 800fde4:	6938      	ldr	r0, [r7, #16]
 800fde6:	f000 fe38 	bl	8010a5a <xQueueGiveFromISR>
 800fdea:	4603      	mov	r3, r0
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	d003      	beq.n	800fdf8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fdf0:	f06f 0302 	mvn.w	r3, #2
 800fdf4:	617b      	str	r3, [r7, #20]
 800fdf6:	e017      	b.n	800fe28 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d014      	beq.n	800fe28 <osSemaphoreRelease+0x78>
 800fdfe:	4b0d      	ldr	r3, [pc, #52]	; (800fe34 <osSemaphoreRelease+0x84>)
 800fe00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe04:	601a      	str	r2, [r3, #0]
 800fe06:	f3bf 8f4f 	dsb	sy
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	e00b      	b.n	800fe28 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fe10:	2300      	movs	r3, #0
 800fe12:	2200      	movs	r2, #0
 800fe14:	2100      	movs	r1, #0
 800fe16:	6938      	ldr	r0, [r7, #16]
 800fe18:	f000 fc86 	bl	8010728 <xQueueGenericSend>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b01      	cmp	r3, #1
 800fe20:	d002      	beq.n	800fe28 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fe22:	f06f 0302 	mvn.w	r3, #2
 800fe26:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fe28:	697b      	ldr	r3, [r7, #20]
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3718      	adds	r7, #24
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	e000ed04 	.word	0xe000ed04

0800fe38 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b08a      	sub	sp, #40	; 0x28
 800fe3c:	af02      	add	r7, sp, #8
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fe44:	2300      	movs	r3, #0
 800fe46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe48:	f3ef 8305 	mrs	r3, IPSR
 800fe4c:	613b      	str	r3, [r7, #16]
  return(result);
 800fe4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d15f      	bne.n	800ff14 <osMessageQueueNew+0xdc>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d05c      	beq.n	800ff14 <osMessageQueueNew+0xdc>
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d059      	beq.n	800ff14 <osMessageQueueNew+0xdc>
    mem = -1;
 800fe60:	f04f 33ff 	mov.w	r3, #4294967295
 800fe64:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d029      	beq.n	800fec0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d012      	beq.n	800fe9a <osMessageQueueNew+0x62>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	68db      	ldr	r3, [r3, #12]
 800fe78:	2b4f      	cmp	r3, #79	; 0x4f
 800fe7a:	d90e      	bls.n	800fe9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d00a      	beq.n	800fe9a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	695a      	ldr	r2, [r3, #20]
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	68b9      	ldr	r1, [r7, #8]
 800fe8c:	fb01 f303 	mul.w	r3, r1, r3
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d302      	bcc.n	800fe9a <osMessageQueueNew+0x62>
        mem = 1;
 800fe94:	2301      	movs	r3, #1
 800fe96:	61bb      	str	r3, [r7, #24]
 800fe98:	e014      	b.n	800fec4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d110      	bne.n	800fec4 <osMessageQueueNew+0x8c>
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10c      	bne.n	800fec4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d108      	bne.n	800fec4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	695b      	ldr	r3, [r3, #20]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d104      	bne.n	800fec4 <osMessageQueueNew+0x8c>
          mem = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	61bb      	str	r3, [r7, #24]
 800febe:	e001      	b.n	800fec4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fec0:	2300      	movs	r3, #0
 800fec2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	2b01      	cmp	r3, #1
 800fec8:	d10b      	bne.n	800fee2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	691a      	ldr	r2, [r3, #16]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	2100      	movs	r1, #0
 800fed4:	9100      	str	r1, [sp, #0]
 800fed6:	68b9      	ldr	r1, [r7, #8]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f000 fa2f 	bl	801033c <xQueueGenericCreateStatic>
 800fede:	61f8      	str	r0, [r7, #28]
 800fee0:	e008      	b.n	800fef4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d105      	bne.n	800fef4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fee8:	2200      	movs	r2, #0
 800feea:	68b9      	ldr	r1, [r7, #8]
 800feec:	68f8      	ldr	r0, [r7, #12]
 800feee:	f000 fa9d 	bl	801042c <xQueueGenericCreate>
 800fef2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d00c      	beq.n	800ff14 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d003      	beq.n	800ff08 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	e001      	b.n	800ff0c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ff0c:	6979      	ldr	r1, [r7, #20]
 800ff0e:	69f8      	ldr	r0, [r7, #28]
 800ff10:	f001 f9e8 	bl	80112e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ff14:	69fb      	ldr	r3, [r7, #28]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3720      	adds	r7, #32
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
	...

0800ff20 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b088      	sub	sp, #32
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	603b      	str	r3, [r7, #0]
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ff34:	2300      	movs	r3, #0
 800ff36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff38:	f3ef 8305 	mrs	r3, IPSR
 800ff3c:	617b      	str	r3, [r7, #20]
  return(result);
 800ff3e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d028      	beq.n	800ff96 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ff44:	69bb      	ldr	r3, [r7, #24]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d005      	beq.n	800ff56 <osMessageQueuePut+0x36>
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d002      	beq.n	800ff56 <osMessageQueuePut+0x36>
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d003      	beq.n	800ff5e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ff56:	f06f 0303 	mvn.w	r3, #3
 800ff5a:	61fb      	str	r3, [r7, #28]
 800ff5c:	e038      	b.n	800ffd0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ff62:	f107 0210 	add.w	r2, r7, #16
 800ff66:	2300      	movs	r3, #0
 800ff68:	68b9      	ldr	r1, [r7, #8]
 800ff6a:	69b8      	ldr	r0, [r7, #24]
 800ff6c:	f000 fcda 	bl	8010924 <xQueueGenericSendFromISR>
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d003      	beq.n	800ff7e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ff76:	f06f 0302 	mvn.w	r3, #2
 800ff7a:	61fb      	str	r3, [r7, #28]
 800ff7c:	e028      	b.n	800ffd0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d025      	beq.n	800ffd0 <osMessageQueuePut+0xb0>
 800ff84:	4b15      	ldr	r3, [pc, #84]	; (800ffdc <osMessageQueuePut+0xbc>)
 800ff86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff8a:	601a      	str	r2, [r3, #0]
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	e01c      	b.n	800ffd0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ff96:	69bb      	ldr	r3, [r7, #24]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d002      	beq.n	800ffa2 <osMessageQueuePut+0x82>
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d103      	bne.n	800ffaa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ffa2:	f06f 0303 	mvn.w	r3, #3
 800ffa6:	61fb      	str	r3, [r7, #28]
 800ffa8:	e012      	b.n	800ffd0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ffaa:	2300      	movs	r3, #0
 800ffac:	683a      	ldr	r2, [r7, #0]
 800ffae:	68b9      	ldr	r1, [r7, #8]
 800ffb0:	69b8      	ldr	r0, [r7, #24]
 800ffb2:	f000 fbb9 	bl	8010728 <xQueueGenericSend>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d009      	beq.n	800ffd0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d003      	beq.n	800ffca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ffc2:	f06f 0301 	mvn.w	r3, #1
 800ffc6:	61fb      	str	r3, [r7, #28]
 800ffc8:	e002      	b.n	800ffd0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ffca:	f06f 0302 	mvn.w	r3, #2
 800ffce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ffd0:	69fb      	ldr	r3, [r7, #28]
}
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	3720      	adds	r7, #32
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	e000ed04 	.word	0xe000ed04

0800ffe0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b088      	sub	sp, #32
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	60f8      	str	r0, [r7, #12]
 800ffe8:	60b9      	str	r1, [r7, #8]
 800ffea:	607a      	str	r2, [r7, #4]
 800ffec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fff2:	2300      	movs	r3, #0
 800fff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fff6:	f3ef 8305 	mrs	r3, IPSR
 800fffa:	617b      	str	r3, [r7, #20]
  return(result);
 800fffc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d028      	beq.n	8010054 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d005      	beq.n	8010014 <osMessageQueueGet+0x34>
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d002      	beq.n	8010014 <osMessageQueueGet+0x34>
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d003      	beq.n	801001c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010014:	f06f 0303 	mvn.w	r3, #3
 8010018:	61fb      	str	r3, [r7, #28]
 801001a:	e037      	b.n	801008c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801001c:	2300      	movs	r3, #0
 801001e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010020:	f107 0310 	add.w	r3, r7, #16
 8010024:	461a      	mov	r2, r3
 8010026:	68b9      	ldr	r1, [r7, #8]
 8010028:	69b8      	ldr	r0, [r7, #24]
 801002a:	f000 ff8f 	bl	8010f4c <xQueueReceiveFromISR>
 801002e:	4603      	mov	r3, r0
 8010030:	2b01      	cmp	r3, #1
 8010032:	d003      	beq.n	801003c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010034:	f06f 0302 	mvn.w	r3, #2
 8010038:	61fb      	str	r3, [r7, #28]
 801003a:	e027      	b.n	801008c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d024      	beq.n	801008c <osMessageQueueGet+0xac>
 8010042:	4b15      	ldr	r3, [pc, #84]	; (8010098 <osMessageQueueGet+0xb8>)
 8010044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010048:	601a      	str	r2, [r3, #0]
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	f3bf 8f6f 	isb	sy
 8010052:	e01b      	b.n	801008c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d002      	beq.n	8010060 <osMessageQueueGet+0x80>
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d103      	bne.n	8010068 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010060:	f06f 0303 	mvn.w	r3, #3
 8010064:	61fb      	str	r3, [r7, #28]
 8010066:	e011      	b.n	801008c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010068:	683a      	ldr	r2, [r7, #0]
 801006a:	68b9      	ldr	r1, [r7, #8]
 801006c:	69b8      	ldr	r0, [r7, #24]
 801006e:	f000 fd81 	bl	8010b74 <xQueueReceive>
 8010072:	4603      	mov	r3, r0
 8010074:	2b01      	cmp	r3, #1
 8010076:	d009      	beq.n	801008c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801007e:	f06f 0301 	mvn.w	r3, #1
 8010082:	61fb      	str	r3, [r7, #28]
 8010084:	e002      	b.n	801008c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010086:	f06f 0302 	mvn.w	r3, #2
 801008a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801008c:	69fb      	ldr	r3, [r7, #28]
}
 801008e:	4618      	mov	r0, r3
 8010090:	3720      	adds	r7, #32
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	e000ed04 	.word	0xe000ed04

0801009c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	4a07      	ldr	r2, [pc, #28]	; (80100c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80100ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	4a06      	ldr	r2, [pc, #24]	; (80100cc <vApplicationGetIdleTaskMemory+0x30>)
 80100b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2280      	movs	r2, #128	; 0x80
 80100b8:	601a      	str	r2, [r3, #0]
}
 80100ba:	bf00      	nop
 80100bc:	3714      	adds	r7, #20
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop
 80100c8:	24005014 	.word	0x24005014
 80100cc:	240050d0 	.word	0x240050d0

080100d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80100d0:	b480      	push	{r7}
 80100d2:	b085      	sub	sp, #20
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	60f8      	str	r0, [r7, #12]
 80100d8:	60b9      	str	r1, [r7, #8]
 80100da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4a07      	ldr	r2, [pc, #28]	; (80100fc <vApplicationGetTimerTaskMemory+0x2c>)
 80100e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	4a06      	ldr	r2, [pc, #24]	; (8010100 <vApplicationGetTimerTaskMemory+0x30>)
 80100e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80100ee:	601a      	str	r2, [r3, #0]
}
 80100f0:	bf00      	nop
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	240052d0 	.word	0x240052d0
 8010100:	2400538c 	.word	0x2400538c

08010104 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f103 0208 	add.w	r2, r3, #8
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f04f 32ff 	mov.w	r2, #4294967295
 801011c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f103 0208 	add.w	r2, r3, #8
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f103 0208 	add.w	r2, r3, #8
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010152:	bf00      	nop
 8010154:	370c      	adds	r7, #12
 8010156:	46bd      	mov	sp, r7
 8010158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015c:	4770      	bx	lr

0801015e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801015e:	b480      	push	{r7}
 8010160:	b085      	sub	sp, #20
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
 8010166:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	689a      	ldr	r2, [r3, #8]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	683a      	ldr	r2, [r7, #0]
 8010182:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801018a:	683b      	ldr	r3, [r7, #0]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	1c5a      	adds	r2, r3, #1
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	601a      	str	r2, [r3, #0]
}
 801019a:	bf00      	nop
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr

080101a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80101a6:	b480      	push	{r7}
 80101a8:	b085      	sub	sp, #20
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
 80101ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80101b6:	68bb      	ldr	r3, [r7, #8]
 80101b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101bc:	d103      	bne.n	80101c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	691b      	ldr	r3, [r3, #16]
 80101c2:	60fb      	str	r3, [r7, #12]
 80101c4:	e00c      	b.n	80101e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	3308      	adds	r3, #8
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	e002      	b.n	80101d4 <vListInsert+0x2e>
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	685b      	ldr	r3, [r3, #4]
 80101d2:	60fb      	str	r3, [r7, #12]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	429a      	cmp	r2, r3
 80101de:	d2f6      	bcs.n	80101ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	685b      	ldr	r3, [r3, #4]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	68fa      	ldr	r2, [r7, #12]
 80101f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	683a      	ldr	r2, [r7, #0]
 80101fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	1c5a      	adds	r2, r3, #1
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	601a      	str	r2, [r3, #0]
}
 801020c:	bf00      	nop
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	6892      	ldr	r2, [r2, #8]
 801022e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	6852      	ldr	r2, [r2, #4]
 8010238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d103      	bne.n	801024c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689a      	ldr	r2, [r3, #8]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2200      	movs	r2, #0
 8010250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	1e5a      	subs	r2, r3, #1
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
}
 8010260:	4618      	mov	r0, r3
 8010262:	3714      	adds	r7, #20
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10a      	bne.n	8010296 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010292:	bf00      	nop
 8010294:	e7fe      	b.n	8010294 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010296:	f002 fd6d 	bl	8012d74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102a2:	68f9      	ldr	r1, [r7, #12]
 80102a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102a6:	fb01 f303 	mul.w	r3, r1, r3
 80102aa:	441a      	add	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	2200      	movs	r2, #0
 80102b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	681a      	ldr	r2, [r3, #0]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102c6:	3b01      	subs	r3, #1
 80102c8:	68f9      	ldr	r1, [r7, #12]
 80102ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80102cc:	fb01 f303 	mul.w	r3, r1, r3
 80102d0:	441a      	add	r2, r3
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	22ff      	movs	r2, #255	; 0xff
 80102da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	22ff      	movs	r2, #255	; 0xff
 80102e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d114      	bne.n	8010316 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	691b      	ldr	r3, [r3, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d01a      	beq.n	801032a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3310      	adds	r3, #16
 80102f8:	4618      	mov	r0, r3
 80102fa:	f001 fd13 	bl	8011d24 <xTaskRemoveFromEventList>
 80102fe:	4603      	mov	r3, r0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d012      	beq.n	801032a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010304:	4b0c      	ldr	r3, [pc, #48]	; (8010338 <xQueueGenericReset+0xcc>)
 8010306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801030a:	601a      	str	r2, [r3, #0]
 801030c:	f3bf 8f4f 	dsb	sy
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	e009      	b.n	801032a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	3310      	adds	r3, #16
 801031a:	4618      	mov	r0, r3
 801031c:	f7ff fef2 	bl	8010104 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	3324      	adds	r3, #36	; 0x24
 8010324:	4618      	mov	r0, r3
 8010326:	f7ff feed 	bl	8010104 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801032a:	f002 fd53 	bl	8012dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801032e:	2301      	movs	r3, #1
}
 8010330:	4618      	mov	r0, r3
 8010332:	3710      	adds	r7, #16
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}
 8010338:	e000ed04 	.word	0xe000ed04

0801033c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801033c:	b580      	push	{r7, lr}
 801033e:	b08e      	sub	sp, #56	; 0x38
 8010340:	af02      	add	r7, sp, #8
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
 8010348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d10a      	bne.n	8010366 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010354:	f383 8811 	msr	BASEPRI, r3
 8010358:	f3bf 8f6f 	isb	sy
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010362:	bf00      	nop
 8010364:	e7fe      	b.n	8010364 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d10a      	bne.n	8010382 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010370:	f383 8811 	msr	BASEPRI, r3
 8010374:	f3bf 8f6f 	isb	sy
 8010378:	f3bf 8f4f 	dsb	sy
 801037c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801037e:	bf00      	nop
 8010380:	e7fe      	b.n	8010380 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d002      	beq.n	801038e <xQueueGenericCreateStatic+0x52>
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d001      	beq.n	8010392 <xQueueGenericCreateStatic+0x56>
 801038e:	2301      	movs	r3, #1
 8010390:	e000      	b.n	8010394 <xQueueGenericCreateStatic+0x58>
 8010392:	2300      	movs	r3, #0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d10a      	bne.n	80103ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039c:	f383 8811 	msr	BASEPRI, r3
 80103a0:	f3bf 8f6f 	isb	sy
 80103a4:	f3bf 8f4f 	dsb	sy
 80103a8:	623b      	str	r3, [r7, #32]
}
 80103aa:	bf00      	nop
 80103ac:	e7fe      	b.n	80103ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <xQueueGenericCreateStatic+0x7e>
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <xQueueGenericCreateStatic+0x82>
 80103ba:	2301      	movs	r3, #1
 80103bc:	e000      	b.n	80103c0 <xQueueGenericCreateStatic+0x84>
 80103be:	2300      	movs	r3, #0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d10a      	bne.n	80103da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80103c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c8:	f383 8811 	msr	BASEPRI, r3
 80103cc:	f3bf 8f6f 	isb	sy
 80103d0:	f3bf 8f4f 	dsb	sy
 80103d4:	61fb      	str	r3, [r7, #28]
}
 80103d6:	bf00      	nop
 80103d8:	e7fe      	b.n	80103d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80103da:	2350      	movs	r3, #80	; 0x50
 80103dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80103de:	697b      	ldr	r3, [r7, #20]
 80103e0:	2b50      	cmp	r3, #80	; 0x50
 80103e2:	d00a      	beq.n	80103fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80103e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e8:	f383 8811 	msr	BASEPRI, r3
 80103ec:	f3bf 8f6f 	isb	sy
 80103f0:	f3bf 8f4f 	dsb	sy
 80103f4:	61bb      	str	r3, [r7, #24]
}
 80103f6:	bf00      	nop
 80103f8:	e7fe      	b.n	80103f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103fc:	683b      	ldr	r3, [r7, #0]
 80103fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00d      	beq.n	8010422 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	2201      	movs	r2, #1
 801040a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801040e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	4613      	mov	r3, r2
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	68b9      	ldr	r1, [r7, #8]
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f000 f83f 	bl	80104a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010424:	4618      	mov	r0, r3
 8010426:	3730      	adds	r7, #48	; 0x30
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801042c:	b580      	push	{r7, lr}
 801042e:	b08a      	sub	sp, #40	; 0x28
 8010430:	af02      	add	r7, sp, #8
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	4613      	mov	r3, r2
 8010438:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10a      	bne.n	8010456 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	613b      	str	r3, [r7, #16]
}
 8010452:	bf00      	nop
 8010454:	e7fe      	b.n	8010454 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	68ba      	ldr	r2, [r7, #8]
 801045a:	fb02 f303 	mul.w	r3, r2, r3
 801045e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010460:	69fb      	ldr	r3, [r7, #28]
 8010462:	3350      	adds	r3, #80	; 0x50
 8010464:	4618      	mov	r0, r3
 8010466:	f002 fda7 	bl	8012fb8 <pvPortMalloc>
 801046a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d011      	beq.n	8010496 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	3350      	adds	r3, #80	; 0x50
 801047a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	2200      	movs	r2, #0
 8010480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010484:	79fa      	ldrb	r2, [r7, #7]
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	4613      	mov	r3, r2
 801048c:	697a      	ldr	r2, [r7, #20]
 801048e:	68b9      	ldr	r1, [r7, #8]
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	f000 f805 	bl	80104a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010496:	69bb      	ldr	r3, [r7, #24]
	}
 8010498:	4618      	mov	r0, r3
 801049a:	3720      	adds	r7, #32
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b084      	sub	sp, #16
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	60f8      	str	r0, [r7, #12]
 80104a8:	60b9      	str	r1, [r7, #8]
 80104aa:	607a      	str	r2, [r7, #4]
 80104ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d103      	bne.n	80104bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	69ba      	ldr	r2, [r7, #24]
 80104b8:	601a      	str	r2, [r3, #0]
 80104ba:	e002      	b.n	80104c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80104bc:	69bb      	ldr	r3, [r7, #24]
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80104c2:	69bb      	ldr	r3, [r7, #24]
 80104c4:	68fa      	ldr	r2, [r7, #12]
 80104c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80104c8:	69bb      	ldr	r3, [r7, #24]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80104ce:	2101      	movs	r1, #1
 80104d0:	69b8      	ldr	r0, [r7, #24]
 80104d2:	f7ff fecb 	bl	801026c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	78fa      	ldrb	r2, [r7, #3]
 80104da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80104de:	bf00      	nop
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2200      	movs	r2, #0
 80104f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010506:	2300      	movs	r3, #0
 8010508:	2200      	movs	r2, #0
 801050a:	2100      	movs	r1, #0
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f90b 	bl	8010728 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010512:	bf00      	nop
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}

0801051a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801051a:	b580      	push	{r7, lr}
 801051c:	b086      	sub	sp, #24
 801051e:	af00      	add	r7, sp, #0
 8010520:	4603      	mov	r3, r0
 8010522:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010524:	2301      	movs	r3, #1
 8010526:	617b      	str	r3, [r7, #20]
 8010528:	2300      	movs	r3, #0
 801052a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801052c:	79fb      	ldrb	r3, [r7, #7]
 801052e:	461a      	mov	r2, r3
 8010530:	6939      	ldr	r1, [r7, #16]
 8010532:	6978      	ldr	r0, [r7, #20]
 8010534:	f7ff ff7a 	bl	801042c <xQueueGenericCreate>
 8010538:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801053a:	68f8      	ldr	r0, [r7, #12]
 801053c:	f7ff ffd3 	bl	80104e6 <prvInitialiseMutex>

		return xNewQueue;
 8010540:	68fb      	ldr	r3, [r7, #12]
	}
 8010542:	4618      	mov	r0, r3
 8010544:	3718      	adds	r7, #24
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801054a:	b580      	push	{r7, lr}
 801054c:	b088      	sub	sp, #32
 801054e:	af02      	add	r7, sp, #8
 8010550:	4603      	mov	r3, r0
 8010552:	6039      	str	r1, [r7, #0]
 8010554:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010556:	2301      	movs	r3, #1
 8010558:	617b      	str	r3, [r7, #20]
 801055a:	2300      	movs	r3, #0
 801055c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801055e:	79fb      	ldrb	r3, [r7, #7]
 8010560:	9300      	str	r3, [sp, #0]
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	2200      	movs	r2, #0
 8010566:	6939      	ldr	r1, [r7, #16]
 8010568:	6978      	ldr	r0, [r7, #20]
 801056a:	f7ff fee7 	bl	801033c <xQueueGenericCreateStatic>
 801056e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010570:	68f8      	ldr	r0, [r7, #12]
 8010572:	f7ff ffb8 	bl	80104e6 <prvInitialiseMutex>

		return xNewQueue;
 8010576:	68fb      	ldr	r3, [r7, #12]
	}
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8010580:	b590      	push	{r4, r7, lr}
 8010582:	b087      	sub	sp, #28
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d10a      	bne.n	80105a8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8010592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010596:	f383 8811 	msr	BASEPRI, r3
 801059a:	f3bf 8f6f 	isb	sy
 801059e:	f3bf 8f4f 	dsb	sy
 80105a2:	60fb      	str	r3, [r7, #12]
}
 80105a4:	bf00      	nop
 80105a6:	e7fe      	b.n	80105a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	689c      	ldr	r4, [r3, #8]
 80105ac:	f001 fd7c 	bl	80120a8 <xTaskGetCurrentTaskHandle>
 80105b0:	4603      	mov	r3, r0
 80105b2:	429c      	cmp	r4, r3
 80105b4:	d111      	bne.n	80105da <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	68db      	ldr	r3, [r3, #12]
 80105ba:	1e5a      	subs	r2, r3, #1
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d105      	bne.n	80105d4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80105c8:	2300      	movs	r3, #0
 80105ca:	2200      	movs	r2, #0
 80105cc:	2100      	movs	r1, #0
 80105ce:	6938      	ldr	r0, [r7, #16]
 80105d0:	f000 f8aa 	bl	8010728 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80105d4:	2301      	movs	r3, #1
 80105d6:	617b      	str	r3, [r7, #20]
 80105d8:	e001      	b.n	80105de <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80105da:	2300      	movs	r3, #0
 80105dc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80105de:	697b      	ldr	r3, [r7, #20]
	}
 80105e0:	4618      	mov	r0, r3
 80105e2:	371c      	adds	r7, #28
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd90      	pop	{r4, r7, pc}

080105e8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80105e8:	b590      	push	{r4, r7, lr}
 80105ea:	b087      	sub	sp, #28
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10a      	bne.n	8010612 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	60fb      	str	r3, [r7, #12]
}
 801060e:	bf00      	nop
 8010610:	e7fe      	b.n	8010610 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	689c      	ldr	r4, [r3, #8]
 8010616:	f001 fd47 	bl	80120a8 <xTaskGetCurrentTaskHandle>
 801061a:	4603      	mov	r3, r0
 801061c:	429c      	cmp	r4, r3
 801061e:	d107      	bne.n	8010630 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	1c5a      	adds	r2, r3, #1
 8010626:	693b      	ldr	r3, [r7, #16]
 8010628:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801062a:	2301      	movs	r3, #1
 801062c:	617b      	str	r3, [r7, #20]
 801062e:	e00c      	b.n	801064a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6938      	ldr	r0, [r7, #16]
 8010634:	f000 fb7e 	bl	8010d34 <xQueueSemaphoreTake>
 8010638:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d004      	beq.n	801064a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	693b      	ldr	r3, [r7, #16]
 8010648:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801064a:	697b      	ldr	r3, [r7, #20]
	}
 801064c:	4618      	mov	r0, r3
 801064e:	371c      	adds	r7, #28
 8010650:	46bd      	mov	sp, r7
 8010652:	bd90      	pop	{r4, r7, pc}

08010654 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010654:	b580      	push	{r7, lr}
 8010656:	b08a      	sub	sp, #40	; 0x28
 8010658:	af02      	add	r7, sp, #8
 801065a:	60f8      	str	r0, [r7, #12]
 801065c:	60b9      	str	r1, [r7, #8]
 801065e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10a      	bne.n	801067c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010666:	f04f 0350 	mov.w	r3, #80	; 0x50
 801066a:	f383 8811 	msr	BASEPRI, r3
 801066e:	f3bf 8f6f 	isb	sy
 8010672:	f3bf 8f4f 	dsb	sy
 8010676:	61bb      	str	r3, [r7, #24]
}
 8010678:	bf00      	nop
 801067a:	e7fe      	b.n	801067a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801067c:	68ba      	ldr	r2, [r7, #8]
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	429a      	cmp	r2, r3
 8010682:	d90a      	bls.n	801069a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	617b      	str	r3, [r7, #20]
}
 8010696:	bf00      	nop
 8010698:	e7fe      	b.n	8010698 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801069a:	2302      	movs	r3, #2
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2200      	movs	r2, #0
 80106a2:	2100      	movs	r1, #0
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7ff fe49 	bl	801033c <xQueueGenericCreateStatic>
 80106aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80106ac:	69fb      	ldr	r3, [r7, #28]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d002      	beq.n	80106b8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	68ba      	ldr	r2, [r7, #8]
 80106b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80106b8:	69fb      	ldr	r3, [r7, #28]
	}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3720      	adds	r7, #32
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}

080106c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b086      	sub	sp, #24
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
 80106ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10a      	bne.n	80106e8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d6:	f383 8811 	msr	BASEPRI, r3
 80106da:	f3bf 8f6f 	isb	sy
 80106de:	f3bf 8f4f 	dsb	sy
 80106e2:	613b      	str	r3, [r7, #16]
}
 80106e4:	bf00      	nop
 80106e6:	e7fe      	b.n	80106e6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80106e8:	683a      	ldr	r2, [r7, #0]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d90a      	bls.n	8010706 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80106f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f4:	f383 8811 	msr	BASEPRI, r3
 80106f8:	f3bf 8f6f 	isb	sy
 80106fc:	f3bf 8f4f 	dsb	sy
 8010700:	60fb      	str	r3, [r7, #12]
}
 8010702:	bf00      	nop
 8010704:	e7fe      	b.n	8010704 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010706:	2202      	movs	r2, #2
 8010708:	2100      	movs	r1, #0
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff fe8e 	bl	801042c <xQueueGenericCreate>
 8010710:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	683a      	ldr	r2, [r7, #0]
 801071c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801071e:	697b      	ldr	r3, [r7, #20]
	}
 8010720:	4618      	mov	r0, r3
 8010722:	3718      	adds	r7, #24
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b08e      	sub	sp, #56	; 0x38
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	607a      	str	r2, [r7, #4]
 8010734:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010736:	2300      	movs	r3, #0
 8010738:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801073e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10a      	bne.n	801075a <xQueueGenericSend+0x32>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d103      	bne.n	8010768 <xQueueGenericSend+0x40>
 8010760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010764:	2b00      	cmp	r3, #0
 8010766:	d101      	bne.n	801076c <xQueueGenericSend+0x44>
 8010768:	2301      	movs	r3, #1
 801076a:	e000      	b.n	801076e <xQueueGenericSend+0x46>
 801076c:	2300      	movs	r3, #0
 801076e:	2b00      	cmp	r3, #0
 8010770:	d10a      	bne.n	8010788 <xQueueGenericSend+0x60>
	__asm volatile
 8010772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010776:	f383 8811 	msr	BASEPRI, r3
 801077a:	f3bf 8f6f 	isb	sy
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010784:	bf00      	nop
 8010786:	e7fe      	b.n	8010786 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	2b02      	cmp	r3, #2
 801078c:	d103      	bne.n	8010796 <xQueueGenericSend+0x6e>
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010792:	2b01      	cmp	r3, #1
 8010794:	d101      	bne.n	801079a <xQueueGenericSend+0x72>
 8010796:	2301      	movs	r3, #1
 8010798:	e000      	b.n	801079c <xQueueGenericSend+0x74>
 801079a:	2300      	movs	r3, #0
 801079c:	2b00      	cmp	r3, #0
 801079e:	d10a      	bne.n	80107b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	623b      	str	r3, [r7, #32]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107b6:	f001 fc87 	bl	80120c8 <xTaskGetSchedulerState>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d102      	bne.n	80107c6 <xQueueGenericSend+0x9e>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d101      	bne.n	80107ca <xQueueGenericSend+0xa2>
 80107c6:	2301      	movs	r3, #1
 80107c8:	e000      	b.n	80107cc <xQueueGenericSend+0xa4>
 80107ca:	2300      	movs	r3, #0
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d10a      	bne.n	80107e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	f383 8811 	msr	BASEPRI, r3
 80107d8:	f3bf 8f6f 	isb	sy
 80107dc:	f3bf 8f4f 	dsb	sy
 80107e0:	61fb      	str	r3, [r7, #28]
}
 80107e2:	bf00      	nop
 80107e4:	e7fe      	b.n	80107e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80107e6:	f002 fac5 	bl	8012d74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80107ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d302      	bcc.n	80107fc <xQueueGenericSend+0xd4>
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d129      	bne.n	8010850 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80107fc:	683a      	ldr	r2, [r7, #0]
 80107fe:	68b9      	ldr	r1, [r7, #8]
 8010800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010802:	f000 fc5e 	bl	80110c2 <prvCopyDataToQueue>
 8010806:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801080c:	2b00      	cmp	r3, #0
 801080e:	d010      	beq.n	8010832 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010812:	3324      	adds	r3, #36	; 0x24
 8010814:	4618      	mov	r0, r3
 8010816:	f001 fa85 	bl	8011d24 <xTaskRemoveFromEventList>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d013      	beq.n	8010848 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010820:	4b3f      	ldr	r3, [pc, #252]	; (8010920 <xQueueGenericSend+0x1f8>)
 8010822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010826:	601a      	str	r2, [r3, #0]
 8010828:	f3bf 8f4f 	dsb	sy
 801082c:	f3bf 8f6f 	isb	sy
 8010830:	e00a      	b.n	8010848 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d007      	beq.n	8010848 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010838:	4b39      	ldr	r3, [pc, #228]	; (8010920 <xQueueGenericSend+0x1f8>)
 801083a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801083e:	601a      	str	r2, [r3, #0]
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010848:	f002 fac4 	bl	8012dd4 <vPortExitCritical>
				return pdPASS;
 801084c:	2301      	movs	r3, #1
 801084e:	e063      	b.n	8010918 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d103      	bne.n	801085e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010856:	f002 fabd 	bl	8012dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801085a:	2300      	movs	r3, #0
 801085c:	e05c      	b.n	8010918 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801085e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010860:	2b00      	cmp	r3, #0
 8010862:	d106      	bne.n	8010872 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010864:	f107 0314 	add.w	r3, r7, #20
 8010868:	4618      	mov	r0, r3
 801086a:	f001 fabf 	bl	8011dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801086e:	2301      	movs	r3, #1
 8010870:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010872:	f002 faaf 	bl	8012dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010876:	f001 f819 	bl	80118ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801087a:	f002 fa7b 	bl	8012d74 <vPortEnterCritical>
 801087e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010884:	b25b      	sxtb	r3, r3
 8010886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088a:	d103      	bne.n	8010894 <xQueueGenericSend+0x16c>
 801088c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088e:	2200      	movs	r2, #0
 8010890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801089a:	b25b      	sxtb	r3, r3
 801089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a0:	d103      	bne.n	80108aa <xQueueGenericSend+0x182>
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	2200      	movs	r2, #0
 80108a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108aa:	f002 fa93 	bl	8012dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108ae:	1d3a      	adds	r2, r7, #4
 80108b0:	f107 0314 	add.w	r3, r7, #20
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f001 faae 	bl	8011e18 <xTaskCheckForTimeOut>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d124      	bne.n	801090c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80108c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108c4:	f000 fcf5 	bl	80112b2 <prvIsQueueFull>
 80108c8:	4603      	mov	r3, r0
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d018      	beq.n	8010900 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80108ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d0:	3310      	adds	r3, #16
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	4611      	mov	r1, r2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f001 f9d4 	bl	8011c84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80108dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108de:	f000 fc80 	bl	80111e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80108e2:	f000 fff1 	bl	80118c8 <xTaskResumeAll>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	f47f af7c 	bne.w	80107e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80108ee:	4b0c      	ldr	r3, [pc, #48]	; (8010920 <xQueueGenericSend+0x1f8>)
 80108f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108f4:	601a      	str	r2, [r3, #0]
 80108f6:	f3bf 8f4f 	dsb	sy
 80108fa:	f3bf 8f6f 	isb	sy
 80108fe:	e772      	b.n	80107e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010902:	f000 fc6e 	bl	80111e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010906:	f000 ffdf 	bl	80118c8 <xTaskResumeAll>
 801090a:	e76c      	b.n	80107e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801090c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801090e:	f000 fc68 	bl	80111e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010912:	f000 ffd9 	bl	80118c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010916:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010918:	4618      	mov	r0, r3
 801091a:	3738      	adds	r7, #56	; 0x38
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	e000ed04 	.word	0xe000ed04

08010924 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b090      	sub	sp, #64	; 0x40
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010938:	2b00      	cmp	r3, #0
 801093a:	d10a      	bne.n	8010952 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	f383 8811 	msr	BASEPRI, r3
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801094e:	bf00      	nop
 8010950:	e7fe      	b.n	8010950 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d103      	bne.n	8010960 <xQueueGenericSendFromISR+0x3c>
 8010958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095c:	2b00      	cmp	r3, #0
 801095e:	d101      	bne.n	8010964 <xQueueGenericSendFromISR+0x40>
 8010960:	2301      	movs	r3, #1
 8010962:	e000      	b.n	8010966 <xQueueGenericSendFromISR+0x42>
 8010964:	2300      	movs	r3, #0
 8010966:	2b00      	cmp	r3, #0
 8010968:	d10a      	bne.n	8010980 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801097c:	bf00      	nop
 801097e:	e7fe      	b.n	801097e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	2b02      	cmp	r3, #2
 8010984:	d103      	bne.n	801098e <xQueueGenericSendFromISR+0x6a>
 8010986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801098a:	2b01      	cmp	r3, #1
 801098c:	d101      	bne.n	8010992 <xQueueGenericSendFromISR+0x6e>
 801098e:	2301      	movs	r3, #1
 8010990:	e000      	b.n	8010994 <xQueueGenericSendFromISR+0x70>
 8010992:	2300      	movs	r3, #0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10a      	bne.n	80109ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099c:	f383 8811 	msr	BASEPRI, r3
 80109a0:	f3bf 8f6f 	isb	sy
 80109a4:	f3bf 8f4f 	dsb	sy
 80109a8:	623b      	str	r3, [r7, #32]
}
 80109aa:	bf00      	nop
 80109ac:	e7fe      	b.n	80109ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80109ae:	f002 fac3 	bl	8012f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80109b2:	f3ef 8211 	mrs	r2, BASEPRI
 80109b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ba:	f383 8811 	msr	BASEPRI, r3
 80109be:	f3bf 8f6f 	isb	sy
 80109c2:	f3bf 8f4f 	dsb	sy
 80109c6:	61fa      	str	r2, [r7, #28]
 80109c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80109ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80109cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80109ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d302      	bcc.n	80109e0 <xQueueGenericSendFromISR+0xbc>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b02      	cmp	r3, #2
 80109de:	d12f      	bne.n	8010a40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80109e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80109f0:	683a      	ldr	r2, [r7, #0]
 80109f2:	68b9      	ldr	r1, [r7, #8]
 80109f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109f6:	f000 fb64 	bl	80110c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80109fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80109fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a02:	d112      	bne.n	8010a2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d016      	beq.n	8010a3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0e:	3324      	adds	r3, #36	; 0x24
 8010a10:	4618      	mov	r0, r3
 8010a12:	f001 f987 	bl	8011d24 <xTaskRemoveFromEventList>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00e      	beq.n	8010a3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d00b      	beq.n	8010a3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	2201      	movs	r2, #1
 8010a26:	601a      	str	r2, [r3, #0]
 8010a28:	e007      	b.n	8010a3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010a2e:	3301      	adds	r3, #1
 8010a30:	b2db      	uxtb	r3, r3
 8010a32:	b25a      	sxtb	r2, r3
 8010a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a3a:	2301      	movs	r3, #1
 8010a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010a3e:	e001      	b.n	8010a44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a40:	2300      	movs	r3, #0
 8010a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010a4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3740      	adds	r7, #64	; 0x40
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}

08010a5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a5a:	b580      	push	{r7, lr}
 8010a5c:	b08e      	sub	sp, #56	; 0x38
 8010a5e:	af00      	add	r7, sp, #0
 8010a60:	6078      	str	r0, [r7, #4]
 8010a62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d10a      	bne.n	8010a84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	623b      	str	r3, [r7, #32]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00a      	beq.n	8010aa2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a90:	f383 8811 	msr	BASEPRI, r3
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	f3bf 8f4f 	dsb	sy
 8010a9c:	61fb      	str	r3, [r7, #28]
}
 8010a9e:	bf00      	nop
 8010aa0:	e7fe      	b.n	8010aa0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d103      	bne.n	8010ab2 <xQueueGiveFromISR+0x58>
 8010aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aac:	689b      	ldr	r3, [r3, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d101      	bne.n	8010ab6 <xQueueGiveFromISR+0x5c>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e000      	b.n	8010ab8 <xQueueGiveFromISR+0x5e>
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d10a      	bne.n	8010ad2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac0:	f383 8811 	msr	BASEPRI, r3
 8010ac4:	f3bf 8f6f 	isb	sy
 8010ac8:	f3bf 8f4f 	dsb	sy
 8010acc:	61bb      	str	r3, [r7, #24]
}
 8010ace:	bf00      	nop
 8010ad0:	e7fe      	b.n	8010ad0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ad2:	f002 fa31 	bl	8012f38 <vPortValidateInterruptPriority>
	__asm volatile
 8010ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8010ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ade:	f383 8811 	msr	BASEPRI, r3
 8010ae2:	f3bf 8f6f 	isb	sy
 8010ae6:	f3bf 8f4f 	dsb	sy
 8010aea:	617a      	str	r2, [r7, #20]
 8010aec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010aee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d22b      	bcs.n	8010b5a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0e:	1c5a      	adds	r2, r3, #1
 8010b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b1c:	d112      	bne.n	8010b44 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d016      	beq.n	8010b54 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	3324      	adds	r3, #36	; 0x24
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f001 f8fa 	bl	8011d24 <xTaskRemoveFromEventList>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d00e      	beq.n	8010b54 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d00b      	beq.n	8010b54 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	2201      	movs	r2, #1
 8010b40:	601a      	str	r2, [r3, #0]
 8010b42:	e007      	b.n	8010b54 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b48:	3301      	adds	r3, #1
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	b25a      	sxtb	r2, r3
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010b54:	2301      	movs	r3, #1
 8010b56:	637b      	str	r3, [r7, #52]	; 0x34
 8010b58:	e001      	b.n	8010b5e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	f383 8811 	msr	BASEPRI, r3
}
 8010b68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3738      	adds	r7, #56	; 0x38
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}

08010b74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b08c      	sub	sp, #48	; 0x30
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b80:	2300      	movs	r3, #0
 8010b82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d10a      	bne.n	8010ba4 <xQueueReceive+0x30>
	__asm volatile
 8010b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	623b      	str	r3, [r7, #32]
}
 8010ba0:	bf00      	nop
 8010ba2:	e7fe      	b.n	8010ba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d103      	bne.n	8010bb2 <xQueueReceive+0x3e>
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d101      	bne.n	8010bb6 <xQueueReceive+0x42>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e000      	b.n	8010bb8 <xQueueReceive+0x44>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10a      	bne.n	8010bd2 <xQueueReceive+0x5e>
	__asm volatile
 8010bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc0:	f383 8811 	msr	BASEPRI, r3
 8010bc4:	f3bf 8f6f 	isb	sy
 8010bc8:	f3bf 8f4f 	dsb	sy
 8010bcc:	61fb      	str	r3, [r7, #28]
}
 8010bce:	bf00      	nop
 8010bd0:	e7fe      	b.n	8010bd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010bd2:	f001 fa79 	bl	80120c8 <xTaskGetSchedulerState>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <xQueueReceive+0x6e>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <xQueueReceive+0x72>
 8010be2:	2301      	movs	r3, #1
 8010be4:	e000      	b.n	8010be8 <xQueueReceive+0x74>
 8010be6:	2300      	movs	r3, #0
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d10a      	bne.n	8010c02 <xQueueReceive+0x8e>
	__asm volatile
 8010bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf0:	f383 8811 	msr	BASEPRI, r3
 8010bf4:	f3bf 8f6f 	isb	sy
 8010bf8:	f3bf 8f4f 	dsb	sy
 8010bfc:	61bb      	str	r3, [r7, #24]
}
 8010bfe:	bf00      	nop
 8010c00:	e7fe      	b.n	8010c00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010c02:	f002 f8b7 	bl	8012d74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d01f      	beq.n	8010c52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010c12:	68b9      	ldr	r1, [r7, #8]
 8010c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c16:	f000 fabe 	bl	8011196 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	1e5a      	subs	r2, r3, #1
 8010c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c24:	691b      	ldr	r3, [r3, #16]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00f      	beq.n	8010c4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2c:	3310      	adds	r3, #16
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f001 f878 	bl	8011d24 <xTaskRemoveFromEventList>
 8010c34:	4603      	mov	r3, r0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d007      	beq.n	8010c4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010c3a:	4b3d      	ldr	r3, [pc, #244]	; (8010d30 <xQueueReceive+0x1bc>)
 8010c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c40:	601a      	str	r2, [r3, #0]
 8010c42:	f3bf 8f4f 	dsb	sy
 8010c46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010c4a:	f002 f8c3 	bl	8012dd4 <vPortExitCritical>
				return pdPASS;
 8010c4e:	2301      	movs	r3, #1
 8010c50:	e069      	b.n	8010d26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d103      	bne.n	8010c60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c58:	f002 f8bc 	bl	8012dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e062      	b.n	8010d26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d106      	bne.n	8010c74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c66:	f107 0310 	add.w	r3, r7, #16
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f001 f8be 	bl	8011dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c70:	2301      	movs	r3, #1
 8010c72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c74:	f002 f8ae 	bl	8012dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c78:	f000 fe18 	bl	80118ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c7c:	f002 f87a 	bl	8012d74 <vPortEnterCritical>
 8010c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c86:	b25b      	sxtb	r3, r3
 8010c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8c:	d103      	bne.n	8010c96 <xQueueReceive+0x122>
 8010c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c9c:	b25b      	sxtb	r3, r3
 8010c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca2:	d103      	bne.n	8010cac <xQueueReceive+0x138>
 8010ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010cac:	f002 f892 	bl	8012dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010cb0:	1d3a      	adds	r2, r7, #4
 8010cb2:	f107 0310 	add.w	r3, r7, #16
 8010cb6:	4611      	mov	r1, r2
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f001 f8ad 	bl	8011e18 <xTaskCheckForTimeOut>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d123      	bne.n	8010d0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cc6:	f000 fade 	bl	8011286 <prvIsQueueEmpty>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d017      	beq.n	8010d00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	3324      	adds	r3, #36	; 0x24
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	4611      	mov	r1, r2
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 ffd3 	bl	8011c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ce0:	f000 fa7f 	bl	80111e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ce4:	f000 fdf0 	bl	80118c8 <xTaskResumeAll>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d189      	bne.n	8010c02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010cee:	4b10      	ldr	r3, [pc, #64]	; (8010d30 <xQueueReceive+0x1bc>)
 8010cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cf4:	601a      	str	r2, [r3, #0]
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	e780      	b.n	8010c02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d02:	f000 fa6e 	bl	80111e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010d06:	f000 fddf 	bl	80118c8 <xTaskResumeAll>
 8010d0a:	e77a      	b.n	8010c02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d0e:	f000 fa68 	bl	80111e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010d12:	f000 fdd9 	bl	80118c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d18:	f000 fab5 	bl	8011286 <prvIsQueueEmpty>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f43f af6f 	beq.w	8010c02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010d24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3730      	adds	r7, #48	; 0x30
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd80      	pop	{r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	e000ed04 	.word	0xe000ed04

08010d34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08e      	sub	sp, #56	; 0x38
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010d46:	2300      	movs	r3, #0
 8010d48:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d10a      	bne.n	8010d66 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d54:	f383 8811 	msr	BASEPRI, r3
 8010d58:	f3bf 8f6f 	isb	sy
 8010d5c:	f3bf 8f4f 	dsb	sy
 8010d60:	623b      	str	r3, [r7, #32]
}
 8010d62:	bf00      	nop
 8010d64:	e7fe      	b.n	8010d64 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00a      	beq.n	8010d84 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	61fb      	str	r3, [r7, #28]
}
 8010d80:	bf00      	nop
 8010d82:	e7fe      	b.n	8010d82 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d84:	f001 f9a0 	bl	80120c8 <xTaskGetSchedulerState>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d102      	bne.n	8010d94 <xQueueSemaphoreTake+0x60>
 8010d8e:	683b      	ldr	r3, [r7, #0]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d101      	bne.n	8010d98 <xQueueSemaphoreTake+0x64>
 8010d94:	2301      	movs	r3, #1
 8010d96:	e000      	b.n	8010d9a <xQueueSemaphoreTake+0x66>
 8010d98:	2300      	movs	r3, #0
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d10a      	bne.n	8010db4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	61bb      	str	r3, [r7, #24]
}
 8010db0:	bf00      	nop
 8010db2:	e7fe      	b.n	8010db2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010db4:	f001 ffde 	bl	8012d74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d024      	beq.n	8010e0e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc6:	1e5a      	subs	r2, r3, #1
 8010dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d104      	bne.n	8010dde <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010dd4:	f001 faee 	bl	80123b4 <pvTaskIncrementMutexHeldCount>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ddc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00f      	beq.n	8010e06 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	3310      	adds	r3, #16
 8010dea:	4618      	mov	r0, r3
 8010dec:	f000 ff9a 	bl	8011d24 <xTaskRemoveFromEventList>
 8010df0:	4603      	mov	r3, r0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d007      	beq.n	8010e06 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010df6:	4b54      	ldr	r3, [pc, #336]	; (8010f48 <xQueueSemaphoreTake+0x214>)
 8010df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dfc:	601a      	str	r2, [r3, #0]
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010e06:	f001 ffe5 	bl	8012dd4 <vPortExitCritical>
				return pdPASS;
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e097      	b.n	8010f3e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d111      	bne.n	8010e38 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00a      	beq.n	8010e30 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	617b      	str	r3, [r7, #20]
}
 8010e2c:	bf00      	nop
 8010e2e:	e7fe      	b.n	8010e2e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010e30:	f001 ffd0 	bl	8012dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010e34:	2300      	movs	r3, #0
 8010e36:	e082      	b.n	8010f3e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d106      	bne.n	8010e4c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e3e:	f107 030c 	add.w	r3, r7, #12
 8010e42:	4618      	mov	r0, r3
 8010e44:	f000 ffd2 	bl	8011dec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010e4c:	f001 ffc2 	bl	8012dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010e50:	f000 fd2c 	bl	80118ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010e54:	f001 ff8e 	bl	8012d74 <vPortEnterCritical>
 8010e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e5e:	b25b      	sxtb	r3, r3
 8010e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e64:	d103      	bne.n	8010e6e <xQueueSemaphoreTake+0x13a>
 8010e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e74:	b25b      	sxtb	r3, r3
 8010e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e7a:	d103      	bne.n	8010e84 <xQueueSemaphoreTake+0x150>
 8010e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e84:	f001 ffa6 	bl	8012dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e88:	463a      	mov	r2, r7
 8010e8a:	f107 030c 	add.w	r3, r7, #12
 8010e8e:	4611      	mov	r1, r2
 8010e90:	4618      	mov	r0, r3
 8010e92:	f000 ffc1 	bl	8011e18 <xTaskCheckForTimeOut>
 8010e96:	4603      	mov	r3, r0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d132      	bne.n	8010f02 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e9e:	f000 f9f2 	bl	8011286 <prvIsQueueEmpty>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d026      	beq.n	8010ef6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d109      	bne.n	8010ec4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010eb0:	f001 ff60 	bl	8012d74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb6:	689b      	ldr	r3, [r3, #8]
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f001 f923 	bl	8012104 <xTaskPriorityInherit>
 8010ebe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010ec0:	f001 ff88 	bl	8012dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ec6:	3324      	adds	r3, #36	; 0x24
 8010ec8:	683a      	ldr	r2, [r7, #0]
 8010eca:	4611      	mov	r1, r2
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f000 fed9 	bl	8011c84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ed4:	f000 f985 	bl	80111e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ed8:	f000 fcf6 	bl	80118c8 <xTaskResumeAll>
 8010edc:	4603      	mov	r3, r0
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	f47f af68 	bne.w	8010db4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010ee4:	4b18      	ldr	r3, [pc, #96]	; (8010f48 <xQueueSemaphoreTake+0x214>)
 8010ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eea:	601a      	str	r2, [r3, #0]
 8010eec:	f3bf 8f4f 	dsb	sy
 8010ef0:	f3bf 8f6f 	isb	sy
 8010ef4:	e75e      	b.n	8010db4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ef8:	f000 f973 	bl	80111e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010efc:	f000 fce4 	bl	80118c8 <xTaskResumeAll>
 8010f00:	e758      	b.n	8010db4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f04:	f000 f96d 	bl	80111e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f08:	f000 fcde 	bl	80118c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010f0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f0e:	f000 f9ba 	bl	8011286 <prvIsQueueEmpty>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	f43f af4d 	beq.w	8010db4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d00d      	beq.n	8010f3c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010f20:	f001 ff28 	bl	8012d74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010f24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f26:	f000 f8b4 	bl	8011092 <prvGetDisinheritPriorityAfterTimeout>
 8010f2a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010f32:	4618      	mov	r0, r3
 8010f34:	f001 f9bc 	bl	80122b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010f38:	f001 ff4c 	bl	8012dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010f3c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3738      	adds	r7, #56	; 0x38
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	e000ed04 	.word	0xe000ed04

08010f4c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b08e      	sub	sp, #56	; 0x38
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d10a      	bne.n	8010f78 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f66:	f383 8811 	msr	BASEPRI, r3
 8010f6a:	f3bf 8f6f 	isb	sy
 8010f6e:	f3bf 8f4f 	dsb	sy
 8010f72:	623b      	str	r3, [r7, #32]
}
 8010f74:	bf00      	nop
 8010f76:	e7fe      	b.n	8010f76 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d103      	bne.n	8010f86 <xQueueReceiveFromISR+0x3a>
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d101      	bne.n	8010f8a <xQueueReceiveFromISR+0x3e>
 8010f86:	2301      	movs	r3, #1
 8010f88:	e000      	b.n	8010f8c <xQueueReceiveFromISR+0x40>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d10a      	bne.n	8010fa6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	61fb      	str	r3, [r7, #28]
}
 8010fa2:	bf00      	nop
 8010fa4:	e7fe      	b.n	8010fa4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010fa6:	f001 ffc7 	bl	8012f38 <vPortValidateInterruptPriority>
	__asm volatile
 8010faa:	f3ef 8211 	mrs	r2, BASEPRI
 8010fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb2:	f383 8811 	msr	BASEPRI, r3
 8010fb6:	f3bf 8f6f 	isb	sy
 8010fba:	f3bf 8f4f 	dsb	sy
 8010fbe:	61ba      	str	r2, [r7, #24]
 8010fc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010fc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d02f      	beq.n	8011032 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010fdc:	68b9      	ldr	r1, [r7, #8]
 8010fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fe0:	f000 f8d9 	bl	8011196 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe6:	1e5a      	subs	r2, r3, #1
 8010fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff4:	d112      	bne.n	801101c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff8:	691b      	ldr	r3, [r3, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d016      	beq.n	801102c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011000:	3310      	adds	r3, #16
 8011002:	4618      	mov	r0, r3
 8011004:	f000 fe8e 	bl	8011d24 <xTaskRemoveFromEventList>
 8011008:	4603      	mov	r3, r0
 801100a:	2b00      	cmp	r3, #0
 801100c:	d00e      	beq.n	801102c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	601a      	str	r2, [r3, #0]
 801101a:	e007      	b.n	801102c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801101c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011020:	3301      	adds	r3, #1
 8011022:	b2db      	uxtb	r3, r3
 8011024:	b25a      	sxtb	r2, r3
 8011026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801102c:	2301      	movs	r3, #1
 801102e:	637b      	str	r3, [r7, #52]	; 0x34
 8011030:	e001      	b.n	8011036 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8011032:	2300      	movs	r3, #0
 8011034:	637b      	str	r3, [r7, #52]	; 0x34
 8011036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011038:	613b      	str	r3, [r7, #16]
	__asm volatile
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	f383 8811 	msr	BASEPRI, r3
}
 8011040:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011044:	4618      	mov	r0, r3
 8011046:	3738      	adds	r7, #56	; 0x38
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d10a      	bne.n	8011074 <vQueueDelete+0x28>
	__asm volatile
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	60bb      	str	r3, [r7, #8]
}
 8011070:	bf00      	nop
 8011072:	e7fe      	b.n	8011072 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 f95f 	bl	8011338 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011080:	2b00      	cmp	r3, #0
 8011082:	d102      	bne.n	801108a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011084:	68f8      	ldr	r0, [r7, #12]
 8011086:	f002 f863 	bl	8013150 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801108a:	bf00      	nop
 801108c:	3710      	adds	r7, #16
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}

08011092 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011092:	b480      	push	{r7}
 8011094:	b085      	sub	sp, #20
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d006      	beq.n	80110b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	e001      	b.n	80110b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80110b0:	2300      	movs	r3, #0
 80110b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80110b4:	68fb      	ldr	r3, [r7, #12]
	}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3714      	adds	r7, #20
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr

080110c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b086      	sub	sp, #24
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	60f8      	str	r0, [r7, #12]
 80110ca:	60b9      	str	r1, [r7, #8]
 80110cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80110ce:	2300      	movs	r3, #0
 80110d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d10d      	bne.n	80110fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d14d      	bne.n	8011184 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	4618      	mov	r0, r3
 80110ee:	f001 f871 	bl	80121d4 <xTaskPriorityDisinherit>
 80110f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2200      	movs	r2, #0
 80110f8:	609a      	str	r2, [r3, #8]
 80110fa:	e043      	b.n	8011184 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d119      	bne.n	8011136 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	6858      	ldr	r0, [r3, #4]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110a:	461a      	mov	r2, r3
 801110c:	68b9      	ldr	r1, [r7, #8]
 801110e:	f00f fa80 	bl	8020612 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685a      	ldr	r2, [r3, #4]
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801111a:	441a      	add	r2, r3
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	685a      	ldr	r2, [r3, #4]
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	429a      	cmp	r2, r3
 801112a:	d32b      	bcc.n	8011184 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	605a      	str	r2, [r3, #4]
 8011134:	e026      	b.n	8011184 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	68d8      	ldr	r0, [r3, #12]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801113e:	461a      	mov	r2, r3
 8011140:	68b9      	ldr	r1, [r7, #8]
 8011142:	f00f fa66 	bl	8020612 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	68da      	ldr	r2, [r3, #12]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801114e:	425b      	negs	r3, r3
 8011150:	441a      	add	r2, r3
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d207      	bcs.n	8011172 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	689a      	ldr	r2, [r3, #8]
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801116a:	425b      	negs	r3, r3
 801116c:	441a      	add	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b02      	cmp	r3, #2
 8011176:	d105      	bne.n	8011184 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	3b01      	subs	r3, #1
 8011182:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	1c5a      	adds	r2, r3, #1
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801118c:	697b      	ldr	r3, [r7, #20]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b082      	sub	sp, #8
 801119a:	af00      	add	r7, sp, #0
 801119c:	6078      	str	r0, [r7, #4]
 801119e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d018      	beq.n	80111da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68da      	ldr	r2, [r3, #12]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111b0:	441a      	add	r2, r3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	68da      	ldr	r2, [r3, #12]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d303      	bcc.n	80111ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681a      	ldr	r2, [r3, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	68d9      	ldr	r1, [r3, #12]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111d2:	461a      	mov	r2, r3
 80111d4:	6838      	ldr	r0, [r7, #0]
 80111d6:	f00f fa1c 	bl	8020612 <memcpy>
	}
}
 80111da:	bf00      	nop
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b084      	sub	sp, #16
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80111ea:	f001 fdc3 	bl	8012d74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111f6:	e011      	b.n	801121c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d012      	beq.n	8011226 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3324      	adds	r3, #36	; 0x24
 8011204:	4618      	mov	r0, r3
 8011206:	f000 fd8d 	bl	8011d24 <xTaskRemoveFromEventList>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011210:	f000 fe64 	bl	8011edc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	3b01      	subs	r3, #1
 8011218:	b2db      	uxtb	r3, r3
 801121a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801121c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011220:	2b00      	cmp	r3, #0
 8011222:	dce9      	bgt.n	80111f8 <prvUnlockQueue+0x16>
 8011224:	e000      	b.n	8011228 <prvUnlockQueue+0x46>
					break;
 8011226:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	22ff      	movs	r2, #255	; 0xff
 801122c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011230:	f001 fdd0 	bl	8012dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011234:	f001 fd9e 	bl	8012d74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801123e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011240:	e011      	b.n	8011266 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	691b      	ldr	r3, [r3, #16]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d012      	beq.n	8011270 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	3310      	adds	r3, #16
 801124e:	4618      	mov	r0, r3
 8011250:	f000 fd68 	bl	8011d24 <xTaskRemoveFromEventList>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801125a:	f000 fe3f 	bl	8011edc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801125e:	7bbb      	ldrb	r3, [r7, #14]
 8011260:	3b01      	subs	r3, #1
 8011262:	b2db      	uxtb	r3, r3
 8011264:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801126a:	2b00      	cmp	r3, #0
 801126c:	dce9      	bgt.n	8011242 <prvUnlockQueue+0x60>
 801126e:	e000      	b.n	8011272 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011270:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	22ff      	movs	r2, #255	; 0xff
 8011276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801127a:	f001 fdab 	bl	8012dd4 <vPortExitCritical>
}
 801127e:	bf00      	nop
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}

08011286 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011286:	b580      	push	{r7, lr}
 8011288:	b084      	sub	sp, #16
 801128a:	af00      	add	r7, sp, #0
 801128c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801128e:	f001 fd71 	bl	8012d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801129a:	2301      	movs	r3, #1
 801129c:	60fb      	str	r3, [r7, #12]
 801129e:	e001      	b.n	80112a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80112a0:	2300      	movs	r3, #0
 80112a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112a4:	f001 fd96 	bl	8012dd4 <vPortExitCritical>

	return xReturn;
 80112a8:	68fb      	ldr	r3, [r7, #12]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80112b2:	b580      	push	{r7, lr}
 80112b4:	b084      	sub	sp, #16
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80112ba:	f001 fd5b 	bl	8012d74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d102      	bne.n	80112d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80112ca:	2301      	movs	r3, #1
 80112cc:	60fb      	str	r3, [r7, #12]
 80112ce:	e001      	b.n	80112d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80112d0:	2300      	movs	r3, #0
 80112d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80112d4:	f001 fd7e 	bl	8012dd4 <vPortExitCritical>

	return xReturn;
 80112d8:	68fb      	ldr	r3, [r7, #12]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
	...

080112e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80112e4:	b480      	push	{r7}
 80112e6:	b085      	sub	sp, #20
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112ee:	2300      	movs	r3, #0
 80112f0:	60fb      	str	r3, [r7, #12]
 80112f2:	e014      	b.n	801131e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80112f4:	4a0f      	ldr	r2, [pc, #60]	; (8011334 <vQueueAddToRegistry+0x50>)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10b      	bne.n	8011318 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011300:	490c      	ldr	r1, [pc, #48]	; (8011334 <vQueueAddToRegistry+0x50>)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	683a      	ldr	r2, [r7, #0]
 8011306:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801130a:	4a0a      	ldr	r2, [pc, #40]	; (8011334 <vQueueAddToRegistry+0x50>)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	4413      	add	r3, r2
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011316:	e006      	b.n	8011326 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	3301      	adds	r3, #1
 801131c:	60fb      	str	r3, [r7, #12]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2b07      	cmp	r3, #7
 8011322:	d9e7      	bls.n	80112f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011324:	bf00      	nop
 8011326:	bf00      	nop
 8011328:	3714      	adds	r7, #20
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr
 8011332:	bf00      	nop
 8011334:	2400578c 	.word	0x2400578c

08011338 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011338:	b480      	push	{r7}
 801133a:	b085      	sub	sp, #20
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011340:	2300      	movs	r3, #0
 8011342:	60fb      	str	r3, [r7, #12]
 8011344:	e016      	b.n	8011374 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011346:	4a10      	ldr	r2, [pc, #64]	; (8011388 <vQueueUnregisterQueue+0x50>)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	00db      	lsls	r3, r3, #3
 801134c:	4413      	add	r3, r2
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	687a      	ldr	r2, [r7, #4]
 8011352:	429a      	cmp	r2, r3
 8011354:	d10b      	bne.n	801136e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011356:	4a0c      	ldr	r2, [pc, #48]	; (8011388 <vQueueUnregisterQueue+0x50>)
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	2100      	movs	r1, #0
 801135c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011360:	4a09      	ldr	r2, [pc, #36]	; (8011388 <vQueueUnregisterQueue+0x50>)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	00db      	lsls	r3, r3, #3
 8011366:	4413      	add	r3, r2
 8011368:	2200      	movs	r2, #0
 801136a:	605a      	str	r2, [r3, #4]
				break;
 801136c:	e006      	b.n	801137c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3301      	adds	r3, #1
 8011372:	60fb      	str	r3, [r7, #12]
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2b07      	cmp	r3, #7
 8011378:	d9e5      	bls.n	8011346 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801137a:	bf00      	nop
 801137c:	bf00      	nop
 801137e:	3714      	adds	r7, #20
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr
 8011388:	2400578c 	.word	0x2400578c

0801138c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801138c:	b580      	push	{r7, lr}
 801138e:	b086      	sub	sp, #24
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801139c:	f001 fcea 	bl	8012d74 <vPortEnterCritical>
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113a6:	b25b      	sxtb	r3, r3
 80113a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ac:	d103      	bne.n	80113b6 <vQueueWaitForMessageRestricted+0x2a>
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	2200      	movs	r2, #0
 80113b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113bc:	b25b      	sxtb	r3, r3
 80113be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113c2:	d103      	bne.n	80113cc <vQueueWaitForMessageRestricted+0x40>
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	2200      	movs	r2, #0
 80113c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80113cc:	f001 fd02 	bl	8012dd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d106      	bne.n	80113e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	3324      	adds	r3, #36	; 0x24
 80113dc:	687a      	ldr	r2, [r7, #4]
 80113de:	68b9      	ldr	r1, [r7, #8]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f000 fc73 	bl	8011ccc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80113e6:	6978      	ldr	r0, [r7, #20]
 80113e8:	f7ff fefb 	bl	80111e2 <prvUnlockQueue>
	}
 80113ec:	bf00      	nop
 80113ee:	3718      	adds	r7, #24
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b08e      	sub	sp, #56	; 0x38
 80113f8:	af04      	add	r7, sp, #16
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
 8011400:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10a      	bne.n	801141e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011408:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140c:	f383 8811 	msr	BASEPRI, r3
 8011410:	f3bf 8f6f 	isb	sy
 8011414:	f3bf 8f4f 	dsb	sy
 8011418:	623b      	str	r3, [r7, #32]
}
 801141a:	bf00      	nop
 801141c:	e7fe      	b.n	801141c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801141e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011420:	2b00      	cmp	r3, #0
 8011422:	d10a      	bne.n	801143a <xTaskCreateStatic+0x46>
	__asm volatile
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	61fb      	str	r3, [r7, #28]
}
 8011436:	bf00      	nop
 8011438:	e7fe      	b.n	8011438 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801143a:	23bc      	movs	r3, #188	; 0xbc
 801143c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	2bbc      	cmp	r3, #188	; 0xbc
 8011442:	d00a      	beq.n	801145a <xTaskCreateStatic+0x66>
	__asm volatile
 8011444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011448:	f383 8811 	msr	BASEPRI, r3
 801144c:	f3bf 8f6f 	isb	sy
 8011450:	f3bf 8f4f 	dsb	sy
 8011454:	61bb      	str	r3, [r7, #24]
}
 8011456:	bf00      	nop
 8011458:	e7fe      	b.n	8011458 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801145a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145e:	2b00      	cmp	r3, #0
 8011460:	d01e      	beq.n	80114a0 <xTaskCreateStatic+0xac>
 8011462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011464:	2b00      	cmp	r3, #0
 8011466:	d01b      	beq.n	80114a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801146a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801146e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011470:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	2202      	movs	r2, #2
 8011476:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801147a:	2300      	movs	r3, #0
 801147c:	9303      	str	r3, [sp, #12]
 801147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011480:	9302      	str	r3, [sp, #8]
 8011482:	f107 0314 	add.w	r3, r7, #20
 8011486:	9301      	str	r3, [sp, #4]
 8011488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148a:	9300      	str	r3, [sp, #0]
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	68b9      	ldr	r1, [r7, #8]
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	f000 f850 	bl	8011538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011498:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801149a:	f000 f8f3 	bl	8011684 <prvAddNewTaskToReadyList>
 801149e:	e001      	b.n	80114a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80114a0:	2300      	movs	r3, #0
 80114a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80114a4:	697b      	ldr	r3, [r7, #20]
	}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3728      	adds	r7, #40	; 0x28
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b08c      	sub	sp, #48	; 0x30
 80114b2:	af04      	add	r7, sp, #16
 80114b4:	60f8      	str	r0, [r7, #12]
 80114b6:	60b9      	str	r1, [r7, #8]
 80114b8:	603b      	str	r3, [r7, #0]
 80114ba:	4613      	mov	r3, r2
 80114bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80114be:	88fb      	ldrh	r3, [r7, #6]
 80114c0:	009b      	lsls	r3, r3, #2
 80114c2:	4618      	mov	r0, r3
 80114c4:	f001 fd78 	bl	8012fb8 <pvPortMalloc>
 80114c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d00e      	beq.n	80114ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80114d0:	20bc      	movs	r0, #188	; 0xbc
 80114d2:	f001 fd71 	bl	8012fb8 <pvPortMalloc>
 80114d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d003      	beq.n	80114e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	697a      	ldr	r2, [r7, #20]
 80114e2:	631a      	str	r2, [r3, #48]	; 0x30
 80114e4:	e005      	b.n	80114f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80114e6:	6978      	ldr	r0, [r7, #20]
 80114e8:	f001 fe32 	bl	8013150 <vPortFree>
 80114ec:	e001      	b.n	80114f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80114ee:	2300      	movs	r3, #0
 80114f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d017      	beq.n	8011528 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011500:	88fa      	ldrh	r2, [r7, #6]
 8011502:	2300      	movs	r3, #0
 8011504:	9303      	str	r3, [sp, #12]
 8011506:	69fb      	ldr	r3, [r7, #28]
 8011508:	9302      	str	r3, [sp, #8]
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	9301      	str	r3, [sp, #4]
 801150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	68b9      	ldr	r1, [r7, #8]
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f000 f80e 	bl	8011538 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801151c:	69f8      	ldr	r0, [r7, #28]
 801151e:	f000 f8b1 	bl	8011684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011522:	2301      	movs	r3, #1
 8011524:	61bb      	str	r3, [r7, #24]
 8011526:	e002      	b.n	801152e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011528:	f04f 33ff 	mov.w	r3, #4294967295
 801152c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801152e:	69bb      	ldr	r3, [r7, #24]
	}
 8011530:	4618      	mov	r0, r3
 8011532:	3720      	adds	r7, #32
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b088      	sub	sp, #32
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
 8011544:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011548:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	009b      	lsls	r3, r3, #2
 801154e:	461a      	mov	r2, r3
 8011550:	21a5      	movs	r1, #165	; 0xa5
 8011552:	f00f f86c 	bl	802062e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801155a:	6879      	ldr	r1, [r7, #4]
 801155c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011560:	440b      	add	r3, r1
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	f023 0307 	bic.w	r3, r3, #7
 801156e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	f003 0307 	and.w	r3, r3, #7
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <prvInitialiseNewTask+0x58>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	617b      	str	r3, [r7, #20]
}
 801158c:	bf00      	nop
 801158e:	e7fe      	b.n	801158e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d01f      	beq.n	80115d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011596:	2300      	movs	r3, #0
 8011598:	61fb      	str	r3, [r7, #28]
 801159a:	e012      	b.n	80115c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801159c:	68ba      	ldr	r2, [r7, #8]
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	4413      	add	r3, r2
 80115a2:	7819      	ldrb	r1, [r3, #0]
 80115a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a6:	69fb      	ldr	r3, [r7, #28]
 80115a8:	4413      	add	r3, r2
 80115aa:	3334      	adds	r3, #52	; 0x34
 80115ac:	460a      	mov	r2, r1
 80115ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80115b0:	68ba      	ldr	r2, [r7, #8]
 80115b2:	69fb      	ldr	r3, [r7, #28]
 80115b4:	4413      	add	r3, r2
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d006      	beq.n	80115ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	3301      	adds	r3, #1
 80115c0:	61fb      	str	r3, [r7, #28]
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	2b0f      	cmp	r3, #15
 80115c6:	d9e9      	bls.n	801159c <prvInitialiseNewTask+0x64>
 80115c8:	e000      	b.n	80115cc <prvInitialiseNewTask+0x94>
			{
				break;
 80115ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	2200      	movs	r2, #0
 80115d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80115d4:	e003      	b.n	80115de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80115d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d8:	2200      	movs	r2, #0
 80115da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80115de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e0:	2b37      	cmp	r3, #55	; 0x37
 80115e2:	d901      	bls.n	80115e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80115e4:	2337      	movs	r3, #55	; 0x37
 80115e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80115e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80115ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80115f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f6:	2200      	movs	r2, #0
 80115f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80115fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115fc:	3304      	adds	r3, #4
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fe fda0 	bl	8010144 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011606:	3318      	adds	r3, #24
 8011608:	4618      	mov	r0, r3
 801160a:	f7fe fd9b 	bl	8010144 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011612:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011616:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801161c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011622:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011626:	2200      	movs	r2, #0
 8011628:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801162c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801162e:	2200      	movs	r2, #0
 8011630:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011636:	3354      	adds	r3, #84	; 0x54
 8011638:	2260      	movs	r2, #96	; 0x60
 801163a:	2100      	movs	r1, #0
 801163c:	4618      	mov	r0, r3
 801163e:	f00e fff6 	bl	802062e <memset>
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	4a0c      	ldr	r2, [pc, #48]	; (8011678 <prvInitialiseNewTask+0x140>)
 8011646:	659a      	str	r2, [r3, #88]	; 0x58
 8011648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164a:	4a0c      	ldr	r2, [pc, #48]	; (801167c <prvInitialiseNewTask+0x144>)
 801164c:	65da      	str	r2, [r3, #92]	; 0x5c
 801164e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011650:	4a0b      	ldr	r2, [pc, #44]	; (8011680 <prvInitialiseNewTask+0x148>)
 8011652:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	68f9      	ldr	r1, [r7, #12]
 8011658:	69b8      	ldr	r0, [r7, #24]
 801165a:	f001 fa61 	bl	8012b20 <pxPortInitialiseStack>
 801165e:	4602      	mov	r2, r0
 8011660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011662:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011666:	2b00      	cmp	r3, #0
 8011668:	d002      	beq.n	8011670 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801166e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011670:	bf00      	nop
 8011672:	3720      	adds	r7, #32
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	080246c8 	.word	0x080246c8
 801167c:	080246e8 	.word	0x080246e8
 8011680:	080246a8 	.word	0x080246a8

08011684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801168c:	f001 fb72 	bl	8012d74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011690:	4b2d      	ldr	r3, [pc, #180]	; (8011748 <prvAddNewTaskToReadyList+0xc4>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	3301      	adds	r3, #1
 8011696:	4a2c      	ldr	r2, [pc, #176]	; (8011748 <prvAddNewTaskToReadyList+0xc4>)
 8011698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801169a:	4b2c      	ldr	r3, [pc, #176]	; (801174c <prvAddNewTaskToReadyList+0xc8>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d109      	bne.n	80116b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80116a2:	4a2a      	ldr	r2, [pc, #168]	; (801174c <prvAddNewTaskToReadyList+0xc8>)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80116a8:	4b27      	ldr	r3, [pc, #156]	; (8011748 <prvAddNewTaskToReadyList+0xc4>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d110      	bne.n	80116d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80116b0:	f000 fc38 	bl	8011f24 <prvInitialiseTaskLists>
 80116b4:	e00d      	b.n	80116d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80116b6:	4b26      	ldr	r3, [pc, #152]	; (8011750 <prvAddNewTaskToReadyList+0xcc>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d109      	bne.n	80116d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80116be:	4b23      	ldr	r3, [pc, #140]	; (801174c <prvAddNewTaskToReadyList+0xc8>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c8:	429a      	cmp	r2, r3
 80116ca:	d802      	bhi.n	80116d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80116cc:	4a1f      	ldr	r2, [pc, #124]	; (801174c <prvAddNewTaskToReadyList+0xc8>)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80116d2:	4b20      	ldr	r3, [pc, #128]	; (8011754 <prvAddNewTaskToReadyList+0xd0>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	3301      	adds	r3, #1
 80116d8:	4a1e      	ldr	r2, [pc, #120]	; (8011754 <prvAddNewTaskToReadyList+0xd0>)
 80116da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80116dc:	4b1d      	ldr	r3, [pc, #116]	; (8011754 <prvAddNewTaskToReadyList+0xd0>)
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116e8:	4b1b      	ldr	r3, [pc, #108]	; (8011758 <prvAddNewTaskToReadyList+0xd4>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d903      	bls.n	80116f8 <prvAddNewTaskToReadyList+0x74>
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116f4:	4a18      	ldr	r2, [pc, #96]	; (8011758 <prvAddNewTaskToReadyList+0xd4>)
 80116f6:	6013      	str	r3, [r2, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116fc:	4613      	mov	r3, r2
 80116fe:	009b      	lsls	r3, r3, #2
 8011700:	4413      	add	r3, r2
 8011702:	009b      	lsls	r3, r3, #2
 8011704:	4a15      	ldr	r2, [pc, #84]	; (801175c <prvAddNewTaskToReadyList+0xd8>)
 8011706:	441a      	add	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	3304      	adds	r3, #4
 801170c:	4619      	mov	r1, r3
 801170e:	4610      	mov	r0, r2
 8011710:	f7fe fd25 	bl	801015e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011714:	f001 fb5e 	bl	8012dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011718:	4b0d      	ldr	r3, [pc, #52]	; (8011750 <prvAddNewTaskToReadyList+0xcc>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00e      	beq.n	801173e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011720:	4b0a      	ldr	r3, [pc, #40]	; (801174c <prvAddNewTaskToReadyList+0xc8>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801172a:	429a      	cmp	r2, r3
 801172c:	d207      	bcs.n	801173e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <prvAddNewTaskToReadyList+0xdc>)
 8011730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	f3bf 8f4f 	dsb	sy
 801173a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801173e:	bf00      	nop
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	24005ca0 	.word	0x24005ca0
 801174c:	240057cc 	.word	0x240057cc
 8011750:	24005cac 	.word	0x24005cac
 8011754:	24005cbc 	.word	0x24005cbc
 8011758:	24005ca8 	.word	0x24005ca8
 801175c:	240057d0 	.word	0x240057d0
 8011760:	e000ed04 	.word	0xe000ed04

08011764 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011764:	b580      	push	{r7, lr}
 8011766:	b084      	sub	sp, #16
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801176c:	2300      	movs	r3, #0
 801176e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d017      	beq.n	80117a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011776:	4b13      	ldr	r3, [pc, #76]	; (80117c4 <vTaskDelay+0x60>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d00a      	beq.n	8011794 <vTaskDelay+0x30>
	__asm volatile
 801177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011782:	f383 8811 	msr	BASEPRI, r3
 8011786:	f3bf 8f6f 	isb	sy
 801178a:	f3bf 8f4f 	dsb	sy
 801178e:	60bb      	str	r3, [r7, #8]
}
 8011790:	bf00      	nop
 8011792:	e7fe      	b.n	8011792 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011794:	f000 f88a 	bl	80118ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011798:	2100      	movs	r1, #0
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f000 fe1e 	bl	80123dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80117a0:	f000 f892 	bl	80118c8 <xTaskResumeAll>
 80117a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d107      	bne.n	80117bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80117ac:	4b06      	ldr	r3, [pc, #24]	; (80117c8 <vTaskDelay+0x64>)
 80117ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117b2:	601a      	str	r2, [r3, #0]
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117bc:	bf00      	nop
 80117be:	3710      	adds	r7, #16
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}
 80117c4:	24005cc8 	.word	0x24005cc8
 80117c8:	e000ed04 	.word	0xe000ed04

080117cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b08a      	sub	sp, #40	; 0x28
 80117d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80117d2:	2300      	movs	r3, #0
 80117d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80117d6:	2300      	movs	r3, #0
 80117d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80117da:	463a      	mov	r2, r7
 80117dc:	1d39      	adds	r1, r7, #4
 80117de:	f107 0308 	add.w	r3, r7, #8
 80117e2:	4618      	mov	r0, r3
 80117e4:	f7fe fc5a 	bl	801009c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	9202      	str	r2, [sp, #8]
 80117f0:	9301      	str	r3, [sp, #4]
 80117f2:	2300      	movs	r3, #0
 80117f4:	9300      	str	r3, [sp, #0]
 80117f6:	2300      	movs	r3, #0
 80117f8:	460a      	mov	r2, r1
 80117fa:	4924      	ldr	r1, [pc, #144]	; (801188c <vTaskStartScheduler+0xc0>)
 80117fc:	4824      	ldr	r0, [pc, #144]	; (8011890 <vTaskStartScheduler+0xc4>)
 80117fe:	f7ff fdf9 	bl	80113f4 <xTaskCreateStatic>
 8011802:	4603      	mov	r3, r0
 8011804:	4a23      	ldr	r2, [pc, #140]	; (8011894 <vTaskStartScheduler+0xc8>)
 8011806:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011808:	4b22      	ldr	r3, [pc, #136]	; (8011894 <vTaskStartScheduler+0xc8>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011810:	2301      	movs	r3, #1
 8011812:	617b      	str	r3, [r7, #20]
 8011814:	e001      	b.n	801181a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011816:	2300      	movs	r3, #0
 8011818:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	2b01      	cmp	r3, #1
 801181e:	d102      	bne.n	8011826 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011820:	f000 fe30 	bl	8012484 <xTimerCreateTimerTask>
 8011824:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d11b      	bne.n	8011864 <vTaskStartScheduler+0x98>
	__asm volatile
 801182c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011830:	f383 8811 	msr	BASEPRI, r3
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	f3bf 8f4f 	dsb	sy
 801183c:	613b      	str	r3, [r7, #16]
}
 801183e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011840:	4b15      	ldr	r3, [pc, #84]	; (8011898 <vTaskStartScheduler+0xcc>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	3354      	adds	r3, #84	; 0x54
 8011846:	4a15      	ldr	r2, [pc, #84]	; (801189c <vTaskStartScheduler+0xd0>)
 8011848:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801184a:	4b15      	ldr	r3, [pc, #84]	; (80118a0 <vTaskStartScheduler+0xd4>)
 801184c:	f04f 32ff 	mov.w	r2, #4294967295
 8011850:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011852:	4b14      	ldr	r3, [pc, #80]	; (80118a4 <vTaskStartScheduler+0xd8>)
 8011854:	2201      	movs	r2, #1
 8011856:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011858:	4b13      	ldr	r3, [pc, #76]	; (80118a8 <vTaskStartScheduler+0xdc>)
 801185a:	2200      	movs	r2, #0
 801185c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801185e:	f001 f9e7 	bl	8012c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011862:	e00e      	b.n	8011882 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186a:	d10a      	bne.n	8011882 <vTaskStartScheduler+0xb6>
	__asm volatile
 801186c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011870:	f383 8811 	msr	BASEPRI, r3
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	60fb      	str	r3, [r7, #12]
}
 801187e:	bf00      	nop
 8011880:	e7fe      	b.n	8011880 <vTaskStartScheduler+0xb4>
}
 8011882:	bf00      	nop
 8011884:	3718      	adds	r7, #24
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	08021694 	.word	0x08021694
 8011890:	08011ef5 	.word	0x08011ef5
 8011894:	24005cc4 	.word	0x24005cc4
 8011898:	240057cc 	.word	0x240057cc
 801189c:	24000128 	.word	0x24000128
 80118a0:	24005cc0 	.word	0x24005cc0
 80118a4:	24005cac 	.word	0x24005cac
 80118a8:	24005ca4 	.word	0x24005ca4

080118ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80118ac:	b480      	push	{r7}
 80118ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80118b0:	4b04      	ldr	r3, [pc, #16]	; (80118c4 <vTaskSuspendAll+0x18>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	3301      	adds	r3, #1
 80118b6:	4a03      	ldr	r2, [pc, #12]	; (80118c4 <vTaskSuspendAll+0x18>)
 80118b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80118ba:	bf00      	nop
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	24005cc8 	.word	0x24005cc8

080118c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80118ce:	2300      	movs	r3, #0
 80118d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80118d2:	2300      	movs	r3, #0
 80118d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80118d6:	4b42      	ldr	r3, [pc, #264]	; (80119e0 <xTaskResumeAll+0x118>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d10a      	bne.n	80118f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80118de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e2:	f383 8811 	msr	BASEPRI, r3
 80118e6:	f3bf 8f6f 	isb	sy
 80118ea:	f3bf 8f4f 	dsb	sy
 80118ee:	603b      	str	r3, [r7, #0]
}
 80118f0:	bf00      	nop
 80118f2:	e7fe      	b.n	80118f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80118f4:	f001 fa3e 	bl	8012d74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80118f8:	4b39      	ldr	r3, [pc, #228]	; (80119e0 <xTaskResumeAll+0x118>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	4a38      	ldr	r2, [pc, #224]	; (80119e0 <xTaskResumeAll+0x118>)
 8011900:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011902:	4b37      	ldr	r3, [pc, #220]	; (80119e0 <xTaskResumeAll+0x118>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d162      	bne.n	80119d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801190a:	4b36      	ldr	r3, [pc, #216]	; (80119e4 <xTaskResumeAll+0x11c>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d05e      	beq.n	80119d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011912:	e02f      	b.n	8011974 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011914:	4b34      	ldr	r3, [pc, #208]	; (80119e8 <xTaskResumeAll+0x120>)
 8011916:	68db      	ldr	r3, [r3, #12]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	3318      	adds	r3, #24
 8011920:	4618      	mov	r0, r3
 8011922:	f7fe fc79 	bl	8010218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3304      	adds	r3, #4
 801192a:	4618      	mov	r0, r3
 801192c:	f7fe fc74 	bl	8010218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011934:	4b2d      	ldr	r3, [pc, #180]	; (80119ec <xTaskResumeAll+0x124>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d903      	bls.n	8011944 <xTaskResumeAll+0x7c>
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011940:	4a2a      	ldr	r2, [pc, #168]	; (80119ec <xTaskResumeAll+0x124>)
 8011942:	6013      	str	r3, [r2, #0]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011948:	4613      	mov	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4a27      	ldr	r2, [pc, #156]	; (80119f0 <xTaskResumeAll+0x128>)
 8011952:	441a      	add	r2, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	3304      	adds	r3, #4
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f7fe fbff 	bl	801015e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011964:	4b23      	ldr	r3, [pc, #140]	; (80119f4 <xTaskResumeAll+0x12c>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196a:	429a      	cmp	r2, r3
 801196c:	d302      	bcc.n	8011974 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801196e:	4b22      	ldr	r3, [pc, #136]	; (80119f8 <xTaskResumeAll+0x130>)
 8011970:	2201      	movs	r2, #1
 8011972:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011974:	4b1c      	ldr	r3, [pc, #112]	; (80119e8 <xTaskResumeAll+0x120>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1cb      	bne.n	8011914 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011982:	f000 fb71 	bl	8012068 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011986:	4b1d      	ldr	r3, [pc, #116]	; (80119fc <xTaskResumeAll+0x134>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d010      	beq.n	80119b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011992:	f000 f859 	bl	8011a48 <xTaskIncrementTick>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d002      	beq.n	80119a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801199c:	4b16      	ldr	r3, [pc, #88]	; (80119f8 <xTaskResumeAll+0x130>)
 801199e:	2201      	movs	r2, #1
 80119a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1f1      	bne.n	8011992 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80119ae:	4b13      	ldr	r3, [pc, #76]	; (80119fc <xTaskResumeAll+0x134>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80119b4:	4b10      	ldr	r3, [pc, #64]	; (80119f8 <xTaskResumeAll+0x130>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d009      	beq.n	80119d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80119bc:	2301      	movs	r3, #1
 80119be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80119c0:	4b0f      	ldr	r3, [pc, #60]	; (8011a00 <xTaskResumeAll+0x138>)
 80119c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119c6:	601a      	str	r2, [r3, #0]
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80119d0:	f001 fa00 	bl	8012dd4 <vPortExitCritical>

	return xAlreadyYielded;
 80119d4:	68bb      	ldr	r3, [r7, #8]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3710      	adds	r7, #16
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
 80119de:	bf00      	nop
 80119e0:	24005cc8 	.word	0x24005cc8
 80119e4:	24005ca0 	.word	0x24005ca0
 80119e8:	24005c60 	.word	0x24005c60
 80119ec:	24005ca8 	.word	0x24005ca8
 80119f0:	240057d0 	.word	0x240057d0
 80119f4:	240057cc 	.word	0x240057cc
 80119f8:	24005cb4 	.word	0x24005cb4
 80119fc:	24005cb0 	.word	0x24005cb0
 8011a00:	e000ed04 	.word	0xe000ed04

08011a04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a0a:	4b05      	ldr	r3, [pc, #20]	; (8011a20 <xTaskGetTickCount+0x1c>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011a10:	687b      	ldr	r3, [r7, #4]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	370c      	adds	r7, #12
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	24005ca4 	.word	0x24005ca4

08011a24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a2a:	f001 fa85 	bl	8012f38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011a2e:	2300      	movs	r3, #0
 8011a30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011a32:	4b04      	ldr	r3, [pc, #16]	; (8011a44 <xTaskGetTickCountFromISR+0x20>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a38:	683b      	ldr	r3, [r7, #0]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3708      	adds	r7, #8
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	24005ca4 	.word	0x24005ca4

08011a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b086      	sub	sp, #24
 8011a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a52:	4b4f      	ldr	r3, [pc, #316]	; (8011b90 <xTaskIncrementTick+0x148>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	f040 808f 	bne.w	8011b7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a5c:	4b4d      	ldr	r3, [pc, #308]	; (8011b94 <xTaskIncrementTick+0x14c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	3301      	adds	r3, #1
 8011a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a64:	4a4b      	ldr	r2, [pc, #300]	; (8011b94 <xTaskIncrementTick+0x14c>)
 8011a66:	693b      	ldr	r3, [r7, #16]
 8011a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d120      	bne.n	8011ab2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a70:	4b49      	ldr	r3, [pc, #292]	; (8011b98 <xTaskIncrementTick+0x150>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <xTaskIncrementTick+0x48>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7e:	f383 8811 	msr	BASEPRI, r3
 8011a82:	f3bf 8f6f 	isb	sy
 8011a86:	f3bf 8f4f 	dsb	sy
 8011a8a:	603b      	str	r3, [r7, #0]
}
 8011a8c:	bf00      	nop
 8011a8e:	e7fe      	b.n	8011a8e <xTaskIncrementTick+0x46>
 8011a90:	4b41      	ldr	r3, [pc, #260]	; (8011b98 <xTaskIncrementTick+0x150>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	60fb      	str	r3, [r7, #12]
 8011a96:	4b41      	ldr	r3, [pc, #260]	; (8011b9c <xTaskIncrementTick+0x154>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	4a3f      	ldr	r2, [pc, #252]	; (8011b98 <xTaskIncrementTick+0x150>)
 8011a9c:	6013      	str	r3, [r2, #0]
 8011a9e:	4a3f      	ldr	r2, [pc, #252]	; (8011b9c <xTaskIncrementTick+0x154>)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	6013      	str	r3, [r2, #0]
 8011aa4:	4b3e      	ldr	r3, [pc, #248]	; (8011ba0 <xTaskIncrementTick+0x158>)
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	3301      	adds	r3, #1
 8011aaa:	4a3d      	ldr	r2, [pc, #244]	; (8011ba0 <xTaskIncrementTick+0x158>)
 8011aac:	6013      	str	r3, [r2, #0]
 8011aae:	f000 fadb 	bl	8012068 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ab2:	4b3c      	ldr	r3, [pc, #240]	; (8011ba4 <xTaskIncrementTick+0x15c>)
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	693a      	ldr	r2, [r7, #16]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d349      	bcc.n	8011b50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011abc:	4b36      	ldr	r3, [pc, #216]	; (8011b98 <xTaskIncrementTick+0x150>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d104      	bne.n	8011ad0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ac6:	4b37      	ldr	r3, [pc, #220]	; (8011ba4 <xTaskIncrementTick+0x15c>)
 8011ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8011acc:	601a      	str	r2, [r3, #0]
					break;
 8011ace:	e03f      	b.n	8011b50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ad0:	4b31      	ldr	r3, [pc, #196]	; (8011b98 <xTaskIncrementTick+0x150>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ae0:	693a      	ldr	r2, [r7, #16]
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d203      	bcs.n	8011af0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011ae8:	4a2e      	ldr	r2, [pc, #184]	; (8011ba4 <xTaskIncrementTick+0x15c>)
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011aee:	e02f      	b.n	8011b50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	3304      	adds	r3, #4
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7fe fb8f 	bl	8010218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d004      	beq.n	8011b0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	3318      	adds	r3, #24
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fe fb86 	bl	8010218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b10:	4b25      	ldr	r3, [pc, #148]	; (8011ba8 <xTaskIncrementTick+0x160>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d903      	bls.n	8011b20 <xTaskIncrementTick+0xd8>
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b1c:	4a22      	ldr	r2, [pc, #136]	; (8011ba8 <xTaskIncrementTick+0x160>)
 8011b1e:	6013      	str	r3, [r2, #0]
 8011b20:	68bb      	ldr	r3, [r7, #8]
 8011b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b24:	4613      	mov	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4a1f      	ldr	r2, [pc, #124]	; (8011bac <xTaskIncrementTick+0x164>)
 8011b2e:	441a      	add	r2, r3
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	3304      	adds	r3, #4
 8011b34:	4619      	mov	r1, r3
 8011b36:	4610      	mov	r0, r2
 8011b38:	f7fe fb11 	bl	801015e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b40:	4b1b      	ldr	r3, [pc, #108]	; (8011bb0 <xTaskIncrementTick+0x168>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d3b8      	bcc.n	8011abc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b4e:	e7b5      	b.n	8011abc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b50:	4b17      	ldr	r3, [pc, #92]	; (8011bb0 <xTaskIncrementTick+0x168>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b56:	4915      	ldr	r1, [pc, #84]	; (8011bac <xTaskIncrementTick+0x164>)
 8011b58:	4613      	mov	r3, r2
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	440b      	add	r3, r1
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d901      	bls.n	8011b6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011b6c:	4b11      	ldr	r3, [pc, #68]	; (8011bb4 <xTaskIncrementTick+0x16c>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d007      	beq.n	8011b84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011b74:	2301      	movs	r3, #1
 8011b76:	617b      	str	r3, [r7, #20]
 8011b78:	e004      	b.n	8011b84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011b7a:	4b0f      	ldr	r3, [pc, #60]	; (8011bb8 <xTaskIncrementTick+0x170>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	3301      	adds	r3, #1
 8011b80:	4a0d      	ldr	r2, [pc, #52]	; (8011bb8 <xTaskIncrementTick+0x170>)
 8011b82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011b84:	697b      	ldr	r3, [r7, #20]
}
 8011b86:	4618      	mov	r0, r3
 8011b88:	3718      	adds	r7, #24
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bd80      	pop	{r7, pc}
 8011b8e:	bf00      	nop
 8011b90:	24005cc8 	.word	0x24005cc8
 8011b94:	24005ca4 	.word	0x24005ca4
 8011b98:	24005c58 	.word	0x24005c58
 8011b9c:	24005c5c 	.word	0x24005c5c
 8011ba0:	24005cb8 	.word	0x24005cb8
 8011ba4:	24005cc0 	.word	0x24005cc0
 8011ba8:	24005ca8 	.word	0x24005ca8
 8011bac:	240057d0 	.word	0x240057d0
 8011bb0:	240057cc 	.word	0x240057cc
 8011bb4:	24005cb4 	.word	0x24005cb4
 8011bb8:	24005cb0 	.word	0x24005cb0

08011bbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	b085      	sub	sp, #20
 8011bc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011bc2:	4b2a      	ldr	r3, [pc, #168]	; (8011c6c <vTaskSwitchContext+0xb0>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d003      	beq.n	8011bd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011bca:	4b29      	ldr	r3, [pc, #164]	; (8011c70 <vTaskSwitchContext+0xb4>)
 8011bcc:	2201      	movs	r2, #1
 8011bce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011bd0:	e046      	b.n	8011c60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011bd2:	4b27      	ldr	r3, [pc, #156]	; (8011c70 <vTaskSwitchContext+0xb4>)
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bd8:	4b26      	ldr	r3, [pc, #152]	; (8011c74 <vTaskSwitchContext+0xb8>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	60fb      	str	r3, [r7, #12]
 8011bde:	e010      	b.n	8011c02 <vTaskSwitchContext+0x46>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d10a      	bne.n	8011bfc <vTaskSwitchContext+0x40>
	__asm volatile
 8011be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bea:	f383 8811 	msr	BASEPRI, r3
 8011bee:	f3bf 8f6f 	isb	sy
 8011bf2:	f3bf 8f4f 	dsb	sy
 8011bf6:	607b      	str	r3, [r7, #4]
}
 8011bf8:	bf00      	nop
 8011bfa:	e7fe      	b.n	8011bfa <vTaskSwitchContext+0x3e>
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	3b01      	subs	r3, #1
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	491d      	ldr	r1, [pc, #116]	; (8011c78 <vTaskSwitchContext+0xbc>)
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	4613      	mov	r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	440b      	add	r3, r1
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d0e4      	beq.n	8011be0 <vTaskSwitchContext+0x24>
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	4613      	mov	r3, r2
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	4413      	add	r3, r2
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4a15      	ldr	r2, [pc, #84]	; (8011c78 <vTaskSwitchContext+0xbc>)
 8011c22:	4413      	add	r3, r2
 8011c24:	60bb      	str	r3, [r7, #8]
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	685a      	ldr	r2, [r3, #4]
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	605a      	str	r2, [r3, #4]
 8011c30:	68bb      	ldr	r3, [r7, #8]
 8011c32:	685a      	ldr	r2, [r3, #4]
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	3308      	adds	r3, #8
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d104      	bne.n	8011c46 <vTaskSwitchContext+0x8a>
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	685a      	ldr	r2, [r3, #4]
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	605a      	str	r2, [r3, #4]
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	4a0b      	ldr	r2, [pc, #44]	; (8011c7c <vTaskSwitchContext+0xc0>)
 8011c4e:	6013      	str	r3, [r2, #0]
 8011c50:	4a08      	ldr	r2, [pc, #32]	; (8011c74 <vTaskSwitchContext+0xb8>)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c56:	4b09      	ldr	r3, [pc, #36]	; (8011c7c <vTaskSwitchContext+0xc0>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	3354      	adds	r3, #84	; 0x54
 8011c5c:	4a08      	ldr	r2, [pc, #32]	; (8011c80 <vTaskSwitchContext+0xc4>)
 8011c5e:	6013      	str	r3, [r2, #0]
}
 8011c60:	bf00      	nop
 8011c62:	3714      	adds	r7, #20
 8011c64:	46bd      	mov	sp, r7
 8011c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6a:	4770      	bx	lr
 8011c6c:	24005cc8 	.word	0x24005cc8
 8011c70:	24005cb4 	.word	0x24005cb4
 8011c74:	24005ca8 	.word	0x24005ca8
 8011c78:	240057d0 	.word	0x240057d0
 8011c7c:	240057cc 	.word	0x240057cc
 8011c80:	24000128 	.word	0x24000128

08011c84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d10a      	bne.n	8011caa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c98:	f383 8811 	msr	BASEPRI, r3
 8011c9c:	f3bf 8f6f 	isb	sy
 8011ca0:	f3bf 8f4f 	dsb	sy
 8011ca4:	60fb      	str	r3, [r7, #12]
}
 8011ca6:	bf00      	nop
 8011ca8:	e7fe      	b.n	8011ca8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011caa:	4b07      	ldr	r3, [pc, #28]	; (8011cc8 <vTaskPlaceOnEventList+0x44>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	3318      	adds	r3, #24
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7fe fa77 	bl	80101a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011cb8:	2101      	movs	r1, #1
 8011cba:	6838      	ldr	r0, [r7, #0]
 8011cbc:	f000 fb8e 	bl	80123dc <prvAddCurrentTaskToDelayedList>
}
 8011cc0:	bf00      	nop
 8011cc2:	3710      	adds	r7, #16
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	240057cc 	.word	0x240057cc

08011ccc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ccc:	b580      	push	{r7, lr}
 8011cce:	b086      	sub	sp, #24
 8011cd0:	af00      	add	r7, sp, #0
 8011cd2:	60f8      	str	r0, [r7, #12]
 8011cd4:	60b9      	str	r1, [r7, #8]
 8011cd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d10a      	bne.n	8011cf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce2:	f383 8811 	msr	BASEPRI, r3
 8011ce6:	f3bf 8f6f 	isb	sy
 8011cea:	f3bf 8f4f 	dsb	sy
 8011cee:	617b      	str	r3, [r7, #20]
}
 8011cf0:	bf00      	nop
 8011cf2:	e7fe      	b.n	8011cf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011cf4:	4b0a      	ldr	r3, [pc, #40]	; (8011d20 <vTaskPlaceOnEventListRestricted+0x54>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	3318      	adds	r3, #24
 8011cfa:	4619      	mov	r1, r3
 8011cfc:	68f8      	ldr	r0, [r7, #12]
 8011cfe:	f7fe fa2e 	bl	801015e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d002      	beq.n	8011d0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011d08:	f04f 33ff 	mov.w	r3, #4294967295
 8011d0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011d0e:	6879      	ldr	r1, [r7, #4]
 8011d10:	68b8      	ldr	r0, [r7, #8]
 8011d12:	f000 fb63 	bl	80123dc <prvAddCurrentTaskToDelayedList>
	}
 8011d16:	bf00      	nop
 8011d18:	3718      	adds	r7, #24
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}
 8011d1e:	bf00      	nop
 8011d20:	240057cc 	.word	0x240057cc

08011d24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b086      	sub	sp, #24
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	68db      	ldr	r3, [r3, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d34:	693b      	ldr	r3, [r7, #16]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10a      	bne.n	8011d50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3e:	f383 8811 	msr	BASEPRI, r3
 8011d42:	f3bf 8f6f 	isb	sy
 8011d46:	f3bf 8f4f 	dsb	sy
 8011d4a:	60fb      	str	r3, [r7, #12]
}
 8011d4c:	bf00      	nop
 8011d4e:	e7fe      	b.n	8011d4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d50:	693b      	ldr	r3, [r7, #16]
 8011d52:	3318      	adds	r3, #24
 8011d54:	4618      	mov	r0, r3
 8011d56:	f7fe fa5f 	bl	8010218 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d5a:	4b1e      	ldr	r3, [pc, #120]	; (8011dd4 <xTaskRemoveFromEventList+0xb0>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d11d      	bne.n	8011d9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d62:	693b      	ldr	r3, [r7, #16]
 8011d64:	3304      	adds	r3, #4
 8011d66:	4618      	mov	r0, r3
 8011d68:	f7fe fa56 	bl	8010218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d70:	4b19      	ldr	r3, [pc, #100]	; (8011dd8 <xTaskRemoveFromEventList+0xb4>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d903      	bls.n	8011d80 <xTaskRemoveFromEventList+0x5c>
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d7c:	4a16      	ldr	r2, [pc, #88]	; (8011dd8 <xTaskRemoveFromEventList+0xb4>)
 8011d7e:	6013      	str	r3, [r2, #0]
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d84:	4613      	mov	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4413      	add	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	4a13      	ldr	r2, [pc, #76]	; (8011ddc <xTaskRemoveFromEventList+0xb8>)
 8011d8e:	441a      	add	r2, r3
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	3304      	adds	r3, #4
 8011d94:	4619      	mov	r1, r3
 8011d96:	4610      	mov	r0, r2
 8011d98:	f7fe f9e1 	bl	801015e <vListInsertEnd>
 8011d9c:	e005      	b.n	8011daa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	3318      	adds	r3, #24
 8011da2:	4619      	mov	r1, r3
 8011da4:	480e      	ldr	r0, [pc, #56]	; (8011de0 <xTaskRemoveFromEventList+0xbc>)
 8011da6:	f7fe f9da 	bl	801015e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dae:	4b0d      	ldr	r3, [pc, #52]	; (8011de4 <xTaskRemoveFromEventList+0xc0>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d905      	bls.n	8011dc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011db8:	2301      	movs	r3, #1
 8011dba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011dbc:	4b0a      	ldr	r3, [pc, #40]	; (8011de8 <xTaskRemoveFromEventList+0xc4>)
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	601a      	str	r2, [r3, #0]
 8011dc2:	e001      	b.n	8011dc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011dc8:	697b      	ldr	r3, [r7, #20]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	24005cc8 	.word	0x24005cc8
 8011dd8:	24005ca8 	.word	0x24005ca8
 8011ddc:	240057d0 	.word	0x240057d0
 8011de0:	24005c60 	.word	0x24005c60
 8011de4:	240057cc 	.word	0x240057cc
 8011de8:	24005cb4 	.word	0x24005cb4

08011dec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011df4:	4b06      	ldr	r3, [pc, #24]	; (8011e10 <vTaskInternalSetTimeOutState+0x24>)
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011dfc:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <vTaskInternalSetTimeOutState+0x28>)
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	605a      	str	r2, [r3, #4]
}
 8011e04:	bf00      	nop
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr
 8011e10:	24005cb8 	.word	0x24005cb8
 8011e14:	24005ca4 	.word	0x24005ca4

08011e18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d10a      	bne.n	8011e3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2c:	f383 8811 	msr	BASEPRI, r3
 8011e30:	f3bf 8f6f 	isb	sy
 8011e34:	f3bf 8f4f 	dsb	sy
 8011e38:	613b      	str	r3, [r7, #16]
}
 8011e3a:	bf00      	nop
 8011e3c:	e7fe      	b.n	8011e3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d10a      	bne.n	8011e5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e48:	f383 8811 	msr	BASEPRI, r3
 8011e4c:	f3bf 8f6f 	isb	sy
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	60fb      	str	r3, [r7, #12]
}
 8011e56:	bf00      	nop
 8011e58:	e7fe      	b.n	8011e58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011e5a:	f000 ff8b 	bl	8012d74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e5e:	4b1d      	ldr	r3, [pc, #116]	; (8011ed4 <xTaskCheckForTimeOut+0xbc>)
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	69ba      	ldr	r2, [r7, #24]
 8011e6a:	1ad3      	subs	r3, r2, r3
 8011e6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e76:	d102      	bne.n	8011e7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	61fb      	str	r3, [r7, #28]
 8011e7c:	e023      	b.n	8011ec6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681a      	ldr	r2, [r3, #0]
 8011e82:	4b15      	ldr	r3, [pc, #84]	; (8011ed8 <xTaskCheckForTimeOut+0xc0>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d007      	beq.n	8011e9a <xTaskCheckForTimeOut+0x82>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	69ba      	ldr	r2, [r7, #24]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d302      	bcc.n	8011e9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011e94:	2301      	movs	r3, #1
 8011e96:	61fb      	str	r3, [r7, #28]
 8011e98:	e015      	b.n	8011ec6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d20b      	bcs.n	8011ebc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	681a      	ldr	r2, [r3, #0]
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	1ad2      	subs	r2, r2, r3
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f7ff ff9b 	bl	8011dec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	61fb      	str	r3, [r7, #28]
 8011eba:	e004      	b.n	8011ec6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011ec6:	f000 ff85 	bl	8012dd4 <vPortExitCritical>

	return xReturn;
 8011eca:	69fb      	ldr	r3, [r7, #28]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3720      	adds	r7, #32
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	24005ca4 	.word	0x24005ca4
 8011ed8:	24005cb8 	.word	0x24005cb8

08011edc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011edc:	b480      	push	{r7}
 8011ede:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011ee0:	4b03      	ldr	r3, [pc, #12]	; (8011ef0 <vTaskMissedYield+0x14>)
 8011ee2:	2201      	movs	r2, #1
 8011ee4:	601a      	str	r2, [r3, #0]
}
 8011ee6:	bf00      	nop
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr
 8011ef0:	24005cb4 	.word	0x24005cb4

08011ef4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b082      	sub	sp, #8
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011efc:	f000 f852 	bl	8011fa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f00:	4b06      	ldr	r3, [pc, #24]	; (8011f1c <prvIdleTask+0x28>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d9f9      	bls.n	8011efc <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f08:	4b05      	ldr	r3, [pc, #20]	; (8011f20 <prvIdleTask+0x2c>)
 8011f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f0e:	601a      	str	r2, [r3, #0]
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f18:	e7f0      	b.n	8011efc <prvIdleTask+0x8>
 8011f1a:	bf00      	nop
 8011f1c:	240057d0 	.word	0x240057d0
 8011f20:	e000ed04 	.word	0xe000ed04

08011f24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	607b      	str	r3, [r7, #4]
 8011f2e:	e00c      	b.n	8011f4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	4613      	mov	r3, r2
 8011f34:	009b      	lsls	r3, r3, #2
 8011f36:	4413      	add	r3, r2
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4a12      	ldr	r2, [pc, #72]	; (8011f84 <prvInitialiseTaskLists+0x60>)
 8011f3c:	4413      	add	r3, r2
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fe f8e0 	bl	8010104 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	3301      	adds	r3, #1
 8011f48:	607b      	str	r3, [r7, #4]
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2b37      	cmp	r3, #55	; 0x37
 8011f4e:	d9ef      	bls.n	8011f30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f50:	480d      	ldr	r0, [pc, #52]	; (8011f88 <prvInitialiseTaskLists+0x64>)
 8011f52:	f7fe f8d7 	bl	8010104 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f56:	480d      	ldr	r0, [pc, #52]	; (8011f8c <prvInitialiseTaskLists+0x68>)
 8011f58:	f7fe f8d4 	bl	8010104 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f5c:	480c      	ldr	r0, [pc, #48]	; (8011f90 <prvInitialiseTaskLists+0x6c>)
 8011f5e:	f7fe f8d1 	bl	8010104 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f62:	480c      	ldr	r0, [pc, #48]	; (8011f94 <prvInitialiseTaskLists+0x70>)
 8011f64:	f7fe f8ce 	bl	8010104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f68:	480b      	ldr	r0, [pc, #44]	; (8011f98 <prvInitialiseTaskLists+0x74>)
 8011f6a:	f7fe f8cb 	bl	8010104 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <prvInitialiseTaskLists+0x78>)
 8011f70:	4a05      	ldr	r2, [pc, #20]	; (8011f88 <prvInitialiseTaskLists+0x64>)
 8011f72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f74:	4b0a      	ldr	r3, [pc, #40]	; (8011fa0 <prvInitialiseTaskLists+0x7c>)
 8011f76:	4a05      	ldr	r2, [pc, #20]	; (8011f8c <prvInitialiseTaskLists+0x68>)
 8011f78:	601a      	str	r2, [r3, #0]
}
 8011f7a:	bf00      	nop
 8011f7c:	3708      	adds	r7, #8
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	240057d0 	.word	0x240057d0
 8011f88:	24005c30 	.word	0x24005c30
 8011f8c:	24005c44 	.word	0x24005c44
 8011f90:	24005c60 	.word	0x24005c60
 8011f94:	24005c74 	.word	0x24005c74
 8011f98:	24005c8c 	.word	0x24005c8c
 8011f9c:	24005c58 	.word	0x24005c58
 8011fa0:	24005c5c 	.word	0x24005c5c

08011fa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011faa:	e019      	b.n	8011fe0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011fac:	f000 fee2 	bl	8012d74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fb0:	4b10      	ldr	r3, [pc, #64]	; (8011ff4 <prvCheckTasksWaitingTermination+0x50>)
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	3304      	adds	r3, #4
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f7fe f92b 	bl	8010218 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011fc2:	4b0d      	ldr	r3, [pc, #52]	; (8011ff8 <prvCheckTasksWaitingTermination+0x54>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	3b01      	subs	r3, #1
 8011fc8:	4a0b      	ldr	r2, [pc, #44]	; (8011ff8 <prvCheckTasksWaitingTermination+0x54>)
 8011fca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011fcc:	4b0b      	ldr	r3, [pc, #44]	; (8011ffc <prvCheckTasksWaitingTermination+0x58>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	3b01      	subs	r3, #1
 8011fd2:	4a0a      	ldr	r2, [pc, #40]	; (8011ffc <prvCheckTasksWaitingTermination+0x58>)
 8011fd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011fd6:	f000 fefd 	bl	8012dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f000 f810 	bl	8012000 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fe0:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <prvCheckTasksWaitingTermination+0x58>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1e1      	bne.n	8011fac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011fe8:	bf00      	nop
 8011fea:	bf00      	nop
 8011fec:	3708      	adds	r7, #8
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	24005c74 	.word	0x24005c74
 8011ff8:	24005ca0 	.word	0x24005ca0
 8011ffc:	24005c88 	.word	0x24005c88

08012000 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	3354      	adds	r3, #84	; 0x54
 801200c:	4618      	mov	r0, r3
 801200e:	f00e fc0f 	bl	8020830 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012018:	2b00      	cmp	r3, #0
 801201a:	d108      	bne.n	801202e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012020:	4618      	mov	r0, r3
 8012022:	f001 f895 	bl	8013150 <vPortFree>
				vPortFree( pxTCB );
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f001 f892 	bl	8013150 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801202c:	e018      	b.n	8012060 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012034:	2b01      	cmp	r3, #1
 8012036:	d103      	bne.n	8012040 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012038:	6878      	ldr	r0, [r7, #4]
 801203a:	f001 f889 	bl	8013150 <vPortFree>
	}
 801203e:	e00f      	b.n	8012060 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012046:	2b02      	cmp	r3, #2
 8012048:	d00a      	beq.n	8012060 <prvDeleteTCB+0x60>
	__asm volatile
 801204a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801204e:	f383 8811 	msr	BASEPRI, r3
 8012052:	f3bf 8f6f 	isb	sy
 8012056:	f3bf 8f4f 	dsb	sy
 801205a:	60fb      	str	r3, [r7, #12]
}
 801205c:	bf00      	nop
 801205e:	e7fe      	b.n	801205e <prvDeleteTCB+0x5e>
	}
 8012060:	bf00      	nop
 8012062:	3710      	adds	r7, #16
 8012064:	46bd      	mov	sp, r7
 8012066:	bd80      	pop	{r7, pc}

08012068 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801206e:	4b0c      	ldr	r3, [pc, #48]	; (80120a0 <prvResetNextTaskUnblockTime+0x38>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d104      	bne.n	8012082 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012078:	4b0a      	ldr	r3, [pc, #40]	; (80120a4 <prvResetNextTaskUnblockTime+0x3c>)
 801207a:	f04f 32ff 	mov.w	r2, #4294967295
 801207e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012080:	e008      	b.n	8012094 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012082:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <prvResetNextTaskUnblockTime+0x38>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4a04      	ldr	r2, [pc, #16]	; (80120a4 <prvResetNextTaskUnblockTime+0x3c>)
 8012092:	6013      	str	r3, [r2, #0]
}
 8012094:	bf00      	nop
 8012096:	370c      	adds	r7, #12
 8012098:	46bd      	mov	sp, r7
 801209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209e:	4770      	bx	lr
 80120a0:	24005c58 	.word	0x24005c58
 80120a4:	24005cc0 	.word	0x24005cc0

080120a8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80120ae:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <xTaskGetCurrentTaskHandle+0x1c>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80120b4:	687b      	ldr	r3, [r7, #4]
	}
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop
 80120c4:	240057cc 	.word	0x240057cc

080120c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80120c8:	b480      	push	{r7}
 80120ca:	b083      	sub	sp, #12
 80120cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80120ce:	4b0b      	ldr	r3, [pc, #44]	; (80120fc <xTaskGetSchedulerState+0x34>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d102      	bne.n	80120dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80120d6:	2301      	movs	r3, #1
 80120d8:	607b      	str	r3, [r7, #4]
 80120da:	e008      	b.n	80120ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120dc:	4b08      	ldr	r3, [pc, #32]	; (8012100 <xTaskGetSchedulerState+0x38>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d102      	bne.n	80120ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80120e4:	2302      	movs	r3, #2
 80120e6:	607b      	str	r3, [r7, #4]
 80120e8:	e001      	b.n	80120ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80120ea:	2300      	movs	r3, #0
 80120ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80120ee:	687b      	ldr	r3, [r7, #4]
	}
 80120f0:	4618      	mov	r0, r3
 80120f2:	370c      	adds	r7, #12
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr
 80120fc:	24005cac 	.word	0x24005cac
 8012100:	24005cc8 	.word	0x24005cc8

08012104 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012104:	b580      	push	{r7, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012110:	2300      	movs	r3, #0
 8012112:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d051      	beq.n	80121be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801211e:	4b2a      	ldr	r3, [pc, #168]	; (80121c8 <xTaskPriorityInherit+0xc4>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012124:	429a      	cmp	r2, r3
 8012126:	d241      	bcs.n	80121ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	699b      	ldr	r3, [r3, #24]
 801212c:	2b00      	cmp	r3, #0
 801212e:	db06      	blt.n	801213e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012130:	4b25      	ldr	r3, [pc, #148]	; (80121c8 <xTaskPriorityInherit+0xc4>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012136:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	6959      	ldr	r1, [r3, #20]
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012146:	4613      	mov	r3, r2
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	4413      	add	r3, r2
 801214c:	009b      	lsls	r3, r3, #2
 801214e:	4a1f      	ldr	r2, [pc, #124]	; (80121cc <xTaskPriorityInherit+0xc8>)
 8012150:	4413      	add	r3, r2
 8012152:	4299      	cmp	r1, r3
 8012154:	d122      	bne.n	801219c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	3304      	adds	r3, #4
 801215a:	4618      	mov	r0, r3
 801215c:	f7fe f85c 	bl	8010218 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012160:	4b19      	ldr	r3, [pc, #100]	; (80121c8 <xTaskPriorityInherit+0xc4>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216e:	4b18      	ldr	r3, [pc, #96]	; (80121d0 <xTaskPriorityInherit+0xcc>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	429a      	cmp	r2, r3
 8012174:	d903      	bls.n	801217e <xTaskPriorityInherit+0x7a>
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801217a:	4a15      	ldr	r2, [pc, #84]	; (80121d0 <xTaskPriorityInherit+0xcc>)
 801217c:	6013      	str	r3, [r2, #0]
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012182:	4613      	mov	r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	4413      	add	r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	4a10      	ldr	r2, [pc, #64]	; (80121cc <xTaskPriorityInherit+0xc8>)
 801218c:	441a      	add	r2, r3
 801218e:	68bb      	ldr	r3, [r7, #8]
 8012190:	3304      	adds	r3, #4
 8012192:	4619      	mov	r1, r3
 8012194:	4610      	mov	r0, r2
 8012196:	f7fd ffe2 	bl	801015e <vListInsertEnd>
 801219a:	e004      	b.n	80121a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801219c:	4b0a      	ldr	r3, [pc, #40]	; (80121c8 <xTaskPriorityInherit+0xc4>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80121a6:	2301      	movs	r3, #1
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	e008      	b.n	80121be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121b0:	4b05      	ldr	r3, [pc, #20]	; (80121c8 <xTaskPriorityInherit+0xc4>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d201      	bcs.n	80121be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80121ba:	2301      	movs	r3, #1
 80121bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121be:	68fb      	ldr	r3, [r7, #12]
	}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3710      	adds	r7, #16
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	240057cc 	.word	0x240057cc
 80121cc:	240057d0 	.word	0x240057d0
 80121d0:	24005ca8 	.word	0x24005ca8

080121d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80121e0:	2300      	movs	r3, #0
 80121e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d056      	beq.n	8012298 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80121ea:	4b2e      	ldr	r3, [pc, #184]	; (80122a4 <xTaskPriorityDisinherit+0xd0>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	693a      	ldr	r2, [r7, #16]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d00a      	beq.n	801220a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	60fb      	str	r3, [r7, #12]
}
 8012206:	bf00      	nop
 8012208:	e7fe      	b.n	8012208 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801220e:	2b00      	cmp	r3, #0
 8012210:	d10a      	bne.n	8012228 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012216:	f383 8811 	msr	BASEPRI, r3
 801221a:	f3bf 8f6f 	isb	sy
 801221e:	f3bf 8f4f 	dsb	sy
 8012222:	60bb      	str	r3, [r7, #8]
}
 8012224:	bf00      	nop
 8012226:	e7fe      	b.n	8012226 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801222c:	1e5a      	subs	r2, r3, #1
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012236:	693b      	ldr	r3, [r7, #16]
 8012238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801223a:	429a      	cmp	r2, r3
 801223c:	d02c      	beq.n	8012298 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012242:	2b00      	cmp	r3, #0
 8012244:	d128      	bne.n	8012298 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	3304      	adds	r3, #4
 801224a:	4618      	mov	r0, r3
 801224c:	f7fd ffe4 	bl	8010218 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801225c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012268:	4b0f      	ldr	r3, [pc, #60]	; (80122a8 <xTaskPriorityDisinherit+0xd4>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	429a      	cmp	r2, r3
 801226e:	d903      	bls.n	8012278 <xTaskPriorityDisinherit+0xa4>
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012274:	4a0c      	ldr	r2, [pc, #48]	; (80122a8 <xTaskPriorityDisinherit+0xd4>)
 8012276:	6013      	str	r3, [r2, #0]
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801227c:	4613      	mov	r3, r2
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	4413      	add	r3, r2
 8012282:	009b      	lsls	r3, r3, #2
 8012284:	4a09      	ldr	r2, [pc, #36]	; (80122ac <xTaskPriorityDisinherit+0xd8>)
 8012286:	441a      	add	r2, r3
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	3304      	adds	r3, #4
 801228c:	4619      	mov	r1, r3
 801228e:	4610      	mov	r0, r2
 8012290:	f7fd ff65 	bl	801015e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012294:	2301      	movs	r3, #1
 8012296:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012298:	697b      	ldr	r3, [r7, #20]
	}
 801229a:	4618      	mov	r0, r3
 801229c:	3718      	adds	r7, #24
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	240057cc 	.word	0x240057cc
 80122a8:	24005ca8 	.word	0x24005ca8
 80122ac:	240057d0 	.word	0x240057d0

080122b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b088      	sub	sp, #32
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80122be:	2301      	movs	r3, #1
 80122c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d06a      	beq.n	801239e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10a      	bne.n	80122e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80122d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	60fb      	str	r3, [r7, #12]
}
 80122e2:	bf00      	nop
 80122e4:	e7fe      	b.n	80122e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80122e6:	69bb      	ldr	r3, [r7, #24]
 80122e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	429a      	cmp	r2, r3
 80122ee:	d902      	bls.n	80122f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	61fb      	str	r3, [r7, #28]
 80122f4:	e002      	b.n	80122fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80122f6:	69bb      	ldr	r3, [r7, #24]
 80122f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80122fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012300:	69fa      	ldr	r2, [r7, #28]
 8012302:	429a      	cmp	r2, r3
 8012304:	d04b      	beq.n	801239e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012306:	69bb      	ldr	r3, [r7, #24]
 8012308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801230a:	697a      	ldr	r2, [r7, #20]
 801230c:	429a      	cmp	r2, r3
 801230e:	d146      	bne.n	801239e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012310:	4b25      	ldr	r3, [pc, #148]	; (80123a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	69ba      	ldr	r2, [r7, #24]
 8012316:	429a      	cmp	r2, r3
 8012318:	d10a      	bne.n	8012330 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801231e:	f383 8811 	msr	BASEPRI, r3
 8012322:	f3bf 8f6f 	isb	sy
 8012326:	f3bf 8f4f 	dsb	sy
 801232a:	60bb      	str	r3, [r7, #8]
}
 801232c:	bf00      	nop
 801232e:	e7fe      	b.n	801232e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012334:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012336:	69bb      	ldr	r3, [r7, #24]
 8012338:	69fa      	ldr	r2, [r7, #28]
 801233a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801233c:	69bb      	ldr	r3, [r7, #24]
 801233e:	699b      	ldr	r3, [r3, #24]
 8012340:	2b00      	cmp	r3, #0
 8012342:	db04      	blt.n	801234e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801234a:	69bb      	ldr	r3, [r7, #24]
 801234c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	6959      	ldr	r1, [r3, #20]
 8012352:	693a      	ldr	r2, [r7, #16]
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4a13      	ldr	r2, [pc, #76]	; (80123ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801235e:	4413      	add	r3, r2
 8012360:	4299      	cmp	r1, r3
 8012362:	d11c      	bne.n	801239e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	3304      	adds	r3, #4
 8012368:	4618      	mov	r0, r3
 801236a:	f7fd ff55 	bl	8010218 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012372:	4b0f      	ldr	r3, [pc, #60]	; (80123b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	429a      	cmp	r2, r3
 8012378:	d903      	bls.n	8012382 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237e:	4a0c      	ldr	r2, [pc, #48]	; (80123b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012380:	6013      	str	r3, [r2, #0]
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012386:	4613      	mov	r3, r2
 8012388:	009b      	lsls	r3, r3, #2
 801238a:	4413      	add	r3, r2
 801238c:	009b      	lsls	r3, r3, #2
 801238e:	4a07      	ldr	r2, [pc, #28]	; (80123ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012390:	441a      	add	r2, r3
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	3304      	adds	r3, #4
 8012396:	4619      	mov	r1, r3
 8012398:	4610      	mov	r0, r2
 801239a:	f7fd fee0 	bl	801015e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801239e:	bf00      	nop
 80123a0:	3720      	adds	r7, #32
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	240057cc 	.word	0x240057cc
 80123ac:	240057d0 	.word	0x240057d0
 80123b0:	24005ca8 	.word	0x24005ca8

080123b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80123b4:	b480      	push	{r7}
 80123b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80123b8:	4b07      	ldr	r3, [pc, #28]	; (80123d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d004      	beq.n	80123ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80123c0:	4b05      	ldr	r3, [pc, #20]	; (80123d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123c6:	3201      	adds	r2, #1
 80123c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80123ca:	4b03      	ldr	r3, [pc, #12]	; (80123d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80123cc:	681b      	ldr	r3, [r3, #0]
	}
 80123ce:	4618      	mov	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr
 80123d8:	240057cc 	.word	0x240057cc

080123dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80123e6:	4b21      	ldr	r3, [pc, #132]	; (801246c <prvAddCurrentTaskToDelayedList+0x90>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123ec:	4b20      	ldr	r3, [pc, #128]	; (8012470 <prvAddCurrentTaskToDelayedList+0x94>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3304      	adds	r3, #4
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fd ff10 	bl	8010218 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123fe:	d10a      	bne.n	8012416 <prvAddCurrentTaskToDelayedList+0x3a>
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d007      	beq.n	8012416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012406:	4b1a      	ldr	r3, [pc, #104]	; (8012470 <prvAddCurrentTaskToDelayedList+0x94>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	3304      	adds	r3, #4
 801240c:	4619      	mov	r1, r3
 801240e:	4819      	ldr	r0, [pc, #100]	; (8012474 <prvAddCurrentTaskToDelayedList+0x98>)
 8012410:	f7fd fea5 	bl	801015e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012414:	e026      	b.n	8012464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	4413      	add	r3, r2
 801241c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801241e:	4b14      	ldr	r3, [pc, #80]	; (8012470 <prvAddCurrentTaskToDelayedList+0x94>)
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	68ba      	ldr	r2, [r7, #8]
 8012424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012426:	68ba      	ldr	r2, [r7, #8]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	429a      	cmp	r2, r3
 801242c:	d209      	bcs.n	8012442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801242e:	4b12      	ldr	r3, [pc, #72]	; (8012478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	4b0f      	ldr	r3, [pc, #60]	; (8012470 <prvAddCurrentTaskToDelayedList+0x94>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	3304      	adds	r3, #4
 8012438:	4619      	mov	r1, r3
 801243a:	4610      	mov	r0, r2
 801243c:	f7fd feb3 	bl	80101a6 <vListInsert>
}
 8012440:	e010      	b.n	8012464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012442:	4b0e      	ldr	r3, [pc, #56]	; (801247c <prvAddCurrentTaskToDelayedList+0xa0>)
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	4b0a      	ldr	r3, [pc, #40]	; (8012470 <prvAddCurrentTaskToDelayedList+0x94>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	3304      	adds	r3, #4
 801244c:	4619      	mov	r1, r3
 801244e:	4610      	mov	r0, r2
 8012450:	f7fd fea9 	bl	80101a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012454:	4b0a      	ldr	r3, [pc, #40]	; (8012480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	68ba      	ldr	r2, [r7, #8]
 801245a:	429a      	cmp	r2, r3
 801245c:	d202      	bcs.n	8012464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801245e:	4a08      	ldr	r2, [pc, #32]	; (8012480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	6013      	str	r3, [r2, #0]
}
 8012464:	bf00      	nop
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	24005ca4 	.word	0x24005ca4
 8012470:	240057cc 	.word	0x240057cc
 8012474:	24005c8c 	.word	0x24005c8c
 8012478:	24005c5c 	.word	0x24005c5c
 801247c:	24005c58 	.word	0x24005c58
 8012480:	24005cc0 	.word	0x24005cc0

08012484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b08a      	sub	sp, #40	; 0x28
 8012488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801248a:	2300      	movs	r3, #0
 801248c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801248e:	f000 fb07 	bl	8012aa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012492:	4b1c      	ldr	r3, [pc, #112]	; (8012504 <xTimerCreateTimerTask+0x80>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d021      	beq.n	80124de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801249a:	2300      	movs	r3, #0
 801249c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801249e:	2300      	movs	r3, #0
 80124a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80124a2:	1d3a      	adds	r2, r7, #4
 80124a4:	f107 0108 	add.w	r1, r7, #8
 80124a8:	f107 030c 	add.w	r3, r7, #12
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fd fe0f 	bl	80100d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80124b2:	6879      	ldr	r1, [r7, #4]
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	68fa      	ldr	r2, [r7, #12]
 80124b8:	9202      	str	r2, [sp, #8]
 80124ba:	9301      	str	r3, [sp, #4]
 80124bc:	2302      	movs	r3, #2
 80124be:	9300      	str	r3, [sp, #0]
 80124c0:	2300      	movs	r3, #0
 80124c2:	460a      	mov	r2, r1
 80124c4:	4910      	ldr	r1, [pc, #64]	; (8012508 <xTimerCreateTimerTask+0x84>)
 80124c6:	4811      	ldr	r0, [pc, #68]	; (801250c <xTimerCreateTimerTask+0x88>)
 80124c8:	f7fe ff94 	bl	80113f4 <xTaskCreateStatic>
 80124cc:	4603      	mov	r3, r0
 80124ce:	4a10      	ldr	r2, [pc, #64]	; (8012510 <xTimerCreateTimerTask+0x8c>)
 80124d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80124d2:	4b0f      	ldr	r3, [pc, #60]	; (8012510 <xTimerCreateTimerTask+0x8c>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d001      	beq.n	80124de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80124da:	2301      	movs	r3, #1
 80124dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d10a      	bne.n	80124fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80124e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e8:	f383 8811 	msr	BASEPRI, r3
 80124ec:	f3bf 8f6f 	isb	sy
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	613b      	str	r3, [r7, #16]
}
 80124f6:	bf00      	nop
 80124f8:	e7fe      	b.n	80124f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80124fa:	697b      	ldr	r3, [r7, #20]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3718      	adds	r7, #24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	24005cfc 	.word	0x24005cfc
 8012508:	0802169c 	.word	0x0802169c
 801250c:	08012649 	.word	0x08012649
 8012510:	24005d00 	.word	0x24005d00

08012514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b08a      	sub	sp, #40	; 0x28
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012522:	2300      	movs	r3, #0
 8012524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d10a      	bne.n	8012542 <xTimerGenericCommand+0x2e>
	__asm volatile
 801252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012530:	f383 8811 	msr	BASEPRI, r3
 8012534:	f3bf 8f6f 	isb	sy
 8012538:	f3bf 8f4f 	dsb	sy
 801253c:	623b      	str	r3, [r7, #32]
}
 801253e:	bf00      	nop
 8012540:	e7fe      	b.n	8012540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012542:	4b1a      	ldr	r3, [pc, #104]	; (80125ac <xTimerGenericCommand+0x98>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d02a      	beq.n	80125a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801254a:	68bb      	ldr	r3, [r7, #8]
 801254c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b05      	cmp	r3, #5
 801255a:	dc18      	bgt.n	801258e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801255c:	f7ff fdb4 	bl	80120c8 <xTaskGetSchedulerState>
 8012560:	4603      	mov	r3, r0
 8012562:	2b02      	cmp	r3, #2
 8012564:	d109      	bne.n	801257a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012566:	4b11      	ldr	r3, [pc, #68]	; (80125ac <xTimerGenericCommand+0x98>)
 8012568:	6818      	ldr	r0, [r3, #0]
 801256a:	f107 0110 	add.w	r1, r7, #16
 801256e:	2300      	movs	r3, #0
 8012570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012572:	f7fe f8d9 	bl	8010728 <xQueueGenericSend>
 8012576:	6278      	str	r0, [r7, #36]	; 0x24
 8012578:	e012      	b.n	80125a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801257a:	4b0c      	ldr	r3, [pc, #48]	; (80125ac <xTimerGenericCommand+0x98>)
 801257c:	6818      	ldr	r0, [r3, #0]
 801257e:	f107 0110 	add.w	r1, r7, #16
 8012582:	2300      	movs	r3, #0
 8012584:	2200      	movs	r2, #0
 8012586:	f7fe f8cf 	bl	8010728 <xQueueGenericSend>
 801258a:	6278      	str	r0, [r7, #36]	; 0x24
 801258c:	e008      	b.n	80125a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801258e:	4b07      	ldr	r3, [pc, #28]	; (80125ac <xTimerGenericCommand+0x98>)
 8012590:	6818      	ldr	r0, [r3, #0]
 8012592:	f107 0110 	add.w	r1, r7, #16
 8012596:	2300      	movs	r3, #0
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	f7fe f9c3 	bl	8010924 <xQueueGenericSendFromISR>
 801259e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80125a2:	4618      	mov	r0, r3
 80125a4:	3728      	adds	r7, #40	; 0x28
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	24005cfc 	.word	0x24005cfc

080125b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b088      	sub	sp, #32
 80125b4:	af02      	add	r7, sp, #8
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125ba:	4b22      	ldr	r3, [pc, #136]	; (8012644 <prvProcessExpiredTimer+0x94>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	68db      	ldr	r3, [r3, #12]
 80125c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	3304      	adds	r3, #4
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7fd fe25 	bl	8010218 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80125d4:	f003 0304 	and.w	r3, r3, #4
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d022      	beq.n	8012622 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	699a      	ldr	r2, [r3, #24]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	18d1      	adds	r1, r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	683a      	ldr	r2, [r7, #0]
 80125e8:	6978      	ldr	r0, [r7, #20]
 80125ea:	f000 f8d1 	bl	8012790 <prvInsertTimerInActiveList>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d01f      	beq.n	8012634 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80125f4:	2300      	movs	r3, #0
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	2300      	movs	r3, #0
 80125fa:	687a      	ldr	r2, [r7, #4]
 80125fc:	2100      	movs	r1, #0
 80125fe:	6978      	ldr	r0, [r7, #20]
 8012600:	f7ff ff88 	bl	8012514 <xTimerGenericCommand>
 8012604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d113      	bne.n	8012634 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012610:	f383 8811 	msr	BASEPRI, r3
 8012614:	f3bf 8f6f 	isb	sy
 8012618:	f3bf 8f4f 	dsb	sy
 801261c:	60fb      	str	r3, [r7, #12]
}
 801261e:	bf00      	nop
 8012620:	e7fe      	b.n	8012620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012628:	f023 0301 	bic.w	r3, r3, #1
 801262c:	b2da      	uxtb	r2, r3
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	6a1b      	ldr	r3, [r3, #32]
 8012638:	6978      	ldr	r0, [r7, #20]
 801263a:	4798      	blx	r3
}
 801263c:	bf00      	nop
 801263e:	3718      	adds	r7, #24
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	24005cf4 	.word	0x24005cf4

08012648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012650:	f107 0308 	add.w	r3, r7, #8
 8012654:	4618      	mov	r0, r3
 8012656:	f000 f857 	bl	8012708 <prvGetNextExpireTime>
 801265a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	4619      	mov	r1, r3
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f000 f803 	bl	801266c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012666:	f000 f8d5 	bl	8012814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801266a:	e7f1      	b.n	8012650 <prvTimerTask+0x8>

0801266c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012676:	f7ff f919 	bl	80118ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801267a:	f107 0308 	add.w	r3, r7, #8
 801267e:	4618      	mov	r0, r3
 8012680:	f000 f866 	bl	8012750 <prvSampleTimeNow>
 8012684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d130      	bne.n	80126ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d10a      	bne.n	80126a8 <prvProcessTimerOrBlockTask+0x3c>
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	429a      	cmp	r2, r3
 8012698:	d806      	bhi.n	80126a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801269a:	f7ff f915 	bl	80118c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801269e:	68f9      	ldr	r1, [r7, #12]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff ff85 	bl	80125b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80126a6:	e024      	b.n	80126f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d008      	beq.n	80126c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80126ae:	4b13      	ldr	r3, [pc, #76]	; (80126fc <prvProcessTimerOrBlockTask+0x90>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d101      	bne.n	80126bc <prvProcessTimerOrBlockTask+0x50>
 80126b8:	2301      	movs	r3, #1
 80126ba:	e000      	b.n	80126be <prvProcessTimerOrBlockTask+0x52>
 80126bc:	2300      	movs	r3, #0
 80126be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80126c0:	4b0f      	ldr	r3, [pc, #60]	; (8012700 <prvProcessTimerOrBlockTask+0x94>)
 80126c2:	6818      	ldr	r0, [r3, #0]
 80126c4:	687a      	ldr	r2, [r7, #4]
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	1ad3      	subs	r3, r2, r3
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	4619      	mov	r1, r3
 80126ce:	f7fe fe5d 	bl	801138c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80126d2:	f7ff f8f9 	bl	80118c8 <xTaskResumeAll>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d10a      	bne.n	80126f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80126dc:	4b09      	ldr	r3, [pc, #36]	; (8012704 <prvProcessTimerOrBlockTask+0x98>)
 80126de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	f3bf 8f4f 	dsb	sy
 80126e8:	f3bf 8f6f 	isb	sy
}
 80126ec:	e001      	b.n	80126f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80126ee:	f7ff f8eb 	bl	80118c8 <xTaskResumeAll>
}
 80126f2:	bf00      	nop
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	24005cf8 	.word	0x24005cf8
 8012700:	24005cfc 	.word	0x24005cfc
 8012704:	e000ed04 	.word	0xe000ed04

08012708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012710:	4b0e      	ldr	r3, [pc, #56]	; (801274c <prvGetNextExpireTime+0x44>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <prvGetNextExpireTime+0x16>
 801271a:	2201      	movs	r2, #1
 801271c:	e000      	b.n	8012720 <prvGetNextExpireTime+0x18>
 801271e:	2200      	movs	r2, #0
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d105      	bne.n	8012738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801272c:	4b07      	ldr	r3, [pc, #28]	; (801274c <prvGetNextExpireTime+0x44>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	60fb      	str	r3, [r7, #12]
 8012736:	e001      	b.n	801273c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012738:	2300      	movs	r3, #0
 801273a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801273c:	68fb      	ldr	r3, [r7, #12]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3714      	adds	r7, #20
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr
 801274a:	bf00      	nop
 801274c:	24005cf4 	.word	0x24005cf4

08012750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b084      	sub	sp, #16
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012758:	f7ff f954 	bl	8011a04 <xTaskGetTickCount>
 801275c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801275e:	4b0b      	ldr	r3, [pc, #44]	; (801278c <prvSampleTimeNow+0x3c>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	68fa      	ldr	r2, [r7, #12]
 8012764:	429a      	cmp	r2, r3
 8012766:	d205      	bcs.n	8012774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012768:	f000 f936 	bl	80129d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	2201      	movs	r2, #1
 8012770:	601a      	str	r2, [r3, #0]
 8012772:	e002      	b.n	801277a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2200      	movs	r2, #0
 8012778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801277a:	4a04      	ldr	r2, [pc, #16]	; (801278c <prvSampleTimeNow+0x3c>)
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012780:	68fb      	ldr	r3, [r7, #12]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop
 801278c:	24005d04 	.word	0x24005d04

08012790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b086      	sub	sp, #24
 8012794:	af00      	add	r7, sp, #0
 8012796:	60f8      	str	r0, [r7, #12]
 8012798:	60b9      	str	r1, [r7, #8]
 801279a:	607a      	str	r2, [r7, #4]
 801279c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801279e:	2300      	movs	r3, #0
 80127a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	68ba      	ldr	r2, [r7, #8]
 80127a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	68fa      	ldr	r2, [r7, #12]
 80127ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80127ae:	68ba      	ldr	r2, [r7, #8]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	429a      	cmp	r2, r3
 80127b4:	d812      	bhi.n	80127dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	1ad2      	subs	r2, r2, r3
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	699b      	ldr	r3, [r3, #24]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d302      	bcc.n	80127ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80127c4:	2301      	movs	r3, #1
 80127c6:	617b      	str	r3, [r7, #20]
 80127c8:	e01b      	b.n	8012802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80127ca:	4b10      	ldr	r3, [pc, #64]	; (801280c <prvInsertTimerInActiveList+0x7c>)
 80127cc:	681a      	ldr	r2, [r3, #0]
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	3304      	adds	r3, #4
 80127d2:	4619      	mov	r1, r3
 80127d4:	4610      	mov	r0, r2
 80127d6:	f7fd fce6 	bl	80101a6 <vListInsert>
 80127da:	e012      	b.n	8012802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d206      	bcs.n	80127f2 <prvInsertTimerInActiveList+0x62>
 80127e4:	68ba      	ldr	r2, [r7, #8]
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d302      	bcc.n	80127f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80127ec:	2301      	movs	r3, #1
 80127ee:	617b      	str	r3, [r7, #20]
 80127f0:	e007      	b.n	8012802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80127f2:	4b07      	ldr	r3, [pc, #28]	; (8012810 <prvInsertTimerInActiveList+0x80>)
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	3304      	adds	r3, #4
 80127fa:	4619      	mov	r1, r3
 80127fc:	4610      	mov	r0, r2
 80127fe:	f7fd fcd2 	bl	80101a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012802:	697b      	ldr	r3, [r7, #20]
}
 8012804:	4618      	mov	r0, r3
 8012806:	3718      	adds	r7, #24
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	24005cf8 	.word	0x24005cf8
 8012810:	24005cf4 	.word	0x24005cf4

08012814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b08e      	sub	sp, #56	; 0x38
 8012818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801281a:	e0ca      	b.n	80129b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	da18      	bge.n	8012854 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012822:	1d3b      	adds	r3, r7, #4
 8012824:	3304      	adds	r3, #4
 8012826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801282a:	2b00      	cmp	r3, #0
 801282c:	d10a      	bne.n	8012844 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012832:	f383 8811 	msr	BASEPRI, r3
 8012836:	f3bf 8f6f 	isb	sy
 801283a:	f3bf 8f4f 	dsb	sy
 801283e:	61fb      	str	r3, [r7, #28]
}
 8012840:	bf00      	nop
 8012842:	e7fe      	b.n	8012842 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801284a:	6850      	ldr	r0, [r2, #4]
 801284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801284e:	6892      	ldr	r2, [r2, #8]
 8012850:	4611      	mov	r1, r2
 8012852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	f2c0 80aa 	blt.w	80129b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012862:	695b      	ldr	r3, [r3, #20]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d004      	beq.n	8012872 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801286a:	3304      	adds	r3, #4
 801286c:	4618      	mov	r0, r3
 801286e:	f7fd fcd3 	bl	8010218 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012872:	463b      	mov	r3, r7
 8012874:	4618      	mov	r0, r3
 8012876:	f7ff ff6b 	bl	8012750 <prvSampleTimeNow>
 801287a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2b09      	cmp	r3, #9
 8012880:	f200 8097 	bhi.w	80129b2 <prvProcessReceivedCommands+0x19e>
 8012884:	a201      	add	r2, pc, #4	; (adr r2, 801288c <prvProcessReceivedCommands+0x78>)
 8012886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801288a:	bf00      	nop
 801288c:	080128b5 	.word	0x080128b5
 8012890:	080128b5 	.word	0x080128b5
 8012894:	080128b5 	.word	0x080128b5
 8012898:	08012929 	.word	0x08012929
 801289c:	0801293d 	.word	0x0801293d
 80128a0:	08012987 	.word	0x08012987
 80128a4:	080128b5 	.word	0x080128b5
 80128a8:	080128b5 	.word	0x080128b5
 80128ac:	08012929 	.word	0x08012929
 80128b0:	0801293d 	.word	0x0801293d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80128b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128ba:	f043 0301 	orr.w	r3, r3, #1
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80128c6:	68ba      	ldr	r2, [r7, #8]
 80128c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ca:	699b      	ldr	r3, [r3, #24]
 80128cc:	18d1      	adds	r1, r2, r3
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128d4:	f7ff ff5c 	bl	8012790 <prvInsertTimerInActiveList>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d069      	beq.n	80129b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	6a1b      	ldr	r3, [r3, #32]
 80128e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80128e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80128e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128ec:	f003 0304 	and.w	r3, r3, #4
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d05e      	beq.n	80129b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80128f4:	68ba      	ldr	r2, [r7, #8]
 80128f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	441a      	add	r2, r3
 80128fc:	2300      	movs	r3, #0
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	2300      	movs	r3, #0
 8012902:	2100      	movs	r1, #0
 8012904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012906:	f7ff fe05 	bl	8012514 <xTimerGenericCommand>
 801290a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801290c:	6a3b      	ldr	r3, [r7, #32]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d14f      	bne.n	80129b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	61bb      	str	r3, [r7, #24]
}
 8012924:	bf00      	nop
 8012926:	e7fe      	b.n	8012926 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801292e:	f023 0301 	bic.w	r3, r3, #1
 8012932:	b2da      	uxtb	r2, r3
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801293a:	e03a      	b.n	80129b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012942:	f043 0301 	orr.w	r3, r3, #1
 8012946:	b2da      	uxtb	r2, r3
 8012948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801294a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801294e:	68ba      	ldr	r2, [r7, #8]
 8012950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012952:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012956:	699b      	ldr	r3, [r3, #24]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10a      	bne.n	8012972 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012960:	f383 8811 	msr	BASEPRI, r3
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	f3bf 8f4f 	dsb	sy
 801296c:	617b      	str	r3, [r7, #20]
}
 801296e:	bf00      	nop
 8012970:	e7fe      	b.n	8012970 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012974:	699a      	ldr	r2, [r3, #24]
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	18d1      	adds	r1, r2, r3
 801297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012980:	f7ff ff06 	bl	8012790 <prvInsertTimerInActiveList>
					break;
 8012984:	e015      	b.n	80129b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801298c:	f003 0302 	and.w	r3, r3, #2
 8012990:	2b00      	cmp	r3, #0
 8012992:	d103      	bne.n	801299c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012996:	f000 fbdb 	bl	8013150 <vPortFree>
 801299a:	e00a      	b.n	80129b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80129a2:	f023 0301 	bic.w	r3, r3, #1
 80129a6:	b2da      	uxtb	r2, r3
 80129a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80129ae:	e000      	b.n	80129b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80129b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80129b2:	4b08      	ldr	r3, [pc, #32]	; (80129d4 <prvProcessReceivedCommands+0x1c0>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	1d39      	adds	r1, r7, #4
 80129b8:	2200      	movs	r2, #0
 80129ba:	4618      	mov	r0, r3
 80129bc:	f7fe f8da 	bl	8010b74 <xQueueReceive>
 80129c0:	4603      	mov	r3, r0
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	f47f af2a 	bne.w	801281c <prvProcessReceivedCommands+0x8>
	}
}
 80129c8:	bf00      	nop
 80129ca:	bf00      	nop
 80129cc:	3730      	adds	r7, #48	; 0x30
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	24005cfc 	.word	0x24005cfc

080129d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80129de:	e048      	b.n	8012a72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80129e0:	4b2d      	ldr	r3, [pc, #180]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	68db      	ldr	r3, [r3, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ea:	4b2b      	ldr	r3, [pc, #172]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	3304      	adds	r3, #4
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7fd fc0d 	bl	8010218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	6a1b      	ldr	r3, [r3, #32]
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a0c:	f003 0304 	and.w	r3, r3, #4
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d02e      	beq.n	8012a72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	699b      	ldr	r3, [r3, #24]
 8012a18:	693a      	ldr	r2, [r7, #16]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012a1e:	68ba      	ldr	r2, [r7, #8]
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d90e      	bls.n	8012a44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	68ba      	ldr	r2, [r7, #8]
 8012a2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012a32:	4b19      	ldr	r3, [pc, #100]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	f7fd fbb2 	bl	80101a6 <vListInsert>
 8012a42:	e016      	b.n	8012a72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012a44:	2300      	movs	r3, #0
 8012a46:	9300      	str	r3, [sp, #0]
 8012a48:	2300      	movs	r3, #0
 8012a4a:	693a      	ldr	r2, [r7, #16]
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	68f8      	ldr	r0, [r7, #12]
 8012a50:	f7ff fd60 	bl	8012514 <xTimerGenericCommand>
 8012a54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d10a      	bne.n	8012a72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a60:	f383 8811 	msr	BASEPRI, r3
 8012a64:	f3bf 8f6f 	isb	sy
 8012a68:	f3bf 8f4f 	dsb	sy
 8012a6c:	603b      	str	r3, [r7, #0]
}
 8012a6e:	bf00      	nop
 8012a70:	e7fe      	b.n	8012a70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012a72:	4b09      	ldr	r3, [pc, #36]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1b1      	bne.n	80129e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012a7c:	4b06      	ldr	r3, [pc, #24]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012a82:	4b06      	ldr	r3, [pc, #24]	; (8012a9c <prvSwitchTimerLists+0xc4>)
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4a04      	ldr	r2, [pc, #16]	; (8012a98 <prvSwitchTimerLists+0xc0>)
 8012a88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012a8a:	4a04      	ldr	r2, [pc, #16]	; (8012a9c <prvSwitchTimerLists+0xc4>)
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	6013      	str	r3, [r2, #0]
}
 8012a90:	bf00      	nop
 8012a92:	3718      	adds	r7, #24
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	24005cf4 	.word	0x24005cf4
 8012a9c:	24005cf8 	.word	0x24005cf8

08012aa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012aa6:	f000 f965 	bl	8012d74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012aaa:	4b15      	ldr	r3, [pc, #84]	; (8012b00 <prvCheckForValidListAndQueue+0x60>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d120      	bne.n	8012af4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012ab2:	4814      	ldr	r0, [pc, #80]	; (8012b04 <prvCheckForValidListAndQueue+0x64>)
 8012ab4:	f7fd fb26 	bl	8010104 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012ab8:	4813      	ldr	r0, [pc, #76]	; (8012b08 <prvCheckForValidListAndQueue+0x68>)
 8012aba:	f7fd fb23 	bl	8010104 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012abe:	4b13      	ldr	r3, [pc, #76]	; (8012b0c <prvCheckForValidListAndQueue+0x6c>)
 8012ac0:	4a10      	ldr	r2, [pc, #64]	; (8012b04 <prvCheckForValidListAndQueue+0x64>)
 8012ac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012ac4:	4b12      	ldr	r3, [pc, #72]	; (8012b10 <prvCheckForValidListAndQueue+0x70>)
 8012ac6:	4a10      	ldr	r2, [pc, #64]	; (8012b08 <prvCheckForValidListAndQueue+0x68>)
 8012ac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012aca:	2300      	movs	r3, #0
 8012acc:	9300      	str	r3, [sp, #0]
 8012ace:	4b11      	ldr	r3, [pc, #68]	; (8012b14 <prvCheckForValidListAndQueue+0x74>)
 8012ad0:	4a11      	ldr	r2, [pc, #68]	; (8012b18 <prvCheckForValidListAndQueue+0x78>)
 8012ad2:	2110      	movs	r1, #16
 8012ad4:	200a      	movs	r0, #10
 8012ad6:	f7fd fc31 	bl	801033c <xQueueGenericCreateStatic>
 8012ada:	4603      	mov	r3, r0
 8012adc:	4a08      	ldr	r2, [pc, #32]	; (8012b00 <prvCheckForValidListAndQueue+0x60>)
 8012ade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012ae0:	4b07      	ldr	r3, [pc, #28]	; (8012b00 <prvCheckForValidListAndQueue+0x60>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d005      	beq.n	8012af4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012ae8:	4b05      	ldr	r3, [pc, #20]	; (8012b00 <prvCheckForValidListAndQueue+0x60>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	490b      	ldr	r1, [pc, #44]	; (8012b1c <prvCheckForValidListAndQueue+0x7c>)
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fe fbf8 	bl	80112e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012af4:	f000 f96e 	bl	8012dd4 <vPortExitCritical>
}
 8012af8:	bf00      	nop
 8012afa:	46bd      	mov	sp, r7
 8012afc:	bd80      	pop	{r7, pc}
 8012afe:	bf00      	nop
 8012b00:	24005cfc 	.word	0x24005cfc
 8012b04:	24005ccc 	.word	0x24005ccc
 8012b08:	24005ce0 	.word	0x24005ce0
 8012b0c:	24005cf4 	.word	0x24005cf4
 8012b10:	24005cf8 	.word	0x24005cf8
 8012b14:	24005da8 	.word	0x24005da8
 8012b18:	24005d08 	.word	0x24005d08
 8012b1c:	080216a4 	.word	0x080216a4

08012b20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012b20:	b480      	push	{r7}
 8012b22:	b085      	sub	sp, #20
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	3b04      	subs	r3, #4
 8012b30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	3b04      	subs	r3, #4
 8012b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	f023 0201 	bic.w	r2, r3, #1
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	3b04      	subs	r3, #4
 8012b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012b50:	4a0c      	ldr	r2, [pc, #48]	; (8012b84 <pxPortInitialiseStack+0x64>)
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	3b14      	subs	r3, #20
 8012b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012b5c:	687a      	ldr	r2, [r7, #4]
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	3b04      	subs	r3, #4
 8012b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f06f 0202 	mvn.w	r2, #2
 8012b6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	3b20      	subs	r3, #32
 8012b74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012b76:	68fb      	ldr	r3, [r7, #12]
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr
 8012b84:	08012b89 	.word	0x08012b89

08012b88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b085      	sub	sp, #20
 8012b8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012b8e:	2300      	movs	r3, #0
 8012b90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012b92:	4b12      	ldr	r3, [pc, #72]	; (8012bdc <prvTaskExitError+0x54>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b9a:	d00a      	beq.n	8012bb2 <prvTaskExitError+0x2a>
	__asm volatile
 8012b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba0:	f383 8811 	msr	BASEPRI, r3
 8012ba4:	f3bf 8f6f 	isb	sy
 8012ba8:	f3bf 8f4f 	dsb	sy
 8012bac:	60fb      	str	r3, [r7, #12]
}
 8012bae:	bf00      	nop
 8012bb0:	e7fe      	b.n	8012bb0 <prvTaskExitError+0x28>
	__asm volatile
 8012bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb6:	f383 8811 	msr	BASEPRI, r3
 8012bba:	f3bf 8f6f 	isb	sy
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	60bb      	str	r3, [r7, #8]
}
 8012bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012bc6:	bf00      	nop
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d0fc      	beq.n	8012bc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012bce:	bf00      	nop
 8012bd0:	bf00      	nop
 8012bd2:	3714      	adds	r7, #20
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	240000b0 	.word	0x240000b0

08012be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012be0:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <pxCurrentTCBConst2>)
 8012be2:	6819      	ldr	r1, [r3, #0]
 8012be4:	6808      	ldr	r0, [r1, #0]
 8012be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bea:	f380 8809 	msr	PSP, r0
 8012bee:	f3bf 8f6f 	isb	sy
 8012bf2:	f04f 0000 	mov.w	r0, #0
 8012bf6:	f380 8811 	msr	BASEPRI, r0
 8012bfa:	4770      	bx	lr
 8012bfc:	f3af 8000 	nop.w

08012c00 <pxCurrentTCBConst2>:
 8012c00:	240057cc 	.word	0x240057cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012c04:	bf00      	nop
 8012c06:	bf00      	nop

08012c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012c08:	4808      	ldr	r0, [pc, #32]	; (8012c2c <prvPortStartFirstTask+0x24>)
 8012c0a:	6800      	ldr	r0, [r0, #0]
 8012c0c:	6800      	ldr	r0, [r0, #0]
 8012c0e:	f380 8808 	msr	MSP, r0
 8012c12:	f04f 0000 	mov.w	r0, #0
 8012c16:	f380 8814 	msr	CONTROL, r0
 8012c1a:	b662      	cpsie	i
 8012c1c:	b661      	cpsie	f
 8012c1e:	f3bf 8f4f 	dsb	sy
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	df00      	svc	0
 8012c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012c2a:	bf00      	nop
 8012c2c:	e000ed08 	.word	0xe000ed08

08012c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b086      	sub	sp, #24
 8012c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012c36:	4b46      	ldr	r3, [pc, #280]	; (8012d50 <xPortStartScheduler+0x120>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	4a46      	ldr	r2, [pc, #280]	; (8012d54 <xPortStartScheduler+0x124>)
 8012c3c:	4293      	cmp	r3, r2
 8012c3e:	d10a      	bne.n	8012c56 <xPortStartScheduler+0x26>
	__asm volatile
 8012c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	613b      	str	r3, [r7, #16]
}
 8012c52:	bf00      	nop
 8012c54:	e7fe      	b.n	8012c54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012c56:	4b3e      	ldr	r3, [pc, #248]	; (8012d50 <xPortStartScheduler+0x120>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a3f      	ldr	r2, [pc, #252]	; (8012d58 <xPortStartScheduler+0x128>)
 8012c5c:	4293      	cmp	r3, r2
 8012c5e:	d10a      	bne.n	8012c76 <xPortStartScheduler+0x46>
	__asm volatile
 8012c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c64:	f383 8811 	msr	BASEPRI, r3
 8012c68:	f3bf 8f6f 	isb	sy
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	60fb      	str	r3, [r7, #12]
}
 8012c72:	bf00      	nop
 8012c74:	e7fe      	b.n	8012c74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012c76:	4b39      	ldr	r3, [pc, #228]	; (8012d5c <xPortStartScheduler+0x12c>)
 8012c78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	781b      	ldrb	r3, [r3, #0]
 8012c7e:	b2db      	uxtb	r3, r3
 8012c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012c82:	697b      	ldr	r3, [r7, #20]
 8012c84:	22ff      	movs	r2, #255	; 0xff
 8012c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	781b      	ldrb	r3, [r3, #0]
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012c90:	78fb      	ldrb	r3, [r7, #3]
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012c98:	b2da      	uxtb	r2, r3
 8012c9a:	4b31      	ldr	r3, [pc, #196]	; (8012d60 <xPortStartScheduler+0x130>)
 8012c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012c9e:	4b31      	ldr	r3, [pc, #196]	; (8012d64 <xPortStartScheduler+0x134>)
 8012ca0:	2207      	movs	r2, #7
 8012ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ca4:	e009      	b.n	8012cba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012ca6:	4b2f      	ldr	r3, [pc, #188]	; (8012d64 <xPortStartScheduler+0x134>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	3b01      	subs	r3, #1
 8012cac:	4a2d      	ldr	r2, [pc, #180]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012cb0:	78fb      	ldrb	r3, [r7, #3]
 8012cb2:	b2db      	uxtb	r3, r3
 8012cb4:	005b      	lsls	r3, r3, #1
 8012cb6:	b2db      	uxtb	r3, r3
 8012cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012cba:	78fb      	ldrb	r3, [r7, #3]
 8012cbc:	b2db      	uxtb	r3, r3
 8012cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012cc2:	2b80      	cmp	r3, #128	; 0x80
 8012cc4:	d0ef      	beq.n	8012ca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012cc6:	4b27      	ldr	r3, [pc, #156]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	f1c3 0307 	rsb	r3, r3, #7
 8012cce:	2b04      	cmp	r3, #4
 8012cd0:	d00a      	beq.n	8012ce8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cd6:	f383 8811 	msr	BASEPRI, r3
 8012cda:	f3bf 8f6f 	isb	sy
 8012cde:	f3bf 8f4f 	dsb	sy
 8012ce2:	60bb      	str	r3, [r7, #8]
}
 8012ce4:	bf00      	nop
 8012ce6:	e7fe      	b.n	8012ce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012ce8:	4b1e      	ldr	r3, [pc, #120]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	021b      	lsls	r3, r3, #8
 8012cee:	4a1d      	ldr	r2, [pc, #116]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012cf2:	4b1c      	ldr	r3, [pc, #112]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012cfa:	4a1a      	ldr	r2, [pc, #104]	; (8012d64 <xPortStartScheduler+0x134>)
 8012cfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	b2da      	uxtb	r2, r3
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d06:	4b18      	ldr	r3, [pc, #96]	; (8012d68 <xPortStartScheduler+0x138>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	4a17      	ldr	r2, [pc, #92]	; (8012d68 <xPortStartScheduler+0x138>)
 8012d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d12:	4b15      	ldr	r3, [pc, #84]	; (8012d68 <xPortStartScheduler+0x138>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a14      	ldr	r2, [pc, #80]	; (8012d68 <xPortStartScheduler+0x138>)
 8012d18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d1e:	f000 f8dd 	bl	8012edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d22:	4b12      	ldr	r3, [pc, #72]	; (8012d6c <xPortStartScheduler+0x13c>)
 8012d24:	2200      	movs	r2, #0
 8012d26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d28:	f000 f8fc 	bl	8012f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d2c:	4b10      	ldr	r3, [pc, #64]	; (8012d70 <xPortStartScheduler+0x140>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	4a0f      	ldr	r2, [pc, #60]	; (8012d70 <xPortStartScheduler+0x140>)
 8012d32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012d36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012d38:	f7ff ff66 	bl	8012c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012d3c:	f7fe ff3e 	bl	8011bbc <vTaskSwitchContext>
	prvTaskExitError();
 8012d40:	f7ff ff22 	bl	8012b88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012d44:	2300      	movs	r3, #0
}
 8012d46:	4618      	mov	r0, r3
 8012d48:	3718      	adds	r7, #24
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	bd80      	pop	{r7, pc}
 8012d4e:	bf00      	nop
 8012d50:	e000ed00 	.word	0xe000ed00
 8012d54:	410fc271 	.word	0x410fc271
 8012d58:	410fc270 	.word	0x410fc270
 8012d5c:	e000e400 	.word	0xe000e400
 8012d60:	24005df8 	.word	0x24005df8
 8012d64:	24005dfc 	.word	0x24005dfc
 8012d68:	e000ed20 	.word	0xe000ed20
 8012d6c:	240000b0 	.word	0x240000b0
 8012d70:	e000ef34 	.word	0xe000ef34

08012d74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012d74:	b480      	push	{r7}
 8012d76:	b083      	sub	sp, #12
 8012d78:	af00      	add	r7, sp, #0
	__asm volatile
 8012d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d7e:	f383 8811 	msr	BASEPRI, r3
 8012d82:	f3bf 8f6f 	isb	sy
 8012d86:	f3bf 8f4f 	dsb	sy
 8012d8a:	607b      	str	r3, [r7, #4]
}
 8012d8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012d8e:	4b0f      	ldr	r3, [pc, #60]	; (8012dcc <vPortEnterCritical+0x58>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	3301      	adds	r3, #1
 8012d94:	4a0d      	ldr	r2, [pc, #52]	; (8012dcc <vPortEnterCritical+0x58>)
 8012d96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012d98:	4b0c      	ldr	r3, [pc, #48]	; (8012dcc <vPortEnterCritical+0x58>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d10f      	bne.n	8012dc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012da0:	4b0b      	ldr	r3, [pc, #44]	; (8012dd0 <vPortEnterCritical+0x5c>)
 8012da2:	681b      	ldr	r3, [r3, #0]
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00a      	beq.n	8012dc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dae:	f383 8811 	msr	BASEPRI, r3
 8012db2:	f3bf 8f6f 	isb	sy
 8012db6:	f3bf 8f4f 	dsb	sy
 8012dba:	603b      	str	r3, [r7, #0]
}
 8012dbc:	bf00      	nop
 8012dbe:	e7fe      	b.n	8012dbe <vPortEnterCritical+0x4a>
	}
}
 8012dc0:	bf00      	nop
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr
 8012dcc:	240000b0 	.word	0x240000b0
 8012dd0:	e000ed04 	.word	0xe000ed04

08012dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012dda:	4b12      	ldr	r3, [pc, #72]	; (8012e24 <vPortExitCritical+0x50>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d10a      	bne.n	8012df8 <vPortExitCritical+0x24>
	__asm volatile
 8012de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de6:	f383 8811 	msr	BASEPRI, r3
 8012dea:	f3bf 8f6f 	isb	sy
 8012dee:	f3bf 8f4f 	dsb	sy
 8012df2:	607b      	str	r3, [r7, #4]
}
 8012df4:	bf00      	nop
 8012df6:	e7fe      	b.n	8012df6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012df8:	4b0a      	ldr	r3, [pc, #40]	; (8012e24 <vPortExitCritical+0x50>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	4a09      	ldr	r2, [pc, #36]	; (8012e24 <vPortExitCritical+0x50>)
 8012e00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e02:	4b08      	ldr	r3, [pc, #32]	; (8012e24 <vPortExitCritical+0x50>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d105      	bne.n	8012e16 <vPortExitCritical+0x42>
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	f383 8811 	msr	BASEPRI, r3
}
 8012e14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e16:	bf00      	nop
 8012e18:	370c      	adds	r7, #12
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e20:	4770      	bx	lr
 8012e22:	bf00      	nop
 8012e24:	240000b0 	.word	0x240000b0
	...

08012e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e30:	f3ef 8009 	mrs	r0, PSP
 8012e34:	f3bf 8f6f 	isb	sy
 8012e38:	4b15      	ldr	r3, [pc, #84]	; (8012e90 <pxCurrentTCBConst>)
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	f01e 0f10 	tst.w	lr, #16
 8012e40:	bf08      	it	eq
 8012e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4a:	6010      	str	r0, [r2, #0]
 8012e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012e54:	f380 8811 	msr	BASEPRI, r0
 8012e58:	f3bf 8f4f 	dsb	sy
 8012e5c:	f3bf 8f6f 	isb	sy
 8012e60:	f7fe feac 	bl	8011bbc <vTaskSwitchContext>
 8012e64:	f04f 0000 	mov.w	r0, #0
 8012e68:	f380 8811 	msr	BASEPRI, r0
 8012e6c:	bc09      	pop	{r0, r3}
 8012e6e:	6819      	ldr	r1, [r3, #0]
 8012e70:	6808      	ldr	r0, [r1, #0]
 8012e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e76:	f01e 0f10 	tst.w	lr, #16
 8012e7a:	bf08      	it	eq
 8012e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012e80:	f380 8809 	msr	PSP, r0
 8012e84:	f3bf 8f6f 	isb	sy
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop
 8012e8c:	f3af 8000 	nop.w

08012e90 <pxCurrentTCBConst>:
 8012e90:	240057cc 	.word	0x240057cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012e94:	bf00      	nop
 8012e96:	bf00      	nop

08012e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8012e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea2:	f383 8811 	msr	BASEPRI, r3
 8012ea6:	f3bf 8f6f 	isb	sy
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	607b      	str	r3, [r7, #4]
}
 8012eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012eb2:	f7fe fdc9 	bl	8011a48 <xTaskIncrementTick>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d003      	beq.n	8012ec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012ebc:	4b06      	ldr	r3, [pc, #24]	; (8012ed8 <xPortSysTickHandler+0x40>)
 8012ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ec2:	601a      	str	r2, [r3, #0]
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	f383 8811 	msr	BASEPRI, r3
}
 8012ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012ed0:	bf00      	nop
 8012ed2:	3708      	adds	r7, #8
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}
 8012ed8:	e000ed04 	.word	0xe000ed04

08012edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012edc:	b480      	push	{r7}
 8012ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012ee0:	4b0b      	ldr	r3, [pc, #44]	; (8012f10 <vPortSetupTimerInterrupt+0x34>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012ee6:	4b0b      	ldr	r3, [pc, #44]	; (8012f14 <vPortSetupTimerInterrupt+0x38>)
 8012ee8:	2200      	movs	r2, #0
 8012eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012eec:	4b0a      	ldr	r3, [pc, #40]	; (8012f18 <vPortSetupTimerInterrupt+0x3c>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a0a      	ldr	r2, [pc, #40]	; (8012f1c <vPortSetupTimerInterrupt+0x40>)
 8012ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8012ef6:	099b      	lsrs	r3, r3, #6
 8012ef8:	4a09      	ldr	r2, [pc, #36]	; (8012f20 <vPortSetupTimerInterrupt+0x44>)
 8012efa:	3b01      	subs	r3, #1
 8012efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012efe:	4b04      	ldr	r3, [pc, #16]	; (8012f10 <vPortSetupTimerInterrupt+0x34>)
 8012f00:	2207      	movs	r2, #7
 8012f02:	601a      	str	r2, [r3, #0]
}
 8012f04:	bf00      	nop
 8012f06:	46bd      	mov	sp, r7
 8012f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0c:	4770      	bx	lr
 8012f0e:	bf00      	nop
 8012f10:	e000e010 	.word	0xe000e010
 8012f14:	e000e018 	.word	0xe000e018
 8012f18:	24000000 	.word	0x24000000
 8012f1c:	10624dd3 	.word	0x10624dd3
 8012f20:	e000e014 	.word	0xe000e014

08012f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f34 <vPortEnableVFP+0x10>
 8012f28:	6801      	ldr	r1, [r0, #0]
 8012f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f2e:	6001      	str	r1, [r0, #0]
 8012f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f32:	bf00      	nop
 8012f34:	e000ed88 	.word	0xe000ed88

08012f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f38:	b480      	push	{r7}
 8012f3a:	b085      	sub	sp, #20
 8012f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f3e:	f3ef 8305 	mrs	r3, IPSR
 8012f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	2b0f      	cmp	r3, #15
 8012f48:	d914      	bls.n	8012f74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012f4a:	4a17      	ldr	r2, [pc, #92]	; (8012fa8 <vPortValidateInterruptPriority+0x70>)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	4413      	add	r3, r2
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012f54:	4b15      	ldr	r3, [pc, #84]	; (8012fac <vPortValidateInterruptPriority+0x74>)
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	7afa      	ldrb	r2, [r7, #11]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d20a      	bcs.n	8012f74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	607b      	str	r3, [r7, #4]
}
 8012f70:	bf00      	nop
 8012f72:	e7fe      	b.n	8012f72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012f74:	4b0e      	ldr	r3, [pc, #56]	; (8012fb0 <vPortValidateInterruptPriority+0x78>)
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012f7c:	4b0d      	ldr	r3, [pc, #52]	; (8012fb4 <vPortValidateInterruptPriority+0x7c>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d90a      	bls.n	8012f9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	603b      	str	r3, [r7, #0]
}
 8012f96:	bf00      	nop
 8012f98:	e7fe      	b.n	8012f98 <vPortValidateInterruptPriority+0x60>
	}
 8012f9a:	bf00      	nop
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	4770      	bx	lr
 8012fa6:	bf00      	nop
 8012fa8:	e000e3f0 	.word	0xe000e3f0
 8012fac:	24005df8 	.word	0x24005df8
 8012fb0:	e000ed0c 	.word	0xe000ed0c
 8012fb4:	24005dfc 	.word	0x24005dfc

08012fb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b08a      	sub	sp, #40	; 0x28
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012fc4:	f7fe fc72 	bl	80118ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012fc8:	4b5b      	ldr	r3, [pc, #364]	; (8013138 <pvPortMalloc+0x180>)
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d101      	bne.n	8012fd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012fd0:	f000 f920 	bl	8013214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012fd4:	4b59      	ldr	r3, [pc, #356]	; (801313c <pvPortMalloc+0x184>)
 8012fd6:	681a      	ldr	r2, [r3, #0]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4013      	ands	r3, r2
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	f040 8093 	bne.w	8013108 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d01d      	beq.n	8013024 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012fe8:	2208      	movs	r2, #8
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	4413      	add	r3, r2
 8012fee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f003 0307 	and.w	r3, r3, #7
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d014      	beq.n	8013024 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f023 0307 	bic.w	r3, r3, #7
 8013000:	3308      	adds	r3, #8
 8013002:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f003 0307 	and.w	r3, r3, #7
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00a      	beq.n	8013024 <pvPortMalloc+0x6c>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	f383 8811 	msr	BASEPRI, r3
 8013016:	f3bf 8f6f 	isb	sy
 801301a:	f3bf 8f4f 	dsb	sy
 801301e:	617b      	str	r3, [r7, #20]
}
 8013020:	bf00      	nop
 8013022:	e7fe      	b.n	8013022 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d06e      	beq.n	8013108 <pvPortMalloc+0x150>
 801302a:	4b45      	ldr	r3, [pc, #276]	; (8013140 <pvPortMalloc+0x188>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	429a      	cmp	r2, r3
 8013032:	d869      	bhi.n	8013108 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013034:	4b43      	ldr	r3, [pc, #268]	; (8013144 <pvPortMalloc+0x18c>)
 8013036:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013038:	4b42      	ldr	r3, [pc, #264]	; (8013144 <pvPortMalloc+0x18c>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801303e:	e004      	b.n	801304a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013042:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	687a      	ldr	r2, [r7, #4]
 8013050:	429a      	cmp	r2, r3
 8013052:	d903      	bls.n	801305c <pvPortMalloc+0xa4>
 8013054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d1f1      	bne.n	8013040 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801305c:	4b36      	ldr	r3, [pc, #216]	; (8013138 <pvPortMalloc+0x180>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013062:	429a      	cmp	r2, r3
 8013064:	d050      	beq.n	8013108 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013066:	6a3b      	ldr	r3, [r7, #32]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	2208      	movs	r2, #8
 801306c:	4413      	add	r3, r2
 801306e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	6a3b      	ldr	r3, [r7, #32]
 8013076:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307a:	685a      	ldr	r2, [r3, #4]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	1ad2      	subs	r2, r2, r3
 8013080:	2308      	movs	r3, #8
 8013082:	005b      	lsls	r3, r3, #1
 8013084:	429a      	cmp	r2, r3
 8013086:	d91f      	bls.n	80130c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	4413      	add	r3, r2
 801308e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	f003 0307 	and.w	r3, r3, #7
 8013096:	2b00      	cmp	r3, #0
 8013098:	d00a      	beq.n	80130b0 <pvPortMalloc+0xf8>
	__asm volatile
 801309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309e:	f383 8811 	msr	BASEPRI, r3
 80130a2:	f3bf 8f6f 	isb	sy
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	613b      	str	r3, [r7, #16]
}
 80130ac:	bf00      	nop
 80130ae:	e7fe      	b.n	80130ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80130b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b2:	685a      	ldr	r2, [r3, #4]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	1ad2      	subs	r2, r2, r3
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80130bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130be:	687a      	ldr	r2, [r7, #4]
 80130c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80130c2:	69b8      	ldr	r0, [r7, #24]
 80130c4:	f000 f908 	bl	80132d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80130c8:	4b1d      	ldr	r3, [pc, #116]	; (8013140 <pvPortMalloc+0x188>)
 80130ca:	681a      	ldr	r2, [r3, #0]
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	685b      	ldr	r3, [r3, #4]
 80130d0:	1ad3      	subs	r3, r2, r3
 80130d2:	4a1b      	ldr	r2, [pc, #108]	; (8013140 <pvPortMalloc+0x188>)
 80130d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80130d6:	4b1a      	ldr	r3, [pc, #104]	; (8013140 <pvPortMalloc+0x188>)
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	4b1b      	ldr	r3, [pc, #108]	; (8013148 <pvPortMalloc+0x190>)
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d203      	bcs.n	80130ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80130e2:	4b17      	ldr	r3, [pc, #92]	; (8013140 <pvPortMalloc+0x188>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	4a18      	ldr	r2, [pc, #96]	; (8013148 <pvPortMalloc+0x190>)
 80130e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	685a      	ldr	r2, [r3, #4]
 80130ee:	4b13      	ldr	r3, [pc, #76]	; (801313c <pvPortMalloc+0x184>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	431a      	orrs	r2, r3
 80130f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80130f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fa:	2200      	movs	r2, #0
 80130fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80130fe:	4b13      	ldr	r3, [pc, #76]	; (801314c <pvPortMalloc+0x194>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	3301      	adds	r3, #1
 8013104:	4a11      	ldr	r2, [pc, #68]	; (801314c <pvPortMalloc+0x194>)
 8013106:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013108:	f7fe fbde 	bl	80118c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	f003 0307 	and.w	r3, r3, #7
 8013112:	2b00      	cmp	r3, #0
 8013114:	d00a      	beq.n	801312c <pvPortMalloc+0x174>
	__asm volatile
 8013116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801311a:	f383 8811 	msr	BASEPRI, r3
 801311e:	f3bf 8f6f 	isb	sy
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	60fb      	str	r3, [r7, #12]
}
 8013128:	bf00      	nop
 801312a:	e7fe      	b.n	801312a <pvPortMalloc+0x172>
	return pvReturn;
 801312c:	69fb      	ldr	r3, [r7, #28]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3728      	adds	r7, #40	; 0x28
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	24009a08 	.word	0x24009a08
 801313c:	24009a1c 	.word	0x24009a1c
 8013140:	24009a0c 	.word	0x24009a0c
 8013144:	24009a00 	.word	0x24009a00
 8013148:	24009a10 	.word	0x24009a10
 801314c:	24009a14 	.word	0x24009a14

08013150 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d04d      	beq.n	80131fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013162:	2308      	movs	r3, #8
 8013164:	425b      	negs	r3, r3
 8013166:	697a      	ldr	r2, [r7, #20]
 8013168:	4413      	add	r3, r2
 801316a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013170:	693b      	ldr	r3, [r7, #16]
 8013172:	685a      	ldr	r2, [r3, #4]
 8013174:	4b24      	ldr	r3, [pc, #144]	; (8013208 <vPortFree+0xb8>)
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	4013      	ands	r3, r2
 801317a:	2b00      	cmp	r3, #0
 801317c:	d10a      	bne.n	8013194 <vPortFree+0x44>
	__asm volatile
 801317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013182:	f383 8811 	msr	BASEPRI, r3
 8013186:	f3bf 8f6f 	isb	sy
 801318a:	f3bf 8f4f 	dsb	sy
 801318e:	60fb      	str	r3, [r7, #12]
}
 8013190:	bf00      	nop
 8013192:	e7fe      	b.n	8013192 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00a      	beq.n	80131b2 <vPortFree+0x62>
	__asm volatile
 801319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a0:	f383 8811 	msr	BASEPRI, r3
 80131a4:	f3bf 8f6f 	isb	sy
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	60bb      	str	r3, [r7, #8]
}
 80131ae:	bf00      	nop
 80131b0:	e7fe      	b.n	80131b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80131b2:	693b      	ldr	r3, [r7, #16]
 80131b4:	685a      	ldr	r2, [r3, #4]
 80131b6:	4b14      	ldr	r3, [pc, #80]	; (8013208 <vPortFree+0xb8>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	4013      	ands	r3, r2
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d01e      	beq.n	80131fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d11a      	bne.n	80131fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	685a      	ldr	r2, [r3, #4]
 80131cc:	4b0e      	ldr	r3, [pc, #56]	; (8013208 <vPortFree+0xb8>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	43db      	mvns	r3, r3
 80131d2:	401a      	ands	r2, r3
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80131d8:	f7fe fb68 	bl	80118ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	685a      	ldr	r2, [r3, #4]
 80131e0:	4b0a      	ldr	r3, [pc, #40]	; (801320c <vPortFree+0xbc>)
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	4413      	add	r3, r2
 80131e6:	4a09      	ldr	r2, [pc, #36]	; (801320c <vPortFree+0xbc>)
 80131e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80131ea:	6938      	ldr	r0, [r7, #16]
 80131ec:	f000 f874 	bl	80132d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80131f0:	4b07      	ldr	r3, [pc, #28]	; (8013210 <vPortFree+0xc0>)
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	3301      	adds	r3, #1
 80131f6:	4a06      	ldr	r2, [pc, #24]	; (8013210 <vPortFree+0xc0>)
 80131f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80131fa:	f7fe fb65 	bl	80118c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80131fe:	bf00      	nop
 8013200:	3718      	adds	r7, #24
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	24009a1c 	.word	0x24009a1c
 801320c:	24009a0c 	.word	0x24009a0c
 8013210:	24009a18 	.word	0x24009a18

08013214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013214:	b480      	push	{r7}
 8013216:	b085      	sub	sp, #20
 8013218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801321a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801321e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013220:	4b27      	ldr	r3, [pc, #156]	; (80132c0 <prvHeapInit+0xac>)
 8013222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f003 0307 	and.w	r3, r3, #7
 801322a:	2b00      	cmp	r3, #0
 801322c:	d00c      	beq.n	8013248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	3307      	adds	r3, #7
 8013232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	f023 0307 	bic.w	r3, r3, #7
 801323a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801323c:	68ba      	ldr	r2, [r7, #8]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	1ad3      	subs	r3, r2, r3
 8013242:	4a1f      	ldr	r2, [pc, #124]	; (80132c0 <prvHeapInit+0xac>)
 8013244:	4413      	add	r3, r2
 8013246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801324c:	4a1d      	ldr	r2, [pc, #116]	; (80132c4 <prvHeapInit+0xb0>)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013252:	4b1c      	ldr	r3, [pc, #112]	; (80132c4 <prvHeapInit+0xb0>)
 8013254:	2200      	movs	r2, #0
 8013256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	68ba      	ldr	r2, [r7, #8]
 801325c:	4413      	add	r3, r2
 801325e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013260:	2208      	movs	r2, #8
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	1a9b      	subs	r3, r3, r2
 8013266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f023 0307 	bic.w	r3, r3, #7
 801326e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	4a15      	ldr	r2, [pc, #84]	; (80132c8 <prvHeapInit+0xb4>)
 8013274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013276:	4b14      	ldr	r3, [pc, #80]	; (80132c8 <prvHeapInit+0xb4>)
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2200      	movs	r2, #0
 801327c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801327e:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <prvHeapInit+0xb4>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	2200      	movs	r2, #0
 8013284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	1ad2      	subs	r2, r2, r3
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013294:	4b0c      	ldr	r3, [pc, #48]	; (80132c8 <prvHeapInit+0xb4>)
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	4a0a      	ldr	r2, [pc, #40]	; (80132cc <prvHeapInit+0xb8>)
 80132a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	685b      	ldr	r3, [r3, #4]
 80132a8:	4a09      	ldr	r2, [pc, #36]	; (80132d0 <prvHeapInit+0xbc>)
 80132aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80132ac:	4b09      	ldr	r3, [pc, #36]	; (80132d4 <prvHeapInit+0xc0>)
 80132ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80132b2:	601a      	str	r2, [r3, #0]
}
 80132b4:	bf00      	nop
 80132b6:	3714      	adds	r7, #20
 80132b8:	46bd      	mov	sp, r7
 80132ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132be:	4770      	bx	lr
 80132c0:	24005e00 	.word	0x24005e00
 80132c4:	24009a00 	.word	0x24009a00
 80132c8:	24009a08 	.word	0x24009a08
 80132cc:	24009a10 	.word	0x24009a10
 80132d0:	24009a0c 	.word	0x24009a0c
 80132d4:	24009a1c 	.word	0x24009a1c

080132d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80132d8:	b480      	push	{r7}
 80132da:	b085      	sub	sp, #20
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80132e0:	4b28      	ldr	r3, [pc, #160]	; (8013384 <prvInsertBlockIntoFreeList+0xac>)
 80132e2:	60fb      	str	r3, [r7, #12]
 80132e4:	e002      	b.n	80132ec <prvInsertBlockIntoFreeList+0x14>
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d8f7      	bhi.n	80132e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	68ba      	ldr	r2, [r7, #8]
 8013300:	4413      	add	r3, r2
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	429a      	cmp	r2, r3
 8013306:	d108      	bne.n	801331a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	685a      	ldr	r2, [r3, #4]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	685b      	ldr	r3, [r3, #4]
 8013310:	441a      	add	r2, r3
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	68ba      	ldr	r2, [r7, #8]
 8013324:	441a      	add	r2, r3
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	429a      	cmp	r2, r3
 801332c:	d118      	bne.n	8013360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681a      	ldr	r2, [r3, #0]
 8013332:	4b15      	ldr	r3, [pc, #84]	; (8013388 <prvInsertBlockIntoFreeList+0xb0>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	429a      	cmp	r2, r3
 8013338:	d00d      	beq.n	8013356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	685a      	ldr	r2, [r3, #4]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	685b      	ldr	r3, [r3, #4]
 8013344:	441a      	add	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681a      	ldr	r2, [r3, #0]
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	601a      	str	r2, [r3, #0]
 8013354:	e008      	b.n	8013368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013356:	4b0c      	ldr	r3, [pc, #48]	; (8013388 <prvInsertBlockIntoFreeList+0xb0>)
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	601a      	str	r2, [r3, #0]
 801335e:	e003      	b.n	8013368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	429a      	cmp	r2, r3
 801336e:	d002      	beq.n	8013376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013376:	bf00      	nop
 8013378:	3714      	adds	r7, #20
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr
 8013382:	bf00      	nop
 8013384:	24009a00 	.word	0x24009a00
 8013388:	24009a08 	.word	0x24009a08

0801338c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
 8013394:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013396:	f007 fb99 	bl	801aacc <sys_timeouts_sleeptime>
 801339a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133a2:	d10b      	bne.n	80133bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80133a4:	4813      	ldr	r0, [pc, #76]	; (80133f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80133a6:	f00c face 	bl	801f946 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80133aa:	2200      	movs	r2, #0
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f00c fa56 	bl	801f860 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80133b4:	480f      	ldr	r0, [pc, #60]	; (80133f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80133b6:	f00c fab7 	bl	801f928 <sys_mutex_lock>
    return;
 80133ba:	e018      	b.n	80133ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d102      	bne.n	80133c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80133c2:	f007 fb49 	bl	801aa58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80133c6:	e7e6      	b.n	8013396 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80133c8:	480a      	ldr	r0, [pc, #40]	; (80133f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80133ca:	f00c fabc 	bl	801f946 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80133ce:	68fa      	ldr	r2, [r7, #12]
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f00c fa44 	bl	801f860 <sys_arch_mbox_fetch>
 80133d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80133da:	4806      	ldr	r0, [pc, #24]	; (80133f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80133dc:	f00c faa4 	bl	801f928 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e6:	d102      	bne.n	80133ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80133e8:	f007 fb36 	bl	801aa58 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80133ec:	e7d3      	b.n	8013396 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80133ee:	3710      	adds	r7, #16
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	24009a2c 	.word	0x24009a2c

080133f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013400:	4810      	ldr	r0, [pc, #64]	; (8013444 <tcpip_thread+0x4c>)
 8013402:	f00c fa91 	bl	801f928 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013406:	4b10      	ldr	r3, [pc, #64]	; (8013448 <tcpip_thread+0x50>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d005      	beq.n	801341a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801340e:	4b0e      	ldr	r3, [pc, #56]	; (8013448 <tcpip_thread+0x50>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	4a0e      	ldr	r2, [pc, #56]	; (801344c <tcpip_thread+0x54>)
 8013414:	6812      	ldr	r2, [r2, #0]
 8013416:	4610      	mov	r0, r2
 8013418:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801341a:	f107 030c 	add.w	r3, r7, #12
 801341e:	4619      	mov	r1, r3
 8013420:	480b      	ldr	r0, [pc, #44]	; (8013450 <tcpip_thread+0x58>)
 8013422:	f7ff ffb3 	bl	801338c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d106      	bne.n	801343a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801342c:	4b09      	ldr	r3, [pc, #36]	; (8013454 <tcpip_thread+0x5c>)
 801342e:	2291      	movs	r2, #145	; 0x91
 8013430:	4909      	ldr	r1, [pc, #36]	; (8013458 <tcpip_thread+0x60>)
 8013432:	480a      	ldr	r0, [pc, #40]	; (801345c <tcpip_thread+0x64>)
 8013434:	f00d f998 	bl	8020768 <iprintf>
      continue;
 8013438:	e003      	b.n	8013442 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	4618      	mov	r0, r3
 801343e:	f000 f80f 	bl	8013460 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013442:	e7ea      	b.n	801341a <tcpip_thread+0x22>
 8013444:	24009a2c 	.word	0x24009a2c
 8013448:	24009a20 	.word	0x24009a20
 801344c:	24009a24 	.word	0x24009a24
 8013450:	24009a28 	.word	0x24009a28
 8013454:	080216ac 	.word	0x080216ac
 8013458:	080216dc 	.word	0x080216dc
 801345c:	080216fc 	.word	0x080216fc

08013460 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	2b02      	cmp	r3, #2
 801346e:	d026      	beq.n	80134be <tcpip_thread_handle_msg+0x5e>
 8013470:	2b02      	cmp	r3, #2
 8013472:	dc2b      	bgt.n	80134cc <tcpip_thread_handle_msg+0x6c>
 8013474:	2b00      	cmp	r3, #0
 8013476:	d002      	beq.n	801347e <tcpip_thread_handle_msg+0x1e>
 8013478:	2b01      	cmp	r3, #1
 801347a:	d015      	beq.n	80134a8 <tcpip_thread_handle_msg+0x48>
 801347c:	e026      	b.n	80134cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	68db      	ldr	r3, [r3, #12]
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	6850      	ldr	r0, [r2, #4]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	6892      	ldr	r2, [r2, #8]
 801348a:	4611      	mov	r1, r2
 801348c:	4798      	blx	r3
 801348e:	4603      	mov	r3, r0
 8013490:	2b00      	cmp	r3, #0
 8013492:	d004      	beq.n	801349e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	4618      	mov	r0, r3
 801349a:	f001 fdcf 	bl	801503c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801349e:	6879      	ldr	r1, [r7, #4]
 80134a0:	2009      	movs	r0, #9
 80134a2:	f000 ff1b 	bl	80142dc <memp_free>
      break;
 80134a6:	e018      	b.n	80134da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	685b      	ldr	r3, [r3, #4]
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	6892      	ldr	r2, [r2, #8]
 80134b0:	4610      	mov	r0, r2
 80134b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80134b4:	6879      	ldr	r1, [r7, #4]
 80134b6:	2008      	movs	r0, #8
 80134b8:	f000 ff10 	bl	80142dc <memp_free>
      break;
 80134bc:	e00d      	b.n	80134da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	6892      	ldr	r2, [r2, #8]
 80134c6:	4610      	mov	r0, r2
 80134c8:	4798      	blx	r3
      break;
 80134ca:	e006      	b.n	80134da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80134cc:	4b05      	ldr	r3, [pc, #20]	; (80134e4 <tcpip_thread_handle_msg+0x84>)
 80134ce:	22cf      	movs	r2, #207	; 0xcf
 80134d0:	4905      	ldr	r1, [pc, #20]	; (80134e8 <tcpip_thread_handle_msg+0x88>)
 80134d2:	4806      	ldr	r0, [pc, #24]	; (80134ec <tcpip_thread_handle_msg+0x8c>)
 80134d4:	f00d f948 	bl	8020768 <iprintf>
      break;
 80134d8:	bf00      	nop
  }
}
 80134da:	bf00      	nop
 80134dc:	3708      	adds	r7, #8
 80134de:	46bd      	mov	sp, r7
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	080216ac 	.word	0x080216ac
 80134e8:	080216dc 	.word	0x080216dc
 80134ec:	080216fc 	.word	0x080216fc

080134f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80134fc:	481a      	ldr	r0, [pc, #104]	; (8013568 <tcpip_inpkt+0x78>)
 80134fe:	f00c f9e0 	bl	801f8c2 <sys_mbox_valid>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d105      	bne.n	8013514 <tcpip_inpkt+0x24>
 8013508:	4b18      	ldr	r3, [pc, #96]	; (801356c <tcpip_inpkt+0x7c>)
 801350a:	22fc      	movs	r2, #252	; 0xfc
 801350c:	4918      	ldr	r1, [pc, #96]	; (8013570 <tcpip_inpkt+0x80>)
 801350e:	4819      	ldr	r0, [pc, #100]	; (8013574 <tcpip_inpkt+0x84>)
 8013510:	f00d f92a 	bl	8020768 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013514:	2009      	movs	r0, #9
 8013516:	f000 fe6b 	bl	80141f0 <memp_malloc>
 801351a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d102      	bne.n	8013528 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013522:	f04f 33ff 	mov.w	r3, #4294967295
 8013526:	e01a      	b.n	801355e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	2200      	movs	r2, #0
 801352c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	68fa      	ldr	r2, [r7, #12]
 8013532:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013540:	6979      	ldr	r1, [r7, #20]
 8013542:	4809      	ldr	r0, [pc, #36]	; (8013568 <tcpip_inpkt+0x78>)
 8013544:	f00c f972 	bl	801f82c <sys_mbox_trypost>
 8013548:	4603      	mov	r3, r0
 801354a:	2b00      	cmp	r3, #0
 801354c:	d006      	beq.n	801355c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801354e:	6979      	ldr	r1, [r7, #20]
 8013550:	2009      	movs	r0, #9
 8013552:	f000 fec3 	bl	80142dc <memp_free>
    return ERR_MEM;
 8013556:	f04f 33ff 	mov.w	r3, #4294967295
 801355a:	e000      	b.n	801355e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801355c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801355e:	4618      	mov	r0, r3
 8013560:	3718      	adds	r7, #24
 8013562:	46bd      	mov	sp, r7
 8013564:	bd80      	pop	{r7, pc}
 8013566:	bf00      	nop
 8013568:	24009a28 	.word	0x24009a28
 801356c:	080216ac 	.word	0x080216ac
 8013570:	08021724 	.word	0x08021724
 8013574:	080216fc 	.word	0x080216fc

08013578 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
 8013580:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013588:	f003 0318 	and.w	r3, r3, #24
 801358c:	2b00      	cmp	r3, #0
 801358e:	d006      	beq.n	801359e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013590:	4a08      	ldr	r2, [pc, #32]	; (80135b4 <tcpip_input+0x3c>)
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ff ffab 	bl	80134f0 <tcpip_inpkt>
 801359a:	4603      	mov	r3, r0
 801359c:	e005      	b.n	80135aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801359e:	4a06      	ldr	r2, [pc, #24]	; (80135b8 <tcpip_input+0x40>)
 80135a0:	6839      	ldr	r1, [r7, #0]
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f7ff ffa4 	bl	80134f0 <tcpip_inpkt>
 80135a8:	4603      	mov	r3, r0
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	0801f64d 	.word	0x0801f64d
 80135b8:	0801e519 	.word	0x0801e519

080135bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80135c6:	4819      	ldr	r0, [pc, #100]	; (801362c <tcpip_try_callback+0x70>)
 80135c8:	f00c f97b 	bl	801f8c2 <sys_mbox_valid>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d106      	bne.n	80135e0 <tcpip_try_callback+0x24>
 80135d2:	4b17      	ldr	r3, [pc, #92]	; (8013630 <tcpip_try_callback+0x74>)
 80135d4:	f240 125d 	movw	r2, #349	; 0x15d
 80135d8:	4916      	ldr	r1, [pc, #88]	; (8013634 <tcpip_try_callback+0x78>)
 80135da:	4817      	ldr	r0, [pc, #92]	; (8013638 <tcpip_try_callback+0x7c>)
 80135dc:	f00d f8c4 	bl	8020768 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80135e0:	2008      	movs	r0, #8
 80135e2:	f000 fe05 	bl	80141f0 <memp_malloc>
 80135e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d102      	bne.n	80135f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80135ee:	f04f 33ff 	mov.w	r3, #4294967295
 80135f2:	e017      	b.n	8013624 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	2201      	movs	r2, #1
 80135f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	683a      	ldr	r2, [r7, #0]
 8013604:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013606:	68f9      	ldr	r1, [r7, #12]
 8013608:	4808      	ldr	r0, [pc, #32]	; (801362c <tcpip_try_callback+0x70>)
 801360a:	f00c f90f 	bl	801f82c <sys_mbox_trypost>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d006      	beq.n	8013622 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013614:	68f9      	ldr	r1, [r7, #12]
 8013616:	2008      	movs	r0, #8
 8013618:	f000 fe60 	bl	80142dc <memp_free>
    return ERR_MEM;
 801361c:	f04f 33ff 	mov.w	r3, #4294967295
 8013620:	e000      	b.n	8013624 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013622:	2300      	movs	r3, #0
}
 8013624:	4618      	mov	r0, r3
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	24009a28 	.word	0x24009a28
 8013630:	080216ac 	.word	0x080216ac
 8013634:	08021724 	.word	0x08021724
 8013638:	080216fc 	.word	0x080216fc

0801363c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af02      	add	r7, sp, #8
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013646:	f000 f92d 	bl	80138a4 <lwip_init>

  tcpip_init_done = initfunc;
 801364a:	4a17      	ldr	r2, [pc, #92]	; (80136a8 <tcpip_init+0x6c>)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013650:	4a16      	ldr	r2, [pc, #88]	; (80136ac <tcpip_init+0x70>)
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013656:	2106      	movs	r1, #6
 8013658:	4815      	ldr	r0, [pc, #84]	; (80136b0 <tcpip_init+0x74>)
 801365a:	f00c f8cd 	bl	801f7f8 <sys_mbox_new>
 801365e:	4603      	mov	r3, r0
 8013660:	2b00      	cmp	r3, #0
 8013662:	d006      	beq.n	8013672 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013664:	4b13      	ldr	r3, [pc, #76]	; (80136b4 <tcpip_init+0x78>)
 8013666:	f240 2261 	movw	r2, #609	; 0x261
 801366a:	4913      	ldr	r1, [pc, #76]	; (80136b8 <tcpip_init+0x7c>)
 801366c:	4813      	ldr	r0, [pc, #76]	; (80136bc <tcpip_init+0x80>)
 801366e:	f00d f87b 	bl	8020768 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013672:	4813      	ldr	r0, [pc, #76]	; (80136c0 <tcpip_init+0x84>)
 8013674:	f00c f942 	bl	801f8fc <sys_mutex_new>
 8013678:	4603      	mov	r3, r0
 801367a:	2b00      	cmp	r3, #0
 801367c:	d006      	beq.n	801368c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801367e:	4b0d      	ldr	r3, [pc, #52]	; (80136b4 <tcpip_init+0x78>)
 8013680:	f240 2265 	movw	r2, #613	; 0x265
 8013684:	490f      	ldr	r1, [pc, #60]	; (80136c4 <tcpip_init+0x88>)
 8013686:	480d      	ldr	r0, [pc, #52]	; (80136bc <tcpip_init+0x80>)
 8013688:	f00d f86e 	bl	8020768 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801368c:	2318      	movs	r3, #24
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013694:	2200      	movs	r2, #0
 8013696:	490c      	ldr	r1, [pc, #48]	; (80136c8 <tcpip_init+0x8c>)
 8013698:	480c      	ldr	r0, [pc, #48]	; (80136cc <tcpip_init+0x90>)
 801369a:	f00c f961 	bl	801f960 <sys_thread_new>
}
 801369e:	bf00      	nop
 80136a0:	3708      	adds	r7, #8
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	24009a20 	.word	0x24009a20
 80136ac:	24009a24 	.word	0x24009a24
 80136b0:	24009a28 	.word	0x24009a28
 80136b4:	080216ac 	.word	0x080216ac
 80136b8:	08021734 	.word	0x08021734
 80136bc:	080216fc 	.word	0x080216fc
 80136c0:	24009a2c 	.word	0x24009a2c
 80136c4:	08021758 	.word	0x08021758
 80136c8:	080133f9 	.word	0x080133f9
 80136cc:	0802177c 	.word	0x0802177c

080136d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b083      	sub	sp, #12
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	4603      	mov	r3, r0
 80136d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80136da:	88fb      	ldrh	r3, [r7, #6]
 80136dc:	021b      	lsls	r3, r3, #8
 80136de:	b21a      	sxth	r2, r3
 80136e0:	88fb      	ldrh	r3, [r7, #6]
 80136e2:	0a1b      	lsrs	r3, r3, #8
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	b21b      	sxth	r3, r3
 80136e8:	4313      	orrs	r3, r2
 80136ea:	b21b      	sxth	r3, r3
 80136ec:	b29b      	uxth	r3, r3
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	370c      	adds	r7, #12
 80136f2:	46bd      	mov	sp, r7
 80136f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f8:	4770      	bx	lr

080136fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80136fa:	b480      	push	{r7}
 80136fc:	b083      	sub	sp, #12
 80136fe:	af00      	add	r7, sp, #0
 8013700:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	061a      	lsls	r2, r3, #24
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	021b      	lsls	r3, r3, #8
 801370a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801370e:	431a      	orrs	r2, r3
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	0a1b      	lsrs	r3, r3, #8
 8013714:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013718:	431a      	orrs	r2, r3
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	0e1b      	lsrs	r3, r3, #24
 801371e:	4313      	orrs	r3, r2
}
 8013720:	4618      	mov	r0, r3
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr

0801372c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801372c:	b480      	push	{r7}
 801372e:	b089      	sub	sp, #36	; 0x24
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801373a:	2300      	movs	r3, #0
 801373c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801373e:	2300      	movs	r3, #0
 8013740:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013742:	69fb      	ldr	r3, [r7, #28]
 8013744:	f003 0301 	and.w	r3, r3, #1
 8013748:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d00d      	beq.n	801376c <lwip_standard_chksum+0x40>
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	dd0a      	ble.n	801376c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013756:	69fa      	ldr	r2, [r7, #28]
 8013758:	1c53      	adds	r3, r2, #1
 801375a:	61fb      	str	r3, [r7, #28]
 801375c:	f107 030e 	add.w	r3, r7, #14
 8013760:	3301      	adds	r3, #1
 8013762:	7812      	ldrb	r2, [r2, #0]
 8013764:	701a      	strb	r2, [r3, #0]
    len--;
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	3b01      	subs	r3, #1
 801376a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013770:	e00a      	b.n	8013788 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013772:	69bb      	ldr	r3, [r7, #24]
 8013774:	1c9a      	adds	r2, r3, #2
 8013776:	61ba      	str	r2, [r7, #24]
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	461a      	mov	r2, r3
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	4413      	add	r3, r2
 8013780:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	3b02      	subs	r3, #2
 8013786:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2b01      	cmp	r3, #1
 801378c:	dcf1      	bgt.n	8013772 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	2b00      	cmp	r3, #0
 8013792:	dd04      	ble.n	801379e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013794:	f107 030e 	add.w	r3, r7, #14
 8013798:	69ba      	ldr	r2, [r7, #24]
 801379a:	7812      	ldrb	r2, [r2, #0]
 801379c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 801379e:	89fb      	ldrh	r3, [r7, #14]
 80137a0:	461a      	mov	r2, r3
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	4413      	add	r3, r2
 80137a6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	0c1a      	lsrs	r2, r3, #16
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	4413      	add	r3, r2
 80137b2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	0c1a      	lsrs	r2, r3, #16
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	b29b      	uxth	r3, r3
 80137bc:	4413      	add	r3, r2
 80137be:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d007      	beq.n	80137d6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	021b      	lsls	r3, r3, #8
 80137ca:	b29a      	uxth	r2, r3
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	0a1b      	lsrs	r3, r3, #8
 80137d0:	b2db      	uxtb	r3, r3
 80137d2:	4313      	orrs	r3, r2
 80137d4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	b29b      	uxth	r3, r3
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3724      	adds	r7, #36	; 0x24
 80137de:	46bd      	mov	sp, r7
 80137e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e4:	4770      	bx	lr

080137e6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b082      	sub	sp, #8
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
 80137ee:	460b      	mov	r3, r1
 80137f0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80137f2:	887b      	ldrh	r3, [r7, #2]
 80137f4:	4619      	mov	r1, r3
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7ff ff98 	bl	801372c <lwip_standard_chksum>
 80137fc:	4603      	mov	r3, r0
 80137fe:	43db      	mvns	r3, r3
 8013800:	b29b      	uxth	r3, r3
}
 8013802:	4618      	mov	r0, r3
 8013804:	3708      	adds	r7, #8
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}

0801380a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801380a:	b580      	push	{r7, lr}
 801380c:	b086      	sub	sp, #24
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8013812:	2300      	movs	r3, #0
 8013814:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	613b      	str	r3, [r7, #16]
 801381e:	e02b      	b.n	8013878 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	685a      	ldr	r2, [r3, #4]
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	895b      	ldrh	r3, [r3, #10]
 8013828:	4619      	mov	r1, r3
 801382a:	4610      	mov	r0, r2
 801382c:	f7ff ff7e 	bl	801372c <lwip_standard_chksum>
 8013830:	4603      	mov	r3, r0
 8013832:	461a      	mov	r2, r3
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	4413      	add	r3, r2
 8013838:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	0c1a      	lsrs	r2, r3, #16
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	b29b      	uxth	r3, r3
 8013842:	4413      	add	r3, r2
 8013844:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	895b      	ldrh	r3, [r3, #10]
 801384a:	f003 0301 	and.w	r3, r3, #1
 801384e:	b29b      	uxth	r3, r3
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00e      	beq.n	8013872 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	bf0c      	ite	eq
 801385a:	2301      	moveq	r3, #1
 801385c:	2300      	movne	r3, #0
 801385e:	b2db      	uxtb	r3, r3
 8013860:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	021b      	lsls	r3, r3, #8
 8013866:	b29a      	uxth	r2, r3
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	0a1b      	lsrs	r3, r3, #8
 801386c:	b2db      	uxtb	r3, r3
 801386e:	4313      	orrs	r3, r2
 8013870:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013872:	693b      	ldr	r3, [r7, #16]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	613b      	str	r3, [r7, #16]
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1d0      	bne.n	8013820 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d007      	beq.n	8013894 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013884:	697b      	ldr	r3, [r7, #20]
 8013886:	021b      	lsls	r3, r3, #8
 8013888:	b29a      	uxth	r2, r3
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	0a1b      	lsrs	r3, r3, #8
 801388e:	b2db      	uxtb	r3, r3
 8013890:	4313      	orrs	r3, r2
 8013892:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	b29b      	uxth	r3, r3
 8013898:	43db      	mvns	r3, r3
 801389a:	b29b      	uxth	r3, r3
}
 801389c:	4618      	mov	r0, r3
 801389e:	3718      	adds	r7, #24
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80138ae:	f00c f819 	bl	801f8e4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80138b2:	f000 f8d5 	bl	8013a60 <mem_init>
  memp_init();
 80138b6:	f000 fc2d 	bl	8014114 <memp_init>
  pbuf_init();
  netif_init();
 80138ba:	f000 fd39 	bl	8014330 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80138be:	f007 f93d 	bl	801ab3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80138c2:	f001 fe65 	bl	8015590 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80138c6:	f007 f87f 	bl	801a9c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80138ca:	bf00      	nop
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
	...

080138d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80138de:	4b05      	ldr	r3, [pc, #20]	; (80138f4 <ptr_to_mem+0x20>)
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	88fb      	ldrh	r3, [r7, #6]
 80138e4:	4413      	add	r3, r2
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr
 80138f2:	bf00      	nop
 80138f4:	24009a48 	.word	0x24009a48

080138f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013900:	4b05      	ldr	r3, [pc, #20]	; (8013918 <mem_to_ptr+0x20>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	687a      	ldr	r2, [r7, #4]
 8013906:	1ad3      	subs	r3, r2, r3
 8013908:	b29b      	uxth	r3, r3
}
 801390a:	4618      	mov	r0, r3
 801390c:	370c      	adds	r7, #12
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	24009a48 	.word	0x24009a48

0801391c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801391c:	b590      	push	{r4, r7, lr}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013924:	4b45      	ldr	r3, [pc, #276]	; (8013a3c <plug_holes+0x120>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	429a      	cmp	r2, r3
 801392c:	d206      	bcs.n	801393c <plug_holes+0x20>
 801392e:	4b44      	ldr	r3, [pc, #272]	; (8013a40 <plug_holes+0x124>)
 8013930:	f240 12df 	movw	r2, #479	; 0x1df
 8013934:	4943      	ldr	r1, [pc, #268]	; (8013a44 <plug_holes+0x128>)
 8013936:	4844      	ldr	r0, [pc, #272]	; (8013a48 <plug_holes+0x12c>)
 8013938:	f00c ff16 	bl	8020768 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801393c:	4b43      	ldr	r3, [pc, #268]	; (8013a4c <plug_holes+0x130>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	429a      	cmp	r2, r3
 8013944:	d306      	bcc.n	8013954 <plug_holes+0x38>
 8013946:	4b3e      	ldr	r3, [pc, #248]	; (8013a40 <plug_holes+0x124>)
 8013948:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801394c:	4940      	ldr	r1, [pc, #256]	; (8013a50 <plug_holes+0x134>)
 801394e:	483e      	ldr	r0, [pc, #248]	; (8013a48 <plug_holes+0x12c>)
 8013950:	f00c ff0a 	bl	8020768 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	791b      	ldrb	r3, [r3, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d006      	beq.n	801396a <plug_holes+0x4e>
 801395c:	4b38      	ldr	r3, [pc, #224]	; (8013a40 <plug_holes+0x124>)
 801395e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013962:	493c      	ldr	r1, [pc, #240]	; (8013a54 <plug_holes+0x138>)
 8013964:	4838      	ldr	r0, [pc, #224]	; (8013a48 <plug_holes+0x12c>)
 8013966:	f00c feff 	bl	8020768 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	881b      	ldrh	r3, [r3, #0]
 801396e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013972:	d906      	bls.n	8013982 <plug_holes+0x66>
 8013974:	4b32      	ldr	r3, [pc, #200]	; (8013a40 <plug_holes+0x124>)
 8013976:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801397a:	4937      	ldr	r1, [pc, #220]	; (8013a58 <plug_holes+0x13c>)
 801397c:	4832      	ldr	r0, [pc, #200]	; (8013a48 <plug_holes+0x12c>)
 801397e:	f00c fef3 	bl	8020768 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	f7ff ffa4 	bl	80138d4 <ptr_to_mem>
 801398c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	429a      	cmp	r2, r3
 8013994:	d024      	beq.n	80139e0 <plug_holes+0xc4>
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	791b      	ldrb	r3, [r3, #4]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d120      	bne.n	80139e0 <plug_holes+0xc4>
 801399e:	4b2b      	ldr	r3, [pc, #172]	; (8013a4c <plug_holes+0x130>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	68fa      	ldr	r2, [r7, #12]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d01b      	beq.n	80139e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80139a8:	4b2c      	ldr	r3, [pc, #176]	; (8013a5c <plug_holes+0x140>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	68fa      	ldr	r2, [r7, #12]
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d102      	bne.n	80139b8 <plug_holes+0x9c>
      lfree = mem;
 80139b2:	4a2a      	ldr	r2, [pc, #168]	; (8013a5c <plug_holes+0x140>)
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	881a      	ldrh	r2, [r3, #0]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	881b      	ldrh	r3, [r3, #0]
 80139c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80139c8:	d00a      	beq.n	80139e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	881b      	ldrh	r3, [r3, #0]
 80139ce:	4618      	mov	r0, r3
 80139d0:	f7ff ff80 	bl	80138d4 <ptr_to_mem>
 80139d4:	4604      	mov	r4, r0
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7ff ff8e 	bl	80138f8 <mem_to_ptr>
 80139dc:	4603      	mov	r3, r0
 80139de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	885b      	ldrh	r3, [r3, #2]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff ff75 	bl	80138d4 <ptr_to_mem>
 80139ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80139ec:	68ba      	ldr	r2, [r7, #8]
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d01f      	beq.n	8013a34 <plug_holes+0x118>
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	791b      	ldrb	r3, [r3, #4]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d11b      	bne.n	8013a34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80139fc:	4b17      	ldr	r3, [pc, #92]	; (8013a5c <plug_holes+0x140>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	687a      	ldr	r2, [r7, #4]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d102      	bne.n	8013a0c <plug_holes+0xf0>
      lfree = pmem;
 8013a06:	4a15      	ldr	r2, [pc, #84]	; (8013a5c <plug_holes+0x140>)
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	881a      	ldrh	r2, [r3, #0]
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	881b      	ldrh	r3, [r3, #0]
 8013a18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013a1c:	d00a      	beq.n	8013a34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7ff ff56 	bl	80138d4 <ptr_to_mem>
 8013a28:	4604      	mov	r4, r0
 8013a2a:	68b8      	ldr	r0, [r7, #8]
 8013a2c:	f7ff ff64 	bl	80138f8 <mem_to_ptr>
 8013a30:	4603      	mov	r3, r0
 8013a32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013a34:	bf00      	nop
 8013a36:	3714      	adds	r7, #20
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd90      	pop	{r4, r7, pc}
 8013a3c:	24009a48 	.word	0x24009a48
 8013a40:	0802178c 	.word	0x0802178c
 8013a44:	080217bc 	.word	0x080217bc
 8013a48:	080217d4 	.word	0x080217d4
 8013a4c:	24009a4c 	.word	0x24009a4c
 8013a50:	080217fc 	.word	0x080217fc
 8013a54:	08021818 	.word	0x08021818
 8013a58:	08021834 	.word	0x08021834
 8013a5c:	24009a54 	.word	0x24009a54

08013a60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013a66:	4b1d      	ldr	r3, [pc, #116]	; (8013adc <mem_init+0x7c>)
 8013a68:	4a1d      	ldr	r2, [pc, #116]	; (8013ae0 <mem_init+0x80>)
 8013a6a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013a6c:	4b1b      	ldr	r3, [pc, #108]	; (8013adc <mem_init+0x7c>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013a78:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2200      	movs	r2, #0
 8013a84:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8013a86:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8013a8a:	f7ff ff23 	bl	80138d4 <ptr_to_mem>
 8013a8e:	4603      	mov	r3, r0
 8013a90:	4a14      	ldr	r2, [pc, #80]	; (8013ae4 <mem_init+0x84>)
 8013a92:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013a94:	4b13      	ldr	r3, [pc, #76]	; (8013ae4 <mem_init+0x84>)
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	2201      	movs	r2, #1
 8013a9a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013a9c:	4b11      	ldr	r3, [pc, #68]	; (8013ae4 <mem_init+0x84>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013aa4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8013aa6:	4b0f      	ldr	r3, [pc, #60]	; (8013ae4 <mem_init+0x84>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8013aae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013ab0:	4b0a      	ldr	r3, [pc, #40]	; (8013adc <mem_init+0x7c>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	4a0c      	ldr	r2, [pc, #48]	; (8013ae8 <mem_init+0x88>)
 8013ab6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013ab8:	480c      	ldr	r0, [pc, #48]	; (8013aec <mem_init+0x8c>)
 8013aba:	f00b ff1f 	bl	801f8fc <sys_mutex_new>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d006      	beq.n	8013ad2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013ac4:	4b0a      	ldr	r3, [pc, #40]	; (8013af0 <mem_init+0x90>)
 8013ac6:	f240 221f 	movw	r2, #543	; 0x21f
 8013aca:	490a      	ldr	r1, [pc, #40]	; (8013af4 <mem_init+0x94>)
 8013acc:	480a      	ldr	r0, [pc, #40]	; (8013af8 <mem_init+0x98>)
 8013ace:	f00c fe4b 	bl	8020768 <iprintf>
  }
}
 8013ad2:	bf00      	nop
 8013ad4:	3708      	adds	r7, #8
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	24009a48 	.word	0x24009a48
 8013ae0:	30044000 	.word	0x30044000
 8013ae4:	24009a4c 	.word	0x24009a4c
 8013ae8:	24009a54 	.word	0x24009a54
 8013aec:	24009a50 	.word	0x24009a50
 8013af0:	0802178c 	.word	0x0802178c
 8013af4:	08021860 	.word	0x08021860
 8013af8:	080217d4 	.word	0x080217d4

08013afc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f7ff fef7 	bl	80138f8 <mem_to_ptr>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fede 	bl	80138d4 <ptr_to_mem>
 8013b18:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	885b      	ldrh	r3, [r3, #2]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7ff fed8 	bl	80138d4 <ptr_to_mem>
 8013b24:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b2e:	d818      	bhi.n	8013b62 <mem_link_valid+0x66>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	885b      	ldrh	r3, [r3, #2]
 8013b34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013b38:	d813      	bhi.n	8013b62 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013b3e:	8afa      	ldrh	r2, [r7, #22]
 8013b40:	429a      	cmp	r2, r3
 8013b42:	d004      	beq.n	8013b4e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	881b      	ldrh	r3, [r3, #0]
 8013b48:	8afa      	ldrh	r2, [r7, #22]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d109      	bne.n	8013b62 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013b4e:	4b08      	ldr	r3, [pc, #32]	; (8013b70 <mem_link_valid+0x74>)
 8013b50:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013b52:	693a      	ldr	r2, [r7, #16]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d006      	beq.n	8013b66 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	885b      	ldrh	r3, [r3, #2]
 8013b5c:	8afa      	ldrh	r2, [r7, #22]
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d001      	beq.n	8013b66 <mem_link_valid+0x6a>
    return 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	e000      	b.n	8013b68 <mem_link_valid+0x6c>
  }
  return 1;
 8013b66:	2301      	movs	r3, #1
}
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3718      	adds	r7, #24
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}
 8013b70:	24009a4c 	.word	0x24009a4c

08013b74 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b088      	sub	sp, #32
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d070      	beq.n	8013c64 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f003 0303 	and.w	r3, r3, #3
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d00d      	beq.n	8013ba8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013b8c:	4b37      	ldr	r3, [pc, #220]	; (8013c6c <mem_free+0xf8>)
 8013b8e:	f240 2273 	movw	r2, #627	; 0x273
 8013b92:	4937      	ldr	r1, [pc, #220]	; (8013c70 <mem_free+0xfc>)
 8013b94:	4837      	ldr	r0, [pc, #220]	; (8013c74 <mem_free+0x100>)
 8013b96:	f00c fde7 	bl	8020768 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013b9a:	f00b ff01 	bl	801f9a0 <sys_arch_protect>
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	68f8      	ldr	r0, [r7, #12]
 8013ba2:	f00b ff0b 	bl	801f9bc <sys_arch_unprotect>
    return;
 8013ba6:	e05e      	b.n	8013c66 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	3b08      	subs	r3, #8
 8013bac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013bae:	4b32      	ldr	r3, [pc, #200]	; (8013c78 <mem_free+0x104>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	69fa      	ldr	r2, [r7, #28]
 8013bb4:	429a      	cmp	r2, r3
 8013bb6:	d306      	bcc.n	8013bc6 <mem_free+0x52>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	f103 020c 	add.w	r2, r3, #12
 8013bbe:	4b2f      	ldr	r3, [pc, #188]	; (8013c7c <mem_free+0x108>)
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d90d      	bls.n	8013be2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8013bc6:	4b29      	ldr	r3, [pc, #164]	; (8013c6c <mem_free+0xf8>)
 8013bc8:	f240 227f 	movw	r2, #639	; 0x27f
 8013bcc:	492c      	ldr	r1, [pc, #176]	; (8013c80 <mem_free+0x10c>)
 8013bce:	4829      	ldr	r0, [pc, #164]	; (8013c74 <mem_free+0x100>)
 8013bd0:	f00c fdca 	bl	8020768 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013bd4:	f00b fee4 	bl	801f9a0 <sys_arch_protect>
 8013bd8:	6138      	str	r0, [r7, #16]
 8013bda:	6938      	ldr	r0, [r7, #16]
 8013bdc:	f00b feee 	bl	801f9bc <sys_arch_unprotect>
    return;
 8013be0:	e041      	b.n	8013c66 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013be2:	4828      	ldr	r0, [pc, #160]	; (8013c84 <mem_free+0x110>)
 8013be4:	f00b fea0 	bl	801f928 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	791b      	ldrb	r3, [r3, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d110      	bne.n	8013c12 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013bf0:	4b1e      	ldr	r3, [pc, #120]	; (8013c6c <mem_free+0xf8>)
 8013bf2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8013bf6:	4924      	ldr	r1, [pc, #144]	; (8013c88 <mem_free+0x114>)
 8013bf8:	481e      	ldr	r0, [pc, #120]	; (8013c74 <mem_free+0x100>)
 8013bfa:	f00c fdb5 	bl	8020768 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013bfe:	4821      	ldr	r0, [pc, #132]	; (8013c84 <mem_free+0x110>)
 8013c00:	f00b fea1 	bl	801f946 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c04:	f00b fecc 	bl	801f9a0 <sys_arch_protect>
 8013c08:	6178      	str	r0, [r7, #20]
 8013c0a:	6978      	ldr	r0, [r7, #20]
 8013c0c:	f00b fed6 	bl	801f9bc <sys_arch_unprotect>
    return;
 8013c10:	e029      	b.n	8013c66 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013c12:	69f8      	ldr	r0, [r7, #28]
 8013c14:	f7ff ff72 	bl	8013afc <mem_link_valid>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d110      	bne.n	8013c40 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013c1e:	4b13      	ldr	r3, [pc, #76]	; (8013c6c <mem_free+0xf8>)
 8013c20:	f240 2295 	movw	r2, #661	; 0x295
 8013c24:	4919      	ldr	r1, [pc, #100]	; (8013c8c <mem_free+0x118>)
 8013c26:	4813      	ldr	r0, [pc, #76]	; (8013c74 <mem_free+0x100>)
 8013c28:	f00c fd9e 	bl	8020768 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013c2c:	4815      	ldr	r0, [pc, #84]	; (8013c84 <mem_free+0x110>)
 8013c2e:	f00b fe8a 	bl	801f946 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013c32:	f00b feb5 	bl	801f9a0 <sys_arch_protect>
 8013c36:	61b8      	str	r0, [r7, #24]
 8013c38:	69b8      	ldr	r0, [r7, #24]
 8013c3a:	f00b febf 	bl	801f9bc <sys_arch_unprotect>
    return;
 8013c3e:	e012      	b.n	8013c66 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013c40:	69fb      	ldr	r3, [r7, #28]
 8013c42:	2200      	movs	r2, #0
 8013c44:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013c46:	4b12      	ldr	r3, [pc, #72]	; (8013c90 <mem_free+0x11c>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	69fa      	ldr	r2, [r7, #28]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d202      	bcs.n	8013c56 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013c50:	4a0f      	ldr	r2, [pc, #60]	; (8013c90 <mem_free+0x11c>)
 8013c52:	69fb      	ldr	r3, [r7, #28]
 8013c54:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8013c56:	69f8      	ldr	r0, [r7, #28]
 8013c58:	f7ff fe60 	bl	801391c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013c5c:	4809      	ldr	r0, [pc, #36]	; (8013c84 <mem_free+0x110>)
 8013c5e:	f00b fe72 	bl	801f946 <sys_mutex_unlock>
 8013c62:	e000      	b.n	8013c66 <mem_free+0xf2>
    return;
 8013c64:	bf00      	nop
}
 8013c66:	3720      	adds	r7, #32
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	0802178c 	.word	0x0802178c
 8013c70:	0802187c 	.word	0x0802187c
 8013c74:	080217d4 	.word	0x080217d4
 8013c78:	24009a48 	.word	0x24009a48
 8013c7c:	24009a4c 	.word	0x24009a4c
 8013c80:	080218a0 	.word	0x080218a0
 8013c84:	24009a50 	.word	0x24009a50
 8013c88:	080218bc 	.word	0x080218bc
 8013c8c:	080218e4 	.word	0x080218e4
 8013c90:	24009a54 	.word	0x24009a54

08013c94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b088      	sub	sp, #32
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013ca0:	887b      	ldrh	r3, [r7, #2]
 8013ca2:	3303      	adds	r3, #3
 8013ca4:	b29b      	uxth	r3, r3
 8013ca6:	f023 0303 	bic.w	r3, r3, #3
 8013caa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013cac:	8bfb      	ldrh	r3, [r7, #30]
 8013cae:	2b0b      	cmp	r3, #11
 8013cb0:	d801      	bhi.n	8013cb6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013cb2:	230c      	movs	r3, #12
 8013cb4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013cb6:	8bfb      	ldrh	r3, [r7, #30]
 8013cb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013cbc:	d803      	bhi.n	8013cc6 <mem_trim+0x32>
 8013cbe:	8bfa      	ldrh	r2, [r7, #30]
 8013cc0:	887b      	ldrh	r3, [r7, #2]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d201      	bcs.n	8013cca <mem_trim+0x36>
    return NULL;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	e0d8      	b.n	8013e7c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013cca:	4b6e      	ldr	r3, [pc, #440]	; (8013e84 <mem_trim+0x1f0>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	687a      	ldr	r2, [r7, #4]
 8013cd0:	429a      	cmp	r2, r3
 8013cd2:	d304      	bcc.n	8013cde <mem_trim+0x4a>
 8013cd4:	4b6c      	ldr	r3, [pc, #432]	; (8013e88 <mem_trim+0x1f4>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d306      	bcc.n	8013cec <mem_trim+0x58>
 8013cde:	4b6b      	ldr	r3, [pc, #428]	; (8013e8c <mem_trim+0x1f8>)
 8013ce0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013ce4:	496a      	ldr	r1, [pc, #424]	; (8013e90 <mem_trim+0x1fc>)
 8013ce6:	486b      	ldr	r0, [pc, #428]	; (8013e94 <mem_trim+0x200>)
 8013ce8:	f00c fd3e 	bl	8020768 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013cec:	4b65      	ldr	r3, [pc, #404]	; (8013e84 <mem_trim+0x1f0>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d304      	bcc.n	8013d00 <mem_trim+0x6c>
 8013cf6:	4b64      	ldr	r3, [pc, #400]	; (8013e88 <mem_trim+0x1f4>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	429a      	cmp	r2, r3
 8013cfe:	d307      	bcc.n	8013d10 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013d00:	f00b fe4e 	bl	801f9a0 <sys_arch_protect>
 8013d04:	60b8      	str	r0, [r7, #8]
 8013d06:	68b8      	ldr	r0, [r7, #8]
 8013d08:	f00b fe58 	bl	801f9bc <sys_arch_unprotect>
    return rmem;
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	e0b5      	b.n	8013e7c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	3b08      	subs	r3, #8
 8013d14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013d16:	69b8      	ldr	r0, [r7, #24]
 8013d18:	f7ff fdee 	bl	80138f8 <mem_to_ptr>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013d20:	69bb      	ldr	r3, [r7, #24]
 8013d22:	881a      	ldrh	r2, [r3, #0]
 8013d24:	8afb      	ldrh	r3, [r7, #22]
 8013d26:	1ad3      	subs	r3, r2, r3
 8013d28:	b29b      	uxth	r3, r3
 8013d2a:	3b08      	subs	r3, #8
 8013d2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013d2e:	8bfa      	ldrh	r2, [r7, #30]
 8013d30:	8abb      	ldrh	r3, [r7, #20]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d906      	bls.n	8013d44 <mem_trim+0xb0>
 8013d36:	4b55      	ldr	r3, [pc, #340]	; (8013e8c <mem_trim+0x1f8>)
 8013d38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013d3c:	4956      	ldr	r1, [pc, #344]	; (8013e98 <mem_trim+0x204>)
 8013d3e:	4855      	ldr	r0, [pc, #340]	; (8013e94 <mem_trim+0x200>)
 8013d40:	f00c fd12 	bl	8020768 <iprintf>
  if (newsize > size) {
 8013d44:	8bfa      	ldrh	r2, [r7, #30]
 8013d46:	8abb      	ldrh	r3, [r7, #20]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d901      	bls.n	8013d50 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	e095      	b.n	8013e7c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013d50:	8bfa      	ldrh	r2, [r7, #30]
 8013d52:	8abb      	ldrh	r3, [r7, #20]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d101      	bne.n	8013d5c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	e08f      	b.n	8013e7c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013d5c:	484f      	ldr	r0, [pc, #316]	; (8013e9c <mem_trim+0x208>)
 8013d5e:	f00b fde3 	bl	801f928 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013d62:	69bb      	ldr	r3, [r7, #24]
 8013d64:	881b      	ldrh	r3, [r3, #0]
 8013d66:	4618      	mov	r0, r3
 8013d68:	f7ff fdb4 	bl	80138d4 <ptr_to_mem>
 8013d6c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	791b      	ldrb	r3, [r3, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d13f      	bne.n	8013df6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013d76:	69bb      	ldr	r3, [r7, #24]
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013d7e:	d106      	bne.n	8013d8e <mem_trim+0xfa>
 8013d80:	4b42      	ldr	r3, [pc, #264]	; (8013e8c <mem_trim+0x1f8>)
 8013d82:	f240 22f5 	movw	r2, #757	; 0x2f5
 8013d86:	4946      	ldr	r1, [pc, #280]	; (8013ea0 <mem_trim+0x20c>)
 8013d88:	4842      	ldr	r0, [pc, #264]	; (8013e94 <mem_trim+0x200>)
 8013d8a:	f00c fced 	bl	8020768 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	881b      	ldrh	r3, [r3, #0]
 8013d92:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013d94:	8afa      	ldrh	r2, [r7, #22]
 8013d96:	8bfb      	ldrh	r3, [r7, #30]
 8013d98:	4413      	add	r3, r2
 8013d9a:	b29b      	uxth	r3, r3
 8013d9c:	3308      	adds	r3, #8
 8013d9e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013da0:	4b40      	ldr	r3, [pc, #256]	; (8013ea4 <mem_trim+0x210>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	693a      	ldr	r2, [r7, #16]
 8013da6:	429a      	cmp	r2, r3
 8013da8:	d106      	bne.n	8013db8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013daa:	89fb      	ldrh	r3, [r7, #14]
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7ff fd91 	bl	80138d4 <ptr_to_mem>
 8013db2:	4603      	mov	r3, r0
 8013db4:	4a3b      	ldr	r2, [pc, #236]	; (8013ea4 <mem_trim+0x210>)
 8013db6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013db8:	89fb      	ldrh	r3, [r7, #14]
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f7ff fd8a 	bl	80138d4 <ptr_to_mem>
 8013dc0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	89ba      	ldrh	r2, [r7, #12]
 8013dcc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	8afa      	ldrh	r2, [r7, #22]
 8013dd2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8013dd4:	69bb      	ldr	r3, [r7, #24]
 8013dd6:	89fa      	ldrh	r2, [r7, #14]
 8013dd8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	881b      	ldrh	r3, [r3, #0]
 8013dde:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013de2:	d047      	beq.n	8013e74 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013de4:	693b      	ldr	r3, [r7, #16]
 8013de6:	881b      	ldrh	r3, [r3, #0]
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7ff fd73 	bl	80138d4 <ptr_to_mem>
 8013dee:	4602      	mov	r2, r0
 8013df0:	89fb      	ldrh	r3, [r7, #14]
 8013df2:	8053      	strh	r3, [r2, #2]
 8013df4:	e03e      	b.n	8013e74 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013df6:	8bfb      	ldrh	r3, [r7, #30]
 8013df8:	f103 0214 	add.w	r2, r3, #20
 8013dfc:	8abb      	ldrh	r3, [r7, #20]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d838      	bhi.n	8013e74 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013e02:	8afa      	ldrh	r2, [r7, #22]
 8013e04:	8bfb      	ldrh	r3, [r7, #30]
 8013e06:	4413      	add	r3, r2
 8013e08:	b29b      	uxth	r3, r3
 8013e0a:	3308      	adds	r3, #8
 8013e0c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013e0e:	69bb      	ldr	r3, [r7, #24]
 8013e10:	881b      	ldrh	r3, [r3, #0]
 8013e12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013e16:	d106      	bne.n	8013e26 <mem_trim+0x192>
 8013e18:	4b1c      	ldr	r3, [pc, #112]	; (8013e8c <mem_trim+0x1f8>)
 8013e1a:	f240 3216 	movw	r2, #790	; 0x316
 8013e1e:	4920      	ldr	r1, [pc, #128]	; (8013ea0 <mem_trim+0x20c>)
 8013e20:	481c      	ldr	r0, [pc, #112]	; (8013e94 <mem_trim+0x200>)
 8013e22:	f00c fca1 	bl	8020768 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013e26:	89fb      	ldrh	r3, [r7, #14]
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7ff fd53 	bl	80138d4 <ptr_to_mem>
 8013e2e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013e30:	4b1c      	ldr	r3, [pc, #112]	; (8013ea4 <mem_trim+0x210>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	693a      	ldr	r2, [r7, #16]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d202      	bcs.n	8013e40 <mem_trim+0x1ac>
      lfree = mem2;
 8013e3a:	4a1a      	ldr	r2, [pc, #104]	; (8013ea4 <mem_trim+0x210>)
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	2200      	movs	r2, #0
 8013e44:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	881a      	ldrh	r2, [r3, #0]
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013e4e:	693b      	ldr	r3, [r7, #16]
 8013e50:	8afa      	ldrh	r2, [r7, #22]
 8013e52:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013e54:	69bb      	ldr	r3, [r7, #24]
 8013e56:	89fa      	ldrh	r2, [r7, #14]
 8013e58:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013e62:	d007      	beq.n	8013e74 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7ff fd33 	bl	80138d4 <ptr_to_mem>
 8013e6e:	4602      	mov	r2, r0
 8013e70:	89fb      	ldrh	r3, [r7, #14]
 8013e72:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013e74:	4809      	ldr	r0, [pc, #36]	; (8013e9c <mem_trim+0x208>)
 8013e76:	f00b fd66 	bl	801f946 <sys_mutex_unlock>
  return rmem;
 8013e7a:	687b      	ldr	r3, [r7, #4]
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3720      	adds	r7, #32
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}
 8013e84:	24009a48 	.word	0x24009a48
 8013e88:	24009a4c 	.word	0x24009a4c
 8013e8c:	0802178c 	.word	0x0802178c
 8013e90:	08021918 	.word	0x08021918
 8013e94:	080217d4 	.word	0x080217d4
 8013e98:	08021930 	.word	0x08021930
 8013e9c:	24009a50 	.word	0x24009a50
 8013ea0:	08021950 	.word	0x08021950
 8013ea4:	24009a54 	.word	0x24009a54

08013ea8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b088      	sub	sp, #32
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	4603      	mov	r3, r0
 8013eb0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013eb2:	88fb      	ldrh	r3, [r7, #6]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d101      	bne.n	8013ebc <mem_malloc+0x14>
    return NULL;
 8013eb8:	2300      	movs	r3, #0
 8013eba:	e0e2      	b.n	8014082 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013ebc:	88fb      	ldrh	r3, [r7, #6]
 8013ebe:	3303      	adds	r3, #3
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	f023 0303 	bic.w	r3, r3, #3
 8013ec6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013ec8:	8bbb      	ldrh	r3, [r7, #28]
 8013eca:	2b0b      	cmp	r3, #11
 8013ecc:	d801      	bhi.n	8013ed2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013ece:	230c      	movs	r3, #12
 8013ed0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013ed2:	8bbb      	ldrh	r3, [r7, #28]
 8013ed4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013ed8:	d803      	bhi.n	8013ee2 <mem_malloc+0x3a>
 8013eda:	8bba      	ldrh	r2, [r7, #28]
 8013edc:	88fb      	ldrh	r3, [r7, #6]
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d201      	bcs.n	8013ee6 <mem_malloc+0x3e>
    return NULL;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	e0cd      	b.n	8014082 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013ee6:	4869      	ldr	r0, [pc, #420]	; (801408c <mem_malloc+0x1e4>)
 8013ee8:	f00b fd1e 	bl	801f928 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013eec:	4b68      	ldr	r3, [pc, #416]	; (8014090 <mem_malloc+0x1e8>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7ff fd01 	bl	80138f8 <mem_to_ptr>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	83fb      	strh	r3, [r7, #30]
 8013efa:	e0b7      	b.n	801406c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013efc:	8bfb      	ldrh	r3, [r7, #30]
 8013efe:	4618      	mov	r0, r3
 8013f00:	f7ff fce8 	bl	80138d4 <ptr_to_mem>
 8013f04:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	791b      	ldrb	r3, [r3, #4]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	f040 80a7 	bne.w	801405e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	881b      	ldrh	r3, [r3, #0]
 8013f14:	461a      	mov	r2, r3
 8013f16:	8bfb      	ldrh	r3, [r7, #30]
 8013f18:	1ad3      	subs	r3, r2, r3
 8013f1a:	f1a3 0208 	sub.w	r2, r3, #8
 8013f1e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013f20:	429a      	cmp	r2, r3
 8013f22:	f0c0 809c 	bcc.w	801405e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	881b      	ldrh	r3, [r3, #0]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	8bfb      	ldrh	r3, [r7, #30]
 8013f2e:	1ad3      	subs	r3, r2, r3
 8013f30:	f1a3 0208 	sub.w	r2, r3, #8
 8013f34:	8bbb      	ldrh	r3, [r7, #28]
 8013f36:	3314      	adds	r3, #20
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d333      	bcc.n	8013fa4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013f3c:	8bfa      	ldrh	r2, [r7, #30]
 8013f3e:	8bbb      	ldrh	r3, [r7, #28]
 8013f40:	4413      	add	r3, r2
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	3308      	adds	r3, #8
 8013f46:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013f48:	8a7b      	ldrh	r3, [r7, #18]
 8013f4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013f4e:	d106      	bne.n	8013f5e <mem_malloc+0xb6>
 8013f50:	4b50      	ldr	r3, [pc, #320]	; (8014094 <mem_malloc+0x1ec>)
 8013f52:	f240 3287 	movw	r2, #903	; 0x387
 8013f56:	4950      	ldr	r1, [pc, #320]	; (8014098 <mem_malloc+0x1f0>)
 8013f58:	4850      	ldr	r0, [pc, #320]	; (801409c <mem_malloc+0x1f4>)
 8013f5a:	f00c fc05 	bl	8020768 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013f5e:	8a7b      	ldrh	r3, [r7, #18]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7ff fcb7 	bl	80138d4 <ptr_to_mem>
 8013f66:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	881a      	ldrh	r2, [r3, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	8bfa      	ldrh	r2, [r7, #30]
 8013f7a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	8a7a      	ldrh	r2, [r7, #18]
 8013f80:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	2201      	movs	r2, #1
 8013f86:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013f90:	d00b      	beq.n	8013faa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	881b      	ldrh	r3, [r3, #0]
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff fc9c 	bl	80138d4 <ptr_to_mem>
 8013f9c:	4602      	mov	r2, r0
 8013f9e:	8a7b      	ldrh	r3, [r7, #18]
 8013fa0:	8053      	strh	r3, [r2, #2]
 8013fa2:	e002      	b.n	8013faa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013fa4:	697b      	ldr	r3, [r7, #20]
 8013fa6:	2201      	movs	r2, #1
 8013fa8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013faa:	4b39      	ldr	r3, [pc, #228]	; (8014090 <mem_malloc+0x1e8>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	697a      	ldr	r2, [r7, #20]
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d127      	bne.n	8014004 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8013fb4:	4b36      	ldr	r3, [pc, #216]	; (8014090 <mem_malloc+0x1e8>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013fba:	e005      	b.n	8013fc8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013fbc:	69bb      	ldr	r3, [r7, #24]
 8013fbe:	881b      	ldrh	r3, [r3, #0]
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7ff fc87 	bl	80138d4 <ptr_to_mem>
 8013fc6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013fc8:	69bb      	ldr	r3, [r7, #24]
 8013fca:	791b      	ldrb	r3, [r3, #4]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d004      	beq.n	8013fda <mem_malloc+0x132>
 8013fd0:	4b33      	ldr	r3, [pc, #204]	; (80140a0 <mem_malloc+0x1f8>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	69ba      	ldr	r2, [r7, #24]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	d1f0      	bne.n	8013fbc <mem_malloc+0x114>
          }
          lfree = cur;
 8013fda:	4a2d      	ldr	r2, [pc, #180]	; (8014090 <mem_malloc+0x1e8>)
 8013fdc:	69bb      	ldr	r3, [r7, #24]
 8013fde:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013fe0:	4b2b      	ldr	r3, [pc, #172]	; (8014090 <mem_malloc+0x1e8>)
 8013fe2:	681a      	ldr	r2, [r3, #0]
 8013fe4:	4b2e      	ldr	r3, [pc, #184]	; (80140a0 <mem_malloc+0x1f8>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d00b      	beq.n	8014004 <mem_malloc+0x15c>
 8013fec:	4b28      	ldr	r3, [pc, #160]	; (8014090 <mem_malloc+0x1e8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	791b      	ldrb	r3, [r3, #4]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d006      	beq.n	8014004 <mem_malloc+0x15c>
 8013ff6:	4b27      	ldr	r3, [pc, #156]	; (8014094 <mem_malloc+0x1ec>)
 8013ff8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013ffc:	4929      	ldr	r1, [pc, #164]	; (80140a4 <mem_malloc+0x1fc>)
 8013ffe:	4827      	ldr	r0, [pc, #156]	; (801409c <mem_malloc+0x1f4>)
 8014000:	f00c fbb2 	bl	8020768 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8014004:	4821      	ldr	r0, [pc, #132]	; (801408c <mem_malloc+0x1e4>)
 8014006:	f00b fc9e 	bl	801f946 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801400a:	8bba      	ldrh	r2, [r7, #28]
 801400c:	697b      	ldr	r3, [r7, #20]
 801400e:	4413      	add	r3, r2
 8014010:	3308      	adds	r3, #8
 8014012:	4a23      	ldr	r2, [pc, #140]	; (80140a0 <mem_malloc+0x1f8>)
 8014014:	6812      	ldr	r2, [r2, #0]
 8014016:	4293      	cmp	r3, r2
 8014018:	d906      	bls.n	8014028 <mem_malloc+0x180>
 801401a:	4b1e      	ldr	r3, [pc, #120]	; (8014094 <mem_malloc+0x1ec>)
 801401c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8014020:	4921      	ldr	r1, [pc, #132]	; (80140a8 <mem_malloc+0x200>)
 8014022:	481e      	ldr	r0, [pc, #120]	; (801409c <mem_malloc+0x1f4>)
 8014024:	f00c fba0 	bl	8020768 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	f003 0303 	and.w	r3, r3, #3
 801402e:	2b00      	cmp	r3, #0
 8014030:	d006      	beq.n	8014040 <mem_malloc+0x198>
 8014032:	4b18      	ldr	r3, [pc, #96]	; (8014094 <mem_malloc+0x1ec>)
 8014034:	f240 32bb 	movw	r2, #955	; 0x3bb
 8014038:	491c      	ldr	r1, [pc, #112]	; (80140ac <mem_malloc+0x204>)
 801403a:	4818      	ldr	r0, [pc, #96]	; (801409c <mem_malloc+0x1f4>)
 801403c:	f00c fb94 	bl	8020768 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	f003 0303 	and.w	r3, r3, #3
 8014046:	2b00      	cmp	r3, #0
 8014048:	d006      	beq.n	8014058 <mem_malloc+0x1b0>
 801404a:	4b12      	ldr	r3, [pc, #72]	; (8014094 <mem_malloc+0x1ec>)
 801404c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8014050:	4917      	ldr	r1, [pc, #92]	; (80140b0 <mem_malloc+0x208>)
 8014052:	4812      	ldr	r0, [pc, #72]	; (801409c <mem_malloc+0x1f4>)
 8014054:	f00c fb88 	bl	8020768 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	3308      	adds	r3, #8
 801405c:	e011      	b.n	8014082 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801405e:	8bfb      	ldrh	r3, [r7, #30]
 8014060:	4618      	mov	r0, r3
 8014062:	f7ff fc37 	bl	80138d4 <ptr_to_mem>
 8014066:	4603      	mov	r3, r0
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801406c:	8bfa      	ldrh	r2, [r7, #30]
 801406e:	8bbb      	ldrh	r3, [r7, #28]
 8014070:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8014074:	429a      	cmp	r2, r3
 8014076:	f4ff af41 	bcc.w	8013efc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801407a:	4804      	ldr	r0, [pc, #16]	; (801408c <mem_malloc+0x1e4>)
 801407c:	f00b fc63 	bl	801f946 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3720      	adds	r7, #32
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	24009a50 	.word	0x24009a50
 8014090:	24009a54 	.word	0x24009a54
 8014094:	0802178c 	.word	0x0802178c
 8014098:	08021950 	.word	0x08021950
 801409c:	080217d4 	.word	0x080217d4
 80140a0:	24009a4c 	.word	0x24009a4c
 80140a4:	08021964 	.word	0x08021964
 80140a8:	08021980 	.word	0x08021980
 80140ac:	080219b0 	.word	0x080219b0
 80140b0:	080219e0 	.word	0x080219e0

080140b4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b085      	sub	sp, #20
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	689b      	ldr	r3, [r3, #8]
 80140c0:	2200      	movs	r2, #0
 80140c2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	3303      	adds	r3, #3
 80140ca:	f023 0303 	bic.w	r3, r3, #3
 80140ce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80140d0:	2300      	movs	r3, #0
 80140d2:	60fb      	str	r3, [r7, #12]
 80140d4:	e011      	b.n	80140fa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	689b      	ldr	r3, [r3, #8]
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	689b      	ldr	r3, [r3, #8]
 80140e4:	68ba      	ldr	r2, [r7, #8]
 80140e6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	881b      	ldrh	r3, [r3, #0]
 80140ec:	461a      	mov	r2, r3
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	4413      	add	r3, r2
 80140f2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	3301      	adds	r3, #1
 80140f8:	60fb      	str	r3, [r7, #12]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	885b      	ldrh	r3, [r3, #2]
 80140fe:	461a      	mov	r2, r3
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	4293      	cmp	r3, r2
 8014104:	dbe7      	blt.n	80140d6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8014106:	bf00      	nop
 8014108:	bf00      	nop
 801410a:	3714      	adds	r7, #20
 801410c:	46bd      	mov	sp, r7
 801410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014112:	4770      	bx	lr

08014114 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801411a:	2300      	movs	r3, #0
 801411c:	80fb      	strh	r3, [r7, #6]
 801411e:	e009      	b.n	8014134 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8014120:	88fb      	ldrh	r3, [r7, #6]
 8014122:	4a08      	ldr	r2, [pc, #32]	; (8014144 <memp_init+0x30>)
 8014124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014128:	4618      	mov	r0, r3
 801412a:	f7ff ffc3 	bl	80140b4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801412e:	88fb      	ldrh	r3, [r7, #6]
 8014130:	3301      	adds	r3, #1
 8014132:	80fb      	strh	r3, [r7, #6]
 8014134:	88fb      	ldrh	r3, [r7, #6]
 8014136:	2b0c      	cmp	r3, #12
 8014138:	d9f2      	bls.n	8014120 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801413a:	bf00      	nop
 801413c:	bf00      	nop
 801413e:	3708      	adds	r7, #8
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}
 8014144:	0802460c 	.word	0x0802460c

08014148 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8014150:	f00b fc26 	bl	801f9a0 <sys_arch_protect>
 8014154:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d015      	beq.n	8014190 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	689b      	ldr	r3, [r3, #8]
 8014168:	68ba      	ldr	r2, [r7, #8]
 801416a:	6812      	ldr	r2, [r2, #0]
 801416c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	f003 0303 	and.w	r3, r3, #3
 8014174:	2b00      	cmp	r3, #0
 8014176:	d006      	beq.n	8014186 <do_memp_malloc_pool+0x3e>
 8014178:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <do_memp_malloc_pool+0x58>)
 801417a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801417e:	4909      	ldr	r1, [pc, #36]	; (80141a4 <do_memp_malloc_pool+0x5c>)
 8014180:	4809      	ldr	r0, [pc, #36]	; (80141a8 <do_memp_malloc_pool+0x60>)
 8014182:	f00c faf1 	bl	8020768 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014186:	68f8      	ldr	r0, [r7, #12]
 8014188:	f00b fc18 	bl	801f9bc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	e003      	b.n	8014198 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f00b fc13 	bl	801f9bc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3710      	adds	r7, #16
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	08021a04 	.word	0x08021a04
 80141a4:	08021a34 	.word	0x08021a34
 80141a8:	08021a58 	.word	0x08021a58

080141ac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d106      	bne.n	80141c8 <memp_malloc_pool+0x1c>
 80141ba:	4b0a      	ldr	r3, [pc, #40]	; (80141e4 <memp_malloc_pool+0x38>)
 80141bc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80141c0:	4909      	ldr	r1, [pc, #36]	; (80141e8 <memp_malloc_pool+0x3c>)
 80141c2:	480a      	ldr	r0, [pc, #40]	; (80141ec <memp_malloc_pool+0x40>)
 80141c4:	f00c fad0 	bl	8020768 <iprintf>
  if (desc == NULL) {
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d101      	bne.n	80141d2 <memp_malloc_pool+0x26>
    return NULL;
 80141ce:	2300      	movs	r3, #0
 80141d0:	e003      	b.n	80141da <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ff ffb8 	bl	8014148 <do_memp_malloc_pool>
 80141d8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80141da:	4618      	mov	r0, r3
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	08021a04 	.word	0x08021a04
 80141e8:	08021a80 	.word	0x08021a80
 80141ec:	08021a58 	.word	0x08021a58

080141f0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	4603      	mov	r3, r0
 80141f8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80141fa:	79fb      	ldrb	r3, [r7, #7]
 80141fc:	2b0c      	cmp	r3, #12
 80141fe:	d908      	bls.n	8014212 <memp_malloc+0x22>
 8014200:	4b0a      	ldr	r3, [pc, #40]	; (801422c <memp_malloc+0x3c>)
 8014202:	f240 1257 	movw	r2, #343	; 0x157
 8014206:	490a      	ldr	r1, [pc, #40]	; (8014230 <memp_malloc+0x40>)
 8014208:	480a      	ldr	r0, [pc, #40]	; (8014234 <memp_malloc+0x44>)
 801420a:	f00c faad 	bl	8020768 <iprintf>
 801420e:	2300      	movs	r3, #0
 8014210:	e008      	b.n	8014224 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8014212:	79fb      	ldrb	r3, [r7, #7]
 8014214:	4a08      	ldr	r2, [pc, #32]	; (8014238 <memp_malloc+0x48>)
 8014216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801421a:	4618      	mov	r0, r3
 801421c:	f7ff ff94 	bl	8014148 <do_memp_malloc_pool>
 8014220:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8014222:	68fb      	ldr	r3, [r7, #12]
}
 8014224:	4618      	mov	r0, r3
 8014226:	3710      	adds	r7, #16
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	08021a04 	.word	0x08021a04
 8014230:	08021a94 	.word	0x08021a94
 8014234:	08021a58 	.word	0x08021a58
 8014238:	0802460c 	.word	0x0802460c

0801423c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8014246:	683b      	ldr	r3, [r7, #0]
 8014248:	f003 0303 	and.w	r3, r3, #3
 801424c:	2b00      	cmp	r3, #0
 801424e:	d006      	beq.n	801425e <do_memp_free_pool+0x22>
 8014250:	4b0d      	ldr	r3, [pc, #52]	; (8014288 <do_memp_free_pool+0x4c>)
 8014252:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8014256:	490d      	ldr	r1, [pc, #52]	; (801428c <do_memp_free_pool+0x50>)
 8014258:	480d      	ldr	r0, [pc, #52]	; (8014290 <do_memp_free_pool+0x54>)
 801425a:	f00c fa85 	bl	8020768 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8014262:	f00b fb9d 	bl	801f9a0 <sys_arch_protect>
 8014266:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	68fb      	ldr	r3, [r7, #12]
 8014270:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	68fa      	ldr	r2, [r7, #12]
 8014278:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801427a:	68b8      	ldr	r0, [r7, #8]
 801427c:	f00b fb9e 	bl	801f9bc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8014280:	bf00      	nop
 8014282:	3710      	adds	r7, #16
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}
 8014288:	08021a04 	.word	0x08021a04
 801428c:	08021ab4 	.word	0x08021ab4
 8014290:	08021a58 	.word	0x08021a58

08014294 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
 801429c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d106      	bne.n	80142b2 <memp_free_pool+0x1e>
 80142a4:	4b0a      	ldr	r3, [pc, #40]	; (80142d0 <memp_free_pool+0x3c>)
 80142a6:	f240 1295 	movw	r2, #405	; 0x195
 80142aa:	490a      	ldr	r1, [pc, #40]	; (80142d4 <memp_free_pool+0x40>)
 80142ac:	480a      	ldr	r0, [pc, #40]	; (80142d8 <memp_free_pool+0x44>)
 80142ae:	f00c fa5b 	bl	8020768 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d007      	beq.n	80142c8 <memp_free_pool+0x34>
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d004      	beq.n	80142c8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80142be:	6839      	ldr	r1, [r7, #0]
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f7ff ffbb 	bl	801423c <do_memp_free_pool>
 80142c6:	e000      	b.n	80142ca <memp_free_pool+0x36>
    return;
 80142c8:	bf00      	nop
}
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	08021a04 	.word	0x08021a04
 80142d4:	08021a80 	.word	0x08021a80
 80142d8:	08021a58 	.word	0x08021a58

080142dc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	4603      	mov	r3, r0
 80142e4:	6039      	str	r1, [r7, #0]
 80142e6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	2b0c      	cmp	r3, #12
 80142ec:	d907      	bls.n	80142fe <memp_free+0x22>
 80142ee:	4b0c      	ldr	r3, [pc, #48]	; (8014320 <memp_free+0x44>)
 80142f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80142f4:	490b      	ldr	r1, [pc, #44]	; (8014324 <memp_free+0x48>)
 80142f6:	480c      	ldr	r0, [pc, #48]	; (8014328 <memp_free+0x4c>)
 80142f8:	f00c fa36 	bl	8020768 <iprintf>
 80142fc:	e00c      	b.n	8014318 <memp_free+0x3c>

  if (mem == NULL) {
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d008      	beq.n	8014316 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014304:	79fb      	ldrb	r3, [r7, #7]
 8014306:	4a09      	ldr	r2, [pc, #36]	; (801432c <memp_free+0x50>)
 8014308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801430c:	6839      	ldr	r1, [r7, #0]
 801430e:	4618      	mov	r0, r3
 8014310:	f7ff ff94 	bl	801423c <do_memp_free_pool>
 8014314:	e000      	b.n	8014318 <memp_free+0x3c>
    return;
 8014316:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8014318:	3708      	adds	r7, #8
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}
 801431e:	bf00      	nop
 8014320:	08021a04 	.word	0x08021a04
 8014324:	08021ad4 	.word	0x08021ad4
 8014328:	08021a58 	.word	0x08021a58
 801432c:	0802460c 	.word	0x0802460c

08014330 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014330:	b480      	push	{r7}
 8014332:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014334:	bf00      	nop
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
	...

08014340 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b086      	sub	sp, #24
 8014344:	af00      	add	r7, sp, #0
 8014346:	60f8      	str	r0, [r7, #12]
 8014348:	60b9      	str	r1, [r7, #8]
 801434a:	607a      	str	r2, [r7, #4]
 801434c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d108      	bne.n	8014366 <netif_add+0x26>
 8014354:	4b5b      	ldr	r3, [pc, #364]	; (80144c4 <netif_add+0x184>)
 8014356:	f240 1227 	movw	r2, #295	; 0x127
 801435a:	495b      	ldr	r1, [pc, #364]	; (80144c8 <netif_add+0x188>)
 801435c:	485b      	ldr	r0, [pc, #364]	; (80144cc <netif_add+0x18c>)
 801435e:	f00c fa03 	bl	8020768 <iprintf>
 8014362:	2300      	movs	r3, #0
 8014364:	e0a9      	b.n	80144ba <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8014366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014368:	2b00      	cmp	r3, #0
 801436a:	d108      	bne.n	801437e <netif_add+0x3e>
 801436c:	4b55      	ldr	r3, [pc, #340]	; (80144c4 <netif_add+0x184>)
 801436e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8014372:	4957      	ldr	r1, [pc, #348]	; (80144d0 <netif_add+0x190>)
 8014374:	4855      	ldr	r0, [pc, #340]	; (80144cc <netif_add+0x18c>)
 8014376:	f00c f9f7 	bl	8020768 <iprintf>
 801437a:	2300      	movs	r3, #0
 801437c:	e09d      	b.n	80144ba <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d101      	bne.n	8014388 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8014384:	4b53      	ldr	r3, [pc, #332]	; (80144d4 <netif_add+0x194>)
 8014386:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d101      	bne.n	8014392 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801438e:	4b51      	ldr	r3, [pc, #324]	; (80144d4 <netif_add+0x194>)
 8014390:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d101      	bne.n	801439c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8014398:	4b4e      	ldr	r3, [pc, #312]	; (80144d4 <netif_add+0x194>)
 801439a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2200      	movs	r2, #0
 80143a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	2200      	movs	r2, #0
 80143a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2200      	movs	r2, #0
 80143ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	4a49      	ldr	r2, [pc, #292]	; (80144d8 <netif_add+0x198>)
 80143b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	2200      	movs	r2, #0
 80143b8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	2200      	movs	r2, #0
 80143be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	3324      	adds	r3, #36	; 0x24
 80143c6:	2204      	movs	r2, #4
 80143c8:	2100      	movs	r1, #0
 80143ca:	4618      	mov	r0, r3
 80143cc:	f00c f92f 	bl	802062e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2200      	movs	r2, #0
 80143d4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	6a3a      	ldr	r2, [r7, #32]
 80143da:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80143dc:	4b3f      	ldr	r3, [pc, #252]	; (80144dc <netif_add+0x19c>)
 80143de:	781a      	ldrb	r2, [r3, #0]
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80143ea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f000 f914 	bl	8014620 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80143f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	4798      	blx	r3
 80143fe:	4603      	mov	r3, r0
 8014400:	2b00      	cmp	r3, #0
 8014402:	d001      	beq.n	8014408 <netif_add+0xc8>
    return NULL;
 8014404:	2300      	movs	r3, #0
 8014406:	e058      	b.n	80144ba <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801440e:	2bff      	cmp	r3, #255	; 0xff
 8014410:	d103      	bne.n	801441a <netif_add+0xda>
        netif->num = 0;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2200      	movs	r2, #0
 8014416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801441a:	2300      	movs	r3, #0
 801441c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801441e:	4b30      	ldr	r3, [pc, #192]	; (80144e0 <netif_add+0x1a0>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	617b      	str	r3, [r7, #20]
 8014424:	e02b      	b.n	801447e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8014426:	697a      	ldr	r2, [r7, #20]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	429a      	cmp	r2, r3
 801442c:	d106      	bne.n	801443c <netif_add+0xfc>
 801442e:	4b25      	ldr	r3, [pc, #148]	; (80144c4 <netif_add+0x184>)
 8014430:	f240 128b 	movw	r2, #395	; 0x18b
 8014434:	492b      	ldr	r1, [pc, #172]	; (80144e4 <netif_add+0x1a4>)
 8014436:	4825      	ldr	r0, [pc, #148]	; (80144cc <netif_add+0x18c>)
 8014438:	f00c f996 	bl	8020768 <iprintf>
        num_netifs++;
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	3301      	adds	r3, #1
 8014440:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014442:	693b      	ldr	r3, [r7, #16]
 8014444:	2bff      	cmp	r3, #255	; 0xff
 8014446:	dd06      	ble.n	8014456 <netif_add+0x116>
 8014448:	4b1e      	ldr	r3, [pc, #120]	; (80144c4 <netif_add+0x184>)
 801444a:	f240 128d 	movw	r2, #397	; 0x18d
 801444e:	4926      	ldr	r1, [pc, #152]	; (80144e8 <netif_add+0x1a8>)
 8014450:	481e      	ldr	r0, [pc, #120]	; (80144cc <netif_add+0x18c>)
 8014452:	f00c f989 	bl	8020768 <iprintf>
        if (netif2->num == netif->num) {
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014462:	429a      	cmp	r2, r3
 8014464:	d108      	bne.n	8014478 <netif_add+0x138>
          netif->num++;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801446c:	3301      	adds	r3, #1
 801446e:	b2da      	uxtb	r2, r3
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8014476:	e005      	b.n	8014484 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	617b      	str	r3, [r7, #20]
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d1d0      	bne.n	8014426 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d1be      	bne.n	8014408 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014490:	2bfe      	cmp	r3, #254	; 0xfe
 8014492:	d103      	bne.n	801449c <netif_add+0x15c>
    netif_num = 0;
 8014494:	4b11      	ldr	r3, [pc, #68]	; (80144dc <netif_add+0x19c>)
 8014496:	2200      	movs	r2, #0
 8014498:	701a      	strb	r2, [r3, #0]
 801449a:	e006      	b.n	80144aa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144a2:	3301      	adds	r3, #1
 80144a4:	b2da      	uxtb	r2, r3
 80144a6:	4b0d      	ldr	r3, [pc, #52]	; (80144dc <netif_add+0x19c>)
 80144a8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80144aa:	4b0d      	ldr	r3, [pc, #52]	; (80144e0 <netif_add+0x1a0>)
 80144ac:	681a      	ldr	r2, [r3, #0]
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80144b2:	4a0b      	ldr	r2, [pc, #44]	; (80144e0 <netif_add+0x1a0>)
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80144b8:	68fb      	ldr	r3, [r7, #12]
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3718      	adds	r7, #24
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
 80144c2:	bf00      	nop
 80144c4:	08021af0 	.word	0x08021af0
 80144c8:	08021b84 	.word	0x08021b84
 80144cc:	08021b40 	.word	0x08021b40
 80144d0:	08021ba0 	.word	0x08021ba0
 80144d4:	08024690 	.word	0x08024690
 80144d8:	08014903 	.word	0x08014903
 80144dc:	2400cb4c 	.word	0x2400cb4c
 80144e0:	2400cb44 	.word	0x2400cb44
 80144e4:	08021bc4 	.word	0x08021bc4
 80144e8:	08021bd8 	.word	0x08021bd8

080144ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b082      	sub	sp, #8
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
 80144f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80144f6:	6839      	ldr	r1, [r7, #0]
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f002 fb91 	bl	8016c20 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80144fe:	6839      	ldr	r1, [r7, #0]
 8014500:	6878      	ldr	r0, [r7, #4]
 8014502:	f006 ffa7 	bl	801b454 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8014506:	bf00      	nop
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
	...

08014510 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d106      	bne.n	8014530 <netif_do_set_ipaddr+0x20>
 8014522:	4b1d      	ldr	r3, [pc, #116]	; (8014598 <netif_do_set_ipaddr+0x88>)
 8014524:	f240 12cb 	movw	r2, #459	; 0x1cb
 8014528:	491c      	ldr	r1, [pc, #112]	; (801459c <netif_do_set_ipaddr+0x8c>)
 801452a:	481d      	ldr	r0, [pc, #116]	; (80145a0 <netif_do_set_ipaddr+0x90>)
 801452c:	f00c f91c 	bl	8020768 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d106      	bne.n	8014544 <netif_do_set_ipaddr+0x34>
 8014536:	4b18      	ldr	r3, [pc, #96]	; (8014598 <netif_do_set_ipaddr+0x88>)
 8014538:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801453c:	4917      	ldr	r1, [pc, #92]	; (801459c <netif_do_set_ipaddr+0x8c>)
 801453e:	4818      	ldr	r0, [pc, #96]	; (80145a0 <netif_do_set_ipaddr+0x90>)
 8014540:	f00c f912 	bl	8020768 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	3304      	adds	r3, #4
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	429a      	cmp	r2, r3
 8014550:	d01c      	beq.n	801458c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	3304      	adds	r3, #4
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014562:	f107 0314 	add.w	r3, r7, #20
 8014566:	4619      	mov	r1, r3
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f7ff ffbf 	bl	80144ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <netif_do_set_ipaddr+0x6a>
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	e000      	b.n	801457c <netif_do_set_ipaddr+0x6c>
 801457a:	2300      	movs	r3, #0
 801457c:	68fa      	ldr	r2, [r7, #12]
 801457e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014580:	2101      	movs	r1, #1
 8014582:	68f8      	ldr	r0, [r7, #12]
 8014584:	f000 f8d2 	bl	801472c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8014588:	2301      	movs	r3, #1
 801458a:	e000      	b.n	801458e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801458c:	2300      	movs	r3, #0
}
 801458e:	4618      	mov	r0, r3
 8014590:	3718      	adds	r7, #24
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
 8014596:	bf00      	nop
 8014598:	08021af0 	.word	0x08021af0
 801459c:	08021c08 	.word	0x08021c08
 80145a0:	08021b40 	.word	0x08021b40

080145a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80145a4:	b480      	push	{r7}
 80145a6:	b085      	sub	sp, #20
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	60f8      	str	r0, [r7, #12]
 80145ac:	60b9      	str	r1, [r7, #8]
 80145ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	681a      	ldr	r2, [r3, #0]
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	3308      	adds	r3, #8
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d00a      	beq.n	80145d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d002      	beq.n	80145ca <netif_do_set_netmask+0x26>
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	e000      	b.n	80145cc <netif_do_set_netmask+0x28>
 80145ca:	2300      	movs	r3, #0
 80145cc:	68fa      	ldr	r2, [r7, #12]
 80145ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80145d0:	2301      	movs	r3, #1
 80145d2:	e000      	b.n	80145d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80145d4:	2300      	movs	r3, #0
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3714      	adds	r7, #20
 80145da:	46bd      	mov	sp, r7
 80145dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e0:	4770      	bx	lr

080145e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80145e2:	b480      	push	{r7}
 80145e4:	b085      	sub	sp, #20
 80145e6:	af00      	add	r7, sp, #0
 80145e8:	60f8      	str	r0, [r7, #12]
 80145ea:	60b9      	str	r1, [r7, #8]
 80145ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	330c      	adds	r3, #12
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d00a      	beq.n	8014612 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d002      	beq.n	8014608 <netif_do_set_gw+0x26>
 8014602:	68bb      	ldr	r3, [r7, #8]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	e000      	b.n	801460a <netif_do_set_gw+0x28>
 8014608:	2300      	movs	r3, #0
 801460a:	68fa      	ldr	r2, [r7, #12]
 801460c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801460e:	2301      	movs	r3, #1
 8014610:	e000      	b.n	8014614 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014612:	2300      	movs	r3, #0
}
 8014614:	4618      	mov	r0, r3
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b088      	sub	sp, #32
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
 801462c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801462e:	2300      	movs	r3, #0
 8014630:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014632:	2300      	movs	r3, #0
 8014634:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d101      	bne.n	8014640 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801463c:	4b1c      	ldr	r3, [pc, #112]	; (80146b0 <netif_set_addr+0x90>)
 801463e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8014646:	4b1a      	ldr	r3, [pc, #104]	; (80146b0 <netif_set_addr+0x90>)
 8014648:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d101      	bne.n	8014654 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014650:	4b17      	ldr	r3, [pc, #92]	; (80146b0 <netif_set_addr+0x90>)
 8014652:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d003      	beq.n	8014662 <netif_set_addr+0x42>
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d101      	bne.n	8014666 <netif_set_addr+0x46>
 8014662:	2301      	movs	r3, #1
 8014664:	e000      	b.n	8014668 <netif_set_addr+0x48>
 8014666:	2300      	movs	r3, #0
 8014668:	617b      	str	r3, [r7, #20]
  if (remove) {
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d006      	beq.n	801467e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014670:	f107 0310 	add.w	r3, r7, #16
 8014674:	461a      	mov	r2, r3
 8014676:	68b9      	ldr	r1, [r7, #8]
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f7ff ff49 	bl	8014510 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801467e:	69fa      	ldr	r2, [r7, #28]
 8014680:	6879      	ldr	r1, [r7, #4]
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f7ff ff8e 	bl	80145a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8014688:	69ba      	ldr	r2, [r7, #24]
 801468a:	6839      	ldr	r1, [r7, #0]
 801468c:	68f8      	ldr	r0, [r7, #12]
 801468e:	f7ff ffa8 	bl	80145e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d106      	bne.n	80146a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014698:	f107 0310 	add.w	r3, r7, #16
 801469c:	461a      	mov	r2, r3
 801469e:	68b9      	ldr	r1, [r7, #8]
 80146a0:	68f8      	ldr	r0, [r7, #12]
 80146a2:	f7ff ff35 	bl	8014510 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80146a6:	bf00      	nop
 80146a8:	3720      	adds	r7, #32
 80146aa:	46bd      	mov	sp, r7
 80146ac:	bd80      	pop	{r7, pc}
 80146ae:	bf00      	nop
 80146b0:	08024690 	.word	0x08024690

080146b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80146bc:	4a04      	ldr	r2, [pc, #16]	; (80146d0 <netif_set_default+0x1c>)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80146c2:	bf00      	nop
 80146c4:	370c      	adds	r7, #12
 80146c6:	46bd      	mov	sp, r7
 80146c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146cc:	4770      	bx	lr
 80146ce:	bf00      	nop
 80146d0:	2400cb48 	.word	0x2400cb48

080146d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d107      	bne.n	80146f2 <netif_set_up+0x1e>
 80146e2:	4b0f      	ldr	r3, [pc, #60]	; (8014720 <netif_set_up+0x4c>)
 80146e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80146e8:	490e      	ldr	r1, [pc, #56]	; (8014724 <netif_set_up+0x50>)
 80146ea:	480f      	ldr	r0, [pc, #60]	; (8014728 <netif_set_up+0x54>)
 80146ec:	f00c f83c 	bl	8020768 <iprintf>
 80146f0:	e013      	b.n	801471a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80146f8:	f003 0301 	and.w	r3, r3, #1
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d10c      	bne.n	801471a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014706:	f043 0301 	orr.w	r3, r3, #1
 801470a:	b2da      	uxtb	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014712:	2103      	movs	r1, #3
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f000 f809 	bl	801472c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801471a:	3708      	adds	r7, #8
 801471c:	46bd      	mov	sp, r7
 801471e:	bd80      	pop	{r7, pc}
 8014720:	08021af0 	.word	0x08021af0
 8014724:	08021c78 	.word	0x08021c78
 8014728:	08021b40 	.word	0x08021b40

0801472c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	460b      	mov	r3, r1
 8014736:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d106      	bne.n	801474c <netif_issue_reports+0x20>
 801473e:	4b18      	ldr	r3, [pc, #96]	; (80147a0 <netif_issue_reports+0x74>)
 8014740:	f240 326d 	movw	r2, #877	; 0x36d
 8014744:	4917      	ldr	r1, [pc, #92]	; (80147a4 <netif_issue_reports+0x78>)
 8014746:	4818      	ldr	r0, [pc, #96]	; (80147a8 <netif_issue_reports+0x7c>)
 8014748:	f00c f80e 	bl	8020768 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014752:	f003 0304 	and.w	r3, r3, #4
 8014756:	2b00      	cmp	r3, #0
 8014758:	d01e      	beq.n	8014798 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014760:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014764:	2b00      	cmp	r3, #0
 8014766:	d017      	beq.n	8014798 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014768:	78fb      	ldrb	r3, [r7, #3]
 801476a:	f003 0301 	and.w	r3, r3, #1
 801476e:	2b00      	cmp	r3, #0
 8014770:	d013      	beq.n	801479a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	3304      	adds	r3, #4
 8014776:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014778:	2b00      	cmp	r3, #0
 801477a:	d00e      	beq.n	801479a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014782:	f003 0308 	and.w	r3, r3, #8
 8014786:	2b00      	cmp	r3, #0
 8014788:	d007      	beq.n	801479a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	3304      	adds	r3, #4
 801478e:	4619      	mov	r1, r3
 8014790:	6878      	ldr	r0, [r7, #4]
 8014792:	f009 fc61 	bl	801e058 <etharp_request>
 8014796:	e000      	b.n	801479a <netif_issue_reports+0x6e>
    return;
 8014798:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801479a:	3708      	adds	r7, #8
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	08021af0 	.word	0x08021af0
 80147a4:	08021c94 	.word	0x08021c94
 80147a8:	08021b40 	.word	0x08021b40

080147ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d107      	bne.n	80147ca <netif_set_down+0x1e>
 80147ba:	4b12      	ldr	r3, [pc, #72]	; (8014804 <netif_set_down+0x58>)
 80147bc:	f240 329b 	movw	r2, #923	; 0x39b
 80147c0:	4911      	ldr	r1, [pc, #68]	; (8014808 <netif_set_down+0x5c>)
 80147c2:	4812      	ldr	r0, [pc, #72]	; (801480c <netif_set_down+0x60>)
 80147c4:	f00b ffd0 	bl	8020768 <iprintf>
 80147c8:	e019      	b.n	80147fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147d0:	f003 0301 	and.w	r3, r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d012      	beq.n	80147fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147de:	f023 0301 	bic.w	r3, r3, #1
 80147e2:	b2da      	uxtb	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80147f0:	f003 0308 	and.w	r3, r3, #8
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d002      	beq.n	80147fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f008 ffe7 	bl	801d7cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80147fe:	3708      	adds	r7, #8
 8014800:	46bd      	mov	sp, r7
 8014802:	bd80      	pop	{r7, pc}
 8014804:	08021af0 	.word	0x08021af0
 8014808:	08021cb8 	.word	0x08021cb8
 801480c:	08021b40 	.word	0x08021b40

08014810 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b082      	sub	sp, #8
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d107      	bne.n	801482e <netif_set_link_up+0x1e>
 801481e:	4b15      	ldr	r3, [pc, #84]	; (8014874 <netif_set_link_up+0x64>)
 8014820:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8014824:	4914      	ldr	r1, [pc, #80]	; (8014878 <netif_set_link_up+0x68>)
 8014826:	4815      	ldr	r0, [pc, #84]	; (801487c <netif_set_link_up+0x6c>)
 8014828:	f00b ff9e 	bl	8020768 <iprintf>
 801482c:	e01e      	b.n	801486c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014834:	f003 0304 	and.w	r3, r3, #4
 8014838:	2b00      	cmp	r3, #0
 801483a:	d117      	bne.n	801486c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014842:	f043 0304 	orr.w	r3, r3, #4
 8014846:	b2da      	uxtb	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f007 fa2c 	bl	801bcac <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014854:	2103      	movs	r1, #3
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f7ff ff68 	bl	801472c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	69db      	ldr	r3, [r3, #28]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d003      	beq.n	801486c <netif_set_link_up+0x5c>
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	69db      	ldr	r3, [r3, #28]
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801486c:	3708      	adds	r7, #8
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	08021af0 	.word	0x08021af0
 8014878:	08021cd8 	.word	0x08021cd8
 801487c:	08021b40 	.word	0x08021b40

08014880 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b082      	sub	sp, #8
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d107      	bne.n	801489e <netif_set_link_down+0x1e>
 801488e:	4b11      	ldr	r3, [pc, #68]	; (80148d4 <netif_set_link_down+0x54>)
 8014890:	f240 4206 	movw	r2, #1030	; 0x406
 8014894:	4910      	ldr	r1, [pc, #64]	; (80148d8 <netif_set_link_down+0x58>)
 8014896:	4811      	ldr	r0, [pc, #68]	; (80148dc <netif_set_link_down+0x5c>)
 8014898:	f00b ff66 	bl	8020768 <iprintf>
 801489c:	e017      	b.n	80148ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148a4:	f003 0304 	and.w	r3, r3, #4
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d010      	beq.n	80148ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80148b2:	f023 0304 	bic.w	r3, r3, #4
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	69db      	ldr	r3, [r3, #28]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d003      	beq.n	80148ce <netif_set_link_down+0x4e>
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	69db      	ldr	r3, [r3, #28]
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80148ce:	3708      	adds	r7, #8
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}
 80148d4:	08021af0 	.word	0x08021af0
 80148d8:	08021cfc 	.word	0x08021cfc
 80148dc:	08021b40 	.word	0x08021b40

080148e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d002      	beq.n	80148f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	683a      	ldr	r2, [r7, #0]
 80148f4:	61da      	str	r2, [r3, #28]
  }
}
 80148f6:	bf00      	nop
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014902:	b480      	push	{r7}
 8014904:	b085      	sub	sp, #20
 8014906:	af00      	add	r7, sp, #0
 8014908:	60f8      	str	r0, [r7, #12]
 801490a:	60b9      	str	r1, [r7, #8]
 801490c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801490e:	f06f 030b 	mvn.w	r3, #11
}
 8014912:	4618      	mov	r0, r3
 8014914:	3714      	adds	r7, #20
 8014916:	46bd      	mov	sp, r7
 8014918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491c:	4770      	bx	lr
	...

08014920 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8014920:	b480      	push	{r7}
 8014922:	b085      	sub	sp, #20
 8014924:	af00      	add	r7, sp, #0
 8014926:	4603      	mov	r3, r0
 8014928:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801492a:	79fb      	ldrb	r3, [r7, #7]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d013      	beq.n	8014958 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8014930:	4b0d      	ldr	r3, [pc, #52]	; (8014968 <netif_get_by_index+0x48>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	60fb      	str	r3, [r7, #12]
 8014936:	e00c      	b.n	8014952 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801493e:	3301      	adds	r3, #1
 8014940:	b2db      	uxtb	r3, r3
 8014942:	79fa      	ldrb	r2, [r7, #7]
 8014944:	429a      	cmp	r2, r3
 8014946:	d101      	bne.n	801494c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	e006      	b.n	801495a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	60fb      	str	r3, [r7, #12]
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d1ef      	bne.n	8014938 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014958:	2300      	movs	r3, #0
}
 801495a:	4618      	mov	r0, r3
 801495c:	3714      	adds	r7, #20
 801495e:	46bd      	mov	sp, r7
 8014960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014964:	4770      	bx	lr
 8014966:	bf00      	nop
 8014968:	2400cb44 	.word	0x2400cb44

0801496c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b082      	sub	sp, #8
 8014970:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014972:	f00b f815 	bl	801f9a0 <sys_arch_protect>
 8014976:	6038      	str	r0, [r7, #0]
 8014978:	4b0d      	ldr	r3, [pc, #52]	; (80149b0 <pbuf_free_ooseq+0x44>)
 801497a:	2200      	movs	r2, #0
 801497c:	701a      	strb	r2, [r3, #0]
 801497e:	6838      	ldr	r0, [r7, #0]
 8014980:	f00b f81c 	bl	801f9bc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014984:	4b0b      	ldr	r3, [pc, #44]	; (80149b4 <pbuf_free_ooseq+0x48>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	607b      	str	r3, [r7, #4]
 801498a:	e00a      	b.n	80149a2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014990:	2b00      	cmp	r3, #0
 8014992:	d003      	beq.n	801499c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f002 f981 	bl	8016c9c <tcp_free_ooseq>
      return;
 801499a:	e005      	b.n	80149a8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	68db      	ldr	r3, [r3, #12]
 80149a0:	607b      	str	r3, [r7, #4]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1f1      	bne.n	801498c <pbuf_free_ooseq+0x20>
    }
  }
}
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	2400cb4d 	.word	0x2400cb4d
 80149b4:	2400cb5c 	.word	0x2400cb5c

080149b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b082      	sub	sp, #8
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80149c0:	f7ff ffd4 	bl	801496c <pbuf_free_ooseq>
}
 80149c4:	bf00      	nop
 80149c6:	3708      	adds	r7, #8
 80149c8:	46bd      	mov	sp, r7
 80149ca:	bd80      	pop	{r7, pc}

080149cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b082      	sub	sp, #8
 80149d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80149d2:	f00a ffe5 	bl	801f9a0 <sys_arch_protect>
 80149d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80149d8:	4b0f      	ldr	r3, [pc, #60]	; (8014a18 <pbuf_pool_is_empty+0x4c>)
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80149de:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <pbuf_pool_is_empty+0x4c>)
 80149e0:	2201      	movs	r2, #1
 80149e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f00a ffe9 	bl	801f9bc <sys_arch_unprotect>

  if (!queued) {
 80149ea:	78fb      	ldrb	r3, [r7, #3]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d10f      	bne.n	8014a10 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80149f0:	2100      	movs	r1, #0
 80149f2:	480a      	ldr	r0, [pc, #40]	; (8014a1c <pbuf_pool_is_empty+0x50>)
 80149f4:	f7fe fde2 	bl	80135bc <tcpip_try_callback>
 80149f8:	4603      	mov	r3, r0
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d008      	beq.n	8014a10 <pbuf_pool_is_empty+0x44>
 80149fe:	f00a ffcf 	bl	801f9a0 <sys_arch_protect>
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	4b04      	ldr	r3, [pc, #16]	; (8014a18 <pbuf_pool_is_empty+0x4c>)
 8014a06:	2200      	movs	r2, #0
 8014a08:	701a      	strb	r2, [r3, #0]
 8014a0a:	6878      	ldr	r0, [r7, #4]
 8014a0c:	f00a ffd6 	bl	801f9bc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8014a10:	bf00      	nop
 8014a12:	3708      	adds	r7, #8
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}
 8014a18:	2400cb4d 	.word	0x2400cb4d
 8014a1c:	080149b9 	.word	0x080149b9

08014a20 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8014a20:	b480      	push	{r7}
 8014a22:	b085      	sub	sp, #20
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	60f8      	str	r0, [r7, #12]
 8014a28:	60b9      	str	r1, [r7, #8]
 8014a2a:	4611      	mov	r1, r2
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	460b      	mov	r3, r1
 8014a30:	80fb      	strh	r3, [r7, #6]
 8014a32:	4613      	mov	r3, r2
 8014a34:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	68ba      	ldr	r2, [r7, #8]
 8014a40:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	88fa      	ldrh	r2, [r7, #6]
 8014a46:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	88ba      	ldrh	r2, [r7, #4]
 8014a4c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8014a4e:	8b3b      	ldrh	r3, [r7, #24]
 8014a50:	b2da      	uxtb	r2, r3
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	7f3a      	ldrb	r2, [r7, #28]
 8014a5a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	2201      	movs	r2, #1
 8014a60:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2200      	movs	r2, #0
 8014a66:	73da      	strb	r2, [r3, #15]
}
 8014a68:	bf00      	nop
 8014a6a:	3714      	adds	r7, #20
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b08c      	sub	sp, #48	; 0x30
 8014a78:	af02      	add	r7, sp, #8
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	71fb      	strb	r3, [r7, #7]
 8014a7e:	460b      	mov	r3, r1
 8014a80:	80bb      	strh	r3, [r7, #4]
 8014a82:	4613      	mov	r3, r2
 8014a84:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8014a86:	79fb      	ldrb	r3, [r7, #7]
 8014a88:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014a8a:	887b      	ldrh	r3, [r7, #2]
 8014a8c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014a90:	d07f      	beq.n	8014b92 <pbuf_alloc+0x11e>
 8014a92:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014a96:	f300 80c8 	bgt.w	8014c2a <pbuf_alloc+0x1b6>
 8014a9a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014a9e:	d010      	beq.n	8014ac2 <pbuf_alloc+0x4e>
 8014aa0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014aa4:	f300 80c1 	bgt.w	8014c2a <pbuf_alloc+0x1b6>
 8014aa8:	2b01      	cmp	r3, #1
 8014aaa:	d002      	beq.n	8014ab2 <pbuf_alloc+0x3e>
 8014aac:	2b41      	cmp	r3, #65	; 0x41
 8014aae:	f040 80bc 	bne.w	8014c2a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014ab2:	887a      	ldrh	r2, [r7, #2]
 8014ab4:	88bb      	ldrh	r3, [r7, #4]
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	2000      	movs	r0, #0
 8014aba:	f000 f8d1 	bl	8014c60 <pbuf_alloc_reference>
 8014abe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014ac0:	e0bd      	b.n	8014c3e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8014ac6:	2300      	movs	r3, #0
 8014ac8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014aca:	88bb      	ldrh	r3, [r7, #4]
 8014acc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014ace:	200c      	movs	r0, #12
 8014ad0:	f7ff fb8e 	bl	80141f0 <memp_malloc>
 8014ad4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014ad6:	693b      	ldr	r3, [r7, #16]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d109      	bne.n	8014af0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014adc:	f7ff ff76 	bl	80149cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d002      	beq.n	8014aec <pbuf_alloc+0x78>
            pbuf_free(p);
 8014ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ae8:	f000 faa8 	bl	801503c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014aec:	2300      	movs	r3, #0
 8014aee:	e0a7      	b.n	8014c40 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014af2:	3303      	adds	r3, #3
 8014af4:	b29b      	uxth	r3, r3
 8014af6:	f023 0303 	bic.w	r3, r3, #3
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	8b7a      	ldrh	r2, [r7, #26]
 8014b04:	4293      	cmp	r3, r2
 8014b06:	bf28      	it	cs
 8014b08:	4613      	movcs	r3, r2
 8014b0a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b0e:	3310      	adds	r3, #16
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	4413      	add	r3, r2
 8014b14:	3303      	adds	r3, #3
 8014b16:	f023 0303 	bic.w	r3, r3, #3
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	89f9      	ldrh	r1, [r7, #14]
 8014b1e:	8b7a      	ldrh	r2, [r7, #26]
 8014b20:	2300      	movs	r3, #0
 8014b22:	9301      	str	r3, [sp, #4]
 8014b24:	887b      	ldrh	r3, [r7, #2]
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	460b      	mov	r3, r1
 8014b2a:	4601      	mov	r1, r0
 8014b2c:	6938      	ldr	r0, [r7, #16]
 8014b2e:	f7ff ff77 	bl	8014a20 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	f003 0303 	and.w	r3, r3, #3
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d006      	beq.n	8014b4c <pbuf_alloc+0xd8>
 8014b3e:	4b42      	ldr	r3, [pc, #264]	; (8014c48 <pbuf_alloc+0x1d4>)
 8014b40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014b44:	4941      	ldr	r1, [pc, #260]	; (8014c4c <pbuf_alloc+0x1d8>)
 8014b46:	4842      	ldr	r0, [pc, #264]	; (8014c50 <pbuf_alloc+0x1dc>)
 8014b48:	f00b fe0e 	bl	8020768 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014b4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b4e:	3303      	adds	r3, #3
 8014b50:	f023 0303 	bic.w	r3, r3, #3
 8014b54:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8014b58:	d106      	bne.n	8014b68 <pbuf_alloc+0xf4>
 8014b5a:	4b3b      	ldr	r3, [pc, #236]	; (8014c48 <pbuf_alloc+0x1d4>)
 8014b5c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014b60:	493c      	ldr	r1, [pc, #240]	; (8014c54 <pbuf_alloc+0x1e0>)
 8014b62:	483b      	ldr	r0, [pc, #236]	; (8014c50 <pbuf_alloc+0x1dc>)
 8014b64:	f00b fe00 	bl	8020768 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d102      	bne.n	8014b74 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	627b      	str	r3, [r7, #36]	; 0x24
 8014b72:	e002      	b.n	8014b7a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	693a      	ldr	r2, [r7, #16]
 8014b78:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014b7e:	8b7a      	ldrh	r2, [r7, #26]
 8014b80:	89fb      	ldrh	r3, [r7, #14]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014b8a:	8b7b      	ldrh	r3, [r7, #26]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d19e      	bne.n	8014ace <pbuf_alloc+0x5a>
      break;
 8014b90:	e055      	b.n	8014c3e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014b92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b94:	3303      	adds	r3, #3
 8014b96:	b29b      	uxth	r3, r3
 8014b98:	f023 0303 	bic.w	r3, r3, #3
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	88bb      	ldrh	r3, [r7, #4]
 8014ba0:	3303      	adds	r3, #3
 8014ba2:	b29b      	uxth	r3, r3
 8014ba4:	f023 0303 	bic.w	r3, r3, #3
 8014ba8:	b29b      	uxth	r3, r3
 8014baa:	4413      	add	r3, r2
 8014bac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014bae:	8b3b      	ldrh	r3, [r7, #24]
 8014bb0:	3310      	adds	r3, #16
 8014bb2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014bb4:	8b3a      	ldrh	r2, [r7, #24]
 8014bb6:	88bb      	ldrh	r3, [r7, #4]
 8014bb8:	3303      	adds	r3, #3
 8014bba:	f023 0303 	bic.w	r3, r3, #3
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d306      	bcc.n	8014bd0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014bc2:	8afa      	ldrh	r2, [r7, #22]
 8014bc4:	88bb      	ldrh	r3, [r7, #4]
 8014bc6:	3303      	adds	r3, #3
 8014bc8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014bcc:	429a      	cmp	r2, r3
 8014bce:	d201      	bcs.n	8014bd4 <pbuf_alloc+0x160>
        return NULL;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	e035      	b.n	8014c40 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014bd4:	8afb      	ldrh	r3, [r7, #22]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff f966 	bl	8013ea8 <mem_malloc>
 8014bdc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d101      	bne.n	8014be8 <pbuf_alloc+0x174>
        return NULL;
 8014be4:	2300      	movs	r3, #0
 8014be6:	e02b      	b.n	8014c40 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014be8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bea:	3310      	adds	r3, #16
 8014bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014bee:	4413      	add	r3, r2
 8014bf0:	3303      	adds	r3, #3
 8014bf2:	f023 0303 	bic.w	r3, r3, #3
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	88b9      	ldrh	r1, [r7, #4]
 8014bfa:	88ba      	ldrh	r2, [r7, #4]
 8014bfc:	2300      	movs	r3, #0
 8014bfe:	9301      	str	r3, [sp, #4]
 8014c00:	887b      	ldrh	r3, [r7, #2]
 8014c02:	9300      	str	r3, [sp, #0]
 8014c04:	460b      	mov	r3, r1
 8014c06:	4601      	mov	r1, r0
 8014c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c0a:	f7ff ff09 	bl	8014a20 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8014c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c10:	685b      	ldr	r3, [r3, #4]
 8014c12:	f003 0303 	and.w	r3, r3, #3
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d010      	beq.n	8014c3c <pbuf_alloc+0x1c8>
 8014c1a:	4b0b      	ldr	r3, [pc, #44]	; (8014c48 <pbuf_alloc+0x1d4>)
 8014c1c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8014c20:	490d      	ldr	r1, [pc, #52]	; (8014c58 <pbuf_alloc+0x1e4>)
 8014c22:	480b      	ldr	r0, [pc, #44]	; (8014c50 <pbuf_alloc+0x1dc>)
 8014c24:	f00b fda0 	bl	8020768 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014c28:	e008      	b.n	8014c3c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014c2a:	4b07      	ldr	r3, [pc, #28]	; (8014c48 <pbuf_alloc+0x1d4>)
 8014c2c:	f240 1227 	movw	r2, #295	; 0x127
 8014c30:	490a      	ldr	r1, [pc, #40]	; (8014c5c <pbuf_alloc+0x1e8>)
 8014c32:	4807      	ldr	r0, [pc, #28]	; (8014c50 <pbuf_alloc+0x1dc>)
 8014c34:	f00b fd98 	bl	8020768 <iprintf>
      return NULL;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	e001      	b.n	8014c40 <pbuf_alloc+0x1cc>
      break;
 8014c3c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8014c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3728      	adds	r7, #40	; 0x28
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}
 8014c48:	08021d20 	.word	0x08021d20
 8014c4c:	08021d50 	.word	0x08021d50
 8014c50:	08021d80 	.word	0x08021d80
 8014c54:	08021da8 	.word	0x08021da8
 8014c58:	08021ddc 	.word	0x08021ddc
 8014c5c:	08021e08 	.word	0x08021e08

08014c60 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b086      	sub	sp, #24
 8014c64:	af02      	add	r7, sp, #8
 8014c66:	6078      	str	r0, [r7, #4]
 8014c68:	460b      	mov	r3, r1
 8014c6a:	807b      	strh	r3, [r7, #2]
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014c70:	883b      	ldrh	r3, [r7, #0]
 8014c72:	2b41      	cmp	r3, #65	; 0x41
 8014c74:	d009      	beq.n	8014c8a <pbuf_alloc_reference+0x2a>
 8014c76:	883b      	ldrh	r3, [r7, #0]
 8014c78:	2b01      	cmp	r3, #1
 8014c7a:	d006      	beq.n	8014c8a <pbuf_alloc_reference+0x2a>
 8014c7c:	4b0f      	ldr	r3, [pc, #60]	; (8014cbc <pbuf_alloc_reference+0x5c>)
 8014c7e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8014c82:	490f      	ldr	r1, [pc, #60]	; (8014cc0 <pbuf_alloc_reference+0x60>)
 8014c84:	480f      	ldr	r0, [pc, #60]	; (8014cc4 <pbuf_alloc_reference+0x64>)
 8014c86:	f00b fd6f 	bl	8020768 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014c8a:	200b      	movs	r0, #11
 8014c8c:	f7ff fab0 	bl	80141f0 <memp_malloc>
 8014c90:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d101      	bne.n	8014c9c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014c98:	2300      	movs	r3, #0
 8014c9a:	e00b      	b.n	8014cb4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014c9c:	8879      	ldrh	r1, [r7, #2]
 8014c9e:	887a      	ldrh	r2, [r7, #2]
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	9301      	str	r3, [sp, #4]
 8014ca4:	883b      	ldrh	r3, [r7, #0]
 8014ca6:	9300      	str	r3, [sp, #0]
 8014ca8:	460b      	mov	r3, r1
 8014caa:	6879      	ldr	r1, [r7, #4]
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f7ff feb7 	bl	8014a20 <pbuf_init_alloced_pbuf>
  return p;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
}
 8014cb4:	4618      	mov	r0, r3
 8014cb6:	3710      	adds	r7, #16
 8014cb8:	46bd      	mov	sp, r7
 8014cba:	bd80      	pop	{r7, pc}
 8014cbc:	08021d20 	.word	0x08021d20
 8014cc0:	08021e24 	.word	0x08021e24
 8014cc4:	08021d80 	.word	0x08021d80

08014cc8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b088      	sub	sp, #32
 8014ccc:	af02      	add	r7, sp, #8
 8014cce:	607b      	str	r3, [r7, #4]
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	73fb      	strb	r3, [r7, #15]
 8014cd4:	460b      	mov	r3, r1
 8014cd6:	81bb      	strh	r3, [r7, #12]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014cdc:	7bfb      	ldrb	r3, [r7, #15]
 8014cde:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014ce0:	8a7b      	ldrh	r3, [r7, #18]
 8014ce2:	3303      	adds	r3, #3
 8014ce4:	f023 0203 	bic.w	r2, r3, #3
 8014ce8:	89bb      	ldrh	r3, [r7, #12]
 8014cea:	441a      	add	r2, r3
 8014cec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d901      	bls.n	8014cf6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	e018      	b.n	8014d28 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014cf6:	6a3b      	ldr	r3, [r7, #32]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d007      	beq.n	8014d0c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014cfc:	8a7b      	ldrh	r3, [r7, #18]
 8014cfe:	3303      	adds	r3, #3
 8014d00:	f023 0303 	bic.w	r3, r3, #3
 8014d04:	6a3a      	ldr	r2, [r7, #32]
 8014d06:	4413      	add	r3, r2
 8014d08:	617b      	str	r3, [r7, #20]
 8014d0a:	e001      	b.n	8014d10 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	89b9      	ldrh	r1, [r7, #12]
 8014d14:	89ba      	ldrh	r2, [r7, #12]
 8014d16:	2302      	movs	r3, #2
 8014d18:	9301      	str	r3, [sp, #4]
 8014d1a:	897b      	ldrh	r3, [r7, #10]
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	460b      	mov	r3, r1
 8014d20:	6979      	ldr	r1, [r7, #20]
 8014d22:	f7ff fe7d 	bl	8014a20 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014d26:	687b      	ldr	r3, [r7, #4]
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3718      	adds	r7, #24
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}

08014d30 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b084      	sub	sp, #16
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	460b      	mov	r3, r1
 8014d3a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d106      	bne.n	8014d50 <pbuf_realloc+0x20>
 8014d42:	4b3a      	ldr	r3, [pc, #232]	; (8014e2c <pbuf_realloc+0xfc>)
 8014d44:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8014d48:	4939      	ldr	r1, [pc, #228]	; (8014e30 <pbuf_realloc+0x100>)
 8014d4a:	483a      	ldr	r0, [pc, #232]	; (8014e34 <pbuf_realloc+0x104>)
 8014d4c:	f00b fd0c 	bl	8020768 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	891b      	ldrh	r3, [r3, #8]
 8014d54:	887a      	ldrh	r2, [r7, #2]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d263      	bcs.n	8014e22 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	891a      	ldrh	r2, [r3, #8]
 8014d5e:	887b      	ldrh	r3, [r7, #2]
 8014d60:	1ad3      	subs	r3, r2, r3
 8014d62:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014d64:	887b      	ldrh	r3, [r7, #2]
 8014d66:	817b      	strh	r3, [r7, #10]
  q = p;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014d6c:	e018      	b.n	8014da0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	895b      	ldrh	r3, [r3, #10]
 8014d72:	897a      	ldrh	r2, [r7, #10]
 8014d74:	1ad3      	subs	r3, r2, r3
 8014d76:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	891a      	ldrh	r2, [r3, #8]
 8014d7c:	893b      	ldrh	r3, [r7, #8]
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	b29a      	uxth	r2, r3
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d106      	bne.n	8014da0 <pbuf_realloc+0x70>
 8014d92:	4b26      	ldr	r3, [pc, #152]	; (8014e2c <pbuf_realloc+0xfc>)
 8014d94:	f240 12af 	movw	r2, #431	; 0x1af
 8014d98:	4927      	ldr	r1, [pc, #156]	; (8014e38 <pbuf_realloc+0x108>)
 8014d9a:	4826      	ldr	r0, [pc, #152]	; (8014e34 <pbuf_realloc+0x104>)
 8014d9c:	f00b fce4 	bl	8020768 <iprintf>
  while (rem_len > q->len) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	895b      	ldrh	r3, [r3, #10]
 8014da4:	897a      	ldrh	r2, [r7, #10]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d8e1      	bhi.n	8014d6e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	7b1b      	ldrb	r3, [r3, #12]
 8014dae:	f003 030f 	and.w	r3, r3, #15
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d121      	bne.n	8014dfa <pbuf_realloc+0xca>
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	895b      	ldrh	r3, [r3, #10]
 8014dba:	897a      	ldrh	r2, [r7, #10]
 8014dbc:	429a      	cmp	r2, r3
 8014dbe:	d01c      	beq.n	8014dfa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	7b5b      	ldrb	r3, [r3, #13]
 8014dc4:	f003 0302 	and.w	r3, r3, #2
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d116      	bne.n	8014dfa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014dcc:	68fb      	ldr	r3, [r7, #12]
 8014dce:	685a      	ldr	r2, [r3, #4]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	1ad3      	subs	r3, r2, r3
 8014dd4:	b29a      	uxth	r2, r3
 8014dd6:	897b      	ldrh	r3, [r7, #10]
 8014dd8:	4413      	add	r3, r2
 8014dda:	b29b      	uxth	r3, r3
 8014ddc:	4619      	mov	r1, r3
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f7fe ff58 	bl	8013c94 <mem_trim>
 8014de4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d106      	bne.n	8014dfa <pbuf_realloc+0xca>
 8014dec:	4b0f      	ldr	r3, [pc, #60]	; (8014e2c <pbuf_realloc+0xfc>)
 8014dee:	f240 12bd 	movw	r2, #445	; 0x1bd
 8014df2:	4912      	ldr	r1, [pc, #72]	; (8014e3c <pbuf_realloc+0x10c>)
 8014df4:	480f      	ldr	r0, [pc, #60]	; (8014e34 <pbuf_realloc+0x104>)
 8014df6:	f00b fcb7 	bl	8020768 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	897a      	ldrh	r2, [r7, #10]
 8014dfe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	895a      	ldrh	r2, [r3, #10]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d004      	beq.n	8014e1a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	4618      	mov	r0, r3
 8014e16:	f000 f911 	bl	801503c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	601a      	str	r2, [r3, #0]
 8014e20:	e000      	b.n	8014e24 <pbuf_realloc+0xf4>
    return;
 8014e22:	bf00      	nop

}
 8014e24:	3710      	adds	r7, #16
 8014e26:	46bd      	mov	sp, r7
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	08021d20 	.word	0x08021d20
 8014e30:	08021e38 	.word	0x08021e38
 8014e34:	08021d80 	.word	0x08021d80
 8014e38:	08021e50 	.word	0x08021e50
 8014e3c:	08021e68 	.word	0x08021e68

08014e40 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b086      	sub	sp, #24
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	60f8      	str	r0, [r7, #12]
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d106      	bne.n	8014e62 <pbuf_add_header_impl+0x22>
 8014e54:	4b2b      	ldr	r3, [pc, #172]	; (8014f04 <pbuf_add_header_impl+0xc4>)
 8014e56:	f240 12df 	movw	r2, #479	; 0x1df
 8014e5a:	492b      	ldr	r1, [pc, #172]	; (8014f08 <pbuf_add_header_impl+0xc8>)
 8014e5c:	482b      	ldr	r0, [pc, #172]	; (8014f0c <pbuf_add_header_impl+0xcc>)
 8014e5e:	f00b fc83 	bl	8020768 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d003      	beq.n	8014e70 <pbuf_add_header_impl+0x30>
 8014e68:	68bb      	ldr	r3, [r7, #8]
 8014e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e6e:	d301      	bcc.n	8014e74 <pbuf_add_header_impl+0x34>
    return 1;
 8014e70:	2301      	movs	r3, #1
 8014e72:	e043      	b.n	8014efc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <pbuf_add_header_impl+0x3e>
    return 0;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	e03e      	b.n	8014efc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	891a      	ldrh	r2, [r3, #8]
 8014e86:	8a7b      	ldrh	r3, [r7, #18]
 8014e88:	4413      	add	r3, r2
 8014e8a:	b29b      	uxth	r3, r3
 8014e8c:	8a7a      	ldrh	r2, [r7, #18]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	d901      	bls.n	8014e96 <pbuf_add_header_impl+0x56>
    return 1;
 8014e92:	2301      	movs	r3, #1
 8014e94:	e032      	b.n	8014efc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	7b1b      	ldrb	r3, [r3, #12]
 8014e9a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014e9c:	8a3b      	ldrh	r3, [r7, #16]
 8014e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00c      	beq.n	8014ec0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	685a      	ldr	r2, [r3, #4]
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	425b      	negs	r3, r3
 8014eae:	4413      	add	r3, r2
 8014eb0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	3310      	adds	r3, #16
 8014eb6:	697a      	ldr	r2, [r7, #20]
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d20d      	bcs.n	8014ed8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	e01d      	b.n	8014efc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014ec0:	79fb      	ldrb	r3, [r7, #7]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d006      	beq.n	8014ed4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	685a      	ldr	r2, [r3, #4]
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	425b      	negs	r3, r3
 8014ece:	4413      	add	r3, r2
 8014ed0:	617b      	str	r3, [r7, #20]
 8014ed2:	e001      	b.n	8014ed8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	e011      	b.n	8014efc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	697a      	ldr	r2, [r7, #20]
 8014edc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	895a      	ldrh	r2, [r3, #10]
 8014ee2:	8a7b      	ldrh	r3, [r7, #18]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	b29a      	uxth	r2, r3
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	891a      	ldrh	r2, [r3, #8]
 8014ef0:	8a7b      	ldrh	r3, [r7, #18]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	b29a      	uxth	r2, r3
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	811a      	strh	r2, [r3, #8]


  return 0;
 8014efa:	2300      	movs	r3, #0
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3718      	adds	r7, #24
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	08021d20 	.word	0x08021d20
 8014f08:	08021e84 	.word	0x08021e84
 8014f0c:	08021d80 	.word	0x08021d80

08014f10 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014f1a:	2200      	movs	r2, #0
 8014f1c:	6839      	ldr	r1, [r7, #0]
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f7ff ff8e 	bl	8014e40 <pbuf_add_header_impl>
 8014f24:	4603      	mov	r3, r0
}
 8014f26:	4618      	mov	r0, r3
 8014f28:	3708      	adds	r7, #8
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd80      	pop	{r7, pc}
	...

08014f30 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b084      	sub	sp, #16
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d106      	bne.n	8014f4e <pbuf_remove_header+0x1e>
 8014f40:	4b20      	ldr	r3, [pc, #128]	; (8014fc4 <pbuf_remove_header+0x94>)
 8014f42:	f240 224b 	movw	r2, #587	; 0x24b
 8014f46:	4920      	ldr	r1, [pc, #128]	; (8014fc8 <pbuf_remove_header+0x98>)
 8014f48:	4820      	ldr	r0, [pc, #128]	; (8014fcc <pbuf_remove_header+0x9c>)
 8014f4a:	f00b fc0d 	bl	8020768 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d003      	beq.n	8014f5c <pbuf_remove_header+0x2c>
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f5a:	d301      	bcc.n	8014f60 <pbuf_remove_header+0x30>
    return 1;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e02c      	b.n	8014fba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d101      	bne.n	8014f6a <pbuf_remove_header+0x3a>
    return 0;
 8014f66:	2300      	movs	r3, #0
 8014f68:	e027      	b.n	8014fba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	895b      	ldrh	r3, [r3, #10]
 8014f72:	89fa      	ldrh	r2, [r7, #14]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d908      	bls.n	8014f8a <pbuf_remove_header+0x5a>
 8014f78:	4b12      	ldr	r3, [pc, #72]	; (8014fc4 <pbuf_remove_header+0x94>)
 8014f7a:	f240 2255 	movw	r2, #597	; 0x255
 8014f7e:	4914      	ldr	r1, [pc, #80]	; (8014fd0 <pbuf_remove_header+0xa0>)
 8014f80:	4812      	ldr	r0, [pc, #72]	; (8014fcc <pbuf_remove_header+0x9c>)
 8014f82:	f00b fbf1 	bl	8020768 <iprintf>
 8014f86:	2301      	movs	r3, #1
 8014f88:	e017      	b.n	8014fba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	685a      	ldr	r2, [r3, #4]
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	441a      	add	r2, r3
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	895a      	ldrh	r2, [r3, #10]
 8014fa0:	89fb      	ldrh	r3, [r7, #14]
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	b29a      	uxth	r2, r3
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	891a      	ldrh	r2, [r3, #8]
 8014fae:	89fb      	ldrh	r3, [r7, #14]
 8014fb0:	1ad3      	subs	r3, r2, r3
 8014fb2:	b29a      	uxth	r2, r3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	08021d20 	.word	0x08021d20
 8014fc8:	08021e84 	.word	0x08021e84
 8014fcc:	08021d80 	.word	0x08021d80
 8014fd0:	08021e90 	.word	0x08021e90

08014fd4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	460b      	mov	r3, r1
 8014fde:	807b      	strh	r3, [r7, #2]
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014fe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	da08      	bge.n	8014ffe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014fec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014ff0:	425b      	negs	r3, r3
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	f7ff ff9b 	bl	8014f30 <pbuf_remove_header>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	e007      	b.n	801500e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014ffe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015002:	787a      	ldrb	r2, [r7, #1]
 8015004:	4619      	mov	r1, r3
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f7ff ff1a 	bl	8014e40 <pbuf_add_header_impl>
 801500c:	4603      	mov	r3, r0
  }
}
 801500e:	4618      	mov	r0, r3
 8015010:	3708      	adds	r7, #8
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b082      	sub	sp, #8
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	460b      	mov	r3, r1
 8015020:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8015022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015026:	2201      	movs	r2, #1
 8015028:	4619      	mov	r1, r3
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f7ff ffd2 	bl	8014fd4 <pbuf_header_impl>
 8015030:	4603      	mov	r3, r0
}
 8015032:	4618      	mov	r0, r3
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
	...

0801503c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b088      	sub	sp, #32
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d10b      	bne.n	8015062 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d106      	bne.n	801505e <pbuf_free+0x22>
 8015050:	4b3b      	ldr	r3, [pc, #236]	; (8015140 <pbuf_free+0x104>)
 8015052:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8015056:	493b      	ldr	r1, [pc, #236]	; (8015144 <pbuf_free+0x108>)
 8015058:	483b      	ldr	r0, [pc, #236]	; (8015148 <pbuf_free+0x10c>)
 801505a:	f00b fb85 	bl	8020768 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801505e:	2300      	movs	r3, #0
 8015060:	e069      	b.n	8015136 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8015062:	2300      	movs	r3, #0
 8015064:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8015066:	e062      	b.n	801512e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8015068:	f00a fc9a 	bl	801f9a0 <sys_arch_protect>
 801506c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	7b9b      	ldrb	r3, [r3, #14]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d106      	bne.n	8015084 <pbuf_free+0x48>
 8015076:	4b32      	ldr	r3, [pc, #200]	; (8015140 <pbuf_free+0x104>)
 8015078:	f240 22f1 	movw	r2, #753	; 0x2f1
 801507c:	4933      	ldr	r1, [pc, #204]	; (801514c <pbuf_free+0x110>)
 801507e:	4832      	ldr	r0, [pc, #200]	; (8015148 <pbuf_free+0x10c>)
 8015080:	f00b fb72 	bl	8020768 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	7b9b      	ldrb	r3, [r3, #14]
 8015088:	3b01      	subs	r3, #1
 801508a:	b2da      	uxtb	r2, r3
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	739a      	strb	r2, [r3, #14]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	7b9b      	ldrb	r3, [r3, #14]
 8015094:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8015096:	69b8      	ldr	r0, [r7, #24]
 8015098:	f00a fc90 	bl	801f9bc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801509c:	7dfb      	ldrb	r3, [r7, #23]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d143      	bne.n	801512a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	7b1b      	ldrb	r3, [r3, #12]
 80150ac:	f003 030f 	and.w	r3, r3, #15
 80150b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	7b5b      	ldrb	r3, [r3, #13]
 80150b6:	f003 0302 	and.w	r3, r3, #2
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d011      	beq.n	80150e2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	691b      	ldr	r3, [r3, #16]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d106      	bne.n	80150d8 <pbuf_free+0x9c>
 80150ca:	4b1d      	ldr	r3, [pc, #116]	; (8015140 <pbuf_free+0x104>)
 80150cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80150d0:	491f      	ldr	r1, [pc, #124]	; (8015150 <pbuf_free+0x114>)
 80150d2:	481d      	ldr	r0, [pc, #116]	; (8015148 <pbuf_free+0x10c>)
 80150d4:	f00b fb48 	bl	8020768 <iprintf>
        pc->custom_free_function(p);
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	691b      	ldr	r3, [r3, #16]
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	4798      	blx	r3
 80150e0:	e01d      	b.n	801511e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80150e2:	7bfb      	ldrb	r3, [r7, #15]
 80150e4:	2b02      	cmp	r3, #2
 80150e6:	d104      	bne.n	80150f2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80150e8:	6879      	ldr	r1, [r7, #4]
 80150ea:	200c      	movs	r0, #12
 80150ec:	f7ff f8f6 	bl	80142dc <memp_free>
 80150f0:	e015      	b.n	801511e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80150f2:	7bfb      	ldrb	r3, [r7, #15]
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d104      	bne.n	8015102 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80150f8:	6879      	ldr	r1, [r7, #4]
 80150fa:	200b      	movs	r0, #11
 80150fc:	f7ff f8ee 	bl	80142dc <memp_free>
 8015100:	e00d      	b.n	801511e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8015102:	7bfb      	ldrb	r3, [r7, #15]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d103      	bne.n	8015110 <pbuf_free+0xd4>
          mem_free(p);
 8015108:	6878      	ldr	r0, [r7, #4]
 801510a:	f7fe fd33 	bl	8013b74 <mem_free>
 801510e:	e006      	b.n	801511e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8015110:	4b0b      	ldr	r3, [pc, #44]	; (8015140 <pbuf_free+0x104>)
 8015112:	f240 320f 	movw	r2, #783	; 0x30f
 8015116:	490f      	ldr	r1, [pc, #60]	; (8015154 <pbuf_free+0x118>)
 8015118:	480b      	ldr	r0, [pc, #44]	; (8015148 <pbuf_free+0x10c>)
 801511a:	f00b fb25 	bl	8020768 <iprintf>
        }
      }
      count++;
 801511e:	7ffb      	ldrb	r3, [r7, #31]
 8015120:	3301      	adds	r3, #1
 8015122:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	607b      	str	r3, [r7, #4]
 8015128:	e001      	b.n	801512e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801512a:	2300      	movs	r3, #0
 801512c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d199      	bne.n	8015068 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8015134:	7ffb      	ldrb	r3, [r7, #31]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3720      	adds	r7, #32
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	08021d20 	.word	0x08021d20
 8015144:	08021e84 	.word	0x08021e84
 8015148:	08021d80 	.word	0x08021d80
 801514c:	08021eb0 	.word	0x08021eb0
 8015150:	08021ec8 	.word	0x08021ec8
 8015154:	08021eec 	.word	0x08021eec

08015158 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8015160:	2300      	movs	r3, #0
 8015162:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8015164:	e005      	b.n	8015172 <pbuf_clen+0x1a>
    ++len;
 8015166:	89fb      	ldrh	r3, [r7, #14]
 8015168:	3301      	adds	r3, #1
 801516a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d1f6      	bne.n	8015166 <pbuf_clen+0xe>
  }
  return len;
 8015178:	89fb      	ldrh	r3, [r7, #14]
}
 801517a:	4618      	mov	r0, r3
 801517c:	3714      	adds	r7, #20
 801517e:	46bd      	mov	sp, r7
 8015180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015184:	4770      	bx	lr
	...

08015188 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b084      	sub	sp, #16
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d016      	beq.n	80151c4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8015196:	f00a fc03 	bl	801f9a0 <sys_arch_protect>
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	7b9b      	ldrb	r3, [r3, #14]
 80151a0:	3301      	adds	r3, #1
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	739a      	strb	r2, [r3, #14]
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f00a fc07 	bl	801f9bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	7b9b      	ldrb	r3, [r3, #14]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d106      	bne.n	80151c4 <pbuf_ref+0x3c>
 80151b6:	4b05      	ldr	r3, [pc, #20]	; (80151cc <pbuf_ref+0x44>)
 80151b8:	f240 3242 	movw	r2, #834	; 0x342
 80151bc:	4904      	ldr	r1, [pc, #16]	; (80151d0 <pbuf_ref+0x48>)
 80151be:	4805      	ldr	r0, [pc, #20]	; (80151d4 <pbuf_ref+0x4c>)
 80151c0:	f00b fad2 	bl	8020768 <iprintf>
  }
}
 80151c4:	bf00      	nop
 80151c6:	3710      	adds	r7, #16
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	08021d20 	.word	0x08021d20
 80151d0:	08021f00 	.word	0x08021f00
 80151d4:	08021d80 	.word	0x08021d80

080151d8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b084      	sub	sp, #16
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
 80151e0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d002      	beq.n	80151ee <pbuf_cat+0x16>
 80151e8:	683b      	ldr	r3, [r7, #0]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d107      	bne.n	80151fe <pbuf_cat+0x26>
 80151ee:	4b20      	ldr	r3, [pc, #128]	; (8015270 <pbuf_cat+0x98>)
 80151f0:	f240 3259 	movw	r2, #857	; 0x359
 80151f4:	491f      	ldr	r1, [pc, #124]	; (8015274 <pbuf_cat+0x9c>)
 80151f6:	4820      	ldr	r0, [pc, #128]	; (8015278 <pbuf_cat+0xa0>)
 80151f8:	f00b fab6 	bl	8020768 <iprintf>
 80151fc:	e034      	b.n	8015268 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	60fb      	str	r3, [r7, #12]
 8015202:	e00a      	b.n	801521a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	891a      	ldrh	r2, [r3, #8]
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	891b      	ldrh	r3, [r3, #8]
 801520c:	4413      	add	r3, r2
 801520e:	b29a      	uxth	r2, r3
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	60fb      	str	r3, [r7, #12]
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	681b      	ldr	r3, [r3, #0]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d1f0      	bne.n	8015204 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	891a      	ldrh	r2, [r3, #8]
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	895b      	ldrh	r3, [r3, #10]
 801522a:	429a      	cmp	r2, r3
 801522c:	d006      	beq.n	801523c <pbuf_cat+0x64>
 801522e:	4b10      	ldr	r3, [pc, #64]	; (8015270 <pbuf_cat+0x98>)
 8015230:	f240 3262 	movw	r2, #866	; 0x362
 8015234:	4911      	ldr	r1, [pc, #68]	; (801527c <pbuf_cat+0xa4>)
 8015236:	4810      	ldr	r0, [pc, #64]	; (8015278 <pbuf_cat+0xa0>)
 8015238:	f00b fa96 	bl	8020768 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d006      	beq.n	8015252 <pbuf_cat+0x7a>
 8015244:	4b0a      	ldr	r3, [pc, #40]	; (8015270 <pbuf_cat+0x98>)
 8015246:	f240 3263 	movw	r2, #867	; 0x363
 801524a:	490d      	ldr	r1, [pc, #52]	; (8015280 <pbuf_cat+0xa8>)
 801524c:	480a      	ldr	r0, [pc, #40]	; (8015278 <pbuf_cat+0xa0>)
 801524e:	f00b fa8b 	bl	8020768 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	891a      	ldrh	r2, [r3, #8]
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	891b      	ldrh	r3, [r3, #8]
 801525a:	4413      	add	r3, r2
 801525c:	b29a      	uxth	r2, r3
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}
 801526e:	bf00      	nop
 8015270:	08021d20 	.word	0x08021d20
 8015274:	08021f14 	.word	0x08021f14
 8015278:	08021d80 	.word	0x08021d80
 801527c:	08021f4c 	.word	0x08021f4c
 8015280:	08021f7c 	.word	0x08021f7c

08015284 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801528e:	6839      	ldr	r1, [r7, #0]
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7ff ffa1 	bl	80151d8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8015296:	6838      	ldr	r0, [r7, #0]
 8015298:	f7ff ff76 	bl	8015188 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801529c:	bf00      	nop
 801529e:	3708      	adds	r7, #8
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b086      	sub	sp, #24
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80152ae:	2300      	movs	r3, #0
 80152b0:	617b      	str	r3, [r7, #20]
 80152b2:	2300      	movs	r3, #0
 80152b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d008      	beq.n	80152ce <pbuf_copy+0x2a>
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d005      	beq.n	80152ce <pbuf_copy+0x2a>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	891a      	ldrh	r2, [r3, #8]
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	891b      	ldrh	r3, [r3, #8]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d209      	bcs.n	80152e2 <pbuf_copy+0x3e>
 80152ce:	4b57      	ldr	r3, [pc, #348]	; (801542c <pbuf_copy+0x188>)
 80152d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80152d4:	4956      	ldr	r1, [pc, #344]	; (8015430 <pbuf_copy+0x18c>)
 80152d6:	4857      	ldr	r0, [pc, #348]	; (8015434 <pbuf_copy+0x190>)
 80152d8:	f00b fa46 	bl	8020768 <iprintf>
 80152dc:	f06f 030f 	mvn.w	r3, #15
 80152e0:	e09f      	b.n	8015422 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	895b      	ldrh	r3, [r3, #10]
 80152e6:	461a      	mov	r2, r3
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	1ad2      	subs	r2, r2, r3
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	4619      	mov	r1, r3
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	1acb      	subs	r3, r1, r3
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d306      	bcc.n	8015308 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	895b      	ldrh	r3, [r3, #10]
 80152fe:	461a      	mov	r2, r3
 8015300:	693b      	ldr	r3, [r7, #16]
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	60fb      	str	r3, [r7, #12]
 8015306:	e005      	b.n	8015314 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	895b      	ldrh	r3, [r3, #10]
 801530c:	461a      	mov	r2, r3
 801530e:	697b      	ldr	r3, [r7, #20]
 8015310:	1ad3      	subs	r3, r2, r3
 8015312:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685a      	ldr	r2, [r3, #4]
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	18d0      	adds	r0, r2, r3
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	685a      	ldr	r2, [r3, #4]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	4413      	add	r3, r2
 8015324:	68fa      	ldr	r2, [r7, #12]
 8015326:	4619      	mov	r1, r3
 8015328:	f00b f973 	bl	8020612 <memcpy>
    offset_to += len;
 801532c:	697a      	ldr	r2, [r7, #20]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	4413      	add	r3, r2
 8015332:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015334:	693a      	ldr	r2, [r7, #16]
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	4413      	add	r3, r2
 801533a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	895b      	ldrh	r3, [r3, #10]
 8015340:	461a      	mov	r2, r3
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	4293      	cmp	r3, r2
 8015346:	d906      	bls.n	8015356 <pbuf_copy+0xb2>
 8015348:	4b38      	ldr	r3, [pc, #224]	; (801542c <pbuf_copy+0x188>)
 801534a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801534e:	493a      	ldr	r1, [pc, #232]	; (8015438 <pbuf_copy+0x194>)
 8015350:	4838      	ldr	r0, [pc, #224]	; (8015434 <pbuf_copy+0x190>)
 8015352:	f00b fa09 	bl	8020768 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015356:	683b      	ldr	r3, [r7, #0]
 8015358:	895b      	ldrh	r3, [r3, #10]
 801535a:	461a      	mov	r2, r3
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	4293      	cmp	r3, r2
 8015360:	d906      	bls.n	8015370 <pbuf_copy+0xcc>
 8015362:	4b32      	ldr	r3, [pc, #200]	; (801542c <pbuf_copy+0x188>)
 8015364:	f240 32da 	movw	r2, #986	; 0x3da
 8015368:	4934      	ldr	r1, [pc, #208]	; (801543c <pbuf_copy+0x198>)
 801536a:	4832      	ldr	r0, [pc, #200]	; (8015434 <pbuf_copy+0x190>)
 801536c:	f00b f9fc 	bl	8020768 <iprintf>
    if (offset_from >= p_from->len) {
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	895b      	ldrh	r3, [r3, #10]
 8015374:	461a      	mov	r2, r3
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	4293      	cmp	r3, r2
 801537a:	d304      	bcc.n	8015386 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801537c:	2300      	movs	r3, #0
 801537e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	895b      	ldrh	r3, [r3, #10]
 801538a:	461a      	mov	r2, r3
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	4293      	cmp	r3, r2
 8015390:	d114      	bne.n	80153bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015392:	2300      	movs	r3, #0
 8015394:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d10c      	bne.n	80153bc <pbuf_copy+0x118>
 80153a2:	683b      	ldr	r3, [r7, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d009      	beq.n	80153bc <pbuf_copy+0x118>
 80153a8:	4b20      	ldr	r3, [pc, #128]	; (801542c <pbuf_copy+0x188>)
 80153aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80153ae:	4924      	ldr	r1, [pc, #144]	; (8015440 <pbuf_copy+0x19c>)
 80153b0:	4820      	ldr	r0, [pc, #128]	; (8015434 <pbuf_copy+0x190>)
 80153b2:	f00b f9d9 	bl	8020768 <iprintf>
 80153b6:	f06f 030f 	mvn.w	r3, #15
 80153ba:	e032      	b.n	8015422 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d013      	beq.n	80153ea <pbuf_copy+0x146>
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	895a      	ldrh	r2, [r3, #10]
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d10d      	bne.n	80153ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80153ce:	683b      	ldr	r3, [r7, #0]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d009      	beq.n	80153ea <pbuf_copy+0x146>
 80153d6:	4b15      	ldr	r3, [pc, #84]	; (801542c <pbuf_copy+0x188>)
 80153d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80153dc:	4919      	ldr	r1, [pc, #100]	; (8015444 <pbuf_copy+0x1a0>)
 80153de:	4815      	ldr	r0, [pc, #84]	; (8015434 <pbuf_copy+0x190>)
 80153e0:	f00b f9c2 	bl	8020768 <iprintf>
 80153e4:	f06f 0305 	mvn.w	r3, #5
 80153e8:	e01b      	b.n	8015422 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d013      	beq.n	8015418 <pbuf_copy+0x174>
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	895a      	ldrh	r2, [r3, #10]
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	891b      	ldrh	r3, [r3, #8]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d10d      	bne.n	8015418 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d009      	beq.n	8015418 <pbuf_copy+0x174>
 8015404:	4b09      	ldr	r3, [pc, #36]	; (801542c <pbuf_copy+0x188>)
 8015406:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801540a:	490e      	ldr	r1, [pc, #56]	; (8015444 <pbuf_copy+0x1a0>)
 801540c:	4809      	ldr	r0, [pc, #36]	; (8015434 <pbuf_copy+0x190>)
 801540e:	f00b f9ab 	bl	8020768 <iprintf>
 8015412:	f06f 0305 	mvn.w	r3, #5
 8015416:	e004      	b.n	8015422 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2b00      	cmp	r3, #0
 801541c:	f47f af61 	bne.w	80152e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8015420:	2300      	movs	r3, #0
}
 8015422:	4618      	mov	r0, r3
 8015424:	3718      	adds	r7, #24
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	08021d20 	.word	0x08021d20
 8015430:	08021fc8 	.word	0x08021fc8
 8015434:	08021d80 	.word	0x08021d80
 8015438:	08021ff8 	.word	0x08021ff8
 801543c:	08022010 	.word	0x08022010
 8015440:	0802202c 	.word	0x0802202c
 8015444:	0802203c 	.word	0x0802203c

08015448 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b088      	sub	sp, #32
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	4611      	mov	r1, r2
 8015454:	461a      	mov	r2, r3
 8015456:	460b      	mov	r3, r1
 8015458:	80fb      	strh	r3, [r7, #6]
 801545a:	4613      	mov	r3, r2
 801545c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801545e:	2300      	movs	r3, #0
 8015460:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8015462:	2300      	movs	r3, #0
 8015464:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d108      	bne.n	801547e <pbuf_copy_partial+0x36>
 801546c:	4b2b      	ldr	r3, [pc, #172]	; (801551c <pbuf_copy_partial+0xd4>)
 801546e:	f240 420a 	movw	r2, #1034	; 0x40a
 8015472:	492b      	ldr	r1, [pc, #172]	; (8015520 <pbuf_copy_partial+0xd8>)
 8015474:	482b      	ldr	r0, [pc, #172]	; (8015524 <pbuf_copy_partial+0xdc>)
 8015476:	f00b f977 	bl	8020768 <iprintf>
 801547a:	2300      	movs	r3, #0
 801547c:	e04a      	b.n	8015514 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801547e:	68bb      	ldr	r3, [r7, #8]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d108      	bne.n	8015496 <pbuf_copy_partial+0x4e>
 8015484:	4b25      	ldr	r3, [pc, #148]	; (801551c <pbuf_copy_partial+0xd4>)
 8015486:	f240 420b 	movw	r2, #1035	; 0x40b
 801548a:	4927      	ldr	r1, [pc, #156]	; (8015528 <pbuf_copy_partial+0xe0>)
 801548c:	4825      	ldr	r0, [pc, #148]	; (8015524 <pbuf_copy_partial+0xdc>)
 801548e:	f00b f96b 	bl	8020768 <iprintf>
 8015492:	2300      	movs	r3, #0
 8015494:	e03e      	b.n	8015514 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	61fb      	str	r3, [r7, #28]
 801549a:	e034      	b.n	8015506 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801549c:	88bb      	ldrh	r3, [r7, #4]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d00a      	beq.n	80154b8 <pbuf_copy_partial+0x70>
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	895b      	ldrh	r3, [r3, #10]
 80154a6:	88ba      	ldrh	r2, [r7, #4]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d305      	bcc.n	80154b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	895b      	ldrh	r3, [r3, #10]
 80154b0:	88ba      	ldrh	r2, [r7, #4]
 80154b2:	1ad3      	subs	r3, r2, r3
 80154b4:	80bb      	strh	r3, [r7, #4]
 80154b6:	e023      	b.n	8015500 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	895a      	ldrh	r2, [r3, #10]
 80154bc:	88bb      	ldrh	r3, [r7, #4]
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80154c2:	8b3a      	ldrh	r2, [r7, #24]
 80154c4:	88fb      	ldrh	r3, [r7, #6]
 80154c6:	429a      	cmp	r2, r3
 80154c8:	d901      	bls.n	80154ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80154ca:	88fb      	ldrh	r3, [r7, #6]
 80154cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80154ce:	8b7b      	ldrh	r3, [r7, #26]
 80154d0:	68ba      	ldr	r2, [r7, #8]
 80154d2:	18d0      	adds	r0, r2, r3
 80154d4:	69fb      	ldr	r3, [r7, #28]
 80154d6:	685a      	ldr	r2, [r3, #4]
 80154d8:	88bb      	ldrh	r3, [r7, #4]
 80154da:	4413      	add	r3, r2
 80154dc:	8b3a      	ldrh	r2, [r7, #24]
 80154de:	4619      	mov	r1, r3
 80154e0:	f00b f897 	bl	8020612 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80154e4:	8afa      	ldrh	r2, [r7, #22]
 80154e6:	8b3b      	ldrh	r3, [r7, #24]
 80154e8:	4413      	add	r3, r2
 80154ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80154ec:	8b7a      	ldrh	r2, [r7, #26]
 80154ee:	8b3b      	ldrh	r3, [r7, #24]
 80154f0:	4413      	add	r3, r2
 80154f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80154f4:	88fa      	ldrh	r2, [r7, #6]
 80154f6:	8b3b      	ldrh	r3, [r7, #24]
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	61fb      	str	r3, [r7, #28]
 8015506:	88fb      	ldrh	r3, [r7, #6]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d002      	beq.n	8015512 <pbuf_copy_partial+0xca>
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1c4      	bne.n	801549c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015512:	8afb      	ldrh	r3, [r7, #22]
}
 8015514:	4618      	mov	r0, r3
 8015516:	3720      	adds	r7, #32
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	08021d20 	.word	0x08021d20
 8015520:	08022068 	.word	0x08022068
 8015524:	08021d80 	.word	0x08021d80
 8015528:	08022088 	.word	0x08022088

0801552c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	4603      	mov	r3, r0
 8015534:	603a      	str	r2, [r7, #0]
 8015536:	71fb      	strb	r3, [r7, #7]
 8015538:	460b      	mov	r3, r1
 801553a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	8919      	ldrh	r1, [r3, #8]
 8015540:	88ba      	ldrh	r2, [r7, #4]
 8015542:	79fb      	ldrb	r3, [r7, #7]
 8015544:	4618      	mov	r0, r3
 8015546:	f7ff fa95 	bl	8014a74 <pbuf_alloc>
 801554a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d101      	bne.n	8015556 <pbuf_clone+0x2a>
    return NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	e011      	b.n	801557a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015556:	6839      	ldr	r1, [r7, #0]
 8015558:	68f8      	ldr	r0, [r7, #12]
 801555a:	f7ff fea3 	bl	80152a4 <pbuf_copy>
 801555e:	4603      	mov	r3, r0
 8015560:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8015562:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d006      	beq.n	8015578 <pbuf_clone+0x4c>
 801556a:	4b06      	ldr	r3, [pc, #24]	; (8015584 <pbuf_clone+0x58>)
 801556c:	f240 5224 	movw	r2, #1316	; 0x524
 8015570:	4905      	ldr	r1, [pc, #20]	; (8015588 <pbuf_clone+0x5c>)
 8015572:	4806      	ldr	r0, [pc, #24]	; (801558c <pbuf_clone+0x60>)
 8015574:	f00b f8f8 	bl	8020768 <iprintf>
  return q;
 8015578:	68fb      	ldr	r3, [r7, #12]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3710      	adds	r7, #16
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}
 8015582:	bf00      	nop
 8015584:	08021d20 	.word	0x08021d20
 8015588:	08022194 	.word	0x08022194
 801558c:	08021d80 	.word	0x08021d80

08015590 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015594:	f00b f900 	bl	8020798 <rand>
 8015598:	4603      	mov	r3, r0
 801559a:	b29b      	uxth	r3, r3
 801559c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	4b01      	ldr	r3, [pc, #4]	; (80155b0 <tcp_init+0x20>)
 80155aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80155ac:	bf00      	nop
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	240000b4 	.word	0x240000b4

080155b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	7d1b      	ldrb	r3, [r3, #20]
 80155c0:	2b01      	cmp	r3, #1
 80155c2:	d105      	bne.n	80155d0 <tcp_free+0x1c>
 80155c4:	4b06      	ldr	r3, [pc, #24]	; (80155e0 <tcp_free+0x2c>)
 80155c6:	22d4      	movs	r2, #212	; 0xd4
 80155c8:	4906      	ldr	r1, [pc, #24]	; (80155e4 <tcp_free+0x30>)
 80155ca:	4807      	ldr	r0, [pc, #28]	; (80155e8 <tcp_free+0x34>)
 80155cc:	f00b f8cc 	bl	8020768 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80155d0:	6879      	ldr	r1, [r7, #4]
 80155d2:	2001      	movs	r0, #1
 80155d4:	f7fe fe82 	bl	80142dc <memp_free>
}
 80155d8:	bf00      	nop
 80155da:	3708      	adds	r7, #8
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	08022220 	.word	0x08022220
 80155e4:	08022250 	.word	0x08022250
 80155e8:	08022264 	.word	0x08022264

080155ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b082      	sub	sp, #8
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	7d1b      	ldrb	r3, [r3, #20]
 80155f8:	2b01      	cmp	r3, #1
 80155fa:	d105      	bne.n	8015608 <tcp_free_listen+0x1c>
 80155fc:	4b06      	ldr	r3, [pc, #24]	; (8015618 <tcp_free_listen+0x2c>)
 80155fe:	22df      	movs	r2, #223	; 0xdf
 8015600:	4906      	ldr	r1, [pc, #24]	; (801561c <tcp_free_listen+0x30>)
 8015602:	4807      	ldr	r0, [pc, #28]	; (8015620 <tcp_free_listen+0x34>)
 8015604:	f00b f8b0 	bl	8020768 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015608:	6879      	ldr	r1, [r7, #4]
 801560a:	2002      	movs	r0, #2
 801560c:	f7fe fe66 	bl	80142dc <memp_free>
}
 8015610:	bf00      	nop
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	08022220 	.word	0x08022220
 801561c:	0802228c 	.word	0x0802228c
 8015620:	08022264 	.word	0x08022264

08015624 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015628:	f000 fea2 	bl	8016370 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801562c:	4b07      	ldr	r3, [pc, #28]	; (801564c <tcp_tmr+0x28>)
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	3301      	adds	r3, #1
 8015632:	b2da      	uxtb	r2, r3
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <tcp_tmr+0x28>)
 8015636:	701a      	strb	r2, [r3, #0]
 8015638:	4b04      	ldr	r3, [pc, #16]	; (801564c <tcp_tmr+0x28>)
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	f003 0301 	and.w	r3, r3, #1
 8015640:	2b00      	cmp	r3, #0
 8015642:	d001      	beq.n	8015648 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015644:	f000 fb54 	bl	8015cf0 <tcp_slowtmr>
  }
}
 8015648:	bf00      	nop
 801564a:	bd80      	pop	{r7, pc}
 801564c:	2400cb65 	.word	0x2400cb65

08015650 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801565a:	683b      	ldr	r3, [r7, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d105      	bne.n	801566c <tcp_remove_listener+0x1c>
 8015660:	4b0d      	ldr	r3, [pc, #52]	; (8015698 <tcp_remove_listener+0x48>)
 8015662:	22ff      	movs	r2, #255	; 0xff
 8015664:	490d      	ldr	r1, [pc, #52]	; (801569c <tcp_remove_listener+0x4c>)
 8015666:	480e      	ldr	r0, [pc, #56]	; (80156a0 <tcp_remove_listener+0x50>)
 8015668:	f00b f87e 	bl	8020768 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	60fb      	str	r3, [r7, #12]
 8015670:	e00a      	b.n	8015688 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8015676:	683a      	ldr	r2, [r7, #0]
 8015678:	429a      	cmp	r2, r3
 801567a:	d102      	bne.n	8015682 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2200      	movs	r2, #0
 8015680:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	68db      	ldr	r3, [r3, #12]
 8015686:	60fb      	str	r3, [r7, #12]
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d1f1      	bne.n	8015672 <tcp_remove_listener+0x22>
    }
  }
}
 801568e:	bf00      	nop
 8015690:	bf00      	nop
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	08022220 	.word	0x08022220
 801569c:	080222a8 	.word	0x080222a8
 80156a0:	08022264 	.word	0x08022264

080156a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b084      	sub	sp, #16
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d106      	bne.n	80156c0 <tcp_listen_closed+0x1c>
 80156b2:	4b14      	ldr	r3, [pc, #80]	; (8015704 <tcp_listen_closed+0x60>)
 80156b4:	f240 1211 	movw	r2, #273	; 0x111
 80156b8:	4913      	ldr	r1, [pc, #76]	; (8015708 <tcp_listen_closed+0x64>)
 80156ba:	4814      	ldr	r0, [pc, #80]	; (801570c <tcp_listen_closed+0x68>)
 80156bc:	f00b f854 	bl	8020768 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	7d1b      	ldrb	r3, [r3, #20]
 80156c4:	2b01      	cmp	r3, #1
 80156c6:	d006      	beq.n	80156d6 <tcp_listen_closed+0x32>
 80156c8:	4b0e      	ldr	r3, [pc, #56]	; (8015704 <tcp_listen_closed+0x60>)
 80156ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 80156ce:	4910      	ldr	r1, [pc, #64]	; (8015710 <tcp_listen_closed+0x6c>)
 80156d0:	480e      	ldr	r0, [pc, #56]	; (801570c <tcp_listen_closed+0x68>)
 80156d2:	f00b f849 	bl	8020768 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80156d6:	2301      	movs	r3, #1
 80156d8:	60fb      	str	r3, [r7, #12]
 80156da:	e00b      	b.n	80156f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80156dc:	4a0d      	ldr	r2, [pc, #52]	; (8015714 <tcp_listen_closed+0x70>)
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6879      	ldr	r1, [r7, #4]
 80156e8:	4618      	mov	r0, r3
 80156ea:	f7ff ffb1 	bl	8015650 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	3301      	adds	r3, #1
 80156f2:	60fb      	str	r3, [r7, #12]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	2b03      	cmp	r3, #3
 80156f8:	d9f0      	bls.n	80156dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80156fa:	bf00      	nop
 80156fc:	bf00      	nop
 80156fe:	3710      	adds	r7, #16
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}
 8015704:	08022220 	.word	0x08022220
 8015708:	080222d0 	.word	0x080222d0
 801570c:	08022264 	.word	0x08022264
 8015710:	080222dc 	.word	0x080222dc
 8015714:	08024658 	.word	0x08024658

08015718 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015718:	b5b0      	push	{r4, r5, r7, lr}
 801571a:	b088      	sub	sp, #32
 801571c:	af04      	add	r7, sp, #16
 801571e:	6078      	str	r0, [r7, #4]
 8015720:	460b      	mov	r3, r1
 8015722:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d106      	bne.n	8015738 <tcp_close_shutdown+0x20>
 801572a:	4b63      	ldr	r3, [pc, #396]	; (80158b8 <tcp_close_shutdown+0x1a0>)
 801572c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8015730:	4962      	ldr	r1, [pc, #392]	; (80158bc <tcp_close_shutdown+0x1a4>)
 8015732:	4863      	ldr	r0, [pc, #396]	; (80158c0 <tcp_close_shutdown+0x1a8>)
 8015734:	f00b f818 	bl	8020768 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015738:	78fb      	ldrb	r3, [r7, #3]
 801573a:	2b00      	cmp	r3, #0
 801573c:	d066      	beq.n	801580c <tcp_close_shutdown+0xf4>
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	7d1b      	ldrb	r3, [r3, #20]
 8015742:	2b04      	cmp	r3, #4
 8015744:	d003      	beq.n	801574e <tcp_close_shutdown+0x36>
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	7d1b      	ldrb	r3, [r3, #20]
 801574a:	2b07      	cmp	r3, #7
 801574c:	d15e      	bne.n	801580c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015752:	2b00      	cmp	r3, #0
 8015754:	d104      	bne.n	8015760 <tcp_close_shutdown+0x48>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801575a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801575e:	d055      	beq.n	801580c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	8b5b      	ldrh	r3, [r3, #26]
 8015764:	f003 0310 	and.w	r3, r3, #16
 8015768:	2b00      	cmp	r3, #0
 801576a:	d106      	bne.n	801577a <tcp_close_shutdown+0x62>
 801576c:	4b52      	ldr	r3, [pc, #328]	; (80158b8 <tcp_close_shutdown+0x1a0>)
 801576e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8015772:	4954      	ldr	r1, [pc, #336]	; (80158c4 <tcp_close_shutdown+0x1ac>)
 8015774:	4852      	ldr	r0, [pc, #328]	; (80158c0 <tcp_close_shutdown+0x1a8>)
 8015776:	f00a fff7 	bl	8020768 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015782:	687d      	ldr	r5, [r7, #4]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	3304      	adds	r3, #4
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	8ad2      	ldrh	r2, [r2, #22]
 801578c:	6879      	ldr	r1, [r7, #4]
 801578e:	8b09      	ldrh	r1, [r1, #24]
 8015790:	9102      	str	r1, [sp, #8]
 8015792:	9201      	str	r2, [sp, #4]
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	462b      	mov	r3, r5
 8015798:	4622      	mov	r2, r4
 801579a:	4601      	mov	r1, r0
 801579c:	6878      	ldr	r0, [r7, #4]
 801579e:	f004 fe91 	bl	801a4c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f001 f8c6 	bl	8016934 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80157a8:	4b47      	ldr	r3, [pc, #284]	; (80158c8 <tcp_close_shutdown+0x1b0>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	687a      	ldr	r2, [r7, #4]
 80157ae:	429a      	cmp	r2, r3
 80157b0:	d105      	bne.n	80157be <tcp_close_shutdown+0xa6>
 80157b2:	4b45      	ldr	r3, [pc, #276]	; (80158c8 <tcp_close_shutdown+0x1b0>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	4a43      	ldr	r2, [pc, #268]	; (80158c8 <tcp_close_shutdown+0x1b0>)
 80157ba:	6013      	str	r3, [r2, #0]
 80157bc:	e013      	b.n	80157e6 <tcp_close_shutdown+0xce>
 80157be:	4b42      	ldr	r3, [pc, #264]	; (80158c8 <tcp_close_shutdown+0x1b0>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	60fb      	str	r3, [r7, #12]
 80157c4:	e00c      	b.n	80157e0 <tcp_close_shutdown+0xc8>
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	68db      	ldr	r3, [r3, #12]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	429a      	cmp	r2, r3
 80157ce:	d104      	bne.n	80157da <tcp_close_shutdown+0xc2>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	68da      	ldr	r2, [r3, #12]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	60da      	str	r2, [r3, #12]
 80157d8:	e005      	b.n	80157e6 <tcp_close_shutdown+0xce>
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	60fb      	str	r3, [r7, #12]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1ef      	bne.n	80157c6 <tcp_close_shutdown+0xae>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	2200      	movs	r2, #0
 80157ea:	60da      	str	r2, [r3, #12]
 80157ec:	4b37      	ldr	r3, [pc, #220]	; (80158cc <tcp_close_shutdown+0x1b4>)
 80157ee:	2201      	movs	r2, #1
 80157f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80157f2:	4b37      	ldr	r3, [pc, #220]	; (80158d0 <tcp_close_shutdown+0x1b8>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	687a      	ldr	r2, [r7, #4]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d102      	bne.n	8015802 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80157fc:	f003 fd5e 	bl	80192bc <tcp_trigger_input_pcb_close>
 8015800:	e002      	b.n	8015808 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7ff fed6 	bl	80155b4 <tcp_free>
      }
      return ERR_OK;
 8015808:	2300      	movs	r3, #0
 801580a:	e050      	b.n	80158ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	7d1b      	ldrb	r3, [r3, #20]
 8015810:	2b02      	cmp	r3, #2
 8015812:	d03b      	beq.n	801588c <tcp_close_shutdown+0x174>
 8015814:	2b02      	cmp	r3, #2
 8015816:	dc44      	bgt.n	80158a2 <tcp_close_shutdown+0x18a>
 8015818:	2b00      	cmp	r3, #0
 801581a:	d002      	beq.n	8015822 <tcp_close_shutdown+0x10a>
 801581c:	2b01      	cmp	r3, #1
 801581e:	d02a      	beq.n	8015876 <tcp_close_shutdown+0x15e>
 8015820:	e03f      	b.n	80158a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	8adb      	ldrh	r3, [r3, #22]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d021      	beq.n	801586e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801582a:	4b2a      	ldr	r3, [pc, #168]	; (80158d4 <tcp_close_shutdown+0x1bc>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	687a      	ldr	r2, [r7, #4]
 8015830:	429a      	cmp	r2, r3
 8015832:	d105      	bne.n	8015840 <tcp_close_shutdown+0x128>
 8015834:	4b27      	ldr	r3, [pc, #156]	; (80158d4 <tcp_close_shutdown+0x1bc>)
 8015836:	681b      	ldr	r3, [r3, #0]
 8015838:	68db      	ldr	r3, [r3, #12]
 801583a:	4a26      	ldr	r2, [pc, #152]	; (80158d4 <tcp_close_shutdown+0x1bc>)
 801583c:	6013      	str	r3, [r2, #0]
 801583e:	e013      	b.n	8015868 <tcp_close_shutdown+0x150>
 8015840:	4b24      	ldr	r3, [pc, #144]	; (80158d4 <tcp_close_shutdown+0x1bc>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	60bb      	str	r3, [r7, #8]
 8015846:	e00c      	b.n	8015862 <tcp_close_shutdown+0x14a>
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	68db      	ldr	r3, [r3, #12]
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	429a      	cmp	r2, r3
 8015850:	d104      	bne.n	801585c <tcp_close_shutdown+0x144>
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	68da      	ldr	r2, [r3, #12]
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	60da      	str	r2, [r3, #12]
 801585a:	e005      	b.n	8015868 <tcp_close_shutdown+0x150>
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	60bb      	str	r3, [r7, #8]
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d1ef      	bne.n	8015848 <tcp_close_shutdown+0x130>
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	2200      	movs	r2, #0
 801586c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7ff fea0 	bl	80155b4 <tcp_free>
      break;
 8015874:	e01a      	b.n	80158ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f7ff ff14 	bl	80156a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801587c:	6879      	ldr	r1, [r7, #4]
 801587e:	4816      	ldr	r0, [pc, #88]	; (80158d8 <tcp_close_shutdown+0x1c0>)
 8015880:	f001 f8a8 	bl	80169d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f7ff feb1 	bl	80155ec <tcp_free_listen>
      break;
 801588a:	e00f      	b.n	80158ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801588c:	6879      	ldr	r1, [r7, #4]
 801588e:	480e      	ldr	r0, [pc, #56]	; (80158c8 <tcp_close_shutdown+0x1b0>)
 8015890:	f001 f8a0 	bl	80169d4 <tcp_pcb_remove>
 8015894:	4b0d      	ldr	r3, [pc, #52]	; (80158cc <tcp_close_shutdown+0x1b4>)
 8015896:	2201      	movs	r2, #1
 8015898:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801589a:	6878      	ldr	r0, [r7, #4]
 801589c:	f7ff fe8a 	bl	80155b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80158a0:	e004      	b.n	80158ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 f81a 	bl	80158dc <tcp_close_shutdown_fin>
 80158a8:	4603      	mov	r3, r0
 80158aa:	e000      	b.n	80158ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80158ac:	2300      	movs	r3, #0
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3710      	adds	r7, #16
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bdb0      	pop	{r4, r5, r7, pc}
 80158b6:	bf00      	nop
 80158b8:	08022220 	.word	0x08022220
 80158bc:	080222f4 	.word	0x080222f4
 80158c0:	08022264 	.word	0x08022264
 80158c4:	08022314 	.word	0x08022314
 80158c8:	2400cb5c 	.word	0x2400cb5c
 80158cc:	2400cb64 	.word	0x2400cb64
 80158d0:	2400cb9c 	.word	0x2400cb9c
 80158d4:	2400cb54 	.word	0x2400cb54
 80158d8:	2400cb58 	.word	0x2400cb58

080158dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d106      	bne.n	80158f8 <tcp_close_shutdown_fin+0x1c>
 80158ea:	4b2e      	ldr	r3, [pc, #184]	; (80159a4 <tcp_close_shutdown_fin+0xc8>)
 80158ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80158f0:	492d      	ldr	r1, [pc, #180]	; (80159a8 <tcp_close_shutdown_fin+0xcc>)
 80158f2:	482e      	ldr	r0, [pc, #184]	; (80159ac <tcp_close_shutdown_fin+0xd0>)
 80158f4:	f00a ff38 	bl	8020768 <iprintf>

  switch (pcb->state) {
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	7d1b      	ldrb	r3, [r3, #20]
 80158fc:	2b07      	cmp	r3, #7
 80158fe:	d020      	beq.n	8015942 <tcp_close_shutdown_fin+0x66>
 8015900:	2b07      	cmp	r3, #7
 8015902:	dc2b      	bgt.n	801595c <tcp_close_shutdown_fin+0x80>
 8015904:	2b03      	cmp	r3, #3
 8015906:	d002      	beq.n	801590e <tcp_close_shutdown_fin+0x32>
 8015908:	2b04      	cmp	r3, #4
 801590a:	d00d      	beq.n	8015928 <tcp_close_shutdown_fin+0x4c>
 801590c:	e026      	b.n	801595c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f003 fee6 	bl	80196e0 <tcp_send_fin>
 8015914:	4603      	mov	r3, r0
 8015916:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d11f      	bne.n	8015960 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2205      	movs	r2, #5
 8015924:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015926:	e01b      	b.n	8015960 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f003 fed9 	bl	80196e0 <tcp_send_fin>
 801592e:	4603      	mov	r3, r0
 8015930:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d114      	bne.n	8015964 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2205      	movs	r2, #5
 801593e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015940:	e010      	b.n	8015964 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f003 fecc 	bl	80196e0 <tcp_send_fin>
 8015948:	4603      	mov	r3, r0
 801594a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801594c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d109      	bne.n	8015968 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	2209      	movs	r2, #9
 8015958:	751a      	strb	r2, [r3, #20]
      }
      break;
 801595a:	e005      	b.n	8015968 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801595c:	2300      	movs	r3, #0
 801595e:	e01c      	b.n	801599a <tcp_close_shutdown_fin+0xbe>
      break;
 8015960:	bf00      	nop
 8015962:	e002      	b.n	801596a <tcp_close_shutdown_fin+0x8e>
      break;
 8015964:	bf00      	nop
 8015966:	e000      	b.n	801596a <tcp_close_shutdown_fin+0x8e>
      break;
 8015968:	bf00      	nop
  }

  if (err == ERR_OK) {
 801596a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d103      	bne.n	801597a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f003 fff2 	bl	801995c <tcp_output>
 8015978:	e00d      	b.n	8015996 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801597a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015982:	d108      	bne.n	8015996 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	8b5b      	ldrh	r3, [r3, #26]
 8015988:	f043 0308 	orr.w	r3, r3, #8
 801598c:	b29a      	uxth	r2, r3
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015992:	2300      	movs	r3, #0
 8015994:	e001      	b.n	801599a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801599a:	4618      	mov	r0, r3
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	08022220 	.word	0x08022220
 80159a8:	080222d0 	.word	0x080222d0
 80159ac:	08022264 	.word	0x08022264

080159b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b082      	sub	sp, #8
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d109      	bne.n	80159d2 <tcp_close+0x22>
 80159be:	4b0f      	ldr	r3, [pc, #60]	; (80159fc <tcp_close+0x4c>)
 80159c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80159c4:	490e      	ldr	r1, [pc, #56]	; (8015a00 <tcp_close+0x50>)
 80159c6:	480f      	ldr	r0, [pc, #60]	; (8015a04 <tcp_close+0x54>)
 80159c8:	f00a fece 	bl	8020768 <iprintf>
 80159cc:	f06f 030f 	mvn.w	r3, #15
 80159d0:	e00f      	b.n	80159f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	7d1b      	ldrb	r3, [r3, #20]
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d006      	beq.n	80159e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	8b5b      	ldrh	r3, [r3, #26]
 80159de:	f043 0310 	orr.w	r3, r3, #16
 80159e2:	b29a      	uxth	r2, r3
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80159e8:	2101      	movs	r1, #1
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f7ff fe94 	bl	8015718 <tcp_close_shutdown>
 80159f0:	4603      	mov	r3, r0
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3708      	adds	r7, #8
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	08022220 	.word	0x08022220
 8015a00:	08022330 	.word	0x08022330
 8015a04:	08022264 	.word	0x08022264

08015a08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b08e      	sub	sp, #56	; 0x38
 8015a0c:	af04      	add	r7, sp, #16
 8015a0e:	6078      	str	r0, [r7, #4]
 8015a10:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d107      	bne.n	8015a28 <tcp_abandon+0x20>
 8015a18:	4b52      	ldr	r3, [pc, #328]	; (8015b64 <tcp_abandon+0x15c>)
 8015a1a:	f240 223d 	movw	r2, #573	; 0x23d
 8015a1e:	4952      	ldr	r1, [pc, #328]	; (8015b68 <tcp_abandon+0x160>)
 8015a20:	4852      	ldr	r0, [pc, #328]	; (8015b6c <tcp_abandon+0x164>)
 8015a22:	f00a fea1 	bl	8020768 <iprintf>
 8015a26:	e099      	b.n	8015b5c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	7d1b      	ldrb	r3, [r3, #20]
 8015a2c:	2b01      	cmp	r3, #1
 8015a2e:	d106      	bne.n	8015a3e <tcp_abandon+0x36>
 8015a30:	4b4c      	ldr	r3, [pc, #304]	; (8015b64 <tcp_abandon+0x15c>)
 8015a32:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015a36:	494e      	ldr	r1, [pc, #312]	; (8015b70 <tcp_abandon+0x168>)
 8015a38:	484c      	ldr	r0, [pc, #304]	; (8015b6c <tcp_abandon+0x164>)
 8015a3a:	f00a fe95 	bl	8020768 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	7d1b      	ldrb	r3, [r3, #20]
 8015a42:	2b0a      	cmp	r3, #10
 8015a44:	d107      	bne.n	8015a56 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015a46:	6879      	ldr	r1, [r7, #4]
 8015a48:	484a      	ldr	r0, [pc, #296]	; (8015b74 <tcp_abandon+0x16c>)
 8015a4a:	f000 ffc3 	bl	80169d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f7ff fdb0 	bl	80155b4 <tcp_free>
 8015a54:	e082      	b.n	8015b5c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015a56:	2300      	movs	r3, #0
 8015a58:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a62:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a68:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a70:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	691b      	ldr	r3, [r3, #16]
 8015a76:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	7d1b      	ldrb	r3, [r3, #20]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d126      	bne.n	8015ace <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	8adb      	ldrh	r3, [r3, #22]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d02e      	beq.n	8015ae6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015a88:	4b3b      	ldr	r3, [pc, #236]	; (8015b78 <tcp_abandon+0x170>)
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	687a      	ldr	r2, [r7, #4]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d105      	bne.n	8015a9e <tcp_abandon+0x96>
 8015a92:	4b39      	ldr	r3, [pc, #228]	; (8015b78 <tcp_abandon+0x170>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	4a37      	ldr	r2, [pc, #220]	; (8015b78 <tcp_abandon+0x170>)
 8015a9a:	6013      	str	r3, [r2, #0]
 8015a9c:	e013      	b.n	8015ac6 <tcp_abandon+0xbe>
 8015a9e:	4b36      	ldr	r3, [pc, #216]	; (8015b78 <tcp_abandon+0x170>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	61fb      	str	r3, [r7, #28]
 8015aa4:	e00c      	b.n	8015ac0 <tcp_abandon+0xb8>
 8015aa6:	69fb      	ldr	r3, [r7, #28]
 8015aa8:	68db      	ldr	r3, [r3, #12]
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	d104      	bne.n	8015aba <tcp_abandon+0xb2>
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	68da      	ldr	r2, [r3, #12]
 8015ab4:	69fb      	ldr	r3, [r7, #28]
 8015ab6:	60da      	str	r2, [r3, #12]
 8015ab8:	e005      	b.n	8015ac6 <tcp_abandon+0xbe>
 8015aba:	69fb      	ldr	r3, [r7, #28]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	61fb      	str	r3, [r7, #28]
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d1ef      	bne.n	8015aa6 <tcp_abandon+0x9e>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2200      	movs	r2, #0
 8015aca:	60da      	str	r2, [r3, #12]
 8015acc:	e00b      	b.n	8015ae6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	8adb      	ldrh	r3, [r3, #22]
 8015ad6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015ad8:	6879      	ldr	r1, [r7, #4]
 8015ada:	4828      	ldr	r0, [pc, #160]	; (8015b7c <tcp_abandon+0x174>)
 8015adc:	f000 ff7a 	bl	80169d4 <tcp_pcb_remove>
 8015ae0:	4b27      	ldr	r3, [pc, #156]	; (8015b80 <tcp_abandon+0x178>)
 8015ae2:	2201      	movs	r2, #1
 8015ae4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d004      	beq.n	8015af8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015af2:	4618      	mov	r0, r3
 8015af4:	f000 fd1c 	bl	8016530 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d004      	beq.n	8015b0a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b04:	4618      	mov	r0, r3
 8015b06:	f000 fd13 	bl	8016530 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d004      	beq.n	8015b1c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015b16:	4618      	mov	r0, r3
 8015b18:	f000 fd0a 	bl	8016530 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d00e      	beq.n	8015b40 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015b22:	6879      	ldr	r1, [r7, #4]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	3304      	adds	r3, #4
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	8b12      	ldrh	r2, [r2, #24]
 8015b2c:	9202      	str	r2, [sp, #8]
 8015b2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015b30:	9201      	str	r2, [sp, #4]
 8015b32:	9300      	str	r3, [sp, #0]
 8015b34:	460b      	mov	r3, r1
 8015b36:	697a      	ldr	r2, [r7, #20]
 8015b38:	69b9      	ldr	r1, [r7, #24]
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f004 fcc2 	bl	801a4c4 <tcp_rst>
    }
    last_state = pcb->state;
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	7d1b      	ldrb	r3, [r3, #20]
 8015b44:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f7ff fd34 	bl	80155b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d004      	beq.n	8015b5c <tcp_abandon+0x154>
 8015b52:	693b      	ldr	r3, [r7, #16]
 8015b54:	f06f 010c 	mvn.w	r1, #12
 8015b58:	68f8      	ldr	r0, [r7, #12]
 8015b5a:	4798      	blx	r3
  }
}
 8015b5c:	3728      	adds	r7, #40	; 0x28
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	08022220 	.word	0x08022220
 8015b68:	08022364 	.word	0x08022364
 8015b6c:	08022264 	.word	0x08022264
 8015b70:	08022380 	.word	0x08022380
 8015b74:	2400cb60 	.word	0x2400cb60
 8015b78:	2400cb54 	.word	0x2400cb54
 8015b7c:	2400cb5c 	.word	0x2400cb5c
 8015b80:	2400cb64 	.word	0x2400cb64

08015b84 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b082      	sub	sp, #8
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f7ff ff3a 	bl	8015a08 <tcp_abandon>
}
 8015b94:	bf00      	nop
 8015b96:	3708      	adds	r7, #8
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}

08015b9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d106      	bne.n	8015bb8 <tcp_update_rcv_ann_wnd+0x1c>
 8015baa:	4b25      	ldr	r3, [pc, #148]	; (8015c40 <tcp_update_rcv_ann_wnd+0xa4>)
 8015bac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015bb0:	4924      	ldr	r1, [pc, #144]	; (8015c44 <tcp_update_rcv_ann_wnd+0xa8>)
 8015bb2:	4825      	ldr	r0, [pc, #148]	; (8015c48 <tcp_update_rcv_ann_wnd+0xac>)
 8015bb4:	f00a fdd8 	bl	8020768 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015bc0:	4413      	add	r3, r2
 8015bc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8015bcc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015bd0:	bf28      	it	cs
 8015bd2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015bd6:	b292      	uxth	r2, r2
 8015bd8:	4413      	add	r3, r2
 8015bda:	68fa      	ldr	r2, [r7, #12]
 8015bdc:	1ad3      	subs	r3, r2, r3
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	db08      	blt.n	8015bf4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bee:	68fa      	ldr	r2, [r7, #12]
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	e020      	b.n	8015c36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	dd03      	ble.n	8015c0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2200      	movs	r2, #0
 8015c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015c08:	e014      	b.n	8015c34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c12:	1ad3      	subs	r3, r2, r3
 8015c14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c1c:	d306      	bcc.n	8015c2c <tcp_update_rcv_ann_wnd+0x90>
 8015c1e:	4b08      	ldr	r3, [pc, #32]	; (8015c40 <tcp_update_rcv_ann_wnd+0xa4>)
 8015c20:	f240 32b6 	movw	r2, #950	; 0x3b6
 8015c24:	4909      	ldr	r1, [pc, #36]	; (8015c4c <tcp_update_rcv_ann_wnd+0xb0>)
 8015c26:	4808      	ldr	r0, [pc, #32]	; (8015c48 <tcp_update_rcv_ann_wnd+0xac>)
 8015c28:	f00a fd9e 	bl	8020768 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	b29a      	uxth	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8015c34:	2300      	movs	r3, #0
  }
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3710      	adds	r7, #16
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	08022220 	.word	0x08022220
 8015c44:	0802247c 	.word	0x0802247c
 8015c48:	08022264 	.word	0x08022264
 8015c4c:	080224a0 	.word	0x080224a0

08015c50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d107      	bne.n	8015c72 <tcp_recved+0x22>
 8015c62:	4b1f      	ldr	r3, [pc, #124]	; (8015ce0 <tcp_recved+0x90>)
 8015c64:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015c68:	491e      	ldr	r1, [pc, #120]	; (8015ce4 <tcp_recved+0x94>)
 8015c6a:	481f      	ldr	r0, [pc, #124]	; (8015ce8 <tcp_recved+0x98>)
 8015c6c:	f00a fd7c 	bl	8020768 <iprintf>
 8015c70:	e032      	b.n	8015cd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	7d1b      	ldrb	r3, [r3, #20]
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d106      	bne.n	8015c88 <tcp_recved+0x38>
 8015c7a:	4b19      	ldr	r3, [pc, #100]	; (8015ce0 <tcp_recved+0x90>)
 8015c7c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015c80:	491a      	ldr	r1, [pc, #104]	; (8015cec <tcp_recved+0x9c>)
 8015c82:	4819      	ldr	r0, [pc, #100]	; (8015ce8 <tcp_recved+0x98>)
 8015c84:	f00a fd70 	bl	8020768 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015c8c:	887b      	ldrh	r3, [r7, #2]
 8015c8e:	4413      	add	r3, r2
 8015c90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015c92:	89fb      	ldrh	r3, [r7, #14]
 8015c94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015c98:	d804      	bhi.n	8015ca4 <tcp_recved+0x54>
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c9e:	89fa      	ldrh	r2, [r7, #14]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d204      	bcs.n	8015cae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015caa:	851a      	strh	r2, [r3, #40]	; 0x28
 8015cac:	e002      	b.n	8015cb4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	89fa      	ldrh	r2, [r7, #14]
 8015cb2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7ff ff71 	bl	8015b9c <tcp_update_rcv_ann_wnd>
 8015cba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015cc2:	d309      	bcc.n	8015cd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	8b5b      	ldrh	r3, [r3, #26]
 8015cc8:	f043 0302 	orr.w	r3, r3, #2
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f003 fe42 	bl	801995c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015cd8:	3710      	adds	r7, #16
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	08022220 	.word	0x08022220
 8015ce4:	080224bc 	.word	0x080224bc
 8015ce8:	08022264 	.word	0x08022264
 8015cec:	080224d4 	.word	0x080224d4

08015cf0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015cf0:	b5b0      	push	{r4, r5, r7, lr}
 8015cf2:	b090      	sub	sp, #64	; 0x40
 8015cf4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015cfc:	4b94      	ldr	r3, [pc, #592]	; (8015f50 <tcp_slowtmr+0x260>)
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	3301      	adds	r3, #1
 8015d02:	4a93      	ldr	r2, [pc, #588]	; (8015f50 <tcp_slowtmr+0x260>)
 8015d04:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015d06:	4b93      	ldr	r3, [pc, #588]	; (8015f54 <tcp_slowtmr+0x264>)
 8015d08:	781b      	ldrb	r3, [r3, #0]
 8015d0a:	3301      	adds	r3, #1
 8015d0c:	b2da      	uxtb	r2, r3
 8015d0e:	4b91      	ldr	r3, [pc, #580]	; (8015f54 <tcp_slowtmr+0x264>)
 8015d10:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015d12:	2300      	movs	r3, #0
 8015d14:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015d16:	4b90      	ldr	r3, [pc, #576]	; (8015f58 <tcp_slowtmr+0x268>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015d1c:	e29d      	b.n	801625a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d20:	7d1b      	ldrb	r3, [r3, #20]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d106      	bne.n	8015d34 <tcp_slowtmr+0x44>
 8015d26:	4b8d      	ldr	r3, [pc, #564]	; (8015f5c <tcp_slowtmr+0x26c>)
 8015d28:	f240 42be 	movw	r2, #1214	; 0x4be
 8015d2c:	498c      	ldr	r1, [pc, #560]	; (8015f60 <tcp_slowtmr+0x270>)
 8015d2e:	488d      	ldr	r0, [pc, #564]	; (8015f64 <tcp_slowtmr+0x274>)
 8015d30:	f00a fd1a 	bl	8020768 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d36:	7d1b      	ldrb	r3, [r3, #20]
 8015d38:	2b01      	cmp	r3, #1
 8015d3a:	d106      	bne.n	8015d4a <tcp_slowtmr+0x5a>
 8015d3c:	4b87      	ldr	r3, [pc, #540]	; (8015f5c <tcp_slowtmr+0x26c>)
 8015d3e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8015d42:	4989      	ldr	r1, [pc, #548]	; (8015f68 <tcp_slowtmr+0x278>)
 8015d44:	4887      	ldr	r0, [pc, #540]	; (8015f64 <tcp_slowtmr+0x274>)
 8015d46:	f00a fd0f 	bl	8020768 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d4c:	7d1b      	ldrb	r3, [r3, #20]
 8015d4e:	2b0a      	cmp	r3, #10
 8015d50:	d106      	bne.n	8015d60 <tcp_slowtmr+0x70>
 8015d52:	4b82      	ldr	r3, [pc, #520]	; (8015f5c <tcp_slowtmr+0x26c>)
 8015d54:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015d58:	4984      	ldr	r1, [pc, #528]	; (8015f6c <tcp_slowtmr+0x27c>)
 8015d5a:	4882      	ldr	r0, [pc, #520]	; (8015f64 <tcp_slowtmr+0x274>)
 8015d5c:	f00a fd04 	bl	8020768 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d62:	7f9a      	ldrb	r2, [r3, #30]
 8015d64:	4b7b      	ldr	r3, [pc, #492]	; (8015f54 <tcp_slowtmr+0x264>)
 8015d66:	781b      	ldrb	r3, [r3, #0]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d105      	bne.n	8015d78 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d72:	68db      	ldr	r3, [r3, #12]
 8015d74:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015d76:	e270      	b.n	801625a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015d78:	4b76      	ldr	r3, [pc, #472]	; (8015f54 <tcp_slowtmr+0x264>)
 8015d7a:	781a      	ldrb	r2, [r3, #0]
 8015d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d7e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015d86:	2300      	movs	r3, #0
 8015d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8e:	7d1b      	ldrb	r3, [r3, #20]
 8015d90:	2b02      	cmp	r3, #2
 8015d92:	d10a      	bne.n	8015daa <tcp_slowtmr+0xba>
 8015d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015d9a:	2b05      	cmp	r3, #5
 8015d9c:	d905      	bls.n	8015daa <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015da2:	3301      	adds	r3, #1
 8015da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015da8:	e11e      	b.n	8015fe8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015db0:	2b0b      	cmp	r3, #11
 8015db2:	d905      	bls.n	8015dc0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015db8:	3301      	adds	r3, #1
 8015dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015dbe:	e113      	b.n	8015fe8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d075      	beq.n	8015eb6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d006      	beq.n	8015de0 <tcp_slowtmr+0xf0>
 8015dd2:	4b62      	ldr	r3, [pc, #392]	; (8015f5c <tcp_slowtmr+0x26c>)
 8015dd4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8015dd8:	4965      	ldr	r1, [pc, #404]	; (8015f70 <tcp_slowtmr+0x280>)
 8015dda:	4862      	ldr	r0, [pc, #392]	; (8015f64 <tcp_slowtmr+0x274>)
 8015ddc:	f00a fcc4 	bl	8020768 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d106      	bne.n	8015df6 <tcp_slowtmr+0x106>
 8015de8:	4b5c      	ldr	r3, [pc, #368]	; (8015f5c <tcp_slowtmr+0x26c>)
 8015dea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015dee:	4961      	ldr	r1, [pc, #388]	; (8015f74 <tcp_slowtmr+0x284>)
 8015df0:	485c      	ldr	r0, [pc, #368]	; (8015f64 <tcp_slowtmr+0x274>)
 8015df2:	f00a fcb9 	bl	8020768 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015dfc:	2b0b      	cmp	r3, #11
 8015dfe:	d905      	bls.n	8015e0c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e04:	3301      	adds	r3, #1
 8015e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e0a:	e0ed      	b.n	8015fe8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e0e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015e12:	3b01      	subs	r3, #1
 8015e14:	4a58      	ldr	r2, [pc, #352]	; (8015f78 <tcp_slowtmr+0x288>)
 8015e16:	5cd3      	ldrb	r3, [r2, r3]
 8015e18:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e1c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015e20:	7c7a      	ldrb	r2, [r7, #17]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d907      	bls.n	8015e36 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e28:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	b2da      	uxtb	r2, r3
 8015e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e32:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015e3c:	7c7a      	ldrb	r2, [r7, #17]
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	f200 80d2 	bhi.w	8015fe8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015e44:	2301      	movs	r3, #1
 8015e46:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d108      	bne.n	8015e64 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e54:	f004 fc2a 	bl	801a6ac <tcp_zero_window_probe>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d014      	beq.n	8015e88 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8015e5e:	2300      	movs	r3, #0
 8015e60:	623b      	str	r3, [r7, #32]
 8015e62:	e011      	b.n	8015e88 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e6a:	4619      	mov	r1, r3
 8015e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e6e:	f003 faef 	bl	8019450 <tcp_split_unsent_seg>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d107      	bne.n	8015e88 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015e7a:	f003 fd6f 	bl	801995c <tcp_output>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d101      	bne.n	8015e88 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015e84:	2300      	movs	r3, #0
 8015e86:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015e88:	6a3b      	ldr	r3, [r7, #32]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	f000 80ac 	beq.w	8015fe8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8015e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e92:	2200      	movs	r2, #0
 8015e94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015e9e:	2b06      	cmp	r3, #6
 8015ea0:	f200 80a2 	bhi.w	8015fe8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015eaa:	3301      	adds	r3, #1
 8015eac:	b2da      	uxtb	r2, r3
 8015eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8015eb4:	e098      	b.n	8015fe8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	db0f      	blt.n	8015ee0 <tcp_slowtmr+0x1f0>
 8015ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ec6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015eca:	4293      	cmp	r3, r2
 8015ecc:	d008      	beq.n	8015ee0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	3301      	adds	r3, #1
 8015ed8:	b29b      	uxth	r3, r3
 8015eda:	b21a      	sxth	r2, r3
 8015edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ede:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8015ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015eec:	429a      	cmp	r2, r3
 8015eee:	db7b      	blt.n	8015fe8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ef2:	f004 f825 	bl	8019f40 <tcp_rexmit_rto_prepare>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d007      	beq.n	8015f0c <tcp_slowtmr+0x21c>
 8015efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d171      	bne.n	8015fe8 <tcp_slowtmr+0x2f8>
 8015f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d06d      	beq.n	8015fe8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f0e:	7d1b      	ldrb	r3, [r3, #20]
 8015f10:	2b02      	cmp	r3, #2
 8015f12:	d03a      	beq.n	8015f8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015f1a:	2b0c      	cmp	r3, #12
 8015f1c:	bf28      	it	cs
 8015f1e:	230c      	movcs	r3, #12
 8015f20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015f28:	10db      	asrs	r3, r3, #3
 8015f2a:	b21b      	sxth	r3, r3
 8015f2c:	461a      	mov	r2, r3
 8015f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015f34:	4413      	add	r3, r2
 8015f36:	7efa      	ldrb	r2, [r7, #27]
 8015f38:	4910      	ldr	r1, [pc, #64]	; (8015f7c <tcp_slowtmr+0x28c>)
 8015f3a:	5c8a      	ldrb	r2, [r1, r2]
 8015f3c:	4093      	lsls	r3, r2
 8015f3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015f40:	697b      	ldr	r3, [r7, #20]
 8015f42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015f46:	4293      	cmp	r3, r2
 8015f48:	dc1a      	bgt.n	8015f80 <tcp_slowtmr+0x290>
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	b21a      	sxth	r2, r3
 8015f4e:	e019      	b.n	8015f84 <tcp_slowtmr+0x294>
 8015f50:	2400cb50 	.word	0x2400cb50
 8015f54:	2400cb66 	.word	0x2400cb66
 8015f58:	2400cb5c 	.word	0x2400cb5c
 8015f5c:	08022220 	.word	0x08022220
 8015f60:	08022564 	.word	0x08022564
 8015f64:	08022264 	.word	0x08022264
 8015f68:	08022590 	.word	0x08022590
 8015f6c:	080225bc 	.word	0x080225bc
 8015f70:	080225ec 	.word	0x080225ec
 8015f74:	08022620 	.word	0x08022620
 8015f78:	08024650 	.word	0x08024650
 8015f7c:	08024640 	.word	0x08024640
 8015f80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	bf28      	it	cs
 8015fa0:	4613      	movcs	r3, r2
 8015fa2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015fa4:	8a7b      	ldrh	r3, [r7, #18]
 8015fa6:	085b      	lsrs	r3, r3, #1
 8015fa8:	b29a      	uxth	r2, r3
 8015faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fba:	005b      	lsls	r3, r3, #1
 8015fbc:	b29b      	uxth	r3, r3
 8015fbe:	429a      	cmp	r2, r3
 8015fc0:	d206      	bcs.n	8015fd0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015fc6:	005b      	lsls	r3, r3, #1
 8015fc8:	b29a      	uxth	r2, r3
 8015fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fcc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8015fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fdc:	2200      	movs	r2, #0
 8015fde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015fe4:	f004 f81c 	bl	801a020 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8015fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fea:	7d1b      	ldrb	r3, [r3, #20]
 8015fec:	2b06      	cmp	r3, #6
 8015fee:	d111      	bne.n	8016014 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff2:	8b5b      	ldrh	r3, [r3, #26]
 8015ff4:	f003 0310 	and.w	r3, r3, #16
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00b      	beq.n	8016014 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ffc:	4b9c      	ldr	r3, [pc, #624]	; (8016270 <tcp_slowtmr+0x580>)
 8015ffe:	681a      	ldr	r2, [r3, #0]
 8016000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016002:	6a1b      	ldr	r3, [r3, #32]
 8016004:	1ad3      	subs	r3, r2, r3
 8016006:	2b28      	cmp	r3, #40	; 0x28
 8016008:	d904      	bls.n	8016014 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801600a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801600e:	3301      	adds	r3, #1
 8016010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016016:	7a5b      	ldrb	r3, [r3, #9]
 8016018:	f003 0308 	and.w	r3, r3, #8
 801601c:	2b00      	cmp	r3, #0
 801601e:	d04a      	beq.n	80160b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8016020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016022:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016024:	2b04      	cmp	r3, #4
 8016026:	d003      	beq.n	8016030 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8016028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801602c:	2b07      	cmp	r3, #7
 801602e:	d142      	bne.n	80160b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016030:	4b8f      	ldr	r3, [pc, #572]	; (8016270 <tcp_slowtmr+0x580>)
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016036:	6a1b      	ldr	r3, [r3, #32]
 8016038:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801603c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016040:	4b8c      	ldr	r3, [pc, #560]	; (8016274 <tcp_slowtmr+0x584>)
 8016042:	440b      	add	r3, r1
 8016044:	498c      	ldr	r1, [pc, #560]	; (8016278 <tcp_slowtmr+0x588>)
 8016046:	fba1 1303 	umull	r1, r3, r1, r3
 801604a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801604c:	429a      	cmp	r2, r3
 801604e:	d90a      	bls.n	8016066 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8016050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016054:	3301      	adds	r3, #1
 8016056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801605a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801605e:	3301      	adds	r3, #1
 8016060:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016064:	e027      	b.n	80160b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016066:	4b82      	ldr	r3, [pc, #520]	; (8016270 <tcp_slowtmr+0x580>)
 8016068:	681a      	ldr	r2, [r3, #0]
 801606a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801606c:	6a1b      	ldr	r3, [r3, #32]
 801606e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016072:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8016076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016078:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801607c:	4618      	mov	r0, r3
 801607e:	4b7f      	ldr	r3, [pc, #508]	; (801627c <tcp_slowtmr+0x58c>)
 8016080:	fb00 f303 	mul.w	r3, r0, r3
 8016084:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8016086:	497c      	ldr	r1, [pc, #496]	; (8016278 <tcp_slowtmr+0x588>)
 8016088:	fba1 1303 	umull	r1, r3, r1, r3
 801608c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801608e:	429a      	cmp	r2, r3
 8016090:	d911      	bls.n	80160b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8016092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016094:	f004 faca 	bl	801a62c <tcp_keepalive>
 8016098:	4603      	mov	r3, r0
 801609a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801609e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d107      	bne.n	80160b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80160a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80160ac:	3301      	adds	r3, #1
 80160ae:	b2da      	uxtb	r2, r3
 80160b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80160b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d011      	beq.n	80160e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80160be:	4b6c      	ldr	r3, [pc, #432]	; (8016270 <tcp_slowtmr+0x580>)
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c4:	6a1b      	ldr	r3, [r3, #32]
 80160c6:	1ad2      	subs	r2, r2, r3
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80160ce:	4619      	mov	r1, r3
 80160d0:	460b      	mov	r3, r1
 80160d2:	005b      	lsls	r3, r3, #1
 80160d4:	440b      	add	r3, r1
 80160d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80160d8:	429a      	cmp	r2, r3
 80160da:	d302      	bcc.n	80160e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80160dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80160de:	f000 fddd 	bl	8016c9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80160e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160e4:	7d1b      	ldrb	r3, [r3, #20]
 80160e6:	2b03      	cmp	r3, #3
 80160e8:	d10b      	bne.n	8016102 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80160ea:	4b61      	ldr	r3, [pc, #388]	; (8016270 <tcp_slowtmr+0x580>)
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f0:	6a1b      	ldr	r3, [r3, #32]
 80160f2:	1ad3      	subs	r3, r2, r3
 80160f4:	2b28      	cmp	r3, #40	; 0x28
 80160f6:	d904      	bls.n	8016102 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80160f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160fc:	3301      	adds	r3, #1
 80160fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	7d1b      	ldrb	r3, [r3, #20]
 8016106:	2b09      	cmp	r3, #9
 8016108:	d10b      	bne.n	8016122 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801610a:	4b59      	ldr	r3, [pc, #356]	; (8016270 <tcp_slowtmr+0x580>)
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016110:	6a1b      	ldr	r3, [r3, #32]
 8016112:	1ad3      	subs	r3, r2, r3
 8016114:	2bf0      	cmp	r3, #240	; 0xf0
 8016116:	d904      	bls.n	8016122 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8016118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801611c:	3301      	adds	r3, #1
 801611e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016126:	2b00      	cmp	r3, #0
 8016128:	d060      	beq.n	80161ec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016130:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8016132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016134:	f000 fbfe 	bl	8016934 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8016138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613a:	2b00      	cmp	r3, #0
 801613c:	d010      	beq.n	8016160 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801613e:	4b50      	ldr	r3, [pc, #320]	; (8016280 <tcp_slowtmr+0x590>)
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016144:	429a      	cmp	r2, r3
 8016146:	d106      	bne.n	8016156 <tcp_slowtmr+0x466>
 8016148:	4b4e      	ldr	r3, [pc, #312]	; (8016284 <tcp_slowtmr+0x594>)
 801614a:	f240 526d 	movw	r2, #1389	; 0x56d
 801614e:	494e      	ldr	r1, [pc, #312]	; (8016288 <tcp_slowtmr+0x598>)
 8016150:	484e      	ldr	r0, [pc, #312]	; (801628c <tcp_slowtmr+0x59c>)
 8016152:	f00a fb09 	bl	8020768 <iprintf>
        prev->next = pcb->next;
 8016156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016158:	68da      	ldr	r2, [r3, #12]
 801615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801615c:	60da      	str	r2, [r3, #12]
 801615e:	e00f      	b.n	8016180 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016160:	4b47      	ldr	r3, [pc, #284]	; (8016280 <tcp_slowtmr+0x590>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016166:	429a      	cmp	r2, r3
 8016168:	d006      	beq.n	8016178 <tcp_slowtmr+0x488>
 801616a:	4b46      	ldr	r3, [pc, #280]	; (8016284 <tcp_slowtmr+0x594>)
 801616c:	f240 5271 	movw	r2, #1393	; 0x571
 8016170:	4947      	ldr	r1, [pc, #284]	; (8016290 <tcp_slowtmr+0x5a0>)
 8016172:	4846      	ldr	r0, [pc, #280]	; (801628c <tcp_slowtmr+0x59c>)
 8016174:	f00a faf8 	bl	8020768 <iprintf>
        tcp_active_pcbs = pcb->next;
 8016178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	4a40      	ldr	r2, [pc, #256]	; (8016280 <tcp_slowtmr+0x590>)
 801617e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8016180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016184:	2b00      	cmp	r3, #0
 8016186:	d013      	beq.n	80161b0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801618c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016190:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8016192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016194:	3304      	adds	r3, #4
 8016196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016198:	8ad2      	ldrh	r2, [r2, #22]
 801619a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801619c:	8b09      	ldrh	r1, [r1, #24]
 801619e:	9102      	str	r1, [sp, #8]
 80161a0:	9201      	str	r2, [sp, #4]
 80161a2:	9300      	str	r3, [sp, #0]
 80161a4:	462b      	mov	r3, r5
 80161a6:	4622      	mov	r2, r4
 80161a8:	4601      	mov	r1, r0
 80161aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80161ac:	f004 f98a 	bl	801a4c4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80161b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b2:	691b      	ldr	r3, [r3, #16]
 80161b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80161b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161b8:	7d1b      	ldrb	r3, [r3, #20]
 80161ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80161bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80161c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c2:	68db      	ldr	r3, [r3, #12]
 80161c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80161c6:	6838      	ldr	r0, [r7, #0]
 80161c8:	f7ff f9f4 	bl	80155b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80161cc:	4b31      	ldr	r3, [pc, #196]	; (8016294 <tcp_slowtmr+0x5a4>)
 80161ce:	2200      	movs	r2, #0
 80161d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d004      	beq.n	80161e2 <tcp_slowtmr+0x4f2>
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	f06f 010c 	mvn.w	r1, #12
 80161de:	68b8      	ldr	r0, [r7, #8]
 80161e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80161e2:	4b2c      	ldr	r3, [pc, #176]	; (8016294 <tcp_slowtmr+0x5a4>)
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d037      	beq.n	801625a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80161ea:	e592      	b.n	8015d12 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80161ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80161f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f8:	7f1b      	ldrb	r3, [r3, #28]
 80161fa:	3301      	adds	r3, #1
 80161fc:	b2da      	uxtb	r2, r3
 80161fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016200:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016204:	7f1a      	ldrb	r2, [r3, #28]
 8016206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016208:	7f5b      	ldrb	r3, [r3, #29]
 801620a:	429a      	cmp	r2, r3
 801620c:	d325      	bcc.n	801625a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016210:	2200      	movs	r2, #0
 8016212:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8016214:	4b1f      	ldr	r3, [pc, #124]	; (8016294 <tcp_slowtmr+0x5a4>)
 8016216:	2200      	movs	r2, #0
 8016218:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016220:	2b00      	cmp	r3, #0
 8016222:	d00b      	beq.n	801623c <tcp_slowtmr+0x54c>
 8016224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801622a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801622c:	6912      	ldr	r2, [r2, #16]
 801622e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016230:	4610      	mov	r0, r2
 8016232:	4798      	blx	r3
 8016234:	4603      	mov	r3, r0
 8016236:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801623a:	e002      	b.n	8016242 <tcp_slowtmr+0x552>
 801623c:	2300      	movs	r3, #0
 801623e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8016242:	4b14      	ldr	r3, [pc, #80]	; (8016294 <tcp_slowtmr+0x5a4>)
 8016244:	781b      	ldrb	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d000      	beq.n	801624c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801624a:	e562      	b.n	8015d12 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801624c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8016250:	2b00      	cmp	r3, #0
 8016252:	d102      	bne.n	801625a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8016254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016256:	f003 fb81 	bl	801995c <tcp_output>
  while (pcb != NULL) {
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	2b00      	cmp	r3, #0
 801625e:	f47f ad5e 	bne.w	8015d1e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016262:	2300      	movs	r3, #0
 8016264:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8016266:	4b0c      	ldr	r3, [pc, #48]	; (8016298 <tcp_slowtmr+0x5a8>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801626c:	e069      	b.n	8016342 <tcp_slowtmr+0x652>
 801626e:	bf00      	nop
 8016270:	2400cb50 	.word	0x2400cb50
 8016274:	000a4cb8 	.word	0x000a4cb8
 8016278:	10624dd3 	.word	0x10624dd3
 801627c:	000124f8 	.word	0x000124f8
 8016280:	2400cb5c 	.word	0x2400cb5c
 8016284:	08022220 	.word	0x08022220
 8016288:	08022658 	.word	0x08022658
 801628c:	08022264 	.word	0x08022264
 8016290:	08022684 	.word	0x08022684
 8016294:	2400cb64 	.word	0x2400cb64
 8016298:	2400cb60 	.word	0x2400cb60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801629e:	7d1b      	ldrb	r3, [r3, #20]
 80162a0:	2b0a      	cmp	r3, #10
 80162a2:	d006      	beq.n	80162b2 <tcp_slowtmr+0x5c2>
 80162a4:	4b2b      	ldr	r3, [pc, #172]	; (8016354 <tcp_slowtmr+0x664>)
 80162a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80162aa:	492b      	ldr	r1, [pc, #172]	; (8016358 <tcp_slowtmr+0x668>)
 80162ac:	482b      	ldr	r0, [pc, #172]	; (801635c <tcp_slowtmr+0x66c>)
 80162ae:	f00a fa5b 	bl	8020768 <iprintf>
    pcb_remove = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80162b8:	4b29      	ldr	r3, [pc, #164]	; (8016360 <tcp_slowtmr+0x670>)
 80162ba:	681a      	ldr	r2, [r3, #0]
 80162bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162be:	6a1b      	ldr	r3, [r3, #32]
 80162c0:	1ad3      	subs	r3, r2, r3
 80162c2:	2bf0      	cmp	r3, #240	; 0xf0
 80162c4:	d904      	bls.n	80162d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80162c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162ca:	3301      	adds	r3, #1
 80162cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80162d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d02f      	beq.n	8016338 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80162d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80162da:	f000 fb2b 	bl	8016934 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d010      	beq.n	8016306 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80162e4:	4b1f      	ldr	r3, [pc, #124]	; (8016364 <tcp_slowtmr+0x674>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d106      	bne.n	80162fc <tcp_slowtmr+0x60c>
 80162ee:	4b19      	ldr	r3, [pc, #100]	; (8016354 <tcp_slowtmr+0x664>)
 80162f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80162f4:	491c      	ldr	r1, [pc, #112]	; (8016368 <tcp_slowtmr+0x678>)
 80162f6:	4819      	ldr	r0, [pc, #100]	; (801635c <tcp_slowtmr+0x66c>)
 80162f8:	f00a fa36 	bl	8020768 <iprintf>
        prev->next = pcb->next;
 80162fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fe:	68da      	ldr	r2, [r3, #12]
 8016300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016302:	60da      	str	r2, [r3, #12]
 8016304:	e00f      	b.n	8016326 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8016306:	4b17      	ldr	r3, [pc, #92]	; (8016364 <tcp_slowtmr+0x674>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801630c:	429a      	cmp	r2, r3
 801630e:	d006      	beq.n	801631e <tcp_slowtmr+0x62e>
 8016310:	4b10      	ldr	r3, [pc, #64]	; (8016354 <tcp_slowtmr+0x664>)
 8016312:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8016316:	4915      	ldr	r1, [pc, #84]	; (801636c <tcp_slowtmr+0x67c>)
 8016318:	4810      	ldr	r0, [pc, #64]	; (801635c <tcp_slowtmr+0x66c>)
 801631a:	f00a fa25 	bl	8020768 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	4a10      	ldr	r2, [pc, #64]	; (8016364 <tcp_slowtmr+0x674>)
 8016324:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8016326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016328:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801632c:	68db      	ldr	r3, [r3, #12]
 801632e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8016330:	69f8      	ldr	r0, [r7, #28]
 8016332:	f7ff f93f 	bl	80155b4 <tcp_free>
 8016336:	e004      	b.n	8016342 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8016338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801633e:	68db      	ldr	r3, [r3, #12]
 8016340:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8016342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1a9      	bne.n	801629c <tcp_slowtmr+0x5ac>
    }
  }
}
 8016348:	bf00      	nop
 801634a:	bf00      	nop
 801634c:	3730      	adds	r7, #48	; 0x30
 801634e:	46bd      	mov	sp, r7
 8016350:	bdb0      	pop	{r4, r5, r7, pc}
 8016352:	bf00      	nop
 8016354:	08022220 	.word	0x08022220
 8016358:	080226b0 	.word	0x080226b0
 801635c:	08022264 	.word	0x08022264
 8016360:	2400cb50 	.word	0x2400cb50
 8016364:	2400cb60 	.word	0x2400cb60
 8016368:	080226e0 	.word	0x080226e0
 801636c:	08022708 	.word	0x08022708

08016370 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8016376:	4b2d      	ldr	r3, [pc, #180]	; (801642c <tcp_fasttmr+0xbc>)
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	3301      	adds	r3, #1
 801637c:	b2da      	uxtb	r2, r3
 801637e:	4b2b      	ldr	r3, [pc, #172]	; (801642c <tcp_fasttmr+0xbc>)
 8016380:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016382:	4b2b      	ldr	r3, [pc, #172]	; (8016430 <tcp_fasttmr+0xc0>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016388:	e048      	b.n	801641c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	7f9a      	ldrb	r2, [r3, #30]
 801638e:	4b27      	ldr	r3, [pc, #156]	; (801642c <tcp_fasttmr+0xbc>)
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	429a      	cmp	r2, r3
 8016394:	d03f      	beq.n	8016416 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8016396:	4b25      	ldr	r3, [pc, #148]	; (801642c <tcp_fasttmr+0xbc>)
 8016398:	781a      	ldrb	r2, [r3, #0]
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	8b5b      	ldrh	r3, [r3, #26]
 80163a2:	f003 0301 	and.w	r3, r3, #1
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d010      	beq.n	80163cc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	8b5b      	ldrh	r3, [r3, #26]
 80163ae:	f043 0302 	orr.w	r3, r3, #2
 80163b2:	b29a      	uxth	r2, r3
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80163b8:	6878      	ldr	r0, [r7, #4]
 80163ba:	f003 facf 	bl	801995c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	8b5b      	ldrh	r3, [r3, #26]
 80163c2:	f023 0303 	bic.w	r3, r3, #3
 80163c6:	b29a      	uxth	r2, r3
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	8b5b      	ldrh	r3, [r3, #26]
 80163d0:	f003 0308 	and.w	r3, r3, #8
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d009      	beq.n	80163ec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	8b5b      	ldrh	r3, [r3, #26]
 80163dc:	f023 0308 	bic.w	r3, r3, #8
 80163e0:	b29a      	uxth	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f7ff fa78 	bl	80158dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d00a      	beq.n	8016410 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80163fa:	4b0e      	ldr	r3, [pc, #56]	; (8016434 <tcp_fasttmr+0xc4>)
 80163fc:	2200      	movs	r2, #0
 80163fe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f000 f819 	bl	8016438 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016406:	4b0b      	ldr	r3, [pc, #44]	; (8016434 <tcp_fasttmr+0xc4>)
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d000      	beq.n	8016410 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801640e:	e7b8      	b.n	8016382 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	607b      	str	r3, [r7, #4]
 8016414:	e002      	b.n	801641c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	68db      	ldr	r3, [r3, #12]
 801641a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d1b3      	bne.n	801638a <tcp_fasttmr+0x1a>
    }
  }
}
 8016422:	bf00      	nop
 8016424:	bf00      	nop
 8016426:	3708      	adds	r7, #8
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}
 801642c:	2400cb66 	.word	0x2400cb66
 8016430:	2400cb5c 	.word	0x2400cb5c
 8016434:	2400cb64 	.word	0x2400cb64

08016438 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016438:	b590      	push	{r4, r7, lr}
 801643a:	b085      	sub	sp, #20
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d109      	bne.n	801645a <tcp_process_refused_data+0x22>
 8016446:	4b37      	ldr	r3, [pc, #220]	; (8016524 <tcp_process_refused_data+0xec>)
 8016448:	f240 6209 	movw	r2, #1545	; 0x609
 801644c:	4936      	ldr	r1, [pc, #216]	; (8016528 <tcp_process_refused_data+0xf0>)
 801644e:	4837      	ldr	r0, [pc, #220]	; (801652c <tcp_process_refused_data+0xf4>)
 8016450:	f00a f98a 	bl	8020768 <iprintf>
 8016454:	f06f 030f 	mvn.w	r3, #15
 8016458:	e060      	b.n	801651c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801645e:	7b5b      	ldrb	r3, [r3, #13]
 8016460:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016466:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	2200      	movs	r2, #0
 801646c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016474:	2b00      	cmp	r3, #0
 8016476:	d00b      	beq.n	8016490 <tcp_process_refused_data+0x58>
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	6918      	ldr	r0, [r3, #16]
 8016482:	2300      	movs	r3, #0
 8016484:	68ba      	ldr	r2, [r7, #8]
 8016486:	6879      	ldr	r1, [r7, #4]
 8016488:	47a0      	blx	r4
 801648a:	4603      	mov	r3, r0
 801648c:	73fb      	strb	r3, [r7, #15]
 801648e:	e007      	b.n	80164a0 <tcp_process_refused_data+0x68>
 8016490:	2300      	movs	r3, #0
 8016492:	68ba      	ldr	r2, [r7, #8]
 8016494:	6879      	ldr	r1, [r7, #4]
 8016496:	2000      	movs	r0, #0
 8016498:	f000 f8a4 	bl	80165e4 <tcp_recv_null>
 801649c:	4603      	mov	r3, r0
 801649e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80164a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d12a      	bne.n	80164fe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80164a8:	7bbb      	ldrb	r3, [r7, #14]
 80164aa:	f003 0320 	and.w	r3, r3, #32
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d033      	beq.n	801651a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80164ba:	d005      	beq.n	80164c8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80164c0:	3301      	adds	r3, #1
 80164c2:	b29a      	uxth	r2, r3
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d00b      	beq.n	80164ea <tcp_process_refused_data+0xb2>
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	6918      	ldr	r0, [r3, #16]
 80164dc:	2300      	movs	r3, #0
 80164de:	2200      	movs	r2, #0
 80164e0:	6879      	ldr	r1, [r7, #4]
 80164e2:	47a0      	blx	r4
 80164e4:	4603      	mov	r3, r0
 80164e6:	73fb      	strb	r3, [r7, #15]
 80164e8:	e001      	b.n	80164ee <tcp_process_refused_data+0xb6>
 80164ea:	2300      	movs	r3, #0
 80164ec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80164ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164f2:	f113 0f0d 	cmn.w	r3, #13
 80164f6:	d110      	bne.n	801651a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80164f8:	f06f 030c 	mvn.w	r3, #12
 80164fc:	e00e      	b.n	801651c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80164fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016502:	f113 0f0d 	cmn.w	r3, #13
 8016506:	d102      	bne.n	801650e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016508:	f06f 030c 	mvn.w	r3, #12
 801650c:	e006      	b.n	801651c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	68ba      	ldr	r2, [r7, #8]
 8016512:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8016514:	f06f 0304 	mvn.w	r3, #4
 8016518:	e000      	b.n	801651c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	bd90      	pop	{r4, r7, pc}
 8016524:	08022220 	.word	0x08022220
 8016528:	08022730 	.word	0x08022730
 801652c:	08022264 	.word	0x08022264

08016530 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016538:	e007      	b.n	801654a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f000 f80a 	bl	801655a <tcp_seg_free>
    seg = next;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d1f4      	bne.n	801653a <tcp_segs_free+0xa>
  }
}
 8016550:	bf00      	nop
 8016552:	bf00      	nop
 8016554:	3710      	adds	r7, #16
 8016556:	46bd      	mov	sp, r7
 8016558:	bd80      	pop	{r7, pc}

0801655a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b082      	sub	sp, #8
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00c      	beq.n	8016582 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d004      	beq.n	801657a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	685b      	ldr	r3, [r3, #4]
 8016574:	4618      	mov	r0, r3
 8016576:	f7fe fd61 	bl	801503c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801657a:	6879      	ldr	r1, [r7, #4]
 801657c:	2003      	movs	r0, #3
 801657e:	f7fd fead 	bl	80142dc <memp_free>
  }
}
 8016582:	bf00      	nop
 8016584:	3708      	adds	r7, #8
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d106      	bne.n	80165a8 <tcp_seg_copy+0x1c>
 801659a:	4b0f      	ldr	r3, [pc, #60]	; (80165d8 <tcp_seg_copy+0x4c>)
 801659c:	f240 6282 	movw	r2, #1666	; 0x682
 80165a0:	490e      	ldr	r1, [pc, #56]	; (80165dc <tcp_seg_copy+0x50>)
 80165a2:	480f      	ldr	r0, [pc, #60]	; (80165e0 <tcp_seg_copy+0x54>)
 80165a4:	f00a f8e0 	bl	8020768 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80165a8:	2003      	movs	r0, #3
 80165aa:	f7fd fe21 	bl	80141f0 <memp_malloc>
 80165ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d101      	bne.n	80165ba <tcp_seg_copy+0x2e>
    return NULL;
 80165b6:	2300      	movs	r3, #0
 80165b8:	e00a      	b.n	80165d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80165ba:	2210      	movs	r2, #16
 80165bc:	6879      	ldr	r1, [r7, #4]
 80165be:	68f8      	ldr	r0, [r7, #12]
 80165c0:	f00a f827 	bl	8020612 <memcpy>
  pbuf_ref(cseg->p);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	685b      	ldr	r3, [r3, #4]
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7fe fddd 	bl	8015188 <pbuf_ref>
  return cseg;
 80165ce:	68fb      	ldr	r3, [r7, #12]
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3710      	adds	r7, #16
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}
 80165d8:	08022220 	.word	0x08022220
 80165dc:	08022774 	.word	0x08022774
 80165e0:	08022264 	.word	0x08022264

080165e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	60f8      	str	r0, [r7, #12]
 80165ec:	60b9      	str	r1, [r7, #8]
 80165ee:	607a      	str	r2, [r7, #4]
 80165f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d109      	bne.n	801660c <tcp_recv_null+0x28>
 80165f8:	4b12      	ldr	r3, [pc, #72]	; (8016644 <tcp_recv_null+0x60>)
 80165fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80165fe:	4912      	ldr	r1, [pc, #72]	; (8016648 <tcp_recv_null+0x64>)
 8016600:	4812      	ldr	r0, [pc, #72]	; (801664c <tcp_recv_null+0x68>)
 8016602:	f00a f8b1 	bl	8020768 <iprintf>
 8016606:	f06f 030f 	mvn.w	r3, #15
 801660a:	e016      	b.n	801663a <tcp_recv_null+0x56>

  if (p != NULL) {
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d009      	beq.n	8016626 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	891b      	ldrh	r3, [r3, #8]
 8016616:	4619      	mov	r1, r3
 8016618:	68b8      	ldr	r0, [r7, #8]
 801661a:	f7ff fb19 	bl	8015c50 <tcp_recved>
    pbuf_free(p);
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7fe fd0c 	bl	801503c <pbuf_free>
 8016624:	e008      	b.n	8016638 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d104      	bne.n	8016638 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801662e:	68b8      	ldr	r0, [r7, #8]
 8016630:	f7ff f9be 	bl	80159b0 <tcp_close>
 8016634:	4603      	mov	r3, r0
 8016636:	e000      	b.n	801663a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016638:	2300      	movs	r3, #0
}
 801663a:	4618      	mov	r0, r3
 801663c:	3710      	adds	r7, #16
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	08022220 	.word	0x08022220
 8016648:	08022790 	.word	0x08022790
 801664c:	08022264 	.word	0x08022264

08016650 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b086      	sub	sp, #24
 8016654:	af00      	add	r7, sp, #0
 8016656:	4603      	mov	r3, r0
 8016658:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801665a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801665e:	2b00      	cmp	r3, #0
 8016660:	db01      	blt.n	8016666 <tcp_kill_prio+0x16>
 8016662:	79fb      	ldrb	r3, [r7, #7]
 8016664:	e000      	b.n	8016668 <tcp_kill_prio+0x18>
 8016666:	237f      	movs	r3, #127	; 0x7f
 8016668:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801666a:	7afb      	ldrb	r3, [r7, #11]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d034      	beq.n	80166da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016670:	7afb      	ldrb	r3, [r7, #11]
 8016672:	3b01      	subs	r3, #1
 8016674:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016676:	2300      	movs	r3, #0
 8016678:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801667a:	2300      	movs	r3, #0
 801667c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801667e:	4b19      	ldr	r3, [pc, #100]	; (80166e4 <tcp_kill_prio+0x94>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	617b      	str	r3, [r7, #20]
 8016684:	e01f      	b.n	80166c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	7d5b      	ldrb	r3, [r3, #21]
 801668a:	7afa      	ldrb	r2, [r7, #11]
 801668c:	429a      	cmp	r2, r3
 801668e:	d80c      	bhi.n	80166aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016694:	7afa      	ldrb	r2, [r7, #11]
 8016696:	429a      	cmp	r2, r3
 8016698:	d112      	bne.n	80166c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801669a:	4b13      	ldr	r3, [pc, #76]	; (80166e8 <tcp_kill_prio+0x98>)
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	697b      	ldr	r3, [r7, #20]
 80166a0:	6a1b      	ldr	r3, [r3, #32]
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	68fa      	ldr	r2, [r7, #12]
 80166a6:	429a      	cmp	r2, r3
 80166a8:	d80a      	bhi.n	80166c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80166aa:	4b0f      	ldr	r3, [pc, #60]	; (80166e8 <tcp_kill_prio+0x98>)
 80166ac:	681a      	ldr	r2, [r3, #0]
 80166ae:	697b      	ldr	r3, [r7, #20]
 80166b0:	6a1b      	ldr	r3, [r3, #32]
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80166b6:	697b      	ldr	r3, [r7, #20]
 80166b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80166ba:	697b      	ldr	r3, [r7, #20]
 80166bc:	7d5b      	ldrb	r3, [r3, #21]
 80166be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	617b      	str	r3, [r7, #20]
 80166c6:	697b      	ldr	r3, [r7, #20]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d1dc      	bne.n	8016686 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d004      	beq.n	80166dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80166d2:	6938      	ldr	r0, [r7, #16]
 80166d4:	f7ff fa56 	bl	8015b84 <tcp_abort>
 80166d8:	e000      	b.n	80166dc <tcp_kill_prio+0x8c>
    return;
 80166da:	bf00      	nop
  }
}
 80166dc:	3718      	adds	r7, #24
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	2400cb5c 	.word	0x2400cb5c
 80166e8:	2400cb50 	.word	0x2400cb50

080166ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b086      	sub	sp, #24
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	4603      	mov	r3, r0
 80166f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80166f6:	79fb      	ldrb	r3, [r7, #7]
 80166f8:	2b08      	cmp	r3, #8
 80166fa:	d009      	beq.n	8016710 <tcp_kill_state+0x24>
 80166fc:	79fb      	ldrb	r3, [r7, #7]
 80166fe:	2b09      	cmp	r3, #9
 8016700:	d006      	beq.n	8016710 <tcp_kill_state+0x24>
 8016702:	4b1a      	ldr	r3, [pc, #104]	; (801676c <tcp_kill_state+0x80>)
 8016704:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8016708:	4919      	ldr	r1, [pc, #100]	; (8016770 <tcp_kill_state+0x84>)
 801670a:	481a      	ldr	r0, [pc, #104]	; (8016774 <tcp_kill_state+0x88>)
 801670c:	f00a f82c 	bl	8020768 <iprintf>

  inactivity = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016714:	2300      	movs	r3, #0
 8016716:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016718:	4b17      	ldr	r3, [pc, #92]	; (8016778 <tcp_kill_state+0x8c>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	617b      	str	r3, [r7, #20]
 801671e:	e017      	b.n	8016750 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	7d1b      	ldrb	r3, [r3, #20]
 8016724:	79fa      	ldrb	r2, [r7, #7]
 8016726:	429a      	cmp	r2, r3
 8016728:	d10f      	bne.n	801674a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801672a:	4b14      	ldr	r3, [pc, #80]	; (801677c <tcp_kill_state+0x90>)
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	6a1b      	ldr	r3, [r3, #32]
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	429a      	cmp	r2, r3
 8016738:	d807      	bhi.n	801674a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801673a:	4b10      	ldr	r3, [pc, #64]	; (801677c <tcp_kill_state+0x90>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	697b      	ldr	r3, [r7, #20]
 8016740:	6a1b      	ldr	r3, [r3, #32]
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801674a:	697b      	ldr	r3, [r7, #20]
 801674c:	68db      	ldr	r3, [r3, #12]
 801674e:	617b      	str	r3, [r7, #20]
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d1e4      	bne.n	8016720 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d003      	beq.n	8016764 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801675c:	2100      	movs	r1, #0
 801675e:	6938      	ldr	r0, [r7, #16]
 8016760:	f7ff f952 	bl	8015a08 <tcp_abandon>
  }
}
 8016764:	bf00      	nop
 8016766:	3718      	adds	r7, #24
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}
 801676c:	08022220 	.word	0x08022220
 8016770:	080227ac 	.word	0x080227ac
 8016774:	08022264 	.word	0x08022264
 8016778:	2400cb5c 	.word	0x2400cb5c
 801677c:	2400cb50 	.word	0x2400cb50

08016780 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b084      	sub	sp, #16
 8016784:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016786:	2300      	movs	r3, #0
 8016788:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801678a:	2300      	movs	r3, #0
 801678c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801678e:	4b12      	ldr	r3, [pc, #72]	; (80167d8 <tcp_kill_timewait+0x58>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	e012      	b.n	80167bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016796:	4b11      	ldr	r3, [pc, #68]	; (80167dc <tcp_kill_timewait+0x5c>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	6a1b      	ldr	r3, [r3, #32]
 801679e:	1ad3      	subs	r3, r2, r3
 80167a0:	687a      	ldr	r2, [r7, #4]
 80167a2:	429a      	cmp	r2, r3
 80167a4:	d807      	bhi.n	80167b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80167a6:	4b0d      	ldr	r3, [pc, #52]	; (80167dc <tcp_kill_timewait+0x5c>)
 80167a8:	681a      	ldr	r2, [r3, #0]
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6a1b      	ldr	r3, [r3, #32]
 80167ae:	1ad3      	subs	r3, r2, r3
 80167b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	68db      	ldr	r3, [r3, #12]
 80167ba:	60fb      	str	r3, [r7, #12]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1e9      	bne.n	8016796 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d002      	beq.n	80167ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80167c8:	68b8      	ldr	r0, [r7, #8]
 80167ca:	f7ff f9db 	bl	8015b84 <tcp_abort>
  }
}
 80167ce:	bf00      	nop
 80167d0:	3710      	adds	r7, #16
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	2400cb60 	.word	0x2400cb60
 80167dc:	2400cb50 	.word	0x2400cb50

080167e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80167e0:	b580      	push	{r7, lr}
 80167e2:	b082      	sub	sp, #8
 80167e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80167e6:	4b10      	ldr	r3, [pc, #64]	; (8016828 <tcp_handle_closepend+0x48>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80167ec:	e014      	b.n	8016818 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	68db      	ldr	r3, [r3, #12]
 80167f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	8b5b      	ldrh	r3, [r3, #26]
 80167f8:	f003 0308 	and.w	r3, r3, #8
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d009      	beq.n	8016814 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	8b5b      	ldrh	r3, [r3, #26]
 8016804:	f023 0308 	bic.w	r3, r3, #8
 8016808:	b29a      	uxth	r2, r3
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f7ff f864 	bl	80158dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016814:	683b      	ldr	r3, [r7, #0]
 8016816:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d1e7      	bne.n	80167ee <tcp_handle_closepend+0xe>
  }
}
 801681e:	bf00      	nop
 8016820:	bf00      	nop
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}
 8016828:	2400cb5c 	.word	0x2400cb5c

0801682c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	4603      	mov	r3, r0
 8016834:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016836:	2001      	movs	r0, #1
 8016838:	f7fd fcda 	bl	80141f0 <memp_malloc>
 801683c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d126      	bne.n	8016892 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016844:	f7ff ffcc 	bl	80167e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016848:	f7ff ff9a 	bl	8016780 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801684c:	2001      	movs	r0, #1
 801684e:	f7fd fccf 	bl	80141f0 <memp_malloc>
 8016852:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d11b      	bne.n	8016892 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801685a:	2009      	movs	r0, #9
 801685c:	f7ff ff46 	bl	80166ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016860:	2001      	movs	r0, #1
 8016862:	f7fd fcc5 	bl	80141f0 <memp_malloc>
 8016866:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d111      	bne.n	8016892 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801686e:	2008      	movs	r0, #8
 8016870:	f7ff ff3c 	bl	80166ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016874:	2001      	movs	r0, #1
 8016876:	f7fd fcbb 	bl	80141f0 <memp_malloc>
 801687a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d107      	bne.n	8016892 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016882:	79fb      	ldrb	r3, [r7, #7]
 8016884:	4618      	mov	r0, r3
 8016886:	f7ff fee3 	bl	8016650 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801688a:	2001      	movs	r0, #1
 801688c:	f7fd fcb0 	bl	80141f0 <memp_malloc>
 8016890:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d03f      	beq.n	8016918 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016898:	229c      	movs	r2, #156	; 0x9c
 801689a:	2100      	movs	r1, #0
 801689c:	68f8      	ldr	r0, [r7, #12]
 801689e:	f009 fec6 	bl	802062e <memset>
    pcb->prio = prio;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	79fa      	ldrb	r2, [r7, #7]
 80168a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80168ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80168b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	22ff      	movs	r2, #255	; 0xff
 80168c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 80168ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	2206      	movs	r2, #6
 80168d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	2206      	movs	r2, #6
 80168dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	2201      	movs	r2, #1
 80168ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80168ee:	4b0d      	ldr	r3, [pc, #52]	; (8016924 <tcp_alloc+0xf8>)
 80168f0:	681a      	ldr	r2, [r3, #0]
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80168f6:	4b0c      	ldr	r3, [pc, #48]	; (8016928 <tcp_alloc+0xfc>)
 80168f8:	781a      	ldrb	r2, [r3, #0]
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016904:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	4a08      	ldr	r2, [pc, #32]	; (801692c <tcp_alloc+0x100>)
 801690c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016910:	68fb      	ldr	r3, [r7, #12]
 8016912:	4a07      	ldr	r2, [pc, #28]	; (8016930 <tcp_alloc+0x104>)
 8016914:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016918:	68fb      	ldr	r3, [r7, #12]
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}
 8016922:	bf00      	nop
 8016924:	2400cb50 	.word	0x2400cb50
 8016928:	2400cb66 	.word	0x2400cb66
 801692c:	080165e5 	.word	0x080165e5
 8016930:	006ddd00 	.word	0x006ddd00

08016934 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b082      	sub	sp, #8
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d107      	bne.n	8016952 <tcp_pcb_purge+0x1e>
 8016942:	4b21      	ldr	r3, [pc, #132]	; (80169c8 <tcp_pcb_purge+0x94>)
 8016944:	f640 0251 	movw	r2, #2129	; 0x851
 8016948:	4920      	ldr	r1, [pc, #128]	; (80169cc <tcp_pcb_purge+0x98>)
 801694a:	4821      	ldr	r0, [pc, #132]	; (80169d0 <tcp_pcb_purge+0x9c>)
 801694c:	f009 ff0c 	bl	8020768 <iprintf>
 8016950:	e037      	b.n	80169c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	7d1b      	ldrb	r3, [r3, #20]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d033      	beq.n	80169c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801695e:	2b0a      	cmp	r3, #10
 8016960:	d02f      	beq.n	80169c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016966:	2b01      	cmp	r3, #1
 8016968:	d02b      	beq.n	80169c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801696e:	2b00      	cmp	r3, #0
 8016970:	d007      	beq.n	8016982 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016976:	4618      	mov	r0, r3
 8016978:	f7fe fb60 	bl	801503c <pbuf_free>
      pcb->refused_data = NULL;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2200      	movs	r2, #0
 8016980:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016986:	2b00      	cmp	r3, #0
 8016988:	d002      	beq.n	8016990 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801698a:	6878      	ldr	r0, [r7, #4]
 801698c:	f000 f986 	bl	8016c9c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016996:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801699c:	4618      	mov	r0, r3
 801699e:	f7ff fdc7 	bl	8016530 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169a6:	4618      	mov	r0, r3
 80169a8:	f7ff fdc2 	bl	8016530 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	2200      	movs	r2, #0
 80169b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2200      	movs	r2, #0
 80169be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	08022220 	.word	0x08022220
 80169cc:	0802286c 	.word	0x0802286c
 80169d0:	08022264 	.word	0x08022264

080169d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b084      	sub	sp, #16
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
 80169dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d106      	bne.n	80169f2 <tcp_pcb_remove+0x1e>
 80169e4:	4b3e      	ldr	r3, [pc, #248]	; (8016ae0 <tcp_pcb_remove+0x10c>)
 80169e6:	f640 0283 	movw	r2, #2179	; 0x883
 80169ea:	493e      	ldr	r1, [pc, #248]	; (8016ae4 <tcp_pcb_remove+0x110>)
 80169ec:	483e      	ldr	r0, [pc, #248]	; (8016ae8 <tcp_pcb_remove+0x114>)
 80169ee:	f009 febb 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d106      	bne.n	8016a06 <tcp_pcb_remove+0x32>
 80169f8:	4b39      	ldr	r3, [pc, #228]	; (8016ae0 <tcp_pcb_remove+0x10c>)
 80169fa:	f640 0284 	movw	r2, #2180	; 0x884
 80169fe:	493b      	ldr	r1, [pc, #236]	; (8016aec <tcp_pcb_remove+0x118>)
 8016a00:	4839      	ldr	r0, [pc, #228]	; (8016ae8 <tcp_pcb_remove+0x114>)
 8016a02:	f009 feb1 	bl	8020768 <iprintf>

  TCP_RMV(pcblist, pcb);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	683a      	ldr	r2, [r7, #0]
 8016a0c:	429a      	cmp	r2, r3
 8016a0e:	d105      	bne.n	8016a1c <tcp_pcb_remove+0x48>
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	68da      	ldr	r2, [r3, #12]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	601a      	str	r2, [r3, #0]
 8016a1a:	e013      	b.n	8016a44 <tcp_pcb_remove+0x70>
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	60fb      	str	r3, [r7, #12]
 8016a22:	e00c      	b.n	8016a3e <tcp_pcb_remove+0x6a>
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	68db      	ldr	r3, [r3, #12]
 8016a28:	683a      	ldr	r2, [r7, #0]
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	d104      	bne.n	8016a38 <tcp_pcb_remove+0x64>
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	68da      	ldr	r2, [r3, #12]
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	60da      	str	r2, [r3, #12]
 8016a36:	e005      	b.n	8016a44 <tcp_pcb_remove+0x70>
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	68db      	ldr	r3, [r3, #12]
 8016a3c:	60fb      	str	r3, [r7, #12]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1ef      	bne.n	8016a24 <tcp_pcb_remove+0x50>
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	2200      	movs	r2, #0
 8016a48:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016a4a:	6838      	ldr	r0, [r7, #0]
 8016a4c:	f7ff ff72 	bl	8016934 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	7d1b      	ldrb	r3, [r3, #20]
 8016a54:	2b0a      	cmp	r3, #10
 8016a56:	d013      	beq.n	8016a80 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016a5c:	2b01      	cmp	r3, #1
 8016a5e:	d00f      	beq.n	8016a80 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	8b5b      	ldrh	r3, [r3, #26]
 8016a64:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d009      	beq.n	8016a80 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016a6c:	683b      	ldr	r3, [r7, #0]
 8016a6e:	8b5b      	ldrh	r3, [r3, #26]
 8016a70:	f043 0302 	orr.w	r3, r3, #2
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	683b      	ldr	r3, [r7, #0]
 8016a78:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016a7a:	6838      	ldr	r0, [r7, #0]
 8016a7c:	f002 ff6e 	bl	801995c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	7d1b      	ldrb	r3, [r3, #20]
 8016a84:	2b01      	cmp	r3, #1
 8016a86:	d020      	beq.n	8016aca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d006      	beq.n	8016a9e <tcp_pcb_remove+0xca>
 8016a90:	4b13      	ldr	r3, [pc, #76]	; (8016ae0 <tcp_pcb_remove+0x10c>)
 8016a92:	f640 0293 	movw	r2, #2195	; 0x893
 8016a96:	4916      	ldr	r1, [pc, #88]	; (8016af0 <tcp_pcb_remove+0x11c>)
 8016a98:	4813      	ldr	r0, [pc, #76]	; (8016ae8 <tcp_pcb_remove+0x114>)
 8016a9a:	f009 fe65 	bl	8020768 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d006      	beq.n	8016ab4 <tcp_pcb_remove+0xe0>
 8016aa6:	4b0e      	ldr	r3, [pc, #56]	; (8016ae0 <tcp_pcb_remove+0x10c>)
 8016aa8:	f640 0294 	movw	r2, #2196	; 0x894
 8016aac:	4911      	ldr	r1, [pc, #68]	; (8016af4 <tcp_pcb_remove+0x120>)
 8016aae:	480e      	ldr	r0, [pc, #56]	; (8016ae8 <tcp_pcb_remove+0x114>)
 8016ab0:	f009 fe5a 	bl	8020768 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d006      	beq.n	8016aca <tcp_pcb_remove+0xf6>
 8016abc:	4b08      	ldr	r3, [pc, #32]	; (8016ae0 <tcp_pcb_remove+0x10c>)
 8016abe:	f640 0296 	movw	r2, #2198	; 0x896
 8016ac2:	490d      	ldr	r1, [pc, #52]	; (8016af8 <tcp_pcb_remove+0x124>)
 8016ac4:	4808      	ldr	r0, [pc, #32]	; (8016ae8 <tcp_pcb_remove+0x114>)
 8016ac6:	f009 fe4f 	bl	8020768 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016aca:	683b      	ldr	r3, [r7, #0]
 8016acc:	2200      	movs	r2, #0
 8016ace:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	08022220 	.word	0x08022220
 8016ae4:	08022888 	.word	0x08022888
 8016ae8:	08022264 	.word	0x08022264
 8016aec:	080228a4 	.word	0x080228a4
 8016af0:	080228c4 	.word	0x080228c4
 8016af4:	080228dc 	.word	0x080228dc
 8016af8:	080228f8 	.word	0x080228f8

08016afc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016afc:	b580      	push	{r7, lr}
 8016afe:	b082      	sub	sp, #8
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d106      	bne.n	8016b18 <tcp_next_iss+0x1c>
 8016b0a:	4b0a      	ldr	r3, [pc, #40]	; (8016b34 <tcp_next_iss+0x38>)
 8016b0c:	f640 02af 	movw	r2, #2223	; 0x8af
 8016b10:	4909      	ldr	r1, [pc, #36]	; (8016b38 <tcp_next_iss+0x3c>)
 8016b12:	480a      	ldr	r0, [pc, #40]	; (8016b3c <tcp_next_iss+0x40>)
 8016b14:	f009 fe28 	bl	8020768 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016b18:	4b09      	ldr	r3, [pc, #36]	; (8016b40 <tcp_next_iss+0x44>)
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	4b09      	ldr	r3, [pc, #36]	; (8016b44 <tcp_next_iss+0x48>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	4413      	add	r3, r2
 8016b22:	4a07      	ldr	r2, [pc, #28]	; (8016b40 <tcp_next_iss+0x44>)
 8016b24:	6013      	str	r3, [r2, #0]
  return iss;
 8016b26:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <tcp_next_iss+0x44>)
 8016b28:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3708      	adds	r7, #8
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	08022220 	.word	0x08022220
 8016b38:	08022910 	.word	0x08022910
 8016b3c:	08022264 	.word	0x08022264
 8016b40:	240000b8 	.word	0x240000b8
 8016b44:	2400cb50 	.word	0x2400cb50

08016b48 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b086      	sub	sp, #24
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	4603      	mov	r3, r0
 8016b50:	60b9      	str	r1, [r7, #8]
 8016b52:	607a      	str	r2, [r7, #4]
 8016b54:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d106      	bne.n	8016b6a <tcp_eff_send_mss_netif+0x22>
 8016b5c:	4b14      	ldr	r3, [pc, #80]	; (8016bb0 <tcp_eff_send_mss_netif+0x68>)
 8016b5e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8016b62:	4914      	ldr	r1, [pc, #80]	; (8016bb4 <tcp_eff_send_mss_netif+0x6c>)
 8016b64:	4814      	ldr	r0, [pc, #80]	; (8016bb8 <tcp_eff_send_mss_netif+0x70>)
 8016b66:	f009 fdff 	bl	8020768 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016b6a:	68bb      	ldr	r3, [r7, #8]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d101      	bne.n	8016b74 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016b70:	89fb      	ldrh	r3, [r7, #14]
 8016b72:	e019      	b.n	8016ba8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016b78:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016b7a:	8afb      	ldrh	r3, [r7, #22]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d012      	beq.n	8016ba6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016b80:	2328      	movs	r3, #40	; 0x28
 8016b82:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016b84:	8afa      	ldrh	r2, [r7, #22]
 8016b86:	8abb      	ldrh	r3, [r7, #20]
 8016b88:	429a      	cmp	r2, r3
 8016b8a:	d904      	bls.n	8016b96 <tcp_eff_send_mss_netif+0x4e>
 8016b8c:	8afa      	ldrh	r2, [r7, #22]
 8016b8e:	8abb      	ldrh	r3, [r7, #20]
 8016b90:	1ad3      	subs	r3, r2, r3
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	e000      	b.n	8016b98 <tcp_eff_send_mss_netif+0x50>
 8016b96:	2300      	movs	r3, #0
 8016b98:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016b9a:	8a7a      	ldrh	r2, [r7, #18]
 8016b9c:	89fb      	ldrh	r3, [r7, #14]
 8016b9e:	4293      	cmp	r3, r2
 8016ba0:	bf28      	it	cs
 8016ba2:	4613      	movcs	r3, r2
 8016ba4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016ba6:	89fb      	ldrh	r3, [r7, #14]
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3718      	adds	r7, #24
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	08022220 	.word	0x08022220
 8016bb4:	0802292c 	.word	0x0802292c
 8016bb8:	08022264 	.word	0x08022264

08016bbc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b084      	sub	sp, #16
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
 8016bc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d119      	bne.n	8016c04 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016bd0:	4b10      	ldr	r3, [pc, #64]	; (8016c14 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016bd2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8016bd6:	4910      	ldr	r1, [pc, #64]	; (8016c18 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016bd8:	4810      	ldr	r0, [pc, #64]	; (8016c1c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016bda:	f009 fdc5 	bl	8020768 <iprintf>

  while (pcb != NULL) {
 8016bde:	e011      	b.n	8016c04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681a      	ldr	r2, [r3, #0]
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	429a      	cmp	r2, r3
 8016bea:	d108      	bne.n	8016bfe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016bf2:	68f8      	ldr	r0, [r7, #12]
 8016bf4:	f7fe ffc6 	bl	8015b84 <tcp_abort>
      pcb = next;
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	60fb      	str	r3, [r7, #12]
 8016bfc:	e002      	b.n	8016c04 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d1ea      	bne.n	8016be0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016c0a:	bf00      	nop
 8016c0c:	bf00      	nop
 8016c0e:	3710      	adds	r7, #16
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	08022220 	.word	0x08022220
 8016c18:	08022954 	.word	0x08022954
 8016c1c:	08022264 	.word	0x08022264

08016c20 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
 8016c28:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d02a      	beq.n	8016c86 <tcp_netif_ip_addr_changed+0x66>
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d026      	beq.n	8016c86 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016c38:	4b15      	ldr	r3, [pc, #84]	; (8016c90 <tcp_netif_ip_addr_changed+0x70>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	4619      	mov	r1, r3
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ff ffbc 	bl	8016bbc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016c44:	4b13      	ldr	r3, [pc, #76]	; (8016c94 <tcp_netif_ip_addr_changed+0x74>)
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	4619      	mov	r1, r3
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7ff ffb6 	bl	8016bbc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d017      	beq.n	8016c86 <tcp_netif_ip_addr_changed+0x66>
 8016c56:	683b      	ldr	r3, [r7, #0]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d013      	beq.n	8016c86 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c5e:	4b0e      	ldr	r3, [pc, #56]	; (8016c98 <tcp_netif_ip_addr_changed+0x78>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	60fb      	str	r3, [r7, #12]
 8016c64:	e00c      	b.n	8016c80 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d103      	bne.n	8016c7a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	68db      	ldr	r3, [r3, #12]
 8016c7e:	60fb      	str	r3, [r7, #12]
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d1ef      	bne.n	8016c66 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016c86:	bf00      	nop
 8016c88:	3710      	adds	r7, #16
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	2400cb5c 	.word	0x2400cb5c
 8016c94:	2400cb54 	.word	0x2400cb54
 8016c98:	2400cb58 	.word	0x2400cb58

08016c9c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d007      	beq.n	8016cbc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ff fc3d 	bl	8016530 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	2200      	movs	r2, #0
 8016cba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016cbc:	bf00      	nop
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016cc4:	b590      	push	{r4, r7, lr}
 8016cc6:	b08d      	sub	sp, #52	; 0x34
 8016cc8:	af04      	add	r7, sp, #16
 8016cca:	6078      	str	r0, [r7, #4]
 8016ccc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d105      	bne.n	8016ce0 <tcp_input+0x1c>
 8016cd4:	4b9b      	ldr	r3, [pc, #620]	; (8016f44 <tcp_input+0x280>)
 8016cd6:	2283      	movs	r2, #131	; 0x83
 8016cd8:	499b      	ldr	r1, [pc, #620]	; (8016f48 <tcp_input+0x284>)
 8016cda:	489c      	ldr	r0, [pc, #624]	; (8016f4c <tcp_input+0x288>)
 8016cdc:	f009 fd44 	bl	8020768 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	4a9a      	ldr	r2, [pc, #616]	; (8016f50 <tcp_input+0x28c>)
 8016ce6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	895b      	ldrh	r3, [r3, #10]
 8016cec:	2b13      	cmp	r3, #19
 8016cee:	f240 83d1 	bls.w	8017494 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016cf2:	4b98      	ldr	r3, [pc, #608]	; (8016f54 <tcp_input+0x290>)
 8016cf4:	695b      	ldr	r3, [r3, #20]
 8016cf6:	4a97      	ldr	r2, [pc, #604]	; (8016f54 <tcp_input+0x290>)
 8016cf8:	6812      	ldr	r2, [r2, #0]
 8016cfa:	4611      	mov	r1, r2
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f007 fe25 	bl	801e94c <ip4_addr_isbroadcast_u32>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	f040 83c7 	bne.w	8017498 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016d0a:	4b92      	ldr	r3, [pc, #584]	; (8016f54 <tcp_input+0x290>)
 8016d0c:	695b      	ldr	r3, [r3, #20]
 8016d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016d12:	2be0      	cmp	r3, #224	; 0xe0
 8016d14:	f000 83c0 	beq.w	8017498 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016d18:	4b8d      	ldr	r3, [pc, #564]	; (8016f50 <tcp_input+0x28c>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	899b      	ldrh	r3, [r3, #12]
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	4618      	mov	r0, r3
 8016d22:	f7fc fcd5 	bl	80136d0 <lwip_htons>
 8016d26:	4603      	mov	r3, r0
 8016d28:	0b1b      	lsrs	r3, r3, #12
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	009b      	lsls	r3, r3, #2
 8016d30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016d32:	7cbb      	ldrb	r3, [r7, #18]
 8016d34:	2b13      	cmp	r3, #19
 8016d36:	f240 83b1 	bls.w	801749c <tcp_input+0x7d8>
 8016d3a:	7cbb      	ldrb	r3, [r7, #18]
 8016d3c:	b29a      	uxth	r2, r3
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	891b      	ldrh	r3, [r3, #8]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	f200 83aa 	bhi.w	801749c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016d48:	7cbb      	ldrb	r3, [r7, #18]
 8016d4a:	b29b      	uxth	r3, r3
 8016d4c:	3b14      	subs	r3, #20
 8016d4e:	b29a      	uxth	r2, r3
 8016d50:	4b81      	ldr	r3, [pc, #516]	; (8016f58 <tcp_input+0x294>)
 8016d52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016d54:	4b81      	ldr	r3, [pc, #516]	; (8016f5c <tcp_input+0x298>)
 8016d56:	2200      	movs	r2, #0
 8016d58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	895a      	ldrh	r2, [r3, #10]
 8016d5e:	7cbb      	ldrb	r3, [r7, #18]
 8016d60:	b29b      	uxth	r3, r3
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d309      	bcc.n	8016d7a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016d66:	4b7c      	ldr	r3, [pc, #496]	; (8016f58 <tcp_input+0x294>)
 8016d68:	881a      	ldrh	r2, [r3, #0]
 8016d6a:	4b7d      	ldr	r3, [pc, #500]	; (8016f60 <tcp_input+0x29c>)
 8016d6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016d6e:	7cbb      	ldrb	r3, [r7, #18]
 8016d70:	4619      	mov	r1, r3
 8016d72:	6878      	ldr	r0, [r7, #4]
 8016d74:	f7fe f8dc 	bl	8014f30 <pbuf_remove_header>
 8016d78:	e04e      	b.n	8016e18 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d105      	bne.n	8016d8e <tcp_input+0xca>
 8016d82:	4b70      	ldr	r3, [pc, #448]	; (8016f44 <tcp_input+0x280>)
 8016d84:	22c2      	movs	r2, #194	; 0xc2
 8016d86:	4977      	ldr	r1, [pc, #476]	; (8016f64 <tcp_input+0x2a0>)
 8016d88:	4870      	ldr	r0, [pc, #448]	; (8016f4c <tcp_input+0x288>)
 8016d8a:	f009 fced 	bl	8020768 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016d8e:	2114      	movs	r1, #20
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f7fe f8cd 	bl	8014f30 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	895a      	ldrh	r2, [r3, #10]
 8016d9a:	4b71      	ldr	r3, [pc, #452]	; (8016f60 <tcp_input+0x29c>)
 8016d9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016d9e:	4b6e      	ldr	r3, [pc, #440]	; (8016f58 <tcp_input+0x294>)
 8016da0:	881a      	ldrh	r2, [r3, #0]
 8016da2:	4b6f      	ldr	r3, [pc, #444]	; (8016f60 <tcp_input+0x29c>)
 8016da4:	881b      	ldrh	r3, [r3, #0]
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016daa:	4b6d      	ldr	r3, [pc, #436]	; (8016f60 <tcp_input+0x29c>)
 8016dac:	881b      	ldrh	r3, [r3, #0]
 8016dae:	4619      	mov	r1, r3
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f7fe f8bd 	bl	8014f30 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	895b      	ldrh	r3, [r3, #10]
 8016dbc:	8a3a      	ldrh	r2, [r7, #16]
 8016dbe:	429a      	cmp	r2, r3
 8016dc0:	f200 836e 	bhi.w	80174a0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	685b      	ldr	r3, [r3, #4]
 8016dca:	4a64      	ldr	r2, [pc, #400]	; (8016f5c <tcp_input+0x298>)
 8016dcc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	8a3a      	ldrh	r2, [r7, #16]
 8016dd4:	4611      	mov	r1, r2
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7fe f8aa 	bl	8014f30 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	891a      	ldrh	r2, [r3, #8]
 8016de0:	8a3b      	ldrh	r3, [r7, #16]
 8016de2:	1ad3      	subs	r3, r2, r3
 8016de4:	b29a      	uxth	r2, r3
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	895b      	ldrh	r3, [r3, #10]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d005      	beq.n	8016dfe <tcp_input+0x13a>
 8016df2:	4b54      	ldr	r3, [pc, #336]	; (8016f44 <tcp_input+0x280>)
 8016df4:	22df      	movs	r2, #223	; 0xdf
 8016df6:	495c      	ldr	r1, [pc, #368]	; (8016f68 <tcp_input+0x2a4>)
 8016df8:	4854      	ldr	r0, [pc, #336]	; (8016f4c <tcp_input+0x288>)
 8016dfa:	f009 fcb5 	bl	8020768 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	891a      	ldrh	r2, [r3, #8]
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	891b      	ldrh	r3, [r3, #8]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d005      	beq.n	8016e18 <tcp_input+0x154>
 8016e0c:	4b4d      	ldr	r3, [pc, #308]	; (8016f44 <tcp_input+0x280>)
 8016e0e:	22e0      	movs	r2, #224	; 0xe0
 8016e10:	4956      	ldr	r1, [pc, #344]	; (8016f6c <tcp_input+0x2a8>)
 8016e12:	484e      	ldr	r0, [pc, #312]	; (8016f4c <tcp_input+0x288>)
 8016e14:	f009 fca8 	bl	8020768 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016e18:	4b4d      	ldr	r3, [pc, #308]	; (8016f50 <tcp_input+0x28c>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	881b      	ldrh	r3, [r3, #0]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	4a4b      	ldr	r2, [pc, #300]	; (8016f50 <tcp_input+0x28c>)
 8016e22:	6814      	ldr	r4, [r2, #0]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7fc fc53 	bl	80136d0 <lwip_htons>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016e2e:	4b48      	ldr	r3, [pc, #288]	; (8016f50 <tcp_input+0x28c>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	885b      	ldrh	r3, [r3, #2]
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	4a46      	ldr	r2, [pc, #280]	; (8016f50 <tcp_input+0x28c>)
 8016e38:	6814      	ldr	r4, [r2, #0]
 8016e3a:	4618      	mov	r0, r3
 8016e3c:	f7fc fc48 	bl	80136d0 <lwip_htons>
 8016e40:	4603      	mov	r3, r0
 8016e42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016e44:	4b42      	ldr	r3, [pc, #264]	; (8016f50 <tcp_input+0x28c>)
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	4a41      	ldr	r2, [pc, #260]	; (8016f50 <tcp_input+0x28c>)
 8016e4c:	6814      	ldr	r4, [r2, #0]
 8016e4e:	4618      	mov	r0, r3
 8016e50:	f7fc fc53 	bl	80136fa <lwip_htonl>
 8016e54:	4603      	mov	r3, r0
 8016e56:	6063      	str	r3, [r4, #4]
 8016e58:	6863      	ldr	r3, [r4, #4]
 8016e5a:	4a45      	ldr	r2, [pc, #276]	; (8016f70 <tcp_input+0x2ac>)
 8016e5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016e5e:	4b3c      	ldr	r3, [pc, #240]	; (8016f50 <tcp_input+0x28c>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	689b      	ldr	r3, [r3, #8]
 8016e64:	4a3a      	ldr	r2, [pc, #232]	; (8016f50 <tcp_input+0x28c>)
 8016e66:	6814      	ldr	r4, [r2, #0]
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7fc fc46 	bl	80136fa <lwip_htonl>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	60a3      	str	r3, [r4, #8]
 8016e72:	68a3      	ldr	r3, [r4, #8]
 8016e74:	4a3f      	ldr	r2, [pc, #252]	; (8016f74 <tcp_input+0x2b0>)
 8016e76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016e78:	4b35      	ldr	r3, [pc, #212]	; (8016f50 <tcp_input+0x28c>)
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	89db      	ldrh	r3, [r3, #14]
 8016e7e:	b29b      	uxth	r3, r3
 8016e80:	4a33      	ldr	r2, [pc, #204]	; (8016f50 <tcp_input+0x28c>)
 8016e82:	6814      	ldr	r4, [r2, #0]
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fc fc23 	bl	80136d0 <lwip_htons>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016e8e:	4b30      	ldr	r3, [pc, #192]	; (8016f50 <tcp_input+0x28c>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	899b      	ldrh	r3, [r3, #12]
 8016e94:	b29b      	uxth	r3, r3
 8016e96:	4618      	mov	r0, r3
 8016e98:	f7fc fc1a 	bl	80136d0 <lwip_htons>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	b2db      	uxtb	r3, r3
 8016ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ea4:	b2da      	uxtb	r2, r3
 8016ea6:	4b34      	ldr	r3, [pc, #208]	; (8016f78 <tcp_input+0x2b4>)
 8016ea8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	891a      	ldrh	r2, [r3, #8]
 8016eae:	4b33      	ldr	r3, [pc, #204]	; (8016f7c <tcp_input+0x2b8>)
 8016eb0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016eb2:	4b31      	ldr	r3, [pc, #196]	; (8016f78 <tcp_input+0x2b4>)
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	f003 0303 	and.w	r3, r3, #3
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d00c      	beq.n	8016ed8 <tcp_input+0x214>
    tcplen++;
 8016ebe:	4b2f      	ldr	r3, [pc, #188]	; (8016f7c <tcp_input+0x2b8>)
 8016ec0:	881b      	ldrh	r3, [r3, #0]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	b29a      	uxth	r2, r3
 8016ec6:	4b2d      	ldr	r3, [pc, #180]	; (8016f7c <tcp_input+0x2b8>)
 8016ec8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	891a      	ldrh	r2, [r3, #8]
 8016ece:	4b2b      	ldr	r3, [pc, #172]	; (8016f7c <tcp_input+0x2b8>)
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	f200 82e6 	bhi.w	80174a4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016edc:	4b28      	ldr	r3, [pc, #160]	; (8016f80 <tcp_input+0x2bc>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	61fb      	str	r3, [r7, #28]
 8016ee2:	e09d      	b.n	8017020 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016ee4:	69fb      	ldr	r3, [r7, #28]
 8016ee6:	7d1b      	ldrb	r3, [r3, #20]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d105      	bne.n	8016ef8 <tcp_input+0x234>
 8016eec:	4b15      	ldr	r3, [pc, #84]	; (8016f44 <tcp_input+0x280>)
 8016eee:	22fb      	movs	r2, #251	; 0xfb
 8016ef0:	4924      	ldr	r1, [pc, #144]	; (8016f84 <tcp_input+0x2c0>)
 8016ef2:	4816      	ldr	r0, [pc, #88]	; (8016f4c <tcp_input+0x288>)
 8016ef4:	f009 fc38 	bl	8020768 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	7d1b      	ldrb	r3, [r3, #20]
 8016efc:	2b0a      	cmp	r3, #10
 8016efe:	d105      	bne.n	8016f0c <tcp_input+0x248>
 8016f00:	4b10      	ldr	r3, [pc, #64]	; (8016f44 <tcp_input+0x280>)
 8016f02:	22fc      	movs	r2, #252	; 0xfc
 8016f04:	4920      	ldr	r1, [pc, #128]	; (8016f88 <tcp_input+0x2c4>)
 8016f06:	4811      	ldr	r0, [pc, #68]	; (8016f4c <tcp_input+0x288>)
 8016f08:	f009 fc2e 	bl	8020768 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016f0c:	69fb      	ldr	r3, [r7, #28]
 8016f0e:	7d1b      	ldrb	r3, [r3, #20]
 8016f10:	2b01      	cmp	r3, #1
 8016f12:	d105      	bne.n	8016f20 <tcp_input+0x25c>
 8016f14:	4b0b      	ldr	r3, [pc, #44]	; (8016f44 <tcp_input+0x280>)
 8016f16:	22fd      	movs	r2, #253	; 0xfd
 8016f18:	491c      	ldr	r1, [pc, #112]	; (8016f8c <tcp_input+0x2c8>)
 8016f1a:	480c      	ldr	r0, [pc, #48]	; (8016f4c <tcp_input+0x288>)
 8016f1c:	f009 fc24 	bl	8020768 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f20:	69fb      	ldr	r3, [r7, #28]
 8016f22:	7a1b      	ldrb	r3, [r3, #8]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d033      	beq.n	8016f90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016f28:	69fb      	ldr	r3, [r7, #28]
 8016f2a:	7a1a      	ldrb	r2, [r3, #8]
 8016f2c:	4b09      	ldr	r3, [pc, #36]	; (8016f54 <tcp_input+0x290>)
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016f34:	3301      	adds	r3, #1
 8016f36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016f38:	429a      	cmp	r2, r3
 8016f3a:	d029      	beq.n	8016f90 <tcp_input+0x2cc>
      prev = pcb;
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	61bb      	str	r3, [r7, #24]
      continue;
 8016f40:	e06b      	b.n	801701a <tcp_input+0x356>
 8016f42:	bf00      	nop
 8016f44:	08022988 	.word	0x08022988
 8016f48:	080229bc 	.word	0x080229bc
 8016f4c:	080229d4 	.word	0x080229d4
 8016f50:	2400cb78 	.word	0x2400cb78
 8016f54:	24009a30 	.word	0x24009a30
 8016f58:	2400cb7c 	.word	0x2400cb7c
 8016f5c:	2400cb80 	.word	0x2400cb80
 8016f60:	2400cb7e 	.word	0x2400cb7e
 8016f64:	080229fc 	.word	0x080229fc
 8016f68:	08022a0c 	.word	0x08022a0c
 8016f6c:	08022a18 	.word	0x08022a18
 8016f70:	2400cb88 	.word	0x2400cb88
 8016f74:	2400cb8c 	.word	0x2400cb8c
 8016f78:	2400cb94 	.word	0x2400cb94
 8016f7c:	2400cb92 	.word	0x2400cb92
 8016f80:	2400cb5c 	.word	0x2400cb5c
 8016f84:	08022a38 	.word	0x08022a38
 8016f88:	08022a60 	.word	0x08022a60
 8016f8c:	08022a8c 	.word	0x08022a8c
    }

    if (pcb->remote_port == tcphdr->src &&
 8016f90:	69fb      	ldr	r3, [r7, #28]
 8016f92:	8b1a      	ldrh	r2, [r3, #24]
 8016f94:	4b72      	ldr	r3, [pc, #456]	; (8017160 <tcp_input+0x49c>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	881b      	ldrh	r3, [r3, #0]
 8016f9a:	b29b      	uxth	r3, r3
 8016f9c:	429a      	cmp	r2, r3
 8016f9e:	d13a      	bne.n	8017016 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	8ada      	ldrh	r2, [r3, #22]
 8016fa4:	4b6e      	ldr	r3, [pc, #440]	; (8017160 <tcp_input+0x49c>)
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	885b      	ldrh	r3, [r3, #2]
 8016faa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016fac:	429a      	cmp	r2, r3
 8016fae:	d132      	bne.n	8017016 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	685a      	ldr	r2, [r3, #4]
 8016fb4:	4b6b      	ldr	r3, [pc, #428]	; (8017164 <tcp_input+0x4a0>)
 8016fb6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	d12c      	bne.n	8017016 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	4b68      	ldr	r3, [pc, #416]	; (8017164 <tcp_input+0x4a0>)
 8016fc2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	d126      	bne.n	8017016 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	68db      	ldr	r3, [r3, #12]
 8016fcc:	69fa      	ldr	r2, [r7, #28]
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d106      	bne.n	8016fe0 <tcp_input+0x31c>
 8016fd2:	4b65      	ldr	r3, [pc, #404]	; (8017168 <tcp_input+0x4a4>)
 8016fd4:	f240 120d 	movw	r2, #269	; 0x10d
 8016fd8:	4964      	ldr	r1, [pc, #400]	; (801716c <tcp_input+0x4a8>)
 8016fda:	4865      	ldr	r0, [pc, #404]	; (8017170 <tcp_input+0x4ac>)
 8016fdc:	f009 fbc4 	bl	8020768 <iprintf>
      if (prev != NULL) {
 8016fe0:	69bb      	ldr	r3, [r7, #24]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d00a      	beq.n	8016ffc <tcp_input+0x338>
        prev->next = pcb->next;
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	68da      	ldr	r2, [r3, #12]
 8016fea:	69bb      	ldr	r3, [r7, #24]
 8016fec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016fee:	4b61      	ldr	r3, [pc, #388]	; (8017174 <tcp_input+0x4b0>)
 8016ff0:	681a      	ldr	r2, [r3, #0]
 8016ff2:	69fb      	ldr	r3, [r7, #28]
 8016ff4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016ff6:	4a5f      	ldr	r2, [pc, #380]	; (8017174 <tcp_input+0x4b0>)
 8016ff8:	69fb      	ldr	r3, [r7, #28]
 8016ffa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016ffc:	69fb      	ldr	r3, [r7, #28]
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	69fa      	ldr	r2, [r7, #28]
 8017002:	429a      	cmp	r2, r3
 8017004:	d111      	bne.n	801702a <tcp_input+0x366>
 8017006:	4b58      	ldr	r3, [pc, #352]	; (8017168 <tcp_input+0x4a4>)
 8017008:	f240 1215 	movw	r2, #277	; 0x115
 801700c:	495a      	ldr	r1, [pc, #360]	; (8017178 <tcp_input+0x4b4>)
 801700e:	4858      	ldr	r0, [pc, #352]	; (8017170 <tcp_input+0x4ac>)
 8017010:	f009 fbaa 	bl	8020768 <iprintf>
      break;
 8017014:	e009      	b.n	801702a <tcp_input+0x366>
    }
    prev = pcb;
 8017016:	69fb      	ldr	r3, [r7, #28]
 8017018:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801701a:	69fb      	ldr	r3, [r7, #28]
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	61fb      	str	r3, [r7, #28]
 8017020:	69fb      	ldr	r3, [r7, #28]
 8017022:	2b00      	cmp	r3, #0
 8017024:	f47f af5e 	bne.w	8016ee4 <tcp_input+0x220>
 8017028:	e000      	b.n	801702c <tcp_input+0x368>
      break;
 801702a:	bf00      	nop
  }

  if (pcb == NULL) {
 801702c:	69fb      	ldr	r3, [r7, #28]
 801702e:	2b00      	cmp	r3, #0
 8017030:	f040 80aa 	bne.w	8017188 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017034:	4b51      	ldr	r3, [pc, #324]	; (801717c <tcp_input+0x4b8>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	61fb      	str	r3, [r7, #28]
 801703a:	e03f      	b.n	80170bc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	7d1b      	ldrb	r3, [r3, #20]
 8017040:	2b0a      	cmp	r3, #10
 8017042:	d006      	beq.n	8017052 <tcp_input+0x38e>
 8017044:	4b48      	ldr	r3, [pc, #288]	; (8017168 <tcp_input+0x4a4>)
 8017046:	f240 121f 	movw	r2, #287	; 0x11f
 801704a:	494d      	ldr	r1, [pc, #308]	; (8017180 <tcp_input+0x4bc>)
 801704c:	4848      	ldr	r0, [pc, #288]	; (8017170 <tcp_input+0x4ac>)
 801704e:	f009 fb8b 	bl	8020768 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017052:	69fb      	ldr	r3, [r7, #28]
 8017054:	7a1b      	ldrb	r3, [r3, #8]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d009      	beq.n	801706e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801705a:	69fb      	ldr	r3, [r7, #28]
 801705c:	7a1a      	ldrb	r2, [r3, #8]
 801705e:	4b41      	ldr	r3, [pc, #260]	; (8017164 <tcp_input+0x4a0>)
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017066:	3301      	adds	r3, #1
 8017068:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801706a:	429a      	cmp	r2, r3
 801706c:	d122      	bne.n	80170b4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801706e:	69fb      	ldr	r3, [r7, #28]
 8017070:	8b1a      	ldrh	r2, [r3, #24]
 8017072:	4b3b      	ldr	r3, [pc, #236]	; (8017160 <tcp_input+0x49c>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	881b      	ldrh	r3, [r3, #0]
 8017078:	b29b      	uxth	r3, r3
 801707a:	429a      	cmp	r2, r3
 801707c:	d11b      	bne.n	80170b6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801707e:	69fb      	ldr	r3, [r7, #28]
 8017080:	8ada      	ldrh	r2, [r3, #22]
 8017082:	4b37      	ldr	r3, [pc, #220]	; (8017160 <tcp_input+0x49c>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	885b      	ldrh	r3, [r3, #2]
 8017088:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801708a:	429a      	cmp	r2, r3
 801708c:	d113      	bne.n	80170b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801708e:	69fb      	ldr	r3, [r7, #28]
 8017090:	685a      	ldr	r2, [r3, #4]
 8017092:	4b34      	ldr	r3, [pc, #208]	; (8017164 <tcp_input+0x4a0>)
 8017094:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017096:	429a      	cmp	r2, r3
 8017098:	d10d      	bne.n	80170b6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801709a:	69fb      	ldr	r3, [r7, #28]
 801709c:	681a      	ldr	r2, [r3, #0]
 801709e:	4b31      	ldr	r3, [pc, #196]	; (8017164 <tcp_input+0x4a0>)
 80170a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80170a2:	429a      	cmp	r2, r3
 80170a4:	d107      	bne.n	80170b6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80170a6:	69f8      	ldr	r0, [r7, #28]
 80170a8:	f000 fb56 	bl	8017758 <tcp_timewait_input>
        }
        pbuf_free(p);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f7fd ffc5 	bl	801503c <pbuf_free>
        return;
 80170b2:	e1fd      	b.n	80174b0 <tcp_input+0x7ec>
        continue;
 80170b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80170b6:	69fb      	ldr	r3, [r7, #28]
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	61fb      	str	r3, [r7, #28]
 80170bc:	69fb      	ldr	r3, [r7, #28]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d1bc      	bne.n	801703c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80170c6:	4b2f      	ldr	r3, [pc, #188]	; (8017184 <tcp_input+0x4c0>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	617b      	str	r3, [r7, #20]
 80170cc:	e02a      	b.n	8017124 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	7a1b      	ldrb	r3, [r3, #8]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d00c      	beq.n	80170f0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	7a1a      	ldrb	r2, [r3, #8]
 80170da:	4b22      	ldr	r3, [pc, #136]	; (8017164 <tcp_input+0x4a0>)
 80170dc:	685b      	ldr	r3, [r3, #4]
 80170de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80170e2:	3301      	adds	r3, #1
 80170e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d002      	beq.n	80170f0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	61bb      	str	r3, [r7, #24]
        continue;
 80170ee:	e016      	b.n	801711e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	8ada      	ldrh	r2, [r3, #22]
 80170f4:	4b1a      	ldr	r3, [pc, #104]	; (8017160 <tcp_input+0x49c>)
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	885b      	ldrh	r3, [r3, #2]
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d10c      	bne.n	801711a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	681a      	ldr	r2, [r3, #0]
 8017104:	4b17      	ldr	r3, [pc, #92]	; (8017164 <tcp_input+0x4a0>)
 8017106:	695b      	ldr	r3, [r3, #20]
 8017108:	429a      	cmp	r2, r3
 801710a:	d00f      	beq.n	801712c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d00d      	beq.n	801712e <tcp_input+0x46a>
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d009      	beq.n	801712e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	617b      	str	r3, [r7, #20]
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d1d1      	bne.n	80170ce <tcp_input+0x40a>
 801712a:	e000      	b.n	801712e <tcp_input+0x46a>
            break;
 801712c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801712e:	697b      	ldr	r3, [r7, #20]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d029      	beq.n	8017188 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017134:	69bb      	ldr	r3, [r7, #24]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00a      	beq.n	8017150 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	68da      	ldr	r2, [r3, #12]
 801713e:	69bb      	ldr	r3, [r7, #24]
 8017140:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8017142:	4b10      	ldr	r3, [pc, #64]	; (8017184 <tcp_input+0x4c0>)
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801714a:	4a0e      	ldr	r2, [pc, #56]	; (8017184 <tcp_input+0x4c0>)
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017150:	6978      	ldr	r0, [r7, #20]
 8017152:	f000 fa03 	bl	801755c <tcp_listen_input>
      }
      pbuf_free(p);
 8017156:	6878      	ldr	r0, [r7, #4]
 8017158:	f7fd ff70 	bl	801503c <pbuf_free>
      return;
 801715c:	e1a8      	b.n	80174b0 <tcp_input+0x7ec>
 801715e:	bf00      	nop
 8017160:	2400cb78 	.word	0x2400cb78
 8017164:	24009a30 	.word	0x24009a30
 8017168:	08022988 	.word	0x08022988
 801716c:	08022ab4 	.word	0x08022ab4
 8017170:	080229d4 	.word	0x080229d4
 8017174:	2400cb5c 	.word	0x2400cb5c
 8017178:	08022ae0 	.word	0x08022ae0
 801717c:	2400cb60 	.word	0x2400cb60
 8017180:	08022b0c 	.word	0x08022b0c
 8017184:	2400cb58 	.word	0x2400cb58
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017188:	69fb      	ldr	r3, [r7, #28]
 801718a:	2b00      	cmp	r3, #0
 801718c:	f000 8158 	beq.w	8017440 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017190:	4b95      	ldr	r3, [pc, #596]	; (80173e8 <tcp_input+0x724>)
 8017192:	2200      	movs	r2, #0
 8017194:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	891a      	ldrh	r2, [r3, #8]
 801719a:	4b93      	ldr	r3, [pc, #588]	; (80173e8 <tcp_input+0x724>)
 801719c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801719e:	4a92      	ldr	r2, [pc, #584]	; (80173e8 <tcp_input+0x724>)
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80171a4:	4b91      	ldr	r3, [pc, #580]	; (80173ec <tcp_input+0x728>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	4a8f      	ldr	r2, [pc, #572]	; (80173e8 <tcp_input+0x724>)
 80171aa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80171ac:	4b90      	ldr	r3, [pc, #576]	; (80173f0 <tcp_input+0x72c>)
 80171ae:	2200      	movs	r2, #0
 80171b0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80171b2:	4b90      	ldr	r3, [pc, #576]	; (80173f4 <tcp_input+0x730>)
 80171b4:	2200      	movs	r2, #0
 80171b6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80171b8:	4b8f      	ldr	r3, [pc, #572]	; (80173f8 <tcp_input+0x734>)
 80171ba:	2200      	movs	r2, #0
 80171bc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80171be:	4b8f      	ldr	r3, [pc, #572]	; (80173fc <tcp_input+0x738>)
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	f003 0308 	and.w	r3, r3, #8
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	d006      	beq.n	80171d8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	7b5b      	ldrb	r3, [r3, #13]
 80171ce:	f043 0301 	orr.w	r3, r3, #1
 80171d2:	b2da      	uxtb	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d017      	beq.n	8017210 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80171e0:	69f8      	ldr	r0, [r7, #28]
 80171e2:	f7ff f929 	bl	8016438 <tcp_process_refused_data>
 80171e6:	4603      	mov	r3, r0
 80171e8:	f113 0f0d 	cmn.w	r3, #13
 80171ec:	d007      	beq.n	80171fe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80171ee:	69fb      	ldr	r3, [r7, #28]
 80171f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00c      	beq.n	8017210 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80171f6:	4b82      	ldr	r3, [pc, #520]	; (8017400 <tcp_input+0x73c>)
 80171f8:	881b      	ldrh	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d008      	beq.n	8017210 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017202:	2b00      	cmp	r3, #0
 8017204:	f040 80e3 	bne.w	80173ce <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017208:	69f8      	ldr	r0, [r7, #28]
 801720a:	f003 f9ad 	bl	801a568 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801720e:	e0de      	b.n	80173ce <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8017210:	4a7c      	ldr	r2, [pc, #496]	; (8017404 <tcp_input+0x740>)
 8017212:	69fb      	ldr	r3, [r7, #28]
 8017214:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017216:	69f8      	ldr	r0, [r7, #28]
 8017218:	f000 fb18 	bl	801784c <tcp_process>
 801721c:	4603      	mov	r3, r0
 801721e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017220:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017224:	f113 0f0d 	cmn.w	r3, #13
 8017228:	f000 80d3 	beq.w	80173d2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801722c:	4b71      	ldr	r3, [pc, #452]	; (80173f4 <tcp_input+0x730>)
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	f003 0308 	and.w	r3, r3, #8
 8017234:	2b00      	cmp	r3, #0
 8017236:	d015      	beq.n	8017264 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017238:	69fb      	ldr	r3, [r7, #28]
 801723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801723e:	2b00      	cmp	r3, #0
 8017240:	d008      	beq.n	8017254 <tcp_input+0x590>
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017248:	69fa      	ldr	r2, [r7, #28]
 801724a:	6912      	ldr	r2, [r2, #16]
 801724c:	f06f 010d 	mvn.w	r1, #13
 8017250:	4610      	mov	r0, r2
 8017252:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017254:	69f9      	ldr	r1, [r7, #28]
 8017256:	486c      	ldr	r0, [pc, #432]	; (8017408 <tcp_input+0x744>)
 8017258:	f7ff fbbc 	bl	80169d4 <tcp_pcb_remove>
        tcp_free(pcb);
 801725c:	69f8      	ldr	r0, [r7, #28]
 801725e:	f7fe f9a9 	bl	80155b4 <tcp_free>
 8017262:	e0da      	b.n	801741a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8017264:	2300      	movs	r3, #0
 8017266:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017268:	4b63      	ldr	r3, [pc, #396]	; (80173f8 <tcp_input+0x734>)
 801726a:	881b      	ldrh	r3, [r3, #0]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d01d      	beq.n	80172ac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017270:	4b61      	ldr	r3, [pc, #388]	; (80173f8 <tcp_input+0x734>)
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00a      	beq.n	8017296 <tcp_input+0x5d2>
 8017280:	69fb      	ldr	r3, [r7, #28]
 8017282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017286:	69fa      	ldr	r2, [r7, #28]
 8017288:	6910      	ldr	r0, [r2, #16]
 801728a:	89fa      	ldrh	r2, [r7, #14]
 801728c:	69f9      	ldr	r1, [r7, #28]
 801728e:	4798      	blx	r3
 8017290:	4603      	mov	r3, r0
 8017292:	74fb      	strb	r3, [r7, #19]
 8017294:	e001      	b.n	801729a <tcp_input+0x5d6>
 8017296:	2300      	movs	r3, #0
 8017298:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801729a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801729e:	f113 0f0d 	cmn.w	r3, #13
 80172a2:	f000 8098 	beq.w	80173d6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80172a6:	4b54      	ldr	r3, [pc, #336]	; (80173f8 <tcp_input+0x734>)
 80172a8:	2200      	movs	r2, #0
 80172aa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80172ac:	69f8      	ldr	r0, [r7, #28]
 80172ae:	f000 f915 	bl	80174dc <tcp_input_delayed_close>
 80172b2:	4603      	mov	r3, r0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	f040 8090 	bne.w	80173da <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80172ba:	4b4d      	ldr	r3, [pc, #308]	; (80173f0 <tcp_input+0x72c>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d041      	beq.n	8017346 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d006      	beq.n	80172d8 <tcp_input+0x614>
 80172ca:	4b50      	ldr	r3, [pc, #320]	; (801740c <tcp_input+0x748>)
 80172cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80172d0:	494f      	ldr	r1, [pc, #316]	; (8017410 <tcp_input+0x74c>)
 80172d2:	4850      	ldr	r0, [pc, #320]	; (8017414 <tcp_input+0x750>)
 80172d4:	f009 fa48 	bl	8020768 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80172d8:	69fb      	ldr	r3, [r7, #28]
 80172da:	8b5b      	ldrh	r3, [r3, #26]
 80172dc:	f003 0310 	and.w	r3, r3, #16
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d008      	beq.n	80172f6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80172e4:	4b42      	ldr	r3, [pc, #264]	; (80173f0 <tcp_input+0x72c>)
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7fd fea7 	bl	801503c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80172ee:	69f8      	ldr	r0, [r7, #28]
 80172f0:	f7fe fc48 	bl	8015b84 <tcp_abort>
            goto aborted;
 80172f4:	e091      	b.n	801741a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80172f6:	69fb      	ldr	r3, [r7, #28]
 80172f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d00c      	beq.n	801731a <tcp_input+0x656>
 8017300:	69fb      	ldr	r3, [r7, #28]
 8017302:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017306:	69fb      	ldr	r3, [r7, #28]
 8017308:	6918      	ldr	r0, [r3, #16]
 801730a:	4b39      	ldr	r3, [pc, #228]	; (80173f0 <tcp_input+0x72c>)
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	2300      	movs	r3, #0
 8017310:	69f9      	ldr	r1, [r7, #28]
 8017312:	47a0      	blx	r4
 8017314:	4603      	mov	r3, r0
 8017316:	74fb      	strb	r3, [r7, #19]
 8017318:	e008      	b.n	801732c <tcp_input+0x668>
 801731a:	4b35      	ldr	r3, [pc, #212]	; (80173f0 <tcp_input+0x72c>)
 801731c:	681a      	ldr	r2, [r3, #0]
 801731e:	2300      	movs	r3, #0
 8017320:	69f9      	ldr	r1, [r7, #28]
 8017322:	2000      	movs	r0, #0
 8017324:	f7ff f95e 	bl	80165e4 <tcp_recv_null>
 8017328:	4603      	mov	r3, r0
 801732a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801732c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017330:	f113 0f0d 	cmn.w	r3, #13
 8017334:	d053      	beq.n	80173de <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017336:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d003      	beq.n	8017346 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801733e:	4b2c      	ldr	r3, [pc, #176]	; (80173f0 <tcp_input+0x72c>)
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	69fb      	ldr	r3, [r7, #28]
 8017344:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017346:	4b2b      	ldr	r3, [pc, #172]	; (80173f4 <tcp_input+0x730>)
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	f003 0320 	and.w	r3, r3, #32
 801734e:	2b00      	cmp	r3, #0
 8017350:	d030      	beq.n	80173b4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8017352:	69fb      	ldr	r3, [r7, #28]
 8017354:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017356:	2b00      	cmp	r3, #0
 8017358:	d009      	beq.n	801736e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801735a:	69fb      	ldr	r3, [r7, #28]
 801735c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801735e:	7b5a      	ldrb	r2, [r3, #13]
 8017360:	69fb      	ldr	r3, [r7, #28]
 8017362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017364:	f042 0220 	orr.w	r2, r2, #32
 8017368:	b2d2      	uxtb	r2, r2
 801736a:	735a      	strb	r2, [r3, #13]
 801736c:	e022      	b.n	80173b4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801736e:	69fb      	ldr	r3, [r7, #28]
 8017370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017372:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017376:	d005      	beq.n	8017384 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8017378:	69fb      	ldr	r3, [r7, #28]
 801737a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801737c:	3301      	adds	r3, #1
 801737e:	b29a      	uxth	r2, r3
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017384:	69fb      	ldr	r3, [r7, #28]
 8017386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801738a:	2b00      	cmp	r3, #0
 801738c:	d00b      	beq.n	80173a6 <tcp_input+0x6e2>
 801738e:	69fb      	ldr	r3, [r7, #28]
 8017390:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017394:	69fb      	ldr	r3, [r7, #28]
 8017396:	6918      	ldr	r0, [r3, #16]
 8017398:	2300      	movs	r3, #0
 801739a:	2200      	movs	r2, #0
 801739c:	69f9      	ldr	r1, [r7, #28]
 801739e:	47a0      	blx	r4
 80173a0:	4603      	mov	r3, r0
 80173a2:	74fb      	strb	r3, [r7, #19]
 80173a4:	e001      	b.n	80173aa <tcp_input+0x6e6>
 80173a6:	2300      	movs	r3, #0
 80173a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80173aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80173ae:	f113 0f0d 	cmn.w	r3, #13
 80173b2:	d016      	beq.n	80173e2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80173b4:	4b13      	ldr	r3, [pc, #76]	; (8017404 <tcp_input+0x740>)
 80173b6:	2200      	movs	r2, #0
 80173b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80173ba:	69f8      	ldr	r0, [r7, #28]
 80173bc:	f000 f88e 	bl	80174dc <tcp_input_delayed_close>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d128      	bne.n	8017418 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80173c6:	69f8      	ldr	r0, [r7, #28]
 80173c8:	f002 fac8 	bl	801995c <tcp_output>
 80173cc:	e025      	b.n	801741a <tcp_input+0x756>
        goto aborted;
 80173ce:	bf00      	nop
 80173d0:	e023      	b.n	801741a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80173d2:	bf00      	nop
 80173d4:	e021      	b.n	801741a <tcp_input+0x756>
              goto aborted;
 80173d6:	bf00      	nop
 80173d8:	e01f      	b.n	801741a <tcp_input+0x756>
          goto aborted;
 80173da:	bf00      	nop
 80173dc:	e01d      	b.n	801741a <tcp_input+0x756>
            goto aborted;
 80173de:	bf00      	nop
 80173e0:	e01b      	b.n	801741a <tcp_input+0x756>
              goto aborted;
 80173e2:	bf00      	nop
 80173e4:	e019      	b.n	801741a <tcp_input+0x756>
 80173e6:	bf00      	nop
 80173e8:	2400cb68 	.word	0x2400cb68
 80173ec:	2400cb78 	.word	0x2400cb78
 80173f0:	2400cb98 	.word	0x2400cb98
 80173f4:	2400cb95 	.word	0x2400cb95
 80173f8:	2400cb90 	.word	0x2400cb90
 80173fc:	2400cb94 	.word	0x2400cb94
 8017400:	2400cb92 	.word	0x2400cb92
 8017404:	2400cb9c 	.word	0x2400cb9c
 8017408:	2400cb5c 	.word	0x2400cb5c
 801740c:	08022988 	.word	0x08022988
 8017410:	08022b3c 	.word	0x08022b3c
 8017414:	080229d4 	.word	0x080229d4
          goto aborted;
 8017418:	bf00      	nop
    tcp_input_pcb = NULL;
 801741a:	4b27      	ldr	r3, [pc, #156]	; (80174b8 <tcp_input+0x7f4>)
 801741c:	2200      	movs	r2, #0
 801741e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017420:	4b26      	ldr	r3, [pc, #152]	; (80174bc <tcp_input+0x7f8>)
 8017422:	2200      	movs	r2, #0
 8017424:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017426:	4b26      	ldr	r3, [pc, #152]	; (80174c0 <tcp_input+0x7fc>)
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d03f      	beq.n	80174ae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801742e:	4b24      	ldr	r3, [pc, #144]	; (80174c0 <tcp_input+0x7fc>)
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	4618      	mov	r0, r3
 8017434:	f7fd fe02 	bl	801503c <pbuf_free>
      inseg.p = NULL;
 8017438:	4b21      	ldr	r3, [pc, #132]	; (80174c0 <tcp_input+0x7fc>)
 801743a:	2200      	movs	r2, #0
 801743c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801743e:	e036      	b.n	80174ae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017440:	4b20      	ldr	r3, [pc, #128]	; (80174c4 <tcp_input+0x800>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	899b      	ldrh	r3, [r3, #12]
 8017446:	b29b      	uxth	r3, r3
 8017448:	4618      	mov	r0, r3
 801744a:	f7fc f941 	bl	80136d0 <lwip_htons>
 801744e:	4603      	mov	r3, r0
 8017450:	b2db      	uxtb	r3, r3
 8017452:	f003 0304 	and.w	r3, r3, #4
 8017456:	2b00      	cmp	r3, #0
 8017458:	d118      	bne.n	801748c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801745a:	4b1b      	ldr	r3, [pc, #108]	; (80174c8 <tcp_input+0x804>)
 801745c:	6819      	ldr	r1, [r3, #0]
 801745e:	4b1b      	ldr	r3, [pc, #108]	; (80174cc <tcp_input+0x808>)
 8017460:	881b      	ldrh	r3, [r3, #0]
 8017462:	461a      	mov	r2, r3
 8017464:	4b1a      	ldr	r3, [pc, #104]	; (80174d0 <tcp_input+0x80c>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801746a:	4b16      	ldr	r3, [pc, #88]	; (80174c4 <tcp_input+0x800>)
 801746c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801746e:	885b      	ldrh	r3, [r3, #2]
 8017470:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017472:	4a14      	ldr	r2, [pc, #80]	; (80174c4 <tcp_input+0x800>)
 8017474:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017476:	8812      	ldrh	r2, [r2, #0]
 8017478:	b292      	uxth	r2, r2
 801747a:	9202      	str	r2, [sp, #8]
 801747c:	9301      	str	r3, [sp, #4]
 801747e:	4b15      	ldr	r3, [pc, #84]	; (80174d4 <tcp_input+0x810>)
 8017480:	9300      	str	r3, [sp, #0]
 8017482:	4b15      	ldr	r3, [pc, #84]	; (80174d8 <tcp_input+0x814>)
 8017484:	4602      	mov	r2, r0
 8017486:	2000      	movs	r0, #0
 8017488:	f003 f81c 	bl	801a4c4 <tcp_rst>
    pbuf_free(p);
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f7fd fdd5 	bl	801503c <pbuf_free>
  return;
 8017492:	e00c      	b.n	80174ae <tcp_input+0x7ea>
    goto dropped;
 8017494:	bf00      	nop
 8017496:	e006      	b.n	80174a6 <tcp_input+0x7e2>
    goto dropped;
 8017498:	bf00      	nop
 801749a:	e004      	b.n	80174a6 <tcp_input+0x7e2>
    goto dropped;
 801749c:	bf00      	nop
 801749e:	e002      	b.n	80174a6 <tcp_input+0x7e2>
      goto dropped;
 80174a0:	bf00      	nop
 80174a2:	e000      	b.n	80174a6 <tcp_input+0x7e2>
      goto dropped;
 80174a4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7fd fdc8 	bl	801503c <pbuf_free>
 80174ac:	e000      	b.n	80174b0 <tcp_input+0x7ec>
  return;
 80174ae:	bf00      	nop
}
 80174b0:	3724      	adds	r7, #36	; 0x24
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd90      	pop	{r4, r7, pc}
 80174b6:	bf00      	nop
 80174b8:	2400cb9c 	.word	0x2400cb9c
 80174bc:	2400cb98 	.word	0x2400cb98
 80174c0:	2400cb68 	.word	0x2400cb68
 80174c4:	2400cb78 	.word	0x2400cb78
 80174c8:	2400cb8c 	.word	0x2400cb8c
 80174cc:	2400cb92 	.word	0x2400cb92
 80174d0:	2400cb88 	.word	0x2400cb88
 80174d4:	24009a40 	.word	0x24009a40
 80174d8:	24009a44 	.word	0x24009a44

080174dc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b082      	sub	sp, #8
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d106      	bne.n	80174f8 <tcp_input_delayed_close+0x1c>
 80174ea:	4b17      	ldr	r3, [pc, #92]	; (8017548 <tcp_input_delayed_close+0x6c>)
 80174ec:	f240 225a 	movw	r2, #602	; 0x25a
 80174f0:	4916      	ldr	r1, [pc, #88]	; (801754c <tcp_input_delayed_close+0x70>)
 80174f2:	4817      	ldr	r0, [pc, #92]	; (8017550 <tcp_input_delayed_close+0x74>)
 80174f4:	f009 f938 	bl	8020768 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80174f8:	4b16      	ldr	r3, [pc, #88]	; (8017554 <tcp_input_delayed_close+0x78>)
 80174fa:	781b      	ldrb	r3, [r3, #0]
 80174fc:	f003 0310 	and.w	r3, r3, #16
 8017500:	2b00      	cmp	r3, #0
 8017502:	d01c      	beq.n	801753e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	8b5b      	ldrh	r3, [r3, #26]
 8017508:	f003 0310 	and.w	r3, r3, #16
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10d      	bne.n	801752c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017516:	2b00      	cmp	r3, #0
 8017518:	d008      	beq.n	801752c <tcp_input_delayed_close+0x50>
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017520:	687a      	ldr	r2, [r7, #4]
 8017522:	6912      	ldr	r2, [r2, #16]
 8017524:	f06f 010e 	mvn.w	r1, #14
 8017528:	4610      	mov	r0, r2
 801752a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801752c:	6879      	ldr	r1, [r7, #4]
 801752e:	480a      	ldr	r0, [pc, #40]	; (8017558 <tcp_input_delayed_close+0x7c>)
 8017530:	f7ff fa50 	bl	80169d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7fe f83d 	bl	80155b4 <tcp_free>
    return 1;
 801753a:	2301      	movs	r3, #1
 801753c:	e000      	b.n	8017540 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801753e:	2300      	movs	r3, #0
}
 8017540:	4618      	mov	r0, r3
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}
 8017548:	08022988 	.word	0x08022988
 801754c:	08022b58 	.word	0x08022b58
 8017550:	080229d4 	.word	0x080229d4
 8017554:	2400cb95 	.word	0x2400cb95
 8017558:	2400cb5c 	.word	0x2400cb5c

0801755c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801755c:	b590      	push	{r4, r7, lr}
 801755e:	b08b      	sub	sp, #44	; 0x2c
 8017560:	af04      	add	r7, sp, #16
 8017562:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017564:	4b6f      	ldr	r3, [pc, #444]	; (8017724 <tcp_listen_input+0x1c8>)
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	f003 0304 	and.w	r3, r3, #4
 801756c:	2b00      	cmp	r3, #0
 801756e:	f040 80d2 	bne.w	8017716 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d106      	bne.n	8017586 <tcp_listen_input+0x2a>
 8017578:	4b6b      	ldr	r3, [pc, #428]	; (8017728 <tcp_listen_input+0x1cc>)
 801757a:	f240 2281 	movw	r2, #641	; 0x281
 801757e:	496b      	ldr	r1, [pc, #428]	; (801772c <tcp_listen_input+0x1d0>)
 8017580:	486b      	ldr	r0, [pc, #428]	; (8017730 <tcp_listen_input+0x1d4>)
 8017582:	f009 f8f1 	bl	8020768 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017586:	4b67      	ldr	r3, [pc, #412]	; (8017724 <tcp_listen_input+0x1c8>)
 8017588:	781b      	ldrb	r3, [r3, #0]
 801758a:	f003 0310 	and.w	r3, r3, #16
 801758e:	2b00      	cmp	r3, #0
 8017590:	d019      	beq.n	80175c6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017592:	4b68      	ldr	r3, [pc, #416]	; (8017734 <tcp_listen_input+0x1d8>)
 8017594:	6819      	ldr	r1, [r3, #0]
 8017596:	4b68      	ldr	r3, [pc, #416]	; (8017738 <tcp_listen_input+0x1dc>)
 8017598:	881b      	ldrh	r3, [r3, #0]
 801759a:	461a      	mov	r2, r3
 801759c:	4b67      	ldr	r3, [pc, #412]	; (801773c <tcp_listen_input+0x1e0>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175a2:	4b67      	ldr	r3, [pc, #412]	; (8017740 <tcp_listen_input+0x1e4>)
 80175a4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175a6:	885b      	ldrh	r3, [r3, #2]
 80175a8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175aa:	4a65      	ldr	r2, [pc, #404]	; (8017740 <tcp_listen_input+0x1e4>)
 80175ac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175ae:	8812      	ldrh	r2, [r2, #0]
 80175b0:	b292      	uxth	r2, r2
 80175b2:	9202      	str	r2, [sp, #8]
 80175b4:	9301      	str	r3, [sp, #4]
 80175b6:	4b63      	ldr	r3, [pc, #396]	; (8017744 <tcp_listen_input+0x1e8>)
 80175b8:	9300      	str	r3, [sp, #0]
 80175ba:	4b63      	ldr	r3, [pc, #396]	; (8017748 <tcp_listen_input+0x1ec>)
 80175bc:	4602      	mov	r2, r0
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f002 ff80 	bl	801a4c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80175c4:	e0a9      	b.n	801771a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80175c6:	4b57      	ldr	r3, [pc, #348]	; (8017724 <tcp_listen_input+0x1c8>)
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	f003 0302 	and.w	r3, r3, #2
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	f000 80a3 	beq.w	801771a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	7d5b      	ldrb	r3, [r3, #21]
 80175d8:	4618      	mov	r0, r3
 80175da:	f7ff f927 	bl	801682c <tcp_alloc>
 80175de:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d111      	bne.n	801760a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	699b      	ldr	r3, [r3, #24]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d00a      	beq.n	8017604 <tcp_listen_input+0xa8>
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	699b      	ldr	r3, [r3, #24]
 80175f2:	687a      	ldr	r2, [r7, #4]
 80175f4:	6910      	ldr	r0, [r2, #16]
 80175f6:	f04f 32ff 	mov.w	r2, #4294967295
 80175fa:	2100      	movs	r1, #0
 80175fc:	4798      	blx	r3
 80175fe:	4603      	mov	r3, r0
 8017600:	73bb      	strb	r3, [r7, #14]
      return;
 8017602:	e08b      	b.n	801771c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017604:	23f0      	movs	r3, #240	; 0xf0
 8017606:	73bb      	strb	r3, [r7, #14]
      return;
 8017608:	e088      	b.n	801771c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801760a:	4b50      	ldr	r3, [pc, #320]	; (801774c <tcp_listen_input+0x1f0>)
 801760c:	695a      	ldr	r2, [r3, #20]
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017612:	4b4e      	ldr	r3, [pc, #312]	; (801774c <tcp_listen_input+0x1f0>)
 8017614:	691a      	ldr	r2, [r3, #16]
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	8ada      	ldrh	r2, [r3, #22]
 801761e:	697b      	ldr	r3, [r7, #20]
 8017620:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017622:	4b47      	ldr	r3, [pc, #284]	; (8017740 <tcp_listen_input+0x1e4>)
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	881b      	ldrh	r3, [r3, #0]
 8017628:	b29a      	uxth	r2, r3
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801762e:	697b      	ldr	r3, [r7, #20]
 8017630:	2203      	movs	r2, #3
 8017632:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017634:	4b41      	ldr	r3, [pc, #260]	; (801773c <tcp_listen_input+0x1e0>)
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	1c5a      	adds	r2, r3, #1
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8017646:	6978      	ldr	r0, [r7, #20]
 8017648:	f7ff fa58 	bl	8016afc <tcp_next_iss>
 801764c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	693a      	ldr	r2, [r7, #16]
 8017652:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	693a      	ldr	r2, [r7, #16]
 8017658:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	693a      	ldr	r2, [r7, #16]
 801765e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	693a      	ldr	r2, [r7, #16]
 8017664:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017666:	4b35      	ldr	r3, [pc, #212]	; (801773c <tcp_listen_input+0x1e0>)
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	1e5a      	subs	r2, r3, #1
 801766c:	697b      	ldr	r3, [r7, #20]
 801766e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	691a      	ldr	r2, [r3, #16]
 8017674:	697b      	ldr	r3, [r7, #20]
 8017676:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017678:	697b      	ldr	r3, [r7, #20]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	7a5b      	ldrb	r3, [r3, #9]
 8017682:	f003 030c 	and.w	r3, r3, #12
 8017686:	b2da      	uxtb	r2, r3
 8017688:	697b      	ldr	r3, [r7, #20]
 801768a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	7a1a      	ldrb	r2, [r3, #8]
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017694:	4b2e      	ldr	r3, [pc, #184]	; (8017750 <tcp_listen_input+0x1f4>)
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	697b      	ldr	r3, [r7, #20]
 801769a:	60da      	str	r2, [r3, #12]
 801769c:	4a2c      	ldr	r2, [pc, #176]	; (8017750 <tcp_listen_input+0x1f4>)
 801769e:	697b      	ldr	r3, [r7, #20]
 80176a0:	6013      	str	r3, [r2, #0]
 80176a2:	f003 f8d1 	bl	801a848 <tcp_timer_needed>
 80176a6:	4b2b      	ldr	r3, [pc, #172]	; (8017754 <tcp_listen_input+0x1f8>)
 80176a8:	2201      	movs	r2, #1
 80176aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80176ac:	6978      	ldr	r0, [r7, #20]
 80176ae:	f001 fd8f 	bl	80191d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80176b2:	4b23      	ldr	r3, [pc, #140]	; (8017740 <tcp_listen_input+0x1e4>)
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	89db      	ldrh	r3, [r3, #14]
 80176b8:	b29a      	uxth	r2, r3
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80176c0:	697b      	ldr	r3, [r7, #20]
 80176c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80176cc:	697b      	ldr	r3, [r7, #20]
 80176ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	3304      	adds	r3, #4
 80176d4:	4618      	mov	r0, r3
 80176d6:	f006 fe85 	bl	801e3e4 <ip4_route>
 80176da:	4601      	mov	r1, r0
 80176dc:	697b      	ldr	r3, [r7, #20]
 80176de:	3304      	adds	r3, #4
 80176e0:	461a      	mov	r2, r3
 80176e2:	4620      	mov	r0, r4
 80176e4:	f7ff fa30 	bl	8016b48 <tcp_eff_send_mss_netif>
 80176e8:	4603      	mov	r3, r0
 80176ea:	461a      	mov	r2, r3
 80176ec:	697b      	ldr	r3, [r7, #20]
 80176ee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80176f0:	2112      	movs	r1, #18
 80176f2:	6978      	ldr	r0, [r7, #20]
 80176f4:	f002 f844 	bl	8019780 <tcp_enqueue_flags>
 80176f8:	4603      	mov	r3, r0
 80176fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80176fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d004      	beq.n	801770e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8017704:	2100      	movs	r1, #0
 8017706:	6978      	ldr	r0, [r7, #20]
 8017708:	f7fe f97e 	bl	8015a08 <tcp_abandon>
      return;
 801770c:	e006      	b.n	801771c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801770e:	6978      	ldr	r0, [r7, #20]
 8017710:	f002 f924 	bl	801995c <tcp_output>
  return;
 8017714:	e001      	b.n	801771a <tcp_listen_input+0x1be>
    return;
 8017716:	bf00      	nop
 8017718:	e000      	b.n	801771c <tcp_listen_input+0x1c0>
  return;
 801771a:	bf00      	nop
}
 801771c:	371c      	adds	r7, #28
 801771e:	46bd      	mov	sp, r7
 8017720:	bd90      	pop	{r4, r7, pc}
 8017722:	bf00      	nop
 8017724:	2400cb94 	.word	0x2400cb94
 8017728:	08022988 	.word	0x08022988
 801772c:	08022b80 	.word	0x08022b80
 8017730:	080229d4 	.word	0x080229d4
 8017734:	2400cb8c 	.word	0x2400cb8c
 8017738:	2400cb92 	.word	0x2400cb92
 801773c:	2400cb88 	.word	0x2400cb88
 8017740:	2400cb78 	.word	0x2400cb78
 8017744:	24009a40 	.word	0x24009a40
 8017748:	24009a44 	.word	0x24009a44
 801774c:	24009a30 	.word	0x24009a30
 8017750:	2400cb5c 	.word	0x2400cb5c
 8017754:	2400cb64 	.word	0x2400cb64

08017758 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b086      	sub	sp, #24
 801775c:	af04      	add	r7, sp, #16
 801775e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017760:	4b2f      	ldr	r3, [pc, #188]	; (8017820 <tcp_timewait_input+0xc8>)
 8017762:	781b      	ldrb	r3, [r3, #0]
 8017764:	f003 0304 	and.w	r3, r3, #4
 8017768:	2b00      	cmp	r3, #0
 801776a:	d153      	bne.n	8017814 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d106      	bne.n	8017780 <tcp_timewait_input+0x28>
 8017772:	4b2c      	ldr	r3, [pc, #176]	; (8017824 <tcp_timewait_input+0xcc>)
 8017774:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017778:	492b      	ldr	r1, [pc, #172]	; (8017828 <tcp_timewait_input+0xd0>)
 801777a:	482c      	ldr	r0, [pc, #176]	; (801782c <tcp_timewait_input+0xd4>)
 801777c:	f008 fff4 	bl	8020768 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017780:	4b27      	ldr	r3, [pc, #156]	; (8017820 <tcp_timewait_input+0xc8>)
 8017782:	781b      	ldrb	r3, [r3, #0]
 8017784:	f003 0302 	and.w	r3, r3, #2
 8017788:	2b00      	cmp	r3, #0
 801778a:	d02a      	beq.n	80177e2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801778c:	4b28      	ldr	r3, [pc, #160]	; (8017830 <tcp_timewait_input+0xd8>)
 801778e:	681a      	ldr	r2, [r3, #0]
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017794:	1ad3      	subs	r3, r2, r3
 8017796:	2b00      	cmp	r3, #0
 8017798:	db2d      	blt.n	80177f6 <tcp_timewait_input+0x9e>
 801779a:	4b25      	ldr	r3, [pc, #148]	; (8017830 <tcp_timewait_input+0xd8>)
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a2:	6879      	ldr	r1, [r7, #4]
 80177a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80177a6:	440b      	add	r3, r1
 80177a8:	1ad3      	subs	r3, r2, r3
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	dc23      	bgt.n	80177f6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ae:	4b21      	ldr	r3, [pc, #132]	; (8017834 <tcp_timewait_input+0xdc>)
 80177b0:	6819      	ldr	r1, [r3, #0]
 80177b2:	4b21      	ldr	r3, [pc, #132]	; (8017838 <tcp_timewait_input+0xe0>)
 80177b4:	881b      	ldrh	r3, [r3, #0]
 80177b6:	461a      	mov	r2, r3
 80177b8:	4b1d      	ldr	r3, [pc, #116]	; (8017830 <tcp_timewait_input+0xd8>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177be:	4b1f      	ldr	r3, [pc, #124]	; (801783c <tcp_timewait_input+0xe4>)
 80177c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177c2:	885b      	ldrh	r3, [r3, #2]
 80177c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177c6:	4a1d      	ldr	r2, [pc, #116]	; (801783c <tcp_timewait_input+0xe4>)
 80177c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177ca:	8812      	ldrh	r2, [r2, #0]
 80177cc:	b292      	uxth	r2, r2
 80177ce:	9202      	str	r2, [sp, #8]
 80177d0:	9301      	str	r3, [sp, #4]
 80177d2:	4b1b      	ldr	r3, [pc, #108]	; (8017840 <tcp_timewait_input+0xe8>)
 80177d4:	9300      	str	r3, [sp, #0]
 80177d6:	4b1b      	ldr	r3, [pc, #108]	; (8017844 <tcp_timewait_input+0xec>)
 80177d8:	4602      	mov	r2, r0
 80177da:	6878      	ldr	r0, [r7, #4]
 80177dc:	f002 fe72 	bl	801a4c4 <tcp_rst>
      return;
 80177e0:	e01b      	b.n	801781a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80177e2:	4b0f      	ldr	r3, [pc, #60]	; (8017820 <tcp_timewait_input+0xc8>)
 80177e4:	781b      	ldrb	r3, [r3, #0]
 80177e6:	f003 0301 	and.w	r3, r3, #1
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d003      	beq.n	80177f6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80177ee:	4b16      	ldr	r3, [pc, #88]	; (8017848 <tcp_timewait_input+0xf0>)
 80177f0:	681a      	ldr	r2, [r3, #0]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80177f6:	4b10      	ldr	r3, [pc, #64]	; (8017838 <tcp_timewait_input+0xe0>)
 80177f8:	881b      	ldrh	r3, [r3, #0]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d00c      	beq.n	8017818 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	8b5b      	ldrh	r3, [r3, #26]
 8017802:	f043 0302 	orr.w	r3, r3, #2
 8017806:	b29a      	uxth	r2, r3
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f002 f8a5 	bl	801995c <tcp_output>
  }
  return;
 8017812:	e001      	b.n	8017818 <tcp_timewait_input+0xc0>
    return;
 8017814:	bf00      	nop
 8017816:	e000      	b.n	801781a <tcp_timewait_input+0xc2>
  return;
 8017818:	bf00      	nop
}
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	2400cb94 	.word	0x2400cb94
 8017824:	08022988 	.word	0x08022988
 8017828:	08022ba0 	.word	0x08022ba0
 801782c:	080229d4 	.word	0x080229d4
 8017830:	2400cb88 	.word	0x2400cb88
 8017834:	2400cb8c 	.word	0x2400cb8c
 8017838:	2400cb92 	.word	0x2400cb92
 801783c:	2400cb78 	.word	0x2400cb78
 8017840:	24009a40 	.word	0x24009a40
 8017844:	24009a44 	.word	0x24009a44
 8017848:	2400cb50 	.word	0x2400cb50

0801784c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801784c:	b590      	push	{r4, r7, lr}
 801784e:	b08d      	sub	sp, #52	; 0x34
 8017850:	af04      	add	r7, sp, #16
 8017852:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017854:	2300      	movs	r3, #0
 8017856:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017858:	2300      	movs	r3, #0
 801785a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d106      	bne.n	8017870 <tcp_process+0x24>
 8017862:	4b9d      	ldr	r3, [pc, #628]	; (8017ad8 <tcp_process+0x28c>)
 8017864:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8017868:	499c      	ldr	r1, [pc, #624]	; (8017adc <tcp_process+0x290>)
 801786a:	489d      	ldr	r0, [pc, #628]	; (8017ae0 <tcp_process+0x294>)
 801786c:	f008 ff7c 	bl	8020768 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017870:	4b9c      	ldr	r3, [pc, #624]	; (8017ae4 <tcp_process+0x298>)
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	f003 0304 	and.w	r3, r3, #4
 8017878:	2b00      	cmp	r3, #0
 801787a:	d04e      	beq.n	801791a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	7d1b      	ldrb	r3, [r3, #20]
 8017880:	2b02      	cmp	r3, #2
 8017882:	d108      	bne.n	8017896 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017888:	4b97      	ldr	r3, [pc, #604]	; (8017ae8 <tcp_process+0x29c>)
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	429a      	cmp	r2, r3
 801788e:	d123      	bne.n	80178d8 <tcp_process+0x8c>
        acceptable = 1;
 8017890:	2301      	movs	r3, #1
 8017892:	76fb      	strb	r3, [r7, #27]
 8017894:	e020      	b.n	80178d8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801789a:	4b94      	ldr	r3, [pc, #592]	; (8017aec <tcp_process+0x2a0>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	429a      	cmp	r2, r3
 80178a0:	d102      	bne.n	80178a8 <tcp_process+0x5c>
        acceptable = 1;
 80178a2:	2301      	movs	r3, #1
 80178a4:	76fb      	strb	r3, [r7, #27]
 80178a6:	e017      	b.n	80178d8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80178a8:	4b90      	ldr	r3, [pc, #576]	; (8017aec <tcp_process+0x2a0>)
 80178aa:	681a      	ldr	r2, [r3, #0]
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b0:	1ad3      	subs	r3, r2, r3
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	db10      	blt.n	80178d8 <tcp_process+0x8c>
 80178b6:	4b8d      	ldr	r3, [pc, #564]	; (8017aec <tcp_process+0x2a0>)
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178be:	6879      	ldr	r1, [r7, #4]
 80178c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80178c2:	440b      	add	r3, r1
 80178c4:	1ad3      	subs	r3, r2, r3
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	dc06      	bgt.n	80178d8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	8b5b      	ldrh	r3, [r3, #26]
 80178ce:	f043 0302 	orr.w	r3, r3, #2
 80178d2:	b29a      	uxth	r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80178d8:	7efb      	ldrb	r3, [r7, #27]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d01b      	beq.n	8017916 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	7d1b      	ldrb	r3, [r3, #20]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d106      	bne.n	80178f4 <tcp_process+0xa8>
 80178e6:	4b7c      	ldr	r3, [pc, #496]	; (8017ad8 <tcp_process+0x28c>)
 80178e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80178ec:	4980      	ldr	r1, [pc, #512]	; (8017af0 <tcp_process+0x2a4>)
 80178ee:	487c      	ldr	r0, [pc, #496]	; (8017ae0 <tcp_process+0x294>)
 80178f0:	f008 ff3a 	bl	8020768 <iprintf>
      recv_flags |= TF_RESET;
 80178f4:	4b7f      	ldr	r3, [pc, #508]	; (8017af4 <tcp_process+0x2a8>)
 80178f6:	781b      	ldrb	r3, [r3, #0]
 80178f8:	f043 0308 	orr.w	r3, r3, #8
 80178fc:	b2da      	uxtb	r2, r3
 80178fe:	4b7d      	ldr	r3, [pc, #500]	; (8017af4 <tcp_process+0x2a8>)
 8017900:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	8b5b      	ldrh	r3, [r3, #26]
 8017906:	f023 0301 	bic.w	r3, r3, #1
 801790a:	b29a      	uxth	r2, r3
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017910:	f06f 030d 	mvn.w	r3, #13
 8017914:	e37a      	b.n	801800c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017916:	2300      	movs	r3, #0
 8017918:	e378      	b.n	801800c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801791a:	4b72      	ldr	r3, [pc, #456]	; (8017ae4 <tcp_process+0x298>)
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	f003 0302 	and.w	r3, r3, #2
 8017922:	2b00      	cmp	r3, #0
 8017924:	d010      	beq.n	8017948 <tcp_process+0xfc>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	7d1b      	ldrb	r3, [r3, #20]
 801792a:	2b02      	cmp	r3, #2
 801792c:	d00c      	beq.n	8017948 <tcp_process+0xfc>
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	7d1b      	ldrb	r3, [r3, #20]
 8017932:	2b03      	cmp	r3, #3
 8017934:	d008      	beq.n	8017948 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	8b5b      	ldrh	r3, [r3, #26]
 801793a:	f043 0302 	orr.w	r3, r3, #2
 801793e:	b29a      	uxth	r2, r3
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017944:	2300      	movs	r3, #0
 8017946:	e361      	b.n	801800c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	8b5b      	ldrh	r3, [r3, #26]
 801794c:	f003 0310 	and.w	r3, r3, #16
 8017950:	2b00      	cmp	r3, #0
 8017952:	d103      	bne.n	801795c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017954:	4b68      	ldr	r3, [pc, #416]	; (8017af8 <tcp_process+0x2ac>)
 8017956:	681a      	ldr	r2, [r3, #0]
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2200      	movs	r2, #0
 8017968:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801796c:	6878      	ldr	r0, [r7, #4]
 801796e:	f001 fc2f 	bl	80191d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	7d1b      	ldrb	r3, [r3, #20]
 8017976:	3b02      	subs	r3, #2
 8017978:	2b07      	cmp	r3, #7
 801797a:	f200 8337 	bhi.w	8017fec <tcp_process+0x7a0>
 801797e:	a201      	add	r2, pc, #4	; (adr r2, 8017984 <tcp_process+0x138>)
 8017980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017984:	080179a5 	.word	0x080179a5
 8017988:	08017bd5 	.word	0x08017bd5
 801798c:	08017d4d 	.word	0x08017d4d
 8017990:	08017d77 	.word	0x08017d77
 8017994:	08017e9b 	.word	0x08017e9b
 8017998:	08017d4d 	.word	0x08017d4d
 801799c:	08017f27 	.word	0x08017f27
 80179a0:	08017fb7 	.word	0x08017fb7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80179a4:	4b4f      	ldr	r3, [pc, #316]	; (8017ae4 <tcp_process+0x298>)
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	f003 0310 	and.w	r3, r3, #16
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	f000 80e4 	beq.w	8017b7a <tcp_process+0x32e>
 80179b2:	4b4c      	ldr	r3, [pc, #304]	; (8017ae4 <tcp_process+0x298>)
 80179b4:	781b      	ldrb	r3, [r3, #0]
 80179b6:	f003 0302 	and.w	r3, r3, #2
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	f000 80dd 	beq.w	8017b7a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80179c4:	1c5a      	adds	r2, r3, #1
 80179c6:	4b48      	ldr	r3, [pc, #288]	; (8017ae8 <tcp_process+0x29c>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	429a      	cmp	r2, r3
 80179cc:	f040 80d5 	bne.w	8017b7a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80179d0:	4b46      	ldr	r3, [pc, #280]	; (8017aec <tcp_process+0x2a0>)
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	1c5a      	adds	r2, r3, #1
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80179e2:	4b41      	ldr	r3, [pc, #260]	; (8017ae8 <tcp_process+0x29c>)
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80179ea:	4b44      	ldr	r3, [pc, #272]	; (8017afc <tcp_process+0x2b0>)
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	89db      	ldrh	r3, [r3, #14]
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017a04:	4b39      	ldr	r3, [pc, #228]	; (8017aec <tcp_process+0x2a0>)
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	1e5a      	subs	r2, r3, #1
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	2204      	movs	r2, #4
 8017a12:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	3304      	adds	r3, #4
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f006 fce1 	bl	801e3e4 <ip4_route>
 8017a22:	4601      	mov	r1, r0
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	3304      	adds	r3, #4
 8017a28:	461a      	mov	r2, r3
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	f7ff f88c 	bl	8016b48 <tcp_eff_send_mss_netif>
 8017a30:	4603      	mov	r3, r0
 8017a32:	461a      	mov	r2, r3
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a3c:	009a      	lsls	r2, r3, #2
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a42:	005b      	lsls	r3, r3, #1
 8017a44:	f241 111c 	movw	r1, #4380	; 0x111c
 8017a48:	428b      	cmp	r3, r1
 8017a4a:	bf38      	it	cc
 8017a4c:	460b      	movcc	r3, r1
 8017a4e:	429a      	cmp	r2, r3
 8017a50:	d204      	bcs.n	8017a5c <tcp_process+0x210>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a56:	009b      	lsls	r3, r3, #2
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	e00d      	b.n	8017a78 <tcp_process+0x22c>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	f241 121c 	movw	r2, #4380	; 0x111c
 8017a66:	4293      	cmp	r3, r2
 8017a68:	d904      	bls.n	8017a74 <tcp_process+0x228>
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a6e:	005b      	lsls	r3, r3, #1
 8017a70:	b29b      	uxth	r3, r3
 8017a72:	e001      	b.n	8017a78 <tcp_process+0x22c>
 8017a74:	f241 131c 	movw	r3, #4380	; 0x111c
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d106      	bne.n	8017a96 <tcp_process+0x24a>
 8017a88:	4b13      	ldr	r3, [pc, #76]	; (8017ad8 <tcp_process+0x28c>)
 8017a8a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017a8e:	491c      	ldr	r1, [pc, #112]	; (8017b00 <tcp_process+0x2b4>)
 8017a90:	4813      	ldr	r0, [pc, #76]	; (8017ae0 <tcp_process+0x294>)
 8017a92:	f008 fe69 	bl	8020768 <iprintf>
        --pcb->snd_queuelen;
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a9c:	3b01      	subs	r3, #1
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017aaa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d12a      	bne.n	8017b08 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ab6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017ab8:	69fb      	ldr	r3, [r7, #28]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d106      	bne.n	8017acc <tcp_process+0x280>
 8017abe:	4b06      	ldr	r3, [pc, #24]	; (8017ad8 <tcp_process+0x28c>)
 8017ac0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017ac4:	490f      	ldr	r1, [pc, #60]	; (8017b04 <tcp_process+0x2b8>)
 8017ac6:	4806      	ldr	r0, [pc, #24]	; (8017ae0 <tcp_process+0x294>)
 8017ac8:	f008 fe4e 	bl	8020768 <iprintf>
          pcb->unsent = rseg->next;
 8017acc:	69fb      	ldr	r3, [r7, #28]
 8017ace:	681a      	ldr	r2, [r3, #0]
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	66da      	str	r2, [r3, #108]	; 0x6c
 8017ad4:	e01c      	b.n	8017b10 <tcp_process+0x2c4>
 8017ad6:	bf00      	nop
 8017ad8:	08022988 	.word	0x08022988
 8017adc:	08022bc0 	.word	0x08022bc0
 8017ae0:	080229d4 	.word	0x080229d4
 8017ae4:	2400cb94 	.word	0x2400cb94
 8017ae8:	2400cb8c 	.word	0x2400cb8c
 8017aec:	2400cb88 	.word	0x2400cb88
 8017af0:	08022bdc 	.word	0x08022bdc
 8017af4:	2400cb95 	.word	0x2400cb95
 8017af8:	2400cb50 	.word	0x2400cb50
 8017afc:	2400cb78 	.word	0x2400cb78
 8017b00:	08022bfc 	.word	0x08022bfc
 8017b04:	08022c14 	.word	0x08022c14
        } else {
          pcb->unacked = rseg->next;
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017b10:	69f8      	ldr	r0, [r7, #28]
 8017b12:	f7fe fd22 	bl	801655a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d104      	bne.n	8017b28 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b24:	861a      	strh	r2, [r3, #48]	; 0x30
 8017b26:	e006      	b.n	8017b36 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2200      	movs	r2, #0
 8017b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d00a      	beq.n	8017b56 <tcp_process+0x30a>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b46:	687a      	ldr	r2, [r7, #4]
 8017b48:	6910      	ldr	r0, [r2, #16]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	6879      	ldr	r1, [r7, #4]
 8017b4e:	4798      	blx	r3
 8017b50:	4603      	mov	r3, r0
 8017b52:	76bb      	strb	r3, [r7, #26]
 8017b54:	e001      	b.n	8017b5a <tcp_process+0x30e>
 8017b56:	2300      	movs	r3, #0
 8017b58:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017b5a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017b5e:	f113 0f0d 	cmn.w	r3, #13
 8017b62:	d102      	bne.n	8017b6a <tcp_process+0x31e>
          return ERR_ABRT;
 8017b64:	f06f 030c 	mvn.w	r3, #12
 8017b68:	e250      	b.n	801800c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	8b5b      	ldrh	r3, [r3, #26]
 8017b6e:	f043 0302 	orr.w	r3, r3, #2
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017b78:	e23a      	b.n	8017ff0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017b7a:	4b98      	ldr	r3, [pc, #608]	; (8017ddc <tcp_process+0x590>)
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	f003 0310 	and.w	r3, r3, #16
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f000 8234 	beq.w	8017ff0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b88:	4b95      	ldr	r3, [pc, #596]	; (8017de0 <tcp_process+0x594>)
 8017b8a:	6819      	ldr	r1, [r3, #0]
 8017b8c:	4b95      	ldr	r3, [pc, #596]	; (8017de4 <tcp_process+0x598>)
 8017b8e:	881b      	ldrh	r3, [r3, #0]
 8017b90:	461a      	mov	r2, r3
 8017b92:	4b95      	ldr	r3, [pc, #596]	; (8017de8 <tcp_process+0x59c>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017b98:	4b94      	ldr	r3, [pc, #592]	; (8017dec <tcp_process+0x5a0>)
 8017b9a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017b9c:	885b      	ldrh	r3, [r3, #2]
 8017b9e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017ba0:	4a92      	ldr	r2, [pc, #584]	; (8017dec <tcp_process+0x5a0>)
 8017ba2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017ba4:	8812      	ldrh	r2, [r2, #0]
 8017ba6:	b292      	uxth	r2, r2
 8017ba8:	9202      	str	r2, [sp, #8]
 8017baa:	9301      	str	r3, [sp, #4]
 8017bac:	4b90      	ldr	r3, [pc, #576]	; (8017df0 <tcp_process+0x5a4>)
 8017bae:	9300      	str	r3, [sp, #0]
 8017bb0:	4b90      	ldr	r3, [pc, #576]	; (8017df4 <tcp_process+0x5a8>)
 8017bb2:	4602      	mov	r2, r0
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	f002 fc85 	bl	801a4c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017bc0:	2b05      	cmp	r3, #5
 8017bc2:	f200 8215 	bhi.w	8017ff0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2200      	movs	r2, #0
 8017bca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f002 fa4f 	bl	801a070 <tcp_rexmit_rto>
      break;
 8017bd2:	e20d      	b.n	8017ff0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017bd4:	4b81      	ldr	r3, [pc, #516]	; (8017ddc <tcp_process+0x590>)
 8017bd6:	781b      	ldrb	r3, [r3, #0]
 8017bd8:	f003 0310 	and.w	r3, r3, #16
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	f000 80a1 	beq.w	8017d24 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017be2:	4b7f      	ldr	r3, [pc, #508]	; (8017de0 <tcp_process+0x594>)
 8017be4:	681a      	ldr	r2, [r3, #0]
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bea:	1ad3      	subs	r3, r2, r3
 8017bec:	3b01      	subs	r3, #1
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	db7e      	blt.n	8017cf0 <tcp_process+0x4a4>
 8017bf2:	4b7b      	ldr	r3, [pc, #492]	; (8017de0 <tcp_process+0x594>)
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	2b00      	cmp	r3, #0
 8017bfe:	dc77      	bgt.n	8017cf0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	2204      	movs	r2, #4
 8017c04:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d102      	bne.n	8017c14 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017c0e:	23fa      	movs	r3, #250	; 0xfa
 8017c10:	76bb      	strb	r3, [r7, #26]
 8017c12:	e01d      	b.n	8017c50 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c18:	699b      	ldr	r3, [r3, #24]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d106      	bne.n	8017c2c <tcp_process+0x3e0>
 8017c1e:	4b76      	ldr	r3, [pc, #472]	; (8017df8 <tcp_process+0x5ac>)
 8017c20:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017c24:	4975      	ldr	r1, [pc, #468]	; (8017dfc <tcp_process+0x5b0>)
 8017c26:	4876      	ldr	r0, [pc, #472]	; (8017e00 <tcp_process+0x5b4>)
 8017c28:	f008 fd9e 	bl	8020768 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c30:	699b      	ldr	r3, [r3, #24]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d00a      	beq.n	8017c4c <tcp_process+0x400>
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c3a:	699b      	ldr	r3, [r3, #24]
 8017c3c:	687a      	ldr	r2, [r7, #4]
 8017c3e:	6910      	ldr	r0, [r2, #16]
 8017c40:	2200      	movs	r2, #0
 8017c42:	6879      	ldr	r1, [r7, #4]
 8017c44:	4798      	blx	r3
 8017c46:	4603      	mov	r3, r0
 8017c48:	76bb      	strb	r3, [r7, #26]
 8017c4a:	e001      	b.n	8017c50 <tcp_process+0x404>
 8017c4c:	23f0      	movs	r3, #240	; 0xf0
 8017c4e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017c50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d00a      	beq.n	8017c6e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017c58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017c5c:	f113 0f0d 	cmn.w	r3, #13
 8017c60:	d002      	beq.n	8017c68 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7fd ff8e 	bl	8015b84 <tcp_abort>
            }
            return ERR_ABRT;
 8017c68:	f06f 030c 	mvn.w	r3, #12
 8017c6c:	e1ce      	b.n	801800c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	f000 fae0 	bl	8018234 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017c74:	4b63      	ldr	r3, [pc, #396]	; (8017e04 <tcp_process+0x5b8>)
 8017c76:	881b      	ldrh	r3, [r3, #0]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d005      	beq.n	8017c88 <tcp_process+0x43c>
            recv_acked--;
 8017c7c:	4b61      	ldr	r3, [pc, #388]	; (8017e04 <tcp_process+0x5b8>)
 8017c7e:	881b      	ldrh	r3, [r3, #0]
 8017c80:	3b01      	subs	r3, #1
 8017c82:	b29a      	uxth	r2, r3
 8017c84:	4b5f      	ldr	r3, [pc, #380]	; (8017e04 <tcp_process+0x5b8>)
 8017c86:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c8c:	009a      	lsls	r2, r3, #2
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c92:	005b      	lsls	r3, r3, #1
 8017c94:	f241 111c 	movw	r1, #4380	; 0x111c
 8017c98:	428b      	cmp	r3, r1
 8017c9a:	bf38      	it	cc
 8017c9c:	460b      	movcc	r3, r1
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d204      	bcs.n	8017cac <tcp_process+0x460>
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	e00d      	b.n	8017cc8 <tcp_process+0x47c>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cb0:	005b      	lsls	r3, r3, #1
 8017cb2:	f241 121c 	movw	r2, #4380	; 0x111c
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d904      	bls.n	8017cc4 <tcp_process+0x478>
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cbe:	005b      	lsls	r3, r3, #1
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	e001      	b.n	8017cc8 <tcp_process+0x47c>
 8017cc4:	f241 131c 	movw	r3, #4380	; 0x111c
 8017cc8:	687a      	ldr	r2, [r7, #4]
 8017cca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017cce:	4b4e      	ldr	r3, [pc, #312]	; (8017e08 <tcp_process+0x5bc>)
 8017cd0:	781b      	ldrb	r3, [r3, #0]
 8017cd2:	f003 0320 	and.w	r3, r3, #32
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d037      	beq.n	8017d4a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	8b5b      	ldrh	r3, [r3, #26]
 8017cde:	f043 0302 	orr.w	r3, r3, #2
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	2207      	movs	r2, #7
 8017cec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017cee:	e02c      	b.n	8017d4a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017cf0:	4b3b      	ldr	r3, [pc, #236]	; (8017de0 <tcp_process+0x594>)
 8017cf2:	6819      	ldr	r1, [r3, #0]
 8017cf4:	4b3b      	ldr	r3, [pc, #236]	; (8017de4 <tcp_process+0x598>)
 8017cf6:	881b      	ldrh	r3, [r3, #0]
 8017cf8:	461a      	mov	r2, r3
 8017cfa:	4b3b      	ldr	r3, [pc, #236]	; (8017de8 <tcp_process+0x59c>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d00:	4b3a      	ldr	r3, [pc, #232]	; (8017dec <tcp_process+0x5a0>)
 8017d02:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d04:	885b      	ldrh	r3, [r3, #2]
 8017d06:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d08:	4a38      	ldr	r2, [pc, #224]	; (8017dec <tcp_process+0x5a0>)
 8017d0a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d0c:	8812      	ldrh	r2, [r2, #0]
 8017d0e:	b292      	uxth	r2, r2
 8017d10:	9202      	str	r2, [sp, #8]
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	4b36      	ldr	r3, [pc, #216]	; (8017df0 <tcp_process+0x5a4>)
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	4b36      	ldr	r3, [pc, #216]	; (8017df4 <tcp_process+0x5a8>)
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	6878      	ldr	r0, [r7, #4]
 8017d1e:	f002 fbd1 	bl	801a4c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017d22:	e167      	b.n	8017ff4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017d24:	4b2d      	ldr	r3, [pc, #180]	; (8017ddc <tcp_process+0x590>)
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	f003 0302 	and.w	r3, r3, #2
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	f000 8161 	beq.w	8017ff4 <tcp_process+0x7a8>
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d36:	1e5a      	subs	r2, r3, #1
 8017d38:	4b2b      	ldr	r3, [pc, #172]	; (8017de8 <tcp_process+0x59c>)
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	f040 8159 	bne.w	8017ff4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017d42:	6878      	ldr	r0, [r7, #4]
 8017d44:	f002 f9b6 	bl	801a0b4 <tcp_rexmit>
      break;
 8017d48:	e154      	b.n	8017ff4 <tcp_process+0x7a8>
 8017d4a:	e153      	b.n	8017ff4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f000 fa71 	bl	8018234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017d52:	4b2d      	ldr	r3, [pc, #180]	; (8017e08 <tcp_process+0x5bc>)
 8017d54:	781b      	ldrb	r3, [r3, #0]
 8017d56:	f003 0320 	and.w	r3, r3, #32
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	f000 814c 	beq.w	8017ff8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	8b5b      	ldrh	r3, [r3, #26]
 8017d64:	f043 0302 	orr.w	r3, r3, #2
 8017d68:	b29a      	uxth	r2, r3
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	2207      	movs	r2, #7
 8017d72:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017d74:	e140      	b.n	8017ff8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017d76:	6878      	ldr	r0, [r7, #4]
 8017d78:	f000 fa5c 	bl	8018234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017d7c:	4b22      	ldr	r3, [pc, #136]	; (8017e08 <tcp_process+0x5bc>)
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	f003 0320 	and.w	r3, r3, #32
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d071      	beq.n	8017e6c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017d88:	4b14      	ldr	r3, [pc, #80]	; (8017ddc <tcp_process+0x590>)
 8017d8a:	781b      	ldrb	r3, [r3, #0]
 8017d8c:	f003 0310 	and.w	r3, r3, #16
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d060      	beq.n	8017e56 <tcp_process+0x60a>
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017d98:	4b11      	ldr	r3, [pc, #68]	; (8017de0 <tcp_process+0x594>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d15a      	bne.n	8017e56 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d156      	bne.n	8017e56 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	8b5b      	ldrh	r3, [r3, #26]
 8017dac:	f043 0302 	orr.w	r3, r3, #2
 8017db0:	b29a      	uxth	r2, r3
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8017db6:	6878      	ldr	r0, [r7, #4]
 8017db8:	f7fe fdbc 	bl	8016934 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017dbc:	4b13      	ldr	r3, [pc, #76]	; (8017e0c <tcp_process+0x5c0>)
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	687a      	ldr	r2, [r7, #4]
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d105      	bne.n	8017dd2 <tcp_process+0x586>
 8017dc6:	4b11      	ldr	r3, [pc, #68]	; (8017e0c <tcp_process+0x5c0>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	68db      	ldr	r3, [r3, #12]
 8017dcc:	4a0f      	ldr	r2, [pc, #60]	; (8017e0c <tcp_process+0x5c0>)
 8017dce:	6013      	str	r3, [r2, #0]
 8017dd0:	e02e      	b.n	8017e30 <tcp_process+0x5e4>
 8017dd2:	4b0e      	ldr	r3, [pc, #56]	; (8017e0c <tcp_process+0x5c0>)
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	617b      	str	r3, [r7, #20]
 8017dd8:	e027      	b.n	8017e2a <tcp_process+0x5de>
 8017dda:	bf00      	nop
 8017ddc:	2400cb94 	.word	0x2400cb94
 8017de0:	2400cb8c 	.word	0x2400cb8c
 8017de4:	2400cb92 	.word	0x2400cb92
 8017de8:	2400cb88 	.word	0x2400cb88
 8017dec:	2400cb78 	.word	0x2400cb78
 8017df0:	24009a40 	.word	0x24009a40
 8017df4:	24009a44 	.word	0x24009a44
 8017df8:	08022988 	.word	0x08022988
 8017dfc:	08022c28 	.word	0x08022c28
 8017e00:	080229d4 	.word	0x080229d4
 8017e04:	2400cb90 	.word	0x2400cb90
 8017e08:	2400cb95 	.word	0x2400cb95
 8017e0c:	2400cb5c 	.word	0x2400cb5c
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	68db      	ldr	r3, [r3, #12]
 8017e14:	687a      	ldr	r2, [r7, #4]
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d104      	bne.n	8017e24 <tcp_process+0x5d8>
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	68da      	ldr	r2, [r3, #12]
 8017e1e:	697b      	ldr	r3, [r7, #20]
 8017e20:	60da      	str	r2, [r3, #12]
 8017e22:	e005      	b.n	8017e30 <tcp_process+0x5e4>
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	68db      	ldr	r3, [r3, #12]
 8017e28:	617b      	str	r3, [r7, #20]
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d1ef      	bne.n	8017e10 <tcp_process+0x5c4>
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2200      	movs	r2, #0
 8017e34:	60da      	str	r2, [r3, #12]
 8017e36:	4b77      	ldr	r3, [pc, #476]	; (8018014 <tcp_process+0x7c8>)
 8017e38:	2201      	movs	r2, #1
 8017e3a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	220a      	movs	r2, #10
 8017e40:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017e42:	4b75      	ldr	r3, [pc, #468]	; (8018018 <tcp_process+0x7cc>)
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	60da      	str	r2, [r3, #12]
 8017e4a:	4a73      	ldr	r2, [pc, #460]	; (8018018 <tcp_process+0x7cc>)
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6013      	str	r3, [r2, #0]
 8017e50:	f002 fcfa 	bl	801a848 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017e54:	e0d2      	b.n	8017ffc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	8b5b      	ldrh	r3, [r3, #26]
 8017e5a:	f043 0302 	orr.w	r3, r3, #2
 8017e5e:	b29a      	uxth	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2208      	movs	r2, #8
 8017e68:	751a      	strb	r2, [r3, #20]
      break;
 8017e6a:	e0c7      	b.n	8017ffc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e6c:	4b6b      	ldr	r3, [pc, #428]	; (801801c <tcp_process+0x7d0>)
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	f003 0310 	and.w	r3, r3, #16
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	f000 80c1 	beq.w	8017ffc <tcp_process+0x7b0>
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017e7e:	4b68      	ldr	r3, [pc, #416]	; (8018020 <tcp_process+0x7d4>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	f040 80ba 	bne.w	8017ffc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	f040 80b5 	bne.w	8017ffc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	2206      	movs	r2, #6
 8017e96:	751a      	strb	r2, [r3, #20]
      break;
 8017e98:	e0b0      	b.n	8017ffc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f000 f9ca 	bl	8018234 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017ea0:	4b60      	ldr	r3, [pc, #384]	; (8018024 <tcp_process+0x7d8>)
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	f003 0320 	and.w	r3, r3, #32
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	f000 80a9 	beq.w	8018000 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	8b5b      	ldrh	r3, [r3, #26]
 8017eb2:	f043 0302 	orr.w	r3, r3, #2
 8017eb6:	b29a      	uxth	r2, r3
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f7fe fd39 	bl	8016934 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017ec2:	4b59      	ldr	r3, [pc, #356]	; (8018028 <tcp_process+0x7dc>)
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d105      	bne.n	8017ed8 <tcp_process+0x68c>
 8017ecc:	4b56      	ldr	r3, [pc, #344]	; (8018028 <tcp_process+0x7dc>)
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	4a55      	ldr	r2, [pc, #340]	; (8018028 <tcp_process+0x7dc>)
 8017ed4:	6013      	str	r3, [r2, #0]
 8017ed6:	e013      	b.n	8017f00 <tcp_process+0x6b4>
 8017ed8:	4b53      	ldr	r3, [pc, #332]	; (8018028 <tcp_process+0x7dc>)
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	613b      	str	r3, [r7, #16]
 8017ede:	e00c      	b.n	8017efa <tcp_process+0x6ae>
 8017ee0:	693b      	ldr	r3, [r7, #16]
 8017ee2:	68db      	ldr	r3, [r3, #12]
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d104      	bne.n	8017ef4 <tcp_process+0x6a8>
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	68da      	ldr	r2, [r3, #12]
 8017eee:	693b      	ldr	r3, [r7, #16]
 8017ef0:	60da      	str	r2, [r3, #12]
 8017ef2:	e005      	b.n	8017f00 <tcp_process+0x6b4>
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	68db      	ldr	r3, [r3, #12]
 8017ef8:	613b      	str	r3, [r7, #16]
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d1ef      	bne.n	8017ee0 <tcp_process+0x694>
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2200      	movs	r2, #0
 8017f04:	60da      	str	r2, [r3, #12]
 8017f06:	4b43      	ldr	r3, [pc, #268]	; (8018014 <tcp_process+0x7c8>)
 8017f08:	2201      	movs	r2, #1
 8017f0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	220a      	movs	r2, #10
 8017f10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017f12:	4b41      	ldr	r3, [pc, #260]	; (8018018 <tcp_process+0x7cc>)
 8017f14:	681a      	ldr	r2, [r3, #0]
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	60da      	str	r2, [r3, #12]
 8017f1a:	4a3f      	ldr	r2, [pc, #252]	; (8018018 <tcp_process+0x7cc>)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	6013      	str	r3, [r2, #0]
 8017f20:	f002 fc92 	bl	801a848 <tcp_timer_needed>
      }
      break;
 8017f24:	e06c      	b.n	8018000 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f000 f984 	bl	8018234 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017f2c:	4b3b      	ldr	r3, [pc, #236]	; (801801c <tcp_process+0x7d0>)
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	f003 0310 	and.w	r3, r3, #16
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d065      	beq.n	8018004 <tcp_process+0x7b8>
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017f3c:	4b38      	ldr	r3, [pc, #224]	; (8018020 <tcp_process+0x7d4>)
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	429a      	cmp	r2, r3
 8017f42:	d15f      	bne.n	8018004 <tcp_process+0x7b8>
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d15b      	bne.n	8018004 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017f4c:	6878      	ldr	r0, [r7, #4]
 8017f4e:	f7fe fcf1 	bl	8016934 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017f52:	4b35      	ldr	r3, [pc, #212]	; (8018028 <tcp_process+0x7dc>)
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	687a      	ldr	r2, [r7, #4]
 8017f58:	429a      	cmp	r2, r3
 8017f5a:	d105      	bne.n	8017f68 <tcp_process+0x71c>
 8017f5c:	4b32      	ldr	r3, [pc, #200]	; (8018028 <tcp_process+0x7dc>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	68db      	ldr	r3, [r3, #12]
 8017f62:	4a31      	ldr	r2, [pc, #196]	; (8018028 <tcp_process+0x7dc>)
 8017f64:	6013      	str	r3, [r2, #0]
 8017f66:	e013      	b.n	8017f90 <tcp_process+0x744>
 8017f68:	4b2f      	ldr	r3, [pc, #188]	; (8018028 <tcp_process+0x7dc>)
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	60fb      	str	r3, [r7, #12]
 8017f6e:	e00c      	b.n	8017f8a <tcp_process+0x73e>
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	687a      	ldr	r2, [r7, #4]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	d104      	bne.n	8017f84 <tcp_process+0x738>
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	68da      	ldr	r2, [r3, #12]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	60da      	str	r2, [r3, #12]
 8017f82:	e005      	b.n	8017f90 <tcp_process+0x744>
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	60fb      	str	r3, [r7, #12]
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d1ef      	bne.n	8017f70 <tcp_process+0x724>
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	2200      	movs	r2, #0
 8017f94:	60da      	str	r2, [r3, #12]
 8017f96:	4b1f      	ldr	r3, [pc, #124]	; (8018014 <tcp_process+0x7c8>)
 8017f98:	2201      	movs	r2, #1
 8017f9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	220a      	movs	r2, #10
 8017fa0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017fa2:	4b1d      	ldr	r3, [pc, #116]	; (8018018 <tcp_process+0x7cc>)
 8017fa4:	681a      	ldr	r2, [r3, #0]
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	60da      	str	r2, [r3, #12]
 8017faa:	4a1b      	ldr	r2, [pc, #108]	; (8018018 <tcp_process+0x7cc>)
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6013      	str	r3, [r2, #0]
 8017fb0:	f002 fc4a 	bl	801a848 <tcp_timer_needed>
      }
      break;
 8017fb4:	e026      	b.n	8018004 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 f93c 	bl	8018234 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017fbc:	4b17      	ldr	r3, [pc, #92]	; (801801c <tcp_process+0x7d0>)
 8017fbe:	781b      	ldrb	r3, [r3, #0]
 8017fc0:	f003 0310 	and.w	r3, r3, #16
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d01f      	beq.n	8018008 <tcp_process+0x7bc>
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017fcc:	4b14      	ldr	r3, [pc, #80]	; (8018020 <tcp_process+0x7d4>)
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d119      	bne.n	8018008 <tcp_process+0x7bc>
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d115      	bne.n	8018008 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017fdc:	4b11      	ldr	r3, [pc, #68]	; (8018024 <tcp_process+0x7d8>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f043 0310 	orr.w	r3, r3, #16
 8017fe4:	b2da      	uxtb	r2, r3
 8017fe6:	4b0f      	ldr	r3, [pc, #60]	; (8018024 <tcp_process+0x7d8>)
 8017fe8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017fea:	e00d      	b.n	8018008 <tcp_process+0x7bc>
    default:
      break;
 8017fec:	bf00      	nop
 8017fee:	e00c      	b.n	801800a <tcp_process+0x7be>
      break;
 8017ff0:	bf00      	nop
 8017ff2:	e00a      	b.n	801800a <tcp_process+0x7be>
      break;
 8017ff4:	bf00      	nop
 8017ff6:	e008      	b.n	801800a <tcp_process+0x7be>
      break;
 8017ff8:	bf00      	nop
 8017ffa:	e006      	b.n	801800a <tcp_process+0x7be>
      break;
 8017ffc:	bf00      	nop
 8017ffe:	e004      	b.n	801800a <tcp_process+0x7be>
      break;
 8018000:	bf00      	nop
 8018002:	e002      	b.n	801800a <tcp_process+0x7be>
      break;
 8018004:	bf00      	nop
 8018006:	e000      	b.n	801800a <tcp_process+0x7be>
      break;
 8018008:	bf00      	nop
  }
  return ERR_OK;
 801800a:	2300      	movs	r3, #0
}
 801800c:	4618      	mov	r0, r3
 801800e:	3724      	adds	r7, #36	; 0x24
 8018010:	46bd      	mov	sp, r7
 8018012:	bd90      	pop	{r4, r7, pc}
 8018014:	2400cb64 	.word	0x2400cb64
 8018018:	2400cb60 	.word	0x2400cb60
 801801c:	2400cb94 	.word	0x2400cb94
 8018020:	2400cb8c 	.word	0x2400cb8c
 8018024:	2400cb95 	.word	0x2400cb95
 8018028:	2400cb5c 	.word	0x2400cb5c

0801802c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801802c:	b590      	push	{r4, r7, lr}
 801802e:	b085      	sub	sp, #20
 8018030:	af00      	add	r7, sp, #0
 8018032:	6078      	str	r0, [r7, #4]
 8018034:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d106      	bne.n	801804a <tcp_oos_insert_segment+0x1e>
 801803c:	4b3b      	ldr	r3, [pc, #236]	; (801812c <tcp_oos_insert_segment+0x100>)
 801803e:	f240 421f 	movw	r2, #1055	; 0x41f
 8018042:	493b      	ldr	r1, [pc, #236]	; (8018130 <tcp_oos_insert_segment+0x104>)
 8018044:	483b      	ldr	r0, [pc, #236]	; (8018134 <tcp_oos_insert_segment+0x108>)
 8018046:	f008 fb8f 	bl	8020768 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	68db      	ldr	r3, [r3, #12]
 801804e:	899b      	ldrh	r3, [r3, #12]
 8018050:	b29b      	uxth	r3, r3
 8018052:	4618      	mov	r0, r3
 8018054:	f7fb fb3c 	bl	80136d0 <lwip_htons>
 8018058:	4603      	mov	r3, r0
 801805a:	b2db      	uxtb	r3, r3
 801805c:	f003 0301 	and.w	r3, r3, #1
 8018060:	2b00      	cmp	r3, #0
 8018062:	d028      	beq.n	80180b6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018064:	6838      	ldr	r0, [r7, #0]
 8018066:	f7fe fa63 	bl	8016530 <tcp_segs_free>
    next = NULL;
 801806a:	2300      	movs	r3, #0
 801806c:	603b      	str	r3, [r7, #0]
 801806e:	e056      	b.n	801811e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018070:	683b      	ldr	r3, [r7, #0]
 8018072:	68db      	ldr	r3, [r3, #12]
 8018074:	899b      	ldrh	r3, [r3, #12]
 8018076:	b29b      	uxth	r3, r3
 8018078:	4618      	mov	r0, r3
 801807a:	f7fb fb29 	bl	80136d0 <lwip_htons>
 801807e:	4603      	mov	r3, r0
 8018080:	b2db      	uxtb	r3, r3
 8018082:	f003 0301 	and.w	r3, r3, #1
 8018086:	2b00      	cmp	r3, #0
 8018088:	d00d      	beq.n	80180a6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	68db      	ldr	r3, [r3, #12]
 801808e:	899b      	ldrh	r3, [r3, #12]
 8018090:	b29c      	uxth	r4, r3
 8018092:	2001      	movs	r0, #1
 8018094:	f7fb fb1c 	bl	80136d0 <lwip_htons>
 8018098:	4603      	mov	r3, r0
 801809a:	461a      	mov	r2, r3
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	68db      	ldr	r3, [r3, #12]
 80180a0:	4322      	orrs	r2, r4
 80180a2:	b292      	uxth	r2, r2
 80180a4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80180b0:	68f8      	ldr	r0, [r7, #12]
 80180b2:	f7fe fa52 	bl	801655a <tcp_seg_free>
    while (next &&
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d00e      	beq.n	80180da <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	891b      	ldrh	r3, [r3, #8]
 80180c0:	461a      	mov	r2, r3
 80180c2:	4b1d      	ldr	r3, [pc, #116]	; (8018138 <tcp_oos_insert_segment+0x10c>)
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	441a      	add	r2, r3
 80180c8:	683b      	ldr	r3, [r7, #0]
 80180ca:	68db      	ldr	r3, [r3, #12]
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	6839      	ldr	r1, [r7, #0]
 80180d0:	8909      	ldrh	r1, [r1, #8]
 80180d2:	440b      	add	r3, r1
 80180d4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	daca      	bge.n	8018070 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80180da:	683b      	ldr	r3, [r7, #0]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d01e      	beq.n	801811e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	891b      	ldrh	r3, [r3, #8]
 80180e4:	461a      	mov	r2, r3
 80180e6:	4b14      	ldr	r3, [pc, #80]	; (8018138 <tcp_oos_insert_segment+0x10c>)
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	441a      	add	r2, r3
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	68db      	ldr	r3, [r3, #12]
 80180f0:	685b      	ldr	r3, [r3, #4]
 80180f2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	dd12      	ble.n	801811e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	68db      	ldr	r3, [r3, #12]
 80180fc:	685b      	ldr	r3, [r3, #4]
 80180fe:	b29a      	uxth	r2, r3
 8018100:	4b0d      	ldr	r3, [pc, #52]	; (8018138 <tcp_oos_insert_segment+0x10c>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	b29b      	uxth	r3, r3
 8018106:	1ad3      	subs	r3, r2, r3
 8018108:	b29a      	uxth	r2, r3
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	685a      	ldr	r2, [r3, #4]
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	891b      	ldrh	r3, [r3, #8]
 8018116:	4619      	mov	r1, r3
 8018118:	4610      	mov	r0, r2
 801811a:	f7fc fe09 	bl	8014d30 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	683a      	ldr	r2, [r7, #0]
 8018122:	601a      	str	r2, [r3, #0]
}
 8018124:	bf00      	nop
 8018126:	3714      	adds	r7, #20
 8018128:	46bd      	mov	sp, r7
 801812a:	bd90      	pop	{r4, r7, pc}
 801812c:	08022988 	.word	0x08022988
 8018130:	08022c48 	.word	0x08022c48
 8018134:	080229d4 	.word	0x080229d4
 8018138:	2400cb88 	.word	0x2400cb88

0801813c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801813c:	b5b0      	push	{r4, r5, r7, lr}
 801813e:	b086      	sub	sp, #24
 8018140:	af00      	add	r7, sp, #0
 8018142:	60f8      	str	r0, [r7, #12]
 8018144:	60b9      	str	r1, [r7, #8]
 8018146:	607a      	str	r2, [r7, #4]
 8018148:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801814a:	e03e      	b.n	80181ca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018150:	68bb      	ldr	r3, [r7, #8]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018156:	697b      	ldr	r3, [r7, #20]
 8018158:	685b      	ldr	r3, [r3, #4]
 801815a:	4618      	mov	r0, r3
 801815c:	f7fc fffc 	bl	8015158 <pbuf_clen>
 8018160:	4603      	mov	r3, r0
 8018162:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801816a:	8a7a      	ldrh	r2, [r7, #18]
 801816c:	429a      	cmp	r2, r3
 801816e:	d906      	bls.n	801817e <tcp_free_acked_segments+0x42>
 8018170:	4b2a      	ldr	r3, [pc, #168]	; (801821c <tcp_free_acked_segments+0xe0>)
 8018172:	f240 4257 	movw	r2, #1111	; 0x457
 8018176:	492a      	ldr	r1, [pc, #168]	; (8018220 <tcp_free_acked_segments+0xe4>)
 8018178:	482a      	ldr	r0, [pc, #168]	; (8018224 <tcp_free_acked_segments+0xe8>)
 801817a:	f008 faf5 	bl	8020768 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8018184:	8a7b      	ldrh	r3, [r7, #18]
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	b29a      	uxth	r2, r3
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018190:	697b      	ldr	r3, [r7, #20]
 8018192:	891a      	ldrh	r2, [r3, #8]
 8018194:	4b24      	ldr	r3, [pc, #144]	; (8018228 <tcp_free_acked_segments+0xec>)
 8018196:	881b      	ldrh	r3, [r3, #0]
 8018198:	4413      	add	r3, r2
 801819a:	b29a      	uxth	r2, r3
 801819c:	4b22      	ldr	r3, [pc, #136]	; (8018228 <tcp_free_acked_segments+0xec>)
 801819e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80181a0:	6978      	ldr	r0, [r7, #20]
 80181a2:	f7fe f9da 	bl	801655a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00c      	beq.n	80181ca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d109      	bne.n	80181ca <tcp_free_acked_segments+0x8e>
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d106      	bne.n	80181ca <tcp_free_acked_segments+0x8e>
 80181bc:	4b17      	ldr	r3, [pc, #92]	; (801821c <tcp_free_acked_segments+0xe0>)
 80181be:	f240 4261 	movw	r2, #1121	; 0x461
 80181c2:	491a      	ldr	r1, [pc, #104]	; (801822c <tcp_free_acked_segments+0xf0>)
 80181c4:	4817      	ldr	r0, [pc, #92]	; (8018224 <tcp_free_acked_segments+0xe8>)
 80181c6:	f008 facf 	bl	8020768 <iprintf>
  while (seg_list != NULL &&
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d020      	beq.n	8018212 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	68db      	ldr	r3, [r3, #12]
 80181d4:	685b      	ldr	r3, [r3, #4]
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7fb fa8f 	bl	80136fa <lwip_htonl>
 80181dc:	4604      	mov	r4, r0
 80181de:	68bb      	ldr	r3, [r7, #8]
 80181e0:	891b      	ldrh	r3, [r3, #8]
 80181e2:	461d      	mov	r5, r3
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	68db      	ldr	r3, [r3, #12]
 80181e8:	899b      	ldrh	r3, [r3, #12]
 80181ea:	b29b      	uxth	r3, r3
 80181ec:	4618      	mov	r0, r3
 80181ee:	f7fb fa6f 	bl	80136d0 <lwip_htons>
 80181f2:	4603      	mov	r3, r0
 80181f4:	b2db      	uxtb	r3, r3
 80181f6:	f003 0303 	and.w	r3, r3, #3
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d001      	beq.n	8018202 <tcp_free_acked_segments+0xc6>
 80181fe:	2301      	movs	r3, #1
 8018200:	e000      	b.n	8018204 <tcp_free_acked_segments+0xc8>
 8018202:	2300      	movs	r3, #0
 8018204:	442b      	add	r3, r5
 8018206:	18e2      	adds	r2, r4, r3
 8018208:	4b09      	ldr	r3, [pc, #36]	; (8018230 <tcp_free_acked_segments+0xf4>)
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801820e:	2b00      	cmp	r3, #0
 8018210:	dd9c      	ble.n	801814c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018212:	68bb      	ldr	r3, [r7, #8]
}
 8018214:	4618      	mov	r0, r3
 8018216:	3718      	adds	r7, #24
 8018218:	46bd      	mov	sp, r7
 801821a:	bdb0      	pop	{r4, r5, r7, pc}
 801821c:	08022988 	.word	0x08022988
 8018220:	08022c70 	.word	0x08022c70
 8018224:	080229d4 	.word	0x080229d4
 8018228:	2400cb90 	.word	0x2400cb90
 801822c:	08022c98 	.word	0x08022c98
 8018230:	2400cb8c 	.word	0x2400cb8c

08018234 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018234:	b5b0      	push	{r4, r5, r7, lr}
 8018236:	b094      	sub	sp, #80	; 0x50
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801823c:	2300      	movs	r3, #0
 801823e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d106      	bne.n	8018254 <tcp_receive+0x20>
 8018246:	4b91      	ldr	r3, [pc, #580]	; (801848c <tcp_receive+0x258>)
 8018248:	f240 427b 	movw	r2, #1147	; 0x47b
 801824c:	4990      	ldr	r1, [pc, #576]	; (8018490 <tcp_receive+0x25c>)
 801824e:	4891      	ldr	r0, [pc, #580]	; (8018494 <tcp_receive+0x260>)
 8018250:	f008 fa8a 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	7d1b      	ldrb	r3, [r3, #20]
 8018258:	2b03      	cmp	r3, #3
 801825a:	d806      	bhi.n	801826a <tcp_receive+0x36>
 801825c:	4b8b      	ldr	r3, [pc, #556]	; (801848c <tcp_receive+0x258>)
 801825e:	f240 427c 	movw	r2, #1148	; 0x47c
 8018262:	498d      	ldr	r1, [pc, #564]	; (8018498 <tcp_receive+0x264>)
 8018264:	488b      	ldr	r0, [pc, #556]	; (8018494 <tcp_receive+0x260>)
 8018266:	f008 fa7f 	bl	8020768 <iprintf>

  if (flags & TCP_ACK) {
 801826a:	4b8c      	ldr	r3, [pc, #560]	; (801849c <tcp_receive+0x268>)
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	f003 0310 	and.w	r3, r3, #16
 8018272:	2b00      	cmp	r3, #0
 8018274:	f000 8264 	beq.w	8018740 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801827e:	461a      	mov	r2, r3
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018284:	4413      	add	r3, r2
 8018286:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801828c:	4b84      	ldr	r3, [pc, #528]	; (80184a0 <tcp_receive+0x26c>)
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	1ad3      	subs	r3, r2, r3
 8018292:	2b00      	cmp	r3, #0
 8018294:	db1b      	blt.n	80182ce <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801829a:	4b81      	ldr	r3, [pc, #516]	; (80184a0 <tcp_receive+0x26c>)
 801829c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801829e:	429a      	cmp	r2, r3
 80182a0:	d106      	bne.n	80182b0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80182a6:	4b7f      	ldr	r3, [pc, #508]	; (80184a4 <tcp_receive+0x270>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	1ad3      	subs	r3, r2, r3
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	db0e      	blt.n	80182ce <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80182b4:	4b7b      	ldr	r3, [pc, #492]	; (80184a4 <tcp_receive+0x270>)
 80182b6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80182b8:	429a      	cmp	r2, r3
 80182ba:	d125      	bne.n	8018308 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80182bc:	4b7a      	ldr	r3, [pc, #488]	; (80184a8 <tcp_receive+0x274>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	89db      	ldrh	r3, [r3, #14]
 80182c2:	b29a      	uxth	r2, r3
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d91c      	bls.n	8018308 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80182ce:	4b76      	ldr	r3, [pc, #472]	; (80184a8 <tcp_receive+0x274>)
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	89db      	ldrh	r3, [r3, #14]
 80182d4:	b29a      	uxth	r2, r3
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80182e8:	429a      	cmp	r2, r3
 80182ea:	d205      	bcs.n	80182f8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80182f8:	4b69      	ldr	r3, [pc, #420]	; (80184a0 <tcp_receive+0x26c>)
 80182fa:	681a      	ldr	r2, [r3, #0]
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8018300:	4b68      	ldr	r3, [pc, #416]	; (80184a4 <tcp_receive+0x270>)
 8018302:	681a      	ldr	r2, [r3, #0]
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018308:	4b66      	ldr	r3, [pc, #408]	; (80184a4 <tcp_receive+0x270>)
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018310:	1ad3      	subs	r3, r2, r3
 8018312:	2b00      	cmp	r3, #0
 8018314:	dc58      	bgt.n	80183c8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018316:	4b65      	ldr	r3, [pc, #404]	; (80184ac <tcp_receive+0x278>)
 8018318:	881b      	ldrh	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d14b      	bne.n	80183b6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8018328:	4413      	add	r3, r2
 801832a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801832c:	429a      	cmp	r2, r3
 801832e:	d142      	bne.n	80183b6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018336:	2b00      	cmp	r3, #0
 8018338:	db3d      	blt.n	80183b6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801833e:	4b59      	ldr	r3, [pc, #356]	; (80184a4 <tcp_receive+0x270>)
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	429a      	cmp	r2, r3
 8018344:	d137      	bne.n	80183b6 <tcp_receive+0x182>
              found_dupack = 1;
 8018346:	2301      	movs	r3, #1
 8018348:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8018350:	2bff      	cmp	r3, #255	; 0xff
 8018352:	d007      	beq.n	8018364 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801835a:	3301      	adds	r3, #1
 801835c:	b2da      	uxtb	r2, r3
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801836a:	2b03      	cmp	r3, #3
 801836c:	d91b      	bls.n	80183a6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018378:	4413      	add	r3, r2
 801837a:	b29a      	uxth	r2, r3
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018382:	429a      	cmp	r2, r3
 8018384:	d30a      	bcc.n	801839c <tcp_receive+0x168>
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018390:	4413      	add	r3, r2
 8018392:	b29a      	uxth	r2, r3
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801839a:	e004      	b.n	80183a6 <tcp_receive+0x172>
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80183ac:	2b02      	cmp	r3, #2
 80183ae:	d902      	bls.n	80183b6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80183b0:	6878      	ldr	r0, [r7, #4]
 80183b2:	f001 feeb 	bl	801a18c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80183b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	f040 8161 	bne.w	8018680 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	2200      	movs	r2, #0
 80183c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80183c6:	e15b      	b.n	8018680 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80183c8:	4b36      	ldr	r3, [pc, #216]	; (80184a4 <tcp_receive+0x270>)
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80183d0:	1ad3      	subs	r3, r2, r3
 80183d2:	3b01      	subs	r3, #1
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	f2c0 814e 	blt.w	8018676 <tcp_receive+0x442>
 80183da:	4b32      	ldr	r3, [pc, #200]	; (80184a4 <tcp_receive+0x270>)
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80183e2:	1ad3      	subs	r3, r2, r3
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	f300 8146 	bgt.w	8018676 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	8b5b      	ldrh	r3, [r3, #26]
 80183ee:	f003 0304 	and.w	r3, r3, #4
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d010      	beq.n	8018418 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	8b5b      	ldrh	r3, [r3, #26]
 80183fa:	f023 0304 	bic.w	r3, r3, #4
 80183fe:	b29a      	uxth	r2, r3
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	2200      	movs	r2, #0
 8018414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	2200      	movs	r2, #0
 801841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018426:	10db      	asrs	r3, r3, #3
 8018428:	b21b      	sxth	r3, r3
 801842a:	b29a      	uxth	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018432:	b29b      	uxth	r3, r3
 8018434:	4413      	add	r3, r2
 8018436:	b29b      	uxth	r3, r3
 8018438:	b21a      	sxth	r2, r3
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018440:	4b18      	ldr	r3, [pc, #96]	; (80184a4 <tcp_receive+0x270>)
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	b29a      	uxth	r2, r3
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801844a:	b29b      	uxth	r3, r3
 801844c:	1ad3      	subs	r3, r2, r3
 801844e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	2200      	movs	r2, #0
 8018454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8018458:	4b12      	ldr	r3, [pc, #72]	; (80184a4 <tcp_receive+0x270>)
 801845a:	681a      	ldr	r2, [r3, #0]
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	7d1b      	ldrb	r3, [r3, #20]
 8018464:	2b03      	cmp	r3, #3
 8018466:	f240 8097 	bls.w	8018598 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018476:	429a      	cmp	r2, r3
 8018478:	d245      	bcs.n	8018506 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	8b5b      	ldrh	r3, [r3, #26]
 801847e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018482:	2b00      	cmp	r3, #0
 8018484:	d014      	beq.n	80184b0 <tcp_receive+0x27c>
 8018486:	2301      	movs	r3, #1
 8018488:	e013      	b.n	80184b2 <tcp_receive+0x27e>
 801848a:	bf00      	nop
 801848c:	08022988 	.word	0x08022988
 8018490:	08022cb8 	.word	0x08022cb8
 8018494:	080229d4 	.word	0x080229d4
 8018498:	08022cd4 	.word	0x08022cd4
 801849c:	2400cb94 	.word	0x2400cb94
 80184a0:	2400cb88 	.word	0x2400cb88
 80184a4:	2400cb8c 	.word	0x2400cb8c
 80184a8:	2400cb78 	.word	0x2400cb78
 80184ac:	2400cb92 	.word	0x2400cb92
 80184b0:	2302      	movs	r3, #2
 80184b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80184b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80184ba:	b29a      	uxth	r2, r3
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80184c0:	fb12 f303 	smulbb	r3, r2, r3
 80184c4:	b29b      	uxth	r3, r3
 80184c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80184c8:	4293      	cmp	r3, r2
 80184ca:	bf28      	it	cs
 80184cc:	4613      	movcs	r3, r2
 80184ce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80184d8:	4413      	add	r3, r2
 80184da:	b29a      	uxth	r2, r3
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80184e2:	429a      	cmp	r2, r3
 80184e4:	d309      	bcc.n	80184fa <tcp_receive+0x2c6>
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80184ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80184ee:	4413      	add	r3, r2
 80184f0:	b29a      	uxth	r2, r3
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80184f8:	e04e      	b.n	8018598 <tcp_receive+0x364>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018500:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8018504:	e048      	b.n	8018598 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801850c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801850e:	4413      	add	r3, r2
 8018510:	b29a      	uxth	r2, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8018518:	429a      	cmp	r2, r3
 801851a:	d309      	bcc.n	8018530 <tcp_receive+0x2fc>
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018524:	4413      	add	r3, r2
 8018526:	b29a      	uxth	r2, r3
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801852e:	e004      	b.n	801853a <tcp_receive+0x306>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018536:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018546:	429a      	cmp	r2, r3
 8018548:	d326      	bcc.n	8018598 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018556:	1ad3      	subs	r3, r2, r3
 8018558:	b29a      	uxth	r2, r3
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801856a:	4413      	add	r3, r2
 801856c:	b29a      	uxth	r2, r3
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018574:	429a      	cmp	r2, r3
 8018576:	d30a      	bcc.n	801858e <tcp_receive+0x35a>
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018582:	4413      	add	r3, r2
 8018584:	b29a      	uxth	r2, r3
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801858c:	e004      	b.n	8018598 <tcp_receive+0x364>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018594:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185a0:	4a98      	ldr	r2, [pc, #608]	; (8018804 <tcp_receive+0x5d0>)
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f7ff fdca 	bl	801813c <tcp_free_acked_segments>
 80185a8:	4602      	mov	r2, r0
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185b6:	4a94      	ldr	r2, [pc, #592]	; (8018808 <tcp_receive+0x5d4>)
 80185b8:	6878      	ldr	r0, [r7, #4]
 80185ba:	f7ff fdbf 	bl	801813c <tcp_free_acked_segments>
 80185be:	4602      	mov	r2, r0
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d104      	bne.n	80185d6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80185d4:	e002      	b.n	80185dc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2200      	movs	r2, #0
 80185da:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	2200      	movs	r2, #0
 80185e0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d103      	bne.n	80185f2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2200      	movs	r2, #0
 80185ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80185f8:	4b84      	ldr	r3, [pc, #528]	; (801880c <tcp_receive+0x5d8>)
 80185fa:	881b      	ldrh	r3, [r3, #0]
 80185fc:	4413      	add	r3, r2
 80185fe:	b29a      	uxth	r2, r3
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	8b5b      	ldrh	r3, [r3, #26]
 801860a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801860e:	2b00      	cmp	r3, #0
 8018610:	d035      	beq.n	801867e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018616:	2b00      	cmp	r3, #0
 8018618:	d118      	bne.n	801864c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801861e:	2b00      	cmp	r3, #0
 8018620:	d00c      	beq.n	801863c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801862a:	68db      	ldr	r3, [r3, #12]
 801862c:	685b      	ldr	r3, [r3, #4]
 801862e:	4618      	mov	r0, r3
 8018630:	f7fb f863 	bl	80136fa <lwip_htonl>
 8018634:	4603      	mov	r3, r0
 8018636:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018638:	2b00      	cmp	r3, #0
 801863a:	dc20      	bgt.n	801867e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	8b5b      	ldrh	r3, [r3, #26]
 8018640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018644:	b29a      	uxth	r2, r3
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801864a:	e018      	b.n	801867e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018654:	68db      	ldr	r3, [r3, #12]
 8018656:	685b      	ldr	r3, [r3, #4]
 8018658:	4618      	mov	r0, r3
 801865a:	f7fb f84e 	bl	80136fa <lwip_htonl>
 801865e:	4603      	mov	r3, r0
 8018660:	1ae3      	subs	r3, r4, r3
 8018662:	2b00      	cmp	r3, #0
 8018664:	dc0b      	bgt.n	801867e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	8b5b      	ldrh	r3, [r3, #26]
 801866a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801866e:	b29a      	uxth	r2, r3
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018674:	e003      	b.n	801867e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018676:	6878      	ldr	r0, [r7, #4]
 8018678:	f001 ff76 	bl	801a568 <tcp_send_empty_ack>
 801867c:	e000      	b.n	8018680 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801867e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018684:	2b00      	cmp	r3, #0
 8018686:	d05b      	beq.n	8018740 <tcp_receive+0x50c>
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801868c:	4b60      	ldr	r3, [pc, #384]	; (8018810 <tcp_receive+0x5dc>)
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	1ad3      	subs	r3, r2, r3
 8018692:	2b00      	cmp	r3, #0
 8018694:	da54      	bge.n	8018740 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018696:	4b5f      	ldr	r3, [pc, #380]	; (8018814 <tcp_receive+0x5e0>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	1ad3      	subs	r3, r2, r3
 80186a4:	b29b      	uxth	r3, r3
 80186a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80186aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80186b4:	10db      	asrs	r3, r3, #3
 80186b6:	b21b      	sxth	r3, r3
 80186b8:	b29b      	uxth	r3, r3
 80186ba:	1ad3      	subs	r3, r2, r3
 80186bc:	b29b      	uxth	r3, r3
 80186be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80186c8:	b29a      	uxth	r2, r3
 80186ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80186ce:	4413      	add	r3, r2
 80186d0:	b29b      	uxth	r3, r3
 80186d2:	b21a      	sxth	r2, r3
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80186d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80186dc:	2b00      	cmp	r3, #0
 80186de:	da05      	bge.n	80186ec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80186e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80186e4:	425b      	negs	r3, r3
 80186e6:	b29b      	uxth	r3, r3
 80186e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80186ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80186f6:	109b      	asrs	r3, r3, #2
 80186f8:	b21b      	sxth	r3, r3
 80186fa:	b29b      	uxth	r3, r3
 80186fc:	1ad3      	subs	r3, r2, r3
 80186fe:	b29b      	uxth	r3, r3
 8018700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801870a:	b29a      	uxth	r2, r3
 801870c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018710:	4413      	add	r3, r2
 8018712:	b29b      	uxth	r3, r3
 8018714:	b21a      	sxth	r2, r3
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018720:	10db      	asrs	r3, r3, #3
 8018722:	b21b      	sxth	r3, r3
 8018724:	b29a      	uxth	r2, r3
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801872c:	b29b      	uxth	r3, r3
 801872e:	4413      	add	r3, r2
 8018730:	b29b      	uxth	r3, r3
 8018732:	b21a      	sxth	r2, r3
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	2200      	movs	r2, #0
 801873e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018740:	4b35      	ldr	r3, [pc, #212]	; (8018818 <tcp_receive+0x5e4>)
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	f000 84e2 	beq.w	801910e <tcp_receive+0xeda>
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	7d1b      	ldrb	r3, [r3, #20]
 801874e:	2b06      	cmp	r3, #6
 8018750:	f200 84dd 	bhi.w	801910e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018758:	4b30      	ldr	r3, [pc, #192]	; (801881c <tcp_receive+0x5e8>)
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	1ad3      	subs	r3, r2, r3
 801875e:	3b01      	subs	r3, #1
 8018760:	2b00      	cmp	r3, #0
 8018762:	f2c0 808f 	blt.w	8018884 <tcp_receive+0x650>
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801876a:	4b2b      	ldr	r3, [pc, #172]	; (8018818 <tcp_receive+0x5e4>)
 801876c:	881b      	ldrh	r3, [r3, #0]
 801876e:	4619      	mov	r1, r3
 8018770:	4b2a      	ldr	r3, [pc, #168]	; (801881c <tcp_receive+0x5e8>)
 8018772:	681b      	ldr	r3, [r3, #0]
 8018774:	440b      	add	r3, r1
 8018776:	1ad3      	subs	r3, r2, r3
 8018778:	3301      	adds	r3, #1
 801877a:	2b00      	cmp	r3, #0
 801877c:	f300 8082 	bgt.w	8018884 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018780:	4b27      	ldr	r3, [pc, #156]	; (8018820 <tcp_receive+0x5ec>)
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801878a:	4b24      	ldr	r3, [pc, #144]	; (801881c <tcp_receive+0x5e8>)
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	1ad3      	subs	r3, r2, r3
 8018790:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018792:	4b23      	ldr	r3, [pc, #140]	; (8018820 <tcp_receive+0x5ec>)
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d106      	bne.n	80187a8 <tcp_receive+0x574>
 801879a:	4b22      	ldr	r3, [pc, #136]	; (8018824 <tcp_receive+0x5f0>)
 801879c:	f240 5294 	movw	r2, #1428	; 0x594
 80187a0:	4921      	ldr	r1, [pc, #132]	; (8018828 <tcp_receive+0x5f4>)
 80187a2:	4822      	ldr	r0, [pc, #136]	; (801882c <tcp_receive+0x5f8>)
 80187a4:	f007 ffe0 	bl	8020768 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80187a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80187ae:	4293      	cmp	r3, r2
 80187b0:	d906      	bls.n	80187c0 <tcp_receive+0x58c>
 80187b2:	4b1c      	ldr	r3, [pc, #112]	; (8018824 <tcp_receive+0x5f0>)
 80187b4:	f240 5295 	movw	r2, #1429	; 0x595
 80187b8:	491d      	ldr	r1, [pc, #116]	; (8018830 <tcp_receive+0x5fc>)
 80187ba:	481c      	ldr	r0, [pc, #112]	; (801882c <tcp_receive+0x5f8>)
 80187bc:	f007 ffd4 	bl	8020768 <iprintf>
      off = (u16_t)off32;
 80187c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80187c6:	4b16      	ldr	r3, [pc, #88]	; (8018820 <tcp_receive+0x5ec>)
 80187c8:	685b      	ldr	r3, [r3, #4]
 80187ca:	891b      	ldrh	r3, [r3, #8]
 80187cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d906      	bls.n	80187e2 <tcp_receive+0x5ae>
 80187d4:	4b13      	ldr	r3, [pc, #76]	; (8018824 <tcp_receive+0x5f0>)
 80187d6:	f240 5297 	movw	r2, #1431	; 0x597
 80187da:	4916      	ldr	r1, [pc, #88]	; (8018834 <tcp_receive+0x600>)
 80187dc:	4813      	ldr	r0, [pc, #76]	; (801882c <tcp_receive+0x5f8>)
 80187de:	f007 ffc3 	bl	8020768 <iprintf>
      inseg.len -= off;
 80187e2:	4b0f      	ldr	r3, [pc, #60]	; (8018820 <tcp_receive+0x5ec>)
 80187e4:	891a      	ldrh	r2, [r3, #8]
 80187e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80187ea:	1ad3      	subs	r3, r2, r3
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	4b0c      	ldr	r3, [pc, #48]	; (8018820 <tcp_receive+0x5ec>)
 80187f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80187f2:	4b0b      	ldr	r3, [pc, #44]	; (8018820 <tcp_receive+0x5ec>)
 80187f4:	685b      	ldr	r3, [r3, #4]
 80187f6:	891a      	ldrh	r2, [r3, #8]
 80187f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80187fc:	1ad3      	subs	r3, r2, r3
 80187fe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8018800:	e02a      	b.n	8018858 <tcp_receive+0x624>
 8018802:	bf00      	nop
 8018804:	08022cf0 	.word	0x08022cf0
 8018808:	08022cf8 	.word	0x08022cf8
 801880c:	2400cb90 	.word	0x2400cb90
 8018810:	2400cb8c 	.word	0x2400cb8c
 8018814:	2400cb50 	.word	0x2400cb50
 8018818:	2400cb92 	.word	0x2400cb92
 801881c:	2400cb88 	.word	0x2400cb88
 8018820:	2400cb68 	.word	0x2400cb68
 8018824:	08022988 	.word	0x08022988
 8018828:	08022d00 	.word	0x08022d00
 801882c:	080229d4 	.word	0x080229d4
 8018830:	08022d10 	.word	0x08022d10
 8018834:	08022d20 	.word	0x08022d20
        off -= p->len;
 8018838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801883a:	895b      	ldrh	r3, [r3, #10]
 801883c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018840:	1ad3      	subs	r3, r2, r3
 8018842:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018848:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801884a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801884c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801884e:	2200      	movs	r2, #0
 8018850:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8018858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801885a:	895b      	ldrh	r3, [r3, #10]
 801885c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018860:	429a      	cmp	r2, r3
 8018862:	d8e9      	bhi.n	8018838 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018868:	4619      	mov	r1, r3
 801886a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801886c:	f7fc fb60 	bl	8014f30 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018874:	4a91      	ldr	r2, [pc, #580]	; (8018abc <tcp_receive+0x888>)
 8018876:	6013      	str	r3, [r2, #0]
 8018878:	4b91      	ldr	r3, [pc, #580]	; (8018ac0 <tcp_receive+0x88c>)
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	4a8f      	ldr	r2, [pc, #572]	; (8018abc <tcp_receive+0x888>)
 801887e:	6812      	ldr	r2, [r2, #0]
 8018880:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018882:	e00d      	b.n	80188a0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018884:	4b8d      	ldr	r3, [pc, #564]	; (8018abc <tcp_receive+0x888>)
 8018886:	681a      	ldr	r2, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888c:	1ad3      	subs	r3, r2, r3
 801888e:	2b00      	cmp	r3, #0
 8018890:	da06      	bge.n	80188a0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	8b5b      	ldrh	r3, [r3, #26]
 8018896:	f043 0302 	orr.w	r3, r3, #2
 801889a:	b29a      	uxth	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80188a0:	4b86      	ldr	r3, [pc, #536]	; (8018abc <tcp_receive+0x888>)
 80188a2:	681a      	ldr	r2, [r3, #0]
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a8:	1ad3      	subs	r3, r2, r3
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	f2c0 842a 	blt.w	8019104 <tcp_receive+0xed0>
 80188b0:	4b82      	ldr	r3, [pc, #520]	; (8018abc <tcp_receive+0x888>)
 80188b2:	681a      	ldr	r2, [r3, #0]
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b8:	6879      	ldr	r1, [r7, #4]
 80188ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80188bc:	440b      	add	r3, r1
 80188be:	1ad3      	subs	r3, r2, r3
 80188c0:	3301      	adds	r3, #1
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	f300 841e 	bgt.w	8019104 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80188cc:	4b7b      	ldr	r3, [pc, #492]	; (8018abc <tcp_receive+0x888>)
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	f040 829a 	bne.w	8018e0a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80188d6:	4b7a      	ldr	r3, [pc, #488]	; (8018ac0 <tcp_receive+0x88c>)
 80188d8:	891c      	ldrh	r4, [r3, #8]
 80188da:	4b79      	ldr	r3, [pc, #484]	; (8018ac0 <tcp_receive+0x88c>)
 80188dc:	68db      	ldr	r3, [r3, #12]
 80188de:	899b      	ldrh	r3, [r3, #12]
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	4618      	mov	r0, r3
 80188e4:	f7fa fef4 	bl	80136d0 <lwip_htons>
 80188e8:	4603      	mov	r3, r0
 80188ea:	b2db      	uxtb	r3, r3
 80188ec:	f003 0303 	and.w	r3, r3, #3
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d001      	beq.n	80188f8 <tcp_receive+0x6c4>
 80188f4:	2301      	movs	r3, #1
 80188f6:	e000      	b.n	80188fa <tcp_receive+0x6c6>
 80188f8:	2300      	movs	r3, #0
 80188fa:	4423      	add	r3, r4
 80188fc:	b29a      	uxth	r2, r3
 80188fe:	4b71      	ldr	r3, [pc, #452]	; (8018ac4 <tcp_receive+0x890>)
 8018900:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018906:	4b6f      	ldr	r3, [pc, #444]	; (8018ac4 <tcp_receive+0x890>)
 8018908:	881b      	ldrh	r3, [r3, #0]
 801890a:	429a      	cmp	r2, r3
 801890c:	d275      	bcs.n	80189fa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801890e:	4b6c      	ldr	r3, [pc, #432]	; (8018ac0 <tcp_receive+0x88c>)
 8018910:	68db      	ldr	r3, [r3, #12]
 8018912:	899b      	ldrh	r3, [r3, #12]
 8018914:	b29b      	uxth	r3, r3
 8018916:	4618      	mov	r0, r3
 8018918:	f7fa feda 	bl	80136d0 <lwip_htons>
 801891c:	4603      	mov	r3, r0
 801891e:	b2db      	uxtb	r3, r3
 8018920:	f003 0301 	and.w	r3, r3, #1
 8018924:	2b00      	cmp	r3, #0
 8018926:	d01f      	beq.n	8018968 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018928:	4b65      	ldr	r3, [pc, #404]	; (8018ac0 <tcp_receive+0x88c>)
 801892a:	68db      	ldr	r3, [r3, #12]
 801892c:	899b      	ldrh	r3, [r3, #12]
 801892e:	b29b      	uxth	r3, r3
 8018930:	b21b      	sxth	r3, r3
 8018932:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018936:	b21c      	sxth	r4, r3
 8018938:	4b61      	ldr	r3, [pc, #388]	; (8018ac0 <tcp_receive+0x88c>)
 801893a:	68db      	ldr	r3, [r3, #12]
 801893c:	899b      	ldrh	r3, [r3, #12]
 801893e:	b29b      	uxth	r3, r3
 8018940:	4618      	mov	r0, r3
 8018942:	f7fa fec5 	bl	80136d0 <lwip_htons>
 8018946:	4603      	mov	r3, r0
 8018948:	b2db      	uxtb	r3, r3
 801894a:	b29b      	uxth	r3, r3
 801894c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018950:	b29b      	uxth	r3, r3
 8018952:	4618      	mov	r0, r3
 8018954:	f7fa febc 	bl	80136d0 <lwip_htons>
 8018958:	4603      	mov	r3, r0
 801895a:	b21b      	sxth	r3, r3
 801895c:	4323      	orrs	r3, r4
 801895e:	b21a      	sxth	r2, r3
 8018960:	4b57      	ldr	r3, [pc, #348]	; (8018ac0 <tcp_receive+0x88c>)
 8018962:	68db      	ldr	r3, [r3, #12]
 8018964:	b292      	uxth	r2, r2
 8018966:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801896c:	4b54      	ldr	r3, [pc, #336]	; (8018ac0 <tcp_receive+0x88c>)
 801896e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018970:	4b53      	ldr	r3, [pc, #332]	; (8018ac0 <tcp_receive+0x88c>)
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	899b      	ldrh	r3, [r3, #12]
 8018976:	b29b      	uxth	r3, r3
 8018978:	4618      	mov	r0, r3
 801897a:	f7fa fea9 	bl	80136d0 <lwip_htons>
 801897e:	4603      	mov	r3, r0
 8018980:	b2db      	uxtb	r3, r3
 8018982:	f003 0302 	and.w	r3, r3, #2
 8018986:	2b00      	cmp	r3, #0
 8018988:	d005      	beq.n	8018996 <tcp_receive+0x762>
            inseg.len -= 1;
 801898a:	4b4d      	ldr	r3, [pc, #308]	; (8018ac0 <tcp_receive+0x88c>)
 801898c:	891b      	ldrh	r3, [r3, #8]
 801898e:	3b01      	subs	r3, #1
 8018990:	b29a      	uxth	r2, r3
 8018992:	4b4b      	ldr	r3, [pc, #300]	; (8018ac0 <tcp_receive+0x88c>)
 8018994:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018996:	4b4a      	ldr	r3, [pc, #296]	; (8018ac0 <tcp_receive+0x88c>)
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	4a49      	ldr	r2, [pc, #292]	; (8018ac0 <tcp_receive+0x88c>)
 801899c:	8912      	ldrh	r2, [r2, #8]
 801899e:	4611      	mov	r1, r2
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7fc f9c5 	bl	8014d30 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80189a6:	4b46      	ldr	r3, [pc, #280]	; (8018ac0 <tcp_receive+0x88c>)
 80189a8:	891c      	ldrh	r4, [r3, #8]
 80189aa:	4b45      	ldr	r3, [pc, #276]	; (8018ac0 <tcp_receive+0x88c>)
 80189ac:	68db      	ldr	r3, [r3, #12]
 80189ae:	899b      	ldrh	r3, [r3, #12]
 80189b0:	b29b      	uxth	r3, r3
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7fa fe8c 	bl	80136d0 <lwip_htons>
 80189b8:	4603      	mov	r3, r0
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	f003 0303 	and.w	r3, r3, #3
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d001      	beq.n	80189c8 <tcp_receive+0x794>
 80189c4:	2301      	movs	r3, #1
 80189c6:	e000      	b.n	80189ca <tcp_receive+0x796>
 80189c8:	2300      	movs	r3, #0
 80189ca:	4423      	add	r3, r4
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	4b3d      	ldr	r3, [pc, #244]	; (8018ac4 <tcp_receive+0x890>)
 80189d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80189d2:	4b3c      	ldr	r3, [pc, #240]	; (8018ac4 <tcp_receive+0x890>)
 80189d4:	881b      	ldrh	r3, [r3, #0]
 80189d6:	461a      	mov	r2, r3
 80189d8:	4b38      	ldr	r3, [pc, #224]	; (8018abc <tcp_receive+0x888>)
 80189da:	681b      	ldr	r3, [r3, #0]
 80189dc:	441a      	add	r2, r3
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e2:	6879      	ldr	r1, [r7, #4]
 80189e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80189e6:	440b      	add	r3, r1
 80189e8:	429a      	cmp	r2, r3
 80189ea:	d006      	beq.n	80189fa <tcp_receive+0x7c6>
 80189ec:	4b36      	ldr	r3, [pc, #216]	; (8018ac8 <tcp_receive+0x894>)
 80189ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80189f2:	4936      	ldr	r1, [pc, #216]	; (8018acc <tcp_receive+0x898>)
 80189f4:	4836      	ldr	r0, [pc, #216]	; (8018ad0 <tcp_receive+0x89c>)
 80189f6:	f007 feb7 	bl	8020768 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	f000 80e7 	beq.w	8018bd2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018a04:	4b2e      	ldr	r3, [pc, #184]	; (8018ac0 <tcp_receive+0x88c>)
 8018a06:	68db      	ldr	r3, [r3, #12]
 8018a08:	899b      	ldrh	r3, [r3, #12]
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f7fa fe5f 	bl	80136d0 <lwip_htons>
 8018a12:	4603      	mov	r3, r0
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	f003 0301 	and.w	r3, r3, #1
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d010      	beq.n	8018a40 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018a1e:	e00a      	b.n	8018a36 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a24:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a2a:	681a      	ldr	r2, [r3, #0]
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018a30:	68f8      	ldr	r0, [r7, #12]
 8018a32:	f7fd fd92 	bl	801655a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d1f0      	bne.n	8018a20 <tcp_receive+0x7ec>
 8018a3e:	e0c8      	b.n	8018bd2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a44:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018a46:	e052      	b.n	8018aee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	899b      	ldrh	r3, [r3, #12]
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	4618      	mov	r0, r3
 8018a52:	f7fa fe3d 	bl	80136d0 <lwip_htons>
 8018a56:	4603      	mov	r3, r0
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	f003 0301 	and.w	r3, r3, #1
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d03d      	beq.n	8018ade <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018a62:	4b17      	ldr	r3, [pc, #92]	; (8018ac0 <tcp_receive+0x88c>)
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	899b      	ldrh	r3, [r3, #12]
 8018a68:	b29b      	uxth	r3, r3
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7fa fe30 	bl	80136d0 <lwip_htons>
 8018a70:	4603      	mov	r3, r0
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d130      	bne.n	8018ade <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018a7c:	4b10      	ldr	r3, [pc, #64]	; (8018ac0 <tcp_receive+0x88c>)
 8018a7e:	68db      	ldr	r3, [r3, #12]
 8018a80:	899b      	ldrh	r3, [r3, #12]
 8018a82:	b29c      	uxth	r4, r3
 8018a84:	2001      	movs	r0, #1
 8018a86:	f7fa fe23 	bl	80136d0 <lwip_htons>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	4b0c      	ldr	r3, [pc, #48]	; (8018ac0 <tcp_receive+0x88c>)
 8018a90:	68db      	ldr	r3, [r3, #12]
 8018a92:	4322      	orrs	r2, r4
 8018a94:	b292      	uxth	r2, r2
 8018a96:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018a98:	4b09      	ldr	r3, [pc, #36]	; (8018ac0 <tcp_receive+0x88c>)
 8018a9a:	891c      	ldrh	r4, [r3, #8]
 8018a9c:	4b08      	ldr	r3, [pc, #32]	; (8018ac0 <tcp_receive+0x88c>)
 8018a9e:	68db      	ldr	r3, [r3, #12]
 8018aa0:	899b      	ldrh	r3, [r3, #12]
 8018aa2:	b29b      	uxth	r3, r3
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	f7fa fe13 	bl	80136d0 <lwip_htons>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	b2db      	uxtb	r3, r3
 8018aae:	f003 0303 	and.w	r3, r3, #3
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d00e      	beq.n	8018ad4 <tcp_receive+0x8a0>
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	e00d      	b.n	8018ad6 <tcp_receive+0x8a2>
 8018aba:	bf00      	nop
 8018abc:	2400cb88 	.word	0x2400cb88
 8018ac0:	2400cb68 	.word	0x2400cb68
 8018ac4:	2400cb92 	.word	0x2400cb92
 8018ac8:	08022988 	.word	0x08022988
 8018acc:	08022d30 	.word	0x08022d30
 8018ad0:	080229d4 	.word	0x080229d4
 8018ad4:	2300      	movs	r3, #0
 8018ad6:	4423      	add	r3, r4
 8018ad8:	b29a      	uxth	r2, r3
 8018ada:	4b98      	ldr	r3, [pc, #608]	; (8018d3c <tcp_receive+0xb08>)
 8018adc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ae0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018ae8:	6938      	ldr	r0, [r7, #16]
 8018aea:	f7fd fd36 	bl	801655a <tcp_seg_free>
            while (next &&
 8018aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d00e      	beq.n	8018b12 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018af4:	4b91      	ldr	r3, [pc, #580]	; (8018d3c <tcp_receive+0xb08>)
 8018af6:	881b      	ldrh	r3, [r3, #0]
 8018af8:	461a      	mov	r2, r3
 8018afa:	4b91      	ldr	r3, [pc, #580]	; (8018d40 <tcp_receive+0xb0c>)
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	441a      	add	r2, r3
 8018b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b02:	68db      	ldr	r3, [r3, #12]
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018b08:	8909      	ldrh	r1, [r1, #8]
 8018b0a:	440b      	add	r3, r1
 8018b0c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	da9a      	bge.n	8018a48 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d059      	beq.n	8018bcc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8018b18:	4b88      	ldr	r3, [pc, #544]	; (8018d3c <tcp_receive+0xb08>)
 8018b1a:	881b      	ldrh	r3, [r3, #0]
 8018b1c:	461a      	mov	r2, r3
 8018b1e:	4b88      	ldr	r3, [pc, #544]	; (8018d40 <tcp_receive+0xb0c>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	441a      	add	r2, r3
 8018b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	685b      	ldr	r3, [r3, #4]
 8018b2a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	dd4d      	ble.n	8018bcc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	685b      	ldr	r3, [r3, #4]
 8018b36:	b29a      	uxth	r2, r3
 8018b38:	4b81      	ldr	r3, [pc, #516]	; (8018d40 <tcp_receive+0xb0c>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	1ad3      	subs	r3, r2, r3
 8018b40:	b29a      	uxth	r2, r3
 8018b42:	4b80      	ldr	r3, [pc, #512]	; (8018d44 <tcp_receive+0xb10>)
 8018b44:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018b46:	4b7f      	ldr	r3, [pc, #508]	; (8018d44 <tcp_receive+0xb10>)
 8018b48:	68db      	ldr	r3, [r3, #12]
 8018b4a:	899b      	ldrh	r3, [r3, #12]
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7fa fdbe 	bl	80136d0 <lwip_htons>
 8018b54:	4603      	mov	r3, r0
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	f003 0302 	and.w	r3, r3, #2
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d005      	beq.n	8018b6c <tcp_receive+0x938>
                inseg.len -= 1;
 8018b60:	4b78      	ldr	r3, [pc, #480]	; (8018d44 <tcp_receive+0xb10>)
 8018b62:	891b      	ldrh	r3, [r3, #8]
 8018b64:	3b01      	subs	r3, #1
 8018b66:	b29a      	uxth	r2, r3
 8018b68:	4b76      	ldr	r3, [pc, #472]	; (8018d44 <tcp_receive+0xb10>)
 8018b6a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018b6c:	4b75      	ldr	r3, [pc, #468]	; (8018d44 <tcp_receive+0xb10>)
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	4a74      	ldr	r2, [pc, #464]	; (8018d44 <tcp_receive+0xb10>)
 8018b72:	8912      	ldrh	r2, [r2, #8]
 8018b74:	4611      	mov	r1, r2
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7fc f8da 	bl	8014d30 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018b7c:	4b71      	ldr	r3, [pc, #452]	; (8018d44 <tcp_receive+0xb10>)
 8018b7e:	891c      	ldrh	r4, [r3, #8]
 8018b80:	4b70      	ldr	r3, [pc, #448]	; (8018d44 <tcp_receive+0xb10>)
 8018b82:	68db      	ldr	r3, [r3, #12]
 8018b84:	899b      	ldrh	r3, [r3, #12]
 8018b86:	b29b      	uxth	r3, r3
 8018b88:	4618      	mov	r0, r3
 8018b8a:	f7fa fda1 	bl	80136d0 <lwip_htons>
 8018b8e:	4603      	mov	r3, r0
 8018b90:	b2db      	uxtb	r3, r3
 8018b92:	f003 0303 	and.w	r3, r3, #3
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d001      	beq.n	8018b9e <tcp_receive+0x96a>
 8018b9a:	2301      	movs	r3, #1
 8018b9c:	e000      	b.n	8018ba0 <tcp_receive+0x96c>
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	4423      	add	r3, r4
 8018ba2:	b29a      	uxth	r2, r3
 8018ba4:	4b65      	ldr	r3, [pc, #404]	; (8018d3c <tcp_receive+0xb08>)
 8018ba6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018ba8:	4b64      	ldr	r3, [pc, #400]	; (8018d3c <tcp_receive+0xb08>)
 8018baa:	881b      	ldrh	r3, [r3, #0]
 8018bac:	461a      	mov	r2, r3
 8018bae:	4b64      	ldr	r3, [pc, #400]	; (8018d40 <tcp_receive+0xb0c>)
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	441a      	add	r2, r3
 8018bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018bb6:	68db      	ldr	r3, [r3, #12]
 8018bb8:	685b      	ldr	r3, [r3, #4]
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d006      	beq.n	8018bcc <tcp_receive+0x998>
 8018bbe:	4b62      	ldr	r3, [pc, #392]	; (8018d48 <tcp_receive+0xb14>)
 8018bc0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018bc4:	4961      	ldr	r1, [pc, #388]	; (8018d4c <tcp_receive+0xb18>)
 8018bc6:	4862      	ldr	r0, [pc, #392]	; (8018d50 <tcp_receive+0xb1c>)
 8018bc8:	f007 fdce 	bl	8020768 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018bd0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018bd2:	4b5a      	ldr	r3, [pc, #360]	; (8018d3c <tcp_receive+0xb08>)
 8018bd4:	881b      	ldrh	r3, [r3, #0]
 8018bd6:	461a      	mov	r2, r3
 8018bd8:	4b59      	ldr	r3, [pc, #356]	; (8018d40 <tcp_receive+0xb0c>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	441a      	add	r2, r3
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018be6:	4b55      	ldr	r3, [pc, #340]	; (8018d3c <tcp_receive+0xb08>)
 8018be8:	881b      	ldrh	r3, [r3, #0]
 8018bea:	429a      	cmp	r2, r3
 8018bec:	d206      	bcs.n	8018bfc <tcp_receive+0x9c8>
 8018bee:	4b56      	ldr	r3, [pc, #344]	; (8018d48 <tcp_receive+0xb14>)
 8018bf0:	f240 6207 	movw	r2, #1543	; 0x607
 8018bf4:	4957      	ldr	r1, [pc, #348]	; (8018d54 <tcp_receive+0xb20>)
 8018bf6:	4856      	ldr	r0, [pc, #344]	; (8018d50 <tcp_receive+0xb1c>)
 8018bf8:	f007 fdb6 	bl	8020768 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018c00:	4b4e      	ldr	r3, [pc, #312]	; (8018d3c <tcp_receive+0xb08>)
 8018c02:	881b      	ldrh	r3, [r3, #0]
 8018c04:	1ad3      	subs	r3, r2, r3
 8018c06:	b29a      	uxth	r2, r3
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018c0c:	6878      	ldr	r0, [r7, #4]
 8018c0e:	f7fc ffc5 	bl	8015b9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018c12:	4b4c      	ldr	r3, [pc, #304]	; (8018d44 <tcp_receive+0xb10>)
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	891b      	ldrh	r3, [r3, #8]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d006      	beq.n	8018c2a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8018c1c:	4b49      	ldr	r3, [pc, #292]	; (8018d44 <tcp_receive+0xb10>)
 8018c1e:	685b      	ldr	r3, [r3, #4]
 8018c20:	4a4d      	ldr	r2, [pc, #308]	; (8018d58 <tcp_receive+0xb24>)
 8018c22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018c24:	4b47      	ldr	r3, [pc, #284]	; (8018d44 <tcp_receive+0xb10>)
 8018c26:	2200      	movs	r2, #0
 8018c28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c2a:	4b46      	ldr	r3, [pc, #280]	; (8018d44 <tcp_receive+0xb10>)
 8018c2c:	68db      	ldr	r3, [r3, #12]
 8018c2e:	899b      	ldrh	r3, [r3, #12]
 8018c30:	b29b      	uxth	r3, r3
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7fa fd4c 	bl	80136d0 <lwip_htons>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	b2db      	uxtb	r3, r3
 8018c3c:	f003 0301 	and.w	r3, r3, #1
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	f000 80b8 	beq.w	8018db6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018c46:	4b45      	ldr	r3, [pc, #276]	; (8018d5c <tcp_receive+0xb28>)
 8018c48:	781b      	ldrb	r3, [r3, #0]
 8018c4a:	f043 0320 	orr.w	r3, r3, #32
 8018c4e:	b2da      	uxtb	r2, r3
 8018c50:	4b42      	ldr	r3, [pc, #264]	; (8018d5c <tcp_receive+0xb28>)
 8018c52:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018c54:	e0af      	b.n	8018db6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c5a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c60:	68db      	ldr	r3, [r3, #12]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	4a36      	ldr	r2, [pc, #216]	; (8018d40 <tcp_receive+0xb0c>)
 8018c66:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018c68:	68bb      	ldr	r3, [r7, #8]
 8018c6a:	891b      	ldrh	r3, [r3, #8]
 8018c6c:	461c      	mov	r4, r3
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	68db      	ldr	r3, [r3, #12]
 8018c72:	899b      	ldrh	r3, [r3, #12]
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	4618      	mov	r0, r3
 8018c78:	f7fa fd2a 	bl	80136d0 <lwip_htons>
 8018c7c:	4603      	mov	r3, r0
 8018c7e:	b2db      	uxtb	r3, r3
 8018c80:	f003 0303 	and.w	r3, r3, #3
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d001      	beq.n	8018c8c <tcp_receive+0xa58>
 8018c88:	2301      	movs	r3, #1
 8018c8a:	e000      	b.n	8018c8e <tcp_receive+0xa5a>
 8018c8c:	2300      	movs	r3, #0
 8018c8e:	191a      	adds	r2, r3, r4
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c94:	441a      	add	r2, r3
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c9e:	461c      	mov	r4, r3
 8018ca0:	68bb      	ldr	r3, [r7, #8]
 8018ca2:	891b      	ldrh	r3, [r3, #8]
 8018ca4:	461d      	mov	r5, r3
 8018ca6:	68bb      	ldr	r3, [r7, #8]
 8018ca8:	68db      	ldr	r3, [r3, #12]
 8018caa:	899b      	ldrh	r3, [r3, #12]
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7fa fd0e 	bl	80136d0 <lwip_htons>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	f003 0303 	and.w	r3, r3, #3
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d001      	beq.n	8018cc4 <tcp_receive+0xa90>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	e000      	b.n	8018cc6 <tcp_receive+0xa92>
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	442b      	add	r3, r5
 8018cc8:	429c      	cmp	r4, r3
 8018cca:	d206      	bcs.n	8018cda <tcp_receive+0xaa6>
 8018ccc:	4b1e      	ldr	r3, [pc, #120]	; (8018d48 <tcp_receive+0xb14>)
 8018cce:	f240 622b 	movw	r2, #1579	; 0x62b
 8018cd2:	4923      	ldr	r1, [pc, #140]	; (8018d60 <tcp_receive+0xb2c>)
 8018cd4:	481e      	ldr	r0, [pc, #120]	; (8018d50 <tcp_receive+0xb1c>)
 8018cd6:	f007 fd47 	bl	8020768 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	891b      	ldrh	r3, [r3, #8]
 8018cde:	461c      	mov	r4, r3
 8018ce0:	68bb      	ldr	r3, [r7, #8]
 8018ce2:	68db      	ldr	r3, [r3, #12]
 8018ce4:	899b      	ldrh	r3, [r3, #12]
 8018ce6:	b29b      	uxth	r3, r3
 8018ce8:	4618      	mov	r0, r3
 8018cea:	f7fa fcf1 	bl	80136d0 <lwip_htons>
 8018cee:	4603      	mov	r3, r0
 8018cf0:	b2db      	uxtb	r3, r3
 8018cf2:	f003 0303 	and.w	r3, r3, #3
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d001      	beq.n	8018cfe <tcp_receive+0xaca>
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	e000      	b.n	8018d00 <tcp_receive+0xacc>
 8018cfe:	2300      	movs	r3, #0
 8018d00:	1919      	adds	r1, r3, r4
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018d06:	b28b      	uxth	r3, r1
 8018d08:	1ad3      	subs	r3, r2, r3
 8018d0a:	b29a      	uxth	r2, r3
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018d10:	6878      	ldr	r0, [r7, #4]
 8018d12:	f7fc ff43 	bl	8015b9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018d16:	68bb      	ldr	r3, [r7, #8]
 8018d18:	685b      	ldr	r3, [r3, #4]
 8018d1a:	891b      	ldrh	r3, [r3, #8]
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d028      	beq.n	8018d72 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018d20:	4b0d      	ldr	r3, [pc, #52]	; (8018d58 <tcp_receive+0xb24>)
 8018d22:	681b      	ldr	r3, [r3, #0]
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	d01d      	beq.n	8018d64 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8018d28:	4b0b      	ldr	r3, [pc, #44]	; (8018d58 <tcp_receive+0xb24>)
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	4619      	mov	r1, r3
 8018d32:	4610      	mov	r0, r2
 8018d34:	f7fc fa50 	bl	80151d8 <pbuf_cat>
 8018d38:	e018      	b.n	8018d6c <tcp_receive+0xb38>
 8018d3a:	bf00      	nop
 8018d3c:	2400cb92 	.word	0x2400cb92
 8018d40:	2400cb88 	.word	0x2400cb88
 8018d44:	2400cb68 	.word	0x2400cb68
 8018d48:	08022988 	.word	0x08022988
 8018d4c:	08022d68 	.word	0x08022d68
 8018d50:	080229d4 	.word	0x080229d4
 8018d54:	08022da4 	.word	0x08022da4
 8018d58:	2400cb98 	.word	0x2400cb98
 8018d5c:	2400cb95 	.word	0x2400cb95
 8018d60:	08022dc4 	.word	0x08022dc4
            } else {
              recv_data = cseg->p;
 8018d64:	68bb      	ldr	r3, [r7, #8]
 8018d66:	685b      	ldr	r3, [r3, #4]
 8018d68:	4a70      	ldr	r2, [pc, #448]	; (8018f2c <tcp_receive+0xcf8>)
 8018d6a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	2200      	movs	r2, #0
 8018d70:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018d72:	68bb      	ldr	r3, [r7, #8]
 8018d74:	68db      	ldr	r3, [r3, #12]
 8018d76:	899b      	ldrh	r3, [r3, #12]
 8018d78:	b29b      	uxth	r3, r3
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7fa fca8 	bl	80136d0 <lwip_htons>
 8018d80:	4603      	mov	r3, r0
 8018d82:	b2db      	uxtb	r3, r3
 8018d84:	f003 0301 	and.w	r3, r3, #1
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d00d      	beq.n	8018da8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018d8c:	4b68      	ldr	r3, [pc, #416]	; (8018f30 <tcp_receive+0xcfc>)
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	f043 0320 	orr.w	r3, r3, #32
 8018d94:	b2da      	uxtb	r2, r3
 8018d96:	4b66      	ldr	r3, [pc, #408]	; (8018f30 <tcp_receive+0xcfc>)
 8018d98:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	7d1b      	ldrb	r3, [r3, #20]
 8018d9e:	2b04      	cmp	r3, #4
 8018da0:	d102      	bne.n	8018da8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	2207      	movs	r2, #7
 8018da6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	681a      	ldr	r2, [r3, #0]
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018db0:	68b8      	ldr	r0, [r7, #8]
 8018db2:	f7fd fbd2 	bl	801655a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d008      	beq.n	8018dd0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018dc2:	68db      	ldr	r3, [r3, #12]
 8018dc4:	685a      	ldr	r2, [r3, #4]
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	f43f af43 	beq.w	8018c56 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	8b5b      	ldrh	r3, [r3, #26]
 8018dd4:	f003 0301 	and.w	r3, r3, #1
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d00e      	beq.n	8018dfa <tcp_receive+0xbc6>
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	8b5b      	ldrh	r3, [r3, #26]
 8018de0:	f023 0301 	bic.w	r3, r3, #1
 8018de4:	b29a      	uxth	r2, r3
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	835a      	strh	r2, [r3, #26]
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	8b5b      	ldrh	r3, [r3, #26]
 8018dee:	f043 0302 	orr.w	r3, r3, #2
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018df8:	e188      	b.n	801910c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	8b5b      	ldrh	r3, [r3, #26]
 8018dfe:	f043 0301 	orr.w	r3, r3, #1
 8018e02:	b29a      	uxth	r2, r3
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018e08:	e180      	b.n	801910c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d106      	bne.n	8018e20 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018e12:	4848      	ldr	r0, [pc, #288]	; (8018f34 <tcp_receive+0xd00>)
 8018e14:	f7fd fbba 	bl	801658c <tcp_seg_copy>
 8018e18:	4602      	mov	r2, r0
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	675a      	str	r2, [r3, #116]	; 0x74
 8018e1e:	e16d      	b.n	80190fc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018e20:	2300      	movs	r3, #0
 8018e22:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018e24:	687b      	ldr	r3, [r7, #4]
 8018e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e28:	63bb      	str	r3, [r7, #56]	; 0x38
 8018e2a:	e157      	b.n	80190dc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8018e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	685a      	ldr	r2, [r3, #4]
 8018e32:	4b41      	ldr	r3, [pc, #260]	; (8018f38 <tcp_receive+0xd04>)
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	429a      	cmp	r2, r3
 8018e38:	d11d      	bne.n	8018e76 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8018e3a:	4b3e      	ldr	r3, [pc, #248]	; (8018f34 <tcp_receive+0xd00>)
 8018e3c:	891a      	ldrh	r2, [r3, #8]
 8018e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e40:	891b      	ldrh	r3, [r3, #8]
 8018e42:	429a      	cmp	r2, r3
 8018e44:	f240 814f 	bls.w	80190e6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018e48:	483a      	ldr	r0, [pc, #232]	; (8018f34 <tcp_receive+0xd00>)
 8018e4a:	f7fd fb9f 	bl	801658c <tcp_seg_copy>
 8018e4e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	f000 8149 	beq.w	80190ea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8018e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d003      	beq.n	8018e66 <tcp_receive+0xc32>
                    prev->next = cseg;
 8018e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e60:	697a      	ldr	r2, [r7, #20]
 8018e62:	601a      	str	r2, [r3, #0]
 8018e64:	e002      	b.n	8018e6c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	697a      	ldr	r2, [r7, #20]
 8018e6a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018e6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018e6e:	6978      	ldr	r0, [r7, #20]
 8018e70:	f7ff f8dc 	bl	801802c <tcp_oos_insert_segment>
                }
                break;
 8018e74:	e139      	b.n	80190ea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d117      	bne.n	8018eac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018e7c:	4b2e      	ldr	r3, [pc, #184]	; (8018f38 <tcp_receive+0xd04>)
 8018e7e:	681a      	ldr	r2, [r3, #0]
 8018e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018e82:	68db      	ldr	r3, [r3, #12]
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	1ad3      	subs	r3, r2, r3
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	da57      	bge.n	8018f3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018e8c:	4829      	ldr	r0, [pc, #164]	; (8018f34 <tcp_receive+0xd00>)
 8018e8e:	f7fd fb7d 	bl	801658c <tcp_seg_copy>
 8018e92:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018e94:	69bb      	ldr	r3, [r7, #24]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	f000 8129 	beq.w	80190ee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	69ba      	ldr	r2, [r7, #24]
 8018ea0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018ea2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018ea4:	69b8      	ldr	r0, [r7, #24]
 8018ea6:	f7ff f8c1 	bl	801802c <tcp_oos_insert_segment>
                  }
                  break;
 8018eaa:	e120      	b.n	80190ee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8018eac:	4b22      	ldr	r3, [pc, #136]	; (8018f38 <tcp_receive+0xd04>)
 8018eae:	681a      	ldr	r2, [r3, #0]
 8018eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018eb2:	68db      	ldr	r3, [r3, #12]
 8018eb4:	685b      	ldr	r3, [r3, #4]
 8018eb6:	1ad3      	subs	r3, r2, r3
 8018eb8:	3b01      	subs	r3, #1
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	db3e      	blt.n	8018f3c <tcp_receive+0xd08>
 8018ebe:	4b1e      	ldr	r3, [pc, #120]	; (8018f38 <tcp_receive+0xd04>)
 8018ec0:	681a      	ldr	r2, [r3, #0]
 8018ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018ec4:	68db      	ldr	r3, [r3, #12]
 8018ec6:	685b      	ldr	r3, [r3, #4]
 8018ec8:	1ad3      	subs	r3, r2, r3
 8018eca:	3301      	adds	r3, #1
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	dc35      	bgt.n	8018f3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018ed0:	4818      	ldr	r0, [pc, #96]	; (8018f34 <tcp_receive+0xd00>)
 8018ed2:	f7fd fb5b 	bl	801658c <tcp_seg_copy>
 8018ed6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018ed8:	69fb      	ldr	r3, [r7, #28]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	f000 8109 	beq.w	80190f2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ee2:	68db      	ldr	r3, [r3, #12]
 8018ee4:	685b      	ldr	r3, [r3, #4]
 8018ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018ee8:	8912      	ldrh	r2, [r2, #8]
 8018eea:	441a      	add	r2, r3
 8018eec:	4b12      	ldr	r3, [pc, #72]	; (8018f38 <tcp_receive+0xd04>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	1ad3      	subs	r3, r2, r3
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	dd12      	ble.n	8018f1c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018ef6:	4b10      	ldr	r3, [pc, #64]	; (8018f38 <tcp_receive+0xd04>)
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	b29a      	uxth	r2, r3
 8018efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018efe:	68db      	ldr	r3, [r3, #12]
 8018f00:	685b      	ldr	r3, [r3, #4]
 8018f02:	b29b      	uxth	r3, r3
 8018f04:	1ad3      	subs	r3, r2, r3
 8018f06:	b29a      	uxth	r2, r3
 8018f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f0e:	685a      	ldr	r2, [r3, #4]
 8018f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f12:	891b      	ldrh	r3, [r3, #8]
 8018f14:	4619      	mov	r1, r3
 8018f16:	4610      	mov	r0, r2
 8018f18:	f7fb ff0a 	bl	8014d30 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f1e:	69fa      	ldr	r2, [r7, #28]
 8018f20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018f22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018f24:	69f8      	ldr	r0, [r7, #28]
 8018f26:	f7ff f881 	bl	801802c <tcp_oos_insert_segment>
                  }
                  break;
 8018f2a:	e0e2      	b.n	80190f2 <tcp_receive+0xebe>
 8018f2c:	2400cb98 	.word	0x2400cb98
 8018f30:	2400cb95 	.word	0x2400cb95
 8018f34:	2400cb68 	.word	0x2400cb68
 8018f38:	2400cb88 	.word	0x2400cb88
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f3e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	f040 80c6 	bne.w	80190d6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8018f4a:	4b80      	ldr	r3, [pc, #512]	; (801914c <tcp_receive+0xf18>)
 8018f4c:	681a      	ldr	r2, [r3, #0]
 8018f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f50:	68db      	ldr	r3, [r3, #12]
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	f340 80bd 	ble.w	80190d6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f5e:	68db      	ldr	r3, [r3, #12]
 8018f60:	899b      	ldrh	r3, [r3, #12]
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7fa fbb3 	bl	80136d0 <lwip_htons>
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	f003 0301 	and.w	r3, r3, #1
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	f040 80bf 	bne.w	80190f6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018f78:	4875      	ldr	r0, [pc, #468]	; (8019150 <tcp_receive+0xf1c>)
 8018f7a:	f7fd fb07 	bl	801658c <tcp_seg_copy>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	f000 80b6 	beq.w	80190fa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8018f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018f90:	68db      	ldr	r3, [r3, #12]
 8018f92:	685b      	ldr	r3, [r3, #4]
 8018f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018f96:	8912      	ldrh	r2, [r2, #8]
 8018f98:	441a      	add	r2, r3
 8018f9a:	4b6c      	ldr	r3, [pc, #432]	; (801914c <tcp_receive+0xf18>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	1ad3      	subs	r3, r2, r3
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	dd12      	ble.n	8018fca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018fa4:	4b69      	ldr	r3, [pc, #420]	; (801914c <tcp_receive+0xf18>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	b29a      	uxth	r2, r3
 8018faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fac:	68db      	ldr	r3, [r3, #12]
 8018fae:	685b      	ldr	r3, [r3, #4]
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	1ad3      	subs	r3, r2, r3
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fb8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8018fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fbc:	685a      	ldr	r2, [r3, #4]
 8018fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fc0:	891b      	ldrh	r3, [r3, #8]
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	f7fb feb3 	bl	8014d30 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8018fca:	4b62      	ldr	r3, [pc, #392]	; (8019154 <tcp_receive+0xf20>)
 8018fcc:	881b      	ldrh	r3, [r3, #0]
 8018fce:	461a      	mov	r2, r3
 8018fd0:	4b5e      	ldr	r3, [pc, #376]	; (801914c <tcp_receive+0xf18>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	441a      	add	r2, r3
 8018fd6:	687b      	ldr	r3, [r7, #4]
 8018fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fda:	6879      	ldr	r1, [r7, #4]
 8018fdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018fde:	440b      	add	r3, r1
 8018fe0:	1ad3      	subs	r3, r2, r3
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	f340 8089 	ble.w	80190fa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	68db      	ldr	r3, [r3, #12]
 8018fee:	899b      	ldrh	r3, [r3, #12]
 8018ff0:	b29b      	uxth	r3, r3
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fa fb6c 	bl	80136d0 <lwip_htons>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	b2db      	uxtb	r3, r3
 8018ffc:	f003 0301 	and.w	r3, r3, #1
 8019000:	2b00      	cmp	r3, #0
 8019002:	d022      	beq.n	801904a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	68db      	ldr	r3, [r3, #12]
 801900a:	899b      	ldrh	r3, [r3, #12]
 801900c:	b29b      	uxth	r3, r3
 801900e:	b21b      	sxth	r3, r3
 8019010:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019014:	b21c      	sxth	r4, r3
 8019016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	899b      	ldrh	r3, [r3, #12]
 801901e:	b29b      	uxth	r3, r3
 8019020:	4618      	mov	r0, r3
 8019022:	f7fa fb55 	bl	80136d0 <lwip_htons>
 8019026:	4603      	mov	r3, r0
 8019028:	b2db      	uxtb	r3, r3
 801902a:	b29b      	uxth	r3, r3
 801902c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019030:	b29b      	uxth	r3, r3
 8019032:	4618      	mov	r0, r3
 8019034:	f7fa fb4c 	bl	80136d0 <lwip_htons>
 8019038:	4603      	mov	r3, r0
 801903a:	b21b      	sxth	r3, r3
 801903c:	4323      	orrs	r3, r4
 801903e:	b21a      	sxth	r2, r3
 8019040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	68db      	ldr	r3, [r3, #12]
 8019046:	b292      	uxth	r2, r2
 8019048:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904e:	b29a      	uxth	r2, r3
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019054:	4413      	add	r3, r2
 8019056:	b299      	uxth	r1, r3
 8019058:	4b3c      	ldr	r3, [pc, #240]	; (801914c <tcp_receive+0xf18>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	b29a      	uxth	r2, r3
 801905e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	1a8a      	subs	r2, r1, r2
 8019064:	b292      	uxth	r2, r2
 8019066:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	685a      	ldr	r2, [r3, #4]
 801906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	891b      	ldrh	r3, [r3, #8]
 8019074:	4619      	mov	r1, r3
 8019076:	4610      	mov	r0, r2
 8019078:	f7fb fe5a 	bl	8014d30 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	891c      	ldrh	r4, [r3, #8]
 8019082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	68db      	ldr	r3, [r3, #12]
 8019088:	899b      	ldrh	r3, [r3, #12]
 801908a:	b29b      	uxth	r3, r3
 801908c:	4618      	mov	r0, r3
 801908e:	f7fa fb1f 	bl	80136d0 <lwip_htons>
 8019092:	4603      	mov	r3, r0
 8019094:	b2db      	uxtb	r3, r3
 8019096:	f003 0303 	and.w	r3, r3, #3
 801909a:	2b00      	cmp	r3, #0
 801909c:	d001      	beq.n	80190a2 <tcp_receive+0xe6e>
 801909e:	2301      	movs	r3, #1
 80190a0:	e000      	b.n	80190a4 <tcp_receive+0xe70>
 80190a2:	2300      	movs	r3, #0
 80190a4:	4423      	add	r3, r4
 80190a6:	b29a      	uxth	r2, r3
 80190a8:	4b2a      	ldr	r3, [pc, #168]	; (8019154 <tcp_receive+0xf20>)
 80190aa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80190ac:	4b29      	ldr	r3, [pc, #164]	; (8019154 <tcp_receive+0xf20>)
 80190ae:	881b      	ldrh	r3, [r3, #0]
 80190b0:	461a      	mov	r2, r3
 80190b2:	4b26      	ldr	r3, [pc, #152]	; (801914c <tcp_receive+0xf18>)
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	441a      	add	r2, r3
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190bc:	6879      	ldr	r1, [r7, #4]
 80190be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80190c0:	440b      	add	r3, r1
 80190c2:	429a      	cmp	r2, r3
 80190c4:	d019      	beq.n	80190fa <tcp_receive+0xec6>
 80190c6:	4b24      	ldr	r3, [pc, #144]	; (8019158 <tcp_receive+0xf24>)
 80190c8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80190cc:	4923      	ldr	r1, [pc, #140]	; (801915c <tcp_receive+0xf28>)
 80190ce:	4824      	ldr	r0, [pc, #144]	; (8019160 <tcp_receive+0xf2c>)
 80190d0:	f007 fb4a 	bl	8020768 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80190d4:	e011      	b.n	80190fa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80190d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	63bb      	str	r3, [r7, #56]	; 0x38
 80190dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80190de:	2b00      	cmp	r3, #0
 80190e0:	f47f aea4 	bne.w	8018e2c <tcp_receive+0xbf8>
 80190e4:	e00a      	b.n	80190fc <tcp_receive+0xec8>
                break;
 80190e6:	bf00      	nop
 80190e8:	e008      	b.n	80190fc <tcp_receive+0xec8>
                break;
 80190ea:	bf00      	nop
 80190ec:	e006      	b.n	80190fc <tcp_receive+0xec8>
                  break;
 80190ee:	bf00      	nop
 80190f0:	e004      	b.n	80190fc <tcp_receive+0xec8>
                  break;
 80190f2:	bf00      	nop
 80190f4:	e002      	b.n	80190fc <tcp_receive+0xec8>
                  break;
 80190f6:	bf00      	nop
 80190f8:	e000      	b.n	80190fc <tcp_receive+0xec8>
                break;
 80190fa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80190fc:	6878      	ldr	r0, [r7, #4]
 80190fe:	f001 fa33 	bl	801a568 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8019102:	e003      	b.n	801910c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8019104:	6878      	ldr	r0, [r7, #4]
 8019106:	f001 fa2f 	bl	801a568 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801910a:	e01a      	b.n	8019142 <tcp_receive+0xf0e>
 801910c:	e019      	b.n	8019142 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801910e:	4b0f      	ldr	r3, [pc, #60]	; (801914c <tcp_receive+0xf18>)
 8019110:	681a      	ldr	r2, [r3, #0]
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019116:	1ad3      	subs	r3, r2, r3
 8019118:	2b00      	cmp	r3, #0
 801911a:	db0a      	blt.n	8019132 <tcp_receive+0xefe>
 801911c:	4b0b      	ldr	r3, [pc, #44]	; (801914c <tcp_receive+0xf18>)
 801911e:	681a      	ldr	r2, [r3, #0]
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019128:	440b      	add	r3, r1
 801912a:	1ad3      	subs	r3, r2, r3
 801912c:	3301      	adds	r3, #1
 801912e:	2b00      	cmp	r3, #0
 8019130:	dd07      	ble.n	8019142 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	8b5b      	ldrh	r3, [r3, #26]
 8019136:	f043 0302 	orr.w	r3, r3, #2
 801913a:	b29a      	uxth	r2, r3
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019140:	e7ff      	b.n	8019142 <tcp_receive+0xf0e>
 8019142:	bf00      	nop
 8019144:	3750      	adds	r7, #80	; 0x50
 8019146:	46bd      	mov	sp, r7
 8019148:	bdb0      	pop	{r4, r5, r7, pc}
 801914a:	bf00      	nop
 801914c:	2400cb88 	.word	0x2400cb88
 8019150:	2400cb68 	.word	0x2400cb68
 8019154:	2400cb92 	.word	0x2400cb92
 8019158:	08022988 	.word	0x08022988
 801915c:	08022d30 	.word	0x08022d30
 8019160:	080229d4 	.word	0x080229d4

08019164 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801916a:	4b15      	ldr	r3, [pc, #84]	; (80191c0 <tcp_get_next_optbyte+0x5c>)
 801916c:	881b      	ldrh	r3, [r3, #0]
 801916e:	1c5a      	adds	r2, r3, #1
 8019170:	b291      	uxth	r1, r2
 8019172:	4a13      	ldr	r2, [pc, #76]	; (80191c0 <tcp_get_next_optbyte+0x5c>)
 8019174:	8011      	strh	r1, [r2, #0]
 8019176:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019178:	4b12      	ldr	r3, [pc, #72]	; (80191c4 <tcp_get_next_optbyte+0x60>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d004      	beq.n	801918a <tcp_get_next_optbyte+0x26>
 8019180:	4b11      	ldr	r3, [pc, #68]	; (80191c8 <tcp_get_next_optbyte+0x64>)
 8019182:	881b      	ldrh	r3, [r3, #0]
 8019184:	88fa      	ldrh	r2, [r7, #6]
 8019186:	429a      	cmp	r2, r3
 8019188:	d208      	bcs.n	801919c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801918a:	4b10      	ldr	r3, [pc, #64]	; (80191cc <tcp_get_next_optbyte+0x68>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	3314      	adds	r3, #20
 8019190:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019192:	88fb      	ldrh	r3, [r7, #6]
 8019194:	683a      	ldr	r2, [r7, #0]
 8019196:	4413      	add	r3, r2
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	e00b      	b.n	80191b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801919c:	88fb      	ldrh	r3, [r7, #6]
 801919e:	b2da      	uxtb	r2, r3
 80191a0:	4b09      	ldr	r3, [pc, #36]	; (80191c8 <tcp_get_next_optbyte+0x64>)
 80191a2:	881b      	ldrh	r3, [r3, #0]
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	1ad3      	subs	r3, r2, r3
 80191a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80191aa:	4b06      	ldr	r3, [pc, #24]	; (80191c4 <tcp_get_next_optbyte+0x60>)
 80191ac:	681a      	ldr	r2, [r3, #0]
 80191ae:	797b      	ldrb	r3, [r7, #5]
 80191b0:	4413      	add	r3, r2
 80191b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	370c      	adds	r7, #12
 80191b8:	46bd      	mov	sp, r7
 80191ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191be:	4770      	bx	lr
 80191c0:	2400cb84 	.word	0x2400cb84
 80191c4:	2400cb80 	.word	0x2400cb80
 80191c8:	2400cb7e 	.word	0x2400cb7e
 80191cc:	2400cb78 	.word	0x2400cb78

080191d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b084      	sub	sp, #16
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d106      	bne.n	80191ec <tcp_parseopt+0x1c>
 80191de:	4b32      	ldr	r3, [pc, #200]	; (80192a8 <tcp_parseopt+0xd8>)
 80191e0:	f240 727d 	movw	r2, #1917	; 0x77d
 80191e4:	4931      	ldr	r1, [pc, #196]	; (80192ac <tcp_parseopt+0xdc>)
 80191e6:	4832      	ldr	r0, [pc, #200]	; (80192b0 <tcp_parseopt+0xe0>)
 80191e8:	f007 fabe 	bl	8020768 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80191ec:	4b31      	ldr	r3, [pc, #196]	; (80192b4 <tcp_parseopt+0xe4>)
 80191ee:	881b      	ldrh	r3, [r3, #0]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	d055      	beq.n	80192a0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80191f4:	4b30      	ldr	r3, [pc, #192]	; (80192b8 <tcp_parseopt+0xe8>)
 80191f6:	2200      	movs	r2, #0
 80191f8:	801a      	strh	r2, [r3, #0]
 80191fa:	e045      	b.n	8019288 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80191fc:	f7ff ffb2 	bl	8019164 <tcp_get_next_optbyte>
 8019200:	4603      	mov	r3, r0
 8019202:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019204:	7bfb      	ldrb	r3, [r7, #15]
 8019206:	2b02      	cmp	r3, #2
 8019208:	d006      	beq.n	8019218 <tcp_parseopt+0x48>
 801920a:	2b02      	cmp	r3, #2
 801920c:	dc2b      	bgt.n	8019266 <tcp_parseopt+0x96>
 801920e:	2b00      	cmp	r3, #0
 8019210:	d041      	beq.n	8019296 <tcp_parseopt+0xc6>
 8019212:	2b01      	cmp	r3, #1
 8019214:	d127      	bne.n	8019266 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8019216:	e037      	b.n	8019288 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019218:	f7ff ffa4 	bl	8019164 <tcp_get_next_optbyte>
 801921c:	4603      	mov	r3, r0
 801921e:	2b04      	cmp	r3, #4
 8019220:	d13b      	bne.n	801929a <tcp_parseopt+0xca>
 8019222:	4b25      	ldr	r3, [pc, #148]	; (80192b8 <tcp_parseopt+0xe8>)
 8019224:	881b      	ldrh	r3, [r3, #0]
 8019226:	3301      	adds	r3, #1
 8019228:	4a22      	ldr	r2, [pc, #136]	; (80192b4 <tcp_parseopt+0xe4>)
 801922a:	8812      	ldrh	r2, [r2, #0]
 801922c:	4293      	cmp	r3, r2
 801922e:	da34      	bge.n	801929a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019230:	f7ff ff98 	bl	8019164 <tcp_get_next_optbyte>
 8019234:	4603      	mov	r3, r0
 8019236:	b29b      	uxth	r3, r3
 8019238:	021b      	lsls	r3, r3, #8
 801923a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801923c:	f7ff ff92 	bl	8019164 <tcp_get_next_optbyte>
 8019240:	4603      	mov	r3, r0
 8019242:	b29a      	uxth	r2, r3
 8019244:	89bb      	ldrh	r3, [r7, #12]
 8019246:	4313      	orrs	r3, r2
 8019248:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801924a:	89bb      	ldrh	r3, [r7, #12]
 801924c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019250:	d804      	bhi.n	801925c <tcp_parseopt+0x8c>
 8019252:	89bb      	ldrh	r3, [r7, #12]
 8019254:	2b00      	cmp	r3, #0
 8019256:	d001      	beq.n	801925c <tcp_parseopt+0x8c>
 8019258:	89ba      	ldrh	r2, [r7, #12]
 801925a:	e001      	b.n	8019260 <tcp_parseopt+0x90>
 801925c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8019264:	e010      	b.n	8019288 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019266:	f7ff ff7d 	bl	8019164 <tcp_get_next_optbyte>
 801926a:	4603      	mov	r3, r0
 801926c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801926e:	7afb      	ldrb	r3, [r7, #11]
 8019270:	2b01      	cmp	r3, #1
 8019272:	d914      	bls.n	801929e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019274:	7afb      	ldrb	r3, [r7, #11]
 8019276:	b29a      	uxth	r2, r3
 8019278:	4b0f      	ldr	r3, [pc, #60]	; (80192b8 <tcp_parseopt+0xe8>)
 801927a:	881b      	ldrh	r3, [r3, #0]
 801927c:	4413      	add	r3, r2
 801927e:	b29b      	uxth	r3, r3
 8019280:	3b02      	subs	r3, #2
 8019282:	b29a      	uxth	r2, r3
 8019284:	4b0c      	ldr	r3, [pc, #48]	; (80192b8 <tcp_parseopt+0xe8>)
 8019286:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019288:	4b0b      	ldr	r3, [pc, #44]	; (80192b8 <tcp_parseopt+0xe8>)
 801928a:	881a      	ldrh	r2, [r3, #0]
 801928c:	4b09      	ldr	r3, [pc, #36]	; (80192b4 <tcp_parseopt+0xe4>)
 801928e:	881b      	ldrh	r3, [r3, #0]
 8019290:	429a      	cmp	r2, r3
 8019292:	d3b3      	bcc.n	80191fc <tcp_parseopt+0x2c>
 8019294:	e004      	b.n	80192a0 <tcp_parseopt+0xd0>
          return;
 8019296:	bf00      	nop
 8019298:	e002      	b.n	80192a0 <tcp_parseopt+0xd0>
            return;
 801929a:	bf00      	nop
 801929c:	e000      	b.n	80192a0 <tcp_parseopt+0xd0>
            return;
 801929e:	bf00      	nop
      }
    }
  }
}
 80192a0:	3710      	adds	r7, #16
 80192a2:	46bd      	mov	sp, r7
 80192a4:	bd80      	pop	{r7, pc}
 80192a6:	bf00      	nop
 80192a8:	08022988 	.word	0x08022988
 80192ac:	08022dec 	.word	0x08022dec
 80192b0:	080229d4 	.word	0x080229d4
 80192b4:	2400cb7c 	.word	0x2400cb7c
 80192b8:	2400cb84 	.word	0x2400cb84

080192bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80192bc:	b480      	push	{r7}
 80192be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80192c0:	4b05      	ldr	r3, [pc, #20]	; (80192d8 <tcp_trigger_input_pcb_close+0x1c>)
 80192c2:	781b      	ldrb	r3, [r3, #0]
 80192c4:	f043 0310 	orr.w	r3, r3, #16
 80192c8:	b2da      	uxtb	r2, r3
 80192ca:	4b03      	ldr	r3, [pc, #12]	; (80192d8 <tcp_trigger_input_pcb_close+0x1c>)
 80192cc:	701a      	strb	r2, [r3, #0]
}
 80192ce:	bf00      	nop
 80192d0:	46bd      	mov	sp, r7
 80192d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d6:	4770      	bx	lr
 80192d8:	2400cb95 	.word	0x2400cb95

080192dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b084      	sub	sp, #16
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	60b9      	str	r1, [r7, #8]
 80192e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	d00a      	beq.n	8019304 <tcp_route+0x28>
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	7a1b      	ldrb	r3, [r3, #8]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d006      	beq.n	8019304 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	7a1b      	ldrb	r3, [r3, #8]
 80192fa:	4618      	mov	r0, r3
 80192fc:	f7fb fb10 	bl	8014920 <netif_get_by_index>
 8019300:	4603      	mov	r3, r0
 8019302:	e003      	b.n	801930c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019304:	6878      	ldr	r0, [r7, #4]
 8019306:	f005 f86d 	bl	801e3e4 <ip4_route>
 801930a:	4603      	mov	r3, r0
  }
}
 801930c:	4618      	mov	r0, r3
 801930e:	3710      	adds	r7, #16
 8019310:	46bd      	mov	sp, r7
 8019312:	bd80      	pop	{r7, pc}

08019314 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019314:	b590      	push	{r4, r7, lr}
 8019316:	b087      	sub	sp, #28
 8019318:	af00      	add	r7, sp, #0
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	603b      	str	r3, [r7, #0]
 8019320:	4613      	mov	r3, r2
 8019322:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d105      	bne.n	8019336 <tcp_create_segment+0x22>
 801932a:	4b44      	ldr	r3, [pc, #272]	; (801943c <tcp_create_segment+0x128>)
 801932c:	22a3      	movs	r2, #163	; 0xa3
 801932e:	4944      	ldr	r1, [pc, #272]	; (8019440 <tcp_create_segment+0x12c>)
 8019330:	4844      	ldr	r0, [pc, #272]	; (8019444 <tcp_create_segment+0x130>)
 8019332:	f007 fa19 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019336:	68bb      	ldr	r3, [r7, #8]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d105      	bne.n	8019348 <tcp_create_segment+0x34>
 801933c:	4b3f      	ldr	r3, [pc, #252]	; (801943c <tcp_create_segment+0x128>)
 801933e:	22a4      	movs	r2, #164	; 0xa4
 8019340:	4941      	ldr	r1, [pc, #260]	; (8019448 <tcp_create_segment+0x134>)
 8019342:	4840      	ldr	r0, [pc, #256]	; (8019444 <tcp_create_segment+0x130>)
 8019344:	f007 fa10 	bl	8020768 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019348:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801934c:	009b      	lsls	r3, r3, #2
 801934e:	b2db      	uxtb	r3, r3
 8019350:	f003 0304 	and.w	r3, r3, #4
 8019354:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019356:	2003      	movs	r0, #3
 8019358:	f7fa ff4a 	bl	80141f0 <memp_malloc>
 801935c:	6138      	str	r0, [r7, #16]
 801935e:	693b      	ldr	r3, [r7, #16]
 8019360:	2b00      	cmp	r3, #0
 8019362:	d104      	bne.n	801936e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019364:	68b8      	ldr	r0, [r7, #8]
 8019366:	f7fb fe69 	bl	801503c <pbuf_free>
    return NULL;
 801936a:	2300      	movs	r3, #0
 801936c:	e061      	b.n	8019432 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019374:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	2200      	movs	r2, #0
 801937a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801937c:	693b      	ldr	r3, [r7, #16]
 801937e:	68ba      	ldr	r2, [r7, #8]
 8019380:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	891a      	ldrh	r2, [r3, #8]
 8019386:	7dfb      	ldrb	r3, [r7, #23]
 8019388:	b29b      	uxth	r3, r3
 801938a:	429a      	cmp	r2, r3
 801938c:	d205      	bcs.n	801939a <tcp_create_segment+0x86>
 801938e:	4b2b      	ldr	r3, [pc, #172]	; (801943c <tcp_create_segment+0x128>)
 8019390:	22b0      	movs	r2, #176	; 0xb0
 8019392:	492e      	ldr	r1, [pc, #184]	; (801944c <tcp_create_segment+0x138>)
 8019394:	482b      	ldr	r0, [pc, #172]	; (8019444 <tcp_create_segment+0x130>)
 8019396:	f007 f9e7 	bl	8020768 <iprintf>
  seg->len = p->tot_len - optlen;
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	891a      	ldrh	r2, [r3, #8]
 801939e:	7dfb      	ldrb	r3, [r7, #23]
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	1ad3      	subs	r3, r2, r3
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	693b      	ldr	r3, [r7, #16]
 80193a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80193aa:	2114      	movs	r1, #20
 80193ac:	68b8      	ldr	r0, [r7, #8]
 80193ae:	f7fb fdaf 	bl	8014f10 <pbuf_add_header>
 80193b2:	4603      	mov	r3, r0
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d004      	beq.n	80193c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80193b8:	6938      	ldr	r0, [r7, #16]
 80193ba:	f7fd f8ce 	bl	801655a <tcp_seg_free>
    return NULL;
 80193be:	2300      	movs	r3, #0
 80193c0:	e037      	b.n	8019432 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80193c2:	693b      	ldr	r3, [r7, #16]
 80193c4:	685b      	ldr	r3, [r3, #4]
 80193c6:	685a      	ldr	r2, [r3, #4]
 80193c8:	693b      	ldr	r3, [r7, #16]
 80193ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	8ada      	ldrh	r2, [r3, #22]
 80193d0:	693b      	ldr	r3, [r7, #16]
 80193d2:	68dc      	ldr	r4, [r3, #12]
 80193d4:	4610      	mov	r0, r2
 80193d6:	f7fa f97b 	bl	80136d0 <lwip_htons>
 80193da:	4603      	mov	r3, r0
 80193dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	8b1a      	ldrh	r2, [r3, #24]
 80193e2:	693b      	ldr	r3, [r7, #16]
 80193e4:	68dc      	ldr	r4, [r3, #12]
 80193e6:	4610      	mov	r0, r2
 80193e8:	f7fa f972 	bl	80136d0 <lwip_htons>
 80193ec:	4603      	mov	r3, r0
 80193ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80193f0:	693b      	ldr	r3, [r7, #16]
 80193f2:	68dc      	ldr	r4, [r3, #12]
 80193f4:	6838      	ldr	r0, [r7, #0]
 80193f6:	f7fa f980 	bl	80136fa <lwip_htonl>
 80193fa:	4603      	mov	r3, r0
 80193fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80193fe:	7dfb      	ldrb	r3, [r7, #23]
 8019400:	089b      	lsrs	r3, r3, #2
 8019402:	b2db      	uxtb	r3, r3
 8019404:	b29b      	uxth	r3, r3
 8019406:	3305      	adds	r3, #5
 8019408:	b29b      	uxth	r3, r3
 801940a:	031b      	lsls	r3, r3, #12
 801940c:	b29a      	uxth	r2, r3
 801940e:	79fb      	ldrb	r3, [r7, #7]
 8019410:	b29b      	uxth	r3, r3
 8019412:	4313      	orrs	r3, r2
 8019414:	b29a      	uxth	r2, r3
 8019416:	693b      	ldr	r3, [r7, #16]
 8019418:	68dc      	ldr	r4, [r3, #12]
 801941a:	4610      	mov	r0, r2
 801941c:	f7fa f958 	bl	80136d0 <lwip_htons>
 8019420:	4603      	mov	r3, r0
 8019422:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	68db      	ldr	r3, [r3, #12]
 8019428:	2200      	movs	r2, #0
 801942a:	749a      	strb	r2, [r3, #18]
 801942c:	2200      	movs	r2, #0
 801942e:	74da      	strb	r2, [r3, #19]
  return seg;
 8019430:	693b      	ldr	r3, [r7, #16]
}
 8019432:	4618      	mov	r0, r3
 8019434:	371c      	adds	r7, #28
 8019436:	46bd      	mov	sp, r7
 8019438:	bd90      	pop	{r4, r7, pc}
 801943a:	bf00      	nop
 801943c:	08022e08 	.word	0x08022e08
 8019440:	08022e3c 	.word	0x08022e3c
 8019444:	08022e5c 	.word	0x08022e5c
 8019448:	08022e84 	.word	0x08022e84
 801944c:	08022ea8 	.word	0x08022ea8

08019450 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019450:	b590      	push	{r4, r7, lr}
 8019452:	b08b      	sub	sp, #44	; 0x2c
 8019454:	af02      	add	r7, sp, #8
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	460b      	mov	r3, r1
 801945a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801945c:	2300      	movs	r3, #0
 801945e:	61fb      	str	r3, [r7, #28]
 8019460:	2300      	movs	r3, #0
 8019462:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019464:	2300      	movs	r3, #0
 8019466:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d106      	bne.n	801947c <tcp_split_unsent_seg+0x2c>
 801946e:	4b95      	ldr	r3, [pc, #596]	; (80196c4 <tcp_split_unsent_seg+0x274>)
 8019470:	f240 324b 	movw	r2, #843	; 0x34b
 8019474:	4994      	ldr	r1, [pc, #592]	; (80196c8 <tcp_split_unsent_seg+0x278>)
 8019476:	4895      	ldr	r0, [pc, #596]	; (80196cc <tcp_split_unsent_seg+0x27c>)
 8019478:	f007 f976 	bl	8020768 <iprintf>

  useg = pcb->unsent;
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019480:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019482:	697b      	ldr	r3, [r7, #20]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d102      	bne.n	801948e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019488:	f04f 33ff 	mov.w	r3, #4294967295
 801948c:	e116      	b.n	80196bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801948e:	887b      	ldrh	r3, [r7, #2]
 8019490:	2b00      	cmp	r3, #0
 8019492:	d109      	bne.n	80194a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019494:	4b8b      	ldr	r3, [pc, #556]	; (80196c4 <tcp_split_unsent_seg+0x274>)
 8019496:	f240 3253 	movw	r2, #851	; 0x353
 801949a:	498d      	ldr	r1, [pc, #564]	; (80196d0 <tcp_split_unsent_seg+0x280>)
 801949c:	488b      	ldr	r0, [pc, #556]	; (80196cc <tcp_split_unsent_seg+0x27c>)
 801949e:	f007 f963 	bl	8020768 <iprintf>
    return ERR_VAL;
 80194a2:	f06f 0305 	mvn.w	r3, #5
 80194a6:	e109      	b.n	80196bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80194a8:	697b      	ldr	r3, [r7, #20]
 80194aa:	891b      	ldrh	r3, [r3, #8]
 80194ac:	887a      	ldrh	r2, [r7, #2]
 80194ae:	429a      	cmp	r2, r3
 80194b0:	d301      	bcc.n	80194b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80194b2:	2300      	movs	r3, #0
 80194b4:	e102      	b.n	80196bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80194ba:	887a      	ldrh	r2, [r7, #2]
 80194bc:	429a      	cmp	r2, r3
 80194be:	d906      	bls.n	80194ce <tcp_split_unsent_seg+0x7e>
 80194c0:	4b80      	ldr	r3, [pc, #512]	; (80196c4 <tcp_split_unsent_seg+0x274>)
 80194c2:	f240 325b 	movw	r2, #859	; 0x35b
 80194c6:	4983      	ldr	r1, [pc, #524]	; (80196d4 <tcp_split_unsent_seg+0x284>)
 80194c8:	4880      	ldr	r0, [pc, #512]	; (80196cc <tcp_split_unsent_seg+0x27c>)
 80194ca:	f007 f94d 	bl	8020768 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80194ce:	697b      	ldr	r3, [r7, #20]
 80194d0:	891b      	ldrh	r3, [r3, #8]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d106      	bne.n	80194e4 <tcp_split_unsent_seg+0x94>
 80194d6:	4b7b      	ldr	r3, [pc, #492]	; (80196c4 <tcp_split_unsent_seg+0x274>)
 80194d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80194dc:	497e      	ldr	r1, [pc, #504]	; (80196d8 <tcp_split_unsent_seg+0x288>)
 80194de:	487b      	ldr	r0, [pc, #492]	; (80196cc <tcp_split_unsent_seg+0x27c>)
 80194e0:	f007 f942 	bl	8020768 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80194e4:	697b      	ldr	r3, [r7, #20]
 80194e6:	7a9b      	ldrb	r3, [r3, #10]
 80194e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80194ea:	7bfb      	ldrb	r3, [r7, #15]
 80194ec:	009b      	lsls	r3, r3, #2
 80194ee:	b2db      	uxtb	r3, r3
 80194f0:	f003 0304 	and.w	r3, r3, #4
 80194f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	891a      	ldrh	r2, [r3, #8]
 80194fa:	887b      	ldrh	r3, [r7, #2]
 80194fc:	1ad3      	subs	r3, r2, r3
 80194fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019500:	7bbb      	ldrb	r3, [r7, #14]
 8019502:	b29a      	uxth	r2, r3
 8019504:	89bb      	ldrh	r3, [r7, #12]
 8019506:	4413      	add	r3, r2
 8019508:	b29b      	uxth	r3, r3
 801950a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801950e:	4619      	mov	r1, r3
 8019510:	2036      	movs	r0, #54	; 0x36
 8019512:	f7fb faaf 	bl	8014a74 <pbuf_alloc>
 8019516:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019518:	693b      	ldr	r3, [r7, #16]
 801951a:	2b00      	cmp	r3, #0
 801951c:	f000 80b7 	beq.w	801968e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	685b      	ldr	r3, [r3, #4]
 8019524:	891a      	ldrh	r2, [r3, #8]
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	891b      	ldrh	r3, [r3, #8]
 801952a:	1ad3      	subs	r3, r2, r3
 801952c:	b29a      	uxth	r2, r3
 801952e:	887b      	ldrh	r3, [r7, #2]
 8019530:	4413      	add	r3, r2
 8019532:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019534:	697b      	ldr	r3, [r7, #20]
 8019536:	6858      	ldr	r0, [r3, #4]
 8019538:	693b      	ldr	r3, [r7, #16]
 801953a:	685a      	ldr	r2, [r3, #4]
 801953c:	7bbb      	ldrb	r3, [r7, #14]
 801953e:	18d1      	adds	r1, r2, r3
 8019540:	897b      	ldrh	r3, [r7, #10]
 8019542:	89ba      	ldrh	r2, [r7, #12]
 8019544:	f7fb ff80 	bl	8015448 <pbuf_copy_partial>
 8019548:	4603      	mov	r3, r0
 801954a:	461a      	mov	r2, r3
 801954c:	89bb      	ldrh	r3, [r7, #12]
 801954e:	4293      	cmp	r3, r2
 8019550:	f040 809f 	bne.w	8019692 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019554:	697b      	ldr	r3, [r7, #20]
 8019556:	68db      	ldr	r3, [r3, #12]
 8019558:	899b      	ldrh	r3, [r3, #12]
 801955a:	b29b      	uxth	r3, r3
 801955c:	4618      	mov	r0, r3
 801955e:	f7fa f8b7 	bl	80136d0 <lwip_htons>
 8019562:	4603      	mov	r3, r0
 8019564:	b2db      	uxtb	r3, r3
 8019566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801956a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801956c:	2300      	movs	r3, #0
 801956e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019570:	7efb      	ldrb	r3, [r7, #27]
 8019572:	f003 0308 	and.w	r3, r3, #8
 8019576:	2b00      	cmp	r3, #0
 8019578:	d007      	beq.n	801958a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801957a:	7efb      	ldrb	r3, [r7, #27]
 801957c:	f023 0308 	bic.w	r3, r3, #8
 8019580:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019582:	7ebb      	ldrb	r3, [r7, #26]
 8019584:	f043 0308 	orr.w	r3, r3, #8
 8019588:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801958a:	7efb      	ldrb	r3, [r7, #27]
 801958c:	f003 0301 	and.w	r3, r3, #1
 8019590:	2b00      	cmp	r3, #0
 8019592:	d007      	beq.n	80195a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019594:	7efb      	ldrb	r3, [r7, #27]
 8019596:	f023 0301 	bic.w	r3, r3, #1
 801959a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801959c:	7ebb      	ldrb	r3, [r7, #26]
 801959e:	f043 0301 	orr.w	r3, r3, #1
 80195a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80195a4:	697b      	ldr	r3, [r7, #20]
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	4618      	mov	r0, r3
 80195ac:	f7fa f8a5 	bl	80136fa <lwip_htonl>
 80195b0:	4602      	mov	r2, r0
 80195b2:	887b      	ldrh	r3, [r7, #2]
 80195b4:	18d1      	adds	r1, r2, r3
 80195b6:	7eba      	ldrb	r2, [r7, #26]
 80195b8:	7bfb      	ldrb	r3, [r7, #15]
 80195ba:	9300      	str	r3, [sp, #0]
 80195bc:	460b      	mov	r3, r1
 80195be:	6939      	ldr	r1, [r7, #16]
 80195c0:	6878      	ldr	r0, [r7, #4]
 80195c2:	f7ff fea7 	bl	8019314 <tcp_create_segment>
 80195c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80195c8:	69fb      	ldr	r3, [r7, #28]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d063      	beq.n	8019696 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80195ce:	697b      	ldr	r3, [r7, #20]
 80195d0:	685b      	ldr	r3, [r3, #4]
 80195d2:	4618      	mov	r0, r3
 80195d4:	f7fb fdc0 	bl	8015158 <pbuf_clen>
 80195d8:	4603      	mov	r3, r0
 80195da:	461a      	mov	r2, r3
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195e2:	1a9b      	subs	r3, r3, r2
 80195e4:	b29a      	uxth	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80195ec:	697b      	ldr	r3, [r7, #20]
 80195ee:	6858      	ldr	r0, [r3, #4]
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	685b      	ldr	r3, [r3, #4]
 80195f4:	891a      	ldrh	r2, [r3, #8]
 80195f6:	89bb      	ldrh	r3, [r7, #12]
 80195f8:	1ad3      	subs	r3, r2, r3
 80195fa:	b29b      	uxth	r3, r3
 80195fc:	4619      	mov	r1, r3
 80195fe:	f7fb fb97 	bl	8014d30 <pbuf_realloc>
  useg->len -= remainder;
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	891a      	ldrh	r2, [r3, #8]
 8019606:	89bb      	ldrh	r3, [r7, #12]
 8019608:	1ad3      	subs	r3, r2, r3
 801960a:	b29a      	uxth	r2, r3
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	68db      	ldr	r3, [r3, #12]
 8019614:	899b      	ldrh	r3, [r3, #12]
 8019616:	b29c      	uxth	r4, r3
 8019618:	7efb      	ldrb	r3, [r7, #27]
 801961a:	b29b      	uxth	r3, r3
 801961c:	4618      	mov	r0, r3
 801961e:	f7fa f857 	bl	80136d0 <lwip_htons>
 8019622:	4603      	mov	r3, r0
 8019624:	461a      	mov	r2, r3
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	68db      	ldr	r3, [r3, #12]
 801962a:	4322      	orrs	r2, r4
 801962c:	b292      	uxth	r2, r2
 801962e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019630:	697b      	ldr	r3, [r7, #20]
 8019632:	685b      	ldr	r3, [r3, #4]
 8019634:	4618      	mov	r0, r3
 8019636:	f7fb fd8f 	bl	8015158 <pbuf_clen>
 801963a:	4603      	mov	r3, r0
 801963c:	461a      	mov	r2, r3
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019644:	4413      	add	r3, r2
 8019646:	b29a      	uxth	r2, r3
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801964e:	69fb      	ldr	r3, [r7, #28]
 8019650:	685b      	ldr	r3, [r3, #4]
 8019652:	4618      	mov	r0, r3
 8019654:	f7fb fd80 	bl	8015158 <pbuf_clen>
 8019658:	4603      	mov	r3, r0
 801965a:	461a      	mov	r2, r3
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019662:	4413      	add	r3, r2
 8019664:	b29a      	uxth	r2, r3
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	69fb      	ldr	r3, [r7, #28]
 8019672:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019674:	697b      	ldr	r3, [r7, #20]
 8019676:	69fa      	ldr	r2, [r7, #28]
 8019678:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801967a:	69fb      	ldr	r3, [r7, #28]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d103      	bne.n	801968a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2200      	movs	r2, #0
 8019686:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801968a:	2300      	movs	r3, #0
 801968c:	e016      	b.n	80196bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801968e:	bf00      	nop
 8019690:	e002      	b.n	8019698 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019692:	bf00      	nop
 8019694:	e000      	b.n	8019698 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019696:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019698:	69fb      	ldr	r3, [r7, #28]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d006      	beq.n	80196ac <tcp_split_unsent_seg+0x25c>
 801969e:	4b09      	ldr	r3, [pc, #36]	; (80196c4 <tcp_split_unsent_seg+0x274>)
 80196a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80196a4:	490d      	ldr	r1, [pc, #52]	; (80196dc <tcp_split_unsent_seg+0x28c>)
 80196a6:	4809      	ldr	r0, [pc, #36]	; (80196cc <tcp_split_unsent_seg+0x27c>)
 80196a8:	f007 f85e 	bl	8020768 <iprintf>
  if (p != NULL) {
 80196ac:	693b      	ldr	r3, [r7, #16]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d002      	beq.n	80196b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80196b2:	6938      	ldr	r0, [r7, #16]
 80196b4:	f7fb fcc2 	bl	801503c <pbuf_free>
  }

  return ERR_MEM;
 80196b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80196bc:	4618      	mov	r0, r3
 80196be:	3724      	adds	r7, #36	; 0x24
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd90      	pop	{r4, r7, pc}
 80196c4:	08022e08 	.word	0x08022e08
 80196c8:	0802319c 	.word	0x0802319c
 80196cc:	08022e5c 	.word	0x08022e5c
 80196d0:	080231c0 	.word	0x080231c0
 80196d4:	080231e4 	.word	0x080231e4
 80196d8:	080231f4 	.word	0x080231f4
 80196dc:	08023204 	.word	0x08023204

080196e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80196e0:	b590      	push	{r4, r7, lr}
 80196e2:	b085      	sub	sp, #20
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	2b00      	cmp	r3, #0
 80196ec:	d106      	bne.n	80196fc <tcp_send_fin+0x1c>
 80196ee:	4b21      	ldr	r3, [pc, #132]	; (8019774 <tcp_send_fin+0x94>)
 80196f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80196f4:	4920      	ldr	r1, [pc, #128]	; (8019778 <tcp_send_fin+0x98>)
 80196f6:	4821      	ldr	r0, [pc, #132]	; (801977c <tcp_send_fin+0x9c>)
 80196f8:	f007 f836 	bl	8020768 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019700:	2b00      	cmp	r3, #0
 8019702:	d02e      	beq.n	8019762 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019708:	60fb      	str	r3, [r7, #12]
 801970a:	e002      	b.n	8019712 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d1f8      	bne.n	801970c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801971a:	68fb      	ldr	r3, [r7, #12]
 801971c:	68db      	ldr	r3, [r3, #12]
 801971e:	899b      	ldrh	r3, [r3, #12]
 8019720:	b29b      	uxth	r3, r3
 8019722:	4618      	mov	r0, r3
 8019724:	f7f9 ffd4 	bl	80136d0 <lwip_htons>
 8019728:	4603      	mov	r3, r0
 801972a:	b2db      	uxtb	r3, r3
 801972c:	f003 0307 	and.w	r3, r3, #7
 8019730:	2b00      	cmp	r3, #0
 8019732:	d116      	bne.n	8019762 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	68db      	ldr	r3, [r3, #12]
 8019738:	899b      	ldrh	r3, [r3, #12]
 801973a:	b29c      	uxth	r4, r3
 801973c:	2001      	movs	r0, #1
 801973e:	f7f9 ffc7 	bl	80136d0 <lwip_htons>
 8019742:	4603      	mov	r3, r0
 8019744:	461a      	mov	r2, r3
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	68db      	ldr	r3, [r3, #12]
 801974a:	4322      	orrs	r2, r4
 801974c:	b292      	uxth	r2, r2
 801974e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	8b5b      	ldrh	r3, [r3, #26]
 8019754:	f043 0320 	orr.w	r3, r3, #32
 8019758:	b29a      	uxth	r2, r3
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801975e:	2300      	movs	r3, #0
 8019760:	e004      	b.n	801976c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019762:	2101      	movs	r1, #1
 8019764:	6878      	ldr	r0, [r7, #4]
 8019766:	f000 f80b 	bl	8019780 <tcp_enqueue_flags>
 801976a:	4603      	mov	r3, r0
}
 801976c:	4618      	mov	r0, r3
 801976e:	3714      	adds	r7, #20
 8019770:	46bd      	mov	sp, r7
 8019772:	bd90      	pop	{r4, r7, pc}
 8019774:	08022e08 	.word	0x08022e08
 8019778:	08023210 	.word	0x08023210
 801977c:	08022e5c 	.word	0x08022e5c

08019780 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b08a      	sub	sp, #40	; 0x28
 8019784:	af02      	add	r7, sp, #8
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	460b      	mov	r3, r1
 801978a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801978c:	2300      	movs	r3, #0
 801978e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019790:	2300      	movs	r3, #0
 8019792:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019794:	78fb      	ldrb	r3, [r7, #3]
 8019796:	f003 0303 	and.w	r3, r3, #3
 801979a:	2b00      	cmp	r3, #0
 801979c:	d106      	bne.n	80197ac <tcp_enqueue_flags+0x2c>
 801979e:	4b67      	ldr	r3, [pc, #412]	; (801993c <tcp_enqueue_flags+0x1bc>)
 80197a0:	f240 4211 	movw	r2, #1041	; 0x411
 80197a4:	4966      	ldr	r1, [pc, #408]	; (8019940 <tcp_enqueue_flags+0x1c0>)
 80197a6:	4867      	ldr	r0, [pc, #412]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 80197a8:	f006 ffde 	bl	8020768 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d106      	bne.n	80197c0 <tcp_enqueue_flags+0x40>
 80197b2:	4b62      	ldr	r3, [pc, #392]	; (801993c <tcp_enqueue_flags+0x1bc>)
 80197b4:	f240 4213 	movw	r2, #1043	; 0x413
 80197b8:	4963      	ldr	r1, [pc, #396]	; (8019948 <tcp_enqueue_flags+0x1c8>)
 80197ba:	4862      	ldr	r0, [pc, #392]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 80197bc:	f006 ffd4 	bl	8020768 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80197c0:	78fb      	ldrb	r3, [r7, #3]
 80197c2:	f003 0302 	and.w	r3, r3, #2
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d001      	beq.n	80197ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80197ca:	2301      	movs	r3, #1
 80197cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80197ce:	7ffb      	ldrb	r3, [r7, #31]
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	b2db      	uxtb	r3, r3
 80197d4:	f003 0304 	and.w	r3, r3, #4
 80197d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80197da:	7dfb      	ldrb	r3, [r7, #23]
 80197dc:	b29b      	uxth	r3, r3
 80197de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80197e2:	4619      	mov	r1, r3
 80197e4:	2036      	movs	r0, #54	; 0x36
 80197e6:	f7fb f945 	bl	8014a74 <pbuf_alloc>
 80197ea:	6138      	str	r0, [r7, #16]
 80197ec:	693b      	ldr	r3, [r7, #16]
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d109      	bne.n	8019806 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	8b5b      	ldrh	r3, [r3, #26]
 80197f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197fa:	b29a      	uxth	r2, r3
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019800:	f04f 33ff 	mov.w	r3, #4294967295
 8019804:	e095      	b.n	8019932 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019806:	693b      	ldr	r3, [r7, #16]
 8019808:	895a      	ldrh	r2, [r3, #10]
 801980a:	7dfb      	ldrb	r3, [r7, #23]
 801980c:	b29b      	uxth	r3, r3
 801980e:	429a      	cmp	r2, r3
 8019810:	d206      	bcs.n	8019820 <tcp_enqueue_flags+0xa0>
 8019812:	4b4a      	ldr	r3, [pc, #296]	; (801993c <tcp_enqueue_flags+0x1bc>)
 8019814:	f240 4239 	movw	r2, #1081	; 0x439
 8019818:	494c      	ldr	r1, [pc, #304]	; (801994c <tcp_enqueue_flags+0x1cc>)
 801981a:	484a      	ldr	r0, [pc, #296]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 801981c:	f006 ffa4 	bl	8020768 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019824:	78fa      	ldrb	r2, [r7, #3]
 8019826:	7ffb      	ldrb	r3, [r7, #31]
 8019828:	9300      	str	r3, [sp, #0]
 801982a:	460b      	mov	r3, r1
 801982c:	6939      	ldr	r1, [r7, #16]
 801982e:	6878      	ldr	r0, [r7, #4]
 8019830:	f7ff fd70 	bl	8019314 <tcp_create_segment>
 8019834:	60f8      	str	r0, [r7, #12]
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	2b00      	cmp	r3, #0
 801983a:	d109      	bne.n	8019850 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	8b5b      	ldrh	r3, [r3, #26]
 8019840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019844:	b29a      	uxth	r2, r3
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801984a:	f04f 33ff 	mov.w	r3, #4294967295
 801984e:	e070      	b.n	8019932 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	68db      	ldr	r3, [r3, #12]
 8019854:	f003 0303 	and.w	r3, r3, #3
 8019858:	2b00      	cmp	r3, #0
 801985a:	d006      	beq.n	801986a <tcp_enqueue_flags+0xea>
 801985c:	4b37      	ldr	r3, [pc, #220]	; (801993c <tcp_enqueue_flags+0x1bc>)
 801985e:	f240 4242 	movw	r2, #1090	; 0x442
 8019862:	493b      	ldr	r1, [pc, #236]	; (8019950 <tcp_enqueue_flags+0x1d0>)
 8019864:	4837      	ldr	r0, [pc, #220]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 8019866:	f006 ff7f 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801986a:	68fb      	ldr	r3, [r7, #12]
 801986c:	891b      	ldrh	r3, [r3, #8]
 801986e:	2b00      	cmp	r3, #0
 8019870:	d006      	beq.n	8019880 <tcp_enqueue_flags+0x100>
 8019872:	4b32      	ldr	r3, [pc, #200]	; (801993c <tcp_enqueue_flags+0x1bc>)
 8019874:	f240 4243 	movw	r2, #1091	; 0x443
 8019878:	4936      	ldr	r1, [pc, #216]	; (8019954 <tcp_enqueue_flags+0x1d4>)
 801987a:	4832      	ldr	r0, [pc, #200]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 801987c:	f006 ff74 	bl	8020768 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019884:	2b00      	cmp	r3, #0
 8019886:	d103      	bne.n	8019890 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	66da      	str	r2, [r3, #108]	; 0x6c
 801988e:	e00d      	b.n	80198ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019894:	61bb      	str	r3, [r7, #24]
 8019896:	e002      	b.n	801989e <tcp_enqueue_flags+0x11e>
 8019898:	69bb      	ldr	r3, [r7, #24]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	61bb      	str	r3, [r7, #24]
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d1f8      	bne.n	8019898 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80198a6:	69bb      	ldr	r3, [r7, #24]
 80198a8:	68fa      	ldr	r2, [r7, #12]
 80198aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	2200      	movs	r2, #0
 80198b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80198b4:	78fb      	ldrb	r3, [r7, #3]
 80198b6:	f003 0302 	and.w	r3, r3, #2
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d104      	bne.n	80198c8 <tcp_enqueue_flags+0x148>
 80198be:	78fb      	ldrb	r3, [r7, #3]
 80198c0:	f003 0301 	and.w	r3, r3, #1
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d004      	beq.n	80198d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198cc:	1c5a      	adds	r2, r3, #1
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80198d2:	78fb      	ldrb	r3, [r7, #3]
 80198d4:	f003 0301 	and.w	r3, r3, #1
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d006      	beq.n	80198ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	8b5b      	ldrh	r3, [r3, #26]
 80198e0:	f043 0320 	orr.w	r3, r3, #32
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	685b      	ldr	r3, [r3, #4]
 80198ee:	4618      	mov	r0, r3
 80198f0:	f7fb fc32 	bl	8015158 <pbuf_clen>
 80198f4:	4603      	mov	r3, r0
 80198f6:	461a      	mov	r2, r3
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198fe:	4413      	add	r3, r2
 8019900:	b29a      	uxth	r2, r3
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801990e:	2b00      	cmp	r3, #0
 8019910:	d00e      	beq.n	8019930 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019916:	2b00      	cmp	r3, #0
 8019918:	d10a      	bne.n	8019930 <tcp_enqueue_flags+0x1b0>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801991e:	2b00      	cmp	r3, #0
 8019920:	d106      	bne.n	8019930 <tcp_enqueue_flags+0x1b0>
 8019922:	4b06      	ldr	r3, [pc, #24]	; (801993c <tcp_enqueue_flags+0x1bc>)
 8019924:	f240 4265 	movw	r2, #1125	; 0x465
 8019928:	490b      	ldr	r1, [pc, #44]	; (8019958 <tcp_enqueue_flags+0x1d8>)
 801992a:	4806      	ldr	r0, [pc, #24]	; (8019944 <tcp_enqueue_flags+0x1c4>)
 801992c:	f006 ff1c 	bl	8020768 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019930:	2300      	movs	r3, #0
}
 8019932:	4618      	mov	r0, r3
 8019934:	3720      	adds	r7, #32
 8019936:	46bd      	mov	sp, r7
 8019938:	bd80      	pop	{r7, pc}
 801993a:	bf00      	nop
 801993c:	08022e08 	.word	0x08022e08
 8019940:	0802322c 	.word	0x0802322c
 8019944:	08022e5c 	.word	0x08022e5c
 8019948:	08023284 	.word	0x08023284
 801994c:	080232a4 	.word	0x080232a4
 8019950:	080232e0 	.word	0x080232e0
 8019954:	080232f8 	.word	0x080232f8
 8019958:	08023324 	.word	0x08023324

0801995c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801995c:	b5b0      	push	{r4, r5, r7, lr}
 801995e:	b08a      	sub	sp, #40	; 0x28
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d106      	bne.n	8019978 <tcp_output+0x1c>
 801996a:	4b8a      	ldr	r3, [pc, #552]	; (8019b94 <tcp_output+0x238>)
 801996c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019970:	4989      	ldr	r1, [pc, #548]	; (8019b98 <tcp_output+0x23c>)
 8019972:	488a      	ldr	r0, [pc, #552]	; (8019b9c <tcp_output+0x240>)
 8019974:	f006 fef8 	bl	8020768 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019978:	687b      	ldr	r3, [r7, #4]
 801997a:	7d1b      	ldrb	r3, [r3, #20]
 801997c:	2b01      	cmp	r3, #1
 801997e:	d106      	bne.n	801998e <tcp_output+0x32>
 8019980:	4b84      	ldr	r3, [pc, #528]	; (8019b94 <tcp_output+0x238>)
 8019982:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019986:	4986      	ldr	r1, [pc, #536]	; (8019ba0 <tcp_output+0x244>)
 8019988:	4884      	ldr	r0, [pc, #528]	; (8019b9c <tcp_output+0x240>)
 801998a:	f006 feed 	bl	8020768 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801998e:	4b85      	ldr	r3, [pc, #532]	; (8019ba4 <tcp_output+0x248>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	687a      	ldr	r2, [r7, #4]
 8019994:	429a      	cmp	r2, r3
 8019996:	d101      	bne.n	801999c <tcp_output+0x40>
    return ERR_OK;
 8019998:	2300      	movs	r3, #0
 801999a:	e1ce      	b.n	8019d3a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80199a8:	4293      	cmp	r3, r2
 80199aa:	bf28      	it	cs
 80199ac:	4613      	movcs	r3, r2
 80199ae:	b29b      	uxth	r3, r3
 80199b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80199b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d10b      	bne.n	80199d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	8b5b      	ldrh	r3, [r3, #26]
 80199c2:	f003 0302 	and.w	r3, r3, #2
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	f000 81aa 	beq.w	8019d20 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80199cc:	6878      	ldr	r0, [r7, #4]
 80199ce:	f000 fdcb 	bl	801a568 <tcp_send_empty_ack>
 80199d2:	4603      	mov	r3, r0
 80199d4:	e1b1      	b.n	8019d3a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80199d6:	6879      	ldr	r1, [r7, #4]
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	3304      	adds	r3, #4
 80199dc:	461a      	mov	r2, r3
 80199de:	6878      	ldr	r0, [r7, #4]
 80199e0:	f7ff fc7c 	bl	80192dc <tcp_route>
 80199e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80199e6:	697b      	ldr	r3, [r7, #20]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d102      	bne.n	80199f2 <tcp_output+0x96>
    return ERR_RTE;
 80199ec:	f06f 0303 	mvn.w	r3, #3
 80199f0:	e1a3      	b.n	8019d3a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d003      	beq.n	8019a00 <tcp_output+0xa4>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d111      	bne.n	8019a24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d002      	beq.n	8019a0c <tcp_output+0xb0>
 8019a06:	697b      	ldr	r3, [r7, #20]
 8019a08:	3304      	adds	r3, #4
 8019a0a:	e000      	b.n	8019a0e <tcp_output+0xb2>
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019a10:	693b      	ldr	r3, [r7, #16]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d102      	bne.n	8019a1c <tcp_output+0xc0>
      return ERR_RTE;
 8019a16:	f06f 0303 	mvn.w	r3, #3
 8019a1a:	e18e      	b.n	8019d3a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019a1c:	693b      	ldr	r3, [r7, #16]
 8019a1e:	681a      	ldr	r2, [r3, #0]
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	685b      	ldr	r3, [r3, #4]
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f7f9 fe65 	bl	80136fa <lwip_htonl>
 8019a30:	4602      	mov	r2, r0
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a36:	1ad3      	subs	r3, r2, r3
 8019a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a3a:	8912      	ldrh	r2, [r2, #8]
 8019a3c:	4413      	add	r3, r2
 8019a3e:	69ba      	ldr	r2, [r7, #24]
 8019a40:	429a      	cmp	r2, r3
 8019a42:	d227      	bcs.n	8019a94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	69bb      	ldr	r3, [r7, #24]
 8019a4e:	4293      	cmp	r3, r2
 8019a50:	d114      	bne.n	8019a7c <tcp_output+0x120>
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d110      	bne.n	8019a7c <tcp_output+0x120>
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d10b      	bne.n	8019a7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	2200      	movs	r2, #0
 8019a68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	2201      	movs	r2, #1
 8019a70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	2200      	movs	r2, #0
 8019a78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	8b5b      	ldrh	r3, [r3, #26]
 8019a80:	f003 0302 	and.w	r3, r3, #2
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	f000 814d 	beq.w	8019d24 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019a8a:	6878      	ldr	r0, [r7, #4]
 8019a8c:	f000 fd6c 	bl	801a568 <tcp_send_empty_ack>
 8019a90:	4603      	mov	r3, r0
 8019a92:	e152      	b.n	8019d3a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	2200      	movs	r2, #0
 8019a98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019aa0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019aa2:	6a3b      	ldr	r3, [r7, #32]
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	f000 811c 	beq.w	8019ce2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019aaa:	e002      	b.n	8019ab2 <tcp_output+0x156>
 8019aac:	6a3b      	ldr	r3, [r7, #32]
 8019aae:	681b      	ldr	r3, [r3, #0]
 8019ab0:	623b      	str	r3, [r7, #32]
 8019ab2:	6a3b      	ldr	r3, [r7, #32]
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d1f8      	bne.n	8019aac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019aba:	e112      	b.n	8019ce2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019abe:	68db      	ldr	r3, [r3, #12]
 8019ac0:	899b      	ldrh	r3, [r3, #12]
 8019ac2:	b29b      	uxth	r3, r3
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7f9 fe03 	bl	80136d0 <lwip_htons>
 8019aca:	4603      	mov	r3, r0
 8019acc:	b2db      	uxtb	r3, r3
 8019ace:	f003 0304 	and.w	r3, r3, #4
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d006      	beq.n	8019ae4 <tcp_output+0x188>
 8019ad6:	4b2f      	ldr	r3, [pc, #188]	; (8019b94 <tcp_output+0x238>)
 8019ad8:	f240 5236 	movw	r2, #1334	; 0x536
 8019adc:	4932      	ldr	r1, [pc, #200]	; (8019ba8 <tcp_output+0x24c>)
 8019ade:	482f      	ldr	r0, [pc, #188]	; (8019b9c <tcp_output+0x240>)
 8019ae0:	f006 fe42 	bl	8020768 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d01f      	beq.n	8019b2c <tcp_output+0x1d0>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	8b5b      	ldrh	r3, [r3, #26]
 8019af0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d119      	bne.n	8019b2c <tcp_output+0x1d0>
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d00b      	beq.n	8019b18 <tcp_output+0x1bc>
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d110      	bne.n	8019b2c <tcp_output+0x1d0>
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b0e:	891a      	ldrh	r2, [r3, #8]
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019b14:	429a      	cmp	r2, r3
 8019b16:	d209      	bcs.n	8019b2c <tcp_output+0x1d0>
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d004      	beq.n	8019b2c <tcp_output+0x1d0>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b28:	2b08      	cmp	r3, #8
 8019b2a:	d901      	bls.n	8019b30 <tcp_output+0x1d4>
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	e000      	b.n	8019b32 <tcp_output+0x1d6>
 8019b30:	2300      	movs	r3, #0
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d106      	bne.n	8019b44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	8b5b      	ldrh	r3, [r3, #26]
 8019b3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	f000 80e4 	beq.w	8019d0c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	7d1b      	ldrb	r3, [r3, #20]
 8019b48:	2b02      	cmp	r3, #2
 8019b4a:	d00d      	beq.n	8019b68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	899b      	ldrh	r3, [r3, #12]
 8019b52:	b29c      	uxth	r4, r3
 8019b54:	2010      	movs	r0, #16
 8019b56:	f7f9 fdbb 	bl	80136d0 <lwip_htons>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b60:	68db      	ldr	r3, [r3, #12]
 8019b62:	4322      	orrs	r2, r4
 8019b64:	b292      	uxth	r2, r2
 8019b66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019b68:	697a      	ldr	r2, [r7, #20]
 8019b6a:	6879      	ldr	r1, [r7, #4]
 8019b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b6e:	f000 f909 	bl	8019d84 <tcp_output_segment>
 8019b72:	4603      	mov	r3, r0
 8019b74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	d016      	beq.n	8019bac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	8b5b      	ldrh	r3, [r3, #26]
 8019b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b86:	b29a      	uxth	r2, r3
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	835a      	strh	r2, [r3, #26]
      return err;
 8019b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b90:	e0d3      	b.n	8019d3a <tcp_output+0x3de>
 8019b92:	bf00      	nop
 8019b94:	08022e08 	.word	0x08022e08
 8019b98:	0802334c 	.word	0x0802334c
 8019b9c:	08022e5c 	.word	0x08022e5c
 8019ba0:	08023364 	.word	0x08023364
 8019ba4:	2400cb9c 	.word	0x2400cb9c
 8019ba8:	0802338c 	.word	0x0802338c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bae:	681a      	ldr	r2, [r3, #0]
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	7d1b      	ldrb	r3, [r3, #20]
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d006      	beq.n	8019bca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	8b5b      	ldrh	r3, [r3, #26]
 8019bc0:	f023 0303 	bic.w	r3, r3, #3
 8019bc4:	b29a      	uxth	r2, r3
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bcc:	68db      	ldr	r3, [r3, #12]
 8019bce:	685b      	ldr	r3, [r3, #4]
 8019bd0:	4618      	mov	r0, r3
 8019bd2:	f7f9 fd92 	bl	80136fa <lwip_htonl>
 8019bd6:	4604      	mov	r4, r0
 8019bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bda:	891b      	ldrh	r3, [r3, #8]
 8019bdc:	461d      	mov	r5, r3
 8019bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be0:	68db      	ldr	r3, [r3, #12]
 8019be2:	899b      	ldrh	r3, [r3, #12]
 8019be4:	b29b      	uxth	r3, r3
 8019be6:	4618      	mov	r0, r3
 8019be8:	f7f9 fd72 	bl	80136d0 <lwip_htons>
 8019bec:	4603      	mov	r3, r0
 8019bee:	b2db      	uxtb	r3, r3
 8019bf0:	f003 0303 	and.w	r3, r3, #3
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d001      	beq.n	8019bfc <tcp_output+0x2a0>
 8019bf8:	2301      	movs	r3, #1
 8019bfa:	e000      	b.n	8019bfe <tcp_output+0x2a2>
 8019bfc:	2300      	movs	r3, #0
 8019bfe:	442b      	add	r3, r5
 8019c00:	4423      	add	r3, r4
 8019c02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019c08:	68bb      	ldr	r3, [r7, #8]
 8019c0a:	1ad3      	subs	r3, r2, r3
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	da02      	bge.n	8019c16 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	68ba      	ldr	r2, [r7, #8]
 8019c14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	891b      	ldrh	r3, [r3, #8]
 8019c1a:	461c      	mov	r4, r3
 8019c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c1e:	68db      	ldr	r3, [r3, #12]
 8019c20:	899b      	ldrh	r3, [r3, #12]
 8019c22:	b29b      	uxth	r3, r3
 8019c24:	4618      	mov	r0, r3
 8019c26:	f7f9 fd53 	bl	80136d0 <lwip_htons>
 8019c2a:	4603      	mov	r3, r0
 8019c2c:	b2db      	uxtb	r3, r3
 8019c2e:	f003 0303 	and.w	r3, r3, #3
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d001      	beq.n	8019c3a <tcp_output+0x2de>
 8019c36:	2301      	movs	r3, #1
 8019c38:	e000      	b.n	8019c3c <tcp_output+0x2e0>
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	4423      	add	r3, r4
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d049      	beq.n	8019cd6 <tcp_output+0x37a>
      seg->next = NULL;
 8019c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c44:	2200      	movs	r2, #0
 8019c46:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d105      	bne.n	8019c5c <tcp_output+0x300>
        pcb->unacked = seg;
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c54:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c58:	623b      	str	r3, [r7, #32]
 8019c5a:	e03f      	b.n	8019cdc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c5e:	68db      	ldr	r3, [r3, #12]
 8019c60:	685b      	ldr	r3, [r3, #4]
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f9 fd49 	bl	80136fa <lwip_htonl>
 8019c68:	4604      	mov	r4, r0
 8019c6a:	6a3b      	ldr	r3, [r7, #32]
 8019c6c:	68db      	ldr	r3, [r3, #12]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	4618      	mov	r0, r3
 8019c72:	f7f9 fd42 	bl	80136fa <lwip_htonl>
 8019c76:	4603      	mov	r3, r0
 8019c78:	1ae3      	subs	r3, r4, r3
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	da24      	bge.n	8019cc8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	3370      	adds	r3, #112	; 0x70
 8019c82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c84:	e002      	b.n	8019c8c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019c86:	69fb      	ldr	r3, [r7, #28]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c8c:	69fb      	ldr	r3, [r7, #28]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d011      	beq.n	8019cb8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c94:	69fb      	ldr	r3, [r7, #28]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	68db      	ldr	r3, [r3, #12]
 8019c9a:	685b      	ldr	r3, [r3, #4]
 8019c9c:	4618      	mov	r0, r3
 8019c9e:	f7f9 fd2c 	bl	80136fa <lwip_htonl>
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca6:	68db      	ldr	r3, [r3, #12]
 8019ca8:	685b      	ldr	r3, [r3, #4]
 8019caa:	4618      	mov	r0, r3
 8019cac:	f7f9 fd25 	bl	80136fa <lwip_htonl>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019cb4:	2b00      	cmp	r3, #0
 8019cb6:	dbe6      	blt.n	8019c86 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019cb8:	69fb      	ldr	r3, [r7, #28]
 8019cba:	681a      	ldr	r2, [r3, #0]
 8019cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cbe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019cc0:	69fb      	ldr	r3, [r7, #28]
 8019cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cc4:	601a      	str	r2, [r3, #0]
 8019cc6:	e009      	b.n	8019cdc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019cc8:	6a3b      	ldr	r3, [r7, #32]
 8019cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ccc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019cce:	6a3b      	ldr	r3, [r7, #32]
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	623b      	str	r3, [r7, #32]
 8019cd4:	e002      	b.n	8019cdc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019cd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cd8:	f7fc fc3f 	bl	801655a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ce0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d012      	beq.n	8019d0e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cea:	68db      	ldr	r3, [r3, #12]
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f7f9 fd03 	bl	80136fa <lwip_htonl>
 8019cf4:	4602      	mov	r2, r0
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cfa:	1ad3      	subs	r3, r2, r3
 8019cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cfe:	8912      	ldrh	r2, [r2, #8]
 8019d00:	4413      	add	r3, r2
  while (seg != NULL &&
 8019d02:	69ba      	ldr	r2, [r7, #24]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	f4bf aed9 	bcs.w	8019abc <tcp_output+0x160>
 8019d0a:	e000      	b.n	8019d0e <tcp_output+0x3b2>
      break;
 8019d0c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d108      	bne.n	8019d28 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	2200      	movs	r2, #0
 8019d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019d1e:	e004      	b.n	8019d2a <tcp_output+0x3ce>
    goto output_done;
 8019d20:	bf00      	nop
 8019d22:	e002      	b.n	8019d2a <tcp_output+0x3ce>
    goto output_done;
 8019d24:	bf00      	nop
 8019d26:	e000      	b.n	8019d2a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019d28:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	8b5b      	ldrh	r3, [r3, #26]
 8019d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019d32:	b29a      	uxth	r2, r3
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3728      	adds	r7, #40	; 0x28
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bdb0      	pop	{r4, r5, r7, pc}
 8019d42:	bf00      	nop

08019d44 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b082      	sub	sp, #8
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d106      	bne.n	8019d60 <tcp_output_segment_busy+0x1c>
 8019d52:	4b09      	ldr	r3, [pc, #36]	; (8019d78 <tcp_output_segment_busy+0x34>)
 8019d54:	f240 529a 	movw	r2, #1434	; 0x59a
 8019d58:	4908      	ldr	r1, [pc, #32]	; (8019d7c <tcp_output_segment_busy+0x38>)
 8019d5a:	4809      	ldr	r0, [pc, #36]	; (8019d80 <tcp_output_segment_busy+0x3c>)
 8019d5c:	f006 fd04 	bl	8020768 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	7b9b      	ldrb	r3, [r3, #14]
 8019d66:	2b01      	cmp	r3, #1
 8019d68:	d001      	beq.n	8019d6e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019d6a:	2301      	movs	r3, #1
 8019d6c:	e000      	b.n	8019d70 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019d6e:	2300      	movs	r3, #0
}
 8019d70:	4618      	mov	r0, r3
 8019d72:	3708      	adds	r7, #8
 8019d74:	46bd      	mov	sp, r7
 8019d76:	bd80      	pop	{r7, pc}
 8019d78:	08022e08 	.word	0x08022e08
 8019d7c:	080233a4 	.word	0x080233a4
 8019d80:	08022e5c 	.word	0x08022e5c

08019d84 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019d84:	b5b0      	push	{r4, r5, r7, lr}
 8019d86:	b08c      	sub	sp, #48	; 0x30
 8019d88:	af04      	add	r7, sp, #16
 8019d8a:	60f8      	str	r0, [r7, #12]
 8019d8c:	60b9      	str	r1, [r7, #8]
 8019d8e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d106      	bne.n	8019da4 <tcp_output_segment+0x20>
 8019d96:	4b63      	ldr	r3, [pc, #396]	; (8019f24 <tcp_output_segment+0x1a0>)
 8019d98:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019d9c:	4962      	ldr	r1, [pc, #392]	; (8019f28 <tcp_output_segment+0x1a4>)
 8019d9e:	4863      	ldr	r0, [pc, #396]	; (8019f2c <tcp_output_segment+0x1a8>)
 8019da0:	f006 fce2 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019da4:	68bb      	ldr	r3, [r7, #8]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d106      	bne.n	8019db8 <tcp_output_segment+0x34>
 8019daa:	4b5e      	ldr	r3, [pc, #376]	; (8019f24 <tcp_output_segment+0x1a0>)
 8019dac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019db0:	495f      	ldr	r1, [pc, #380]	; (8019f30 <tcp_output_segment+0x1ac>)
 8019db2:	485e      	ldr	r0, [pc, #376]	; (8019f2c <tcp_output_segment+0x1a8>)
 8019db4:	f006 fcd8 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d106      	bne.n	8019dcc <tcp_output_segment+0x48>
 8019dbe:	4b59      	ldr	r3, [pc, #356]	; (8019f24 <tcp_output_segment+0x1a0>)
 8019dc0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8019dc4:	495b      	ldr	r1, [pc, #364]	; (8019f34 <tcp_output_segment+0x1b0>)
 8019dc6:	4859      	ldr	r0, [pc, #356]	; (8019f2c <tcp_output_segment+0x1a8>)
 8019dc8:	f006 fcce 	bl	8020768 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019dcc:	68f8      	ldr	r0, [r7, #12]
 8019dce:	f7ff ffb9 	bl	8019d44 <tcp_output_segment_busy>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d001      	beq.n	8019ddc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019dd8:	2300      	movs	r3, #0
 8019dda:	e09f      	b.n	8019f1c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019de0:	68fb      	ldr	r3, [r7, #12]
 8019de2:	68dc      	ldr	r4, [r3, #12]
 8019de4:	4610      	mov	r0, r2
 8019de6:	f7f9 fc88 	bl	80136fa <lwip_htonl>
 8019dea:	4603      	mov	r3, r0
 8019dec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	68dc      	ldr	r4, [r3, #12]
 8019df6:	4610      	mov	r0, r2
 8019df8:	f7f9 fc6a 	bl	80136d0 <lwip_htons>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e04:	68ba      	ldr	r2, [r7, #8]
 8019e06:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019e08:	441a      	add	r2, r3
 8019e0a:	68bb      	ldr	r3, [r7, #8]
 8019e0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	3314      	adds	r3, #20
 8019e14:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	7a9b      	ldrb	r3, [r3, #10]
 8019e1a:	f003 0301 	and.w	r3, r3, #1
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d015      	beq.n	8019e4e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019e22:	68bb      	ldr	r3, [r7, #8]
 8019e24:	3304      	adds	r3, #4
 8019e26:	461a      	mov	r2, r3
 8019e28:	6879      	ldr	r1, [r7, #4]
 8019e2a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019e2e:	f7fc fe8b 	bl	8016b48 <tcp_eff_send_mss_netif>
 8019e32:	4603      	mov	r3, r0
 8019e34:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019e36:	8b7b      	ldrh	r3, [r7, #26]
 8019e38:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f9 fc5c 	bl	80136fa <lwip_htonl>
 8019e42:	4602      	mov	r2, r0
 8019e44:	69fb      	ldr	r3, [r7, #28]
 8019e46:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019e48:	69fb      	ldr	r3, [r7, #28]
 8019e4a:	3304      	adds	r3, #4
 8019e4c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	da02      	bge.n	8019e5e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d10c      	bne.n	8019e80 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019e66:	4b34      	ldr	r3, [pc, #208]	; (8019f38 <tcp_output_segment+0x1b4>)
 8019e68:	681a      	ldr	r2, [r3, #0]
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	68db      	ldr	r3, [r3, #12]
 8019e72:	685b      	ldr	r3, [r3, #4]
 8019e74:	4618      	mov	r0, r3
 8019e76:	f7f9 fc40 	bl	80136fa <lwip_htonl>
 8019e7a:	4602      	mov	r2, r0
 8019e7c:	68bb      	ldr	r3, [r7, #8]
 8019e7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	68da      	ldr	r2, [r3, #12]
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	685b      	ldr	r3, [r3, #4]
 8019e8a:	1ad3      	subs	r3, r2, r3
 8019e8c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	685b      	ldr	r3, [r3, #4]
 8019e92:	8959      	ldrh	r1, [r3, #10]
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	685b      	ldr	r3, [r3, #4]
 8019e98:	8b3a      	ldrh	r2, [r7, #24]
 8019e9a:	1a8a      	subs	r2, r1, r2
 8019e9c:	b292      	uxth	r2, r2
 8019e9e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	685b      	ldr	r3, [r3, #4]
 8019ea4:	8919      	ldrh	r1, [r3, #8]
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	685b      	ldr	r3, [r3, #4]
 8019eaa:	8b3a      	ldrh	r2, [r7, #24]
 8019eac:	1a8a      	subs	r2, r1, r2
 8019eae:	b292      	uxth	r2, r2
 8019eb0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	685b      	ldr	r3, [r3, #4]
 8019eb6:	68fa      	ldr	r2, [r7, #12]
 8019eb8:	68d2      	ldr	r2, [r2, #12]
 8019eba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	68db      	ldr	r3, [r3, #12]
 8019ec0:	2200      	movs	r2, #0
 8019ec2:	741a      	strb	r2, [r3, #16]
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	68db      	ldr	r3, [r3, #12]
 8019ecc:	f103 0214 	add.w	r2, r3, #20
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	7a9b      	ldrb	r3, [r3, #10]
 8019ed4:	009b      	lsls	r3, r3, #2
 8019ed6:	f003 0304 	and.w	r3, r3, #4
 8019eda:	4413      	add	r3, r2
 8019edc:	69fa      	ldr	r2, [r7, #28]
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	d006      	beq.n	8019ef0 <tcp_output_segment+0x16c>
 8019ee2:	4b10      	ldr	r3, [pc, #64]	; (8019f24 <tcp_output_segment+0x1a0>)
 8019ee4:	f240 621c 	movw	r2, #1564	; 0x61c
 8019ee8:	4914      	ldr	r1, [pc, #80]	; (8019f3c <tcp_output_segment+0x1b8>)
 8019eea:	4810      	ldr	r0, [pc, #64]	; (8019f2c <tcp_output_segment+0x1a8>)
 8019eec:	f006 fc3c 	bl	8020768 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	6858      	ldr	r0, [r3, #4]
 8019ef4:	68b9      	ldr	r1, [r7, #8]
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	1d1c      	adds	r4, r3, #4
 8019efa:	68bb      	ldr	r3, [r7, #8]
 8019efc:	7add      	ldrb	r5, [r3, #11]
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	7a9b      	ldrb	r3, [r3, #10]
 8019f02:	687a      	ldr	r2, [r7, #4]
 8019f04:	9202      	str	r2, [sp, #8]
 8019f06:	2206      	movs	r2, #6
 8019f08:	9201      	str	r2, [sp, #4]
 8019f0a:	9300      	str	r3, [sp, #0]
 8019f0c:	462b      	mov	r3, r5
 8019f0e:	4622      	mov	r2, r4
 8019f10:	f004 fc44 	bl	801e79c <ip4_output_if>
 8019f14:	4603      	mov	r3, r0
 8019f16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019f18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3720      	adds	r7, #32
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bdb0      	pop	{r4, r5, r7, pc}
 8019f24:	08022e08 	.word	0x08022e08
 8019f28:	080233cc 	.word	0x080233cc
 8019f2c:	08022e5c 	.word	0x08022e5c
 8019f30:	080233ec 	.word	0x080233ec
 8019f34:	0802340c 	.word	0x0802340c
 8019f38:	2400cb50 	.word	0x2400cb50
 8019f3c:	08023430 	.word	0x08023430

08019f40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019f40:	b5b0      	push	{r4, r5, r7, lr}
 8019f42:	b084      	sub	sp, #16
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d106      	bne.n	8019f5c <tcp_rexmit_rto_prepare+0x1c>
 8019f4e:	4b31      	ldr	r3, [pc, #196]	; (801a014 <tcp_rexmit_rto_prepare+0xd4>)
 8019f50:	f240 6263 	movw	r2, #1635	; 0x663
 8019f54:	4930      	ldr	r1, [pc, #192]	; (801a018 <tcp_rexmit_rto_prepare+0xd8>)
 8019f56:	4831      	ldr	r0, [pc, #196]	; (801a01c <tcp_rexmit_rto_prepare+0xdc>)
 8019f58:	f006 fc06 	bl	8020768 <iprintf>

  if (pcb->unacked == NULL) {
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d102      	bne.n	8019f6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019f64:	f06f 0305 	mvn.w	r3, #5
 8019f68:	e050      	b.n	801a00c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f6e:	60fb      	str	r3, [r7, #12]
 8019f70:	e00b      	b.n	8019f8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019f72:	68f8      	ldr	r0, [r7, #12]
 8019f74:	f7ff fee6 	bl	8019d44 <tcp_output_segment_busy>
 8019f78:	4603      	mov	r3, r0
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d002      	beq.n	8019f84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019f7e:	f06f 0305 	mvn.w	r3, #5
 8019f82:	e043      	b.n	801a00c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	60fb      	str	r3, [r7, #12]
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d1ef      	bne.n	8019f72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019f92:	68f8      	ldr	r0, [r7, #12]
 8019f94:	f7ff fed6 	bl	8019d44 <tcp_output_segment_busy>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d002      	beq.n	8019fa4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019f9e:	f06f 0305 	mvn.w	r3, #5
 8019fa2:	e033      	b.n	801a00c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	8b5b      	ldrh	r3, [r3, #26]
 8019fbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019fc2:	b29a      	uxth	r2, r3
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	68db      	ldr	r3, [r3, #12]
 8019fcc:	685b      	ldr	r3, [r3, #4]
 8019fce:	4618      	mov	r0, r3
 8019fd0:	f7f9 fb93 	bl	80136fa <lwip_htonl>
 8019fd4:	4604      	mov	r4, r0
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	891b      	ldrh	r3, [r3, #8]
 8019fda:	461d      	mov	r5, r3
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	68db      	ldr	r3, [r3, #12]
 8019fe0:	899b      	ldrh	r3, [r3, #12]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7f9 fb73 	bl	80136d0 <lwip_htons>
 8019fea:	4603      	mov	r3, r0
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	f003 0303 	and.w	r3, r3, #3
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d001      	beq.n	8019ffa <tcp_rexmit_rto_prepare+0xba>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	e000      	b.n	8019ffc <tcp_rexmit_rto_prepare+0xbc>
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	442b      	add	r3, r5
 8019ffe:	18e2      	adds	r2, r4, r3
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	2200      	movs	r2, #0
 801a008:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a00a:	2300      	movs	r3, #0
}
 801a00c:	4618      	mov	r0, r3
 801a00e:	3710      	adds	r7, #16
 801a010:	46bd      	mov	sp, r7
 801a012:	bdb0      	pop	{r4, r5, r7, pc}
 801a014:	08022e08 	.word	0x08022e08
 801a018:	08023444 	.word	0x08023444
 801a01c:	08022e5c 	.word	0x08022e5c

0801a020 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d106      	bne.n	801a03c <tcp_rexmit_rto_commit+0x1c>
 801a02e:	4b0d      	ldr	r3, [pc, #52]	; (801a064 <tcp_rexmit_rto_commit+0x44>)
 801a030:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a034:	490c      	ldr	r1, [pc, #48]	; (801a068 <tcp_rexmit_rto_commit+0x48>)
 801a036:	480d      	ldr	r0, [pc, #52]	; (801a06c <tcp_rexmit_rto_commit+0x4c>)
 801a038:	f006 fb96 	bl	8020768 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a042:	2bff      	cmp	r3, #255	; 0xff
 801a044:	d007      	beq.n	801a056 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a04c:	3301      	adds	r3, #1
 801a04e:	b2da      	uxtb	r2, r3
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f7ff fc80 	bl	801995c <tcp_output>
}
 801a05c:	bf00      	nop
 801a05e:	3708      	adds	r7, #8
 801a060:	46bd      	mov	sp, r7
 801a062:	bd80      	pop	{r7, pc}
 801a064:	08022e08 	.word	0x08022e08
 801a068:	08023468 	.word	0x08023468
 801a06c:	08022e5c 	.word	0x08022e5c

0801a070 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d106      	bne.n	801a08c <tcp_rexmit_rto+0x1c>
 801a07e:	4b0a      	ldr	r3, [pc, #40]	; (801a0a8 <tcp_rexmit_rto+0x38>)
 801a080:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a084:	4909      	ldr	r1, [pc, #36]	; (801a0ac <tcp_rexmit_rto+0x3c>)
 801a086:	480a      	ldr	r0, [pc, #40]	; (801a0b0 <tcp_rexmit_rto+0x40>)
 801a088:	f006 fb6e 	bl	8020768 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a08c:	6878      	ldr	r0, [r7, #4]
 801a08e:	f7ff ff57 	bl	8019f40 <tcp_rexmit_rto_prepare>
 801a092:	4603      	mov	r3, r0
 801a094:	2b00      	cmp	r3, #0
 801a096:	d102      	bne.n	801a09e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a098:	6878      	ldr	r0, [r7, #4]
 801a09a:	f7ff ffc1 	bl	801a020 <tcp_rexmit_rto_commit>
  }
}
 801a09e:	bf00      	nop
 801a0a0:	3708      	adds	r7, #8
 801a0a2:	46bd      	mov	sp, r7
 801a0a4:	bd80      	pop	{r7, pc}
 801a0a6:	bf00      	nop
 801a0a8:	08022e08 	.word	0x08022e08
 801a0ac:	0802348c 	.word	0x0802348c
 801a0b0:	08022e5c 	.word	0x08022e5c

0801a0b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a0b4:	b590      	push	{r4, r7, lr}
 801a0b6:	b085      	sub	sp, #20
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d106      	bne.n	801a0d0 <tcp_rexmit+0x1c>
 801a0c2:	4b2f      	ldr	r3, [pc, #188]	; (801a180 <tcp_rexmit+0xcc>)
 801a0c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a0c8:	492e      	ldr	r1, [pc, #184]	; (801a184 <tcp_rexmit+0xd0>)
 801a0ca:	482f      	ldr	r0, [pc, #188]	; (801a188 <tcp_rexmit+0xd4>)
 801a0cc:	f006 fb4c 	bl	8020768 <iprintf>

  if (pcb->unacked == NULL) {
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d102      	bne.n	801a0de <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a0d8:	f06f 0305 	mvn.w	r3, #5
 801a0dc:	e04c      	b.n	801a178 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a0e4:	68b8      	ldr	r0, [r7, #8]
 801a0e6:	f7ff fe2d 	bl	8019d44 <tcp_output_segment_busy>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d002      	beq.n	801a0f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a0f0:	f06f 0305 	mvn.w	r3, #5
 801a0f4:	e040      	b.n	801a178 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a0f6:	68bb      	ldr	r3, [r7, #8]
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	336c      	adds	r3, #108	; 0x6c
 801a102:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a104:	e002      	b.n	801a10c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d011      	beq.n	801a138 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	685b      	ldr	r3, [r3, #4]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7f9 faec 	bl	80136fa <lwip_htonl>
 801a122:	4604      	mov	r4, r0
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	68db      	ldr	r3, [r3, #12]
 801a128:	685b      	ldr	r3, [r3, #4]
 801a12a:	4618      	mov	r0, r3
 801a12c:	f7f9 fae5 	bl	80136fa <lwip_htonl>
 801a130:	4603      	mov	r3, r0
 801a132:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a134:	2b00      	cmp	r3, #0
 801a136:	dbe6      	blt.n	801a106 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	68bb      	ldr	r3, [r7, #8]
 801a13e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	68ba      	ldr	r2, [r7, #8]
 801a144:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d103      	bne.n	801a156 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	2200      	movs	r2, #0
 801a152:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a15c:	2bff      	cmp	r3, #255	; 0xff
 801a15e:	d007      	beq.n	801a170 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a160:	687b      	ldr	r3, [r7, #4]
 801a162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a166:	3301      	adds	r3, #1
 801a168:	b2da      	uxtb	r2, r3
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	2200      	movs	r2, #0
 801a174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a176:	2300      	movs	r3, #0
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3714      	adds	r7, #20
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd90      	pop	{r4, r7, pc}
 801a180:	08022e08 	.word	0x08022e08
 801a184:	080234a8 	.word	0x080234a8
 801a188:	08022e5c 	.word	0x08022e5c

0801a18c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	2b00      	cmp	r3, #0
 801a198:	d106      	bne.n	801a1a8 <tcp_rexmit_fast+0x1c>
 801a19a:	4b2a      	ldr	r3, [pc, #168]	; (801a244 <tcp_rexmit_fast+0xb8>)
 801a19c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a1a0:	4929      	ldr	r1, [pc, #164]	; (801a248 <tcp_rexmit_fast+0xbc>)
 801a1a2:	482a      	ldr	r0, [pc, #168]	; (801a24c <tcp_rexmit_fast+0xc0>)
 801a1a4:	f006 fae0 	bl	8020768 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d045      	beq.n	801a23c <tcp_rexmit_fast+0xb0>
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	8b5b      	ldrh	r3, [r3, #26]
 801a1b4:	f003 0304 	and.w	r3, r3, #4
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d13f      	bne.n	801a23c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f7ff ff79 	bl	801a0b4 <tcp_rexmit>
 801a1c2:	4603      	mov	r3, r0
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d139      	bne.n	801a23c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a1d4:	4293      	cmp	r3, r2
 801a1d6:	bf28      	it	cs
 801a1d8:	4613      	movcs	r3, r2
 801a1da:	b29b      	uxth	r3, r3
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	da00      	bge.n	801a1e2 <tcp_rexmit_fast+0x56>
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	105b      	asrs	r3, r3, #1
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a1f2:	461a      	mov	r2, r3
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1f8:	005b      	lsls	r3, r3, #1
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	d206      	bcs.n	801a20c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a202:	005b      	lsls	r3, r3, #1
 801a204:	b29a      	uxth	r2, r3
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a216:	4619      	mov	r1, r3
 801a218:	0049      	lsls	r1, r1, #1
 801a21a:	440b      	add	r3, r1
 801a21c:	b29b      	uxth	r3, r3
 801a21e:	4413      	add	r3, r2
 801a220:	b29a      	uxth	r2, r3
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	8b5b      	ldrh	r3, [r3, #26]
 801a22c:	f043 0304 	orr.w	r3, r3, #4
 801a230:	b29a      	uxth	r2, r3
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	2200      	movs	r2, #0
 801a23a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a23c:	bf00      	nop
 801a23e:	3708      	adds	r7, #8
 801a240:	46bd      	mov	sp, r7
 801a242:	bd80      	pop	{r7, pc}
 801a244:	08022e08 	.word	0x08022e08
 801a248:	080234c0 	.word	0x080234c0
 801a24c:	08022e5c 	.word	0x08022e5c

0801a250 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a250:	b580      	push	{r7, lr}
 801a252:	b086      	sub	sp, #24
 801a254:	af00      	add	r7, sp, #0
 801a256:	60f8      	str	r0, [r7, #12]
 801a258:	607b      	str	r3, [r7, #4]
 801a25a:	460b      	mov	r3, r1
 801a25c:	817b      	strh	r3, [r7, #10]
 801a25e:	4613      	mov	r3, r2
 801a260:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a262:	897a      	ldrh	r2, [r7, #10]
 801a264:	893b      	ldrh	r3, [r7, #8]
 801a266:	4413      	add	r3, r2
 801a268:	b29b      	uxth	r3, r3
 801a26a:	3314      	adds	r3, #20
 801a26c:	b29b      	uxth	r3, r3
 801a26e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a272:	4619      	mov	r1, r3
 801a274:	2022      	movs	r0, #34	; 0x22
 801a276:	f7fa fbfd 	bl	8014a74 <pbuf_alloc>
 801a27a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a27c:	697b      	ldr	r3, [r7, #20]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d04d      	beq.n	801a31e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a282:	897b      	ldrh	r3, [r7, #10]
 801a284:	3313      	adds	r3, #19
 801a286:	697a      	ldr	r2, [r7, #20]
 801a288:	8952      	ldrh	r2, [r2, #10]
 801a28a:	4293      	cmp	r3, r2
 801a28c:	db06      	blt.n	801a29c <tcp_output_alloc_header_common+0x4c>
 801a28e:	4b26      	ldr	r3, [pc, #152]	; (801a328 <tcp_output_alloc_header_common+0xd8>)
 801a290:	f240 7223 	movw	r2, #1827	; 0x723
 801a294:	4925      	ldr	r1, [pc, #148]	; (801a32c <tcp_output_alloc_header_common+0xdc>)
 801a296:	4826      	ldr	r0, [pc, #152]	; (801a330 <tcp_output_alloc_header_common+0xe0>)
 801a298:	f006 fa66 	bl	8020768 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a29c:	697b      	ldr	r3, [r7, #20]
 801a29e:	685b      	ldr	r3, [r3, #4]
 801a2a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a2a2:	8c3b      	ldrh	r3, [r7, #32]
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7f9 fa13 	bl	80136d0 <lwip_htons>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	693b      	ldr	r3, [r7, #16]
 801a2b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a2b4:	4618      	mov	r0, r3
 801a2b6:	f7f9 fa0b 	bl	80136d0 <lwip_htons>
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	461a      	mov	r2, r3
 801a2be:	693b      	ldr	r3, [r7, #16]
 801a2c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a2c2:	693b      	ldr	r3, [r7, #16]
 801a2c4:	687a      	ldr	r2, [r7, #4]
 801a2c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a2c8:	68f8      	ldr	r0, [r7, #12]
 801a2ca:	f7f9 fa16 	bl	80136fa <lwip_htonl>
 801a2ce:	4602      	mov	r2, r0
 801a2d0:	693b      	ldr	r3, [r7, #16]
 801a2d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a2d4:	897b      	ldrh	r3, [r7, #10]
 801a2d6:	089b      	lsrs	r3, r3, #2
 801a2d8:	b29b      	uxth	r3, r3
 801a2da:	3305      	adds	r3, #5
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	031b      	lsls	r3, r3, #12
 801a2e0:	b29a      	uxth	r2, r3
 801a2e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a2e6:	b29b      	uxth	r3, r3
 801a2e8:	4313      	orrs	r3, r2
 801a2ea:	b29b      	uxth	r3, r3
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	f7f9 f9ef 	bl	80136d0 <lwip_htons>
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	461a      	mov	r2, r3
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a2fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	f7f9 f9e7 	bl	80136d0 <lwip_htons>
 801a302:	4603      	mov	r3, r0
 801a304:	461a      	mov	r2, r3
 801a306:	693b      	ldr	r3, [r7, #16]
 801a308:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a30a:	693b      	ldr	r3, [r7, #16]
 801a30c:	2200      	movs	r2, #0
 801a30e:	741a      	strb	r2, [r3, #16]
 801a310:	2200      	movs	r2, #0
 801a312:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a314:	693b      	ldr	r3, [r7, #16]
 801a316:	2200      	movs	r2, #0
 801a318:	749a      	strb	r2, [r3, #18]
 801a31a:	2200      	movs	r2, #0
 801a31c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a31e:	697b      	ldr	r3, [r7, #20]
}
 801a320:	4618      	mov	r0, r3
 801a322:	3718      	adds	r7, #24
 801a324:	46bd      	mov	sp, r7
 801a326:	bd80      	pop	{r7, pc}
 801a328:	08022e08 	.word	0x08022e08
 801a32c:	080234e0 	.word	0x080234e0
 801a330:	08022e5c 	.word	0x08022e5c

0801a334 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a334:	b5b0      	push	{r4, r5, r7, lr}
 801a336:	b08a      	sub	sp, #40	; 0x28
 801a338:	af04      	add	r7, sp, #16
 801a33a:	60f8      	str	r0, [r7, #12]
 801a33c:	607b      	str	r3, [r7, #4]
 801a33e:	460b      	mov	r3, r1
 801a340:	817b      	strh	r3, [r7, #10]
 801a342:	4613      	mov	r3, r2
 801a344:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d106      	bne.n	801a35a <tcp_output_alloc_header+0x26>
 801a34c:	4b15      	ldr	r3, [pc, #84]	; (801a3a4 <tcp_output_alloc_header+0x70>)
 801a34e:	f240 7242 	movw	r2, #1858	; 0x742
 801a352:	4915      	ldr	r1, [pc, #84]	; (801a3a8 <tcp_output_alloc_header+0x74>)
 801a354:	4815      	ldr	r0, [pc, #84]	; (801a3ac <tcp_output_alloc_header+0x78>)
 801a356:	f006 fa07 	bl	8020768 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a35e:	68fb      	ldr	r3, [r7, #12]
 801a360:	8adb      	ldrh	r3, [r3, #22]
 801a362:	68fa      	ldr	r2, [r7, #12]
 801a364:	8b12      	ldrh	r2, [r2, #24]
 801a366:	68f9      	ldr	r1, [r7, #12]
 801a368:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a36a:	893d      	ldrh	r5, [r7, #8]
 801a36c:	897c      	ldrh	r4, [r7, #10]
 801a36e:	9103      	str	r1, [sp, #12]
 801a370:	2110      	movs	r1, #16
 801a372:	9102      	str	r1, [sp, #8]
 801a374:	9201      	str	r2, [sp, #4]
 801a376:	9300      	str	r3, [sp, #0]
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	462a      	mov	r2, r5
 801a37c:	4621      	mov	r1, r4
 801a37e:	f7ff ff67 	bl	801a250 <tcp_output_alloc_header_common>
 801a382:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a384:	697b      	ldr	r3, [r7, #20]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d006      	beq.n	801a398 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a38a:	68fb      	ldr	r3, [r7, #12]
 801a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a38e:	68fa      	ldr	r2, [r7, #12]
 801a390:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a392:	441a      	add	r2, r3
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a398:	697b      	ldr	r3, [r7, #20]
}
 801a39a:	4618      	mov	r0, r3
 801a39c:	3718      	adds	r7, #24
 801a39e:	46bd      	mov	sp, r7
 801a3a0:	bdb0      	pop	{r4, r5, r7, pc}
 801a3a2:	bf00      	nop
 801a3a4:	08022e08 	.word	0x08022e08
 801a3a8:	08023510 	.word	0x08023510
 801a3ac:	08022e5c 	.word	0x08022e5c

0801a3b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b088      	sub	sp, #32
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	60f8      	str	r0, [r7, #12]
 801a3b8:	60b9      	str	r1, [r7, #8]
 801a3ba:	4611      	mov	r1, r2
 801a3bc:	461a      	mov	r2, r3
 801a3be:	460b      	mov	r3, r1
 801a3c0:	71fb      	strb	r3, [r7, #7]
 801a3c2:	4613      	mov	r3, r2
 801a3c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a3ca:	68bb      	ldr	r3, [r7, #8]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d106      	bne.n	801a3de <tcp_output_fill_options+0x2e>
 801a3d0:	4b13      	ldr	r3, [pc, #76]	; (801a420 <tcp_output_fill_options+0x70>)
 801a3d2:	f240 7256 	movw	r2, #1878	; 0x756
 801a3d6:	4913      	ldr	r1, [pc, #76]	; (801a424 <tcp_output_fill_options+0x74>)
 801a3d8:	4813      	ldr	r0, [pc, #76]	; (801a428 <tcp_output_fill_options+0x78>)
 801a3da:	f006 f9c5 	bl	8020768 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	685b      	ldr	r3, [r3, #4]
 801a3e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a3e4:	69bb      	ldr	r3, [r7, #24]
 801a3e6:	3314      	adds	r3, #20
 801a3e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a3ea:	69bb      	ldr	r3, [r7, #24]
 801a3ec:	f103 0214 	add.w	r2, r3, #20
 801a3f0:	8bfb      	ldrh	r3, [r7, #30]
 801a3f2:	009b      	lsls	r3, r3, #2
 801a3f4:	4619      	mov	r1, r3
 801a3f6:	79fb      	ldrb	r3, [r7, #7]
 801a3f8:	009b      	lsls	r3, r3, #2
 801a3fa:	f003 0304 	and.w	r3, r3, #4
 801a3fe:	440b      	add	r3, r1
 801a400:	4413      	add	r3, r2
 801a402:	697a      	ldr	r2, [r7, #20]
 801a404:	429a      	cmp	r2, r3
 801a406:	d006      	beq.n	801a416 <tcp_output_fill_options+0x66>
 801a408:	4b05      	ldr	r3, [pc, #20]	; (801a420 <tcp_output_fill_options+0x70>)
 801a40a:	f240 7275 	movw	r2, #1909	; 0x775
 801a40e:	4907      	ldr	r1, [pc, #28]	; (801a42c <tcp_output_fill_options+0x7c>)
 801a410:	4805      	ldr	r0, [pc, #20]	; (801a428 <tcp_output_fill_options+0x78>)
 801a412:	f006 f9a9 	bl	8020768 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a416:	bf00      	nop
 801a418:	3720      	adds	r7, #32
 801a41a:	46bd      	mov	sp, r7
 801a41c:	bd80      	pop	{r7, pc}
 801a41e:	bf00      	nop
 801a420:	08022e08 	.word	0x08022e08
 801a424:	08023538 	.word	0x08023538
 801a428:	08022e5c 	.word	0x08022e5c
 801a42c:	08023430 	.word	0x08023430

0801a430 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a430:	b580      	push	{r7, lr}
 801a432:	b08a      	sub	sp, #40	; 0x28
 801a434:	af04      	add	r7, sp, #16
 801a436:	60f8      	str	r0, [r7, #12]
 801a438:	60b9      	str	r1, [r7, #8]
 801a43a:	607a      	str	r2, [r7, #4]
 801a43c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a43e:	68bb      	ldr	r3, [r7, #8]
 801a440:	2b00      	cmp	r3, #0
 801a442:	d106      	bne.n	801a452 <tcp_output_control_segment+0x22>
 801a444:	4b1c      	ldr	r3, [pc, #112]	; (801a4b8 <tcp_output_control_segment+0x88>)
 801a446:	f240 7287 	movw	r2, #1927	; 0x787
 801a44a:	491c      	ldr	r1, [pc, #112]	; (801a4bc <tcp_output_control_segment+0x8c>)
 801a44c:	481c      	ldr	r0, [pc, #112]	; (801a4c0 <tcp_output_control_segment+0x90>)
 801a44e:	f006 f98b 	bl	8020768 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a452:	683a      	ldr	r2, [r7, #0]
 801a454:	6879      	ldr	r1, [r7, #4]
 801a456:	68f8      	ldr	r0, [r7, #12]
 801a458:	f7fe ff40 	bl	80192dc <tcp_route>
 801a45c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	2b00      	cmp	r3, #0
 801a462:	d102      	bne.n	801a46a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a464:	23fc      	movs	r3, #252	; 0xfc
 801a466:	75fb      	strb	r3, [r7, #23]
 801a468:	e01c      	b.n	801a4a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d006      	beq.n	801a47e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	7adb      	ldrb	r3, [r3, #11]
 801a474:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a476:	68fb      	ldr	r3, [r7, #12]
 801a478:	7a9b      	ldrb	r3, [r3, #10]
 801a47a:	757b      	strb	r3, [r7, #21]
 801a47c:	e003      	b.n	801a486 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a47e:	23ff      	movs	r3, #255	; 0xff
 801a480:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a482:	2300      	movs	r3, #0
 801a484:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a486:	7dba      	ldrb	r2, [r7, #22]
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	9302      	str	r3, [sp, #8]
 801a48c:	2306      	movs	r3, #6
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	7d7b      	ldrb	r3, [r7, #21]
 801a492:	9300      	str	r3, [sp, #0]
 801a494:	4613      	mov	r3, r2
 801a496:	683a      	ldr	r2, [r7, #0]
 801a498:	6879      	ldr	r1, [r7, #4]
 801a49a:	68b8      	ldr	r0, [r7, #8]
 801a49c:	f004 f97e 	bl	801e79c <ip4_output_if>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a4a4:	68b8      	ldr	r0, [r7, #8]
 801a4a6:	f7fa fdc9 	bl	801503c <pbuf_free>
  return err;
 801a4aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a4ae:	4618      	mov	r0, r3
 801a4b0:	3718      	adds	r7, #24
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	bd80      	pop	{r7, pc}
 801a4b6:	bf00      	nop
 801a4b8:	08022e08 	.word	0x08022e08
 801a4bc:	08023560 	.word	0x08023560
 801a4c0:	08022e5c 	.word	0x08022e5c

0801a4c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a4c4:	b590      	push	{r4, r7, lr}
 801a4c6:	b08b      	sub	sp, #44	; 0x2c
 801a4c8:	af04      	add	r7, sp, #16
 801a4ca:	60f8      	str	r0, [r7, #12]
 801a4cc:	60b9      	str	r1, [r7, #8]
 801a4ce:	607a      	str	r2, [r7, #4]
 801a4d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a4d2:	683b      	ldr	r3, [r7, #0]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d106      	bne.n	801a4e6 <tcp_rst+0x22>
 801a4d8:	4b1f      	ldr	r3, [pc, #124]	; (801a558 <tcp_rst+0x94>)
 801a4da:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a4de:	491f      	ldr	r1, [pc, #124]	; (801a55c <tcp_rst+0x98>)
 801a4e0:	481f      	ldr	r0, [pc, #124]	; (801a560 <tcp_rst+0x9c>)
 801a4e2:	f006 f941 	bl	8020768 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d106      	bne.n	801a4fa <tcp_rst+0x36>
 801a4ec:	4b1a      	ldr	r3, [pc, #104]	; (801a558 <tcp_rst+0x94>)
 801a4ee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a4f2:	491c      	ldr	r1, [pc, #112]	; (801a564 <tcp_rst+0xa0>)
 801a4f4:	481a      	ldr	r0, [pc, #104]	; (801a560 <tcp_rst+0x9c>)
 801a4f6:	f006 f937 	bl	8020768 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a4fe:	f246 0308 	movw	r3, #24584	; 0x6008
 801a502:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a504:	7dfb      	ldrb	r3, [r7, #23]
 801a506:	b29c      	uxth	r4, r3
 801a508:	68b8      	ldr	r0, [r7, #8]
 801a50a:	f7f9 f8f6 	bl	80136fa <lwip_htonl>
 801a50e:	4602      	mov	r2, r0
 801a510:	8abb      	ldrh	r3, [r7, #20]
 801a512:	9303      	str	r3, [sp, #12]
 801a514:	2314      	movs	r3, #20
 801a516:	9302      	str	r3, [sp, #8]
 801a518:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a51a:	9301      	str	r3, [sp, #4]
 801a51c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a51e:	9300      	str	r3, [sp, #0]
 801a520:	4613      	mov	r3, r2
 801a522:	2200      	movs	r2, #0
 801a524:	4621      	mov	r1, r4
 801a526:	6878      	ldr	r0, [r7, #4]
 801a528:	f7ff fe92 	bl	801a250 <tcp_output_alloc_header_common>
 801a52c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a52e:	693b      	ldr	r3, [r7, #16]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d00c      	beq.n	801a54e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a534:	7dfb      	ldrb	r3, [r7, #23]
 801a536:	2200      	movs	r2, #0
 801a538:	6939      	ldr	r1, [r7, #16]
 801a53a:	68f8      	ldr	r0, [r7, #12]
 801a53c:	f7ff ff38 	bl	801a3b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a542:	683a      	ldr	r2, [r7, #0]
 801a544:	6939      	ldr	r1, [r7, #16]
 801a546:	68f8      	ldr	r0, [r7, #12]
 801a548:	f7ff ff72 	bl	801a430 <tcp_output_control_segment>
 801a54c:	e000      	b.n	801a550 <tcp_rst+0x8c>
    return;
 801a54e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a550:	371c      	adds	r7, #28
 801a552:	46bd      	mov	sp, r7
 801a554:	bd90      	pop	{r4, r7, pc}
 801a556:	bf00      	nop
 801a558:	08022e08 	.word	0x08022e08
 801a55c:	0802358c 	.word	0x0802358c
 801a560:	08022e5c 	.word	0x08022e5c
 801a564:	080235a8 	.word	0x080235a8

0801a568 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a568:	b590      	push	{r4, r7, lr}
 801a56a:	b087      	sub	sp, #28
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a570:	2300      	movs	r3, #0
 801a572:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a574:	2300      	movs	r3, #0
 801a576:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d106      	bne.n	801a58c <tcp_send_empty_ack+0x24>
 801a57e:	4b28      	ldr	r3, [pc, #160]	; (801a620 <tcp_send_empty_ack+0xb8>)
 801a580:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a584:	4927      	ldr	r1, [pc, #156]	; (801a624 <tcp_send_empty_ack+0xbc>)
 801a586:	4828      	ldr	r0, [pc, #160]	; (801a628 <tcp_send_empty_ack+0xc0>)
 801a588:	f006 f8ee 	bl	8020768 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a58c:	7dfb      	ldrb	r3, [r7, #23]
 801a58e:	009b      	lsls	r3, r3, #2
 801a590:	b2db      	uxtb	r3, r3
 801a592:	f003 0304 	and.w	r3, r3, #4
 801a596:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a598:	7d7b      	ldrb	r3, [r7, #21]
 801a59a:	b29c      	uxth	r4, r3
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f7f9 f8aa 	bl	80136fa <lwip_htonl>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	4621      	mov	r1, r4
 801a5ac:	6878      	ldr	r0, [r7, #4]
 801a5ae:	f7ff fec1 	bl	801a334 <tcp_output_alloc_header>
 801a5b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a5b4:	693b      	ldr	r3, [r7, #16]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d109      	bne.n	801a5ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	8b5b      	ldrh	r3, [r3, #26]
 801a5be:	f043 0303 	orr.w	r3, r3, #3
 801a5c2:	b29a      	uxth	r2, r3
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a5c8:	f06f 0301 	mvn.w	r3, #1
 801a5cc:	e023      	b.n	801a616 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a5ce:	7dbb      	ldrb	r3, [r7, #22]
 801a5d0:	7dfa      	ldrb	r2, [r7, #23]
 801a5d2:	6939      	ldr	r1, [r7, #16]
 801a5d4:	6878      	ldr	r0, [r7, #4]
 801a5d6:	f7ff feeb 	bl	801a3b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a5da:	687a      	ldr	r2, [r7, #4]
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	3304      	adds	r3, #4
 801a5e0:	6939      	ldr	r1, [r7, #16]
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	f7ff ff24 	bl	801a430 <tcp_output_control_segment>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d007      	beq.n	801a604 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	8b5b      	ldrh	r3, [r3, #26]
 801a5f8:	f043 0303 	orr.w	r3, r3, #3
 801a5fc:	b29a      	uxth	r2, r3
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	835a      	strh	r2, [r3, #26]
 801a602:	e006      	b.n	801a612 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	8b5b      	ldrh	r3, [r3, #26]
 801a608:	f023 0303 	bic.w	r3, r3, #3
 801a60c:	b29a      	uxth	r2, r3
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a612:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a616:	4618      	mov	r0, r3
 801a618:	371c      	adds	r7, #28
 801a61a:	46bd      	mov	sp, r7
 801a61c:	bd90      	pop	{r4, r7, pc}
 801a61e:	bf00      	nop
 801a620:	08022e08 	.word	0x08022e08
 801a624:	080235c4 	.word	0x080235c4
 801a628:	08022e5c 	.word	0x08022e5c

0801a62c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a62c:	b590      	push	{r4, r7, lr}
 801a62e:	b087      	sub	sp, #28
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a634:	2300      	movs	r3, #0
 801a636:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d106      	bne.n	801a64c <tcp_keepalive+0x20>
 801a63e:	4b18      	ldr	r3, [pc, #96]	; (801a6a0 <tcp_keepalive+0x74>)
 801a640:	f640 0224 	movw	r2, #2084	; 0x824
 801a644:	4917      	ldr	r1, [pc, #92]	; (801a6a4 <tcp_keepalive+0x78>)
 801a646:	4818      	ldr	r0, [pc, #96]	; (801a6a8 <tcp_keepalive+0x7c>)
 801a648:	f006 f88e 	bl	8020768 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a64c:	7dfb      	ldrb	r3, [r7, #23]
 801a64e:	b29c      	uxth	r4, r3
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a654:	3b01      	subs	r3, #1
 801a656:	4618      	mov	r0, r3
 801a658:	f7f9 f84f 	bl	80136fa <lwip_htonl>
 801a65c:	4603      	mov	r3, r0
 801a65e:	2200      	movs	r2, #0
 801a660:	4621      	mov	r1, r4
 801a662:	6878      	ldr	r0, [r7, #4]
 801a664:	f7ff fe66 	bl	801a334 <tcp_output_alloc_header>
 801a668:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a66a:	693b      	ldr	r3, [r7, #16]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d102      	bne.n	801a676 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a670:	f04f 33ff 	mov.w	r3, #4294967295
 801a674:	e010      	b.n	801a698 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a676:	7dfb      	ldrb	r3, [r7, #23]
 801a678:	2200      	movs	r2, #0
 801a67a:	6939      	ldr	r1, [r7, #16]
 801a67c:	6878      	ldr	r0, [r7, #4]
 801a67e:	f7ff fe97 	bl	801a3b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a682:	687a      	ldr	r2, [r7, #4]
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	3304      	adds	r3, #4
 801a688:	6939      	ldr	r1, [r7, #16]
 801a68a:	6878      	ldr	r0, [r7, #4]
 801a68c:	f7ff fed0 	bl	801a430 <tcp_output_control_segment>
 801a690:	4603      	mov	r3, r0
 801a692:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a698:	4618      	mov	r0, r3
 801a69a:	371c      	adds	r7, #28
 801a69c:	46bd      	mov	sp, r7
 801a69e:	bd90      	pop	{r4, r7, pc}
 801a6a0:	08022e08 	.word	0x08022e08
 801a6a4:	080235e4 	.word	0x080235e4
 801a6a8:	08022e5c 	.word	0x08022e5c

0801a6ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a6ac:	b590      	push	{r4, r7, lr}
 801a6ae:	b08b      	sub	sp, #44	; 0x2c
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d106      	bne.n	801a6ce <tcp_zero_window_probe+0x22>
 801a6c0:	4b4c      	ldr	r3, [pc, #304]	; (801a7f4 <tcp_zero_window_probe+0x148>)
 801a6c2:	f640 024f 	movw	r2, #2127	; 0x84f
 801a6c6:	494c      	ldr	r1, [pc, #304]	; (801a7f8 <tcp_zero_window_probe+0x14c>)
 801a6c8:	484c      	ldr	r0, [pc, #304]	; (801a7fc <tcp_zero_window_probe+0x150>)
 801a6ca:	f006 f84d 	bl	8020768 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a6d4:	6a3b      	ldr	r3, [r7, #32]
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d101      	bne.n	801a6de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a6da:	2300      	movs	r3, #0
 801a6dc:	e086      	b.n	801a7ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a6e4:	2bff      	cmp	r3, #255	; 0xff
 801a6e6:	d007      	beq.n	801a6f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a6ee:	3301      	adds	r3, #1
 801a6f0:	b2da      	uxtb	r2, r3
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a6f8:	6a3b      	ldr	r3, [r7, #32]
 801a6fa:	68db      	ldr	r3, [r3, #12]
 801a6fc:	899b      	ldrh	r3, [r3, #12]
 801a6fe:	b29b      	uxth	r3, r3
 801a700:	4618      	mov	r0, r3
 801a702:	f7f8 ffe5 	bl	80136d0 <lwip_htons>
 801a706:	4603      	mov	r3, r0
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	f003 0301 	and.w	r3, r3, #1
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d005      	beq.n	801a71e <tcp_zero_window_probe+0x72>
 801a712:	6a3b      	ldr	r3, [r7, #32]
 801a714:	891b      	ldrh	r3, [r3, #8]
 801a716:	2b00      	cmp	r3, #0
 801a718:	d101      	bne.n	801a71e <tcp_zero_window_probe+0x72>
 801a71a:	2301      	movs	r3, #1
 801a71c:	e000      	b.n	801a720 <tcp_zero_window_probe+0x74>
 801a71e:	2300      	movs	r3, #0
 801a720:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a722:	7ffb      	ldrb	r3, [r7, #31]
 801a724:	2b00      	cmp	r3, #0
 801a726:	bf0c      	ite	eq
 801a728:	2301      	moveq	r3, #1
 801a72a:	2300      	movne	r3, #0
 801a72c:	b2db      	uxtb	r3, r3
 801a72e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a734:	b299      	uxth	r1, r3
 801a736:	6a3b      	ldr	r3, [r7, #32]
 801a738:	68db      	ldr	r3, [r3, #12]
 801a73a:	685b      	ldr	r3, [r3, #4]
 801a73c:	8bba      	ldrh	r2, [r7, #28]
 801a73e:	6878      	ldr	r0, [r7, #4]
 801a740:	f7ff fdf8 	bl	801a334 <tcp_output_alloc_header>
 801a744:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a746:	69bb      	ldr	r3, [r7, #24]
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d102      	bne.n	801a752 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a74c:	f04f 33ff 	mov.w	r3, #4294967295
 801a750:	e04c      	b.n	801a7ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a752:	69bb      	ldr	r3, [r7, #24]
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a758:	7ffb      	ldrb	r3, [r7, #31]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d011      	beq.n	801a782 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	899b      	ldrh	r3, [r3, #12]
 801a762:	b29b      	uxth	r3, r3
 801a764:	b21b      	sxth	r3, r3
 801a766:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a76a:	b21c      	sxth	r4, r3
 801a76c:	2011      	movs	r0, #17
 801a76e:	f7f8 ffaf 	bl	80136d0 <lwip_htons>
 801a772:	4603      	mov	r3, r0
 801a774:	b21b      	sxth	r3, r3
 801a776:	4323      	orrs	r3, r4
 801a778:	b21b      	sxth	r3, r3
 801a77a:	b29a      	uxth	r2, r3
 801a77c:	697b      	ldr	r3, [r7, #20]
 801a77e:	819a      	strh	r2, [r3, #12]
 801a780:	e010      	b.n	801a7a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a782:	69bb      	ldr	r3, [r7, #24]
 801a784:	685b      	ldr	r3, [r3, #4]
 801a786:	3314      	adds	r3, #20
 801a788:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a78a:	6a3b      	ldr	r3, [r7, #32]
 801a78c:	6858      	ldr	r0, [r3, #4]
 801a78e:	6a3b      	ldr	r3, [r7, #32]
 801a790:	685b      	ldr	r3, [r3, #4]
 801a792:	891a      	ldrh	r2, [r3, #8]
 801a794:	6a3b      	ldr	r3, [r7, #32]
 801a796:	891b      	ldrh	r3, [r3, #8]
 801a798:	1ad3      	subs	r3, r2, r3
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	2201      	movs	r2, #1
 801a79e:	6939      	ldr	r1, [r7, #16]
 801a7a0:	f7fa fe52 	bl	8015448 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a7a4:	6a3b      	ldr	r3, [r7, #32]
 801a7a6:	68db      	ldr	r3, [r3, #12]
 801a7a8:	685b      	ldr	r3, [r3, #4]
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	f7f8 ffa5 	bl	80136fa <lwip_htonl>
 801a7b0:	4603      	mov	r3, r0
 801a7b2:	3301      	adds	r3, #1
 801a7b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a7ba:	68fb      	ldr	r3, [r7, #12]
 801a7bc:	1ad3      	subs	r3, r2, r3
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	da02      	bge.n	801a7c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	68fa      	ldr	r2, [r7, #12]
 801a7c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	69b9      	ldr	r1, [r7, #24]
 801a7d0:	6878      	ldr	r0, [r7, #4]
 801a7d2:	f7ff fded 	bl	801a3b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a7d6:	687a      	ldr	r2, [r7, #4]
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	3304      	adds	r3, #4
 801a7dc:	69b9      	ldr	r1, [r7, #24]
 801a7de:	6878      	ldr	r0, [r7, #4]
 801a7e0:	f7ff fe26 	bl	801a430 <tcp_output_control_segment>
 801a7e4:	4603      	mov	r3, r0
 801a7e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a7e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	372c      	adds	r7, #44	; 0x2c
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd90      	pop	{r4, r7, pc}
 801a7f4:	08022e08 	.word	0x08022e08
 801a7f8:	08023600 	.word	0x08023600
 801a7fc:	08022e5c 	.word	0x08022e5c

0801a800 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b082      	sub	sp, #8
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a808:	f7fa ff0c 	bl	8015624 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a80c:	4b0a      	ldr	r3, [pc, #40]	; (801a838 <tcpip_tcp_timer+0x38>)
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	2b00      	cmp	r3, #0
 801a812:	d103      	bne.n	801a81c <tcpip_tcp_timer+0x1c>
 801a814:	4b09      	ldr	r3, [pc, #36]	; (801a83c <tcpip_tcp_timer+0x3c>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d005      	beq.n	801a828 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a81c:	2200      	movs	r2, #0
 801a81e:	4908      	ldr	r1, [pc, #32]	; (801a840 <tcpip_tcp_timer+0x40>)
 801a820:	20fa      	movs	r0, #250	; 0xfa
 801a822:	f000 f8f3 	bl	801aa0c <sys_timeout>
 801a826:	e003      	b.n	801a830 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a828:	4b06      	ldr	r3, [pc, #24]	; (801a844 <tcpip_tcp_timer+0x44>)
 801a82a:	2200      	movs	r2, #0
 801a82c:	601a      	str	r2, [r3, #0]
  }
}
 801a82e:	bf00      	nop
 801a830:	bf00      	nop
 801a832:	3708      	adds	r7, #8
 801a834:	46bd      	mov	sp, r7
 801a836:	bd80      	pop	{r7, pc}
 801a838:	2400cb5c 	.word	0x2400cb5c
 801a83c:	2400cb60 	.word	0x2400cb60
 801a840:	0801a801 	.word	0x0801a801
 801a844:	2400cba8 	.word	0x2400cba8

0801a848 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a84c:	4b0a      	ldr	r3, [pc, #40]	; (801a878 <tcp_timer_needed+0x30>)
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d10f      	bne.n	801a874 <tcp_timer_needed+0x2c>
 801a854:	4b09      	ldr	r3, [pc, #36]	; (801a87c <tcp_timer_needed+0x34>)
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d103      	bne.n	801a864 <tcp_timer_needed+0x1c>
 801a85c:	4b08      	ldr	r3, [pc, #32]	; (801a880 <tcp_timer_needed+0x38>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	2b00      	cmp	r3, #0
 801a862:	d007      	beq.n	801a874 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a864:	4b04      	ldr	r3, [pc, #16]	; (801a878 <tcp_timer_needed+0x30>)
 801a866:	2201      	movs	r2, #1
 801a868:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a86a:	2200      	movs	r2, #0
 801a86c:	4905      	ldr	r1, [pc, #20]	; (801a884 <tcp_timer_needed+0x3c>)
 801a86e:	20fa      	movs	r0, #250	; 0xfa
 801a870:	f000 f8cc 	bl	801aa0c <sys_timeout>
  }
}
 801a874:	bf00      	nop
 801a876:	bd80      	pop	{r7, pc}
 801a878:	2400cba8 	.word	0x2400cba8
 801a87c:	2400cb5c 	.word	0x2400cb5c
 801a880:	2400cb60 	.word	0x2400cb60
 801a884:	0801a801 	.word	0x0801a801

0801a888 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a888:	b580      	push	{r7, lr}
 801a88a:	b086      	sub	sp, #24
 801a88c:	af00      	add	r7, sp, #0
 801a88e:	60f8      	str	r0, [r7, #12]
 801a890:	60b9      	str	r1, [r7, #8]
 801a892:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a894:	200a      	movs	r0, #10
 801a896:	f7f9 fcab 	bl	80141f0 <memp_malloc>
 801a89a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a89c:	693b      	ldr	r3, [r7, #16]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d109      	bne.n	801a8b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d151      	bne.n	801a94c <sys_timeout_abs+0xc4>
 801a8a8:	4b2a      	ldr	r3, [pc, #168]	; (801a954 <sys_timeout_abs+0xcc>)
 801a8aa:	22be      	movs	r2, #190	; 0xbe
 801a8ac:	492a      	ldr	r1, [pc, #168]	; (801a958 <sys_timeout_abs+0xd0>)
 801a8ae:	482b      	ldr	r0, [pc, #172]	; (801a95c <sys_timeout_abs+0xd4>)
 801a8b0:	f005 ff5a 	bl	8020768 <iprintf>
    return;
 801a8b4:	e04a      	b.n	801a94c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a8b6:	693b      	ldr	r3, [r7, #16]
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	68ba      	ldr	r2, [r7, #8]
 801a8c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a8c2:	693b      	ldr	r3, [r7, #16]
 801a8c4:	687a      	ldr	r2, [r7, #4]
 801a8c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a8c8:	693b      	ldr	r3, [r7, #16]
 801a8ca:	68fa      	ldr	r2, [r7, #12]
 801a8cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a8ce:	4b24      	ldr	r3, [pc, #144]	; (801a960 <sys_timeout_abs+0xd8>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d103      	bne.n	801a8de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a8d6:	4a22      	ldr	r2, [pc, #136]	; (801a960 <sys_timeout_abs+0xd8>)
 801a8d8:	693b      	ldr	r3, [r7, #16]
 801a8da:	6013      	str	r3, [r2, #0]
    return;
 801a8dc:	e037      	b.n	801a94e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	685a      	ldr	r2, [r3, #4]
 801a8e2:	4b1f      	ldr	r3, [pc, #124]	; (801a960 <sys_timeout_abs+0xd8>)
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	685b      	ldr	r3, [r3, #4]
 801a8e8:	1ad3      	subs	r3, r2, r3
 801a8ea:	0fdb      	lsrs	r3, r3, #31
 801a8ec:	f003 0301 	and.w	r3, r3, #1
 801a8f0:	b2db      	uxtb	r3, r3
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d007      	beq.n	801a906 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a8f6:	4b1a      	ldr	r3, [pc, #104]	; (801a960 <sys_timeout_abs+0xd8>)
 801a8f8:	681a      	ldr	r2, [r3, #0]
 801a8fa:	693b      	ldr	r3, [r7, #16]
 801a8fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a8fe:	4a18      	ldr	r2, [pc, #96]	; (801a960 <sys_timeout_abs+0xd8>)
 801a900:	693b      	ldr	r3, [r7, #16]
 801a902:	6013      	str	r3, [r2, #0]
 801a904:	e023      	b.n	801a94e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a906:	4b16      	ldr	r3, [pc, #88]	; (801a960 <sys_timeout_abs+0xd8>)
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	617b      	str	r3, [r7, #20]
 801a90c:	e01a      	b.n	801a944 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a90e:	697b      	ldr	r3, [r7, #20]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	2b00      	cmp	r3, #0
 801a914:	d00b      	beq.n	801a92e <sys_timeout_abs+0xa6>
 801a916:	693b      	ldr	r3, [r7, #16]
 801a918:	685a      	ldr	r2, [r3, #4]
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	1ad3      	subs	r3, r2, r3
 801a922:	0fdb      	lsrs	r3, r3, #31
 801a924:	f003 0301 	and.w	r3, r3, #1
 801a928:	b2db      	uxtb	r3, r3
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d007      	beq.n	801a93e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a92e:	697b      	ldr	r3, [r7, #20]
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	693b      	ldr	r3, [r7, #16]
 801a934:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	693a      	ldr	r2, [r7, #16]
 801a93a:	601a      	str	r2, [r3, #0]
        break;
 801a93c:	e007      	b.n	801a94e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a93e:	697b      	ldr	r3, [r7, #20]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	617b      	str	r3, [r7, #20]
 801a944:	697b      	ldr	r3, [r7, #20]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d1e1      	bne.n	801a90e <sys_timeout_abs+0x86>
 801a94a:	e000      	b.n	801a94e <sys_timeout_abs+0xc6>
    return;
 801a94c:	bf00      	nop
      }
    }
  }
}
 801a94e:	3718      	adds	r7, #24
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}
 801a954:	08023624 	.word	0x08023624
 801a958:	08023658 	.word	0x08023658
 801a95c:	08023698 	.word	0x08023698
 801a960:	2400cba0 	.word	0x2400cba0

0801a964 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a964:	b580      	push	{r7, lr}
 801a966:	b086      	sub	sp, #24
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a970:	697b      	ldr	r3, [r7, #20]
 801a972:	685b      	ldr	r3, [r3, #4]
 801a974:	4798      	blx	r3

  now = sys_now();
 801a976:	f7f2 fca7 	bl	800d2c8 <sys_now>
 801a97a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a97c:	697b      	ldr	r3, [r7, #20]
 801a97e:	681a      	ldr	r2, [r3, #0]
 801a980:	4b0f      	ldr	r3, [pc, #60]	; (801a9c0 <lwip_cyclic_timer+0x5c>)
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	4413      	add	r3, r2
 801a986:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a988:	68fa      	ldr	r2, [r7, #12]
 801a98a:	693b      	ldr	r3, [r7, #16]
 801a98c:	1ad3      	subs	r3, r2, r3
 801a98e:	0fdb      	lsrs	r3, r3, #31
 801a990:	f003 0301 	and.w	r3, r3, #1
 801a994:	b2db      	uxtb	r3, r3
 801a996:	2b00      	cmp	r3, #0
 801a998:	d009      	beq.n	801a9ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a99a:	697b      	ldr	r3, [r7, #20]
 801a99c:	681a      	ldr	r2, [r3, #0]
 801a99e:	693b      	ldr	r3, [r7, #16]
 801a9a0:	4413      	add	r3, r2
 801a9a2:	687a      	ldr	r2, [r7, #4]
 801a9a4:	4907      	ldr	r1, [pc, #28]	; (801a9c4 <lwip_cyclic_timer+0x60>)
 801a9a6:	4618      	mov	r0, r3
 801a9a8:	f7ff ff6e 	bl	801a888 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a9ac:	e004      	b.n	801a9b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a9ae:	687a      	ldr	r2, [r7, #4]
 801a9b0:	4904      	ldr	r1, [pc, #16]	; (801a9c4 <lwip_cyclic_timer+0x60>)
 801a9b2:	68f8      	ldr	r0, [r7, #12]
 801a9b4:	f7ff ff68 	bl	801a888 <sys_timeout_abs>
}
 801a9b8:	bf00      	nop
 801a9ba:	3718      	adds	r7, #24
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bd80      	pop	{r7, pc}
 801a9c0:	2400cba4 	.word	0x2400cba4
 801a9c4:	0801a965 	.word	0x0801a965

0801a9c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b082      	sub	sp, #8
 801a9cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9ce:	2301      	movs	r3, #1
 801a9d0:	607b      	str	r3, [r7, #4]
 801a9d2:	e00e      	b.n	801a9f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a9d4:	4a0b      	ldr	r2, [pc, #44]	; (801aa04 <sys_timeouts_init+0x3c>)
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	00db      	lsls	r3, r3, #3
 801a9e0:	4a08      	ldr	r2, [pc, #32]	; (801aa04 <sys_timeouts_init+0x3c>)
 801a9e2:	4413      	add	r3, r2
 801a9e4:	461a      	mov	r2, r3
 801a9e6:	4908      	ldr	r1, [pc, #32]	; (801aa08 <sys_timeouts_init+0x40>)
 801a9e8:	f000 f810 	bl	801aa0c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	607b      	str	r3, [r7, #4]
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	2b04      	cmp	r3, #4
 801a9f6:	d9ed      	bls.n	801a9d4 <sys_timeouts_init+0xc>
  }
}
 801a9f8:	bf00      	nop
 801a9fa:	bf00      	nop
 801a9fc:	3708      	adds	r7, #8
 801a9fe:	46bd      	mov	sp, r7
 801aa00:	bd80      	pop	{r7, pc}
 801aa02:	bf00      	nop
 801aa04:	08024668 	.word	0x08024668
 801aa08:	0801a965 	.word	0x0801a965

0801aa0c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801aa0c:	b580      	push	{r7, lr}
 801aa0e:	b086      	sub	sp, #24
 801aa10:	af00      	add	r7, sp, #0
 801aa12:	60f8      	str	r0, [r7, #12]
 801aa14:	60b9      	str	r1, [r7, #8]
 801aa16:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aa1e:	d306      	bcc.n	801aa2e <sys_timeout+0x22>
 801aa20:	4b0a      	ldr	r3, [pc, #40]	; (801aa4c <sys_timeout+0x40>)
 801aa22:	f240 1229 	movw	r2, #297	; 0x129
 801aa26:	490a      	ldr	r1, [pc, #40]	; (801aa50 <sys_timeout+0x44>)
 801aa28:	480a      	ldr	r0, [pc, #40]	; (801aa54 <sys_timeout+0x48>)
 801aa2a:	f005 fe9d 	bl	8020768 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801aa2e:	f7f2 fc4b 	bl	800d2c8 <sys_now>
 801aa32:	4602      	mov	r2, r0
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	4413      	add	r3, r2
 801aa38:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801aa3a:	687a      	ldr	r2, [r7, #4]
 801aa3c:	68b9      	ldr	r1, [r7, #8]
 801aa3e:	6978      	ldr	r0, [r7, #20]
 801aa40:	f7ff ff22 	bl	801a888 <sys_timeout_abs>
#endif
}
 801aa44:	bf00      	nop
 801aa46:	3718      	adds	r7, #24
 801aa48:	46bd      	mov	sp, r7
 801aa4a:	bd80      	pop	{r7, pc}
 801aa4c:	08023624 	.word	0x08023624
 801aa50:	080236c0 	.word	0x080236c0
 801aa54:	08023698 	.word	0x08023698

0801aa58 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b084      	sub	sp, #16
 801aa5c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801aa5e:	f7f2 fc33 	bl	800d2c8 <sys_now>
 801aa62:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aa64:	4b17      	ldr	r3, [pc, #92]	; (801aac4 <sys_check_timeouts+0x6c>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d022      	beq.n	801aab6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	685b      	ldr	r3, [r3, #4]
 801aa74:	68fa      	ldr	r2, [r7, #12]
 801aa76:	1ad3      	subs	r3, r2, r3
 801aa78:	0fdb      	lsrs	r3, r3, #31
 801aa7a:	f003 0301 	and.w	r3, r3, #1
 801aa7e:	b2db      	uxtb	r3, r3
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d11a      	bne.n	801aaba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801aa84:	68bb      	ldr	r3, [r7, #8]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	4a0e      	ldr	r2, [pc, #56]	; (801aac4 <sys_check_timeouts+0x6c>)
 801aa8a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aa8c:	68bb      	ldr	r3, [r7, #8]
 801aa8e:	689b      	ldr	r3, [r3, #8]
 801aa90:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	68db      	ldr	r3, [r3, #12]
 801aa96:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	685b      	ldr	r3, [r3, #4]
 801aa9c:	4a0a      	ldr	r2, [pc, #40]	; (801aac8 <sys_check_timeouts+0x70>)
 801aa9e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801aaa0:	68b9      	ldr	r1, [r7, #8]
 801aaa2:	200a      	movs	r0, #10
 801aaa4:	f7f9 fc1a 	bl	80142dc <memp_free>
    if (handler != NULL) {
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d0da      	beq.n	801aa64 <sys_check_timeouts+0xc>
      handler(arg);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	6838      	ldr	r0, [r7, #0]
 801aab2:	4798      	blx	r3
  do {
 801aab4:	e7d6      	b.n	801aa64 <sys_check_timeouts+0xc>
      return;
 801aab6:	bf00      	nop
 801aab8:	e000      	b.n	801aabc <sys_check_timeouts+0x64>
      return;
 801aaba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801aabc:	3710      	adds	r7, #16
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}
 801aac2:	bf00      	nop
 801aac4:	2400cba0 	.word	0x2400cba0
 801aac8:	2400cba4 	.word	0x2400cba4

0801aacc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b082      	sub	sp, #8
 801aad0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aad2:	4b16      	ldr	r3, [pc, #88]	; (801ab2c <sys_timeouts_sleeptime+0x60>)
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	2b00      	cmp	r3, #0
 801aad8:	d102      	bne.n	801aae0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801aada:	f04f 33ff 	mov.w	r3, #4294967295
 801aade:	e020      	b.n	801ab22 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801aae0:	f7f2 fbf2 	bl	800d2c8 <sys_now>
 801aae4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801aae6:	4b11      	ldr	r3, [pc, #68]	; (801ab2c <sys_timeouts_sleeptime+0x60>)
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	685a      	ldr	r2, [r3, #4]
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	1ad3      	subs	r3, r2, r3
 801aaf0:	0fdb      	lsrs	r3, r3, #31
 801aaf2:	f003 0301 	and.w	r3, r3, #1
 801aaf6:	b2db      	uxtb	r3, r3
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	d001      	beq.n	801ab00 <sys_timeouts_sleeptime+0x34>
    return 0;
 801aafc:	2300      	movs	r3, #0
 801aafe:	e010      	b.n	801ab22 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ab00:	4b0a      	ldr	r3, [pc, #40]	; (801ab2c <sys_timeouts_sleeptime+0x60>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	685a      	ldr	r2, [r3, #4]
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	1ad3      	subs	r3, r2, r3
 801ab0a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	da06      	bge.n	801ab20 <sys_timeouts_sleeptime+0x54>
 801ab12:	4b07      	ldr	r3, [pc, #28]	; (801ab30 <sys_timeouts_sleeptime+0x64>)
 801ab14:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ab18:	4906      	ldr	r1, [pc, #24]	; (801ab34 <sys_timeouts_sleeptime+0x68>)
 801ab1a:	4807      	ldr	r0, [pc, #28]	; (801ab38 <sys_timeouts_sleeptime+0x6c>)
 801ab1c:	f005 fe24 	bl	8020768 <iprintf>
    return ret;
 801ab20:	683b      	ldr	r3, [r7, #0]
  }
}
 801ab22:	4618      	mov	r0, r3
 801ab24:	3708      	adds	r7, #8
 801ab26:	46bd      	mov	sp, r7
 801ab28:	bd80      	pop	{r7, pc}
 801ab2a:	bf00      	nop
 801ab2c:	2400cba0 	.word	0x2400cba0
 801ab30:	08023624 	.word	0x08023624
 801ab34:	080236f8 	.word	0x080236f8
 801ab38:	08023698 	.word	0x08023698

0801ab3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ab3c:	b580      	push	{r7, lr}
 801ab3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ab40:	f005 fe2a 	bl	8020798 <rand>
 801ab44:	4603      	mov	r3, r0
 801ab46:	b29b      	uxth	r3, r3
 801ab48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab4c:	b29b      	uxth	r3, r3
 801ab4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ab52:	b29a      	uxth	r2, r3
 801ab54:	4b01      	ldr	r3, [pc, #4]	; (801ab5c <udp_init+0x20>)
 801ab56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ab58:	bf00      	nop
 801ab5a:	bd80      	pop	{r7, pc}
 801ab5c:	240000bc 	.word	0x240000bc

0801ab60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ab60:	b480      	push	{r7}
 801ab62:	b083      	sub	sp, #12
 801ab64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ab66:	2300      	movs	r3, #0
 801ab68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ab6a:	4b17      	ldr	r3, [pc, #92]	; (801abc8 <udp_new_port+0x68>)
 801ab6c:	881b      	ldrh	r3, [r3, #0]
 801ab6e:	1c5a      	adds	r2, r3, #1
 801ab70:	b291      	uxth	r1, r2
 801ab72:	4a15      	ldr	r2, [pc, #84]	; (801abc8 <udp_new_port+0x68>)
 801ab74:	8011      	strh	r1, [r2, #0]
 801ab76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d103      	bne.n	801ab86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ab7e:	4b12      	ldr	r3, [pc, #72]	; (801abc8 <udp_new_port+0x68>)
 801ab80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ab84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab86:	4b11      	ldr	r3, [pc, #68]	; (801abcc <udp_new_port+0x6c>)
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	603b      	str	r3, [r7, #0]
 801ab8c:	e011      	b.n	801abb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	8a5a      	ldrh	r2, [r3, #18]
 801ab92:	4b0d      	ldr	r3, [pc, #52]	; (801abc8 <udp_new_port+0x68>)
 801ab94:	881b      	ldrh	r3, [r3, #0]
 801ab96:	429a      	cmp	r2, r3
 801ab98:	d108      	bne.n	801abac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ab9a:	88fb      	ldrh	r3, [r7, #6]
 801ab9c:	3301      	adds	r3, #1
 801ab9e:	80fb      	strh	r3, [r7, #6]
 801aba0:	88fb      	ldrh	r3, [r7, #6]
 801aba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aba6:	d3e0      	bcc.n	801ab6a <udp_new_port+0xa>
        return 0;
 801aba8:	2300      	movs	r3, #0
 801abaa:	e007      	b.n	801abbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	68db      	ldr	r3, [r3, #12]
 801abb0:	603b      	str	r3, [r7, #0]
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	d1ea      	bne.n	801ab8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801abb8:	4b03      	ldr	r3, [pc, #12]	; (801abc8 <udp_new_port+0x68>)
 801abba:	881b      	ldrh	r3, [r3, #0]
}
 801abbc:	4618      	mov	r0, r3
 801abbe:	370c      	adds	r7, #12
 801abc0:	46bd      	mov	sp, r7
 801abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abc6:	4770      	bx	lr
 801abc8:	240000bc 	.word	0x240000bc
 801abcc:	2400cbac 	.word	0x2400cbac

0801abd0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801abd0:	b580      	push	{r7, lr}
 801abd2:	b084      	sub	sp, #16
 801abd4:	af00      	add	r7, sp, #0
 801abd6:	60f8      	str	r0, [r7, #12]
 801abd8:	60b9      	str	r1, [r7, #8]
 801abda:	4613      	mov	r3, r2
 801abdc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d105      	bne.n	801abf0 <udp_input_local_match+0x20>
 801abe4:	4b27      	ldr	r3, [pc, #156]	; (801ac84 <udp_input_local_match+0xb4>)
 801abe6:	2287      	movs	r2, #135	; 0x87
 801abe8:	4927      	ldr	r1, [pc, #156]	; (801ac88 <udp_input_local_match+0xb8>)
 801abea:	4828      	ldr	r0, [pc, #160]	; (801ac8c <udp_input_local_match+0xbc>)
 801abec:	f005 fdbc 	bl	8020768 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d105      	bne.n	801ac02 <udp_input_local_match+0x32>
 801abf6:	4b23      	ldr	r3, [pc, #140]	; (801ac84 <udp_input_local_match+0xb4>)
 801abf8:	2288      	movs	r2, #136	; 0x88
 801abfa:	4925      	ldr	r1, [pc, #148]	; (801ac90 <udp_input_local_match+0xc0>)
 801abfc:	4823      	ldr	r0, [pc, #140]	; (801ac8c <udp_input_local_match+0xbc>)
 801abfe:	f005 fdb3 	bl	8020768 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	7a1b      	ldrb	r3, [r3, #8]
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d00b      	beq.n	801ac22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	7a1a      	ldrb	r2, [r3, #8]
 801ac0e:	4b21      	ldr	r3, [pc, #132]	; (801ac94 <udp_input_local_match+0xc4>)
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ac16:	3301      	adds	r3, #1
 801ac18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ac1a:	429a      	cmp	r2, r3
 801ac1c:	d001      	beq.n	801ac22 <udp_input_local_match+0x52>
    return 0;
 801ac1e:	2300      	movs	r3, #0
 801ac20:	e02b      	b.n	801ac7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ac22:	79fb      	ldrb	r3, [r7, #7]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d018      	beq.n	801ac5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac28:	68fb      	ldr	r3, [r7, #12]
 801ac2a:	2b00      	cmp	r3, #0
 801ac2c:	d013      	beq.n	801ac56 <udp_input_local_match+0x86>
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d00f      	beq.n	801ac56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac36:	4b17      	ldr	r3, [pc, #92]	; (801ac94 <udp_input_local_match+0xc4>)
 801ac38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac3e:	d00a      	beq.n	801ac56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	681a      	ldr	r2, [r3, #0]
 801ac44:	4b13      	ldr	r3, [pc, #76]	; (801ac94 <udp_input_local_match+0xc4>)
 801ac46:	695b      	ldr	r3, [r3, #20]
 801ac48:	405a      	eors	r2, r3
 801ac4a:	68bb      	ldr	r3, [r7, #8]
 801ac4c:	3308      	adds	r3, #8
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d110      	bne.n	801ac78 <udp_input_local_match+0xa8>
          return 1;
 801ac56:	2301      	movs	r3, #1
 801ac58:	e00f      	b.n	801ac7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d009      	beq.n	801ac74 <udp_input_local_match+0xa4>
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d005      	beq.n	801ac74 <udp_input_local_match+0xa4>
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	681a      	ldr	r2, [r3, #0]
 801ac6c:	4b09      	ldr	r3, [pc, #36]	; (801ac94 <udp_input_local_match+0xc4>)
 801ac6e:	695b      	ldr	r3, [r3, #20]
 801ac70:	429a      	cmp	r2, r3
 801ac72:	d101      	bne.n	801ac78 <udp_input_local_match+0xa8>
        return 1;
 801ac74:	2301      	movs	r3, #1
 801ac76:	e000      	b.n	801ac7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ac78:	2300      	movs	r3, #0
}
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	3710      	adds	r7, #16
 801ac7e:	46bd      	mov	sp, r7
 801ac80:	bd80      	pop	{r7, pc}
 801ac82:	bf00      	nop
 801ac84:	0802370c 	.word	0x0802370c
 801ac88:	0802373c 	.word	0x0802373c
 801ac8c:	08023760 	.word	0x08023760
 801ac90:	08023788 	.word	0x08023788
 801ac94:	24009a30 	.word	0x24009a30

0801ac98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ac98:	b590      	push	{r4, r7, lr}
 801ac9a:	b08d      	sub	sp, #52	; 0x34
 801ac9c:	af02      	add	r7, sp, #8
 801ac9e:	6078      	str	r0, [r7, #4]
 801aca0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801aca2:	2300      	movs	r3, #0
 801aca4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2b00      	cmp	r3, #0
 801acaa:	d105      	bne.n	801acb8 <udp_input+0x20>
 801acac:	4b7c      	ldr	r3, [pc, #496]	; (801aea0 <udp_input+0x208>)
 801acae:	22cf      	movs	r2, #207	; 0xcf
 801acb0:	497c      	ldr	r1, [pc, #496]	; (801aea4 <udp_input+0x20c>)
 801acb2:	487d      	ldr	r0, [pc, #500]	; (801aea8 <udp_input+0x210>)
 801acb4:	f005 fd58 	bl	8020768 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801acb8:	683b      	ldr	r3, [r7, #0]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d105      	bne.n	801acca <udp_input+0x32>
 801acbe:	4b78      	ldr	r3, [pc, #480]	; (801aea0 <udp_input+0x208>)
 801acc0:	22d0      	movs	r2, #208	; 0xd0
 801acc2:	497a      	ldr	r1, [pc, #488]	; (801aeac <udp_input+0x214>)
 801acc4:	4878      	ldr	r0, [pc, #480]	; (801aea8 <udp_input+0x210>)
 801acc6:	f005 fd4f 	bl	8020768 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	895b      	ldrh	r3, [r3, #10]
 801acce:	2b07      	cmp	r3, #7
 801acd0:	d803      	bhi.n	801acda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801acd2:	6878      	ldr	r0, [r7, #4]
 801acd4:	f7fa f9b2 	bl	801503c <pbuf_free>
    goto end;
 801acd8:	e0de      	b.n	801ae98 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	685b      	ldr	r3, [r3, #4]
 801acde:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ace0:	4b73      	ldr	r3, [pc, #460]	; (801aeb0 <udp_input+0x218>)
 801ace2:	695b      	ldr	r3, [r3, #20]
 801ace4:	4a72      	ldr	r2, [pc, #456]	; (801aeb0 <udp_input+0x218>)
 801ace6:	6812      	ldr	r2, [r2, #0]
 801ace8:	4611      	mov	r1, r2
 801acea:	4618      	mov	r0, r3
 801acec:	f003 fe2e 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801acf0:	4603      	mov	r3, r0
 801acf2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801acf4:	697b      	ldr	r3, [r7, #20]
 801acf6:	881b      	ldrh	r3, [r3, #0]
 801acf8:	b29b      	uxth	r3, r3
 801acfa:	4618      	mov	r0, r3
 801acfc:	f7f8 fce8 	bl	80136d0 <lwip_htons>
 801ad00:	4603      	mov	r3, r0
 801ad02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ad04:	697b      	ldr	r3, [r7, #20]
 801ad06:	885b      	ldrh	r3, [r3, #2]
 801ad08:	b29b      	uxth	r3, r3
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7f8 fce0 	bl	80136d0 <lwip_htons>
 801ad10:	4603      	mov	r3, r0
 801ad12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801ad14:	2300      	movs	r3, #0
 801ad16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801ad18:	2300      	movs	r3, #0
 801ad1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ad1c:	2300      	movs	r3, #0
 801ad1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad20:	4b64      	ldr	r3, [pc, #400]	; (801aeb4 <udp_input+0x21c>)
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	627b      	str	r3, [r7, #36]	; 0x24
 801ad26:	e054      	b.n	801add2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	8a5b      	ldrh	r3, [r3, #18]
 801ad2c:	89fa      	ldrh	r2, [r7, #14]
 801ad2e:	429a      	cmp	r2, r3
 801ad30:	d14a      	bne.n	801adc8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ad32:	7cfb      	ldrb	r3, [r7, #19]
 801ad34:	461a      	mov	r2, r3
 801ad36:	6839      	ldr	r1, [r7, #0]
 801ad38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad3a:	f7ff ff49 	bl	801abd0 <udp_input_local_match>
 801ad3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d041      	beq.n	801adc8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad46:	7c1b      	ldrb	r3, [r3, #16]
 801ad48:	f003 0304 	and.w	r3, r3, #4
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	d11d      	bne.n	801ad8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d102      	bne.n	801ad5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ad56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad58:	61fb      	str	r3, [r7, #28]
 801ad5a:	e017      	b.n	801ad8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ad5c:	7cfb      	ldrb	r3, [r7, #19]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d014      	beq.n	801ad8c <udp_input+0xf4>
 801ad62:	4b53      	ldr	r3, [pc, #332]	; (801aeb0 <udp_input+0x218>)
 801ad64:	695b      	ldr	r3, [r3, #20]
 801ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad6a:	d10f      	bne.n	801ad8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad6c:	69fb      	ldr	r3, [r7, #28]
 801ad6e:	681a      	ldr	r2, [r3, #0]
 801ad70:	683b      	ldr	r3, [r7, #0]
 801ad72:	3304      	adds	r3, #4
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	429a      	cmp	r2, r3
 801ad78:	d008      	beq.n	801ad8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7c:	681a      	ldr	r2, [r3, #0]
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	3304      	adds	r3, #4
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	429a      	cmp	r2, r3
 801ad86:	d101      	bne.n	801ad8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8e:	8a9b      	ldrh	r3, [r3, #20]
 801ad90:	8a3a      	ldrh	r2, [r7, #16]
 801ad92:	429a      	cmp	r2, r3
 801ad94:	d118      	bne.n	801adc8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d005      	beq.n	801adaa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ad9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ada0:	685a      	ldr	r2, [r3, #4]
 801ada2:	4b43      	ldr	r3, [pc, #268]	; (801aeb0 <udp_input+0x218>)
 801ada4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ada6:	429a      	cmp	r2, r3
 801ada8:	d10e      	bne.n	801adc8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801adaa:	6a3b      	ldr	r3, [r7, #32]
 801adac:	2b00      	cmp	r3, #0
 801adae:	d014      	beq.n	801adda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb2:	68da      	ldr	r2, [r3, #12]
 801adb4:	6a3b      	ldr	r3, [r7, #32]
 801adb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801adb8:	4b3e      	ldr	r3, [pc, #248]	; (801aeb4 <udp_input+0x21c>)
 801adba:	681a      	ldr	r2, [r3, #0]
 801adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adbe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801adc0:	4a3c      	ldr	r2, [pc, #240]	; (801aeb4 <udp_input+0x21c>)
 801adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801adc6:	e008      	b.n	801adda <udp_input+0x142>
      }
    }

    prev = pcb;
 801adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adce:	68db      	ldr	r3, [r3, #12]
 801add0:	627b      	str	r3, [r7, #36]	; 0x24
 801add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add4:	2b00      	cmp	r3, #0
 801add6:	d1a7      	bne.n	801ad28 <udp_input+0x90>
 801add8:	e000      	b.n	801addc <udp_input+0x144>
        break;
 801adda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801addc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d101      	bne.n	801ade6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801ade2:	69fb      	ldr	r3, [r7, #28]
 801ade4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ade6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d002      	beq.n	801adf2 <udp_input+0x15a>
    for_us = 1;
 801adec:	2301      	movs	r3, #1
 801adee:	76fb      	strb	r3, [r7, #27]
 801adf0:	e00a      	b.n	801ae08 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	3304      	adds	r3, #4
 801adf6:	681a      	ldr	r2, [r3, #0]
 801adf8:	4b2d      	ldr	r3, [pc, #180]	; (801aeb0 <udp_input+0x218>)
 801adfa:	695b      	ldr	r3, [r3, #20]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	bf0c      	ite	eq
 801ae00:	2301      	moveq	r3, #1
 801ae02:	2300      	movne	r3, #0
 801ae04:	b2db      	uxtb	r3, r3
 801ae06:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ae08:	7efb      	ldrb	r3, [r7, #27]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d041      	beq.n	801ae92 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ae0e:	2108      	movs	r1, #8
 801ae10:	6878      	ldr	r0, [r7, #4]
 801ae12:	f7fa f88d 	bl	8014f30 <pbuf_remove_header>
 801ae16:	4603      	mov	r3, r0
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d00a      	beq.n	801ae32 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ae1c:	4b20      	ldr	r3, [pc, #128]	; (801aea0 <udp_input+0x208>)
 801ae1e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ae22:	4925      	ldr	r1, [pc, #148]	; (801aeb8 <udp_input+0x220>)
 801ae24:	4820      	ldr	r0, [pc, #128]	; (801aea8 <udp_input+0x210>)
 801ae26:	f005 fc9f 	bl	8020768 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ae2a:	6878      	ldr	r0, [r7, #4]
 801ae2c:	f7fa f906 	bl	801503c <pbuf_free>
      goto end;
 801ae30:	e032      	b.n	801ae98 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d012      	beq.n	801ae5e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae3a:	699b      	ldr	r3, [r3, #24]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d00a      	beq.n	801ae56 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae42:	699c      	ldr	r4, [r3, #24]
 801ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae46:	69d8      	ldr	r0, [r3, #28]
 801ae48:	8a3b      	ldrh	r3, [r7, #16]
 801ae4a:	9300      	str	r3, [sp, #0]
 801ae4c:	4b1b      	ldr	r3, [pc, #108]	; (801aebc <udp_input+0x224>)
 801ae4e:	687a      	ldr	r2, [r7, #4]
 801ae50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae52:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ae54:	e021      	b.n	801ae9a <udp_input+0x202>
        pbuf_free(p);
 801ae56:	6878      	ldr	r0, [r7, #4]
 801ae58:	f7fa f8f0 	bl	801503c <pbuf_free>
        goto end;
 801ae5c:	e01c      	b.n	801ae98 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ae5e:	7cfb      	ldrb	r3, [r7, #19]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d112      	bne.n	801ae8a <udp_input+0x1f2>
 801ae64:	4b12      	ldr	r3, [pc, #72]	; (801aeb0 <udp_input+0x218>)
 801ae66:	695b      	ldr	r3, [r3, #20]
 801ae68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ae6c:	2be0      	cmp	r3, #224	; 0xe0
 801ae6e:	d00c      	beq.n	801ae8a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ae70:	4b0f      	ldr	r3, [pc, #60]	; (801aeb0 <udp_input+0x218>)
 801ae72:	899b      	ldrh	r3, [r3, #12]
 801ae74:	3308      	adds	r3, #8
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	b21b      	sxth	r3, r3
 801ae7a:	4619      	mov	r1, r3
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f7fa f8ca 	bl	8015016 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ae82:	2103      	movs	r1, #3
 801ae84:	6878      	ldr	r0, [r7, #4]
 801ae86:	f003 fa19 	bl	801e2bc <icmp_dest_unreach>
      pbuf_free(p);
 801ae8a:	6878      	ldr	r0, [r7, #4]
 801ae8c:	f7fa f8d6 	bl	801503c <pbuf_free>
  return;
 801ae90:	e003      	b.n	801ae9a <udp_input+0x202>
    pbuf_free(p);
 801ae92:	6878      	ldr	r0, [r7, #4]
 801ae94:	f7fa f8d2 	bl	801503c <pbuf_free>
  return;
 801ae98:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ae9a:	372c      	adds	r7, #44	; 0x2c
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd90      	pop	{r4, r7, pc}
 801aea0:	0802370c 	.word	0x0802370c
 801aea4:	080237b0 	.word	0x080237b0
 801aea8:	08023760 	.word	0x08023760
 801aeac:	080237c8 	.word	0x080237c8
 801aeb0:	24009a30 	.word	0x24009a30
 801aeb4:	2400cbac 	.word	0x2400cbac
 801aeb8:	080237e4 	.word	0x080237e4
 801aebc:	24009a40 	.word	0x24009a40

0801aec0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801aec0:	b580      	push	{r7, lr}
 801aec2:	b088      	sub	sp, #32
 801aec4:	af02      	add	r7, sp, #8
 801aec6:	60f8      	str	r0, [r7, #12]
 801aec8:	60b9      	str	r1, [r7, #8]
 801aeca:	607a      	str	r2, [r7, #4]
 801aecc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d109      	bne.n	801aee8 <udp_sendto_if+0x28>
 801aed4:	4b2e      	ldr	r3, [pc, #184]	; (801af90 <udp_sendto_if+0xd0>)
 801aed6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aeda:	492e      	ldr	r1, [pc, #184]	; (801af94 <udp_sendto_if+0xd4>)
 801aedc:	482e      	ldr	r0, [pc, #184]	; (801af98 <udp_sendto_if+0xd8>)
 801aede:	f005 fc43 	bl	8020768 <iprintf>
 801aee2:	f06f 030f 	mvn.w	r3, #15
 801aee6:	e04f      	b.n	801af88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801aee8:	68bb      	ldr	r3, [r7, #8]
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d109      	bne.n	801af02 <udp_sendto_if+0x42>
 801aeee:	4b28      	ldr	r3, [pc, #160]	; (801af90 <udp_sendto_if+0xd0>)
 801aef0:	f240 2281 	movw	r2, #641	; 0x281
 801aef4:	4929      	ldr	r1, [pc, #164]	; (801af9c <udp_sendto_if+0xdc>)
 801aef6:	4828      	ldr	r0, [pc, #160]	; (801af98 <udp_sendto_if+0xd8>)
 801aef8:	f005 fc36 	bl	8020768 <iprintf>
 801aefc:	f06f 030f 	mvn.w	r3, #15
 801af00:	e042      	b.n	801af88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	2b00      	cmp	r3, #0
 801af06:	d109      	bne.n	801af1c <udp_sendto_if+0x5c>
 801af08:	4b21      	ldr	r3, [pc, #132]	; (801af90 <udp_sendto_if+0xd0>)
 801af0a:	f240 2282 	movw	r2, #642	; 0x282
 801af0e:	4924      	ldr	r1, [pc, #144]	; (801afa0 <udp_sendto_if+0xe0>)
 801af10:	4821      	ldr	r0, [pc, #132]	; (801af98 <udp_sendto_if+0xd8>)
 801af12:	f005 fc29 	bl	8020768 <iprintf>
 801af16:	f06f 030f 	mvn.w	r3, #15
 801af1a:	e035      	b.n	801af88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801af1c:	6a3b      	ldr	r3, [r7, #32]
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d109      	bne.n	801af36 <udp_sendto_if+0x76>
 801af22:	4b1b      	ldr	r3, [pc, #108]	; (801af90 <udp_sendto_if+0xd0>)
 801af24:	f240 2283 	movw	r2, #643	; 0x283
 801af28:	491e      	ldr	r1, [pc, #120]	; (801afa4 <udp_sendto_if+0xe4>)
 801af2a:	481b      	ldr	r0, [pc, #108]	; (801af98 <udp_sendto_if+0xd8>)
 801af2c:	f005 fc1c 	bl	8020768 <iprintf>
 801af30:	f06f 030f 	mvn.w	r3, #15
 801af34:	e028      	b.n	801af88 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af36:	68fb      	ldr	r3, [r7, #12]
 801af38:	2b00      	cmp	r3, #0
 801af3a:	d009      	beq.n	801af50 <udp_sendto_if+0x90>
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	2b00      	cmp	r3, #0
 801af42:	d005      	beq.n	801af50 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801af44:	68fb      	ldr	r3, [r7, #12]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af4c:	2be0      	cmp	r3, #224	; 0xe0
 801af4e:	d103      	bne.n	801af58 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801af50:	6a3b      	ldr	r3, [r7, #32]
 801af52:	3304      	adds	r3, #4
 801af54:	617b      	str	r3, [r7, #20]
 801af56:	e00b      	b.n	801af70 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	681a      	ldr	r2, [r3, #0]
 801af5c:	6a3b      	ldr	r3, [r7, #32]
 801af5e:	3304      	adds	r3, #4
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	429a      	cmp	r2, r3
 801af64:	d002      	beq.n	801af6c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801af66:	f06f 0303 	mvn.w	r3, #3
 801af6a:	e00d      	b.n	801af88 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801af70:	887a      	ldrh	r2, [r7, #2]
 801af72:	697b      	ldr	r3, [r7, #20]
 801af74:	9301      	str	r3, [sp, #4]
 801af76:	6a3b      	ldr	r3, [r7, #32]
 801af78:	9300      	str	r3, [sp, #0]
 801af7a:	4613      	mov	r3, r2
 801af7c:	687a      	ldr	r2, [r7, #4]
 801af7e:	68b9      	ldr	r1, [r7, #8]
 801af80:	68f8      	ldr	r0, [r7, #12]
 801af82:	f000 f811 	bl	801afa8 <udp_sendto_if_src>
 801af86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801af88:	4618      	mov	r0, r3
 801af8a:	3718      	adds	r7, #24
 801af8c:	46bd      	mov	sp, r7
 801af8e:	bd80      	pop	{r7, pc}
 801af90:	0802370c 	.word	0x0802370c
 801af94:	08023880 	.word	0x08023880
 801af98:	08023760 	.word	0x08023760
 801af9c:	0802389c 	.word	0x0802389c
 801afa0:	080238b8 	.word	0x080238b8
 801afa4:	080238d8 	.word	0x080238d8

0801afa8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b08c      	sub	sp, #48	; 0x30
 801afac:	af04      	add	r7, sp, #16
 801afae:	60f8      	str	r0, [r7, #12]
 801afb0:	60b9      	str	r1, [r7, #8]
 801afb2:	607a      	str	r2, [r7, #4]
 801afb4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d109      	bne.n	801afd0 <udp_sendto_if_src+0x28>
 801afbc:	4b65      	ldr	r3, [pc, #404]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801afbe:	f240 22d1 	movw	r2, #721	; 0x2d1
 801afc2:	4965      	ldr	r1, [pc, #404]	; (801b158 <udp_sendto_if_src+0x1b0>)
 801afc4:	4865      	ldr	r0, [pc, #404]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801afc6:	f005 fbcf 	bl	8020768 <iprintf>
 801afca:	f06f 030f 	mvn.w	r3, #15
 801afce:	e0bc      	b.n	801b14a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801afd0:	68bb      	ldr	r3, [r7, #8]
 801afd2:	2b00      	cmp	r3, #0
 801afd4:	d109      	bne.n	801afea <udp_sendto_if_src+0x42>
 801afd6:	4b5f      	ldr	r3, [pc, #380]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801afd8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801afdc:	4960      	ldr	r1, [pc, #384]	; (801b160 <udp_sendto_if_src+0x1b8>)
 801afde:	485f      	ldr	r0, [pc, #380]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801afe0:	f005 fbc2 	bl	8020768 <iprintf>
 801afe4:	f06f 030f 	mvn.w	r3, #15
 801afe8:	e0af      	b.n	801b14a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d109      	bne.n	801b004 <udp_sendto_if_src+0x5c>
 801aff0:	4b58      	ldr	r3, [pc, #352]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801aff2:	f240 22d3 	movw	r2, #723	; 0x2d3
 801aff6:	495b      	ldr	r1, [pc, #364]	; (801b164 <udp_sendto_if_src+0x1bc>)
 801aff8:	4858      	ldr	r0, [pc, #352]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801affa:	f005 fbb5 	bl	8020768 <iprintf>
 801affe:	f06f 030f 	mvn.w	r3, #15
 801b002:	e0a2      	b.n	801b14a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b006:	2b00      	cmp	r3, #0
 801b008:	d109      	bne.n	801b01e <udp_sendto_if_src+0x76>
 801b00a:	4b52      	ldr	r3, [pc, #328]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801b00c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b010:	4955      	ldr	r1, [pc, #340]	; (801b168 <udp_sendto_if_src+0x1c0>)
 801b012:	4852      	ldr	r0, [pc, #328]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801b014:	f005 fba8 	bl	8020768 <iprintf>
 801b018:	f06f 030f 	mvn.w	r3, #15
 801b01c:	e095      	b.n	801b14a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b020:	2b00      	cmp	r3, #0
 801b022:	d109      	bne.n	801b038 <udp_sendto_if_src+0x90>
 801b024:	4b4b      	ldr	r3, [pc, #300]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801b026:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b02a:	4950      	ldr	r1, [pc, #320]	; (801b16c <udp_sendto_if_src+0x1c4>)
 801b02c:	484b      	ldr	r0, [pc, #300]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801b02e:	f005 fb9b 	bl	8020768 <iprintf>
 801b032:	f06f 030f 	mvn.w	r3, #15
 801b036:	e088      	b.n	801b14a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	8a5b      	ldrh	r3, [r3, #18]
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d10f      	bne.n	801b060 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b040:	68f9      	ldr	r1, [r7, #12]
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	8a5b      	ldrh	r3, [r3, #18]
 801b046:	461a      	mov	r2, r3
 801b048:	68f8      	ldr	r0, [r7, #12]
 801b04a:	f000 f893 	bl	801b174 <udp_bind>
 801b04e:	4603      	mov	r3, r0
 801b050:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b052:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b056:	2b00      	cmp	r3, #0
 801b058:	d002      	beq.n	801b060 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b05a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b05e:	e074      	b.n	801b14a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b060:	68bb      	ldr	r3, [r7, #8]
 801b062:	891b      	ldrh	r3, [r3, #8]
 801b064:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b068:	4293      	cmp	r3, r2
 801b06a:	d902      	bls.n	801b072 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b06c:	f04f 33ff 	mov.w	r3, #4294967295
 801b070:	e06b      	b.n	801b14a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b072:	2108      	movs	r1, #8
 801b074:	68b8      	ldr	r0, [r7, #8]
 801b076:	f7f9 ff4b 	bl	8014f10 <pbuf_add_header>
 801b07a:	4603      	mov	r3, r0
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d015      	beq.n	801b0ac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b080:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b084:	2108      	movs	r1, #8
 801b086:	2022      	movs	r0, #34	; 0x22
 801b088:	f7f9 fcf4 	bl	8014a74 <pbuf_alloc>
 801b08c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b08e:	69fb      	ldr	r3, [r7, #28]
 801b090:	2b00      	cmp	r3, #0
 801b092:	d102      	bne.n	801b09a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b094:	f04f 33ff 	mov.w	r3, #4294967295
 801b098:	e057      	b.n	801b14a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b09a:	68bb      	ldr	r3, [r7, #8]
 801b09c:	891b      	ldrh	r3, [r3, #8]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d006      	beq.n	801b0b0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b0a2:	68b9      	ldr	r1, [r7, #8]
 801b0a4:	69f8      	ldr	r0, [r7, #28]
 801b0a6:	f7fa f8ed 	bl	8015284 <pbuf_chain>
 801b0aa:	e001      	b.n	801b0b0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b0ac:	68bb      	ldr	r3, [r7, #8]
 801b0ae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b0b0:	69fb      	ldr	r3, [r7, #28]
 801b0b2:	895b      	ldrh	r3, [r3, #10]
 801b0b4:	2b07      	cmp	r3, #7
 801b0b6:	d806      	bhi.n	801b0c6 <udp_sendto_if_src+0x11e>
 801b0b8:	4b26      	ldr	r3, [pc, #152]	; (801b154 <udp_sendto_if_src+0x1ac>)
 801b0ba:	f240 320d 	movw	r2, #781	; 0x30d
 801b0be:	492c      	ldr	r1, [pc, #176]	; (801b170 <udp_sendto_if_src+0x1c8>)
 801b0c0:	4826      	ldr	r0, [pc, #152]	; (801b15c <udp_sendto_if_src+0x1b4>)
 801b0c2:	f005 fb51 	bl	8020768 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b0c6:	69fb      	ldr	r3, [r7, #28]
 801b0c8:	685b      	ldr	r3, [r3, #4]
 801b0ca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	8a5b      	ldrh	r3, [r3, #18]
 801b0d0:	4618      	mov	r0, r3
 801b0d2:	f7f8 fafd 	bl	80136d0 <lwip_htons>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	461a      	mov	r2, r3
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b0de:	887b      	ldrh	r3, [r7, #2]
 801b0e0:	4618      	mov	r0, r3
 801b0e2:	f7f8 faf5 	bl	80136d0 <lwip_htons>
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	461a      	mov	r2, r3
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b0ee:	697b      	ldr	r3, [r7, #20]
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	719a      	strb	r2, [r3, #6]
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b0f8:	69fb      	ldr	r3, [r7, #28]
 801b0fa:	891b      	ldrh	r3, [r3, #8]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f8 fae7 	bl	80136d0 <lwip_htons>
 801b102:	4603      	mov	r3, r0
 801b104:	461a      	mov	r2, r3
 801b106:	697b      	ldr	r3, [r7, #20]
 801b108:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b10a:	2311      	movs	r3, #17
 801b10c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	7adb      	ldrb	r3, [r3, #11]
 801b112:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	7a9b      	ldrb	r3, [r3, #10]
 801b118:	7cb9      	ldrb	r1, [r7, #18]
 801b11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b11c:	9202      	str	r2, [sp, #8]
 801b11e:	7cfa      	ldrb	r2, [r7, #19]
 801b120:	9201      	str	r2, [sp, #4]
 801b122:	9300      	str	r3, [sp, #0]
 801b124:	460b      	mov	r3, r1
 801b126:	687a      	ldr	r2, [r7, #4]
 801b128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b12a:	69f8      	ldr	r0, [r7, #28]
 801b12c:	f003 fb60 	bl	801e7f0 <ip4_output_if_src>
 801b130:	4603      	mov	r3, r0
 801b132:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b134:	69fa      	ldr	r2, [r7, #28]
 801b136:	68bb      	ldr	r3, [r7, #8]
 801b138:	429a      	cmp	r2, r3
 801b13a:	d004      	beq.n	801b146 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b13c:	69f8      	ldr	r0, [r7, #28]
 801b13e:	f7f9 ff7d 	bl	801503c <pbuf_free>
    q = NULL;
 801b142:	2300      	movs	r3, #0
 801b144:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b146:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b14a:	4618      	mov	r0, r3
 801b14c:	3720      	adds	r7, #32
 801b14e:	46bd      	mov	sp, r7
 801b150:	bd80      	pop	{r7, pc}
 801b152:	bf00      	nop
 801b154:	0802370c 	.word	0x0802370c
 801b158:	080238f8 	.word	0x080238f8
 801b15c:	08023760 	.word	0x08023760
 801b160:	08023918 	.word	0x08023918
 801b164:	08023938 	.word	0x08023938
 801b168:	0802395c 	.word	0x0802395c
 801b16c:	08023980 	.word	0x08023980
 801b170:	080239a4 	.word	0x080239a4

0801b174 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b086      	sub	sp, #24
 801b178:	af00      	add	r7, sp, #0
 801b17a:	60f8      	str	r0, [r7, #12]
 801b17c:	60b9      	str	r1, [r7, #8]
 801b17e:	4613      	mov	r3, r2
 801b180:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d101      	bne.n	801b18c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b188:	4b39      	ldr	r3, [pc, #228]	; (801b270 <udp_bind+0xfc>)
 801b18a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d109      	bne.n	801b1a6 <udp_bind+0x32>
 801b192:	4b38      	ldr	r3, [pc, #224]	; (801b274 <udp_bind+0x100>)
 801b194:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b198:	4937      	ldr	r1, [pc, #220]	; (801b278 <udp_bind+0x104>)
 801b19a:	4838      	ldr	r0, [pc, #224]	; (801b27c <udp_bind+0x108>)
 801b19c:	f005 fae4 	bl	8020768 <iprintf>
 801b1a0:	f06f 030f 	mvn.w	r3, #15
 801b1a4:	e060      	b.n	801b268 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b1a6:	2300      	movs	r3, #0
 801b1a8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1aa:	4b35      	ldr	r3, [pc, #212]	; (801b280 <udp_bind+0x10c>)
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	617b      	str	r3, [r7, #20]
 801b1b0:	e009      	b.n	801b1c6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b1b2:	68fa      	ldr	r2, [r7, #12]
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	429a      	cmp	r2, r3
 801b1b8:	d102      	bne.n	801b1c0 <udp_bind+0x4c>
      rebind = 1;
 801b1ba:	2301      	movs	r3, #1
 801b1bc:	74fb      	strb	r3, [r7, #19]
      break;
 801b1be:	e005      	b.n	801b1cc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1c0:	697b      	ldr	r3, [r7, #20]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	617b      	str	r3, [r7, #20]
 801b1c6:	697b      	ldr	r3, [r7, #20]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d1f2      	bne.n	801b1b2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b1cc:	88fb      	ldrh	r3, [r7, #6]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d109      	bne.n	801b1e6 <udp_bind+0x72>
    port = udp_new_port();
 801b1d2:	f7ff fcc5 	bl	801ab60 <udp_new_port>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b1da:	88fb      	ldrh	r3, [r7, #6]
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d12c      	bne.n	801b23a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b1e0:	f06f 0307 	mvn.w	r3, #7
 801b1e4:	e040      	b.n	801b268 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1e6:	4b26      	ldr	r3, [pc, #152]	; (801b280 <udp_bind+0x10c>)
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	617b      	str	r3, [r7, #20]
 801b1ec:	e022      	b.n	801b234 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b1ee:	68fa      	ldr	r2, [r7, #12]
 801b1f0:	697b      	ldr	r3, [r7, #20]
 801b1f2:	429a      	cmp	r2, r3
 801b1f4:	d01b      	beq.n	801b22e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b1f6:	697b      	ldr	r3, [r7, #20]
 801b1f8:	8a5b      	ldrh	r3, [r3, #18]
 801b1fa:	88fa      	ldrh	r2, [r7, #6]
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d116      	bne.n	801b22e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b200:	697b      	ldr	r3, [r7, #20]
 801b202:	681a      	ldr	r2, [r3, #0]
 801b204:	68bb      	ldr	r3, [r7, #8]
 801b206:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b208:	429a      	cmp	r2, r3
 801b20a:	d00d      	beq.n	801b228 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b20c:	68bb      	ldr	r3, [r7, #8]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d00a      	beq.n	801b228 <udp_bind+0xb4>
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d006      	beq.n	801b228 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b21a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d003      	beq.n	801b228 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b220:	697b      	ldr	r3, [r7, #20]
 801b222:	681b      	ldr	r3, [r3, #0]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d102      	bne.n	801b22e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b228:	f06f 0307 	mvn.w	r3, #7
 801b22c:	e01c      	b.n	801b268 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b22e:	697b      	ldr	r3, [r7, #20]
 801b230:	68db      	ldr	r3, [r3, #12]
 801b232:	617b      	str	r3, [r7, #20]
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	2b00      	cmp	r3, #0
 801b238:	d1d9      	bne.n	801b1ee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d002      	beq.n	801b246 <udp_bind+0xd2>
 801b240:	68bb      	ldr	r3, [r7, #8]
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	e000      	b.n	801b248 <udp_bind+0xd4>
 801b246:	2300      	movs	r3, #0
 801b248:	68fa      	ldr	r2, [r7, #12]
 801b24a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b24c:	68fb      	ldr	r3, [r7, #12]
 801b24e:	88fa      	ldrh	r2, [r7, #6]
 801b250:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b252:	7cfb      	ldrb	r3, [r7, #19]
 801b254:	2b00      	cmp	r3, #0
 801b256:	d106      	bne.n	801b266 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b258:	4b09      	ldr	r3, [pc, #36]	; (801b280 <udp_bind+0x10c>)
 801b25a:	681a      	ldr	r2, [r3, #0]
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b260:	4a07      	ldr	r2, [pc, #28]	; (801b280 <udp_bind+0x10c>)
 801b262:	68fb      	ldr	r3, [r7, #12]
 801b264:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b266:	2300      	movs	r3, #0
}
 801b268:	4618      	mov	r0, r3
 801b26a:	3718      	adds	r7, #24
 801b26c:	46bd      	mov	sp, r7
 801b26e:	bd80      	pop	{r7, pc}
 801b270:	08024690 	.word	0x08024690
 801b274:	0802370c 	.word	0x0802370c
 801b278:	080239d4 	.word	0x080239d4
 801b27c:	08023760 	.word	0x08023760
 801b280:	2400cbac 	.word	0x2400cbac

0801b284 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b284:	b580      	push	{r7, lr}
 801b286:	b086      	sub	sp, #24
 801b288:	af00      	add	r7, sp, #0
 801b28a:	60f8      	str	r0, [r7, #12]
 801b28c:	60b9      	str	r1, [r7, #8]
 801b28e:	4613      	mov	r3, r2
 801b290:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d109      	bne.n	801b2ac <udp_connect+0x28>
 801b298:	4b2c      	ldr	r3, [pc, #176]	; (801b34c <udp_connect+0xc8>)
 801b29a:	f240 4235 	movw	r2, #1077	; 0x435
 801b29e:	492c      	ldr	r1, [pc, #176]	; (801b350 <udp_connect+0xcc>)
 801b2a0:	482c      	ldr	r0, [pc, #176]	; (801b354 <udp_connect+0xd0>)
 801b2a2:	f005 fa61 	bl	8020768 <iprintf>
 801b2a6:	f06f 030f 	mvn.w	r3, #15
 801b2aa:	e04b      	b.n	801b344 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b2ac:	68bb      	ldr	r3, [r7, #8]
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d109      	bne.n	801b2c6 <udp_connect+0x42>
 801b2b2:	4b26      	ldr	r3, [pc, #152]	; (801b34c <udp_connect+0xc8>)
 801b2b4:	f240 4236 	movw	r2, #1078	; 0x436
 801b2b8:	4927      	ldr	r1, [pc, #156]	; (801b358 <udp_connect+0xd4>)
 801b2ba:	4826      	ldr	r0, [pc, #152]	; (801b354 <udp_connect+0xd0>)
 801b2bc:	f005 fa54 	bl	8020768 <iprintf>
 801b2c0:	f06f 030f 	mvn.w	r3, #15
 801b2c4:	e03e      	b.n	801b344 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b2c6:	68fb      	ldr	r3, [r7, #12]
 801b2c8:	8a5b      	ldrh	r3, [r3, #18]
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d10f      	bne.n	801b2ee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b2ce:	68f9      	ldr	r1, [r7, #12]
 801b2d0:	68fb      	ldr	r3, [r7, #12]
 801b2d2:	8a5b      	ldrh	r3, [r3, #18]
 801b2d4:	461a      	mov	r2, r3
 801b2d6:	68f8      	ldr	r0, [r7, #12]
 801b2d8:	f7ff ff4c 	bl	801b174 <udp_bind>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b2e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d002      	beq.n	801b2ee <udp_connect+0x6a>
      return err;
 801b2e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2ec:	e02a      	b.n	801b344 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d002      	beq.n	801b2fa <udp_connect+0x76>
 801b2f4:	68bb      	ldr	r3, [r7, #8]
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	e000      	b.n	801b2fc <udp_connect+0x78>
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	68fa      	ldr	r2, [r7, #12]
 801b2fe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	88fa      	ldrh	r2, [r7, #6]
 801b304:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	7c1b      	ldrb	r3, [r3, #16]
 801b30a:	f043 0304 	orr.w	r3, r3, #4
 801b30e:	b2da      	uxtb	r2, r3
 801b310:	68fb      	ldr	r3, [r7, #12]
 801b312:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b314:	4b11      	ldr	r3, [pc, #68]	; (801b35c <udp_connect+0xd8>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	617b      	str	r3, [r7, #20]
 801b31a:	e008      	b.n	801b32e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b31c:	68fa      	ldr	r2, [r7, #12]
 801b31e:	697b      	ldr	r3, [r7, #20]
 801b320:	429a      	cmp	r2, r3
 801b322:	d101      	bne.n	801b328 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b324:	2300      	movs	r3, #0
 801b326:	e00d      	b.n	801b344 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b328:	697b      	ldr	r3, [r7, #20]
 801b32a:	68db      	ldr	r3, [r3, #12]
 801b32c:	617b      	str	r3, [r7, #20]
 801b32e:	697b      	ldr	r3, [r7, #20]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d1f3      	bne.n	801b31c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b334:	4b09      	ldr	r3, [pc, #36]	; (801b35c <udp_connect+0xd8>)
 801b336:	681a      	ldr	r2, [r3, #0]
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b33c:	4a07      	ldr	r2, [pc, #28]	; (801b35c <udp_connect+0xd8>)
 801b33e:	68fb      	ldr	r3, [r7, #12]
 801b340:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b342:	2300      	movs	r3, #0
}
 801b344:	4618      	mov	r0, r3
 801b346:	3718      	adds	r7, #24
 801b348:	46bd      	mov	sp, r7
 801b34a:	bd80      	pop	{r7, pc}
 801b34c:	0802370c 	.word	0x0802370c
 801b350:	080239ec 	.word	0x080239ec
 801b354:	08023760 	.word	0x08023760
 801b358:	08023a08 	.word	0x08023a08
 801b35c:	2400cbac 	.word	0x2400cbac

0801b360 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b360:	b580      	push	{r7, lr}
 801b362:	b084      	sub	sp, #16
 801b364:	af00      	add	r7, sp, #0
 801b366:	60f8      	str	r0, [r7, #12]
 801b368:	60b9      	str	r1, [r7, #8]
 801b36a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d107      	bne.n	801b382 <udp_recv+0x22>
 801b372:	4b08      	ldr	r3, [pc, #32]	; (801b394 <udp_recv+0x34>)
 801b374:	f240 428a 	movw	r2, #1162	; 0x48a
 801b378:	4907      	ldr	r1, [pc, #28]	; (801b398 <udp_recv+0x38>)
 801b37a:	4808      	ldr	r0, [pc, #32]	; (801b39c <udp_recv+0x3c>)
 801b37c:	f005 f9f4 	bl	8020768 <iprintf>
 801b380:	e005      	b.n	801b38e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	68ba      	ldr	r2, [r7, #8]
 801b386:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	687a      	ldr	r2, [r7, #4]
 801b38c:	61da      	str	r2, [r3, #28]
}
 801b38e:	3710      	adds	r7, #16
 801b390:	46bd      	mov	sp, r7
 801b392:	bd80      	pop	{r7, pc}
 801b394:	0802370c 	.word	0x0802370c
 801b398:	08023a40 	.word	0x08023a40
 801b39c:	08023760 	.word	0x08023760

0801b3a0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b084      	sub	sp, #16
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	2b00      	cmp	r3, #0
 801b3ac:	d107      	bne.n	801b3be <udp_remove+0x1e>
 801b3ae:	4b19      	ldr	r3, [pc, #100]	; (801b414 <udp_remove+0x74>)
 801b3b0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b3b4:	4918      	ldr	r1, [pc, #96]	; (801b418 <udp_remove+0x78>)
 801b3b6:	4819      	ldr	r0, [pc, #100]	; (801b41c <udp_remove+0x7c>)
 801b3b8:	f005 f9d6 	bl	8020768 <iprintf>
 801b3bc:	e026      	b.n	801b40c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b3be:	4b18      	ldr	r3, [pc, #96]	; (801b420 <udp_remove+0x80>)
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	687a      	ldr	r2, [r7, #4]
 801b3c4:	429a      	cmp	r2, r3
 801b3c6:	d105      	bne.n	801b3d4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b3c8:	4b15      	ldr	r3, [pc, #84]	; (801b420 <udp_remove+0x80>)
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	4a14      	ldr	r2, [pc, #80]	; (801b420 <udp_remove+0x80>)
 801b3d0:	6013      	str	r3, [r2, #0]
 801b3d2:	e017      	b.n	801b404 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b3d4:	4b12      	ldr	r3, [pc, #72]	; (801b420 <udp_remove+0x80>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	60fb      	str	r3, [r7, #12]
 801b3da:	e010      	b.n	801b3fe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	68db      	ldr	r3, [r3, #12]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d009      	beq.n	801b3f8 <udp_remove+0x58>
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	68db      	ldr	r3, [r3, #12]
 801b3e8:	687a      	ldr	r2, [r7, #4]
 801b3ea:	429a      	cmp	r2, r3
 801b3ec:	d104      	bne.n	801b3f8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	68da      	ldr	r2, [r3, #12]
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	60da      	str	r2, [r3, #12]
        break;
 801b3f6:	e005      	b.n	801b404 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	68db      	ldr	r3, [r3, #12]
 801b3fc:	60fb      	str	r3, [r7, #12]
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d1eb      	bne.n	801b3dc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b404:	6879      	ldr	r1, [r7, #4]
 801b406:	2000      	movs	r0, #0
 801b408:	f7f8 ff68 	bl	80142dc <memp_free>
}
 801b40c:	3710      	adds	r7, #16
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}
 801b412:	bf00      	nop
 801b414:	0802370c 	.word	0x0802370c
 801b418:	08023a58 	.word	0x08023a58
 801b41c:	08023760 	.word	0x08023760
 801b420:	2400cbac 	.word	0x2400cbac

0801b424 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b082      	sub	sp, #8
 801b428:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b42a:	2000      	movs	r0, #0
 801b42c:	f7f8 fee0 	bl	80141f0 <memp_malloc>
 801b430:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2b00      	cmp	r3, #0
 801b436:	d007      	beq.n	801b448 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b438:	2220      	movs	r2, #32
 801b43a:	2100      	movs	r1, #0
 801b43c:	6878      	ldr	r0, [r7, #4]
 801b43e:	f005 f8f6 	bl	802062e <memset>
    pcb->ttl = UDP_TTL;
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	22ff      	movs	r2, #255	; 0xff
 801b446:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b448:	687b      	ldr	r3, [r7, #4]
}
 801b44a:	4618      	mov	r0, r3
 801b44c:	3708      	adds	r7, #8
 801b44e:	46bd      	mov	sp, r7
 801b450:	bd80      	pop	{r7, pc}
	...

0801b454 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b454:	b480      	push	{r7}
 801b456:	b085      	sub	sp, #20
 801b458:	af00      	add	r7, sp, #0
 801b45a:	6078      	str	r0, [r7, #4]
 801b45c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d01e      	beq.n	801b4a2 <udp_netif_ip_addr_changed+0x4e>
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d01a      	beq.n	801b4a2 <udp_netif_ip_addr_changed+0x4e>
 801b46c:	683b      	ldr	r3, [r7, #0]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d017      	beq.n	801b4a2 <udp_netif_ip_addr_changed+0x4e>
 801b472:	683b      	ldr	r3, [r7, #0]
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d013      	beq.n	801b4a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b47a:	4b0d      	ldr	r3, [pc, #52]	; (801b4b0 <udp_netif_ip_addr_changed+0x5c>)
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	60fb      	str	r3, [r7, #12]
 801b480:	e00c      	b.n	801b49c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b482:	68fb      	ldr	r3, [r7, #12]
 801b484:	681a      	ldr	r2, [r3, #0]
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	429a      	cmp	r2, r3
 801b48c:	d103      	bne.n	801b496 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b48e:	683b      	ldr	r3, [r7, #0]
 801b490:	681a      	ldr	r2, [r3, #0]
 801b492:	68fb      	ldr	r3, [r7, #12]
 801b494:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b496:	68fb      	ldr	r3, [r7, #12]
 801b498:	68db      	ldr	r3, [r3, #12]
 801b49a:	60fb      	str	r3, [r7, #12]
 801b49c:	68fb      	ldr	r3, [r7, #12]
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d1ef      	bne.n	801b482 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b4a2:	bf00      	nop
 801b4a4:	3714      	adds	r7, #20
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ac:	4770      	bx	lr
 801b4ae:	bf00      	nop
 801b4b0:	2400cbac 	.word	0x2400cbac

0801b4b4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801b4b4:	b580      	push	{r7, lr}
 801b4b6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801b4b8:	4b20      	ldr	r3, [pc, #128]	; (801b53c <dhcp_inc_pcb_refcount+0x88>)
 801b4ba:	781b      	ldrb	r3, [r3, #0]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d133      	bne.n	801b528 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801b4c0:	4b1f      	ldr	r3, [pc, #124]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d005      	beq.n	801b4d4 <dhcp_inc_pcb_refcount+0x20>
 801b4c8:	4b1e      	ldr	r3, [pc, #120]	; (801b544 <dhcp_inc_pcb_refcount+0x90>)
 801b4ca:	22e5      	movs	r2, #229	; 0xe5
 801b4cc:	491e      	ldr	r1, [pc, #120]	; (801b548 <dhcp_inc_pcb_refcount+0x94>)
 801b4ce:	481f      	ldr	r0, [pc, #124]	; (801b54c <dhcp_inc_pcb_refcount+0x98>)
 801b4d0:	f005 f94a 	bl	8020768 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801b4d4:	f7ff ffa6 	bl	801b424 <udp_new>
 801b4d8:	4603      	mov	r3, r0
 801b4da:	4a19      	ldr	r2, [pc, #100]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b4dc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801b4de:	4b18      	ldr	r3, [pc, #96]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d102      	bne.n	801b4ec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 801b4ea:	e024      	b.n	801b536 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801b4ec:	4b14      	ldr	r3, [pc, #80]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	7a5a      	ldrb	r2, [r3, #9]
 801b4f2:	4b13      	ldr	r3, [pc, #76]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	f042 0220 	orr.w	r2, r2, #32
 801b4fa:	b2d2      	uxtb	r2, r2
 801b4fc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801b4fe:	4b10      	ldr	r3, [pc, #64]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	2244      	movs	r2, #68	; 0x44
 801b504:	4912      	ldr	r1, [pc, #72]	; (801b550 <dhcp_inc_pcb_refcount+0x9c>)
 801b506:	4618      	mov	r0, r3
 801b508:	f7ff fe34 	bl	801b174 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801b50c:	4b0c      	ldr	r3, [pc, #48]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	2243      	movs	r2, #67	; 0x43
 801b512:	490f      	ldr	r1, [pc, #60]	; (801b550 <dhcp_inc_pcb_refcount+0x9c>)
 801b514:	4618      	mov	r0, r3
 801b516:	f7ff feb5 	bl	801b284 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801b51a:	4b09      	ldr	r3, [pc, #36]	; (801b540 <dhcp_inc_pcb_refcount+0x8c>)
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	2200      	movs	r2, #0
 801b520:	490c      	ldr	r1, [pc, #48]	; (801b554 <dhcp_inc_pcb_refcount+0xa0>)
 801b522:	4618      	mov	r0, r3
 801b524:	f7ff ff1c 	bl	801b360 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801b528:	4b04      	ldr	r3, [pc, #16]	; (801b53c <dhcp_inc_pcb_refcount+0x88>)
 801b52a:	781b      	ldrb	r3, [r3, #0]
 801b52c:	3301      	adds	r3, #1
 801b52e:	b2da      	uxtb	r2, r3
 801b530:	4b02      	ldr	r3, [pc, #8]	; (801b53c <dhcp_inc_pcb_refcount+0x88>)
 801b532:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801b534:	2300      	movs	r3, #0
}
 801b536:	4618      	mov	r0, r3
 801b538:	bd80      	pop	{r7, pc}
 801b53a:	bf00      	nop
 801b53c:	2400cbdc 	.word	0x2400cbdc
 801b540:	2400cbd8 	.word	0x2400cbd8
 801b544:	08023a70 	.word	0x08023a70
 801b548:	08023aa8 	.word	0x08023aa8
 801b54c:	08023ad0 	.word	0x08023ad0
 801b550:	08024690 	.word	0x08024690
 801b554:	0801cded 	.word	0x0801cded

0801b558 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801b558:	b580      	push	{r7, lr}
 801b55a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801b55c:	4b0e      	ldr	r3, [pc, #56]	; (801b598 <dhcp_dec_pcb_refcount+0x40>)
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	2b00      	cmp	r3, #0
 801b562:	d105      	bne.n	801b570 <dhcp_dec_pcb_refcount+0x18>
 801b564:	4b0d      	ldr	r3, [pc, #52]	; (801b59c <dhcp_dec_pcb_refcount+0x44>)
 801b566:	22ff      	movs	r2, #255	; 0xff
 801b568:	490d      	ldr	r1, [pc, #52]	; (801b5a0 <dhcp_dec_pcb_refcount+0x48>)
 801b56a:	480e      	ldr	r0, [pc, #56]	; (801b5a4 <dhcp_dec_pcb_refcount+0x4c>)
 801b56c:	f005 f8fc 	bl	8020768 <iprintf>
  dhcp_pcb_refcount--;
 801b570:	4b09      	ldr	r3, [pc, #36]	; (801b598 <dhcp_dec_pcb_refcount+0x40>)
 801b572:	781b      	ldrb	r3, [r3, #0]
 801b574:	3b01      	subs	r3, #1
 801b576:	b2da      	uxtb	r2, r3
 801b578:	4b07      	ldr	r3, [pc, #28]	; (801b598 <dhcp_dec_pcb_refcount+0x40>)
 801b57a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801b57c:	4b06      	ldr	r3, [pc, #24]	; (801b598 <dhcp_dec_pcb_refcount+0x40>)
 801b57e:	781b      	ldrb	r3, [r3, #0]
 801b580:	2b00      	cmp	r3, #0
 801b582:	d107      	bne.n	801b594 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801b584:	4b08      	ldr	r3, [pc, #32]	; (801b5a8 <dhcp_dec_pcb_refcount+0x50>)
 801b586:	681b      	ldr	r3, [r3, #0]
 801b588:	4618      	mov	r0, r3
 801b58a:	f7ff ff09 	bl	801b3a0 <udp_remove>
    dhcp_pcb = NULL;
 801b58e:	4b06      	ldr	r3, [pc, #24]	; (801b5a8 <dhcp_dec_pcb_refcount+0x50>)
 801b590:	2200      	movs	r2, #0
 801b592:	601a      	str	r2, [r3, #0]
  }
}
 801b594:	bf00      	nop
 801b596:	bd80      	pop	{r7, pc}
 801b598:	2400cbdc 	.word	0x2400cbdc
 801b59c:	08023a70 	.word	0x08023a70
 801b5a0:	08023af8 	.word	0x08023af8
 801b5a4:	08023ad0 	.word	0x08023ad0
 801b5a8:	2400cbd8 	.word	0x2400cbd8

0801b5ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b084      	sub	sp, #16
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b5ba:	210c      	movs	r1, #12
 801b5bc:	68f8      	ldr	r0, [r7, #12]
 801b5be:	f001 f857 	bl	801c670 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b5c2:	4b06      	ldr	r3, [pc, #24]	; (801b5dc <dhcp_handle_nak+0x30>)
 801b5c4:	4a05      	ldr	r2, [pc, #20]	; (801b5dc <dhcp_handle_nak+0x30>)
 801b5c6:	4905      	ldr	r1, [pc, #20]	; (801b5dc <dhcp_handle_nak+0x30>)
 801b5c8:	6878      	ldr	r0, [r7, #4]
 801b5ca:	f7f9 f829 	bl	8014620 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	f000 fc4a 	bl	801be68 <dhcp_discover>
}
 801b5d4:	bf00      	nop
 801b5d6:	3710      	adds	r7, #16
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bd80      	pop	{r7, pc}
 801b5dc:	08024690 	.word	0x08024690

0801b5e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801b5e0:	b580      	push	{r7, lr}
 801b5e2:	b084      	sub	sp, #16
 801b5e4:	af00      	add	r7, sp, #0
 801b5e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801b5ee:	2108      	movs	r1, #8
 801b5f0:	68f8      	ldr	r0, [r7, #12]
 801b5f2:	f001 f83d 	bl	801c670 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	331c      	adds	r3, #28
 801b5fa:	2200      	movs	r2, #0
 801b5fc:	4619      	mov	r1, r3
 801b5fe:	6878      	ldr	r0, [r7, #4]
 801b600:	f002 fb3e 	bl	801dc80 <etharp_query>
 801b604:	4603      	mov	r3, r0
 801b606:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	799b      	ldrb	r3, [r3, #6]
 801b60c:	2bff      	cmp	r3, #255	; 0xff
 801b60e:	d005      	beq.n	801b61c <dhcp_check+0x3c>
    dhcp->tries++;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	799b      	ldrb	r3, [r3, #6]
 801b614:	3301      	adds	r3, #1
 801b616:	b2da      	uxtb	r2, r3
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801b61c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801b620:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b622:	893b      	ldrh	r3, [r7, #8]
 801b624:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b628:	4a06      	ldr	r2, [pc, #24]	; (801b644 <dhcp_check+0x64>)
 801b62a:	fb82 1203 	smull	r1, r2, r2, r3
 801b62e:	1152      	asrs	r2, r2, #5
 801b630:	17db      	asrs	r3, r3, #31
 801b632:	1ad3      	subs	r3, r2, r3
 801b634:	b29a      	uxth	r2, r3
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801b63a:	bf00      	nop
 801b63c:	3710      	adds	r7, #16
 801b63e:	46bd      	mov	sp, r7
 801b640:	bd80      	pop	{r7, pc}
 801b642:	bf00      	nop
 801b644:	10624dd3 	.word	0x10624dd3

0801b648 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b648:	b580      	push	{r7, lr}
 801b64a:	b084      	sub	sp, #16
 801b64c:	af00      	add	r7, sp, #0
 801b64e:	6078      	str	r0, [r7, #4]
 801b650:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b656:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801b658:	4b0c      	ldr	r3, [pc, #48]	; (801b68c <dhcp_handle_offer+0x44>)
 801b65a:	789b      	ldrb	r3, [r3, #2]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d011      	beq.n	801b684 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801b660:	68fb      	ldr	r3, [r7, #12]
 801b662:	2200      	movs	r2, #0
 801b664:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801b666:	4b0a      	ldr	r3, [pc, #40]	; (801b690 <dhcp_handle_offer+0x48>)
 801b668:	689b      	ldr	r3, [r3, #8]
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7f8 f845 	bl	80136fa <lwip_htonl>
 801b670:	4602      	mov	r2, r0
 801b672:	68fb      	ldr	r3, [r7, #12]
 801b674:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801b676:	683b      	ldr	r3, [r7, #0]
 801b678:	691a      	ldr	r2, [r3, #16]
 801b67a:	68fb      	ldr	r3, [r7, #12]
 801b67c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801b67e:	6878      	ldr	r0, [r7, #4]
 801b680:	f000 f808 	bl	801b694 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801b684:	bf00      	nop
 801b686:	3710      	adds	r7, #16
 801b688:	46bd      	mov	sp, r7
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	2400cbd0 	.word	0x2400cbd0
 801b690:	2400cbb0 	.word	0x2400cbb0

0801b694 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801b694:	b5b0      	push	{r4, r5, r7, lr}
 801b696:	b08a      	sub	sp, #40	; 0x28
 801b698:	af02      	add	r7, sp, #8
 801b69a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d109      	bne.n	801b6b6 <dhcp_select+0x22>
 801b6a2:	4b71      	ldr	r3, [pc, #452]	; (801b868 <dhcp_select+0x1d4>)
 801b6a4:	f240 1277 	movw	r2, #375	; 0x177
 801b6a8:	4970      	ldr	r1, [pc, #448]	; (801b86c <dhcp_select+0x1d8>)
 801b6aa:	4871      	ldr	r0, [pc, #452]	; (801b870 <dhcp_select+0x1dc>)
 801b6ac:	f005 f85c 	bl	8020768 <iprintf>
 801b6b0:	f06f 030f 	mvn.w	r3, #15
 801b6b4:	e0d3      	b.n	801b85e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801b6bc:	69bb      	ldr	r3, [r7, #24]
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	d109      	bne.n	801b6d6 <dhcp_select+0x42>
 801b6c2:	4b69      	ldr	r3, [pc, #420]	; (801b868 <dhcp_select+0x1d4>)
 801b6c4:	f240 1279 	movw	r2, #377	; 0x179
 801b6c8:	496a      	ldr	r1, [pc, #424]	; (801b874 <dhcp_select+0x1e0>)
 801b6ca:	4869      	ldr	r0, [pc, #420]	; (801b870 <dhcp_select+0x1dc>)
 801b6cc:	f005 f84c 	bl	8020768 <iprintf>
 801b6d0:	f06f 0305 	mvn.w	r3, #5
 801b6d4:	e0c3      	b.n	801b85e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801b6d6:	2101      	movs	r1, #1
 801b6d8:	69b8      	ldr	r0, [r7, #24]
 801b6da:	f000 ffc9 	bl	801c670 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b6de:	f107 030c 	add.w	r3, r7, #12
 801b6e2:	2203      	movs	r2, #3
 801b6e4:	69b9      	ldr	r1, [r7, #24]
 801b6e6:	6878      	ldr	r0, [r7, #4]
 801b6e8:	f001 fc4e 	bl	801cf88 <dhcp_create_msg>
 801b6ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	f000 8085 	beq.w	801b800 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b6f6:	697b      	ldr	r3, [r7, #20]
 801b6f8:	685b      	ldr	r3, [r3, #4]
 801b6fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b6fc:	89b8      	ldrh	r0, [r7, #12]
 801b6fe:	693b      	ldr	r3, [r7, #16]
 801b700:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b704:	2302      	movs	r3, #2
 801b706:	2239      	movs	r2, #57	; 0x39
 801b708:	f000 ffcc 	bl	801c6a4 <dhcp_option>
 801b70c:	4603      	mov	r3, r0
 801b70e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b710:	89b8      	ldrh	r0, [r7, #12]
 801b712:	693b      	ldr	r3, [r7, #16]
 801b714:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b71c:	461a      	mov	r2, r3
 801b71e:	f001 f81b 	bl	801c758 <dhcp_option_short>
 801b722:	4603      	mov	r3, r0
 801b724:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b726:	89b8      	ldrh	r0, [r7, #12]
 801b728:	693b      	ldr	r3, [r7, #16]
 801b72a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b72e:	2304      	movs	r3, #4
 801b730:	2232      	movs	r2, #50	; 0x32
 801b732:	f000 ffb7 	bl	801c6a4 <dhcp_option>
 801b736:	4603      	mov	r3, r0
 801b738:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b73a:	89bc      	ldrh	r4, [r7, #12]
 801b73c:	693b      	ldr	r3, [r7, #16]
 801b73e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b742:	69bb      	ldr	r3, [r7, #24]
 801b744:	69db      	ldr	r3, [r3, #28]
 801b746:	4618      	mov	r0, r3
 801b748:	f7f7 ffd7 	bl	80136fa <lwip_htonl>
 801b74c:	4603      	mov	r3, r0
 801b74e:	461a      	mov	r2, r3
 801b750:	4629      	mov	r1, r5
 801b752:	4620      	mov	r0, r4
 801b754:	f001 f832 	bl	801c7bc <dhcp_option_long>
 801b758:	4603      	mov	r3, r0
 801b75a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b75c:	89b8      	ldrh	r0, [r7, #12]
 801b75e:	693b      	ldr	r3, [r7, #16]
 801b760:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b764:	2304      	movs	r3, #4
 801b766:	2236      	movs	r2, #54	; 0x36
 801b768:	f000 ff9c 	bl	801c6a4 <dhcp_option>
 801b76c:	4603      	mov	r3, r0
 801b76e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801b770:	89bc      	ldrh	r4, [r7, #12]
 801b772:	693b      	ldr	r3, [r7, #16]
 801b774:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b778:	69bb      	ldr	r3, [r7, #24]
 801b77a:	699b      	ldr	r3, [r3, #24]
 801b77c:	4618      	mov	r0, r3
 801b77e:	f7f7 ffbc 	bl	80136fa <lwip_htonl>
 801b782:	4603      	mov	r3, r0
 801b784:	461a      	mov	r2, r3
 801b786:	4629      	mov	r1, r5
 801b788:	4620      	mov	r0, r4
 801b78a:	f001 f817 	bl	801c7bc <dhcp_option_long>
 801b78e:	4603      	mov	r3, r0
 801b790:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b792:	89b8      	ldrh	r0, [r7, #12]
 801b794:	693b      	ldr	r3, [r7, #16]
 801b796:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b79a:	2303      	movs	r3, #3
 801b79c:	2237      	movs	r2, #55	; 0x37
 801b79e:	f000 ff81 	bl	801c6a4 <dhcp_option>
 801b7a2:	4603      	mov	r3, r0
 801b7a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	77bb      	strb	r3, [r7, #30]
 801b7aa:	e00e      	b.n	801b7ca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b7ac:	89b8      	ldrh	r0, [r7, #12]
 801b7ae:	693b      	ldr	r3, [r7, #16]
 801b7b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b7b4:	7fbb      	ldrb	r3, [r7, #30]
 801b7b6:	4a30      	ldr	r2, [pc, #192]	; (801b878 <dhcp_select+0x1e4>)
 801b7b8:	5cd3      	ldrb	r3, [r2, r3]
 801b7ba:	461a      	mov	r2, r3
 801b7bc:	f000 ffa6 	bl	801c70c <dhcp_option_byte>
 801b7c0:	4603      	mov	r3, r0
 801b7c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b7c4:	7fbb      	ldrb	r3, [r7, #30]
 801b7c6:	3301      	adds	r3, #1
 801b7c8:	77bb      	strb	r3, [r7, #30]
 801b7ca:	7fbb      	ldrb	r3, [r7, #30]
 801b7cc:	2b02      	cmp	r3, #2
 801b7ce:	d9ed      	bls.n	801b7ac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b7d0:	89b8      	ldrh	r0, [r7, #12]
 801b7d2:	693b      	ldr	r3, [r7, #16]
 801b7d4:	33f0      	adds	r3, #240	; 0xf0
 801b7d6:	697a      	ldr	r2, [r7, #20]
 801b7d8:	4619      	mov	r1, r3
 801b7da:	f001 fcab 	bl	801d134 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801b7de:	4b27      	ldr	r3, [pc, #156]	; (801b87c <dhcp_select+0x1e8>)
 801b7e0:	6818      	ldr	r0, [r3, #0]
 801b7e2:	4b27      	ldr	r3, [pc, #156]	; (801b880 <dhcp_select+0x1ec>)
 801b7e4:	9301      	str	r3, [sp, #4]
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	9300      	str	r3, [sp, #0]
 801b7ea:	2343      	movs	r3, #67	; 0x43
 801b7ec:	4a25      	ldr	r2, [pc, #148]	; (801b884 <dhcp_select+0x1f0>)
 801b7ee:	6979      	ldr	r1, [r7, #20]
 801b7f0:	f7ff fbda 	bl	801afa8 <udp_sendto_if_src>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b7f8:	6978      	ldr	r0, [r7, #20]
 801b7fa:	f7f9 fc1f 	bl	801503c <pbuf_free>
 801b7fe:	e001      	b.n	801b804 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b800:	23ff      	movs	r3, #255	; 0xff
 801b802:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b804:	69bb      	ldr	r3, [r7, #24]
 801b806:	799b      	ldrb	r3, [r3, #6]
 801b808:	2bff      	cmp	r3, #255	; 0xff
 801b80a:	d005      	beq.n	801b818 <dhcp_select+0x184>
    dhcp->tries++;
 801b80c:	69bb      	ldr	r3, [r7, #24]
 801b80e:	799b      	ldrb	r3, [r3, #6]
 801b810:	3301      	adds	r3, #1
 801b812:	b2da      	uxtb	r2, r3
 801b814:	69bb      	ldr	r3, [r7, #24]
 801b816:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801b818:	69bb      	ldr	r3, [r7, #24]
 801b81a:	799b      	ldrb	r3, [r3, #6]
 801b81c:	2b05      	cmp	r3, #5
 801b81e:	d80d      	bhi.n	801b83c <dhcp_select+0x1a8>
 801b820:	69bb      	ldr	r3, [r7, #24]
 801b822:	799b      	ldrb	r3, [r3, #6]
 801b824:	461a      	mov	r2, r3
 801b826:	2301      	movs	r3, #1
 801b828:	4093      	lsls	r3, r2
 801b82a:	b29b      	uxth	r3, r3
 801b82c:	461a      	mov	r2, r3
 801b82e:	0152      	lsls	r2, r2, #5
 801b830:	1ad2      	subs	r2, r2, r3
 801b832:	0092      	lsls	r2, r2, #2
 801b834:	4413      	add	r3, r2
 801b836:	00db      	lsls	r3, r3, #3
 801b838:	b29b      	uxth	r3, r3
 801b83a:	e001      	b.n	801b840 <dhcp_select+0x1ac>
 801b83c:	f64e 2360 	movw	r3, #60000	; 0xea60
 801b840:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b842:	89fb      	ldrh	r3, [r7, #14]
 801b844:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b848:	4a0f      	ldr	r2, [pc, #60]	; (801b888 <dhcp_select+0x1f4>)
 801b84a:	fb82 1203 	smull	r1, r2, r2, r3
 801b84e:	1152      	asrs	r2, r2, #5
 801b850:	17db      	asrs	r3, r3, #31
 801b852:	1ad3      	subs	r3, r2, r3
 801b854:	b29a      	uxth	r2, r3
 801b856:	69bb      	ldr	r3, [r7, #24]
 801b858:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b85a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b85e:	4618      	mov	r0, r3
 801b860:	3720      	adds	r7, #32
 801b862:	46bd      	mov	sp, r7
 801b864:	bdb0      	pop	{r4, r5, r7, pc}
 801b866:	bf00      	nop
 801b868:	08023a70 	.word	0x08023a70
 801b86c:	08023b1c 	.word	0x08023b1c
 801b870:	08023ad0 	.word	0x08023ad0
 801b874:	08023b38 	.word	0x08023b38
 801b878:	240000c0 	.word	0x240000c0
 801b87c:	2400cbd8 	.word	0x2400cbd8
 801b880:	08024690 	.word	0x08024690
 801b884:	08024694 	.word	0x08024694
 801b888:	10624dd3 	.word	0x10624dd3

0801b88c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801b88c:	b580      	push	{r7, lr}
 801b88e:	b082      	sub	sp, #8
 801b890:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801b892:	4b27      	ldr	r3, [pc, #156]	; (801b930 <dhcp_coarse_tmr+0xa4>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	607b      	str	r3, [r7, #4]
 801b898:	e042      	b.n	801b920 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b89e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801b8a0:	683b      	ldr	r3, [r7, #0]
 801b8a2:	2b00      	cmp	r3, #0
 801b8a4:	d039      	beq.n	801b91a <dhcp_coarse_tmr+0x8e>
 801b8a6:	683b      	ldr	r3, [r7, #0]
 801b8a8:	795b      	ldrb	r3, [r3, #5]
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	d035      	beq.n	801b91a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801b8ae:	683b      	ldr	r3, [r7, #0]
 801b8b0:	8a9b      	ldrh	r3, [r3, #20]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d012      	beq.n	801b8dc <dhcp_coarse_tmr+0x50>
 801b8b6:	683b      	ldr	r3, [r7, #0]
 801b8b8:	8a5b      	ldrh	r3, [r3, #18]
 801b8ba:	3301      	adds	r3, #1
 801b8bc:	b29a      	uxth	r2, r3
 801b8be:	683b      	ldr	r3, [r7, #0]
 801b8c0:	825a      	strh	r2, [r3, #18]
 801b8c2:	683b      	ldr	r3, [r7, #0]
 801b8c4:	8a5a      	ldrh	r2, [r3, #18]
 801b8c6:	683b      	ldr	r3, [r7, #0]
 801b8c8:	8a9b      	ldrh	r3, [r3, #20]
 801b8ca:	429a      	cmp	r2, r3
 801b8cc:	d106      	bne.n	801b8dc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	f000 fe34 	bl	801c53c <dhcp_release_and_stop>
        dhcp_start(netif);
 801b8d4:	6878      	ldr	r0, [r7, #4]
 801b8d6:	f000 f96b 	bl	801bbb0 <dhcp_start>
 801b8da:	e01e      	b.n	801b91a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801b8dc:	683b      	ldr	r3, [r7, #0]
 801b8de:	8a1b      	ldrh	r3, [r3, #16]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d00b      	beq.n	801b8fc <dhcp_coarse_tmr+0x70>
 801b8e4:	683b      	ldr	r3, [r7, #0]
 801b8e6:	8a1b      	ldrh	r3, [r3, #16]
 801b8e8:	1e5a      	subs	r2, r3, #1
 801b8ea:	b291      	uxth	r1, r2
 801b8ec:	683a      	ldr	r2, [r7, #0]
 801b8ee:	8211      	strh	r1, [r2, #16]
 801b8f0:	2b01      	cmp	r3, #1
 801b8f2:	d103      	bne.n	801b8fc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801b8f4:	6878      	ldr	r0, [r7, #4]
 801b8f6:	f000 f8c7 	bl	801ba88 <dhcp_t2_timeout>
 801b8fa:	e00e      	b.n	801b91a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	89db      	ldrh	r3, [r3, #14]
 801b900:	2b00      	cmp	r3, #0
 801b902:	d00a      	beq.n	801b91a <dhcp_coarse_tmr+0x8e>
 801b904:	683b      	ldr	r3, [r7, #0]
 801b906:	89db      	ldrh	r3, [r3, #14]
 801b908:	1e5a      	subs	r2, r3, #1
 801b90a:	b291      	uxth	r1, r2
 801b90c:	683a      	ldr	r2, [r7, #0]
 801b90e:	81d1      	strh	r1, [r2, #14]
 801b910:	2b01      	cmp	r3, #1
 801b912:	d102      	bne.n	801b91a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801b914:	6878      	ldr	r0, [r7, #4]
 801b916:	f000 f888 	bl	801ba2a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	607b      	str	r3, [r7, #4]
 801b920:	687b      	ldr	r3, [r7, #4]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d1b9      	bne.n	801b89a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801b926:	bf00      	nop
 801b928:	bf00      	nop
 801b92a:	3708      	adds	r7, #8
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}
 801b930:	2400cb44 	.word	0x2400cb44

0801b934 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b082      	sub	sp, #8
 801b938:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801b93a:	4b16      	ldr	r3, [pc, #88]	; (801b994 <dhcp_fine_tmr+0x60>)
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	607b      	str	r3, [r7, #4]
 801b940:	e020      	b.n	801b984 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b946:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801b948:	683b      	ldr	r3, [r7, #0]
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d017      	beq.n	801b97e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	891b      	ldrh	r3, [r3, #8]
 801b952:	2b01      	cmp	r3, #1
 801b954:	d906      	bls.n	801b964 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801b956:	683b      	ldr	r3, [r7, #0]
 801b958:	891b      	ldrh	r3, [r3, #8]
 801b95a:	3b01      	subs	r3, #1
 801b95c:	b29a      	uxth	r2, r3
 801b95e:	683b      	ldr	r3, [r7, #0]
 801b960:	811a      	strh	r2, [r3, #8]
 801b962:	e00c      	b.n	801b97e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801b964:	683b      	ldr	r3, [r7, #0]
 801b966:	891b      	ldrh	r3, [r3, #8]
 801b968:	2b01      	cmp	r3, #1
 801b96a:	d108      	bne.n	801b97e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801b96c:	683b      	ldr	r3, [r7, #0]
 801b96e:	891b      	ldrh	r3, [r3, #8]
 801b970:	3b01      	subs	r3, #1
 801b972:	b29a      	uxth	r2, r3
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801b978:	6878      	ldr	r0, [r7, #4]
 801b97a:	f000 f80d 	bl	801b998 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	607b      	str	r3, [r7, #4]
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	2b00      	cmp	r3, #0
 801b988:	d1db      	bne.n	801b942 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801b98a:	bf00      	nop
 801b98c:	bf00      	nop
 801b98e:	3708      	adds	r7, #8
 801b990:	46bd      	mov	sp, r7
 801b992:	bd80      	pop	{r7, pc}
 801b994:	2400cb44 	.word	0x2400cb44

0801b998 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801b998:	b580      	push	{r7, lr}
 801b99a:	b084      	sub	sp, #16
 801b99c:	af00      	add	r7, sp, #0
 801b99e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	795b      	ldrb	r3, [r3, #5]
 801b9aa:	2b0c      	cmp	r3, #12
 801b9ac:	d003      	beq.n	801b9b6 <dhcp_timeout+0x1e>
 801b9ae:	68fb      	ldr	r3, [r7, #12]
 801b9b0:	795b      	ldrb	r3, [r3, #5]
 801b9b2:	2b06      	cmp	r3, #6
 801b9b4:	d103      	bne.n	801b9be <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801b9b6:	6878      	ldr	r0, [r7, #4]
 801b9b8:	f000 fa56 	bl	801be68 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801b9bc:	e031      	b.n	801ba22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	795b      	ldrb	r3, [r3, #5]
 801b9c2:	2b01      	cmp	r3, #1
 801b9c4:	d10e      	bne.n	801b9e4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801b9c6:	68fb      	ldr	r3, [r7, #12]
 801b9c8:	799b      	ldrb	r3, [r3, #6]
 801b9ca:	2b05      	cmp	r3, #5
 801b9cc:	d803      	bhi.n	801b9d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801b9ce:	6878      	ldr	r0, [r7, #4]
 801b9d0:	f7ff fe60 	bl	801b694 <dhcp_select>
}
 801b9d4:	e025      	b.n	801ba22 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801b9d6:	6878      	ldr	r0, [r7, #4]
 801b9d8:	f000 fdb0 	bl	801c53c <dhcp_release_and_stop>
      dhcp_start(netif);
 801b9dc:	6878      	ldr	r0, [r7, #4]
 801b9de:	f000 f8e7 	bl	801bbb0 <dhcp_start>
}
 801b9e2:	e01e      	b.n	801ba22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801b9e4:	68fb      	ldr	r3, [r7, #12]
 801b9e6:	795b      	ldrb	r3, [r3, #5]
 801b9e8:	2b08      	cmp	r3, #8
 801b9ea:	d10b      	bne.n	801ba04 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801b9ec:	68fb      	ldr	r3, [r7, #12]
 801b9ee:	799b      	ldrb	r3, [r3, #6]
 801b9f0:	2b01      	cmp	r3, #1
 801b9f2:	d803      	bhi.n	801b9fc <dhcp_timeout+0x64>
      dhcp_check(netif);
 801b9f4:	6878      	ldr	r0, [r7, #4]
 801b9f6:	f7ff fdf3 	bl	801b5e0 <dhcp_check>
}
 801b9fa:	e012      	b.n	801ba22 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801b9fc:	6878      	ldr	r0, [r7, #4]
 801b9fe:	f000 fad5 	bl	801bfac <dhcp_bind>
}
 801ba02:	e00e      	b.n	801ba22 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801ba04:	68fb      	ldr	r3, [r7, #12]
 801ba06:	795b      	ldrb	r3, [r3, #5]
 801ba08:	2b03      	cmp	r3, #3
 801ba0a:	d10a      	bne.n	801ba22 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801ba0c:	68fb      	ldr	r3, [r7, #12]
 801ba0e:	799b      	ldrb	r3, [r3, #6]
 801ba10:	2b01      	cmp	r3, #1
 801ba12:	d803      	bhi.n	801ba1c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801ba14:	6878      	ldr	r0, [r7, #4]
 801ba16:	f000 fcdb 	bl	801c3d0 <dhcp_reboot>
}
 801ba1a:	e002      	b.n	801ba22 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801ba1c:	6878      	ldr	r0, [r7, #4]
 801ba1e:	f000 fa23 	bl	801be68 <dhcp_discover>
}
 801ba22:	bf00      	nop
 801ba24:	3710      	adds	r7, #16
 801ba26:	46bd      	mov	sp, r7
 801ba28:	bd80      	pop	{r7, pc}

0801ba2a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801ba2a:	b580      	push	{r7, lr}
 801ba2c:	b084      	sub	sp, #16
 801ba2e:	af00      	add	r7, sp, #0
 801ba30:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	795b      	ldrb	r3, [r3, #5]
 801ba3c:	2b01      	cmp	r3, #1
 801ba3e:	d007      	beq.n	801ba50 <dhcp_t1_timeout+0x26>
 801ba40:	68fb      	ldr	r3, [r7, #12]
 801ba42:	795b      	ldrb	r3, [r3, #5]
 801ba44:	2b0a      	cmp	r3, #10
 801ba46:	d003      	beq.n	801ba50 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ba4c:	2b05      	cmp	r3, #5
 801ba4e:	d117      	bne.n	801ba80 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801ba50:	6878      	ldr	r0, [r7, #4]
 801ba52:	f000 fb85 	bl	801c160 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	899b      	ldrh	r3, [r3, #12]
 801ba5a:	461a      	mov	r2, r3
 801ba5c:	68fb      	ldr	r3, [r7, #12]
 801ba5e:	8a5b      	ldrh	r3, [r3, #18]
 801ba60:	1ad3      	subs	r3, r2, r3
 801ba62:	2b01      	cmp	r3, #1
 801ba64:	dd0c      	ble.n	801ba80 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	899b      	ldrh	r3, [r3, #12]
 801ba6a:	461a      	mov	r2, r3
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	8a5b      	ldrh	r3, [r3, #18]
 801ba70:	1ad3      	subs	r3, r2, r3
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	da00      	bge.n	801ba78 <dhcp_t1_timeout+0x4e>
 801ba76:	3301      	adds	r3, #1
 801ba78:	105b      	asrs	r3, r3, #1
 801ba7a:	b29a      	uxth	r2, r3
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801ba80:	bf00      	nop
 801ba82:	3710      	adds	r7, #16
 801ba84:	46bd      	mov	sp, r7
 801ba86:	bd80      	pop	{r7, pc}

0801ba88 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b084      	sub	sp, #16
 801ba8c:	af00      	add	r7, sp, #0
 801ba8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba94:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	795b      	ldrb	r3, [r3, #5]
 801ba9a:	2b01      	cmp	r3, #1
 801ba9c:	d00b      	beq.n	801bab6 <dhcp_t2_timeout+0x2e>
 801ba9e:	68fb      	ldr	r3, [r7, #12]
 801baa0:	795b      	ldrb	r3, [r3, #5]
 801baa2:	2b0a      	cmp	r3, #10
 801baa4:	d007      	beq.n	801bab6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801baaa:	2b05      	cmp	r3, #5
 801baac:	d003      	beq.n	801bab6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	795b      	ldrb	r3, [r3, #5]
 801bab2:	2b04      	cmp	r3, #4
 801bab4:	d117      	bne.n	801bae6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801bab6:	6878      	ldr	r0, [r7, #4]
 801bab8:	f000 fbee 	bl	801c298 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	8a9b      	ldrh	r3, [r3, #20]
 801bac0:	461a      	mov	r2, r3
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	8a5b      	ldrh	r3, [r3, #18]
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	2b01      	cmp	r3, #1
 801baca:	dd0c      	ble.n	801bae6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	8a9b      	ldrh	r3, [r3, #20]
 801bad0:	461a      	mov	r2, r3
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	8a5b      	ldrh	r3, [r3, #18]
 801bad6:	1ad3      	subs	r3, r2, r3
 801bad8:	2b00      	cmp	r3, #0
 801bada:	da00      	bge.n	801bade <dhcp_t2_timeout+0x56>
 801badc:	3301      	adds	r3, #1
 801bade:	105b      	asrs	r3, r3, #1
 801bae0:	b29a      	uxth	r2, r3
 801bae2:	68fb      	ldr	r3, [r7, #12]
 801bae4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801bae6:	bf00      	nop
 801bae8:	3710      	adds	r7, #16
 801baea:	46bd      	mov	sp, r7
 801baec:	bd80      	pop	{r7, pc}
	...

0801baf0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801baf0:	b580      	push	{r7, lr}
 801baf2:	b084      	sub	sp, #16
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
 801baf8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bafe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801bb00:	68fb      	ldr	r3, [r7, #12]
 801bb02:	2200      	movs	r2, #0
 801bb04:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	2200      	movs	r2, #0
 801bb0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801bb0c:	4b26      	ldr	r3, [pc, #152]	; (801bba8 <dhcp_handle_ack+0xb8>)
 801bb0e:	78db      	ldrb	r3, [r3, #3]
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	d003      	beq.n	801bb1c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801bb14:	4b25      	ldr	r3, [pc, #148]	; (801bbac <dhcp_handle_ack+0xbc>)
 801bb16:	68da      	ldr	r2, [r3, #12]
 801bb18:	68fb      	ldr	r3, [r7, #12]
 801bb1a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801bb1c:	4b22      	ldr	r3, [pc, #136]	; (801bba8 <dhcp_handle_ack+0xb8>)
 801bb1e:	791b      	ldrb	r3, [r3, #4]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d004      	beq.n	801bb2e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801bb24:	4b21      	ldr	r3, [pc, #132]	; (801bbac <dhcp_handle_ack+0xbc>)
 801bb26:	691a      	ldr	r2, [r3, #16]
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	62da      	str	r2, [r3, #44]	; 0x2c
 801bb2c:	e004      	b.n	801bb38 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb32:	085a      	lsrs	r2, r3, #1
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801bb38:	4b1b      	ldr	r3, [pc, #108]	; (801bba8 <dhcp_handle_ack+0xb8>)
 801bb3a:	795b      	ldrb	r3, [r3, #5]
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d004      	beq.n	801bb4a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801bb40:	4b1a      	ldr	r3, [pc, #104]	; (801bbac <dhcp_handle_ack+0xbc>)
 801bb42:	695a      	ldr	r2, [r3, #20]
 801bb44:	68fb      	ldr	r3, [r7, #12]
 801bb46:	631a      	str	r2, [r3, #48]	; 0x30
 801bb48:	e007      	b.n	801bb5a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bb4e:	4613      	mov	r3, r2
 801bb50:	00db      	lsls	r3, r3, #3
 801bb52:	1a9b      	subs	r3, r3, r2
 801bb54:	08da      	lsrs	r2, r3, #3
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801bb5a:	683b      	ldr	r3, [r7, #0]
 801bb5c:	691a      	ldr	r2, [r3, #16]
 801bb5e:	68fb      	ldr	r3, [r7, #12]
 801bb60:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801bb62:	4b11      	ldr	r3, [pc, #68]	; (801bba8 <dhcp_handle_ack+0xb8>)
 801bb64:	799b      	ldrb	r3, [r3, #6]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d00b      	beq.n	801bb82 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801bb6a:	4b10      	ldr	r3, [pc, #64]	; (801bbac <dhcp_handle_ack+0xbc>)
 801bb6c:	699b      	ldr	r3, [r3, #24]
 801bb6e:	4618      	mov	r0, r3
 801bb70:	f7f7 fdc3 	bl	80136fa <lwip_htonl>
 801bb74:	4602      	mov	r2, r0
 801bb76:	68fb      	ldr	r3, [r7, #12]
 801bb78:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	2201      	movs	r2, #1
 801bb7e:	71da      	strb	r2, [r3, #7]
 801bb80:	e002      	b.n	801bb88 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	2200      	movs	r2, #0
 801bb86:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801bb88:	4b07      	ldr	r3, [pc, #28]	; (801bba8 <dhcp_handle_ack+0xb8>)
 801bb8a:	79db      	ldrb	r3, [r3, #7]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d007      	beq.n	801bba0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801bb90:	4b06      	ldr	r3, [pc, #24]	; (801bbac <dhcp_handle_ack+0xbc>)
 801bb92:	69db      	ldr	r3, [r3, #28]
 801bb94:	4618      	mov	r0, r3
 801bb96:	f7f7 fdb0 	bl	80136fa <lwip_htonl>
 801bb9a:	4602      	mov	r2, r0
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801bba0:	bf00      	nop
 801bba2:	3710      	adds	r7, #16
 801bba4:	46bd      	mov	sp, r7
 801bba6:	bd80      	pop	{r7, pc}
 801bba8:	2400cbd0 	.word	0x2400cbd0
 801bbac:	2400cbb0 	.word	0x2400cbb0

0801bbb0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b084      	sub	sp, #16
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d109      	bne.n	801bbd2 <dhcp_start+0x22>
 801bbbe:	4b37      	ldr	r3, [pc, #220]	; (801bc9c <dhcp_start+0xec>)
 801bbc0:	f240 22e7 	movw	r2, #743	; 0x2e7
 801bbc4:	4936      	ldr	r1, [pc, #216]	; (801bca0 <dhcp_start+0xf0>)
 801bbc6:	4837      	ldr	r0, [pc, #220]	; (801bca4 <dhcp_start+0xf4>)
 801bbc8:	f004 fdce 	bl	8020768 <iprintf>
 801bbcc:	f06f 030f 	mvn.w	r3, #15
 801bbd0:	e060      	b.n	801bc94 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bbd8:	f003 0301 	and.w	r3, r3, #1
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d109      	bne.n	801bbf4 <dhcp_start+0x44>
 801bbe0:	4b2e      	ldr	r3, [pc, #184]	; (801bc9c <dhcp_start+0xec>)
 801bbe2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801bbe6:	4930      	ldr	r1, [pc, #192]	; (801bca8 <dhcp_start+0xf8>)
 801bbe8:	482e      	ldr	r0, [pc, #184]	; (801bca4 <dhcp_start+0xf4>)
 801bbea:	f004 fdbd 	bl	8020768 <iprintf>
 801bbee:	f06f 030f 	mvn.w	r3, #15
 801bbf2:	e04f      	b.n	801bc94 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbf8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bbfe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801bc02:	d202      	bcs.n	801bc0a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801bc04:	f04f 33ff 	mov.w	r3, #4294967295
 801bc08:	e044      	b.n	801bc94 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801bc0a:	68fb      	ldr	r3, [r7, #12]
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d10d      	bne.n	801bc2c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801bc10:	2034      	movs	r0, #52	; 0x34
 801bc12:	f7f8 f949 	bl	8013ea8 <mem_malloc>
 801bc16:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801bc18:	68fb      	ldr	r3, [r7, #12]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d102      	bne.n	801bc24 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801bc1e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc22:	e037      	b.n	801bc94 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	68fa      	ldr	r2, [r7, #12]
 801bc28:	625a      	str	r2, [r3, #36]	; 0x24
 801bc2a:	e005      	b.n	801bc38 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801bc2c:	68fb      	ldr	r3, [r7, #12]
 801bc2e:	791b      	ldrb	r3, [r3, #4]
 801bc30:	2b00      	cmp	r3, #0
 801bc32:	d001      	beq.n	801bc38 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bc34:	f7ff fc90 	bl	801b558 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801bc38:	2234      	movs	r2, #52	; 0x34
 801bc3a:	2100      	movs	r1, #0
 801bc3c:	68f8      	ldr	r0, [r7, #12]
 801bc3e:	f004 fcf6 	bl	802062e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801bc42:	f7ff fc37 	bl	801b4b4 <dhcp_inc_pcb_refcount>
 801bc46:	4603      	mov	r3, r0
 801bc48:	2b00      	cmp	r3, #0
 801bc4a:	d002      	beq.n	801bc52 <dhcp_start+0xa2>
    return ERR_MEM;
 801bc4c:	f04f 33ff 	mov.w	r3, #4294967295
 801bc50:	e020      	b.n	801bc94 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	2201      	movs	r2, #1
 801bc56:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bc5e:	f003 0304 	and.w	r3, r3, #4
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d105      	bne.n	801bc72 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801bc66:	2102      	movs	r1, #2
 801bc68:	68f8      	ldr	r0, [r7, #12]
 801bc6a:	f000 fd01 	bl	801c670 <dhcp_set_state>
    return ERR_OK;
 801bc6e:	2300      	movs	r3, #0
 801bc70:	e010      	b.n	801bc94 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801bc72:	6878      	ldr	r0, [r7, #4]
 801bc74:	f000 f8f8 	bl	801be68 <dhcp_discover>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801bc7c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d005      	beq.n	801bc90 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801bc84:	6878      	ldr	r0, [r7, #4]
 801bc86:	f000 fc59 	bl	801c53c <dhcp_release_and_stop>
    return ERR_MEM;
 801bc8a:	f04f 33ff 	mov.w	r3, #4294967295
 801bc8e:	e001      	b.n	801bc94 <dhcp_start+0xe4>
  }
  return result;
 801bc90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bc94:	4618      	mov	r0, r3
 801bc96:	3710      	adds	r7, #16
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bd80      	pop	{r7, pc}
 801bc9c:	08023a70 	.word	0x08023a70
 801bca0:	08023b54 	.word	0x08023b54
 801bca4:	08023ad0 	.word	0x08023ad0
 801bca8:	08023b98 	.word	0x08023b98

0801bcac <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b084      	sub	sp, #16
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bcb8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d025      	beq.n	801bd0c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801bcc0:	68fb      	ldr	r3, [r7, #12]
 801bcc2:	795b      	ldrb	r3, [r3, #5]
 801bcc4:	2b0a      	cmp	r3, #10
 801bcc6:	d008      	beq.n	801bcda <dhcp_network_changed+0x2e>
 801bcc8:	2b0a      	cmp	r3, #10
 801bcca:	dc0d      	bgt.n	801bce8 <dhcp_network_changed+0x3c>
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d01f      	beq.n	801bd10 <dhcp_network_changed+0x64>
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	db09      	blt.n	801bce8 <dhcp_network_changed+0x3c>
 801bcd4:	3b03      	subs	r3, #3
 801bcd6:	2b02      	cmp	r3, #2
 801bcd8:	d806      	bhi.n	801bce8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	2200      	movs	r2, #0
 801bcde:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	f000 fb75 	bl	801c3d0 <dhcp_reboot>
      break;
 801bce6:	e014      	b.n	801bd12 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	795b      	ldrb	r3, [r3, #5]
 801bcec:	2b0c      	cmp	r3, #12
 801bcee:	d906      	bls.n	801bcfe <dhcp_network_changed+0x52>
 801bcf0:	4b09      	ldr	r3, [pc, #36]	; (801bd18 <dhcp_network_changed+0x6c>)
 801bcf2:	f240 326d 	movw	r2, #877	; 0x36d
 801bcf6:	4909      	ldr	r1, [pc, #36]	; (801bd1c <dhcp_network_changed+0x70>)
 801bcf8:	4809      	ldr	r0, [pc, #36]	; (801bd20 <dhcp_network_changed+0x74>)
 801bcfa:	f004 fd35 	bl	8020768 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	2200      	movs	r2, #0
 801bd02:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801bd04:	6878      	ldr	r0, [r7, #4]
 801bd06:	f000 f8af 	bl	801be68 <dhcp_discover>
      break;
 801bd0a:	e002      	b.n	801bd12 <dhcp_network_changed+0x66>
    return;
 801bd0c:	bf00      	nop
 801bd0e:	e000      	b.n	801bd12 <dhcp_network_changed+0x66>
      break;
 801bd10:	bf00      	nop
  }
}
 801bd12:	3710      	adds	r7, #16
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	08023a70 	.word	0x08023a70
 801bd1c:	08023bbc 	.word	0x08023bbc
 801bd20:	08023ad0 	.word	0x08023ad0

0801bd24 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b084      	sub	sp, #16
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d107      	bne.n	801bd44 <dhcp_arp_reply+0x20>
 801bd34:	4b0e      	ldr	r3, [pc, #56]	; (801bd70 <dhcp_arp_reply+0x4c>)
 801bd36:	f240 328b 	movw	r2, #907	; 0x38b
 801bd3a:	490e      	ldr	r1, [pc, #56]	; (801bd74 <dhcp_arp_reply+0x50>)
 801bd3c:	480e      	ldr	r0, [pc, #56]	; (801bd78 <dhcp_arp_reply+0x54>)
 801bd3e:	f004 fd13 	bl	8020768 <iprintf>
 801bd42:	e012      	b.n	801bd6a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd48:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801bd4a:	68fb      	ldr	r3, [r7, #12]
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d00c      	beq.n	801bd6a <dhcp_arp_reply+0x46>
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	795b      	ldrb	r3, [r3, #5]
 801bd54:	2b08      	cmp	r3, #8
 801bd56:	d108      	bne.n	801bd6a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801bd58:	683b      	ldr	r3, [r7, #0]
 801bd5a:	681a      	ldr	r2, [r3, #0]
 801bd5c:	68fb      	ldr	r3, [r7, #12]
 801bd5e:	69db      	ldr	r3, [r3, #28]
 801bd60:	429a      	cmp	r2, r3
 801bd62:	d102      	bne.n	801bd6a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801bd64:	6878      	ldr	r0, [r7, #4]
 801bd66:	f000 f809 	bl	801bd7c <dhcp_decline>
    }
  }
}
 801bd6a:	3710      	adds	r7, #16
 801bd6c:	46bd      	mov	sp, r7
 801bd6e:	bd80      	pop	{r7, pc}
 801bd70:	08023a70 	.word	0x08023a70
 801bd74:	08023b54 	.word	0x08023b54
 801bd78:	08023ad0 	.word	0x08023ad0

0801bd7c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801bd7c:	b5b0      	push	{r4, r5, r7, lr}
 801bd7e:	b08a      	sub	sp, #40	; 0x28
 801bd80:	af02      	add	r7, sp, #8
 801bd82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd88:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801bd8a:	210c      	movs	r1, #12
 801bd8c:	69b8      	ldr	r0, [r7, #24]
 801bd8e:	f000 fc6f 	bl	801c670 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801bd92:	f107 030c 	add.w	r3, r7, #12
 801bd96:	2204      	movs	r2, #4
 801bd98:	69b9      	ldr	r1, [r7, #24]
 801bd9a:	6878      	ldr	r0, [r7, #4]
 801bd9c:	f001 f8f4 	bl	801cf88 <dhcp_create_msg>
 801bda0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801bda2:	697b      	ldr	r3, [r7, #20]
 801bda4:	2b00      	cmp	r3, #0
 801bda6:	d035      	beq.n	801be14 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bda8:	697b      	ldr	r3, [r7, #20]
 801bdaa:	685b      	ldr	r3, [r3, #4]
 801bdac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bdae:	89b8      	ldrh	r0, [r7, #12]
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bdb6:	2304      	movs	r3, #4
 801bdb8:	2232      	movs	r2, #50	; 0x32
 801bdba:	f000 fc73 	bl	801c6a4 <dhcp_option>
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bdc2:	89bc      	ldrh	r4, [r7, #12]
 801bdc4:	693b      	ldr	r3, [r7, #16]
 801bdc6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bdca:	69bb      	ldr	r3, [r7, #24]
 801bdcc:	69db      	ldr	r3, [r3, #28]
 801bdce:	4618      	mov	r0, r3
 801bdd0:	f7f7 fc93 	bl	80136fa <lwip_htonl>
 801bdd4:	4603      	mov	r3, r0
 801bdd6:	461a      	mov	r2, r3
 801bdd8:	4629      	mov	r1, r5
 801bdda:	4620      	mov	r0, r4
 801bddc:	f000 fcee 	bl	801c7bc <dhcp_option_long>
 801bde0:	4603      	mov	r3, r0
 801bde2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bde4:	89b8      	ldrh	r0, [r7, #12]
 801bde6:	693b      	ldr	r3, [r7, #16]
 801bde8:	33f0      	adds	r3, #240	; 0xf0
 801bdea:	697a      	ldr	r2, [r7, #20]
 801bdec:	4619      	mov	r1, r3
 801bdee:	f001 f9a1 	bl	801d134 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bdf2:	4b19      	ldr	r3, [pc, #100]	; (801be58 <dhcp_decline+0xdc>)
 801bdf4:	6818      	ldr	r0, [r3, #0]
 801bdf6:	4b19      	ldr	r3, [pc, #100]	; (801be5c <dhcp_decline+0xe0>)
 801bdf8:	9301      	str	r3, [sp, #4]
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	9300      	str	r3, [sp, #0]
 801bdfe:	2343      	movs	r3, #67	; 0x43
 801be00:	4a17      	ldr	r2, [pc, #92]	; (801be60 <dhcp_decline+0xe4>)
 801be02:	6979      	ldr	r1, [r7, #20]
 801be04:	f7ff f8d0 	bl	801afa8 <udp_sendto_if_src>
 801be08:	4603      	mov	r3, r0
 801be0a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801be0c:	6978      	ldr	r0, [r7, #20]
 801be0e:	f7f9 f915 	bl	801503c <pbuf_free>
 801be12:	e001      	b.n	801be18 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801be14:	23ff      	movs	r3, #255	; 0xff
 801be16:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801be18:	69bb      	ldr	r3, [r7, #24]
 801be1a:	799b      	ldrb	r3, [r3, #6]
 801be1c:	2bff      	cmp	r3, #255	; 0xff
 801be1e:	d005      	beq.n	801be2c <dhcp_decline+0xb0>
    dhcp->tries++;
 801be20:	69bb      	ldr	r3, [r7, #24]
 801be22:	799b      	ldrb	r3, [r3, #6]
 801be24:	3301      	adds	r3, #1
 801be26:	b2da      	uxtb	r2, r3
 801be28:	69bb      	ldr	r3, [r7, #24]
 801be2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801be2c:	f242 7310 	movw	r3, #10000	; 0x2710
 801be30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801be32:	89fb      	ldrh	r3, [r7, #14]
 801be34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801be38:	4a0a      	ldr	r2, [pc, #40]	; (801be64 <dhcp_decline+0xe8>)
 801be3a:	fb82 1203 	smull	r1, r2, r2, r3
 801be3e:	1152      	asrs	r2, r2, #5
 801be40:	17db      	asrs	r3, r3, #31
 801be42:	1ad3      	subs	r3, r2, r3
 801be44:	b29a      	uxth	r2, r3
 801be46:	69bb      	ldr	r3, [r7, #24]
 801be48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801be4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801be4e:	4618      	mov	r0, r3
 801be50:	3720      	adds	r7, #32
 801be52:	46bd      	mov	sp, r7
 801be54:	bdb0      	pop	{r4, r5, r7, pc}
 801be56:	bf00      	nop
 801be58:	2400cbd8 	.word	0x2400cbd8
 801be5c:	08024690 	.word	0x08024690
 801be60:	08024694 	.word	0x08024694
 801be64:	10624dd3 	.word	0x10624dd3

0801be68 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801be68:	b580      	push	{r7, lr}
 801be6a:	b08a      	sub	sp, #40	; 0x28
 801be6c:	af02      	add	r7, sp, #8
 801be6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be74:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801be76:	2300      	movs	r3, #0
 801be78:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801be7a:	69bb      	ldr	r3, [r7, #24]
 801be7c:	2200      	movs	r2, #0
 801be7e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801be80:	2106      	movs	r1, #6
 801be82:	69b8      	ldr	r0, [r7, #24]
 801be84:	f000 fbf4 	bl	801c670 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801be88:	f107 0308 	add.w	r3, r7, #8
 801be8c:	2201      	movs	r2, #1
 801be8e:	69b9      	ldr	r1, [r7, #24]
 801be90:	6878      	ldr	r0, [r7, #4]
 801be92:	f001 f879 	bl	801cf88 <dhcp_create_msg>
 801be96:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801be98:	693b      	ldr	r3, [r7, #16]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d04b      	beq.n	801bf36 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801bea4:	8938      	ldrh	r0, [r7, #8]
 801bea6:	68fb      	ldr	r3, [r7, #12]
 801bea8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801beac:	2302      	movs	r3, #2
 801beae:	2239      	movs	r2, #57	; 0x39
 801beb0:	f000 fbf8 	bl	801c6a4 <dhcp_option>
 801beb4:	4603      	mov	r3, r0
 801beb6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801beb8:	8938      	ldrh	r0, [r7, #8]
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bec0:	687b      	ldr	r3, [r7, #4]
 801bec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bec4:	461a      	mov	r2, r3
 801bec6:	f000 fc47 	bl	801c758 <dhcp_option_short>
 801beca:	4603      	mov	r3, r0
 801becc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bece:	8938      	ldrh	r0, [r7, #8]
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bed6:	2303      	movs	r3, #3
 801bed8:	2237      	movs	r2, #55	; 0x37
 801beda:	f000 fbe3 	bl	801c6a4 <dhcp_option>
 801bede:	4603      	mov	r3, r0
 801bee0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bee2:	2300      	movs	r3, #0
 801bee4:	77fb      	strb	r3, [r7, #31]
 801bee6:	e00e      	b.n	801bf06 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bee8:	8938      	ldrh	r0, [r7, #8]
 801beea:	68fb      	ldr	r3, [r7, #12]
 801beec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bef0:	7ffb      	ldrb	r3, [r7, #31]
 801bef2:	4a29      	ldr	r2, [pc, #164]	; (801bf98 <dhcp_discover+0x130>)
 801bef4:	5cd3      	ldrb	r3, [r2, r3]
 801bef6:	461a      	mov	r2, r3
 801bef8:	f000 fc08 	bl	801c70c <dhcp_option_byte>
 801befc:	4603      	mov	r3, r0
 801befe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bf00:	7ffb      	ldrb	r3, [r7, #31]
 801bf02:	3301      	adds	r3, #1
 801bf04:	77fb      	strb	r3, [r7, #31]
 801bf06:	7ffb      	ldrb	r3, [r7, #31]
 801bf08:	2b02      	cmp	r3, #2
 801bf0a:	d9ed      	bls.n	801bee8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bf0c:	8938      	ldrh	r0, [r7, #8]
 801bf0e:	68fb      	ldr	r3, [r7, #12]
 801bf10:	33f0      	adds	r3, #240	; 0xf0
 801bf12:	693a      	ldr	r2, [r7, #16]
 801bf14:	4619      	mov	r1, r3
 801bf16:	f001 f90d 	bl	801d134 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bf1a:	4b20      	ldr	r3, [pc, #128]	; (801bf9c <dhcp_discover+0x134>)
 801bf1c:	6818      	ldr	r0, [r3, #0]
 801bf1e:	4b20      	ldr	r3, [pc, #128]	; (801bfa0 <dhcp_discover+0x138>)
 801bf20:	9301      	str	r3, [sp, #4]
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	9300      	str	r3, [sp, #0]
 801bf26:	2343      	movs	r3, #67	; 0x43
 801bf28:	4a1e      	ldr	r2, [pc, #120]	; (801bfa4 <dhcp_discover+0x13c>)
 801bf2a:	6939      	ldr	r1, [r7, #16]
 801bf2c:	f7ff f83c 	bl	801afa8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801bf30:	6938      	ldr	r0, [r7, #16]
 801bf32:	f7f9 f883 	bl	801503c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801bf36:	69bb      	ldr	r3, [r7, #24]
 801bf38:	799b      	ldrb	r3, [r3, #6]
 801bf3a:	2bff      	cmp	r3, #255	; 0xff
 801bf3c:	d005      	beq.n	801bf4a <dhcp_discover+0xe2>
    dhcp->tries++;
 801bf3e:	69bb      	ldr	r3, [r7, #24]
 801bf40:	799b      	ldrb	r3, [r3, #6]
 801bf42:	3301      	adds	r3, #1
 801bf44:	b2da      	uxtb	r2, r3
 801bf46:	69bb      	ldr	r3, [r7, #24]
 801bf48:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bf4a:	69bb      	ldr	r3, [r7, #24]
 801bf4c:	799b      	ldrb	r3, [r3, #6]
 801bf4e:	2b05      	cmp	r3, #5
 801bf50:	d80d      	bhi.n	801bf6e <dhcp_discover+0x106>
 801bf52:	69bb      	ldr	r3, [r7, #24]
 801bf54:	799b      	ldrb	r3, [r3, #6]
 801bf56:	461a      	mov	r2, r3
 801bf58:	2301      	movs	r3, #1
 801bf5a:	4093      	lsls	r3, r2
 801bf5c:	b29b      	uxth	r3, r3
 801bf5e:	461a      	mov	r2, r3
 801bf60:	0152      	lsls	r2, r2, #5
 801bf62:	1ad2      	subs	r2, r2, r3
 801bf64:	0092      	lsls	r2, r2, #2
 801bf66:	4413      	add	r3, r2
 801bf68:	00db      	lsls	r3, r3, #3
 801bf6a:	b29b      	uxth	r3, r3
 801bf6c:	e001      	b.n	801bf72 <dhcp_discover+0x10a>
 801bf6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 801bf72:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bf74:	897b      	ldrh	r3, [r7, #10]
 801bf76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bf7a:	4a0b      	ldr	r2, [pc, #44]	; (801bfa8 <dhcp_discover+0x140>)
 801bf7c:	fb82 1203 	smull	r1, r2, r2, r3
 801bf80:	1152      	asrs	r2, r2, #5
 801bf82:	17db      	asrs	r3, r3, #31
 801bf84:	1ad3      	subs	r3, r2, r3
 801bf86:	b29a      	uxth	r2, r3
 801bf88:	69bb      	ldr	r3, [r7, #24]
 801bf8a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bf8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3720      	adds	r7, #32
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}
 801bf98:	240000c0 	.word	0x240000c0
 801bf9c:	2400cbd8 	.word	0x2400cbd8
 801bfa0:	08024690 	.word	0x08024690
 801bfa4:	08024694 	.word	0x08024694
 801bfa8:	10624dd3 	.word	0x10624dd3

0801bfac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b088      	sub	sp, #32
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	d107      	bne.n	801bfca <dhcp_bind+0x1e>
 801bfba:	4b64      	ldr	r3, [pc, #400]	; (801c14c <dhcp_bind+0x1a0>)
 801bfbc:	f240 4215 	movw	r2, #1045	; 0x415
 801bfc0:	4963      	ldr	r1, [pc, #396]	; (801c150 <dhcp_bind+0x1a4>)
 801bfc2:	4864      	ldr	r0, [pc, #400]	; (801c154 <dhcp_bind+0x1a8>)
 801bfc4:	f004 fbd0 	bl	8020768 <iprintf>
 801bfc8:	e0bc      	b.n	801c144 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfce:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801bfd0:	69bb      	ldr	r3, [r7, #24]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d107      	bne.n	801bfe6 <dhcp_bind+0x3a>
 801bfd6:	4b5d      	ldr	r3, [pc, #372]	; (801c14c <dhcp_bind+0x1a0>)
 801bfd8:	f240 4217 	movw	r2, #1047	; 0x417
 801bfdc:	495e      	ldr	r1, [pc, #376]	; (801c158 <dhcp_bind+0x1ac>)
 801bfde:	485d      	ldr	r0, [pc, #372]	; (801c154 <dhcp_bind+0x1a8>)
 801bfe0:	f004 fbc2 	bl	8020768 <iprintf>
 801bfe4:	e0ae      	b.n	801c144 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801bfe6:	69bb      	ldr	r3, [r7, #24]
 801bfe8:	2200      	movs	r2, #0
 801bfea:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801bfec:	69bb      	ldr	r3, [r7, #24]
 801bfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bff4:	d019      	beq.n	801c02a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801bff6:	69bb      	ldr	r3, [r7, #24]
 801bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bffa:	331e      	adds	r3, #30
 801bffc:	4a57      	ldr	r2, [pc, #348]	; (801c15c <dhcp_bind+0x1b0>)
 801bffe:	fba2 2303 	umull	r2, r3, r2, r3
 801c002:	095b      	lsrs	r3, r3, #5
 801c004:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c006:	69fb      	ldr	r3, [r7, #28]
 801c008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c00c:	d302      	bcc.n	801c014 <dhcp_bind+0x68>
      timeout = 0xffff;
 801c00e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c012:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801c014:	69fb      	ldr	r3, [r7, #28]
 801c016:	b29a      	uxth	r2, r3
 801c018:	69bb      	ldr	r3, [r7, #24]
 801c01a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801c01c:	69bb      	ldr	r3, [r7, #24]
 801c01e:	8a9b      	ldrh	r3, [r3, #20]
 801c020:	2b00      	cmp	r3, #0
 801c022:	d102      	bne.n	801c02a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801c024:	69bb      	ldr	r3, [r7, #24]
 801c026:	2201      	movs	r2, #1
 801c028:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c02a:	69bb      	ldr	r3, [r7, #24]
 801c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c032:	d01d      	beq.n	801c070 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c034:	69bb      	ldr	r3, [r7, #24]
 801c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c038:	331e      	adds	r3, #30
 801c03a:	4a48      	ldr	r2, [pc, #288]	; (801c15c <dhcp_bind+0x1b0>)
 801c03c:	fba2 2303 	umull	r2, r3, r2, r3
 801c040:	095b      	lsrs	r3, r3, #5
 801c042:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c044:	69fb      	ldr	r3, [r7, #28]
 801c046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c04a:	d302      	bcc.n	801c052 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c04c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c050:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801c052:	69fb      	ldr	r3, [r7, #28]
 801c054:	b29a      	uxth	r2, r3
 801c056:	69bb      	ldr	r3, [r7, #24]
 801c058:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801c05a:	69bb      	ldr	r3, [r7, #24]
 801c05c:	895b      	ldrh	r3, [r3, #10]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d102      	bne.n	801c068 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801c062:	69bb      	ldr	r3, [r7, #24]
 801c064:	2201      	movs	r2, #1
 801c066:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c068:	69bb      	ldr	r3, [r7, #24]
 801c06a:	895a      	ldrh	r2, [r3, #10]
 801c06c:	69bb      	ldr	r3, [r7, #24]
 801c06e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c070:	69bb      	ldr	r3, [r7, #24]
 801c072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c078:	d01d      	beq.n	801c0b6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c07a:	69bb      	ldr	r3, [r7, #24]
 801c07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c07e:	331e      	adds	r3, #30
 801c080:	4a36      	ldr	r2, [pc, #216]	; (801c15c <dhcp_bind+0x1b0>)
 801c082:	fba2 2303 	umull	r2, r3, r2, r3
 801c086:	095b      	lsrs	r3, r3, #5
 801c088:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c08a:	69fb      	ldr	r3, [r7, #28]
 801c08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c090:	d302      	bcc.n	801c098 <dhcp_bind+0xec>
      timeout = 0xffff;
 801c092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c096:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801c098:	69fb      	ldr	r3, [r7, #28]
 801c09a:	b29a      	uxth	r2, r3
 801c09c:	69bb      	ldr	r3, [r7, #24]
 801c09e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801c0a0:	69bb      	ldr	r3, [r7, #24]
 801c0a2:	899b      	ldrh	r3, [r3, #12]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d102      	bne.n	801c0ae <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801c0a8:	69bb      	ldr	r3, [r7, #24]
 801c0aa:	2201      	movs	r2, #1
 801c0ac:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c0ae:	69bb      	ldr	r3, [r7, #24]
 801c0b0:	899a      	ldrh	r2, [r3, #12]
 801c0b2:	69bb      	ldr	r3, [r7, #24]
 801c0b4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c0b6:	69bb      	ldr	r3, [r7, #24]
 801c0b8:	895a      	ldrh	r2, [r3, #10]
 801c0ba:	69bb      	ldr	r3, [r7, #24]
 801c0bc:	899b      	ldrh	r3, [r3, #12]
 801c0be:	429a      	cmp	r2, r3
 801c0c0:	d306      	bcc.n	801c0d0 <dhcp_bind+0x124>
 801c0c2:	69bb      	ldr	r3, [r7, #24]
 801c0c4:	899b      	ldrh	r3, [r3, #12]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d002      	beq.n	801c0d0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801c0ca:	69bb      	ldr	r3, [r7, #24]
 801c0cc:	2200      	movs	r2, #0
 801c0ce:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801c0d0:	69bb      	ldr	r3, [r7, #24]
 801c0d2:	79db      	ldrb	r3, [r3, #7]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d003      	beq.n	801c0e0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c0d8:	69bb      	ldr	r3, [r7, #24]
 801c0da:	6a1b      	ldr	r3, [r3, #32]
 801c0dc:	613b      	str	r3, [r7, #16]
 801c0de:	e014      	b.n	801c10a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c0e0:	69bb      	ldr	r3, [r7, #24]
 801c0e2:	331c      	adds	r3, #28
 801c0e4:	781b      	ldrb	r3, [r3, #0]
 801c0e6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801c0e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	db02      	blt.n	801c0f6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c0f0:	23ff      	movs	r3, #255	; 0xff
 801c0f2:	613b      	str	r3, [r7, #16]
 801c0f4:	e009      	b.n	801c10a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801c0f6:	7dfb      	ldrb	r3, [r7, #23]
 801c0f8:	2bbf      	cmp	r3, #191	; 0xbf
 801c0fa:	d903      	bls.n	801c104 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c0fc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c100:	613b      	str	r3, [r7, #16]
 801c102:	e002      	b.n	801c10a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c108:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c10a:	69bb      	ldr	r3, [r7, #24]
 801c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c10e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	2b00      	cmp	r3, #0
 801c114:	d108      	bne.n	801c128 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c116:	69bb      	ldr	r3, [r7, #24]
 801c118:	69da      	ldr	r2, [r3, #28]
 801c11a:	693b      	ldr	r3, [r7, #16]
 801c11c:	4013      	ands	r3, r2
 801c11e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c126:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801c128:	210a      	movs	r1, #10
 801c12a:	69b8      	ldr	r0, [r7, #24]
 801c12c:	f000 faa0 	bl	801c670 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	f103 011c 	add.w	r1, r3, #28
 801c136:	f107 030c 	add.w	r3, r7, #12
 801c13a:	f107 0210 	add.w	r2, r7, #16
 801c13e:	6878      	ldr	r0, [r7, #4]
 801c140:	f7f8 fa6e 	bl	8014620 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801c144:	3720      	adds	r7, #32
 801c146:	46bd      	mov	sp, r7
 801c148:	bd80      	pop	{r7, pc}
 801c14a:	bf00      	nop
 801c14c:	08023a70 	.word	0x08023a70
 801c150:	08023bd0 	.word	0x08023bd0
 801c154:	08023ad0 	.word	0x08023ad0
 801c158:	08023bec 	.word	0x08023bec
 801c15c:	88888889 	.word	0x88888889

0801c160 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b08a      	sub	sp, #40	; 0x28
 801c164:	af02      	add	r7, sp, #8
 801c166:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c16c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801c16e:	2105      	movs	r1, #5
 801c170:	69b8      	ldr	r0, [r7, #24]
 801c172:	f000 fa7d 	bl	801c670 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c176:	f107 030c 	add.w	r3, r7, #12
 801c17a:	2203      	movs	r2, #3
 801c17c:	69b9      	ldr	r1, [r7, #24]
 801c17e:	6878      	ldr	r0, [r7, #4]
 801c180:	f000 ff02 	bl	801cf88 <dhcp_create_msg>
 801c184:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c186:	697b      	ldr	r3, [r7, #20]
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d04e      	beq.n	801c22a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c18c:	697b      	ldr	r3, [r7, #20]
 801c18e:	685b      	ldr	r3, [r3, #4]
 801c190:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c192:	89b8      	ldrh	r0, [r7, #12]
 801c194:	693b      	ldr	r3, [r7, #16]
 801c196:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c19a:	2302      	movs	r3, #2
 801c19c:	2239      	movs	r2, #57	; 0x39
 801c19e:	f000 fa81 	bl	801c6a4 <dhcp_option>
 801c1a2:	4603      	mov	r3, r0
 801c1a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c1a6:	89b8      	ldrh	r0, [r7, #12]
 801c1a8:	693b      	ldr	r3, [r7, #16]
 801c1aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	f000 fad0 	bl	801c758 <dhcp_option_short>
 801c1b8:	4603      	mov	r3, r0
 801c1ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c1bc:	89b8      	ldrh	r0, [r7, #12]
 801c1be:	693b      	ldr	r3, [r7, #16]
 801c1c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1c4:	2303      	movs	r3, #3
 801c1c6:	2237      	movs	r2, #55	; 0x37
 801c1c8:	f000 fa6c 	bl	801c6a4 <dhcp_option>
 801c1cc:	4603      	mov	r3, r0
 801c1ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c1d0:	2300      	movs	r3, #0
 801c1d2:	77bb      	strb	r3, [r7, #30]
 801c1d4:	e00e      	b.n	801c1f4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c1d6:	89b8      	ldrh	r0, [r7, #12]
 801c1d8:	693b      	ldr	r3, [r7, #16]
 801c1da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1de:	7fbb      	ldrb	r3, [r7, #30]
 801c1e0:	4a2a      	ldr	r2, [pc, #168]	; (801c28c <dhcp_renew+0x12c>)
 801c1e2:	5cd3      	ldrb	r3, [r2, r3]
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	f000 fa91 	bl	801c70c <dhcp_option_byte>
 801c1ea:	4603      	mov	r3, r0
 801c1ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c1ee:	7fbb      	ldrb	r3, [r7, #30]
 801c1f0:	3301      	adds	r3, #1
 801c1f2:	77bb      	strb	r3, [r7, #30]
 801c1f4:	7fbb      	ldrb	r3, [r7, #30]
 801c1f6:	2b02      	cmp	r3, #2
 801c1f8:	d9ed      	bls.n	801c1d6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c1fa:	89b8      	ldrh	r0, [r7, #12]
 801c1fc:	693b      	ldr	r3, [r7, #16]
 801c1fe:	33f0      	adds	r3, #240	; 0xf0
 801c200:	697a      	ldr	r2, [r7, #20]
 801c202:	4619      	mov	r1, r3
 801c204:	f000 ff96 	bl	801d134 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c208:	4b21      	ldr	r3, [pc, #132]	; (801c290 <dhcp_renew+0x130>)
 801c20a:	6818      	ldr	r0, [r3, #0]
 801c20c:	69bb      	ldr	r3, [r7, #24]
 801c20e:	f103 0218 	add.w	r2, r3, #24
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	2343      	movs	r3, #67	; 0x43
 801c218:	6979      	ldr	r1, [r7, #20]
 801c21a:	f7fe fe51 	bl	801aec0 <udp_sendto_if>
 801c21e:	4603      	mov	r3, r0
 801c220:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c222:	6978      	ldr	r0, [r7, #20]
 801c224:	f7f8 ff0a 	bl	801503c <pbuf_free>
 801c228:	e001      	b.n	801c22e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c22a:	23ff      	movs	r3, #255	; 0xff
 801c22c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c22e:	69bb      	ldr	r3, [r7, #24]
 801c230:	799b      	ldrb	r3, [r3, #6]
 801c232:	2bff      	cmp	r3, #255	; 0xff
 801c234:	d005      	beq.n	801c242 <dhcp_renew+0xe2>
    dhcp->tries++;
 801c236:	69bb      	ldr	r3, [r7, #24]
 801c238:	799b      	ldrb	r3, [r3, #6]
 801c23a:	3301      	adds	r3, #1
 801c23c:	b2da      	uxtb	r2, r3
 801c23e:	69bb      	ldr	r3, [r7, #24]
 801c240:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801c242:	69bb      	ldr	r3, [r7, #24]
 801c244:	799b      	ldrb	r3, [r3, #6]
 801c246:	2b09      	cmp	r3, #9
 801c248:	d80a      	bhi.n	801c260 <dhcp_renew+0x100>
 801c24a:	69bb      	ldr	r3, [r7, #24]
 801c24c:	799b      	ldrb	r3, [r3, #6]
 801c24e:	b29b      	uxth	r3, r3
 801c250:	461a      	mov	r2, r3
 801c252:	0152      	lsls	r2, r2, #5
 801c254:	1ad2      	subs	r2, r2, r3
 801c256:	0092      	lsls	r2, r2, #2
 801c258:	4413      	add	r3, r2
 801c25a:	011b      	lsls	r3, r3, #4
 801c25c:	b29b      	uxth	r3, r3
 801c25e:	e001      	b.n	801c264 <dhcp_renew+0x104>
 801c260:	f644 6320 	movw	r3, #20000	; 0x4e20
 801c264:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c266:	89fb      	ldrh	r3, [r7, #14]
 801c268:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c26c:	4a09      	ldr	r2, [pc, #36]	; (801c294 <dhcp_renew+0x134>)
 801c26e:	fb82 1203 	smull	r1, r2, r2, r3
 801c272:	1152      	asrs	r2, r2, #5
 801c274:	17db      	asrs	r3, r3, #31
 801c276:	1ad3      	subs	r3, r2, r3
 801c278:	b29a      	uxth	r2, r3
 801c27a:	69bb      	ldr	r3, [r7, #24]
 801c27c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c27e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c282:	4618      	mov	r0, r3
 801c284:	3720      	adds	r7, #32
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}
 801c28a:	bf00      	nop
 801c28c:	240000c0 	.word	0x240000c0
 801c290:	2400cbd8 	.word	0x2400cbd8
 801c294:	10624dd3 	.word	0x10624dd3

0801c298 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b08a      	sub	sp, #40	; 0x28
 801c29c:	af02      	add	r7, sp, #8
 801c29e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801c2a6:	2104      	movs	r1, #4
 801c2a8:	69b8      	ldr	r0, [r7, #24]
 801c2aa:	f000 f9e1 	bl	801c670 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c2ae:	f107 030c 	add.w	r3, r7, #12
 801c2b2:	2203      	movs	r2, #3
 801c2b4:	69b9      	ldr	r1, [r7, #24]
 801c2b6:	6878      	ldr	r0, [r7, #4]
 801c2b8:	f000 fe66 	bl	801cf88 <dhcp_create_msg>
 801c2bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c2be:	697b      	ldr	r3, [r7, #20]
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d04c      	beq.n	801c35e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c2c4:	697b      	ldr	r3, [r7, #20]
 801c2c6:	685b      	ldr	r3, [r3, #4]
 801c2c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c2ca:	89b8      	ldrh	r0, [r7, #12]
 801c2cc:	693b      	ldr	r3, [r7, #16]
 801c2ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2d2:	2302      	movs	r3, #2
 801c2d4:	2239      	movs	r2, #57	; 0x39
 801c2d6:	f000 f9e5 	bl	801c6a4 <dhcp_option>
 801c2da:	4603      	mov	r3, r0
 801c2dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c2de:	89b8      	ldrh	r0, [r7, #12]
 801c2e0:	693b      	ldr	r3, [r7, #16]
 801c2e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c2ea:	461a      	mov	r2, r3
 801c2ec:	f000 fa34 	bl	801c758 <dhcp_option_short>
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c2f4:	89b8      	ldrh	r0, [r7, #12]
 801c2f6:	693b      	ldr	r3, [r7, #16]
 801c2f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2fc:	2303      	movs	r3, #3
 801c2fe:	2237      	movs	r2, #55	; 0x37
 801c300:	f000 f9d0 	bl	801c6a4 <dhcp_option>
 801c304:	4603      	mov	r3, r0
 801c306:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c308:	2300      	movs	r3, #0
 801c30a:	77bb      	strb	r3, [r7, #30]
 801c30c:	e00e      	b.n	801c32c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c30e:	89b8      	ldrh	r0, [r7, #12]
 801c310:	693b      	ldr	r3, [r7, #16]
 801c312:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c316:	7fbb      	ldrb	r3, [r7, #30]
 801c318:	4a29      	ldr	r2, [pc, #164]	; (801c3c0 <dhcp_rebind+0x128>)
 801c31a:	5cd3      	ldrb	r3, [r2, r3]
 801c31c:	461a      	mov	r2, r3
 801c31e:	f000 f9f5 	bl	801c70c <dhcp_option_byte>
 801c322:	4603      	mov	r3, r0
 801c324:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c326:	7fbb      	ldrb	r3, [r7, #30]
 801c328:	3301      	adds	r3, #1
 801c32a:	77bb      	strb	r3, [r7, #30]
 801c32c:	7fbb      	ldrb	r3, [r7, #30]
 801c32e:	2b02      	cmp	r3, #2
 801c330:	d9ed      	bls.n	801c30e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c332:	89b8      	ldrh	r0, [r7, #12]
 801c334:	693b      	ldr	r3, [r7, #16]
 801c336:	33f0      	adds	r3, #240	; 0xf0
 801c338:	697a      	ldr	r2, [r7, #20]
 801c33a:	4619      	mov	r1, r3
 801c33c:	f000 fefa 	bl	801d134 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c340:	4b20      	ldr	r3, [pc, #128]	; (801c3c4 <dhcp_rebind+0x12c>)
 801c342:	6818      	ldr	r0, [r3, #0]
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	9300      	str	r3, [sp, #0]
 801c348:	2343      	movs	r3, #67	; 0x43
 801c34a:	4a1f      	ldr	r2, [pc, #124]	; (801c3c8 <dhcp_rebind+0x130>)
 801c34c:	6979      	ldr	r1, [r7, #20]
 801c34e:	f7fe fdb7 	bl	801aec0 <udp_sendto_if>
 801c352:	4603      	mov	r3, r0
 801c354:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c356:	6978      	ldr	r0, [r7, #20]
 801c358:	f7f8 fe70 	bl	801503c <pbuf_free>
 801c35c:	e001      	b.n	801c362 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c35e:	23ff      	movs	r3, #255	; 0xff
 801c360:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c362:	69bb      	ldr	r3, [r7, #24]
 801c364:	799b      	ldrb	r3, [r3, #6]
 801c366:	2bff      	cmp	r3, #255	; 0xff
 801c368:	d005      	beq.n	801c376 <dhcp_rebind+0xde>
    dhcp->tries++;
 801c36a:	69bb      	ldr	r3, [r7, #24]
 801c36c:	799b      	ldrb	r3, [r3, #6]
 801c36e:	3301      	adds	r3, #1
 801c370:	b2da      	uxtb	r2, r3
 801c372:	69bb      	ldr	r3, [r7, #24]
 801c374:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c376:	69bb      	ldr	r3, [r7, #24]
 801c378:	799b      	ldrb	r3, [r3, #6]
 801c37a:	2b09      	cmp	r3, #9
 801c37c:	d80a      	bhi.n	801c394 <dhcp_rebind+0xfc>
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	799b      	ldrb	r3, [r3, #6]
 801c382:	b29b      	uxth	r3, r3
 801c384:	461a      	mov	r2, r3
 801c386:	0152      	lsls	r2, r2, #5
 801c388:	1ad2      	subs	r2, r2, r3
 801c38a:	0092      	lsls	r2, r2, #2
 801c38c:	4413      	add	r3, r2
 801c38e:	00db      	lsls	r3, r3, #3
 801c390:	b29b      	uxth	r3, r3
 801c392:	e001      	b.n	801c398 <dhcp_rebind+0x100>
 801c394:	f242 7310 	movw	r3, #10000	; 0x2710
 801c398:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c39a:	89fb      	ldrh	r3, [r7, #14]
 801c39c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c3a0:	4a0a      	ldr	r2, [pc, #40]	; (801c3cc <dhcp_rebind+0x134>)
 801c3a2:	fb82 1203 	smull	r1, r2, r2, r3
 801c3a6:	1152      	asrs	r2, r2, #5
 801c3a8:	17db      	asrs	r3, r3, #31
 801c3aa:	1ad3      	subs	r3, r2, r3
 801c3ac:	b29a      	uxth	r2, r3
 801c3ae:	69bb      	ldr	r3, [r7, #24]
 801c3b0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c3b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c3b6:	4618      	mov	r0, r3
 801c3b8:	3720      	adds	r7, #32
 801c3ba:	46bd      	mov	sp, r7
 801c3bc:	bd80      	pop	{r7, pc}
 801c3be:	bf00      	nop
 801c3c0:	240000c0 	.word	0x240000c0
 801c3c4:	2400cbd8 	.word	0x2400cbd8
 801c3c8:	08024694 	.word	0x08024694
 801c3cc:	10624dd3 	.word	0x10624dd3

0801c3d0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801c3d0:	b5b0      	push	{r4, r5, r7, lr}
 801c3d2:	b08a      	sub	sp, #40	; 0x28
 801c3d4:	af02      	add	r7, sp, #8
 801c3d6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3dc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801c3de:	2103      	movs	r1, #3
 801c3e0:	69b8      	ldr	r0, [r7, #24]
 801c3e2:	f000 f945 	bl	801c670 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c3e6:	f107 030c 	add.w	r3, r7, #12
 801c3ea:	2203      	movs	r2, #3
 801c3ec:	69b9      	ldr	r1, [r7, #24]
 801c3ee:	6878      	ldr	r0, [r7, #4]
 801c3f0:	f000 fdca 	bl	801cf88 <dhcp_create_msg>
 801c3f4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c3f6:	697b      	ldr	r3, [r7, #20]
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d066      	beq.n	801c4ca <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c3fc:	697b      	ldr	r3, [r7, #20]
 801c3fe:	685b      	ldr	r3, [r3, #4]
 801c400:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c402:	89b8      	ldrh	r0, [r7, #12]
 801c404:	693b      	ldr	r3, [r7, #16]
 801c406:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c40a:	2302      	movs	r3, #2
 801c40c:	2239      	movs	r2, #57	; 0x39
 801c40e:	f000 f949 	bl	801c6a4 <dhcp_option>
 801c412:	4603      	mov	r3, r0
 801c414:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c416:	89b8      	ldrh	r0, [r7, #12]
 801c418:	693b      	ldr	r3, [r7, #16]
 801c41a:	33f0      	adds	r3, #240	; 0xf0
 801c41c:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c420:	4619      	mov	r1, r3
 801c422:	f000 f999 	bl	801c758 <dhcp_option_short>
 801c426:	4603      	mov	r3, r0
 801c428:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c42a:	89b8      	ldrh	r0, [r7, #12]
 801c42c:	693b      	ldr	r3, [r7, #16]
 801c42e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c432:	2304      	movs	r3, #4
 801c434:	2232      	movs	r2, #50	; 0x32
 801c436:	f000 f935 	bl	801c6a4 <dhcp_option>
 801c43a:	4603      	mov	r3, r0
 801c43c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c43e:	89bc      	ldrh	r4, [r7, #12]
 801c440:	693b      	ldr	r3, [r7, #16]
 801c442:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c446:	69bb      	ldr	r3, [r7, #24]
 801c448:	69db      	ldr	r3, [r3, #28]
 801c44a:	4618      	mov	r0, r3
 801c44c:	f7f7 f955 	bl	80136fa <lwip_htonl>
 801c450:	4603      	mov	r3, r0
 801c452:	461a      	mov	r2, r3
 801c454:	4629      	mov	r1, r5
 801c456:	4620      	mov	r0, r4
 801c458:	f000 f9b0 	bl	801c7bc <dhcp_option_long>
 801c45c:	4603      	mov	r3, r0
 801c45e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c460:	89b8      	ldrh	r0, [r7, #12]
 801c462:	693b      	ldr	r3, [r7, #16]
 801c464:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c468:	2303      	movs	r3, #3
 801c46a:	2237      	movs	r2, #55	; 0x37
 801c46c:	f000 f91a 	bl	801c6a4 <dhcp_option>
 801c470:	4603      	mov	r3, r0
 801c472:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c474:	2300      	movs	r3, #0
 801c476:	77bb      	strb	r3, [r7, #30]
 801c478:	e00e      	b.n	801c498 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c47a:	89b8      	ldrh	r0, [r7, #12]
 801c47c:	693b      	ldr	r3, [r7, #16]
 801c47e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c482:	7fbb      	ldrb	r3, [r7, #30]
 801c484:	4a29      	ldr	r2, [pc, #164]	; (801c52c <dhcp_reboot+0x15c>)
 801c486:	5cd3      	ldrb	r3, [r2, r3]
 801c488:	461a      	mov	r2, r3
 801c48a:	f000 f93f 	bl	801c70c <dhcp_option_byte>
 801c48e:	4603      	mov	r3, r0
 801c490:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c492:	7fbb      	ldrb	r3, [r7, #30]
 801c494:	3301      	adds	r3, #1
 801c496:	77bb      	strb	r3, [r7, #30]
 801c498:	7fbb      	ldrb	r3, [r7, #30]
 801c49a:	2b02      	cmp	r3, #2
 801c49c:	d9ed      	bls.n	801c47a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c49e:	89b8      	ldrh	r0, [r7, #12]
 801c4a0:	693b      	ldr	r3, [r7, #16]
 801c4a2:	33f0      	adds	r3, #240	; 0xf0
 801c4a4:	697a      	ldr	r2, [r7, #20]
 801c4a6:	4619      	mov	r1, r3
 801c4a8:	f000 fe44 	bl	801d134 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c4ac:	4b20      	ldr	r3, [pc, #128]	; (801c530 <dhcp_reboot+0x160>)
 801c4ae:	6818      	ldr	r0, [r3, #0]
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	9300      	str	r3, [sp, #0]
 801c4b4:	2343      	movs	r3, #67	; 0x43
 801c4b6:	4a1f      	ldr	r2, [pc, #124]	; (801c534 <dhcp_reboot+0x164>)
 801c4b8:	6979      	ldr	r1, [r7, #20]
 801c4ba:	f7fe fd01 	bl	801aec0 <udp_sendto_if>
 801c4be:	4603      	mov	r3, r0
 801c4c0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c4c2:	6978      	ldr	r0, [r7, #20]
 801c4c4:	f7f8 fdba 	bl	801503c <pbuf_free>
 801c4c8:	e001      	b.n	801c4ce <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c4ca:	23ff      	movs	r3, #255	; 0xff
 801c4cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c4ce:	69bb      	ldr	r3, [r7, #24]
 801c4d0:	799b      	ldrb	r3, [r3, #6]
 801c4d2:	2bff      	cmp	r3, #255	; 0xff
 801c4d4:	d005      	beq.n	801c4e2 <dhcp_reboot+0x112>
    dhcp->tries++;
 801c4d6:	69bb      	ldr	r3, [r7, #24]
 801c4d8:	799b      	ldrb	r3, [r3, #6]
 801c4da:	3301      	adds	r3, #1
 801c4dc:	b2da      	uxtb	r2, r3
 801c4de:	69bb      	ldr	r3, [r7, #24]
 801c4e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c4e2:	69bb      	ldr	r3, [r7, #24]
 801c4e4:	799b      	ldrb	r3, [r3, #6]
 801c4e6:	2b09      	cmp	r3, #9
 801c4e8:	d80a      	bhi.n	801c500 <dhcp_reboot+0x130>
 801c4ea:	69bb      	ldr	r3, [r7, #24]
 801c4ec:	799b      	ldrb	r3, [r3, #6]
 801c4ee:	b29b      	uxth	r3, r3
 801c4f0:	461a      	mov	r2, r3
 801c4f2:	0152      	lsls	r2, r2, #5
 801c4f4:	1ad2      	subs	r2, r2, r3
 801c4f6:	0092      	lsls	r2, r2, #2
 801c4f8:	4413      	add	r3, r2
 801c4fa:	00db      	lsls	r3, r3, #3
 801c4fc:	b29b      	uxth	r3, r3
 801c4fe:	e001      	b.n	801c504 <dhcp_reboot+0x134>
 801c500:	f242 7310 	movw	r3, #10000	; 0x2710
 801c504:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c506:	89fb      	ldrh	r3, [r7, #14]
 801c508:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c50c:	4a0a      	ldr	r2, [pc, #40]	; (801c538 <dhcp_reboot+0x168>)
 801c50e:	fb82 1203 	smull	r1, r2, r2, r3
 801c512:	1152      	asrs	r2, r2, #5
 801c514:	17db      	asrs	r3, r3, #31
 801c516:	1ad3      	subs	r3, r2, r3
 801c518:	b29a      	uxth	r2, r3
 801c51a:	69bb      	ldr	r3, [r7, #24]
 801c51c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c51e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c522:	4618      	mov	r0, r3
 801c524:	3720      	adds	r7, #32
 801c526:	46bd      	mov	sp, r7
 801c528:	bdb0      	pop	{r4, r5, r7, pc}
 801c52a:	bf00      	nop
 801c52c:	240000c0 	.word	0x240000c0
 801c530:	2400cbd8 	.word	0x2400cbd8
 801c534:	08024694 	.word	0x08024694
 801c538:	10624dd3 	.word	0x10624dd3

0801c53c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801c53c:	b5b0      	push	{r4, r5, r7, lr}
 801c53e:	b08a      	sub	sp, #40	; 0x28
 801c540:	af02      	add	r7, sp, #8
 801c542:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c548:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801c54a:	69fb      	ldr	r3, [r7, #28]
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	f000 8084 	beq.w	801c65a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801c552:	69fb      	ldr	r3, [r7, #28]
 801c554:	795b      	ldrb	r3, [r3, #5]
 801c556:	2b00      	cmp	r3, #0
 801c558:	f000 8081 	beq.w	801c65e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801c55c:	69fb      	ldr	r3, [r7, #28]
 801c55e:	699b      	ldr	r3, [r3, #24]
 801c560:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801c562:	69fb      	ldr	r3, [r7, #28]
 801c564:	2200      	movs	r2, #0
 801c566:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801c568:	69fb      	ldr	r3, [r7, #28]
 801c56a:	2200      	movs	r2, #0
 801c56c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c56e:	69fb      	ldr	r3, [r7, #28]
 801c570:	2200      	movs	r2, #0
 801c572:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c574:	69fb      	ldr	r3, [r7, #28]
 801c576:	2200      	movs	r2, #0
 801c578:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801c57a:	69fb      	ldr	r3, [r7, #28]
 801c57c:	2200      	movs	r2, #0
 801c57e:	631a      	str	r2, [r3, #48]	; 0x30
 801c580:	69fb      	ldr	r3, [r7, #28]
 801c582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c584:	69fb      	ldr	r3, [r7, #28]
 801c586:	62da      	str	r2, [r3, #44]	; 0x2c
 801c588:	69fb      	ldr	r3, [r7, #28]
 801c58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c58c:	69fb      	ldr	r3, [r7, #28]
 801c58e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	2200      	movs	r2, #0
 801c594:	829a      	strh	r2, [r3, #20]
 801c596:	69fb      	ldr	r3, [r7, #28]
 801c598:	8a9a      	ldrh	r2, [r3, #20]
 801c59a:	69fb      	ldr	r3, [r7, #28]
 801c59c:	825a      	strh	r2, [r3, #18]
 801c59e:	69fb      	ldr	r3, [r7, #28]
 801c5a0:	8a5a      	ldrh	r2, [r3, #18]
 801c5a2:	69fb      	ldr	r3, [r7, #28]
 801c5a4:	821a      	strh	r2, [r3, #16]
 801c5a6:	69fb      	ldr	r3, [r7, #28]
 801c5a8:	8a1a      	ldrh	r2, [r3, #16]
 801c5aa:	69fb      	ldr	r3, [r7, #28]
 801c5ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801c5ae:	6878      	ldr	r0, [r7, #4]
 801c5b0:	f000 fdee 	bl	801d190 <dhcp_supplied_address>
 801c5b4:	4603      	mov	r3, r0
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d03b      	beq.n	801c632 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801c5ba:	f107 030e 	add.w	r3, r7, #14
 801c5be:	2207      	movs	r2, #7
 801c5c0:	69f9      	ldr	r1, [r7, #28]
 801c5c2:	6878      	ldr	r0, [r7, #4]
 801c5c4:	f000 fce0 	bl	801cf88 <dhcp_create_msg>
 801c5c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801c5ca:	69bb      	ldr	r3, [r7, #24]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d030      	beq.n	801c632 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c5d0:	69bb      	ldr	r3, [r7, #24]
 801c5d2:	685b      	ldr	r3, [r3, #4]
 801c5d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c5d6:	89f8      	ldrh	r0, [r7, #14]
 801c5d8:	697b      	ldr	r3, [r7, #20]
 801c5da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c5de:	2304      	movs	r3, #4
 801c5e0:	2236      	movs	r2, #54	; 0x36
 801c5e2:	f000 f85f 	bl	801c6a4 <dhcp_option>
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801c5ea:	89fc      	ldrh	r4, [r7, #14]
 801c5ec:	697b      	ldr	r3, [r7, #20]
 801c5ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c5f2:	693b      	ldr	r3, [r7, #16]
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	f7f7 f880 	bl	80136fa <lwip_htonl>
 801c5fa:	4603      	mov	r3, r0
 801c5fc:	461a      	mov	r2, r3
 801c5fe:	4629      	mov	r1, r5
 801c600:	4620      	mov	r0, r4
 801c602:	f000 f8db 	bl	801c7bc <dhcp_option_long>
 801c606:	4603      	mov	r3, r0
 801c608:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c60a:	89f8      	ldrh	r0, [r7, #14]
 801c60c:	697b      	ldr	r3, [r7, #20]
 801c60e:	33f0      	adds	r3, #240	; 0xf0
 801c610:	69ba      	ldr	r2, [r7, #24]
 801c612:	4619      	mov	r1, r3
 801c614:	f000 fd8e 	bl	801d134 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c618:	4b13      	ldr	r3, [pc, #76]	; (801c668 <dhcp_release_and_stop+0x12c>)
 801c61a:	6818      	ldr	r0, [r3, #0]
 801c61c:	f107 0210 	add.w	r2, r7, #16
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	9300      	str	r3, [sp, #0]
 801c624:	2343      	movs	r3, #67	; 0x43
 801c626:	69b9      	ldr	r1, [r7, #24]
 801c628:	f7fe fc4a 	bl	801aec0 <udp_sendto_if>
      pbuf_free(p_out);
 801c62c:	69b8      	ldr	r0, [r7, #24]
 801c62e:	f7f8 fd05 	bl	801503c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c632:	4b0e      	ldr	r3, [pc, #56]	; (801c66c <dhcp_release_and_stop+0x130>)
 801c634:	4a0d      	ldr	r2, [pc, #52]	; (801c66c <dhcp_release_and_stop+0x130>)
 801c636:	490d      	ldr	r1, [pc, #52]	; (801c66c <dhcp_release_and_stop+0x130>)
 801c638:	6878      	ldr	r0, [r7, #4]
 801c63a:	f7f7 fff1 	bl	8014620 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801c63e:	2100      	movs	r1, #0
 801c640:	69f8      	ldr	r0, [r7, #28]
 801c642:	f000 f815 	bl	801c670 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801c646:	69fb      	ldr	r3, [r7, #28]
 801c648:	791b      	ldrb	r3, [r3, #4]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d008      	beq.n	801c660 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c64e:	f7fe ff83 	bl	801b558 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801c652:	69fb      	ldr	r3, [r7, #28]
 801c654:	2200      	movs	r2, #0
 801c656:	711a      	strb	r2, [r3, #4]
 801c658:	e002      	b.n	801c660 <dhcp_release_and_stop+0x124>
    return;
 801c65a:	bf00      	nop
 801c65c:	e000      	b.n	801c660 <dhcp_release_and_stop+0x124>
    return;
 801c65e:	bf00      	nop
  }
}
 801c660:	3720      	adds	r7, #32
 801c662:	46bd      	mov	sp, r7
 801c664:	bdb0      	pop	{r4, r5, r7, pc}
 801c666:	bf00      	nop
 801c668:	2400cbd8 	.word	0x2400cbd8
 801c66c:	08024690 	.word	0x08024690

0801c670 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801c670:	b480      	push	{r7}
 801c672:	b083      	sub	sp, #12
 801c674:	af00      	add	r7, sp, #0
 801c676:	6078      	str	r0, [r7, #4]
 801c678:	460b      	mov	r3, r1
 801c67a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	795b      	ldrb	r3, [r3, #5]
 801c680:	78fa      	ldrb	r2, [r7, #3]
 801c682:	429a      	cmp	r2, r3
 801c684:	d008      	beq.n	801c698 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	78fa      	ldrb	r2, [r7, #3]
 801c68a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	2200      	movs	r2, #0
 801c690:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	2200      	movs	r2, #0
 801c696:	811a      	strh	r2, [r3, #8]
  }
}
 801c698:	bf00      	nop
 801c69a:	370c      	adds	r7, #12
 801c69c:	46bd      	mov	sp, r7
 801c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6a2:	4770      	bx	lr

0801c6a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801c6a4:	b580      	push	{r7, lr}
 801c6a6:	b082      	sub	sp, #8
 801c6a8:	af00      	add	r7, sp, #0
 801c6aa:	6039      	str	r1, [r7, #0]
 801c6ac:	4611      	mov	r1, r2
 801c6ae:	461a      	mov	r2, r3
 801c6b0:	4603      	mov	r3, r0
 801c6b2:	80fb      	strh	r3, [r7, #6]
 801c6b4:	460b      	mov	r3, r1
 801c6b6:	717b      	strb	r3, [r7, #5]
 801c6b8:	4613      	mov	r3, r2
 801c6ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c6bc:	88fa      	ldrh	r2, [r7, #6]
 801c6be:	793b      	ldrb	r3, [r7, #4]
 801c6c0:	4413      	add	r3, r2
 801c6c2:	3302      	adds	r3, #2
 801c6c4:	2b44      	cmp	r3, #68	; 0x44
 801c6c6:	d906      	bls.n	801c6d6 <dhcp_option+0x32>
 801c6c8:	4b0d      	ldr	r3, [pc, #52]	; (801c700 <dhcp_option+0x5c>)
 801c6ca:	f240 529a 	movw	r2, #1434	; 0x59a
 801c6ce:	490d      	ldr	r1, [pc, #52]	; (801c704 <dhcp_option+0x60>)
 801c6d0:	480d      	ldr	r0, [pc, #52]	; (801c708 <dhcp_option+0x64>)
 801c6d2:	f004 f849 	bl	8020768 <iprintf>
  options[options_out_len++] = option_type;
 801c6d6:	88fb      	ldrh	r3, [r7, #6]
 801c6d8:	1c5a      	adds	r2, r3, #1
 801c6da:	80fa      	strh	r2, [r7, #6]
 801c6dc:	461a      	mov	r2, r3
 801c6de:	683b      	ldr	r3, [r7, #0]
 801c6e0:	4413      	add	r3, r2
 801c6e2:	797a      	ldrb	r2, [r7, #5]
 801c6e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801c6e6:	88fb      	ldrh	r3, [r7, #6]
 801c6e8:	1c5a      	adds	r2, r3, #1
 801c6ea:	80fa      	strh	r2, [r7, #6]
 801c6ec:	461a      	mov	r2, r3
 801c6ee:	683b      	ldr	r3, [r7, #0]
 801c6f0:	4413      	add	r3, r2
 801c6f2:	793a      	ldrb	r2, [r7, #4]
 801c6f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c6f6:	88fb      	ldrh	r3, [r7, #6]
}
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	3708      	adds	r7, #8
 801c6fc:	46bd      	mov	sp, r7
 801c6fe:	bd80      	pop	{r7, pc}
 801c700:	08023a70 	.word	0x08023a70
 801c704:	08023c04 	.word	0x08023c04
 801c708:	08023ad0 	.word	0x08023ad0

0801c70c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801c70c:	b580      	push	{r7, lr}
 801c70e:	b082      	sub	sp, #8
 801c710:	af00      	add	r7, sp, #0
 801c712:	4603      	mov	r3, r0
 801c714:	6039      	str	r1, [r7, #0]
 801c716:	80fb      	strh	r3, [r7, #6]
 801c718:	4613      	mov	r3, r2
 801c71a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c71c:	88fb      	ldrh	r3, [r7, #6]
 801c71e:	2b43      	cmp	r3, #67	; 0x43
 801c720:	d906      	bls.n	801c730 <dhcp_option_byte+0x24>
 801c722:	4b0a      	ldr	r3, [pc, #40]	; (801c74c <dhcp_option_byte+0x40>)
 801c724:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c728:	4909      	ldr	r1, [pc, #36]	; (801c750 <dhcp_option_byte+0x44>)
 801c72a:	480a      	ldr	r0, [pc, #40]	; (801c754 <dhcp_option_byte+0x48>)
 801c72c:	f004 f81c 	bl	8020768 <iprintf>
  options[options_out_len++] = value;
 801c730:	88fb      	ldrh	r3, [r7, #6]
 801c732:	1c5a      	adds	r2, r3, #1
 801c734:	80fa      	strh	r2, [r7, #6]
 801c736:	461a      	mov	r2, r3
 801c738:	683b      	ldr	r3, [r7, #0]
 801c73a:	4413      	add	r3, r2
 801c73c:	797a      	ldrb	r2, [r7, #5]
 801c73e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c740:	88fb      	ldrh	r3, [r7, #6]
}
 801c742:	4618      	mov	r0, r3
 801c744:	3708      	adds	r7, #8
 801c746:	46bd      	mov	sp, r7
 801c748:	bd80      	pop	{r7, pc}
 801c74a:	bf00      	nop
 801c74c:	08023a70 	.word	0x08023a70
 801c750:	08023c48 	.word	0x08023c48
 801c754:	08023ad0 	.word	0x08023ad0

0801c758 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801c758:	b580      	push	{r7, lr}
 801c75a:	b082      	sub	sp, #8
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	4603      	mov	r3, r0
 801c760:	6039      	str	r1, [r7, #0]
 801c762:	80fb      	strh	r3, [r7, #6]
 801c764:	4613      	mov	r3, r2
 801c766:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801c768:	88fb      	ldrh	r3, [r7, #6]
 801c76a:	3302      	adds	r3, #2
 801c76c:	2b44      	cmp	r3, #68	; 0x44
 801c76e:	d906      	bls.n	801c77e <dhcp_option_short+0x26>
 801c770:	4b0f      	ldr	r3, [pc, #60]	; (801c7b0 <dhcp_option_short+0x58>)
 801c772:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801c776:	490f      	ldr	r1, [pc, #60]	; (801c7b4 <dhcp_option_short+0x5c>)
 801c778:	480f      	ldr	r0, [pc, #60]	; (801c7b8 <dhcp_option_short+0x60>)
 801c77a:	f003 fff5 	bl	8020768 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801c77e:	88bb      	ldrh	r3, [r7, #4]
 801c780:	0a1b      	lsrs	r3, r3, #8
 801c782:	b29a      	uxth	r2, r3
 801c784:	88fb      	ldrh	r3, [r7, #6]
 801c786:	1c59      	adds	r1, r3, #1
 801c788:	80f9      	strh	r1, [r7, #6]
 801c78a:	4619      	mov	r1, r3
 801c78c:	683b      	ldr	r3, [r7, #0]
 801c78e:	440b      	add	r3, r1
 801c790:	b2d2      	uxtb	r2, r2
 801c792:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801c794:	88fb      	ldrh	r3, [r7, #6]
 801c796:	1c5a      	adds	r2, r3, #1
 801c798:	80fa      	strh	r2, [r7, #6]
 801c79a:	461a      	mov	r2, r3
 801c79c:	683b      	ldr	r3, [r7, #0]
 801c79e:	4413      	add	r3, r2
 801c7a0:	88ba      	ldrh	r2, [r7, #4]
 801c7a2:	b2d2      	uxtb	r2, r2
 801c7a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c7a6:	88fb      	ldrh	r3, [r7, #6]
}
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	3708      	adds	r7, #8
 801c7ac:	46bd      	mov	sp, r7
 801c7ae:	bd80      	pop	{r7, pc}
 801c7b0:	08023a70 	.word	0x08023a70
 801c7b4:	08023c80 	.word	0x08023c80
 801c7b8:	08023ad0 	.word	0x08023ad0

0801c7bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b084      	sub	sp, #16
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	60b9      	str	r1, [r7, #8]
 801c7c6:	607a      	str	r2, [r7, #4]
 801c7c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801c7ca:	89fb      	ldrh	r3, [r7, #14]
 801c7cc:	3304      	adds	r3, #4
 801c7ce:	2b44      	cmp	r3, #68	; 0x44
 801c7d0:	d906      	bls.n	801c7e0 <dhcp_option_long+0x24>
 801c7d2:	4b19      	ldr	r3, [pc, #100]	; (801c838 <dhcp_option_long+0x7c>)
 801c7d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801c7d8:	4918      	ldr	r1, [pc, #96]	; (801c83c <dhcp_option_long+0x80>)
 801c7da:	4819      	ldr	r0, [pc, #100]	; (801c840 <dhcp_option_long+0x84>)
 801c7dc:	f003 ffc4 	bl	8020768 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	0e1a      	lsrs	r2, r3, #24
 801c7e4:	89fb      	ldrh	r3, [r7, #14]
 801c7e6:	1c59      	adds	r1, r3, #1
 801c7e8:	81f9      	strh	r1, [r7, #14]
 801c7ea:	4619      	mov	r1, r3
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	440b      	add	r3, r1
 801c7f0:	b2d2      	uxtb	r2, r2
 801c7f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	0c1a      	lsrs	r2, r3, #16
 801c7f8:	89fb      	ldrh	r3, [r7, #14]
 801c7fa:	1c59      	adds	r1, r3, #1
 801c7fc:	81f9      	strh	r1, [r7, #14]
 801c7fe:	4619      	mov	r1, r3
 801c800:	68bb      	ldr	r3, [r7, #8]
 801c802:	440b      	add	r3, r1
 801c804:	b2d2      	uxtb	r2, r2
 801c806:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	0a1a      	lsrs	r2, r3, #8
 801c80c:	89fb      	ldrh	r3, [r7, #14]
 801c80e:	1c59      	adds	r1, r3, #1
 801c810:	81f9      	strh	r1, [r7, #14]
 801c812:	4619      	mov	r1, r3
 801c814:	68bb      	ldr	r3, [r7, #8]
 801c816:	440b      	add	r3, r1
 801c818:	b2d2      	uxtb	r2, r2
 801c81a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801c81c:	89fb      	ldrh	r3, [r7, #14]
 801c81e:	1c5a      	adds	r2, r3, #1
 801c820:	81fa      	strh	r2, [r7, #14]
 801c822:	461a      	mov	r2, r3
 801c824:	68bb      	ldr	r3, [r7, #8]
 801c826:	4413      	add	r3, r2
 801c828:	687a      	ldr	r2, [r7, #4]
 801c82a:	b2d2      	uxtb	r2, r2
 801c82c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c82e:	89fb      	ldrh	r3, [r7, #14]
}
 801c830:	4618      	mov	r0, r3
 801c832:	3710      	adds	r7, #16
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}
 801c838:	08023a70 	.word	0x08023a70
 801c83c:	08023cbc 	.word	0x08023cbc
 801c840:	08023ad0 	.word	0x08023ad0

0801c844 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801c844:	b580      	push	{r7, lr}
 801c846:	b090      	sub	sp, #64	; 0x40
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
 801c84c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801c84e:	2300      	movs	r3, #0
 801c850:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801c852:	2300      	movs	r3, #0
 801c854:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801c856:	2208      	movs	r2, #8
 801c858:	2100      	movs	r1, #0
 801c85a:	48b5      	ldr	r0, [pc, #724]	; (801cb30 <dhcp_parse_reply+0x2ec>)
 801c85c:	f003 fee7 	bl	802062e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	895b      	ldrh	r3, [r3, #10]
 801c864:	2b2b      	cmp	r3, #43	; 0x2b
 801c866:	d802      	bhi.n	801c86e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801c868:	f06f 0301 	mvn.w	r3, #1
 801c86c:	e2a7      	b.n	801cdbe <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	685b      	ldr	r3, [r3, #4]
 801c872:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801c874:	23f0      	movs	r3, #240	; 0xf0
 801c876:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	891b      	ldrh	r3, [r3, #8]
 801c87c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c882:	e00c      	b.n	801c89e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801c884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c886:	895b      	ldrh	r3, [r3, #10]
 801c888:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c88a:	1ad3      	subs	r3, r2, r3
 801c88c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c890:	895b      	ldrh	r3, [r3, #10]
 801c892:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801c894:	1ad3      	subs	r3, r2, r3
 801c896:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8a0:	2b00      	cmp	r3, #0
 801c8a2:	d004      	beq.n	801c8ae <dhcp_parse_reply+0x6a>
 801c8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8a6:	895b      	ldrh	r3, [r3, #10]
 801c8a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d2ea      	bcs.n	801c884 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d102      	bne.n	801c8ba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801c8b4:	f06f 0301 	mvn.w	r3, #1
 801c8b8:	e281      	b.n	801cdbe <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801c8ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c8bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801c8be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c8c0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c4:	685b      	ldr	r3, [r3, #4]
 801c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c8c8:	e239      	b.n	801cd3e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801c8ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c8cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8ce:	4413      	add	r3, r2
 801c8d0:	781b      	ldrb	r3, [r3, #0]
 801c8d2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801c8da:	f04f 33ff 	mov.w	r3, #4294967295
 801c8de:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801c8e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c8e2:	3302      	adds	r3, #2
 801c8e4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801c8e6:	8bfa      	ldrh	r2, [r7, #30]
 801c8e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c8ea:	429a      	cmp	r2, r3
 801c8ec:	d202      	bcs.n	801c8f4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801c8ee:	f06f 0301 	mvn.w	r3, #1
 801c8f2:	e264      	b.n	801cdbe <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801c8f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c8f6:	3301      	adds	r3, #1
 801c8f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8fa:	8952      	ldrh	r2, [r2, #10]
 801c8fc:	4293      	cmp	r3, r2
 801c8fe:	da07      	bge.n	801c910 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801c900:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c902:	3301      	adds	r3, #1
 801c904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c906:	4413      	add	r3, r2
 801c908:	781b      	ldrb	r3, [r3, #0]
 801c90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c90e:	e00b      	b.n	801c928 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	2b00      	cmp	r3, #0
 801c916:	d004      	beq.n	801c922 <dhcp_parse_reply+0xde>
 801c918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	685b      	ldr	r3, [r3, #4]
 801c91e:	781b      	ldrb	r3, [r3, #0]
 801c920:	e000      	b.n	801c924 <dhcp_parse_reply+0xe0>
 801c922:	2300      	movs	r3, #0
 801c924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801c928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c92c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801c930:	7dfb      	ldrb	r3, [r7, #23]
 801c932:	2b3b      	cmp	r3, #59	; 0x3b
 801c934:	f200 812c 	bhi.w	801cb90 <dhcp_parse_reply+0x34c>
 801c938:	a201      	add	r2, pc, #4	; (adr r2, 801c940 <dhcp_parse_reply+0xfc>)
 801c93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c93e:	bf00      	nop
 801c940:	0801ca31 	.word	0x0801ca31
 801c944:	0801ca41 	.word	0x0801ca41
 801c948:	0801cb91 	.word	0x0801cb91
 801c94c:	0801ca63 	.word	0x0801ca63
 801c950:	0801cb91 	.word	0x0801cb91
 801c954:	0801cb91 	.word	0x0801cb91
 801c958:	0801cb91 	.word	0x0801cb91
 801c95c:	0801cb91 	.word	0x0801cb91
 801c960:	0801cb91 	.word	0x0801cb91
 801c964:	0801cb91 	.word	0x0801cb91
 801c968:	0801cb91 	.word	0x0801cb91
 801c96c:	0801cb91 	.word	0x0801cb91
 801c970:	0801cb91 	.word	0x0801cb91
 801c974:	0801cb91 	.word	0x0801cb91
 801c978:	0801cb91 	.word	0x0801cb91
 801c97c:	0801cb91 	.word	0x0801cb91
 801c980:	0801cb91 	.word	0x0801cb91
 801c984:	0801cb91 	.word	0x0801cb91
 801c988:	0801cb91 	.word	0x0801cb91
 801c98c:	0801cb91 	.word	0x0801cb91
 801c990:	0801cb91 	.word	0x0801cb91
 801c994:	0801cb91 	.word	0x0801cb91
 801c998:	0801cb91 	.word	0x0801cb91
 801c99c:	0801cb91 	.word	0x0801cb91
 801c9a0:	0801cb91 	.word	0x0801cb91
 801c9a4:	0801cb91 	.word	0x0801cb91
 801c9a8:	0801cb91 	.word	0x0801cb91
 801c9ac:	0801cb91 	.word	0x0801cb91
 801c9b0:	0801cb91 	.word	0x0801cb91
 801c9b4:	0801cb91 	.word	0x0801cb91
 801c9b8:	0801cb91 	.word	0x0801cb91
 801c9bc:	0801cb91 	.word	0x0801cb91
 801c9c0:	0801cb91 	.word	0x0801cb91
 801c9c4:	0801cb91 	.word	0x0801cb91
 801c9c8:	0801cb91 	.word	0x0801cb91
 801c9cc:	0801cb91 	.word	0x0801cb91
 801c9d0:	0801cb91 	.word	0x0801cb91
 801c9d4:	0801cb91 	.word	0x0801cb91
 801c9d8:	0801cb91 	.word	0x0801cb91
 801c9dc:	0801cb91 	.word	0x0801cb91
 801c9e0:	0801cb91 	.word	0x0801cb91
 801c9e4:	0801cb91 	.word	0x0801cb91
 801c9e8:	0801cb91 	.word	0x0801cb91
 801c9ec:	0801cb91 	.word	0x0801cb91
 801c9f0:	0801cb91 	.word	0x0801cb91
 801c9f4:	0801cb91 	.word	0x0801cb91
 801c9f8:	0801cb91 	.word	0x0801cb91
 801c9fc:	0801cb91 	.word	0x0801cb91
 801ca00:	0801cb91 	.word	0x0801cb91
 801ca04:	0801cb91 	.word	0x0801cb91
 801ca08:	0801cb91 	.word	0x0801cb91
 801ca0c:	0801ca8f 	.word	0x0801ca8f
 801ca10:	0801cab1 	.word	0x0801cab1
 801ca14:	0801caed 	.word	0x0801caed
 801ca18:	0801cb0f 	.word	0x0801cb0f
 801ca1c:	0801cb91 	.word	0x0801cb91
 801ca20:	0801cb91 	.word	0x0801cb91
 801ca24:	0801cb91 	.word	0x0801cb91
 801ca28:	0801cb4d 	.word	0x0801cb4d
 801ca2c:	0801cb6f 	.word	0x0801cb6f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801ca30:	2300      	movs	r3, #0
 801ca32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ca36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801ca3e:	e0ab      	b.n	801cb98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ca40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca44:	2b04      	cmp	r3, #4
 801ca46:	d009      	beq.n	801ca5c <dhcp_parse_reply+0x218>
 801ca48:	4b3a      	ldr	r3, [pc, #232]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801ca4a:	f240 622e 	movw	r2, #1582	; 0x62e
 801ca4e:	493a      	ldr	r1, [pc, #232]	; (801cb38 <dhcp_parse_reply+0x2f4>)
 801ca50:	483a      	ldr	r0, [pc, #232]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801ca52:	f003 fe89 	bl	8020768 <iprintf>
 801ca56:	f06f 0305 	mvn.w	r3, #5
 801ca5a:	e1b0      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801ca5c:	2306      	movs	r3, #6
 801ca5e:	623b      	str	r3, [r7, #32]
        break;
 801ca60:	e09a      	b.n	801cb98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801ca62:	2304      	movs	r3, #4
 801ca64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ca68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ca6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ca70:	429a      	cmp	r2, r3
 801ca72:	d209      	bcs.n	801ca88 <dhcp_parse_reply+0x244>
 801ca74:	4b2f      	ldr	r3, [pc, #188]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801ca76:	f240 6233 	movw	r2, #1587	; 0x633
 801ca7a:	4931      	ldr	r1, [pc, #196]	; (801cb40 <dhcp_parse_reply+0x2fc>)
 801ca7c:	482f      	ldr	r0, [pc, #188]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801ca7e:	f003 fe73 	bl	8020768 <iprintf>
 801ca82:	f06f 0305 	mvn.w	r3, #5
 801ca86:	e19a      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ca88:	2307      	movs	r3, #7
 801ca8a:	623b      	str	r3, [r7, #32]
        break;
 801ca8c:	e084      	b.n	801cb98 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ca8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca92:	2b04      	cmp	r3, #4
 801ca94:	d009      	beq.n	801caaa <dhcp_parse_reply+0x266>
 801ca96:	4b27      	ldr	r3, [pc, #156]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801ca98:	f240 6241 	movw	r2, #1601	; 0x641
 801ca9c:	4926      	ldr	r1, [pc, #152]	; (801cb38 <dhcp_parse_reply+0x2f4>)
 801ca9e:	4827      	ldr	r0, [pc, #156]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801caa0:	f003 fe62 	bl	8020768 <iprintf>
 801caa4:	f06f 0305 	mvn.w	r3, #5
 801caa8:	e189      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801caaa:	2303      	movs	r3, #3
 801caac:	623b      	str	r3, [r7, #32]
        break;
 801caae:	e073      	b.n	801cb98 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cab4:	2b01      	cmp	r3, #1
 801cab6:	d009      	beq.n	801cacc <dhcp_parse_reply+0x288>
 801cab8:	4b1e      	ldr	r3, [pc, #120]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801caba:	f240 624f 	movw	r2, #1615	; 0x64f
 801cabe:	4921      	ldr	r1, [pc, #132]	; (801cb44 <dhcp_parse_reply+0x300>)
 801cac0:	481e      	ldr	r0, [pc, #120]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801cac2:	f003 fe51 	bl	8020768 <iprintf>
 801cac6:	f06f 0305 	mvn.w	r3, #5
 801caca:	e178      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801cacc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801cace:	2bf0      	cmp	r3, #240	; 0xf0
 801cad0:	d009      	beq.n	801cae6 <dhcp_parse_reply+0x2a2>
 801cad2:	4b18      	ldr	r3, [pc, #96]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801cad4:	f240 6251 	movw	r2, #1617	; 0x651
 801cad8:	491b      	ldr	r1, [pc, #108]	; (801cb48 <dhcp_parse_reply+0x304>)
 801cada:	4818      	ldr	r0, [pc, #96]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801cadc:	f003 fe44 	bl	8020768 <iprintf>
 801cae0:	f06f 0305 	mvn.w	r3, #5
 801cae4:	e16b      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801cae6:	2300      	movs	r3, #0
 801cae8:	623b      	str	r3, [r7, #32]
        break;
 801caea:	e055      	b.n	801cb98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801caec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801caf0:	2b01      	cmp	r3, #1
 801caf2:	d009      	beq.n	801cb08 <dhcp_parse_reply+0x2c4>
 801caf4:	4b0f      	ldr	r3, [pc, #60]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801caf6:	f240 6255 	movw	r2, #1621	; 0x655
 801cafa:	4912      	ldr	r1, [pc, #72]	; (801cb44 <dhcp_parse_reply+0x300>)
 801cafc:	480f      	ldr	r0, [pc, #60]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801cafe:	f003 fe33 	bl	8020768 <iprintf>
 801cb02:	f06f 0305 	mvn.w	r3, #5
 801cb06:	e15a      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801cb08:	2301      	movs	r3, #1
 801cb0a:	623b      	str	r3, [r7, #32]
        break;
 801cb0c:	e044      	b.n	801cb98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb12:	2b04      	cmp	r3, #4
 801cb14:	d009      	beq.n	801cb2a <dhcp_parse_reply+0x2e6>
 801cb16:	4b07      	ldr	r3, [pc, #28]	; (801cb34 <dhcp_parse_reply+0x2f0>)
 801cb18:	f240 6259 	movw	r2, #1625	; 0x659
 801cb1c:	4906      	ldr	r1, [pc, #24]	; (801cb38 <dhcp_parse_reply+0x2f4>)
 801cb1e:	4807      	ldr	r0, [pc, #28]	; (801cb3c <dhcp_parse_reply+0x2f8>)
 801cb20:	f003 fe22 	bl	8020768 <iprintf>
 801cb24:	f06f 0305 	mvn.w	r3, #5
 801cb28:	e149      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801cb2a:	2302      	movs	r3, #2
 801cb2c:	623b      	str	r3, [r7, #32]
        break;
 801cb2e:	e033      	b.n	801cb98 <dhcp_parse_reply+0x354>
 801cb30:	2400cbd0 	.word	0x2400cbd0
 801cb34:	08023a70 	.word	0x08023a70
 801cb38:	08023cf8 	.word	0x08023cf8
 801cb3c:	08023ad0 	.word	0x08023ad0
 801cb40:	08023d04 	.word	0x08023d04
 801cb44:	08023d18 	.word	0x08023d18
 801cb48:	08023d24 	.word	0x08023d24
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb50:	2b04      	cmp	r3, #4
 801cb52:	d009      	beq.n	801cb68 <dhcp_parse_reply+0x324>
 801cb54:	4b9c      	ldr	r3, [pc, #624]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801cb56:	f240 625d 	movw	r2, #1629	; 0x65d
 801cb5a:	499c      	ldr	r1, [pc, #624]	; (801cdcc <dhcp_parse_reply+0x588>)
 801cb5c:	489c      	ldr	r0, [pc, #624]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801cb5e:	f003 fe03 	bl	8020768 <iprintf>
 801cb62:	f06f 0305 	mvn.w	r3, #5
 801cb66:	e12a      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801cb68:	2304      	movs	r3, #4
 801cb6a:	623b      	str	r3, [r7, #32]
        break;
 801cb6c:	e014      	b.n	801cb98 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb72:	2b04      	cmp	r3, #4
 801cb74:	d009      	beq.n	801cb8a <dhcp_parse_reply+0x346>
 801cb76:	4b94      	ldr	r3, [pc, #592]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801cb78:	f240 6261 	movw	r2, #1633	; 0x661
 801cb7c:	4993      	ldr	r1, [pc, #588]	; (801cdcc <dhcp_parse_reply+0x588>)
 801cb7e:	4894      	ldr	r0, [pc, #592]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801cb80:	f003 fdf2 	bl	8020768 <iprintf>
 801cb84:	f06f 0305 	mvn.w	r3, #5
 801cb88:	e119      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801cb8a:	2305      	movs	r3, #5
 801cb8c:	623b      	str	r3, [r7, #32]
        break;
 801cb8e:	e003      	b.n	801cb98 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801cb90:	2300      	movs	r3, #0
 801cb92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801cb96:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801cb98:	7dfb      	ldrb	r3, [r7, #23]
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d103      	bne.n	801cba6 <dhcp_parse_reply+0x362>
      offset++;
 801cb9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cba0:	3301      	adds	r3, #1
 801cba2:	877b      	strh	r3, [r7, #58]	; 0x3a
 801cba4:	e0a1      	b.n	801ccea <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801cba6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cbac:	4413      	add	r3, r2
 801cbae:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801cbb2:	4293      	cmp	r3, r2
 801cbb4:	dd02      	ble.n	801cbbc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801cbb6:	f06f 0301 	mvn.w	r3, #1
 801cbba:	e100      	b.n	801cdbe <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801cbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cbc0:	b29a      	uxth	r2, r3
 801cbc2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cbc4:	4413      	add	r3, r2
 801cbc6:	b29b      	uxth	r3, r3
 801cbc8:	3302      	adds	r3, #2
 801cbca:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801cbcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	f000 808a 	beq.w	801ccea <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cbda:	6a3b      	ldr	r3, [r7, #32]
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	db02      	blt.n	801cbe6 <dhcp_parse_reply+0x3a2>
 801cbe0:	6a3b      	ldr	r3, [r7, #32]
 801cbe2:	2b07      	cmp	r3, #7
 801cbe4:	dd06      	ble.n	801cbf4 <dhcp_parse_reply+0x3b0>
 801cbe6:	4b78      	ldr	r3, [pc, #480]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801cbe8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801cbec:	4979      	ldr	r1, [pc, #484]	; (801cdd4 <dhcp_parse_reply+0x590>)
 801cbee:	4878      	ldr	r0, [pc, #480]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801cbf0:	f003 fdba 	bl	8020768 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cbf4:	4a78      	ldr	r2, [pc, #480]	; (801cdd8 <dhcp_parse_reply+0x594>)
 801cbf6:	6a3b      	ldr	r3, [r7, #32]
 801cbf8:	4413      	add	r3, r2
 801cbfa:	781b      	ldrb	r3, [r3, #0]
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d174      	bne.n	801ccea <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801cc00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc04:	2b04      	cmp	r3, #4
 801cc06:	bf28      	it	cs
 801cc08:	2304      	movcs	r3, #4
 801cc0a:	b2db      	uxtb	r3, r3
 801cc0c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cc0e:	8bfb      	ldrh	r3, [r7, #30]
 801cc10:	8aba      	ldrh	r2, [r7, #20]
 801cc12:	f107 0108 	add.w	r1, r7, #8
 801cc16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc18:	f7f8 fc16 	bl	8015448 <pbuf_copy_partial>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	461a      	mov	r2, r3
 801cc20:	8abb      	ldrh	r3, [r7, #20]
 801cc22:	4293      	cmp	r3, r2
 801cc24:	d002      	beq.n	801cc2c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801cc26:	f06f 0301 	mvn.w	r3, #1
 801cc2a:	e0c8      	b.n	801cdbe <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801cc2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc30:	2b04      	cmp	r3, #4
 801cc32:	d933      	bls.n	801cc9c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cc34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc38:	f003 0303 	and.w	r3, r3, #3
 801cc3c:	b2db      	uxtb	r3, r3
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d009      	beq.n	801cc56 <dhcp_parse_reply+0x412>
 801cc42:	4b61      	ldr	r3, [pc, #388]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801cc44:	f240 6281 	movw	r2, #1665	; 0x681
 801cc48:	4964      	ldr	r1, [pc, #400]	; (801cddc <dhcp_parse_reply+0x598>)
 801cc4a:	4861      	ldr	r0, [pc, #388]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801cc4c:	f003 fd8c 	bl	8020768 <iprintf>
 801cc50:	f06f 0305 	mvn.w	r3, #5
 801cc54:	e0b3      	b.n	801cdbe <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801cc56:	4a60      	ldr	r2, [pc, #384]	; (801cdd8 <dhcp_parse_reply+0x594>)
 801cc58:	6a3b      	ldr	r3, [r7, #32]
 801cc5a:	4413      	add	r3, r2
 801cc5c:	2201      	movs	r2, #1
 801cc5e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cc60:	68bb      	ldr	r3, [r7, #8]
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7f6 fd49 	bl	80136fa <lwip_htonl>
 801cc68:	4602      	mov	r2, r0
 801cc6a:	495d      	ldr	r1, [pc, #372]	; (801cde0 <dhcp_parse_reply+0x59c>)
 801cc6c:	6a3b      	ldr	r3, [r7, #32]
 801cc6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801cc72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc76:	3b04      	subs	r3, #4
 801cc78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801cc7c:	8bfb      	ldrh	r3, [r7, #30]
 801cc7e:	3304      	adds	r3, #4
 801cc80:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801cc82:	8a7a      	ldrh	r2, [r7, #18]
 801cc84:	8bfb      	ldrh	r3, [r7, #30]
 801cc86:	429a      	cmp	r2, r3
 801cc88:	d202      	bcs.n	801cc90 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801cc8a:	f06f 0301 	mvn.w	r3, #1
 801cc8e:	e096      	b.n	801cdbe <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801cc90:	8a7b      	ldrh	r3, [r7, #18]
 801cc92:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801cc94:	6a3b      	ldr	r3, [r7, #32]
 801cc96:	3301      	adds	r3, #1
 801cc98:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801cc9a:	e79e      	b.n	801cbda <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801cc9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cca0:	2b04      	cmp	r3, #4
 801cca2:	d106      	bne.n	801ccb2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801cca4:	68bb      	ldr	r3, [r7, #8]
 801cca6:	4618      	mov	r0, r3
 801cca8:	f7f6 fd27 	bl	80136fa <lwip_htonl>
 801ccac:	4603      	mov	r3, r0
 801ccae:	60bb      	str	r3, [r7, #8]
 801ccb0:	e011      	b.n	801ccd6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ccb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ccb6:	2b01      	cmp	r3, #1
 801ccb8:	d009      	beq.n	801ccce <dhcp_parse_reply+0x48a>
 801ccba:	4b43      	ldr	r3, [pc, #268]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801ccbc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801ccc0:	4948      	ldr	r1, [pc, #288]	; (801cde4 <dhcp_parse_reply+0x5a0>)
 801ccc2:	4843      	ldr	r0, [pc, #268]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801ccc4:	f003 fd50 	bl	8020768 <iprintf>
 801ccc8:	f06f 0305 	mvn.w	r3, #5
 801cccc:	e077      	b.n	801cdbe <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801ccce:	f107 0308 	add.w	r3, r7, #8
 801ccd2:	781b      	ldrb	r3, [r3, #0]
 801ccd4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ccd6:	4a40      	ldr	r2, [pc, #256]	; (801cdd8 <dhcp_parse_reply+0x594>)
 801ccd8:	6a3b      	ldr	r3, [r7, #32]
 801ccda:	4413      	add	r3, r2
 801ccdc:	2201      	movs	r2, #1
 801ccde:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801cce0:	68ba      	ldr	r2, [r7, #8]
 801cce2:	493f      	ldr	r1, [pc, #252]	; (801cde0 <dhcp_parse_reply+0x59c>)
 801cce4:	6a3b      	ldr	r3, [r7, #32]
 801cce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccec:	895b      	ldrh	r3, [r3, #10]
 801ccee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ccf0:	429a      	cmp	r2, r3
 801ccf2:	d324      	bcc.n	801cd3e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ccf6:	895b      	ldrh	r3, [r3, #10]
 801ccf8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ccfa:	1ad3      	subs	r3, r2, r3
 801ccfc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd00:	895b      	ldrh	r3, [r3, #10]
 801cd02:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801cd04:	1ad3      	subs	r3, r2, r3
 801cd06:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801cd08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801cd0c:	429a      	cmp	r2, r3
 801cd0e:	d213      	bcs.n	801cd38 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801cd10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d109      	bne.n	801cd30 <dhcp_parse_reply+0x4ec>
 801cd1c:	4b2a      	ldr	r3, [pc, #168]	; (801cdc8 <dhcp_parse_reply+0x584>)
 801cd1e:	f240 629d 	movw	r2, #1693	; 0x69d
 801cd22:	4931      	ldr	r1, [pc, #196]	; (801cde8 <dhcp_parse_reply+0x5a4>)
 801cd24:	482a      	ldr	r0, [pc, #168]	; (801cdd0 <dhcp_parse_reply+0x58c>)
 801cd26:	f003 fd1f 	bl	8020768 <iprintf>
 801cd2a:	f06f 0305 	mvn.w	r3, #5
 801cd2e:	e046      	b.n	801cdbe <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd32:	685b      	ldr	r3, [r3, #4]
 801cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd36:	e002      	b.n	801cd3e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801cd38:	f06f 0301 	mvn.w	r3, #1
 801cd3c:	e03f      	b.n	801cdbe <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d00a      	beq.n	801cd5a <dhcp_parse_reply+0x516>
 801cd44:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801cd48:	429a      	cmp	r2, r3
 801cd4a:	d206      	bcs.n	801cd5a <dhcp_parse_reply+0x516>
 801cd4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cd4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cd50:	4413      	add	r3, r2
 801cd52:	781b      	ldrb	r3, [r3, #0]
 801cd54:	2bff      	cmp	r3, #255	; 0xff
 801cd56:	f47f adb8 	bne.w	801c8ca <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801cd5a:	4b1f      	ldr	r3, [pc, #124]	; (801cdd8 <dhcp_parse_reply+0x594>)
 801cd5c:	781b      	ldrb	r3, [r3, #0]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d018      	beq.n	801cd94 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cd62:	4b1f      	ldr	r3, [pc, #124]	; (801cde0 <dhcp_parse_reply+0x59c>)
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cd68:	4b1b      	ldr	r3, [pc, #108]	; (801cdd8 <dhcp_parse_reply+0x594>)
 801cd6a:	2200      	movs	r2, #0
 801cd6c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	2b01      	cmp	r3, #1
 801cd72:	d102      	bne.n	801cd7a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801cd74:	2301      	movs	r3, #1
 801cd76:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cd78:	e00c      	b.n	801cd94 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	2b02      	cmp	r3, #2
 801cd7e:	d102      	bne.n	801cd86 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801cd80:	2301      	movs	r3, #1
 801cd82:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd84:	e006      	b.n	801cd94 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801cd86:	68fb      	ldr	r3, [r7, #12]
 801cd88:	2b03      	cmp	r3, #3
 801cd8a:	d103      	bne.n	801cd94 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801cd8c:	2301      	movs	r3, #1
 801cd8e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801cd90:	2301      	movs	r3, #1
 801cd92:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801cd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d006      	beq.n	801cda8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801cd9a:	2300      	movs	r3, #0
 801cd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801cd9e:	236c      	movs	r3, #108	; 0x6c
 801cda0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801cda2:	23ec      	movs	r3, #236	; 0xec
 801cda4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801cda6:	e56a      	b.n	801c87e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801cda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d006      	beq.n	801cdbc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801cdae:	2300      	movs	r3, #0
 801cdb0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801cdb2:	232c      	movs	r3, #44	; 0x2c
 801cdb4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801cdb6:	236c      	movs	r3, #108	; 0x6c
 801cdb8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801cdba:	e560      	b.n	801c87e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801cdbc:	2300      	movs	r3, #0
}
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	3740      	adds	r7, #64	; 0x40
 801cdc2:	46bd      	mov	sp, r7
 801cdc4:	bd80      	pop	{r7, pc}
 801cdc6:	bf00      	nop
 801cdc8:	08023a70 	.word	0x08023a70
 801cdcc:	08023cf8 	.word	0x08023cf8
 801cdd0:	08023ad0 	.word	0x08023ad0
 801cdd4:	08023d3c 	.word	0x08023d3c
 801cdd8:	2400cbd0 	.word	0x2400cbd0
 801cddc:	08023d50 	.word	0x08023d50
 801cde0:	2400cbb0 	.word	0x2400cbb0
 801cde4:	08023d68 	.word	0x08023d68
 801cde8:	08023d7c 	.word	0x08023d7c

0801cdec <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b08a      	sub	sp, #40	; 0x28
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	60f8      	str	r0, [r7, #12]
 801cdf4:	60b9      	str	r1, [r7, #8]
 801cdf6:	607a      	str	r2, [r7, #4]
 801cdf8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801cdfa:	4b60      	ldr	r3, [pc, #384]	; (801cf7c <dhcp_recv+0x190>)
 801cdfc:	685b      	ldr	r3, [r3, #4]
 801cdfe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce00:	6a3b      	ldr	r3, [r7, #32]
 801ce02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce04:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	685b      	ldr	r3, [r3, #4]
 801ce0a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ce0c:	69fb      	ldr	r3, [r7, #28]
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	f000 809d 	beq.w	801cf4e <dhcp_recv+0x162>
 801ce14:	69fb      	ldr	r3, [r7, #28]
 801ce16:	791b      	ldrb	r3, [r3, #4]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	f000 8098 	beq.w	801cf4e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	895b      	ldrh	r3, [r3, #10]
 801ce22:	2b2b      	cmp	r3, #43	; 0x2b
 801ce24:	f240 8095 	bls.w	801cf52 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ce28:	69bb      	ldr	r3, [r7, #24]
 801ce2a:	781b      	ldrb	r3, [r3, #0]
 801ce2c:	2b02      	cmp	r3, #2
 801ce2e:	f040 8092 	bne.w	801cf56 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ce32:	2300      	movs	r3, #0
 801ce34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ce38:	e012      	b.n	801ce60 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ce3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce3e:	6a3a      	ldr	r2, [r7, #32]
 801ce40:	4413      	add	r3, r2
 801ce42:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801ce46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce4a:	69b9      	ldr	r1, [r7, #24]
 801ce4c:	440b      	add	r3, r1
 801ce4e:	7f1b      	ldrb	r3, [r3, #28]
 801ce50:	429a      	cmp	r2, r3
 801ce52:	f040 8082 	bne.w	801cf5a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ce56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ce60:	6a3b      	ldr	r3, [r7, #32]
 801ce62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ce6a:	429a      	cmp	r2, r3
 801ce6c:	d203      	bcs.n	801ce76 <dhcp_recv+0x8a>
 801ce6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce72:	2b05      	cmp	r3, #5
 801ce74:	d9e1      	bls.n	801ce3a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ce76:	69bb      	ldr	r3, [r7, #24]
 801ce78:	685b      	ldr	r3, [r3, #4]
 801ce7a:	4618      	mov	r0, r3
 801ce7c:	f7f6 fc3d 	bl	80136fa <lwip_htonl>
 801ce80:	4602      	mov	r2, r0
 801ce82:	69fb      	ldr	r3, [r7, #28]
 801ce84:	681b      	ldr	r3, [r3, #0]
 801ce86:	429a      	cmp	r2, r3
 801ce88:	d169      	bne.n	801cf5e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801ce8a:	69f9      	ldr	r1, [r7, #28]
 801ce8c:	6878      	ldr	r0, [r7, #4]
 801ce8e:	f7ff fcd9 	bl	801c844 <dhcp_parse_reply>
 801ce92:	4603      	mov	r3, r0
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d164      	bne.n	801cf62 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801ce98:	4b39      	ldr	r3, [pc, #228]	; (801cf80 <dhcp_recv+0x194>)
 801ce9a:	785b      	ldrb	r3, [r3, #1]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d062      	beq.n	801cf66 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	685b      	ldr	r3, [r3, #4]
 801cea4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cea6:	4b37      	ldr	r3, [pc, #220]	; (801cf84 <dhcp_recv+0x198>)
 801cea8:	685b      	ldr	r3, [r3, #4]
 801ceaa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801ceac:	7cfb      	ldrb	r3, [r7, #19]
 801ceae:	2b05      	cmp	r3, #5
 801ceb0:	d12a      	bne.n	801cf08 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ceb2:	69fb      	ldr	r3, [r7, #28]
 801ceb4:	795b      	ldrb	r3, [r3, #5]
 801ceb6:	2b01      	cmp	r3, #1
 801ceb8:	d112      	bne.n	801cee0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801ceba:	6979      	ldr	r1, [r7, #20]
 801cebc:	6a38      	ldr	r0, [r7, #32]
 801cebe:	f7fe fe17 	bl	801baf0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801cec2:	6a3b      	ldr	r3, [r7, #32]
 801cec4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cec8:	f003 0308 	and.w	r3, r3, #8
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d003      	beq.n	801ced8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801ced0:	6a38      	ldr	r0, [r7, #32]
 801ced2:	f7fe fb85 	bl	801b5e0 <dhcp_check>
 801ced6:	e049      	b.n	801cf6c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801ced8:	6a38      	ldr	r0, [r7, #32]
 801ceda:	f7ff f867 	bl	801bfac <dhcp_bind>
 801cede:	e045      	b.n	801cf6c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cee0:	69fb      	ldr	r3, [r7, #28]
 801cee2:	795b      	ldrb	r3, [r3, #5]
 801cee4:	2b03      	cmp	r3, #3
 801cee6:	d007      	beq.n	801cef8 <dhcp_recv+0x10c>
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	795b      	ldrb	r3, [r3, #5]
 801ceec:	2b04      	cmp	r3, #4
 801ceee:	d003      	beq.n	801cef8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801cef0:	69fb      	ldr	r3, [r7, #28]
 801cef2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cef4:	2b05      	cmp	r3, #5
 801cef6:	d139      	bne.n	801cf6c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801cef8:	6979      	ldr	r1, [r7, #20]
 801cefa:	6a38      	ldr	r0, [r7, #32]
 801cefc:	f7fe fdf8 	bl	801baf0 <dhcp_handle_ack>
      dhcp_bind(netif);
 801cf00:	6a38      	ldr	r0, [r7, #32]
 801cf02:	f7ff f853 	bl	801bfac <dhcp_bind>
 801cf06:	e031      	b.n	801cf6c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801cf08:	7cfb      	ldrb	r3, [r7, #19]
 801cf0a:	2b06      	cmp	r3, #6
 801cf0c:	d113      	bne.n	801cf36 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf0e:	69fb      	ldr	r3, [r7, #28]
 801cf10:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801cf12:	2b03      	cmp	r3, #3
 801cf14:	d00b      	beq.n	801cf2e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf16:	69fb      	ldr	r3, [r7, #28]
 801cf18:	795b      	ldrb	r3, [r3, #5]
 801cf1a:	2b01      	cmp	r3, #1
 801cf1c:	d007      	beq.n	801cf2e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cf1e:	69fb      	ldr	r3, [r7, #28]
 801cf20:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf22:	2b04      	cmp	r3, #4
 801cf24:	d003      	beq.n	801cf2e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cf26:	69fb      	ldr	r3, [r7, #28]
 801cf28:	795b      	ldrb	r3, [r3, #5]
 801cf2a:	2b05      	cmp	r3, #5
 801cf2c:	d103      	bne.n	801cf36 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801cf2e:	6a38      	ldr	r0, [r7, #32]
 801cf30:	f7fe fb3c 	bl	801b5ac <dhcp_handle_nak>
 801cf34:	e01a      	b.n	801cf6c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801cf36:	7cfb      	ldrb	r3, [r7, #19]
 801cf38:	2b02      	cmp	r3, #2
 801cf3a:	d116      	bne.n	801cf6a <dhcp_recv+0x17e>
 801cf3c:	69fb      	ldr	r3, [r7, #28]
 801cf3e:	795b      	ldrb	r3, [r3, #5]
 801cf40:	2b06      	cmp	r3, #6
 801cf42:	d112      	bne.n	801cf6a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801cf44:	6979      	ldr	r1, [r7, #20]
 801cf46:	6a38      	ldr	r0, [r7, #32]
 801cf48:	f7fe fb7e 	bl	801b648 <dhcp_handle_offer>
 801cf4c:	e00e      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf4e:	bf00      	nop
 801cf50:	e00c      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf52:	bf00      	nop
 801cf54:	e00a      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf56:	bf00      	nop
 801cf58:	e008      	b.n	801cf6c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801cf5a:	bf00      	nop
 801cf5c:	e006      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf5e:	bf00      	nop
 801cf60:	e004      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf62:	bf00      	nop
 801cf64:	e002      	b.n	801cf6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf66:	bf00      	nop
 801cf68:	e000      	b.n	801cf6c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801cf6a:	bf00      	nop
  pbuf_free(p);
 801cf6c:	6878      	ldr	r0, [r7, #4]
 801cf6e:	f7f8 f865 	bl	801503c <pbuf_free>
}
 801cf72:	bf00      	nop
 801cf74:	3728      	adds	r7, #40	; 0x28
 801cf76:	46bd      	mov	sp, r7
 801cf78:	bd80      	pop	{r7, pc}
 801cf7a:	bf00      	nop
 801cf7c:	24009a30 	.word	0x24009a30
 801cf80:	2400cbd0 	.word	0x2400cbd0
 801cf84:	2400cbb0 	.word	0x2400cbb0

0801cf88 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801cf88:	b580      	push	{r7, lr}
 801cf8a:	b088      	sub	sp, #32
 801cf8c:	af00      	add	r7, sp, #0
 801cf8e:	60f8      	str	r0, [r7, #12]
 801cf90:	60b9      	str	r1, [r7, #8]
 801cf92:	603b      	str	r3, [r7, #0]
 801cf94:	4613      	mov	r3, r2
 801cf96:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801cf98:	68fb      	ldr	r3, [r7, #12]
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d108      	bne.n	801cfb0 <dhcp_create_msg+0x28>
 801cf9e:	4b5f      	ldr	r3, [pc, #380]	; (801d11c <dhcp_create_msg+0x194>)
 801cfa0:	f240 7269 	movw	r2, #1897	; 0x769
 801cfa4:	495e      	ldr	r1, [pc, #376]	; (801d120 <dhcp_create_msg+0x198>)
 801cfa6:	485f      	ldr	r0, [pc, #380]	; (801d124 <dhcp_create_msg+0x19c>)
 801cfa8:	f003 fbde 	bl	8020768 <iprintf>
 801cfac:	2300      	movs	r3, #0
 801cfae:	e0b1      	b.n	801d114 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d108      	bne.n	801cfc8 <dhcp_create_msg+0x40>
 801cfb6:	4b59      	ldr	r3, [pc, #356]	; (801d11c <dhcp_create_msg+0x194>)
 801cfb8:	f240 726a 	movw	r2, #1898	; 0x76a
 801cfbc:	495a      	ldr	r1, [pc, #360]	; (801d128 <dhcp_create_msg+0x1a0>)
 801cfbe:	4859      	ldr	r0, [pc, #356]	; (801d124 <dhcp_create_msg+0x19c>)
 801cfc0:	f003 fbd2 	bl	8020768 <iprintf>
 801cfc4:	2300      	movs	r3, #0
 801cfc6:	e0a5      	b.n	801d114 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801cfc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cfcc:	f44f 719a 	mov.w	r1, #308	; 0x134
 801cfd0:	2036      	movs	r0, #54	; 0x36
 801cfd2:	f7f7 fd4f 	bl	8014a74 <pbuf_alloc>
 801cfd6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801cfd8:	69bb      	ldr	r3, [r7, #24]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d101      	bne.n	801cfe2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801cfde:	2300      	movs	r3, #0
 801cfe0:	e098      	b.n	801d114 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801cfe2:	69bb      	ldr	r3, [r7, #24]
 801cfe4:	895b      	ldrh	r3, [r3, #10]
 801cfe6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801cfea:	d206      	bcs.n	801cffa <dhcp_create_msg+0x72>
 801cfec:	4b4b      	ldr	r3, [pc, #300]	; (801d11c <dhcp_create_msg+0x194>)
 801cfee:	f240 7271 	movw	r2, #1905	; 0x771
 801cff2:	494e      	ldr	r1, [pc, #312]	; (801d12c <dhcp_create_msg+0x1a4>)
 801cff4:	484b      	ldr	r0, [pc, #300]	; (801d124 <dhcp_create_msg+0x19c>)
 801cff6:	f003 fbb7 	bl	8020768 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801cffa:	79fb      	ldrb	r3, [r7, #7]
 801cffc:	2b03      	cmp	r3, #3
 801cffe:	d103      	bne.n	801d008 <dhcp_create_msg+0x80>
 801d000:	68bb      	ldr	r3, [r7, #8]
 801d002:	795b      	ldrb	r3, [r3, #5]
 801d004:	2b03      	cmp	r3, #3
 801d006:	d10d      	bne.n	801d024 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d008:	68bb      	ldr	r3, [r7, #8]
 801d00a:	799b      	ldrb	r3, [r3, #6]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d105      	bne.n	801d01c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d010:	f003 fbc2 	bl	8020798 <rand>
 801d014:	4603      	mov	r3, r0
 801d016:	461a      	mov	r2, r3
 801d018:	4b45      	ldr	r3, [pc, #276]	; (801d130 <dhcp_create_msg+0x1a8>)
 801d01a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d01c:	4b44      	ldr	r3, [pc, #272]	; (801d130 <dhcp_create_msg+0x1a8>)
 801d01e:	681a      	ldr	r2, [r3, #0]
 801d020:	68bb      	ldr	r3, [r7, #8]
 801d022:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d024:	69bb      	ldr	r3, [r7, #24]
 801d026:	685b      	ldr	r3, [r3, #4]
 801d028:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801d02a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801d02e:	2100      	movs	r1, #0
 801d030:	6978      	ldr	r0, [r7, #20]
 801d032:	f003 fafc 	bl	802062e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	2201      	movs	r2, #1
 801d03a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801d03c:	697b      	ldr	r3, [r7, #20]
 801d03e:	2201      	movs	r2, #1
 801d040:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801d042:	68fb      	ldr	r3, [r7, #12]
 801d044:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801d048:	697b      	ldr	r3, [r7, #20]
 801d04a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801d04c:	68bb      	ldr	r3, [r7, #8]
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	4618      	mov	r0, r3
 801d052:	f7f6 fb52 	bl	80136fa <lwip_htonl>
 801d056:	4602      	mov	r2, r0
 801d058:	697b      	ldr	r3, [r7, #20]
 801d05a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801d05c:	79fb      	ldrb	r3, [r7, #7]
 801d05e:	2b08      	cmp	r3, #8
 801d060:	d010      	beq.n	801d084 <dhcp_create_msg+0xfc>
 801d062:	79fb      	ldrb	r3, [r7, #7]
 801d064:	2b04      	cmp	r3, #4
 801d066:	d00d      	beq.n	801d084 <dhcp_create_msg+0xfc>
 801d068:	79fb      	ldrb	r3, [r7, #7]
 801d06a:	2b07      	cmp	r3, #7
 801d06c:	d00a      	beq.n	801d084 <dhcp_create_msg+0xfc>
 801d06e:	79fb      	ldrb	r3, [r7, #7]
 801d070:	2b03      	cmp	r3, #3
 801d072:	d10c      	bne.n	801d08e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d074:	68bb      	ldr	r3, [r7, #8]
 801d076:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801d078:	2b05      	cmp	r3, #5
 801d07a:	d003      	beq.n	801d084 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d07c:	68bb      	ldr	r3, [r7, #8]
 801d07e:	795b      	ldrb	r3, [r3, #5]
 801d080:	2b04      	cmp	r3, #4
 801d082:	d104      	bne.n	801d08e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801d084:	68fb      	ldr	r3, [r7, #12]
 801d086:	3304      	adds	r3, #4
 801d088:	681a      	ldr	r2, [r3, #0]
 801d08a:	697b      	ldr	r3, [r7, #20]
 801d08c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d08e:	2300      	movs	r3, #0
 801d090:	83fb      	strh	r3, [r7, #30]
 801d092:	e00c      	b.n	801d0ae <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801d094:	8bfa      	ldrh	r2, [r7, #30]
 801d096:	8bfb      	ldrh	r3, [r7, #30]
 801d098:	68f9      	ldr	r1, [r7, #12]
 801d09a:	440a      	add	r2, r1
 801d09c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801d0a0:	697a      	ldr	r2, [r7, #20]
 801d0a2:	4413      	add	r3, r2
 801d0a4:	460a      	mov	r2, r1
 801d0a6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d0a8:	8bfb      	ldrh	r3, [r7, #30]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	83fb      	strh	r3, [r7, #30]
 801d0ae:	8bfb      	ldrh	r3, [r7, #30]
 801d0b0:	2b05      	cmp	r3, #5
 801d0b2:	d9ef      	bls.n	801d094 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801d0b4:	697b      	ldr	r3, [r7, #20]
 801d0b6:	2200      	movs	r2, #0
 801d0b8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d0bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801d0c6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801d0ca:	2200      	movs	r2, #0
 801d0cc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801d0d0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801d0d4:	2200      	movs	r2, #0
 801d0d6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d0da:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801d0de:	697b      	ldr	r3, [r7, #20]
 801d0e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0e4:	2301      	movs	r3, #1
 801d0e6:	2235      	movs	r2, #53	; 0x35
 801d0e8:	2000      	movs	r0, #0
 801d0ea:	f7ff fadb 	bl	801c6a4 <dhcp_option>
 801d0ee:	4603      	mov	r3, r0
 801d0f0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801d0f2:	697b      	ldr	r3, [r7, #20]
 801d0f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d0f8:	79fa      	ldrb	r2, [r7, #7]
 801d0fa:	8a7b      	ldrh	r3, [r7, #18]
 801d0fc:	4618      	mov	r0, r3
 801d0fe:	f7ff fb05 	bl	801c70c <dhcp_option_byte>
 801d102:	4603      	mov	r3, r0
 801d104:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801d106:	683b      	ldr	r3, [r7, #0]
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d002      	beq.n	801d112 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801d10c:	683b      	ldr	r3, [r7, #0]
 801d10e:	8a7a      	ldrh	r2, [r7, #18]
 801d110:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801d112:	69bb      	ldr	r3, [r7, #24]
}
 801d114:	4618      	mov	r0, r3
 801d116:	3720      	adds	r7, #32
 801d118:	46bd      	mov	sp, r7
 801d11a:	bd80      	pop	{r7, pc}
 801d11c:	08023a70 	.word	0x08023a70
 801d120:	08023d90 	.word	0x08023d90
 801d124:	08023ad0 	.word	0x08023ad0
 801d128:	08023db0 	.word	0x08023db0
 801d12c:	08023dd0 	.word	0x08023dd0
 801d130:	2400cbe0 	.word	0x2400cbe0

0801d134 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b084      	sub	sp, #16
 801d138:	af00      	add	r7, sp, #0
 801d13a:	4603      	mov	r3, r0
 801d13c:	60b9      	str	r1, [r7, #8]
 801d13e:	607a      	str	r2, [r7, #4]
 801d140:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801d142:	89fb      	ldrh	r3, [r7, #14]
 801d144:	1c5a      	adds	r2, r3, #1
 801d146:	81fa      	strh	r2, [r7, #14]
 801d148:	461a      	mov	r2, r3
 801d14a:	68bb      	ldr	r3, [r7, #8]
 801d14c:	4413      	add	r3, r2
 801d14e:	22ff      	movs	r2, #255	; 0xff
 801d150:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d152:	e007      	b.n	801d164 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801d154:	89fb      	ldrh	r3, [r7, #14]
 801d156:	1c5a      	adds	r2, r3, #1
 801d158:	81fa      	strh	r2, [r7, #14]
 801d15a:	461a      	mov	r2, r3
 801d15c:	68bb      	ldr	r3, [r7, #8]
 801d15e:	4413      	add	r3, r2
 801d160:	2200      	movs	r2, #0
 801d162:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d164:	89fb      	ldrh	r3, [r7, #14]
 801d166:	2b43      	cmp	r3, #67	; 0x43
 801d168:	d904      	bls.n	801d174 <dhcp_option_trailer+0x40>
 801d16a:	89fb      	ldrh	r3, [r7, #14]
 801d16c:	f003 0303 	and.w	r3, r3, #3
 801d170:	2b00      	cmp	r3, #0
 801d172:	d002      	beq.n	801d17a <dhcp_option_trailer+0x46>
 801d174:	89fb      	ldrh	r3, [r7, #14]
 801d176:	2b43      	cmp	r3, #67	; 0x43
 801d178:	d9ec      	bls.n	801d154 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801d17a:	89fb      	ldrh	r3, [r7, #14]
 801d17c:	33f0      	adds	r3, #240	; 0xf0
 801d17e:	b29b      	uxth	r3, r3
 801d180:	4619      	mov	r1, r3
 801d182:	6878      	ldr	r0, [r7, #4]
 801d184:	f7f7 fdd4 	bl	8014d30 <pbuf_realloc>
}
 801d188:	bf00      	nop
 801d18a:	3710      	adds	r7, #16
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bd80      	pop	{r7, pc}

0801d190 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801d190:	b480      	push	{r7}
 801d192:	b085      	sub	sp, #20
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801d198:	687b      	ldr	r3, [r7, #4]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d017      	beq.n	801d1ce <dhcp_supplied_address+0x3e>
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d013      	beq.n	801d1ce <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1aa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	795b      	ldrb	r3, [r3, #5]
 801d1b0:	2b0a      	cmp	r3, #10
 801d1b2:	d007      	beq.n	801d1c4 <dhcp_supplied_address+0x34>
 801d1b4:	68fb      	ldr	r3, [r7, #12]
 801d1b6:	795b      	ldrb	r3, [r3, #5]
 801d1b8:	2b05      	cmp	r3, #5
 801d1ba:	d003      	beq.n	801d1c4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d1c0:	2b04      	cmp	r3, #4
 801d1c2:	d101      	bne.n	801d1c8 <dhcp_supplied_address+0x38>
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	e000      	b.n	801d1ca <dhcp_supplied_address+0x3a>
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	b2db      	uxtb	r3, r3
 801d1cc:	e000      	b.n	801d1d0 <dhcp_supplied_address+0x40>
  }
  return 0;
 801d1ce:	2300      	movs	r3, #0
}
 801d1d0:	4618      	mov	r0, r3
 801d1d2:	3714      	adds	r7, #20
 801d1d4:	46bd      	mov	sp, r7
 801d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d1da:	4770      	bx	lr

0801d1dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d1dc:	b580      	push	{r7, lr}
 801d1de:	b082      	sub	sp, #8
 801d1e0:	af00      	add	r7, sp, #0
 801d1e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d1e4:	4915      	ldr	r1, [pc, #84]	; (801d23c <etharp_free_entry+0x60>)
 801d1e6:	687a      	ldr	r2, [r7, #4]
 801d1e8:	4613      	mov	r3, r2
 801d1ea:	005b      	lsls	r3, r3, #1
 801d1ec:	4413      	add	r3, r2
 801d1ee:	00db      	lsls	r3, r3, #3
 801d1f0:	440b      	add	r3, r1
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d013      	beq.n	801d220 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d1f8:	4910      	ldr	r1, [pc, #64]	; (801d23c <etharp_free_entry+0x60>)
 801d1fa:	687a      	ldr	r2, [r7, #4]
 801d1fc:	4613      	mov	r3, r2
 801d1fe:	005b      	lsls	r3, r3, #1
 801d200:	4413      	add	r3, r2
 801d202:	00db      	lsls	r3, r3, #3
 801d204:	440b      	add	r3, r1
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4618      	mov	r0, r3
 801d20a:	f7f7 ff17 	bl	801503c <pbuf_free>
    arp_table[i].q = NULL;
 801d20e:	490b      	ldr	r1, [pc, #44]	; (801d23c <etharp_free_entry+0x60>)
 801d210:	687a      	ldr	r2, [r7, #4]
 801d212:	4613      	mov	r3, r2
 801d214:	005b      	lsls	r3, r3, #1
 801d216:	4413      	add	r3, r2
 801d218:	00db      	lsls	r3, r3, #3
 801d21a:	440b      	add	r3, r1
 801d21c:	2200      	movs	r2, #0
 801d21e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d220:	4906      	ldr	r1, [pc, #24]	; (801d23c <etharp_free_entry+0x60>)
 801d222:	687a      	ldr	r2, [r7, #4]
 801d224:	4613      	mov	r3, r2
 801d226:	005b      	lsls	r3, r3, #1
 801d228:	4413      	add	r3, r2
 801d22a:	00db      	lsls	r3, r3, #3
 801d22c:	440b      	add	r3, r1
 801d22e:	3314      	adds	r3, #20
 801d230:	2200      	movs	r2, #0
 801d232:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d234:	bf00      	nop
 801d236:	3708      	adds	r7, #8
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd80      	pop	{r7, pc}
 801d23c:	2400cbe4 	.word	0x2400cbe4

0801d240 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d240:	b580      	push	{r7, lr}
 801d242:	b082      	sub	sp, #8
 801d244:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d246:	2300      	movs	r3, #0
 801d248:	607b      	str	r3, [r7, #4]
 801d24a:	e096      	b.n	801d37a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d24c:	494f      	ldr	r1, [pc, #316]	; (801d38c <etharp_tmr+0x14c>)
 801d24e:	687a      	ldr	r2, [r7, #4]
 801d250:	4613      	mov	r3, r2
 801d252:	005b      	lsls	r3, r3, #1
 801d254:	4413      	add	r3, r2
 801d256:	00db      	lsls	r3, r3, #3
 801d258:	440b      	add	r3, r1
 801d25a:	3314      	adds	r3, #20
 801d25c:	781b      	ldrb	r3, [r3, #0]
 801d25e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d260:	78fb      	ldrb	r3, [r7, #3]
 801d262:	2b00      	cmp	r3, #0
 801d264:	f000 8086 	beq.w	801d374 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d268:	4948      	ldr	r1, [pc, #288]	; (801d38c <etharp_tmr+0x14c>)
 801d26a:	687a      	ldr	r2, [r7, #4]
 801d26c:	4613      	mov	r3, r2
 801d26e:	005b      	lsls	r3, r3, #1
 801d270:	4413      	add	r3, r2
 801d272:	00db      	lsls	r3, r3, #3
 801d274:	440b      	add	r3, r1
 801d276:	3312      	adds	r3, #18
 801d278:	881b      	ldrh	r3, [r3, #0]
 801d27a:	3301      	adds	r3, #1
 801d27c:	b298      	uxth	r0, r3
 801d27e:	4943      	ldr	r1, [pc, #268]	; (801d38c <etharp_tmr+0x14c>)
 801d280:	687a      	ldr	r2, [r7, #4]
 801d282:	4613      	mov	r3, r2
 801d284:	005b      	lsls	r3, r3, #1
 801d286:	4413      	add	r3, r2
 801d288:	00db      	lsls	r3, r3, #3
 801d28a:	440b      	add	r3, r1
 801d28c:	3312      	adds	r3, #18
 801d28e:	4602      	mov	r2, r0
 801d290:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d292:	493e      	ldr	r1, [pc, #248]	; (801d38c <etharp_tmr+0x14c>)
 801d294:	687a      	ldr	r2, [r7, #4]
 801d296:	4613      	mov	r3, r2
 801d298:	005b      	lsls	r3, r3, #1
 801d29a:	4413      	add	r3, r2
 801d29c:	00db      	lsls	r3, r3, #3
 801d29e:	440b      	add	r3, r1
 801d2a0:	3312      	adds	r3, #18
 801d2a2:	881b      	ldrh	r3, [r3, #0]
 801d2a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801d2a8:	d215      	bcs.n	801d2d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d2aa:	4938      	ldr	r1, [pc, #224]	; (801d38c <etharp_tmr+0x14c>)
 801d2ac:	687a      	ldr	r2, [r7, #4]
 801d2ae:	4613      	mov	r3, r2
 801d2b0:	005b      	lsls	r3, r3, #1
 801d2b2:	4413      	add	r3, r2
 801d2b4:	00db      	lsls	r3, r3, #3
 801d2b6:	440b      	add	r3, r1
 801d2b8:	3314      	adds	r3, #20
 801d2ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d2bc:	2b01      	cmp	r3, #1
 801d2be:	d10e      	bne.n	801d2de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d2c0:	4932      	ldr	r1, [pc, #200]	; (801d38c <etharp_tmr+0x14c>)
 801d2c2:	687a      	ldr	r2, [r7, #4]
 801d2c4:	4613      	mov	r3, r2
 801d2c6:	005b      	lsls	r3, r3, #1
 801d2c8:	4413      	add	r3, r2
 801d2ca:	00db      	lsls	r3, r3, #3
 801d2cc:	440b      	add	r3, r1
 801d2ce:	3312      	adds	r3, #18
 801d2d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d2d2:	2b04      	cmp	r3, #4
 801d2d4:	d903      	bls.n	801d2de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d2d6:	6878      	ldr	r0, [r7, #4]
 801d2d8:	f7ff ff80 	bl	801d1dc <etharp_free_entry>
 801d2dc:	e04a      	b.n	801d374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d2de:	492b      	ldr	r1, [pc, #172]	; (801d38c <etharp_tmr+0x14c>)
 801d2e0:	687a      	ldr	r2, [r7, #4]
 801d2e2:	4613      	mov	r3, r2
 801d2e4:	005b      	lsls	r3, r3, #1
 801d2e6:	4413      	add	r3, r2
 801d2e8:	00db      	lsls	r3, r3, #3
 801d2ea:	440b      	add	r3, r1
 801d2ec:	3314      	adds	r3, #20
 801d2ee:	781b      	ldrb	r3, [r3, #0]
 801d2f0:	2b03      	cmp	r3, #3
 801d2f2:	d10a      	bne.n	801d30a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d2f4:	4925      	ldr	r1, [pc, #148]	; (801d38c <etharp_tmr+0x14c>)
 801d2f6:	687a      	ldr	r2, [r7, #4]
 801d2f8:	4613      	mov	r3, r2
 801d2fa:	005b      	lsls	r3, r3, #1
 801d2fc:	4413      	add	r3, r2
 801d2fe:	00db      	lsls	r3, r3, #3
 801d300:	440b      	add	r3, r1
 801d302:	3314      	adds	r3, #20
 801d304:	2204      	movs	r2, #4
 801d306:	701a      	strb	r2, [r3, #0]
 801d308:	e034      	b.n	801d374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d30a:	4920      	ldr	r1, [pc, #128]	; (801d38c <etharp_tmr+0x14c>)
 801d30c:	687a      	ldr	r2, [r7, #4]
 801d30e:	4613      	mov	r3, r2
 801d310:	005b      	lsls	r3, r3, #1
 801d312:	4413      	add	r3, r2
 801d314:	00db      	lsls	r3, r3, #3
 801d316:	440b      	add	r3, r1
 801d318:	3314      	adds	r3, #20
 801d31a:	781b      	ldrb	r3, [r3, #0]
 801d31c:	2b04      	cmp	r3, #4
 801d31e:	d10a      	bne.n	801d336 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d320:	491a      	ldr	r1, [pc, #104]	; (801d38c <etharp_tmr+0x14c>)
 801d322:	687a      	ldr	r2, [r7, #4]
 801d324:	4613      	mov	r3, r2
 801d326:	005b      	lsls	r3, r3, #1
 801d328:	4413      	add	r3, r2
 801d32a:	00db      	lsls	r3, r3, #3
 801d32c:	440b      	add	r3, r1
 801d32e:	3314      	adds	r3, #20
 801d330:	2202      	movs	r2, #2
 801d332:	701a      	strb	r2, [r3, #0]
 801d334:	e01e      	b.n	801d374 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d336:	4915      	ldr	r1, [pc, #84]	; (801d38c <etharp_tmr+0x14c>)
 801d338:	687a      	ldr	r2, [r7, #4]
 801d33a:	4613      	mov	r3, r2
 801d33c:	005b      	lsls	r3, r3, #1
 801d33e:	4413      	add	r3, r2
 801d340:	00db      	lsls	r3, r3, #3
 801d342:	440b      	add	r3, r1
 801d344:	3314      	adds	r3, #20
 801d346:	781b      	ldrb	r3, [r3, #0]
 801d348:	2b01      	cmp	r3, #1
 801d34a:	d113      	bne.n	801d374 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d34c:	490f      	ldr	r1, [pc, #60]	; (801d38c <etharp_tmr+0x14c>)
 801d34e:	687a      	ldr	r2, [r7, #4]
 801d350:	4613      	mov	r3, r2
 801d352:	005b      	lsls	r3, r3, #1
 801d354:	4413      	add	r3, r2
 801d356:	00db      	lsls	r3, r3, #3
 801d358:	440b      	add	r3, r1
 801d35a:	3308      	adds	r3, #8
 801d35c:	6818      	ldr	r0, [r3, #0]
 801d35e:	687a      	ldr	r2, [r7, #4]
 801d360:	4613      	mov	r3, r2
 801d362:	005b      	lsls	r3, r3, #1
 801d364:	4413      	add	r3, r2
 801d366:	00db      	lsls	r3, r3, #3
 801d368:	4a08      	ldr	r2, [pc, #32]	; (801d38c <etharp_tmr+0x14c>)
 801d36a:	4413      	add	r3, r2
 801d36c:	3304      	adds	r3, #4
 801d36e:	4619      	mov	r1, r3
 801d370:	f000 fe72 	bl	801e058 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	3301      	adds	r3, #1
 801d378:	607b      	str	r3, [r7, #4]
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	2b09      	cmp	r3, #9
 801d37e:	f77f af65 	ble.w	801d24c <etharp_tmr+0xc>
      }
    }
  }
}
 801d382:	bf00      	nop
 801d384:	bf00      	nop
 801d386:	3708      	adds	r7, #8
 801d388:	46bd      	mov	sp, r7
 801d38a:	bd80      	pop	{r7, pc}
 801d38c:	2400cbe4 	.word	0x2400cbe4

0801d390 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d390:	b580      	push	{r7, lr}
 801d392:	b08a      	sub	sp, #40	; 0x28
 801d394:	af00      	add	r7, sp, #0
 801d396:	60f8      	str	r0, [r7, #12]
 801d398:	460b      	mov	r3, r1
 801d39a:	607a      	str	r2, [r7, #4]
 801d39c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d39e:	230a      	movs	r3, #10
 801d3a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d3a2:	230a      	movs	r3, #10
 801d3a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d3a6:	230a      	movs	r3, #10
 801d3a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d3ae:	230a      	movs	r3, #10
 801d3b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	83bb      	strh	r3, [r7, #28]
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	837b      	strh	r3, [r7, #26]
 801d3ba:	2300      	movs	r3, #0
 801d3bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3be:	2300      	movs	r3, #0
 801d3c0:	843b      	strh	r3, [r7, #32]
 801d3c2:	e0ae      	b.n	801d522 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d3c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d3c8:	49a6      	ldr	r1, [pc, #664]	; (801d664 <etharp_find_entry+0x2d4>)
 801d3ca:	4613      	mov	r3, r2
 801d3cc:	005b      	lsls	r3, r3, #1
 801d3ce:	4413      	add	r3, r2
 801d3d0:	00db      	lsls	r3, r3, #3
 801d3d2:	440b      	add	r3, r1
 801d3d4:	3314      	adds	r3, #20
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d3da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d3de:	2b0a      	cmp	r3, #10
 801d3e0:	d105      	bne.n	801d3ee <etharp_find_entry+0x5e>
 801d3e2:	7dfb      	ldrb	r3, [r7, #23]
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d102      	bne.n	801d3ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d3e8:	8c3b      	ldrh	r3, [r7, #32]
 801d3ea:	847b      	strh	r3, [r7, #34]	; 0x22
 801d3ec:	e095      	b.n	801d51a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d3ee:	7dfb      	ldrb	r3, [r7, #23]
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	f000 8092 	beq.w	801d51a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d3f6:	7dfb      	ldrb	r3, [r7, #23]
 801d3f8:	2b01      	cmp	r3, #1
 801d3fa:	d009      	beq.n	801d410 <etharp_find_entry+0x80>
 801d3fc:	7dfb      	ldrb	r3, [r7, #23]
 801d3fe:	2b01      	cmp	r3, #1
 801d400:	d806      	bhi.n	801d410 <etharp_find_entry+0x80>
 801d402:	4b99      	ldr	r3, [pc, #612]	; (801d668 <etharp_find_entry+0x2d8>)
 801d404:	f240 1223 	movw	r2, #291	; 0x123
 801d408:	4998      	ldr	r1, [pc, #608]	; (801d66c <etharp_find_entry+0x2dc>)
 801d40a:	4899      	ldr	r0, [pc, #612]	; (801d670 <etharp_find_entry+0x2e0>)
 801d40c:	f003 f9ac 	bl	8020768 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d410:	68fb      	ldr	r3, [r7, #12]
 801d412:	2b00      	cmp	r3, #0
 801d414:	d020      	beq.n	801d458 <etharp_find_entry+0xc8>
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	6819      	ldr	r1, [r3, #0]
 801d41a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d41e:	4891      	ldr	r0, [pc, #580]	; (801d664 <etharp_find_entry+0x2d4>)
 801d420:	4613      	mov	r3, r2
 801d422:	005b      	lsls	r3, r3, #1
 801d424:	4413      	add	r3, r2
 801d426:	00db      	lsls	r3, r3, #3
 801d428:	4403      	add	r3, r0
 801d42a:	3304      	adds	r3, #4
 801d42c:	681b      	ldr	r3, [r3, #0]
 801d42e:	4299      	cmp	r1, r3
 801d430:	d112      	bne.n	801d458 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	2b00      	cmp	r3, #0
 801d436:	d00c      	beq.n	801d452 <etharp_find_entry+0xc2>
 801d438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d43c:	4989      	ldr	r1, [pc, #548]	; (801d664 <etharp_find_entry+0x2d4>)
 801d43e:	4613      	mov	r3, r2
 801d440:	005b      	lsls	r3, r3, #1
 801d442:	4413      	add	r3, r2
 801d444:	00db      	lsls	r3, r3, #3
 801d446:	440b      	add	r3, r1
 801d448:	3308      	adds	r3, #8
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	687a      	ldr	r2, [r7, #4]
 801d44e:	429a      	cmp	r2, r3
 801d450:	d102      	bne.n	801d458 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d452:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d456:	e100      	b.n	801d65a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d458:	7dfb      	ldrb	r3, [r7, #23]
 801d45a:	2b01      	cmp	r3, #1
 801d45c:	d140      	bne.n	801d4e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d45e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d462:	4980      	ldr	r1, [pc, #512]	; (801d664 <etharp_find_entry+0x2d4>)
 801d464:	4613      	mov	r3, r2
 801d466:	005b      	lsls	r3, r3, #1
 801d468:	4413      	add	r3, r2
 801d46a:	00db      	lsls	r3, r3, #3
 801d46c:	440b      	add	r3, r1
 801d46e:	681b      	ldr	r3, [r3, #0]
 801d470:	2b00      	cmp	r3, #0
 801d472:	d01a      	beq.n	801d4aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d478:	497a      	ldr	r1, [pc, #488]	; (801d664 <etharp_find_entry+0x2d4>)
 801d47a:	4613      	mov	r3, r2
 801d47c:	005b      	lsls	r3, r3, #1
 801d47e:	4413      	add	r3, r2
 801d480:	00db      	lsls	r3, r3, #3
 801d482:	440b      	add	r3, r1
 801d484:	3312      	adds	r3, #18
 801d486:	881b      	ldrh	r3, [r3, #0]
 801d488:	8bba      	ldrh	r2, [r7, #28]
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d845      	bhi.n	801d51a <etharp_find_entry+0x18a>
            old_queue = i;
 801d48e:	8c3b      	ldrh	r3, [r7, #32]
 801d490:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d492:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d496:	4973      	ldr	r1, [pc, #460]	; (801d664 <etharp_find_entry+0x2d4>)
 801d498:	4613      	mov	r3, r2
 801d49a:	005b      	lsls	r3, r3, #1
 801d49c:	4413      	add	r3, r2
 801d49e:	00db      	lsls	r3, r3, #3
 801d4a0:	440b      	add	r3, r1
 801d4a2:	3312      	adds	r3, #18
 801d4a4:	881b      	ldrh	r3, [r3, #0]
 801d4a6:	83bb      	strh	r3, [r7, #28]
 801d4a8:	e037      	b.n	801d51a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d4aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4ae:	496d      	ldr	r1, [pc, #436]	; (801d664 <etharp_find_entry+0x2d4>)
 801d4b0:	4613      	mov	r3, r2
 801d4b2:	005b      	lsls	r3, r3, #1
 801d4b4:	4413      	add	r3, r2
 801d4b6:	00db      	lsls	r3, r3, #3
 801d4b8:	440b      	add	r3, r1
 801d4ba:	3312      	adds	r3, #18
 801d4bc:	881b      	ldrh	r3, [r3, #0]
 801d4be:	8b7a      	ldrh	r2, [r7, #26]
 801d4c0:	429a      	cmp	r2, r3
 801d4c2:	d82a      	bhi.n	801d51a <etharp_find_entry+0x18a>
            old_pending = i;
 801d4c4:	8c3b      	ldrh	r3, [r7, #32]
 801d4c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801d4c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4cc:	4965      	ldr	r1, [pc, #404]	; (801d664 <etharp_find_entry+0x2d4>)
 801d4ce:	4613      	mov	r3, r2
 801d4d0:	005b      	lsls	r3, r3, #1
 801d4d2:	4413      	add	r3, r2
 801d4d4:	00db      	lsls	r3, r3, #3
 801d4d6:	440b      	add	r3, r1
 801d4d8:	3312      	adds	r3, #18
 801d4da:	881b      	ldrh	r3, [r3, #0]
 801d4dc:	837b      	strh	r3, [r7, #26]
 801d4de:	e01c      	b.n	801d51a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d4e0:	7dfb      	ldrb	r3, [r7, #23]
 801d4e2:	2b01      	cmp	r3, #1
 801d4e4:	d919      	bls.n	801d51a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d4e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4ea:	495e      	ldr	r1, [pc, #376]	; (801d664 <etharp_find_entry+0x2d4>)
 801d4ec:	4613      	mov	r3, r2
 801d4ee:	005b      	lsls	r3, r3, #1
 801d4f0:	4413      	add	r3, r2
 801d4f2:	00db      	lsls	r3, r3, #3
 801d4f4:	440b      	add	r3, r1
 801d4f6:	3312      	adds	r3, #18
 801d4f8:	881b      	ldrh	r3, [r3, #0]
 801d4fa:	8b3a      	ldrh	r2, [r7, #24]
 801d4fc:	429a      	cmp	r2, r3
 801d4fe:	d80c      	bhi.n	801d51a <etharp_find_entry+0x18a>
            old_stable = i;
 801d500:	8c3b      	ldrh	r3, [r7, #32]
 801d502:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801d504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d508:	4956      	ldr	r1, [pc, #344]	; (801d664 <etharp_find_entry+0x2d4>)
 801d50a:	4613      	mov	r3, r2
 801d50c:	005b      	lsls	r3, r3, #1
 801d50e:	4413      	add	r3, r2
 801d510:	00db      	lsls	r3, r3, #3
 801d512:	440b      	add	r3, r1
 801d514:	3312      	adds	r3, #18
 801d516:	881b      	ldrh	r3, [r3, #0]
 801d518:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d51a:	8c3b      	ldrh	r3, [r7, #32]
 801d51c:	3301      	adds	r3, #1
 801d51e:	b29b      	uxth	r3, r3
 801d520:	843b      	strh	r3, [r7, #32]
 801d522:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d526:	2b09      	cmp	r3, #9
 801d528:	f77f af4c 	ble.w	801d3c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d52c:	7afb      	ldrb	r3, [r7, #11]
 801d52e:	f003 0302 	and.w	r3, r3, #2
 801d532:	2b00      	cmp	r3, #0
 801d534:	d108      	bne.n	801d548 <etharp_find_entry+0x1b8>
 801d536:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d53a:	2b0a      	cmp	r3, #10
 801d53c:	d107      	bne.n	801d54e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d53e:	7afb      	ldrb	r3, [r7, #11]
 801d540:	f003 0301 	and.w	r3, r3, #1
 801d544:	2b00      	cmp	r3, #0
 801d546:	d102      	bne.n	801d54e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d548:	f04f 33ff 	mov.w	r3, #4294967295
 801d54c:	e085      	b.n	801d65a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d54e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d552:	2b09      	cmp	r3, #9
 801d554:	dc02      	bgt.n	801d55c <etharp_find_entry+0x1cc>
    i = empty;
 801d556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d558:	843b      	strh	r3, [r7, #32]
 801d55a:	e039      	b.n	801d5d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d55c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801d560:	2b09      	cmp	r3, #9
 801d562:	dc14      	bgt.n	801d58e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d566:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d568:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d56c:	493d      	ldr	r1, [pc, #244]	; (801d664 <etharp_find_entry+0x2d4>)
 801d56e:	4613      	mov	r3, r2
 801d570:	005b      	lsls	r3, r3, #1
 801d572:	4413      	add	r3, r2
 801d574:	00db      	lsls	r3, r3, #3
 801d576:	440b      	add	r3, r1
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d018      	beq.n	801d5b0 <etharp_find_entry+0x220>
 801d57e:	4b3a      	ldr	r3, [pc, #232]	; (801d668 <etharp_find_entry+0x2d8>)
 801d580:	f240 126d 	movw	r2, #365	; 0x16d
 801d584:	493b      	ldr	r1, [pc, #236]	; (801d674 <etharp_find_entry+0x2e4>)
 801d586:	483a      	ldr	r0, [pc, #232]	; (801d670 <etharp_find_entry+0x2e0>)
 801d588:	f003 f8ee 	bl	8020768 <iprintf>
 801d58c:	e010      	b.n	801d5b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d58e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d592:	2b09      	cmp	r3, #9
 801d594:	dc02      	bgt.n	801d59c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d596:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d598:	843b      	strh	r3, [r7, #32]
 801d59a:	e009      	b.n	801d5b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d59c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d5a0:	2b09      	cmp	r3, #9
 801d5a2:	dc02      	bgt.n	801d5aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d5a4:	8bfb      	ldrh	r3, [r7, #30]
 801d5a6:	843b      	strh	r3, [r7, #32]
 801d5a8:	e002      	b.n	801d5b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d5aa:	f04f 33ff 	mov.w	r3, #4294967295
 801d5ae:	e054      	b.n	801d65a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d5b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5b4:	2b09      	cmp	r3, #9
 801d5b6:	dd06      	ble.n	801d5c6 <etharp_find_entry+0x236>
 801d5b8:	4b2b      	ldr	r3, [pc, #172]	; (801d668 <etharp_find_entry+0x2d8>)
 801d5ba:	f240 127f 	movw	r2, #383	; 0x17f
 801d5be:	492e      	ldr	r1, [pc, #184]	; (801d678 <etharp_find_entry+0x2e8>)
 801d5c0:	482b      	ldr	r0, [pc, #172]	; (801d670 <etharp_find_entry+0x2e0>)
 801d5c2:	f003 f8d1 	bl	8020768 <iprintf>
    etharp_free_entry(i);
 801d5c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5ca:	4618      	mov	r0, r3
 801d5cc:	f7ff fe06 	bl	801d1dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d5d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5d4:	2b09      	cmp	r3, #9
 801d5d6:	dd06      	ble.n	801d5e6 <etharp_find_entry+0x256>
 801d5d8:	4b23      	ldr	r3, [pc, #140]	; (801d668 <etharp_find_entry+0x2d8>)
 801d5da:	f240 1283 	movw	r2, #387	; 0x183
 801d5de:	4926      	ldr	r1, [pc, #152]	; (801d678 <etharp_find_entry+0x2e8>)
 801d5e0:	4823      	ldr	r0, [pc, #140]	; (801d670 <etharp_find_entry+0x2e0>)
 801d5e2:	f003 f8c1 	bl	8020768 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d5e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d5ea:	491e      	ldr	r1, [pc, #120]	; (801d664 <etharp_find_entry+0x2d4>)
 801d5ec:	4613      	mov	r3, r2
 801d5ee:	005b      	lsls	r3, r3, #1
 801d5f0:	4413      	add	r3, r2
 801d5f2:	00db      	lsls	r3, r3, #3
 801d5f4:	440b      	add	r3, r1
 801d5f6:	3314      	adds	r3, #20
 801d5f8:	781b      	ldrb	r3, [r3, #0]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d006      	beq.n	801d60c <etharp_find_entry+0x27c>
 801d5fe:	4b1a      	ldr	r3, [pc, #104]	; (801d668 <etharp_find_entry+0x2d8>)
 801d600:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801d604:	491d      	ldr	r1, [pc, #116]	; (801d67c <etharp_find_entry+0x2ec>)
 801d606:	481a      	ldr	r0, [pc, #104]	; (801d670 <etharp_find_entry+0x2e0>)
 801d608:	f003 f8ae 	bl	8020768 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d60c:	68fb      	ldr	r3, [r7, #12]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d00b      	beq.n	801d62a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d612:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d616:	68fb      	ldr	r3, [r7, #12]
 801d618:	6819      	ldr	r1, [r3, #0]
 801d61a:	4812      	ldr	r0, [pc, #72]	; (801d664 <etharp_find_entry+0x2d4>)
 801d61c:	4613      	mov	r3, r2
 801d61e:	005b      	lsls	r3, r3, #1
 801d620:	4413      	add	r3, r2
 801d622:	00db      	lsls	r3, r3, #3
 801d624:	4403      	add	r3, r0
 801d626:	3304      	adds	r3, #4
 801d628:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d62a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d62e:	490d      	ldr	r1, [pc, #52]	; (801d664 <etharp_find_entry+0x2d4>)
 801d630:	4613      	mov	r3, r2
 801d632:	005b      	lsls	r3, r3, #1
 801d634:	4413      	add	r3, r2
 801d636:	00db      	lsls	r3, r3, #3
 801d638:	440b      	add	r3, r1
 801d63a:	3312      	adds	r3, #18
 801d63c:	2200      	movs	r2, #0
 801d63e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d644:	4907      	ldr	r1, [pc, #28]	; (801d664 <etharp_find_entry+0x2d4>)
 801d646:	4613      	mov	r3, r2
 801d648:	005b      	lsls	r3, r3, #1
 801d64a:	4413      	add	r3, r2
 801d64c:	00db      	lsls	r3, r3, #3
 801d64e:	440b      	add	r3, r1
 801d650:	3308      	adds	r3, #8
 801d652:	687a      	ldr	r2, [r7, #4]
 801d654:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d656:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801d65a:	4618      	mov	r0, r3
 801d65c:	3728      	adds	r7, #40	; 0x28
 801d65e:	46bd      	mov	sp, r7
 801d660:	bd80      	pop	{r7, pc}
 801d662:	bf00      	nop
 801d664:	2400cbe4 	.word	0x2400cbe4
 801d668:	08023e10 	.word	0x08023e10
 801d66c:	08023e48 	.word	0x08023e48
 801d670:	08023e88 	.word	0x08023e88
 801d674:	08023eb0 	.word	0x08023eb0
 801d678:	08023ec8 	.word	0x08023ec8
 801d67c:	08023edc 	.word	0x08023edc

0801d680 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d680:	b580      	push	{r7, lr}
 801d682:	b088      	sub	sp, #32
 801d684:	af02      	add	r7, sp, #8
 801d686:	60f8      	str	r0, [r7, #12]
 801d688:	60b9      	str	r1, [r7, #8]
 801d68a:	607a      	str	r2, [r7, #4]
 801d68c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d694:	2b06      	cmp	r3, #6
 801d696:	d006      	beq.n	801d6a6 <etharp_update_arp_entry+0x26>
 801d698:	4b48      	ldr	r3, [pc, #288]	; (801d7bc <etharp_update_arp_entry+0x13c>)
 801d69a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801d69e:	4948      	ldr	r1, [pc, #288]	; (801d7c0 <etharp_update_arp_entry+0x140>)
 801d6a0:	4848      	ldr	r0, [pc, #288]	; (801d7c4 <etharp_update_arp_entry+0x144>)
 801d6a2:	f003 f861 	bl	8020768 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d6a6:	68bb      	ldr	r3, [r7, #8]
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d012      	beq.n	801d6d2 <etharp_update_arp_entry+0x52>
 801d6ac:	68bb      	ldr	r3, [r7, #8]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d00e      	beq.n	801d6d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d6b4:	68bb      	ldr	r3, [r7, #8]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	68f9      	ldr	r1, [r7, #12]
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f001 f946 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801d6c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d105      	bne.n	801d6d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d6c6:	68bb      	ldr	r3, [r7, #8]
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d6ce:	2be0      	cmp	r3, #224	; 0xe0
 801d6d0:	d102      	bne.n	801d6d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d6d2:	f06f 030f 	mvn.w	r3, #15
 801d6d6:	e06c      	b.n	801d7b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d6d8:	78fb      	ldrb	r3, [r7, #3]
 801d6da:	68fa      	ldr	r2, [r7, #12]
 801d6dc:	4619      	mov	r1, r3
 801d6de:	68b8      	ldr	r0, [r7, #8]
 801d6e0:	f7ff fe56 	bl	801d390 <etharp_find_entry>
 801d6e4:	4603      	mov	r3, r0
 801d6e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d6e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	da02      	bge.n	801d6f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d6f0:	8afb      	ldrh	r3, [r7, #22]
 801d6f2:	b25b      	sxtb	r3, r3
 801d6f4:	e05d      	b.n	801d7b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d6f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d6fa:	4933      	ldr	r1, [pc, #204]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d6fc:	4613      	mov	r3, r2
 801d6fe:	005b      	lsls	r3, r3, #1
 801d700:	4413      	add	r3, r2
 801d702:	00db      	lsls	r3, r3, #3
 801d704:	440b      	add	r3, r1
 801d706:	3314      	adds	r3, #20
 801d708:	2202      	movs	r2, #2
 801d70a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d70c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d710:	492d      	ldr	r1, [pc, #180]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d712:	4613      	mov	r3, r2
 801d714:	005b      	lsls	r3, r3, #1
 801d716:	4413      	add	r3, r2
 801d718:	00db      	lsls	r3, r3, #3
 801d71a:	440b      	add	r3, r1
 801d71c:	3308      	adds	r3, #8
 801d71e:	68fa      	ldr	r2, [r7, #12]
 801d720:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d722:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d726:	4613      	mov	r3, r2
 801d728:	005b      	lsls	r3, r3, #1
 801d72a:	4413      	add	r3, r2
 801d72c:	00db      	lsls	r3, r3, #3
 801d72e:	3308      	adds	r3, #8
 801d730:	4a25      	ldr	r2, [pc, #148]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d732:	4413      	add	r3, r2
 801d734:	3304      	adds	r3, #4
 801d736:	2206      	movs	r2, #6
 801d738:	6879      	ldr	r1, [r7, #4]
 801d73a:	4618      	mov	r0, r3
 801d73c:	f002 ff69 	bl	8020612 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d744:	4920      	ldr	r1, [pc, #128]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d746:	4613      	mov	r3, r2
 801d748:	005b      	lsls	r3, r3, #1
 801d74a:	4413      	add	r3, r2
 801d74c:	00db      	lsls	r3, r3, #3
 801d74e:	440b      	add	r3, r1
 801d750:	3312      	adds	r3, #18
 801d752:	2200      	movs	r2, #0
 801d754:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d75a:	491b      	ldr	r1, [pc, #108]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d75c:	4613      	mov	r3, r2
 801d75e:	005b      	lsls	r3, r3, #1
 801d760:	4413      	add	r3, r2
 801d762:	00db      	lsls	r3, r3, #3
 801d764:	440b      	add	r3, r1
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	2b00      	cmp	r3, #0
 801d76a:	d021      	beq.n	801d7b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d76c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d770:	4915      	ldr	r1, [pc, #84]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d772:	4613      	mov	r3, r2
 801d774:	005b      	lsls	r3, r3, #1
 801d776:	4413      	add	r3, r2
 801d778:	00db      	lsls	r3, r3, #3
 801d77a:	440b      	add	r3, r1
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d780:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d784:	4910      	ldr	r1, [pc, #64]	; (801d7c8 <etharp_update_arp_entry+0x148>)
 801d786:	4613      	mov	r3, r2
 801d788:	005b      	lsls	r3, r3, #1
 801d78a:	4413      	add	r3, r2
 801d78c:	00db      	lsls	r3, r3, #3
 801d78e:	440b      	add	r3, r1
 801d790:	2200      	movs	r2, #0
 801d792:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d794:	68fb      	ldr	r3, [r7, #12]
 801d796:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801d79a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d79e:	9300      	str	r3, [sp, #0]
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	6939      	ldr	r1, [r7, #16]
 801d7a4:	68f8      	ldr	r0, [r7, #12]
 801d7a6:	f001 ffdf 	bl	801f768 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d7aa:	6938      	ldr	r0, [r7, #16]
 801d7ac:	f7f7 fc46 	bl	801503c <pbuf_free>
  }
  return ERR_OK;
 801d7b0:	2300      	movs	r3, #0
}
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	3718      	adds	r7, #24
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bd80      	pop	{r7, pc}
 801d7ba:	bf00      	nop
 801d7bc:	08023e10 	.word	0x08023e10
 801d7c0:	08023f08 	.word	0x08023f08
 801d7c4:	08023e88 	.word	0x08023e88
 801d7c8:	2400cbe4 	.word	0x2400cbe4

0801d7cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b084      	sub	sp, #16
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	60fb      	str	r3, [r7, #12]
 801d7d8:	e01e      	b.n	801d818 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d7da:	4913      	ldr	r1, [pc, #76]	; (801d828 <etharp_cleanup_netif+0x5c>)
 801d7dc:	68fa      	ldr	r2, [r7, #12]
 801d7de:	4613      	mov	r3, r2
 801d7e0:	005b      	lsls	r3, r3, #1
 801d7e2:	4413      	add	r3, r2
 801d7e4:	00db      	lsls	r3, r3, #3
 801d7e6:	440b      	add	r3, r1
 801d7e8:	3314      	adds	r3, #20
 801d7ea:	781b      	ldrb	r3, [r3, #0]
 801d7ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d7ee:	7afb      	ldrb	r3, [r7, #11]
 801d7f0:	2b00      	cmp	r3, #0
 801d7f2:	d00e      	beq.n	801d812 <etharp_cleanup_netif+0x46>
 801d7f4:	490c      	ldr	r1, [pc, #48]	; (801d828 <etharp_cleanup_netif+0x5c>)
 801d7f6:	68fa      	ldr	r2, [r7, #12]
 801d7f8:	4613      	mov	r3, r2
 801d7fa:	005b      	lsls	r3, r3, #1
 801d7fc:	4413      	add	r3, r2
 801d7fe:	00db      	lsls	r3, r3, #3
 801d800:	440b      	add	r3, r1
 801d802:	3308      	adds	r3, #8
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	687a      	ldr	r2, [r7, #4]
 801d808:	429a      	cmp	r2, r3
 801d80a:	d102      	bne.n	801d812 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d80c:	68f8      	ldr	r0, [r7, #12]
 801d80e:	f7ff fce5 	bl	801d1dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d812:	68fb      	ldr	r3, [r7, #12]
 801d814:	3301      	adds	r3, #1
 801d816:	60fb      	str	r3, [r7, #12]
 801d818:	68fb      	ldr	r3, [r7, #12]
 801d81a:	2b09      	cmp	r3, #9
 801d81c:	dddd      	ble.n	801d7da <etharp_cleanup_netif+0xe>
    }
  }
}
 801d81e:	bf00      	nop
 801d820:	bf00      	nop
 801d822:	3710      	adds	r7, #16
 801d824:	46bd      	mov	sp, r7
 801d826:	bd80      	pop	{r7, pc}
 801d828:	2400cbe4 	.word	0x2400cbe4

0801d82c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d82c:	b5b0      	push	{r4, r5, r7, lr}
 801d82e:	b08a      	sub	sp, #40	; 0x28
 801d830:	af04      	add	r7, sp, #16
 801d832:	6078      	str	r0, [r7, #4]
 801d834:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d836:	683b      	ldr	r3, [r7, #0]
 801d838:	2b00      	cmp	r3, #0
 801d83a:	d107      	bne.n	801d84c <etharp_input+0x20>
 801d83c:	4b3f      	ldr	r3, [pc, #252]	; (801d93c <etharp_input+0x110>)
 801d83e:	f240 228a 	movw	r2, #650	; 0x28a
 801d842:	493f      	ldr	r1, [pc, #252]	; (801d940 <etharp_input+0x114>)
 801d844:	483f      	ldr	r0, [pc, #252]	; (801d944 <etharp_input+0x118>)
 801d846:	f002 ff8f 	bl	8020768 <iprintf>
 801d84a:	e074      	b.n	801d936 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801d84c:	687b      	ldr	r3, [r7, #4]
 801d84e:	685b      	ldr	r3, [r3, #4]
 801d850:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d852:	693b      	ldr	r3, [r7, #16]
 801d854:	881b      	ldrh	r3, [r3, #0]
 801d856:	b29b      	uxth	r3, r3
 801d858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d85c:	d10c      	bne.n	801d878 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d85e:	693b      	ldr	r3, [r7, #16]
 801d860:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d862:	2b06      	cmp	r3, #6
 801d864:	d108      	bne.n	801d878 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d866:	693b      	ldr	r3, [r7, #16]
 801d868:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d86a:	2b04      	cmp	r3, #4
 801d86c:	d104      	bne.n	801d878 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d86e:	693b      	ldr	r3, [r7, #16]
 801d870:	885b      	ldrh	r3, [r3, #2]
 801d872:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d874:	2b08      	cmp	r3, #8
 801d876:	d003      	beq.n	801d880 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d878:	6878      	ldr	r0, [r7, #4]
 801d87a:	f7f7 fbdf 	bl	801503c <pbuf_free>
    return;
 801d87e:	e05a      	b.n	801d936 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d880:	693b      	ldr	r3, [r7, #16]
 801d882:	330e      	adds	r3, #14
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d888:	693b      	ldr	r3, [r7, #16]
 801d88a:	3318      	adds	r3, #24
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d890:	683b      	ldr	r3, [r7, #0]
 801d892:	3304      	adds	r3, #4
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d102      	bne.n	801d8a0 <etharp_input+0x74>
    for_us = 0;
 801d89a:	2300      	movs	r3, #0
 801d89c:	75fb      	strb	r3, [r7, #23]
 801d89e:	e009      	b.n	801d8b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d8a0:	68ba      	ldr	r2, [r7, #8]
 801d8a2:	683b      	ldr	r3, [r7, #0]
 801d8a4:	3304      	adds	r3, #4
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	429a      	cmp	r2, r3
 801d8aa:	bf0c      	ite	eq
 801d8ac:	2301      	moveq	r3, #1
 801d8ae:	2300      	movne	r3, #0
 801d8b0:	b2db      	uxtb	r3, r3
 801d8b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d8b4:	693b      	ldr	r3, [r7, #16]
 801d8b6:	f103 0208 	add.w	r2, r3, #8
 801d8ba:	7dfb      	ldrb	r3, [r7, #23]
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d001      	beq.n	801d8c4 <etharp_input+0x98>
 801d8c0:	2301      	movs	r3, #1
 801d8c2:	e000      	b.n	801d8c6 <etharp_input+0x9a>
 801d8c4:	2302      	movs	r3, #2
 801d8c6:	f107 010c 	add.w	r1, r7, #12
 801d8ca:	6838      	ldr	r0, [r7, #0]
 801d8cc:	f7ff fed8 	bl	801d680 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d8d0:	693b      	ldr	r3, [r7, #16]
 801d8d2:	88db      	ldrh	r3, [r3, #6]
 801d8d4:	b29b      	uxth	r3, r3
 801d8d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d8da:	d003      	beq.n	801d8e4 <etharp_input+0xb8>
 801d8dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d8e0:	d01e      	beq.n	801d920 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d8e2:	e025      	b.n	801d930 <etharp_input+0x104>
      if (for_us) {
 801d8e4:	7dfb      	ldrb	r3, [r7, #23]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d021      	beq.n	801d92e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d8ea:	683b      	ldr	r3, [r7, #0]
 801d8ec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801d8f0:	693b      	ldr	r3, [r7, #16]
 801d8f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d8f6:	683b      	ldr	r3, [r7, #0]
 801d8f8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d900:	693a      	ldr	r2, [r7, #16]
 801d902:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d904:	2102      	movs	r1, #2
 801d906:	9103      	str	r1, [sp, #12]
 801d908:	f107 010c 	add.w	r1, r7, #12
 801d90c:	9102      	str	r1, [sp, #8]
 801d90e:	9201      	str	r2, [sp, #4]
 801d910:	9300      	str	r3, [sp, #0]
 801d912:	462b      	mov	r3, r5
 801d914:	4622      	mov	r2, r4
 801d916:	4601      	mov	r1, r0
 801d918:	6838      	ldr	r0, [r7, #0]
 801d91a:	f000 faef 	bl	801defc <etharp_raw>
      break;
 801d91e:	e006      	b.n	801d92e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801d920:	f107 030c 	add.w	r3, r7, #12
 801d924:	4619      	mov	r1, r3
 801d926:	6838      	ldr	r0, [r7, #0]
 801d928:	f7fe f9fc 	bl	801bd24 <dhcp_arp_reply>
      break;
 801d92c:	e000      	b.n	801d930 <etharp_input+0x104>
      break;
 801d92e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d930:	6878      	ldr	r0, [r7, #4]
 801d932:	f7f7 fb83 	bl	801503c <pbuf_free>
}
 801d936:	3718      	adds	r7, #24
 801d938:	46bd      	mov	sp, r7
 801d93a:	bdb0      	pop	{r4, r5, r7, pc}
 801d93c:	08023e10 	.word	0x08023e10
 801d940:	08023f60 	.word	0x08023f60
 801d944:	08023e88 	.word	0x08023e88

0801d948 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d948:	b580      	push	{r7, lr}
 801d94a:	b086      	sub	sp, #24
 801d94c:	af02      	add	r7, sp, #8
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	60b9      	str	r1, [r7, #8]
 801d952:	4613      	mov	r3, r2
 801d954:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d956:	79fa      	ldrb	r2, [r7, #7]
 801d958:	4944      	ldr	r1, [pc, #272]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d95a:	4613      	mov	r3, r2
 801d95c:	005b      	lsls	r3, r3, #1
 801d95e:	4413      	add	r3, r2
 801d960:	00db      	lsls	r3, r3, #3
 801d962:	440b      	add	r3, r1
 801d964:	3314      	adds	r3, #20
 801d966:	781b      	ldrb	r3, [r3, #0]
 801d968:	2b01      	cmp	r3, #1
 801d96a:	d806      	bhi.n	801d97a <etharp_output_to_arp_index+0x32>
 801d96c:	4b40      	ldr	r3, [pc, #256]	; (801da70 <etharp_output_to_arp_index+0x128>)
 801d96e:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d972:	4940      	ldr	r1, [pc, #256]	; (801da74 <etharp_output_to_arp_index+0x12c>)
 801d974:	4840      	ldr	r0, [pc, #256]	; (801da78 <etharp_output_to_arp_index+0x130>)
 801d976:	f002 fef7 	bl	8020768 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d97a:	79fa      	ldrb	r2, [r7, #7]
 801d97c:	493b      	ldr	r1, [pc, #236]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d97e:	4613      	mov	r3, r2
 801d980:	005b      	lsls	r3, r3, #1
 801d982:	4413      	add	r3, r2
 801d984:	00db      	lsls	r3, r3, #3
 801d986:	440b      	add	r3, r1
 801d988:	3314      	adds	r3, #20
 801d98a:	781b      	ldrb	r3, [r3, #0]
 801d98c:	2b02      	cmp	r3, #2
 801d98e:	d153      	bne.n	801da38 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d990:	79fa      	ldrb	r2, [r7, #7]
 801d992:	4936      	ldr	r1, [pc, #216]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d994:	4613      	mov	r3, r2
 801d996:	005b      	lsls	r3, r3, #1
 801d998:	4413      	add	r3, r2
 801d99a:	00db      	lsls	r3, r3, #3
 801d99c:	440b      	add	r3, r1
 801d99e:	3312      	adds	r3, #18
 801d9a0:	881b      	ldrh	r3, [r3, #0]
 801d9a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d9a6:	d919      	bls.n	801d9dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d9a8:	79fa      	ldrb	r2, [r7, #7]
 801d9aa:	4613      	mov	r3, r2
 801d9ac:	005b      	lsls	r3, r3, #1
 801d9ae:	4413      	add	r3, r2
 801d9b0:	00db      	lsls	r3, r3, #3
 801d9b2:	4a2e      	ldr	r2, [pc, #184]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d9b4:	4413      	add	r3, r2
 801d9b6:	3304      	adds	r3, #4
 801d9b8:	4619      	mov	r1, r3
 801d9ba:	68f8      	ldr	r0, [r7, #12]
 801d9bc:	f000 fb4c 	bl	801e058 <etharp_request>
 801d9c0:	4603      	mov	r3, r0
 801d9c2:	2b00      	cmp	r3, #0
 801d9c4:	d138      	bne.n	801da38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d9c6:	79fa      	ldrb	r2, [r7, #7]
 801d9c8:	4928      	ldr	r1, [pc, #160]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d9ca:	4613      	mov	r3, r2
 801d9cc:	005b      	lsls	r3, r3, #1
 801d9ce:	4413      	add	r3, r2
 801d9d0:	00db      	lsls	r3, r3, #3
 801d9d2:	440b      	add	r3, r1
 801d9d4:	3314      	adds	r3, #20
 801d9d6:	2203      	movs	r2, #3
 801d9d8:	701a      	strb	r2, [r3, #0]
 801d9da:	e02d      	b.n	801da38 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d9dc:	79fa      	ldrb	r2, [r7, #7]
 801d9de:	4923      	ldr	r1, [pc, #140]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801d9e0:	4613      	mov	r3, r2
 801d9e2:	005b      	lsls	r3, r3, #1
 801d9e4:	4413      	add	r3, r2
 801d9e6:	00db      	lsls	r3, r3, #3
 801d9e8:	440b      	add	r3, r1
 801d9ea:	3312      	adds	r3, #18
 801d9ec:	881b      	ldrh	r3, [r3, #0]
 801d9ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801d9f2:	d321      	bcc.n	801da38 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d9f4:	79fa      	ldrb	r2, [r7, #7]
 801d9f6:	4613      	mov	r3, r2
 801d9f8:	005b      	lsls	r3, r3, #1
 801d9fa:	4413      	add	r3, r2
 801d9fc:	00db      	lsls	r3, r3, #3
 801d9fe:	4a1b      	ldr	r2, [pc, #108]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801da00:	4413      	add	r3, r2
 801da02:	1d19      	adds	r1, r3, #4
 801da04:	79fa      	ldrb	r2, [r7, #7]
 801da06:	4613      	mov	r3, r2
 801da08:	005b      	lsls	r3, r3, #1
 801da0a:	4413      	add	r3, r2
 801da0c:	00db      	lsls	r3, r3, #3
 801da0e:	3308      	adds	r3, #8
 801da10:	4a16      	ldr	r2, [pc, #88]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801da12:	4413      	add	r3, r2
 801da14:	3304      	adds	r3, #4
 801da16:	461a      	mov	r2, r3
 801da18:	68f8      	ldr	r0, [r7, #12]
 801da1a:	f000 fafb 	bl	801e014 <etharp_request_dst>
 801da1e:	4603      	mov	r3, r0
 801da20:	2b00      	cmp	r3, #0
 801da22:	d109      	bne.n	801da38 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801da24:	79fa      	ldrb	r2, [r7, #7]
 801da26:	4911      	ldr	r1, [pc, #68]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801da28:	4613      	mov	r3, r2
 801da2a:	005b      	lsls	r3, r3, #1
 801da2c:	4413      	add	r3, r2
 801da2e:	00db      	lsls	r3, r3, #3
 801da30:	440b      	add	r3, r1
 801da32:	3314      	adds	r3, #20
 801da34:	2203      	movs	r2, #3
 801da36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801da3e:	79fa      	ldrb	r2, [r7, #7]
 801da40:	4613      	mov	r3, r2
 801da42:	005b      	lsls	r3, r3, #1
 801da44:	4413      	add	r3, r2
 801da46:	00db      	lsls	r3, r3, #3
 801da48:	3308      	adds	r3, #8
 801da4a:	4a08      	ldr	r2, [pc, #32]	; (801da6c <etharp_output_to_arp_index+0x124>)
 801da4c:	4413      	add	r3, r2
 801da4e:	3304      	adds	r3, #4
 801da50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801da54:	9200      	str	r2, [sp, #0]
 801da56:	460a      	mov	r2, r1
 801da58:	68b9      	ldr	r1, [r7, #8]
 801da5a:	68f8      	ldr	r0, [r7, #12]
 801da5c:	f001 fe84 	bl	801f768 <ethernet_output>
 801da60:	4603      	mov	r3, r0
}
 801da62:	4618      	mov	r0, r3
 801da64:	3710      	adds	r7, #16
 801da66:	46bd      	mov	sp, r7
 801da68:	bd80      	pop	{r7, pc}
 801da6a:	bf00      	nop
 801da6c:	2400cbe4 	.word	0x2400cbe4
 801da70:	08023e10 	.word	0x08023e10
 801da74:	08023f80 	.word	0x08023f80
 801da78:	08023e88 	.word	0x08023e88

0801da7c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b08a      	sub	sp, #40	; 0x28
 801da80:	af02      	add	r7, sp, #8
 801da82:	60f8      	str	r0, [r7, #12]
 801da84:	60b9      	str	r1, [r7, #8]
 801da86:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d106      	bne.n	801daa0 <etharp_output+0x24>
 801da92:	4b73      	ldr	r3, [pc, #460]	; (801dc60 <etharp_output+0x1e4>)
 801da94:	f240 321e 	movw	r2, #798	; 0x31e
 801da98:	4972      	ldr	r1, [pc, #456]	; (801dc64 <etharp_output+0x1e8>)
 801da9a:	4873      	ldr	r0, [pc, #460]	; (801dc68 <etharp_output+0x1ec>)
 801da9c:	f002 fe64 	bl	8020768 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801daa0:	68bb      	ldr	r3, [r7, #8]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d106      	bne.n	801dab4 <etharp_output+0x38>
 801daa6:	4b6e      	ldr	r3, [pc, #440]	; (801dc60 <etharp_output+0x1e4>)
 801daa8:	f240 321f 	movw	r2, #799	; 0x31f
 801daac:	496f      	ldr	r1, [pc, #444]	; (801dc6c <etharp_output+0x1f0>)
 801daae:	486e      	ldr	r0, [pc, #440]	; (801dc68 <etharp_output+0x1ec>)
 801dab0:	f002 fe5a 	bl	8020768 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dab4:	687b      	ldr	r3, [r7, #4]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d106      	bne.n	801dac8 <etharp_output+0x4c>
 801daba:	4b69      	ldr	r3, [pc, #420]	; (801dc60 <etharp_output+0x1e4>)
 801dabc:	f44f 7248 	mov.w	r2, #800	; 0x320
 801dac0:	496b      	ldr	r1, [pc, #428]	; (801dc70 <etharp_output+0x1f4>)
 801dac2:	4869      	ldr	r0, [pc, #420]	; (801dc68 <etharp_output+0x1ec>)
 801dac4:	f002 fe50 	bl	8020768 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	681b      	ldr	r3, [r3, #0]
 801dacc:	68f9      	ldr	r1, [r7, #12]
 801dace:	4618      	mov	r0, r3
 801dad0:	f000 ff3c 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801dad4:	4603      	mov	r3, r0
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d002      	beq.n	801dae0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801dada:	4b66      	ldr	r3, [pc, #408]	; (801dc74 <etharp_output+0x1f8>)
 801dadc:	61fb      	str	r3, [r7, #28]
 801dade:	e0af      	b.n	801dc40 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801dae8:	2be0      	cmp	r3, #224	; 0xe0
 801daea:	d118      	bne.n	801db1e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801daec:	2301      	movs	r3, #1
 801daee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801daf0:	2300      	movs	r3, #0
 801daf2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801daf4:	235e      	movs	r3, #94	; 0x5e
 801daf6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	3301      	adds	r3, #1
 801dafc:	781b      	ldrb	r3, [r3, #0]
 801dafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db02:	b2db      	uxtb	r3, r3
 801db04:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801db06:	687b      	ldr	r3, [r7, #4]
 801db08:	3302      	adds	r3, #2
 801db0a:	781b      	ldrb	r3, [r3, #0]
 801db0c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	3303      	adds	r3, #3
 801db12:	781b      	ldrb	r3, [r3, #0]
 801db14:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801db16:	f107 0310 	add.w	r3, r7, #16
 801db1a:	61fb      	str	r3, [r7, #28]
 801db1c:	e090      	b.n	801dc40 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	681a      	ldr	r2, [r3, #0]
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	3304      	adds	r3, #4
 801db26:	681b      	ldr	r3, [r3, #0]
 801db28:	405a      	eors	r2, r3
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	3308      	adds	r3, #8
 801db2e:	681b      	ldr	r3, [r3, #0]
 801db30:	4013      	ands	r3, r2
 801db32:	2b00      	cmp	r3, #0
 801db34:	d012      	beq.n	801db5c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801db3c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801db40:	4293      	cmp	r3, r2
 801db42:	d00b      	beq.n	801db5c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	330c      	adds	r3, #12
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d003      	beq.n	801db56 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	330c      	adds	r3, #12
 801db52:	61bb      	str	r3, [r7, #24]
 801db54:	e002      	b.n	801db5c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801db56:	f06f 0303 	mvn.w	r3, #3
 801db5a:	e07d      	b.n	801dc58 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801db5c:	4b46      	ldr	r3, [pc, #280]	; (801dc78 <etharp_output+0x1fc>)
 801db5e:	781b      	ldrb	r3, [r3, #0]
 801db60:	4619      	mov	r1, r3
 801db62:	4a46      	ldr	r2, [pc, #280]	; (801dc7c <etharp_output+0x200>)
 801db64:	460b      	mov	r3, r1
 801db66:	005b      	lsls	r3, r3, #1
 801db68:	440b      	add	r3, r1
 801db6a:	00db      	lsls	r3, r3, #3
 801db6c:	4413      	add	r3, r2
 801db6e:	3314      	adds	r3, #20
 801db70:	781b      	ldrb	r3, [r3, #0]
 801db72:	2b01      	cmp	r3, #1
 801db74:	d925      	bls.n	801dbc2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801db76:	4b40      	ldr	r3, [pc, #256]	; (801dc78 <etharp_output+0x1fc>)
 801db78:	781b      	ldrb	r3, [r3, #0]
 801db7a:	4619      	mov	r1, r3
 801db7c:	4a3f      	ldr	r2, [pc, #252]	; (801dc7c <etharp_output+0x200>)
 801db7e:	460b      	mov	r3, r1
 801db80:	005b      	lsls	r3, r3, #1
 801db82:	440b      	add	r3, r1
 801db84:	00db      	lsls	r3, r3, #3
 801db86:	4413      	add	r3, r2
 801db88:	3308      	adds	r3, #8
 801db8a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801db8c:	68fa      	ldr	r2, [r7, #12]
 801db8e:	429a      	cmp	r2, r3
 801db90:	d117      	bne.n	801dbc2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801db92:	69bb      	ldr	r3, [r7, #24]
 801db94:	681a      	ldr	r2, [r3, #0]
 801db96:	4b38      	ldr	r3, [pc, #224]	; (801dc78 <etharp_output+0x1fc>)
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	4618      	mov	r0, r3
 801db9c:	4937      	ldr	r1, [pc, #220]	; (801dc7c <etharp_output+0x200>)
 801db9e:	4603      	mov	r3, r0
 801dba0:	005b      	lsls	r3, r3, #1
 801dba2:	4403      	add	r3, r0
 801dba4:	00db      	lsls	r3, r3, #3
 801dba6:	440b      	add	r3, r1
 801dba8:	3304      	adds	r3, #4
 801dbaa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801dbac:	429a      	cmp	r2, r3
 801dbae:	d108      	bne.n	801dbc2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dbb0:	4b31      	ldr	r3, [pc, #196]	; (801dc78 <etharp_output+0x1fc>)
 801dbb2:	781b      	ldrb	r3, [r3, #0]
 801dbb4:	461a      	mov	r2, r3
 801dbb6:	68b9      	ldr	r1, [r7, #8]
 801dbb8:	68f8      	ldr	r0, [r7, #12]
 801dbba:	f7ff fec5 	bl	801d948 <etharp_output_to_arp_index>
 801dbbe:	4603      	mov	r3, r0
 801dbc0:	e04a      	b.n	801dc58 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	75fb      	strb	r3, [r7, #23]
 801dbc6:	e031      	b.n	801dc2c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dbc8:	7dfa      	ldrb	r2, [r7, #23]
 801dbca:	492c      	ldr	r1, [pc, #176]	; (801dc7c <etharp_output+0x200>)
 801dbcc:	4613      	mov	r3, r2
 801dbce:	005b      	lsls	r3, r3, #1
 801dbd0:	4413      	add	r3, r2
 801dbd2:	00db      	lsls	r3, r3, #3
 801dbd4:	440b      	add	r3, r1
 801dbd6:	3314      	adds	r3, #20
 801dbd8:	781b      	ldrb	r3, [r3, #0]
 801dbda:	2b01      	cmp	r3, #1
 801dbdc:	d923      	bls.n	801dc26 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801dbde:	7dfa      	ldrb	r2, [r7, #23]
 801dbe0:	4926      	ldr	r1, [pc, #152]	; (801dc7c <etharp_output+0x200>)
 801dbe2:	4613      	mov	r3, r2
 801dbe4:	005b      	lsls	r3, r3, #1
 801dbe6:	4413      	add	r3, r2
 801dbe8:	00db      	lsls	r3, r3, #3
 801dbea:	440b      	add	r3, r1
 801dbec:	3308      	adds	r3, #8
 801dbee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dbf0:	68fa      	ldr	r2, [r7, #12]
 801dbf2:	429a      	cmp	r2, r3
 801dbf4:	d117      	bne.n	801dc26 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801dbf6:	69bb      	ldr	r3, [r7, #24]
 801dbf8:	6819      	ldr	r1, [r3, #0]
 801dbfa:	7dfa      	ldrb	r2, [r7, #23]
 801dbfc:	481f      	ldr	r0, [pc, #124]	; (801dc7c <etharp_output+0x200>)
 801dbfe:	4613      	mov	r3, r2
 801dc00:	005b      	lsls	r3, r3, #1
 801dc02:	4413      	add	r3, r2
 801dc04:	00db      	lsls	r3, r3, #3
 801dc06:	4403      	add	r3, r0
 801dc08:	3304      	adds	r3, #4
 801dc0a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801dc0c:	4299      	cmp	r1, r3
 801dc0e:	d10a      	bne.n	801dc26 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801dc10:	4a19      	ldr	r2, [pc, #100]	; (801dc78 <etharp_output+0x1fc>)
 801dc12:	7dfb      	ldrb	r3, [r7, #23]
 801dc14:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801dc16:	7dfb      	ldrb	r3, [r7, #23]
 801dc18:	461a      	mov	r2, r3
 801dc1a:	68b9      	ldr	r1, [r7, #8]
 801dc1c:	68f8      	ldr	r0, [r7, #12]
 801dc1e:	f7ff fe93 	bl	801d948 <etharp_output_to_arp_index>
 801dc22:	4603      	mov	r3, r0
 801dc24:	e018      	b.n	801dc58 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dc26:	7dfb      	ldrb	r3, [r7, #23]
 801dc28:	3301      	adds	r3, #1
 801dc2a:	75fb      	strb	r3, [r7, #23]
 801dc2c:	7dfb      	ldrb	r3, [r7, #23]
 801dc2e:	2b09      	cmp	r3, #9
 801dc30:	d9ca      	bls.n	801dbc8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801dc32:	68ba      	ldr	r2, [r7, #8]
 801dc34:	69b9      	ldr	r1, [r7, #24]
 801dc36:	68f8      	ldr	r0, [r7, #12]
 801dc38:	f000 f822 	bl	801dc80 <etharp_query>
 801dc3c:	4603      	mov	r3, r0
 801dc3e:	e00b      	b.n	801dc58 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801dc46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dc4a:	9300      	str	r3, [sp, #0]
 801dc4c:	69fb      	ldr	r3, [r7, #28]
 801dc4e:	68b9      	ldr	r1, [r7, #8]
 801dc50:	68f8      	ldr	r0, [r7, #12]
 801dc52:	f001 fd89 	bl	801f768 <ethernet_output>
 801dc56:	4603      	mov	r3, r0
}
 801dc58:	4618      	mov	r0, r3
 801dc5a:	3720      	adds	r7, #32
 801dc5c:	46bd      	mov	sp, r7
 801dc5e:	bd80      	pop	{r7, pc}
 801dc60:	08023e10 	.word	0x08023e10
 801dc64:	08023f60 	.word	0x08023f60
 801dc68:	08023e88 	.word	0x08023e88
 801dc6c:	08023fb0 	.word	0x08023fb0
 801dc70:	08023f50 	.word	0x08023f50
 801dc74:	08024698 	.word	0x08024698
 801dc78:	2400ccd4 	.word	0x2400ccd4
 801dc7c:	2400cbe4 	.word	0x2400cbe4

0801dc80 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801dc80:	b580      	push	{r7, lr}
 801dc82:	b08c      	sub	sp, #48	; 0x30
 801dc84:	af02      	add	r7, sp, #8
 801dc86:	60f8      	str	r0, [r7, #12]
 801dc88:	60b9      	str	r1, [r7, #8]
 801dc8a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	332a      	adds	r3, #42	; 0x2a
 801dc90:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801dc92:	23ff      	movs	r3, #255	; 0xff
 801dc94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801dc98:	2300      	movs	r3, #0
 801dc9a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dc9c:	68bb      	ldr	r3, [r7, #8]
 801dc9e:	681b      	ldr	r3, [r3, #0]
 801dca0:	68f9      	ldr	r1, [r7, #12]
 801dca2:	4618      	mov	r0, r3
 801dca4:	f000 fe52 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801dca8:	4603      	mov	r3, r0
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d10c      	bne.n	801dcc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dcae:	68bb      	ldr	r3, [r7, #8]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dcb6:	2be0      	cmp	r3, #224	; 0xe0
 801dcb8:	d006      	beq.n	801dcc8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dcba:	68bb      	ldr	r3, [r7, #8]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d003      	beq.n	801dcc8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801dcc0:	68bb      	ldr	r3, [r7, #8]
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	2b00      	cmp	r3, #0
 801dcc6:	d102      	bne.n	801dcce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801dcc8:	f06f 030f 	mvn.w	r3, #15
 801dccc:	e101      	b.n	801ded2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801dcce:	68fa      	ldr	r2, [r7, #12]
 801dcd0:	2101      	movs	r1, #1
 801dcd2:	68b8      	ldr	r0, [r7, #8]
 801dcd4:	f7ff fb5c 	bl	801d390 <etharp_find_entry>
 801dcd8:	4603      	mov	r3, r0
 801dcda:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801dcdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	da02      	bge.n	801dcea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801dce4:	8a7b      	ldrh	r3, [r7, #18]
 801dce6:	b25b      	sxtb	r3, r3
 801dce8:	e0f3      	b.n	801ded2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801dcea:	8a7b      	ldrh	r3, [r7, #18]
 801dcec:	2b7e      	cmp	r3, #126	; 0x7e
 801dcee:	d906      	bls.n	801dcfe <etharp_query+0x7e>
 801dcf0:	4b7a      	ldr	r3, [pc, #488]	; (801dedc <etharp_query+0x25c>)
 801dcf2:	f240 32c1 	movw	r2, #961	; 0x3c1
 801dcf6:	497a      	ldr	r1, [pc, #488]	; (801dee0 <etharp_query+0x260>)
 801dcf8:	487a      	ldr	r0, [pc, #488]	; (801dee4 <etharp_query+0x264>)
 801dcfa:	f002 fd35 	bl	8020768 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801dcfe:	8a7b      	ldrh	r3, [r7, #18]
 801dd00:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801dd02:	7c7a      	ldrb	r2, [r7, #17]
 801dd04:	4978      	ldr	r1, [pc, #480]	; (801dee8 <etharp_query+0x268>)
 801dd06:	4613      	mov	r3, r2
 801dd08:	005b      	lsls	r3, r3, #1
 801dd0a:	4413      	add	r3, r2
 801dd0c:	00db      	lsls	r3, r3, #3
 801dd0e:	440b      	add	r3, r1
 801dd10:	3314      	adds	r3, #20
 801dd12:	781b      	ldrb	r3, [r3, #0]
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d115      	bne.n	801dd44 <etharp_query+0xc4>
    is_new_entry = 1;
 801dd18:	2301      	movs	r3, #1
 801dd1a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801dd1c:	7c7a      	ldrb	r2, [r7, #17]
 801dd1e:	4972      	ldr	r1, [pc, #456]	; (801dee8 <etharp_query+0x268>)
 801dd20:	4613      	mov	r3, r2
 801dd22:	005b      	lsls	r3, r3, #1
 801dd24:	4413      	add	r3, r2
 801dd26:	00db      	lsls	r3, r3, #3
 801dd28:	440b      	add	r3, r1
 801dd2a:	3314      	adds	r3, #20
 801dd2c:	2201      	movs	r2, #1
 801dd2e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801dd30:	7c7a      	ldrb	r2, [r7, #17]
 801dd32:	496d      	ldr	r1, [pc, #436]	; (801dee8 <etharp_query+0x268>)
 801dd34:	4613      	mov	r3, r2
 801dd36:	005b      	lsls	r3, r3, #1
 801dd38:	4413      	add	r3, r2
 801dd3a:	00db      	lsls	r3, r3, #3
 801dd3c:	440b      	add	r3, r1
 801dd3e:	3308      	adds	r3, #8
 801dd40:	68fa      	ldr	r2, [r7, #12]
 801dd42:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801dd44:	7c7a      	ldrb	r2, [r7, #17]
 801dd46:	4968      	ldr	r1, [pc, #416]	; (801dee8 <etharp_query+0x268>)
 801dd48:	4613      	mov	r3, r2
 801dd4a:	005b      	lsls	r3, r3, #1
 801dd4c:	4413      	add	r3, r2
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	440b      	add	r3, r1
 801dd52:	3314      	adds	r3, #20
 801dd54:	781b      	ldrb	r3, [r3, #0]
 801dd56:	2b01      	cmp	r3, #1
 801dd58:	d011      	beq.n	801dd7e <etharp_query+0xfe>
 801dd5a:	7c7a      	ldrb	r2, [r7, #17]
 801dd5c:	4962      	ldr	r1, [pc, #392]	; (801dee8 <etharp_query+0x268>)
 801dd5e:	4613      	mov	r3, r2
 801dd60:	005b      	lsls	r3, r3, #1
 801dd62:	4413      	add	r3, r2
 801dd64:	00db      	lsls	r3, r3, #3
 801dd66:	440b      	add	r3, r1
 801dd68:	3314      	adds	r3, #20
 801dd6a:	781b      	ldrb	r3, [r3, #0]
 801dd6c:	2b01      	cmp	r3, #1
 801dd6e:	d806      	bhi.n	801dd7e <etharp_query+0xfe>
 801dd70:	4b5a      	ldr	r3, [pc, #360]	; (801dedc <etharp_query+0x25c>)
 801dd72:	f240 32cd 	movw	r2, #973	; 0x3cd
 801dd76:	495d      	ldr	r1, [pc, #372]	; (801deec <etharp_query+0x26c>)
 801dd78:	485a      	ldr	r0, [pc, #360]	; (801dee4 <etharp_query+0x264>)
 801dd7a:	f002 fcf5 	bl	8020768 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801dd7e:	6a3b      	ldr	r3, [r7, #32]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d102      	bne.n	801dd8a <etharp_query+0x10a>
 801dd84:	687b      	ldr	r3, [r7, #4]
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d10c      	bne.n	801dda4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801dd8a:	68b9      	ldr	r1, [r7, #8]
 801dd8c:	68f8      	ldr	r0, [r7, #12]
 801dd8e:	f000 f963 	bl	801e058 <etharp_request>
 801dd92:	4603      	mov	r3, r0
 801dd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	2b00      	cmp	r3, #0
 801dd9c:	d102      	bne.n	801dda4 <etharp_query+0x124>
      return result;
 801dd9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801dda2:	e096      	b.n	801ded2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d106      	bne.n	801ddb8 <etharp_query+0x138>
 801ddaa:	4b4c      	ldr	r3, [pc, #304]	; (801dedc <etharp_query+0x25c>)
 801ddac:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ddb0:	494f      	ldr	r1, [pc, #316]	; (801def0 <etharp_query+0x270>)
 801ddb2:	484c      	ldr	r0, [pc, #304]	; (801dee4 <etharp_query+0x264>)
 801ddb4:	f002 fcd8 	bl	8020768 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ddb8:	7c7a      	ldrb	r2, [r7, #17]
 801ddba:	494b      	ldr	r1, [pc, #300]	; (801dee8 <etharp_query+0x268>)
 801ddbc:	4613      	mov	r3, r2
 801ddbe:	005b      	lsls	r3, r3, #1
 801ddc0:	4413      	add	r3, r2
 801ddc2:	00db      	lsls	r3, r3, #3
 801ddc4:	440b      	add	r3, r1
 801ddc6:	3314      	adds	r3, #20
 801ddc8:	781b      	ldrb	r3, [r3, #0]
 801ddca:	2b01      	cmp	r3, #1
 801ddcc:	d917      	bls.n	801ddfe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ddce:	4a49      	ldr	r2, [pc, #292]	; (801def4 <etharp_query+0x274>)
 801ddd0:	7c7b      	ldrb	r3, [r7, #17]
 801ddd2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ddd4:	7c7a      	ldrb	r2, [r7, #17]
 801ddd6:	4613      	mov	r3, r2
 801ddd8:	005b      	lsls	r3, r3, #1
 801ddda:	4413      	add	r3, r2
 801dddc:	00db      	lsls	r3, r3, #3
 801ddde:	3308      	adds	r3, #8
 801dde0:	4a41      	ldr	r2, [pc, #260]	; (801dee8 <etharp_query+0x268>)
 801dde2:	4413      	add	r3, r2
 801dde4:	3304      	adds	r3, #4
 801dde6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ddea:	9200      	str	r2, [sp, #0]
 801ddec:	697a      	ldr	r2, [r7, #20]
 801ddee:	6879      	ldr	r1, [r7, #4]
 801ddf0:	68f8      	ldr	r0, [r7, #12]
 801ddf2:	f001 fcb9 	bl	801f768 <ethernet_output>
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ddfc:	e067      	b.n	801dece <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ddfe:	7c7a      	ldrb	r2, [r7, #17]
 801de00:	4939      	ldr	r1, [pc, #228]	; (801dee8 <etharp_query+0x268>)
 801de02:	4613      	mov	r3, r2
 801de04:	005b      	lsls	r3, r3, #1
 801de06:	4413      	add	r3, r2
 801de08:	00db      	lsls	r3, r3, #3
 801de0a:	440b      	add	r3, r1
 801de0c:	3314      	adds	r3, #20
 801de0e:	781b      	ldrb	r3, [r3, #0]
 801de10:	2b01      	cmp	r3, #1
 801de12:	d15c      	bne.n	801dece <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801de14:	2300      	movs	r3, #0
 801de16:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801de1c:	e01c      	b.n	801de58 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801de1e:	69fb      	ldr	r3, [r7, #28]
 801de20:	895a      	ldrh	r2, [r3, #10]
 801de22:	69fb      	ldr	r3, [r7, #28]
 801de24:	891b      	ldrh	r3, [r3, #8]
 801de26:	429a      	cmp	r2, r3
 801de28:	d10a      	bne.n	801de40 <etharp_query+0x1c0>
 801de2a:	69fb      	ldr	r3, [r7, #28]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d006      	beq.n	801de40 <etharp_query+0x1c0>
 801de32:	4b2a      	ldr	r3, [pc, #168]	; (801dedc <etharp_query+0x25c>)
 801de34:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801de38:	492f      	ldr	r1, [pc, #188]	; (801def8 <etharp_query+0x278>)
 801de3a:	482a      	ldr	r0, [pc, #168]	; (801dee4 <etharp_query+0x264>)
 801de3c:	f002 fc94 	bl	8020768 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801de40:	69fb      	ldr	r3, [r7, #28]
 801de42:	7b1b      	ldrb	r3, [r3, #12]
 801de44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d002      	beq.n	801de52 <etharp_query+0x1d2>
        copy_needed = 1;
 801de4c:	2301      	movs	r3, #1
 801de4e:	61bb      	str	r3, [r7, #24]
        break;
 801de50:	e005      	b.n	801de5e <etharp_query+0x1de>
      }
      p = p->next;
 801de52:	69fb      	ldr	r3, [r7, #28]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	61fb      	str	r3, [r7, #28]
    while (p) {
 801de58:	69fb      	ldr	r3, [r7, #28]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d1df      	bne.n	801de1e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801de5e:	69bb      	ldr	r3, [r7, #24]
 801de60:	2b00      	cmp	r3, #0
 801de62:	d007      	beq.n	801de74 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801de64:	687a      	ldr	r2, [r7, #4]
 801de66:	f44f 7120 	mov.w	r1, #640	; 0x280
 801de6a:	200e      	movs	r0, #14
 801de6c:	f7f7 fb5e 	bl	801552c <pbuf_clone>
 801de70:	61f8      	str	r0, [r7, #28]
 801de72:	e004      	b.n	801de7e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801de78:	69f8      	ldr	r0, [r7, #28]
 801de7a:	f7f7 f985 	bl	8015188 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801de7e:	69fb      	ldr	r3, [r7, #28]
 801de80:	2b00      	cmp	r3, #0
 801de82:	d021      	beq.n	801dec8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801de84:	7c7a      	ldrb	r2, [r7, #17]
 801de86:	4918      	ldr	r1, [pc, #96]	; (801dee8 <etharp_query+0x268>)
 801de88:	4613      	mov	r3, r2
 801de8a:	005b      	lsls	r3, r3, #1
 801de8c:	4413      	add	r3, r2
 801de8e:	00db      	lsls	r3, r3, #3
 801de90:	440b      	add	r3, r1
 801de92:	681b      	ldr	r3, [r3, #0]
 801de94:	2b00      	cmp	r3, #0
 801de96:	d00a      	beq.n	801deae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801de98:	7c7a      	ldrb	r2, [r7, #17]
 801de9a:	4913      	ldr	r1, [pc, #76]	; (801dee8 <etharp_query+0x268>)
 801de9c:	4613      	mov	r3, r2
 801de9e:	005b      	lsls	r3, r3, #1
 801dea0:	4413      	add	r3, r2
 801dea2:	00db      	lsls	r3, r3, #3
 801dea4:	440b      	add	r3, r1
 801dea6:	681b      	ldr	r3, [r3, #0]
 801dea8:	4618      	mov	r0, r3
 801deaa:	f7f7 f8c7 	bl	801503c <pbuf_free>
      }
      arp_table[i].q = p;
 801deae:	7c7a      	ldrb	r2, [r7, #17]
 801deb0:	490d      	ldr	r1, [pc, #52]	; (801dee8 <etharp_query+0x268>)
 801deb2:	4613      	mov	r3, r2
 801deb4:	005b      	lsls	r3, r3, #1
 801deb6:	4413      	add	r3, r2
 801deb8:	00db      	lsls	r3, r3, #3
 801deba:	440b      	add	r3, r1
 801debc:	69fa      	ldr	r2, [r7, #28]
 801debe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801dec0:	2300      	movs	r3, #0
 801dec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801dec6:	e002      	b.n	801dece <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801dec8:	23ff      	movs	r3, #255	; 0xff
 801deca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801dece:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ded2:	4618      	mov	r0, r3
 801ded4:	3728      	adds	r7, #40	; 0x28
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bd80      	pop	{r7, pc}
 801deda:	bf00      	nop
 801dedc:	08023e10 	.word	0x08023e10
 801dee0:	08023fbc 	.word	0x08023fbc
 801dee4:	08023e88 	.word	0x08023e88
 801dee8:	2400cbe4 	.word	0x2400cbe4
 801deec:	08023fcc 	.word	0x08023fcc
 801def0:	08023fb0 	.word	0x08023fb0
 801def4:	2400ccd4 	.word	0x2400ccd4
 801def8:	08023ff4 	.word	0x08023ff4

0801defc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801defc:	b580      	push	{r7, lr}
 801defe:	b08a      	sub	sp, #40	; 0x28
 801df00:	af02      	add	r7, sp, #8
 801df02:	60f8      	str	r0, [r7, #12]
 801df04:	60b9      	str	r1, [r7, #8]
 801df06:	607a      	str	r2, [r7, #4]
 801df08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801df0a:	2300      	movs	r3, #0
 801df0c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	2b00      	cmp	r3, #0
 801df12:	d106      	bne.n	801df22 <etharp_raw+0x26>
 801df14:	4b3a      	ldr	r3, [pc, #232]	; (801e000 <etharp_raw+0x104>)
 801df16:	f240 4257 	movw	r2, #1111	; 0x457
 801df1a:	493a      	ldr	r1, [pc, #232]	; (801e004 <etharp_raw+0x108>)
 801df1c:	483a      	ldr	r0, [pc, #232]	; (801e008 <etharp_raw+0x10c>)
 801df1e:	f002 fc23 	bl	8020768 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801df22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801df26:	211c      	movs	r1, #28
 801df28:	200e      	movs	r0, #14
 801df2a:	f7f6 fda3 	bl	8014a74 <pbuf_alloc>
 801df2e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801df30:	69bb      	ldr	r3, [r7, #24]
 801df32:	2b00      	cmp	r3, #0
 801df34:	d102      	bne.n	801df3c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801df36:	f04f 33ff 	mov.w	r3, #4294967295
 801df3a:	e05d      	b.n	801dff8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801df3c:	69bb      	ldr	r3, [r7, #24]
 801df3e:	895b      	ldrh	r3, [r3, #10]
 801df40:	2b1b      	cmp	r3, #27
 801df42:	d806      	bhi.n	801df52 <etharp_raw+0x56>
 801df44:	4b2e      	ldr	r3, [pc, #184]	; (801e000 <etharp_raw+0x104>)
 801df46:	f240 4262 	movw	r2, #1122	; 0x462
 801df4a:	4930      	ldr	r1, [pc, #192]	; (801e00c <etharp_raw+0x110>)
 801df4c:	482e      	ldr	r0, [pc, #184]	; (801e008 <etharp_raw+0x10c>)
 801df4e:	f002 fc0b 	bl	8020768 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801df52:	69bb      	ldr	r3, [r7, #24]
 801df54:	685b      	ldr	r3, [r3, #4]
 801df56:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801df58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801df5a:	4618      	mov	r0, r3
 801df5c:	f7f5 fbb8 	bl	80136d0 <lwip_htons>
 801df60:	4603      	mov	r3, r0
 801df62:	461a      	mov	r2, r3
 801df64:	697b      	ldr	r3, [r7, #20]
 801df66:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801df68:	68fb      	ldr	r3, [r7, #12]
 801df6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801df6e:	2b06      	cmp	r3, #6
 801df70:	d006      	beq.n	801df80 <etharp_raw+0x84>
 801df72:	4b23      	ldr	r3, [pc, #140]	; (801e000 <etharp_raw+0x104>)
 801df74:	f240 4269 	movw	r2, #1129	; 0x469
 801df78:	4925      	ldr	r1, [pc, #148]	; (801e010 <etharp_raw+0x114>)
 801df7a:	4823      	ldr	r0, [pc, #140]	; (801e008 <etharp_raw+0x10c>)
 801df7c:	f002 fbf4 	bl	8020768 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	3308      	adds	r3, #8
 801df84:	2206      	movs	r2, #6
 801df86:	6839      	ldr	r1, [r7, #0]
 801df88:	4618      	mov	r0, r3
 801df8a:	f002 fb42 	bl	8020612 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801df8e:	697b      	ldr	r3, [r7, #20]
 801df90:	3312      	adds	r3, #18
 801df92:	2206      	movs	r2, #6
 801df94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801df96:	4618      	mov	r0, r3
 801df98:	f002 fb3b 	bl	8020612 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	330e      	adds	r3, #14
 801dfa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfa2:	6812      	ldr	r2, [r2, #0]
 801dfa4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801dfa6:	697b      	ldr	r3, [r7, #20]
 801dfa8:	3318      	adds	r3, #24
 801dfaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfac:	6812      	ldr	r2, [r2, #0]
 801dfae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801dfb0:	697b      	ldr	r3, [r7, #20]
 801dfb2:	2200      	movs	r2, #0
 801dfb4:	701a      	strb	r2, [r3, #0]
 801dfb6:	2200      	movs	r2, #0
 801dfb8:	f042 0201 	orr.w	r2, r2, #1
 801dfbc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801dfbe:	697b      	ldr	r3, [r7, #20]
 801dfc0:	2200      	movs	r2, #0
 801dfc2:	f042 0208 	orr.w	r2, r2, #8
 801dfc6:	709a      	strb	r2, [r3, #2]
 801dfc8:	2200      	movs	r2, #0
 801dfca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	2206      	movs	r2, #6
 801dfd0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801dfd2:	697b      	ldr	r3, [r7, #20]
 801dfd4:	2204      	movs	r2, #4
 801dfd6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801dfd8:	f640 0306 	movw	r3, #2054	; 0x806
 801dfdc:	9300      	str	r3, [sp, #0]
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	68ba      	ldr	r2, [r7, #8]
 801dfe2:	69b9      	ldr	r1, [r7, #24]
 801dfe4:	68f8      	ldr	r0, [r7, #12]
 801dfe6:	f001 fbbf 	bl	801f768 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801dfea:	69b8      	ldr	r0, [r7, #24]
 801dfec:	f7f7 f826 	bl	801503c <pbuf_free>
  p = NULL;
 801dff0:	2300      	movs	r3, #0
 801dff2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801dff4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801dff8:	4618      	mov	r0, r3
 801dffa:	3720      	adds	r7, #32
 801dffc:	46bd      	mov	sp, r7
 801dffe:	bd80      	pop	{r7, pc}
 801e000:	08023e10 	.word	0x08023e10
 801e004:	08023f60 	.word	0x08023f60
 801e008:	08023e88 	.word	0x08023e88
 801e00c:	08024010 	.word	0x08024010
 801e010:	08024044 	.word	0x08024044

0801e014 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e014:	b580      	push	{r7, lr}
 801e016:	b088      	sub	sp, #32
 801e018:	af04      	add	r7, sp, #16
 801e01a:	60f8      	str	r0, [r7, #12]
 801e01c:	60b9      	str	r1, [r7, #8]
 801e01e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e02c:	68fb      	ldr	r3, [r7, #12]
 801e02e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e030:	2201      	movs	r2, #1
 801e032:	9203      	str	r2, [sp, #12]
 801e034:	68ba      	ldr	r2, [r7, #8]
 801e036:	9202      	str	r2, [sp, #8]
 801e038:	4a06      	ldr	r2, [pc, #24]	; (801e054 <etharp_request_dst+0x40>)
 801e03a:	9201      	str	r2, [sp, #4]
 801e03c:	9300      	str	r3, [sp, #0]
 801e03e:	4603      	mov	r3, r0
 801e040:	687a      	ldr	r2, [r7, #4]
 801e042:	68f8      	ldr	r0, [r7, #12]
 801e044:	f7ff ff5a 	bl	801defc <etharp_raw>
 801e048:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e04a:	4618      	mov	r0, r3
 801e04c:	3710      	adds	r7, #16
 801e04e:	46bd      	mov	sp, r7
 801e050:	bd80      	pop	{r7, pc}
 801e052:	bf00      	nop
 801e054:	080246a0 	.word	0x080246a0

0801e058 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b082      	sub	sp, #8
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
 801e060:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e062:	4a05      	ldr	r2, [pc, #20]	; (801e078 <etharp_request+0x20>)
 801e064:	6839      	ldr	r1, [r7, #0]
 801e066:	6878      	ldr	r0, [r7, #4]
 801e068:	f7ff ffd4 	bl	801e014 <etharp_request_dst>
 801e06c:	4603      	mov	r3, r0
}
 801e06e:	4618      	mov	r0, r3
 801e070:	3708      	adds	r7, #8
 801e072:	46bd      	mov	sp, r7
 801e074:	bd80      	pop	{r7, pc}
 801e076:	bf00      	nop
 801e078:	08024698 	.word	0x08024698

0801e07c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b08e      	sub	sp, #56	; 0x38
 801e080:	af04      	add	r7, sp, #16
 801e082:	6078      	str	r0, [r7, #4]
 801e084:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e086:	4b87      	ldr	r3, [pc, #540]	; (801e2a4 <icmp_input+0x228>)
 801e088:	689b      	ldr	r3, [r3, #8]
 801e08a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e08e:	781b      	ldrb	r3, [r3, #0]
 801e090:	f003 030f 	and.w	r3, r3, #15
 801e094:	b2db      	uxtb	r3, r3
 801e096:	009b      	lsls	r3, r3, #2
 801e098:	b2db      	uxtb	r3, r3
 801e09a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801e09c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e09e:	2b13      	cmp	r3, #19
 801e0a0:	f240 80e8 	bls.w	801e274 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	895b      	ldrh	r3, [r3, #10]
 801e0a8:	2b03      	cmp	r3, #3
 801e0aa:	f240 80e5 	bls.w	801e278 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	685b      	ldr	r3, [r3, #4]
 801e0b2:	781b      	ldrb	r3, [r3, #0]
 801e0b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e0b8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	f000 80d2 	beq.w	801e266 <icmp_input+0x1ea>
 801e0c2:	2b08      	cmp	r3, #8
 801e0c4:	f040 80d2 	bne.w	801e26c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e0c8:	4b77      	ldr	r3, [pc, #476]	; (801e2a8 <icmp_input+0x22c>)
 801e0ca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e0cc:	4b75      	ldr	r3, [pc, #468]	; (801e2a4 <icmp_input+0x228>)
 801e0ce:	695b      	ldr	r3, [r3, #20]
 801e0d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e0d4:	2be0      	cmp	r3, #224	; 0xe0
 801e0d6:	f000 80d6 	beq.w	801e286 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e0da:	4b72      	ldr	r3, [pc, #456]	; (801e2a4 <icmp_input+0x228>)
 801e0dc:	695b      	ldr	r3, [r3, #20]
 801e0de:	4a71      	ldr	r2, [pc, #452]	; (801e2a4 <icmp_input+0x228>)
 801e0e0:	6812      	ldr	r2, [r2, #0]
 801e0e2:	4611      	mov	r1, r2
 801e0e4:	4618      	mov	r0, r3
 801e0e6:	f000 fc31 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801e0ea:	4603      	mov	r3, r0
 801e0ec:	2b00      	cmp	r3, #0
 801e0ee:	f040 80cc 	bne.w	801e28a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	891b      	ldrh	r3, [r3, #8]
 801e0f6:	2b07      	cmp	r3, #7
 801e0f8:	f240 80c0 	bls.w	801e27c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801e0fc:	6878      	ldr	r0, [r7, #4]
 801e0fe:	f7f5 fb84 	bl	801380a <inet_chksum_pbuf>
 801e102:	4603      	mov	r3, r0
 801e104:	2b00      	cmp	r3, #0
 801e106:	d003      	beq.n	801e110 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801e108:	6878      	ldr	r0, [r7, #4]
 801e10a:	f7f6 ff97 	bl	801503c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801e10e:	e0c5      	b.n	801e29c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e110:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e112:	330e      	adds	r3, #14
 801e114:	4619      	mov	r1, r3
 801e116:	6878      	ldr	r0, [r7, #4]
 801e118:	f7f6 fefa 	bl	8014f10 <pbuf_add_header>
 801e11c:	4603      	mov	r3, r0
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d04b      	beq.n	801e1ba <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	891a      	ldrh	r2, [r3, #8]
 801e126:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e128:	4413      	add	r3, r2
 801e12a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	891b      	ldrh	r3, [r3, #8]
 801e130:	8b7a      	ldrh	r2, [r7, #26]
 801e132:	429a      	cmp	r2, r3
 801e134:	f0c0 80ab 	bcc.w	801e28e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e138:	8b7b      	ldrh	r3, [r7, #26]
 801e13a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e13e:	4619      	mov	r1, r3
 801e140:	200e      	movs	r0, #14
 801e142:	f7f6 fc97 	bl	8014a74 <pbuf_alloc>
 801e146:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e148:	697b      	ldr	r3, [r7, #20]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	f000 80a1 	beq.w	801e292 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e150:	697b      	ldr	r3, [r7, #20]
 801e152:	895b      	ldrh	r3, [r3, #10]
 801e154:	461a      	mov	r2, r3
 801e156:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e158:	3308      	adds	r3, #8
 801e15a:	429a      	cmp	r2, r3
 801e15c:	d203      	bcs.n	801e166 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e15e:	6978      	ldr	r0, [r7, #20]
 801e160:	f7f6 ff6c 	bl	801503c <pbuf_free>
          goto icmperr;
 801e164:	e096      	b.n	801e294 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e166:	697b      	ldr	r3, [r7, #20]
 801e168:	685b      	ldr	r3, [r3, #4]
 801e16a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e16e:	4618      	mov	r0, r3
 801e170:	f002 fa4f 	bl	8020612 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e176:	4619      	mov	r1, r3
 801e178:	6978      	ldr	r0, [r7, #20]
 801e17a:	f7f6 fed9 	bl	8014f30 <pbuf_remove_header>
 801e17e:	4603      	mov	r3, r0
 801e180:	2b00      	cmp	r3, #0
 801e182:	d009      	beq.n	801e198 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e184:	4b49      	ldr	r3, [pc, #292]	; (801e2ac <icmp_input+0x230>)
 801e186:	22b6      	movs	r2, #182	; 0xb6
 801e188:	4949      	ldr	r1, [pc, #292]	; (801e2b0 <icmp_input+0x234>)
 801e18a:	484a      	ldr	r0, [pc, #296]	; (801e2b4 <icmp_input+0x238>)
 801e18c:	f002 faec 	bl	8020768 <iprintf>
          pbuf_free(r);
 801e190:	6978      	ldr	r0, [r7, #20]
 801e192:	f7f6 ff53 	bl	801503c <pbuf_free>
          goto icmperr;
 801e196:	e07d      	b.n	801e294 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e198:	6879      	ldr	r1, [r7, #4]
 801e19a:	6978      	ldr	r0, [r7, #20]
 801e19c:	f7f7 f882 	bl	80152a4 <pbuf_copy>
 801e1a0:	4603      	mov	r3, r0
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d003      	beq.n	801e1ae <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e1a6:	6978      	ldr	r0, [r7, #20]
 801e1a8:	f7f6 ff48 	bl	801503c <pbuf_free>
          goto icmperr;
 801e1ac:	e072      	b.n	801e294 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801e1ae:	6878      	ldr	r0, [r7, #4]
 801e1b0:	f7f6 ff44 	bl	801503c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e1b4:	697b      	ldr	r3, [r7, #20]
 801e1b6:	607b      	str	r3, [r7, #4]
 801e1b8:	e00f      	b.n	801e1da <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e1ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e1bc:	330e      	adds	r3, #14
 801e1be:	4619      	mov	r1, r3
 801e1c0:	6878      	ldr	r0, [r7, #4]
 801e1c2:	f7f6 feb5 	bl	8014f30 <pbuf_remove_header>
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d006      	beq.n	801e1da <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e1cc:	4b37      	ldr	r3, [pc, #220]	; (801e2ac <icmp_input+0x230>)
 801e1ce:	22c7      	movs	r2, #199	; 0xc7
 801e1d0:	4939      	ldr	r1, [pc, #228]	; (801e2b8 <icmp_input+0x23c>)
 801e1d2:	4838      	ldr	r0, [pc, #224]	; (801e2b4 <icmp_input+0x238>)
 801e1d4:	f002 fac8 	bl	8020768 <iprintf>
          goto icmperr;
 801e1d8:	e05c      	b.n	801e294 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	685b      	ldr	r3, [r3, #4]
 801e1de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e1e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e1e2:	4619      	mov	r1, r3
 801e1e4:	6878      	ldr	r0, [r7, #4]
 801e1e6:	f7f6 fe93 	bl	8014f10 <pbuf_add_header>
 801e1ea:	4603      	mov	r3, r0
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d13c      	bne.n	801e26a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	685b      	ldr	r3, [r3, #4]
 801e1f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e1f6:	69fb      	ldr	r3, [r7, #28]
 801e1f8:	681a      	ldr	r2, [r3, #0]
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e1fe:	4b29      	ldr	r3, [pc, #164]	; (801e2a4 <icmp_input+0x228>)
 801e200:	691a      	ldr	r2, [r3, #16]
 801e202:	68fb      	ldr	r3, [r7, #12]
 801e204:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e206:	693b      	ldr	r3, [r7, #16]
 801e208:	2200      	movs	r2, #0
 801e20a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801e20c:	693b      	ldr	r3, [r7, #16]
 801e20e:	885b      	ldrh	r3, [r3, #2]
 801e210:	b29b      	uxth	r3, r3
 801e212:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801e216:	4293      	cmp	r3, r2
 801e218:	d907      	bls.n	801e22a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801e21a:	693b      	ldr	r3, [r7, #16]
 801e21c:	885b      	ldrh	r3, [r3, #2]
 801e21e:	b29b      	uxth	r3, r3
 801e220:	3309      	adds	r3, #9
 801e222:	b29a      	uxth	r2, r3
 801e224:	693b      	ldr	r3, [r7, #16]
 801e226:	805a      	strh	r2, [r3, #2]
 801e228:	e006      	b.n	801e238 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801e22a:	693b      	ldr	r3, [r7, #16]
 801e22c:	885b      	ldrh	r3, [r3, #2]
 801e22e:	b29b      	uxth	r3, r3
 801e230:	3308      	adds	r3, #8
 801e232:	b29a      	uxth	r2, r3
 801e234:	693b      	ldr	r3, [r7, #16]
 801e236:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e238:	68fb      	ldr	r3, [r7, #12]
 801e23a:	22ff      	movs	r2, #255	; 0xff
 801e23c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	2200      	movs	r2, #0
 801e242:	729a      	strb	r2, [r3, #10]
 801e244:	2200      	movs	r2, #0
 801e246:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e248:	683b      	ldr	r3, [r7, #0]
 801e24a:	9302      	str	r3, [sp, #8]
 801e24c:	2301      	movs	r3, #1
 801e24e:	9301      	str	r3, [sp, #4]
 801e250:	2300      	movs	r3, #0
 801e252:	9300      	str	r3, [sp, #0]
 801e254:	23ff      	movs	r3, #255	; 0xff
 801e256:	2200      	movs	r2, #0
 801e258:	69f9      	ldr	r1, [r7, #28]
 801e25a:	6878      	ldr	r0, [r7, #4]
 801e25c:	f000 fa9e 	bl	801e79c <ip4_output_if>
 801e260:	4603      	mov	r3, r0
 801e262:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e264:	e001      	b.n	801e26a <icmp_input+0x1ee>
      break;
 801e266:	bf00      	nop
 801e268:	e000      	b.n	801e26c <icmp_input+0x1f0>
      break;
 801e26a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e26c:	6878      	ldr	r0, [r7, #4]
 801e26e:	f7f6 fee5 	bl	801503c <pbuf_free>
  return;
 801e272:	e013      	b.n	801e29c <icmp_input+0x220>
    goto lenerr;
 801e274:	bf00      	nop
 801e276:	e002      	b.n	801e27e <icmp_input+0x202>
    goto lenerr;
 801e278:	bf00      	nop
 801e27a:	e000      	b.n	801e27e <icmp_input+0x202>
        goto lenerr;
 801e27c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e27e:	6878      	ldr	r0, [r7, #4]
 801e280:	f7f6 fedc 	bl	801503c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e284:	e00a      	b.n	801e29c <icmp_input+0x220>
        goto icmperr;
 801e286:	bf00      	nop
 801e288:	e004      	b.n	801e294 <icmp_input+0x218>
        goto icmperr;
 801e28a:	bf00      	nop
 801e28c:	e002      	b.n	801e294 <icmp_input+0x218>
          goto icmperr;
 801e28e:	bf00      	nop
 801e290:	e000      	b.n	801e294 <icmp_input+0x218>
          goto icmperr;
 801e292:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e294:	6878      	ldr	r0, [r7, #4]
 801e296:	f7f6 fed1 	bl	801503c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e29a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e29c:	3728      	adds	r7, #40	; 0x28
 801e29e:	46bd      	mov	sp, r7
 801e2a0:	bd80      	pop	{r7, pc}
 801e2a2:	bf00      	nop
 801e2a4:	24009a30 	.word	0x24009a30
 801e2a8:	24009a44 	.word	0x24009a44
 801e2ac:	08024088 	.word	0x08024088
 801e2b0:	080240c0 	.word	0x080240c0
 801e2b4:	080240f8 	.word	0x080240f8
 801e2b8:	08024120 	.word	0x08024120

0801e2bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e2bc:	b580      	push	{r7, lr}
 801e2be:	b082      	sub	sp, #8
 801e2c0:	af00      	add	r7, sp, #0
 801e2c2:	6078      	str	r0, [r7, #4]
 801e2c4:	460b      	mov	r3, r1
 801e2c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e2c8:	78fb      	ldrb	r3, [r7, #3]
 801e2ca:	461a      	mov	r2, r3
 801e2cc:	2103      	movs	r1, #3
 801e2ce:	6878      	ldr	r0, [r7, #4]
 801e2d0:	f000 f814 	bl	801e2fc <icmp_send_response>
}
 801e2d4:	bf00      	nop
 801e2d6:	3708      	adds	r7, #8
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	bd80      	pop	{r7, pc}

0801e2dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e2dc:	b580      	push	{r7, lr}
 801e2de:	b082      	sub	sp, #8
 801e2e0:	af00      	add	r7, sp, #0
 801e2e2:	6078      	str	r0, [r7, #4]
 801e2e4:	460b      	mov	r3, r1
 801e2e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e2e8:	78fb      	ldrb	r3, [r7, #3]
 801e2ea:	461a      	mov	r2, r3
 801e2ec:	210b      	movs	r1, #11
 801e2ee:	6878      	ldr	r0, [r7, #4]
 801e2f0:	f000 f804 	bl	801e2fc <icmp_send_response>
}
 801e2f4:	bf00      	nop
 801e2f6:	3708      	adds	r7, #8
 801e2f8:	46bd      	mov	sp, r7
 801e2fa:	bd80      	pop	{r7, pc}

0801e2fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e2fc:	b580      	push	{r7, lr}
 801e2fe:	b08c      	sub	sp, #48	; 0x30
 801e300:	af04      	add	r7, sp, #16
 801e302:	6078      	str	r0, [r7, #4]
 801e304:	460b      	mov	r3, r1
 801e306:	70fb      	strb	r3, [r7, #3]
 801e308:	4613      	mov	r3, r2
 801e30a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e30c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e310:	2124      	movs	r1, #36	; 0x24
 801e312:	2022      	movs	r0, #34	; 0x22
 801e314:	f7f6 fbae 	bl	8014a74 <pbuf_alloc>
 801e318:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e31a:	69fb      	ldr	r3, [r7, #28]
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d056      	beq.n	801e3ce <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e320:	69fb      	ldr	r3, [r7, #28]
 801e322:	895b      	ldrh	r3, [r3, #10]
 801e324:	2b23      	cmp	r3, #35	; 0x23
 801e326:	d806      	bhi.n	801e336 <icmp_send_response+0x3a>
 801e328:	4b2b      	ldr	r3, [pc, #172]	; (801e3d8 <icmp_send_response+0xdc>)
 801e32a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e32e:	492b      	ldr	r1, [pc, #172]	; (801e3dc <icmp_send_response+0xe0>)
 801e330:	482b      	ldr	r0, [pc, #172]	; (801e3e0 <icmp_send_response+0xe4>)
 801e332:	f002 fa19 	bl	8020768 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	685b      	ldr	r3, [r3, #4]
 801e33a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e33c:	69fb      	ldr	r3, [r7, #28]
 801e33e:	685b      	ldr	r3, [r3, #4]
 801e340:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e342:	697b      	ldr	r3, [r7, #20]
 801e344:	78fa      	ldrb	r2, [r7, #3]
 801e346:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e348:	697b      	ldr	r3, [r7, #20]
 801e34a:	78ba      	ldrb	r2, [r7, #2]
 801e34c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e34e:	697b      	ldr	r3, [r7, #20]
 801e350:	2200      	movs	r2, #0
 801e352:	711a      	strb	r2, [r3, #4]
 801e354:	2200      	movs	r2, #0
 801e356:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e358:	697b      	ldr	r3, [r7, #20]
 801e35a:	2200      	movs	r2, #0
 801e35c:	719a      	strb	r2, [r3, #6]
 801e35e:	2200      	movs	r2, #0
 801e360:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e362:	69fb      	ldr	r3, [r7, #28]
 801e364:	685b      	ldr	r3, [r3, #4]
 801e366:	f103 0008 	add.w	r0, r3, #8
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	685b      	ldr	r3, [r3, #4]
 801e36e:	221c      	movs	r2, #28
 801e370:	4619      	mov	r1, r3
 801e372:	f002 f94e 	bl	8020612 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e376:	69bb      	ldr	r3, [r7, #24]
 801e378:	68db      	ldr	r3, [r3, #12]
 801e37a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e37c:	f107 030c 	add.w	r3, r7, #12
 801e380:	4618      	mov	r0, r3
 801e382:	f000 f82f 	bl	801e3e4 <ip4_route>
 801e386:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e388:	693b      	ldr	r3, [r7, #16]
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	d01b      	beq.n	801e3c6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e38e:	697b      	ldr	r3, [r7, #20]
 801e390:	2200      	movs	r2, #0
 801e392:	709a      	strb	r2, [r3, #2]
 801e394:	2200      	movs	r2, #0
 801e396:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801e398:	69fb      	ldr	r3, [r7, #28]
 801e39a:	895b      	ldrh	r3, [r3, #10]
 801e39c:	4619      	mov	r1, r3
 801e39e:	6978      	ldr	r0, [r7, #20]
 801e3a0:	f7f5 fa21 	bl	80137e6 <inet_chksum>
 801e3a4:	4603      	mov	r3, r0
 801e3a6:	461a      	mov	r2, r3
 801e3a8:	697b      	ldr	r3, [r7, #20]
 801e3aa:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e3ac:	f107 020c 	add.w	r2, r7, #12
 801e3b0:	693b      	ldr	r3, [r7, #16]
 801e3b2:	9302      	str	r3, [sp, #8]
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	9301      	str	r3, [sp, #4]
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	9300      	str	r3, [sp, #0]
 801e3bc:	23ff      	movs	r3, #255	; 0xff
 801e3be:	2100      	movs	r1, #0
 801e3c0:	69f8      	ldr	r0, [r7, #28]
 801e3c2:	f000 f9eb 	bl	801e79c <ip4_output_if>
  }
  pbuf_free(q);
 801e3c6:	69f8      	ldr	r0, [r7, #28]
 801e3c8:	f7f6 fe38 	bl	801503c <pbuf_free>
 801e3cc:	e000      	b.n	801e3d0 <icmp_send_response+0xd4>
    return;
 801e3ce:	bf00      	nop
}
 801e3d0:	3720      	adds	r7, #32
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	08024088 	.word	0x08024088
 801e3dc:	08024154 	.word	0x08024154
 801e3e0:	080240f8 	.word	0x080240f8

0801e3e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e3e4:	b480      	push	{r7}
 801e3e6:	b085      	sub	sp, #20
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e3ec:	4b33      	ldr	r3, [pc, #204]	; (801e4bc <ip4_route+0xd8>)
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	60fb      	str	r3, [r7, #12]
 801e3f2:	e036      	b.n	801e462 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e3fa:	f003 0301 	and.w	r3, r3, #1
 801e3fe:	b2db      	uxtb	r3, r3
 801e400:	2b00      	cmp	r3, #0
 801e402:	d02b      	beq.n	801e45c <ip4_route+0x78>
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e40a:	089b      	lsrs	r3, r3, #2
 801e40c:	f003 0301 	and.w	r3, r3, #1
 801e410:	b2db      	uxtb	r3, r3
 801e412:	2b00      	cmp	r3, #0
 801e414:	d022      	beq.n	801e45c <ip4_route+0x78>
 801e416:	68fb      	ldr	r3, [r7, #12]
 801e418:	3304      	adds	r3, #4
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	2b00      	cmp	r3, #0
 801e41e:	d01d      	beq.n	801e45c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	681a      	ldr	r2, [r3, #0]
 801e424:	68fb      	ldr	r3, [r7, #12]
 801e426:	3304      	adds	r3, #4
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	405a      	eors	r2, r3
 801e42c:	68fb      	ldr	r3, [r7, #12]
 801e42e:	3308      	adds	r3, #8
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	4013      	ands	r3, r2
 801e434:	2b00      	cmp	r3, #0
 801e436:	d101      	bne.n	801e43c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	e038      	b.n	801e4ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e43c:	68fb      	ldr	r3, [r7, #12]
 801e43e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e442:	f003 0302 	and.w	r3, r3, #2
 801e446:	2b00      	cmp	r3, #0
 801e448:	d108      	bne.n	801e45c <ip4_route+0x78>
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	681a      	ldr	r2, [r3, #0]
 801e44e:	68fb      	ldr	r3, [r7, #12]
 801e450:	330c      	adds	r3, #12
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	429a      	cmp	r2, r3
 801e456:	d101      	bne.n	801e45c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e458:	68fb      	ldr	r3, [r7, #12]
 801e45a:	e028      	b.n	801e4ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801e45c:	68fb      	ldr	r3, [r7, #12]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	60fb      	str	r3, [r7, #12]
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	2b00      	cmp	r3, #0
 801e466:	d1c5      	bne.n	801e3f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e468:	4b15      	ldr	r3, [pc, #84]	; (801e4c0 <ip4_route+0xdc>)
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d01a      	beq.n	801e4a6 <ip4_route+0xc2>
 801e470:	4b13      	ldr	r3, [pc, #76]	; (801e4c0 <ip4_route+0xdc>)
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e478:	f003 0301 	and.w	r3, r3, #1
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d012      	beq.n	801e4a6 <ip4_route+0xc2>
 801e480:	4b0f      	ldr	r3, [pc, #60]	; (801e4c0 <ip4_route+0xdc>)
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e488:	f003 0304 	and.w	r3, r3, #4
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d00a      	beq.n	801e4a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e490:	4b0b      	ldr	r3, [pc, #44]	; (801e4c0 <ip4_route+0xdc>)
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	3304      	adds	r3, #4
 801e496:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d004      	beq.n	801e4a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	b2db      	uxtb	r3, r3
 801e4a2:	2b7f      	cmp	r3, #127	; 0x7f
 801e4a4:	d101      	bne.n	801e4aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e4a6:	2300      	movs	r3, #0
 801e4a8:	e001      	b.n	801e4ae <ip4_route+0xca>
  }

  return netif_default;
 801e4aa:	4b05      	ldr	r3, [pc, #20]	; (801e4c0 <ip4_route+0xdc>)
 801e4ac:	681b      	ldr	r3, [r3, #0]
}
 801e4ae:	4618      	mov	r0, r3
 801e4b0:	3714      	adds	r7, #20
 801e4b2:	46bd      	mov	sp, r7
 801e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4b8:	4770      	bx	lr
 801e4ba:	bf00      	nop
 801e4bc:	2400cb44 	.word	0x2400cb44
 801e4c0:	2400cb48 	.word	0x2400cb48

0801e4c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e4c4:	b580      	push	{r7, lr}
 801e4c6:	b082      	sub	sp, #8
 801e4c8:	af00      	add	r7, sp, #0
 801e4ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e4d2:	f003 0301 	and.w	r3, r3, #1
 801e4d6:	b2db      	uxtb	r3, r3
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d016      	beq.n	801e50a <ip4_input_accept+0x46>
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	3304      	adds	r3, #4
 801e4e0:	681b      	ldr	r3, [r3, #0]
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d011      	beq.n	801e50a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e4e6:	4b0b      	ldr	r3, [pc, #44]	; (801e514 <ip4_input_accept+0x50>)
 801e4e8:	695a      	ldr	r2, [r3, #20]
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	3304      	adds	r3, #4
 801e4ee:	681b      	ldr	r3, [r3, #0]
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	d008      	beq.n	801e506 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e4f4:	4b07      	ldr	r3, [pc, #28]	; (801e514 <ip4_input_accept+0x50>)
 801e4f6:	695b      	ldr	r3, [r3, #20]
 801e4f8:	6879      	ldr	r1, [r7, #4]
 801e4fa:	4618      	mov	r0, r3
 801e4fc:	f000 fa26 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801e500:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e502:	2b00      	cmp	r3, #0
 801e504:	d001      	beq.n	801e50a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e506:	2301      	movs	r3, #1
 801e508:	e000      	b.n	801e50c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e50a:	2300      	movs	r3, #0
}
 801e50c:	4618      	mov	r0, r3
 801e50e:	3708      	adds	r7, #8
 801e510:	46bd      	mov	sp, r7
 801e512:	bd80      	pop	{r7, pc}
 801e514:	24009a30 	.word	0x24009a30

0801e518 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e518:	b580      	push	{r7, lr}
 801e51a:	b088      	sub	sp, #32
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	6078      	str	r0, [r7, #4]
 801e520:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801e522:	2301      	movs	r3, #1
 801e524:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	685b      	ldr	r3, [r3, #4]
 801e52a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801e52c:	69fb      	ldr	r3, [r7, #28]
 801e52e:	781b      	ldrb	r3, [r3, #0]
 801e530:	091b      	lsrs	r3, r3, #4
 801e532:	b2db      	uxtb	r3, r3
 801e534:	2b04      	cmp	r3, #4
 801e536:	d004      	beq.n	801e542 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e538:	6878      	ldr	r0, [r7, #4]
 801e53a:	f7f6 fd7f 	bl	801503c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e53e:	2300      	movs	r3, #0
 801e540:	e123      	b.n	801e78a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e542:	69fb      	ldr	r3, [r7, #28]
 801e544:	781b      	ldrb	r3, [r3, #0]
 801e546:	f003 030f 	and.w	r3, r3, #15
 801e54a:	b2db      	uxtb	r3, r3
 801e54c:	009b      	lsls	r3, r3, #2
 801e54e:	b2db      	uxtb	r3, r3
 801e550:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e552:	69fb      	ldr	r3, [r7, #28]
 801e554:	885b      	ldrh	r3, [r3, #2]
 801e556:	b29b      	uxth	r3, r3
 801e558:	4618      	mov	r0, r3
 801e55a:	f7f5 f8b9 	bl	80136d0 <lwip_htons>
 801e55e:	4603      	mov	r3, r0
 801e560:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	891b      	ldrh	r3, [r3, #8]
 801e566:	8a3a      	ldrh	r2, [r7, #16]
 801e568:	429a      	cmp	r2, r3
 801e56a:	d204      	bcs.n	801e576 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801e56c:	8a3b      	ldrh	r3, [r7, #16]
 801e56e:	4619      	mov	r1, r3
 801e570:	6878      	ldr	r0, [r7, #4]
 801e572:	f7f6 fbdd 	bl	8014d30 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	895b      	ldrh	r3, [r3, #10]
 801e57a:	8a7a      	ldrh	r2, [r7, #18]
 801e57c:	429a      	cmp	r2, r3
 801e57e:	d807      	bhi.n	801e590 <ip4_input+0x78>
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	891b      	ldrh	r3, [r3, #8]
 801e584:	8a3a      	ldrh	r2, [r7, #16]
 801e586:	429a      	cmp	r2, r3
 801e588:	d802      	bhi.n	801e590 <ip4_input+0x78>
 801e58a:	8a7b      	ldrh	r3, [r7, #18]
 801e58c:	2b13      	cmp	r3, #19
 801e58e:	d804      	bhi.n	801e59a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e590:	6878      	ldr	r0, [r7, #4]
 801e592:	f7f6 fd53 	bl	801503c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e596:	2300      	movs	r3, #0
 801e598:	e0f7      	b.n	801e78a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e59a:	69fb      	ldr	r3, [r7, #28]
 801e59c:	691b      	ldr	r3, [r3, #16]
 801e59e:	4a7d      	ldr	r2, [pc, #500]	; (801e794 <ip4_input+0x27c>)
 801e5a0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e5a2:	69fb      	ldr	r3, [r7, #28]
 801e5a4:	68db      	ldr	r3, [r3, #12]
 801e5a6:	4a7b      	ldr	r2, [pc, #492]	; (801e794 <ip4_input+0x27c>)
 801e5a8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e5aa:	4b7a      	ldr	r3, [pc, #488]	; (801e794 <ip4_input+0x27c>)
 801e5ac:	695b      	ldr	r3, [r3, #20]
 801e5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e5b2:	2be0      	cmp	r3, #224	; 0xe0
 801e5b4:	d112      	bne.n	801e5dc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e5b6:	683b      	ldr	r3, [r7, #0]
 801e5b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5bc:	f003 0301 	and.w	r3, r3, #1
 801e5c0:	b2db      	uxtb	r3, r3
 801e5c2:	2b00      	cmp	r3, #0
 801e5c4:	d007      	beq.n	801e5d6 <ip4_input+0xbe>
 801e5c6:	683b      	ldr	r3, [r7, #0]
 801e5c8:	3304      	adds	r3, #4
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	2b00      	cmp	r3, #0
 801e5ce:	d002      	beq.n	801e5d6 <ip4_input+0xbe>
      netif = inp;
 801e5d0:	683b      	ldr	r3, [r7, #0]
 801e5d2:	61bb      	str	r3, [r7, #24]
 801e5d4:	e02a      	b.n	801e62c <ip4_input+0x114>
    } else {
      netif = NULL;
 801e5d6:	2300      	movs	r3, #0
 801e5d8:	61bb      	str	r3, [r7, #24]
 801e5da:	e027      	b.n	801e62c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e5dc:	6838      	ldr	r0, [r7, #0]
 801e5de:	f7ff ff71 	bl	801e4c4 <ip4_input_accept>
 801e5e2:	4603      	mov	r3, r0
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d002      	beq.n	801e5ee <ip4_input+0xd6>
      netif = inp;
 801e5e8:	683b      	ldr	r3, [r7, #0]
 801e5ea:	61bb      	str	r3, [r7, #24]
 801e5ec:	e01e      	b.n	801e62c <ip4_input+0x114>
    } else {
      netif = NULL;
 801e5ee:	2300      	movs	r3, #0
 801e5f0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e5f2:	4b68      	ldr	r3, [pc, #416]	; (801e794 <ip4_input+0x27c>)
 801e5f4:	695b      	ldr	r3, [r3, #20]
 801e5f6:	b2db      	uxtb	r3, r3
 801e5f8:	2b7f      	cmp	r3, #127	; 0x7f
 801e5fa:	d017      	beq.n	801e62c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e5fc:	4b66      	ldr	r3, [pc, #408]	; (801e798 <ip4_input+0x280>)
 801e5fe:	681b      	ldr	r3, [r3, #0]
 801e600:	61bb      	str	r3, [r7, #24]
 801e602:	e00e      	b.n	801e622 <ip4_input+0x10a>
          if (netif == inp) {
 801e604:	69ba      	ldr	r2, [r7, #24]
 801e606:	683b      	ldr	r3, [r7, #0]
 801e608:	429a      	cmp	r2, r3
 801e60a:	d006      	beq.n	801e61a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e60c:	69b8      	ldr	r0, [r7, #24]
 801e60e:	f7ff ff59 	bl	801e4c4 <ip4_input_accept>
 801e612:	4603      	mov	r3, r0
 801e614:	2b00      	cmp	r3, #0
 801e616:	d108      	bne.n	801e62a <ip4_input+0x112>
 801e618:	e000      	b.n	801e61c <ip4_input+0x104>
            continue;
 801e61a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e61c:	69bb      	ldr	r3, [r7, #24]
 801e61e:	681b      	ldr	r3, [r3, #0]
 801e620:	61bb      	str	r3, [r7, #24]
 801e622:	69bb      	ldr	r3, [r7, #24]
 801e624:	2b00      	cmp	r3, #0
 801e626:	d1ed      	bne.n	801e604 <ip4_input+0xec>
 801e628:	e000      	b.n	801e62c <ip4_input+0x114>
            break;
 801e62a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801e62c:	69bb      	ldr	r3, [r7, #24]
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d111      	bne.n	801e656 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e632:	69fb      	ldr	r3, [r7, #28]
 801e634:	7a5b      	ldrb	r3, [r3, #9]
 801e636:	2b11      	cmp	r3, #17
 801e638:	d10d      	bne.n	801e656 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801e63a:	8a7b      	ldrh	r3, [r7, #18]
 801e63c:	69fa      	ldr	r2, [r7, #28]
 801e63e:	4413      	add	r3, r2
 801e640:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e642:	68fb      	ldr	r3, [r7, #12]
 801e644:	885b      	ldrh	r3, [r3, #2]
 801e646:	b29b      	uxth	r3, r3
 801e648:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801e64c:	d103      	bne.n	801e656 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801e64e:	683b      	ldr	r3, [r7, #0]
 801e650:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801e652:	2300      	movs	r3, #0
 801e654:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801e656:	697b      	ldr	r3, [r7, #20]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d017      	beq.n	801e68c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e65c:	4b4d      	ldr	r3, [pc, #308]	; (801e794 <ip4_input+0x27c>)
 801e65e:	691b      	ldr	r3, [r3, #16]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d013      	beq.n	801e68c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e664:	4b4b      	ldr	r3, [pc, #300]	; (801e794 <ip4_input+0x27c>)
 801e666:	691b      	ldr	r3, [r3, #16]
 801e668:	6839      	ldr	r1, [r7, #0]
 801e66a:	4618      	mov	r0, r3
 801e66c:	f000 f96e 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801e670:	4603      	mov	r3, r0
 801e672:	2b00      	cmp	r3, #0
 801e674:	d105      	bne.n	801e682 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e676:	4b47      	ldr	r3, [pc, #284]	; (801e794 <ip4_input+0x27c>)
 801e678:	691b      	ldr	r3, [r3, #16]
 801e67a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e67e:	2be0      	cmp	r3, #224	; 0xe0
 801e680:	d104      	bne.n	801e68c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e682:	6878      	ldr	r0, [r7, #4]
 801e684:	f7f6 fcda 	bl	801503c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e688:	2300      	movs	r3, #0
 801e68a:	e07e      	b.n	801e78a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e68c:	69bb      	ldr	r3, [r7, #24]
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d104      	bne.n	801e69c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f7f6 fcd2 	bl	801503c <pbuf_free>
    return ERR_OK;
 801e698:	2300      	movs	r3, #0
 801e69a:	e076      	b.n	801e78a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e69c:	69fb      	ldr	r3, [r7, #28]
 801e69e:	88db      	ldrh	r3, [r3, #6]
 801e6a0:	b29b      	uxth	r3, r3
 801e6a2:	461a      	mov	r2, r3
 801e6a4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801e6a8:	4013      	ands	r3, r2
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d00b      	beq.n	801e6c6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e6ae:	6878      	ldr	r0, [r7, #4]
 801e6b0:	f000 fc92 	bl	801efd8 <ip4_reass>
 801e6b4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d101      	bne.n	801e6c0 <ip4_input+0x1a8>
      return ERR_OK;
 801e6bc:	2300      	movs	r3, #0
 801e6be:	e064      	b.n	801e78a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e6c0:	687b      	ldr	r3, [r7, #4]
 801e6c2:	685b      	ldr	r3, [r3, #4]
 801e6c4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e6c6:	4a33      	ldr	r2, [pc, #204]	; (801e794 <ip4_input+0x27c>)
 801e6c8:	69bb      	ldr	r3, [r7, #24]
 801e6ca:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e6cc:	4a31      	ldr	r2, [pc, #196]	; (801e794 <ip4_input+0x27c>)
 801e6ce:	683b      	ldr	r3, [r7, #0]
 801e6d0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e6d2:	4a30      	ldr	r2, [pc, #192]	; (801e794 <ip4_input+0x27c>)
 801e6d4:	69fb      	ldr	r3, [r7, #28]
 801e6d6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e6d8:	69fb      	ldr	r3, [r7, #28]
 801e6da:	781b      	ldrb	r3, [r3, #0]
 801e6dc:	f003 030f 	and.w	r3, r3, #15
 801e6e0:	b2db      	uxtb	r3, r3
 801e6e2:	009b      	lsls	r3, r3, #2
 801e6e4:	b2db      	uxtb	r3, r3
 801e6e6:	b29a      	uxth	r2, r3
 801e6e8:	4b2a      	ldr	r3, [pc, #168]	; (801e794 <ip4_input+0x27c>)
 801e6ea:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e6ec:	8a7b      	ldrh	r3, [r7, #18]
 801e6ee:	4619      	mov	r1, r3
 801e6f0:	6878      	ldr	r0, [r7, #4]
 801e6f2:	f7f6 fc1d 	bl	8014f30 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e6f6:	69fb      	ldr	r3, [r7, #28]
 801e6f8:	7a5b      	ldrb	r3, [r3, #9]
 801e6fa:	2b11      	cmp	r3, #17
 801e6fc:	d006      	beq.n	801e70c <ip4_input+0x1f4>
 801e6fe:	2b11      	cmp	r3, #17
 801e700:	dc13      	bgt.n	801e72a <ip4_input+0x212>
 801e702:	2b01      	cmp	r3, #1
 801e704:	d00c      	beq.n	801e720 <ip4_input+0x208>
 801e706:	2b06      	cmp	r3, #6
 801e708:	d005      	beq.n	801e716 <ip4_input+0x1fe>
 801e70a:	e00e      	b.n	801e72a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e70c:	6839      	ldr	r1, [r7, #0]
 801e70e:	6878      	ldr	r0, [r7, #4]
 801e710:	f7fc fac2 	bl	801ac98 <udp_input>
        break;
 801e714:	e026      	b.n	801e764 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e716:	6839      	ldr	r1, [r7, #0]
 801e718:	6878      	ldr	r0, [r7, #4]
 801e71a:	f7f8 fad3 	bl	8016cc4 <tcp_input>
        break;
 801e71e:	e021      	b.n	801e764 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e720:	6839      	ldr	r1, [r7, #0]
 801e722:	6878      	ldr	r0, [r7, #4]
 801e724:	f7ff fcaa 	bl	801e07c <icmp_input>
        break;
 801e728:	e01c      	b.n	801e764 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e72a:	4b1a      	ldr	r3, [pc, #104]	; (801e794 <ip4_input+0x27c>)
 801e72c:	695b      	ldr	r3, [r3, #20]
 801e72e:	69b9      	ldr	r1, [r7, #24]
 801e730:	4618      	mov	r0, r3
 801e732:	f000 f90b 	bl	801e94c <ip4_addr_isbroadcast_u32>
 801e736:	4603      	mov	r3, r0
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d10f      	bne.n	801e75c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e73c:	4b15      	ldr	r3, [pc, #84]	; (801e794 <ip4_input+0x27c>)
 801e73e:	695b      	ldr	r3, [r3, #20]
 801e740:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e744:	2be0      	cmp	r3, #224	; 0xe0
 801e746:	d009      	beq.n	801e75c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e74c:	4619      	mov	r1, r3
 801e74e:	6878      	ldr	r0, [r7, #4]
 801e750:	f7f6 fc61 	bl	8015016 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e754:	2102      	movs	r1, #2
 801e756:	6878      	ldr	r0, [r7, #4]
 801e758:	f7ff fdb0 	bl	801e2bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e75c:	6878      	ldr	r0, [r7, #4]
 801e75e:	f7f6 fc6d 	bl	801503c <pbuf_free>
        break;
 801e762:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e764:	4b0b      	ldr	r3, [pc, #44]	; (801e794 <ip4_input+0x27c>)
 801e766:	2200      	movs	r2, #0
 801e768:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e76a:	4b0a      	ldr	r3, [pc, #40]	; (801e794 <ip4_input+0x27c>)
 801e76c:	2200      	movs	r2, #0
 801e76e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e770:	4b08      	ldr	r3, [pc, #32]	; (801e794 <ip4_input+0x27c>)
 801e772:	2200      	movs	r2, #0
 801e774:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e776:	4b07      	ldr	r3, [pc, #28]	; (801e794 <ip4_input+0x27c>)
 801e778:	2200      	movs	r2, #0
 801e77a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e77c:	4b05      	ldr	r3, [pc, #20]	; (801e794 <ip4_input+0x27c>)
 801e77e:	2200      	movs	r2, #0
 801e780:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e782:	4b04      	ldr	r3, [pc, #16]	; (801e794 <ip4_input+0x27c>)
 801e784:	2200      	movs	r2, #0
 801e786:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e788:	2300      	movs	r3, #0
}
 801e78a:	4618      	mov	r0, r3
 801e78c:	3720      	adds	r7, #32
 801e78e:	46bd      	mov	sp, r7
 801e790:	bd80      	pop	{r7, pc}
 801e792:	bf00      	nop
 801e794:	24009a30 	.word	0x24009a30
 801e798:	2400cb44 	.word	0x2400cb44

0801e79c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e79c:	b580      	push	{r7, lr}
 801e79e:	b08a      	sub	sp, #40	; 0x28
 801e7a0:	af04      	add	r7, sp, #16
 801e7a2:	60f8      	str	r0, [r7, #12]
 801e7a4:	60b9      	str	r1, [r7, #8]
 801e7a6:	607a      	str	r2, [r7, #4]
 801e7a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e7aa:	68bb      	ldr	r3, [r7, #8]
 801e7ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d009      	beq.n	801e7c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e7b4:	68bb      	ldr	r3, [r7, #8]
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d003      	beq.n	801e7c2 <ip4_output_if+0x26>
 801e7ba:	68bb      	ldr	r3, [r7, #8]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d102      	bne.n	801e7c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7c4:	3304      	adds	r3, #4
 801e7c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e7c8:	78fa      	ldrb	r2, [r7, #3]
 801e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7cc:	9302      	str	r3, [sp, #8]
 801e7ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e7d2:	9301      	str	r3, [sp, #4]
 801e7d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e7d8:	9300      	str	r3, [sp, #0]
 801e7da:	4613      	mov	r3, r2
 801e7dc:	687a      	ldr	r2, [r7, #4]
 801e7de:	6979      	ldr	r1, [r7, #20]
 801e7e0:	68f8      	ldr	r0, [r7, #12]
 801e7e2:	f000 f805 	bl	801e7f0 <ip4_output_if_src>
 801e7e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	3718      	adds	r7, #24
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	bd80      	pop	{r7, pc}

0801e7f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	b088      	sub	sp, #32
 801e7f4:	af00      	add	r7, sp, #0
 801e7f6:	60f8      	str	r0, [r7, #12]
 801e7f8:	60b9      	str	r1, [r7, #8]
 801e7fa:	607a      	str	r2, [r7, #4]
 801e7fc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e7fe:	68fb      	ldr	r3, [r7, #12]
 801e800:	7b9b      	ldrb	r3, [r3, #14]
 801e802:	2b01      	cmp	r3, #1
 801e804:	d006      	beq.n	801e814 <ip4_output_if_src+0x24>
 801e806:	4b4b      	ldr	r3, [pc, #300]	; (801e934 <ip4_output_if_src+0x144>)
 801e808:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e80c:	494a      	ldr	r1, [pc, #296]	; (801e938 <ip4_output_if_src+0x148>)
 801e80e:	484b      	ldr	r0, [pc, #300]	; (801e93c <ip4_output_if_src+0x14c>)
 801e810:	f001 ffaa 	bl	8020768 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d060      	beq.n	801e8dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e81a:	2314      	movs	r3, #20
 801e81c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e81e:	2114      	movs	r1, #20
 801e820:	68f8      	ldr	r0, [r7, #12]
 801e822:	f7f6 fb75 	bl	8014f10 <pbuf_add_header>
 801e826:	4603      	mov	r3, r0
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d002      	beq.n	801e832 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e82c:	f06f 0301 	mvn.w	r3, #1
 801e830:	e07c      	b.n	801e92c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e832:	68fb      	ldr	r3, [r7, #12]
 801e834:	685b      	ldr	r3, [r3, #4]
 801e836:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	895b      	ldrh	r3, [r3, #10]
 801e83c:	2b13      	cmp	r3, #19
 801e83e:	d806      	bhi.n	801e84e <ip4_output_if_src+0x5e>
 801e840:	4b3c      	ldr	r3, [pc, #240]	; (801e934 <ip4_output_if_src+0x144>)
 801e842:	f44f 7262 	mov.w	r2, #904	; 0x388
 801e846:	493e      	ldr	r1, [pc, #248]	; (801e940 <ip4_output_if_src+0x150>)
 801e848:	483c      	ldr	r0, [pc, #240]	; (801e93c <ip4_output_if_src+0x14c>)
 801e84a:	f001 ff8d 	bl	8020768 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e84e:	69fb      	ldr	r3, [r7, #28]
 801e850:	78fa      	ldrb	r2, [r7, #3]
 801e852:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e854:	69fb      	ldr	r3, [r7, #28]
 801e856:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801e85a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	681a      	ldr	r2, [r3, #0]
 801e860:	69fb      	ldr	r3, [r7, #28]
 801e862:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e864:	8b7b      	ldrh	r3, [r7, #26]
 801e866:	089b      	lsrs	r3, r3, #2
 801e868:	b29b      	uxth	r3, r3
 801e86a:	b2db      	uxtb	r3, r3
 801e86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e870:	b2da      	uxtb	r2, r3
 801e872:	69fb      	ldr	r3, [r7, #28]
 801e874:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e876:	69fb      	ldr	r3, [r7, #28]
 801e878:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e87c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	891b      	ldrh	r3, [r3, #8]
 801e882:	4618      	mov	r0, r3
 801e884:	f7f4 ff24 	bl	80136d0 <lwip_htons>
 801e888:	4603      	mov	r3, r0
 801e88a:	461a      	mov	r2, r3
 801e88c:	69fb      	ldr	r3, [r7, #28]
 801e88e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e890:	69fb      	ldr	r3, [r7, #28]
 801e892:	2200      	movs	r2, #0
 801e894:	719a      	strb	r2, [r3, #6]
 801e896:	2200      	movs	r2, #0
 801e898:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e89a:	4b2a      	ldr	r3, [pc, #168]	; (801e944 <ip4_output_if_src+0x154>)
 801e89c:	881b      	ldrh	r3, [r3, #0]
 801e89e:	4618      	mov	r0, r3
 801e8a0:	f7f4 ff16 	bl	80136d0 <lwip_htons>
 801e8a4:	4603      	mov	r3, r0
 801e8a6:	461a      	mov	r2, r3
 801e8a8:	69fb      	ldr	r3, [r7, #28]
 801e8aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e8ac:	4b25      	ldr	r3, [pc, #148]	; (801e944 <ip4_output_if_src+0x154>)
 801e8ae:	881b      	ldrh	r3, [r3, #0]
 801e8b0:	3301      	adds	r3, #1
 801e8b2:	b29a      	uxth	r2, r3
 801e8b4:	4b23      	ldr	r3, [pc, #140]	; (801e944 <ip4_output_if_src+0x154>)
 801e8b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e8b8:	68bb      	ldr	r3, [r7, #8]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d104      	bne.n	801e8c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e8be:	4b22      	ldr	r3, [pc, #136]	; (801e948 <ip4_output_if_src+0x158>)
 801e8c0:	681a      	ldr	r2, [r3, #0]
 801e8c2:	69fb      	ldr	r3, [r7, #28]
 801e8c4:	60da      	str	r2, [r3, #12]
 801e8c6:	e003      	b.n	801e8d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e8c8:	68bb      	ldr	r3, [r7, #8]
 801e8ca:	681a      	ldr	r2, [r3, #0]
 801e8cc:	69fb      	ldr	r3, [r7, #28]
 801e8ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e8d0:	69fb      	ldr	r3, [r7, #28]
 801e8d2:	2200      	movs	r2, #0
 801e8d4:	729a      	strb	r2, [r3, #10]
 801e8d6:	2200      	movs	r2, #0
 801e8d8:	72da      	strb	r2, [r3, #11]
 801e8da:	e00f      	b.n	801e8fc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	895b      	ldrh	r3, [r3, #10]
 801e8e0:	2b13      	cmp	r3, #19
 801e8e2:	d802      	bhi.n	801e8ea <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e8e4:	f06f 0301 	mvn.w	r3, #1
 801e8e8:	e020      	b.n	801e92c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e8ea:	68fb      	ldr	r3, [r7, #12]
 801e8ec:	685b      	ldr	r3, [r3, #4]
 801e8ee:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e8f0:	69fb      	ldr	r3, [r7, #28]
 801e8f2:	691b      	ldr	r3, [r3, #16]
 801e8f4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e8f6:	f107 0314 	add.w	r3, r7, #20
 801e8fa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e900:	2b00      	cmp	r3, #0
 801e902:	d00c      	beq.n	801e91e <ip4_output_if_src+0x12e>
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	891a      	ldrh	r2, [r3, #8]
 801e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e90c:	429a      	cmp	r2, r3
 801e90e:	d906      	bls.n	801e91e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801e910:	687a      	ldr	r2, [r7, #4]
 801e912:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e914:	68f8      	ldr	r0, [r7, #12]
 801e916:	f000 fd53 	bl	801f3c0 <ip4_frag>
 801e91a:	4603      	mov	r3, r0
 801e91c:	e006      	b.n	801e92c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e920:	695b      	ldr	r3, [r3, #20]
 801e922:	687a      	ldr	r2, [r7, #4]
 801e924:	68f9      	ldr	r1, [r7, #12]
 801e926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e928:	4798      	blx	r3
 801e92a:	4603      	mov	r3, r0
}
 801e92c:	4618      	mov	r0, r3
 801e92e:	3720      	adds	r7, #32
 801e930:	46bd      	mov	sp, r7
 801e932:	bd80      	pop	{r7, pc}
 801e934:	08024180 	.word	0x08024180
 801e938:	080241b4 	.word	0x080241b4
 801e93c:	080241c0 	.word	0x080241c0
 801e940:	080241e8 	.word	0x080241e8
 801e944:	2400ccd6 	.word	0x2400ccd6
 801e948:	08024690 	.word	0x08024690

0801e94c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e94c:	b480      	push	{r7}
 801e94e:	b085      	sub	sp, #20
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
 801e954:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e960:	d002      	beq.n	801e968 <ip4_addr_isbroadcast_u32+0x1c>
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	2b00      	cmp	r3, #0
 801e966:	d101      	bne.n	801e96c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e968:	2301      	movs	r3, #1
 801e96a:	e02a      	b.n	801e9c2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e972:	f003 0302 	and.w	r3, r3, #2
 801e976:	2b00      	cmp	r3, #0
 801e978:	d101      	bne.n	801e97e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e97a:	2300      	movs	r3, #0
 801e97c:	e021      	b.n	801e9c2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e97e:	683b      	ldr	r3, [r7, #0]
 801e980:	3304      	adds	r3, #4
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	687a      	ldr	r2, [r7, #4]
 801e986:	429a      	cmp	r2, r3
 801e988:	d101      	bne.n	801e98e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e98a:	2300      	movs	r3, #0
 801e98c:	e019      	b.n	801e9c2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e98e:	68fa      	ldr	r2, [r7, #12]
 801e990:	683b      	ldr	r3, [r7, #0]
 801e992:	3304      	adds	r3, #4
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	405a      	eors	r2, r3
 801e998:	683b      	ldr	r3, [r7, #0]
 801e99a:	3308      	adds	r3, #8
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	4013      	ands	r3, r2
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d10d      	bne.n	801e9c0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e9a4:	683b      	ldr	r3, [r7, #0]
 801e9a6:	3308      	adds	r3, #8
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	43da      	mvns	r2, r3
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e9b0:	683b      	ldr	r3, [r7, #0]
 801e9b2:	3308      	adds	r3, #8
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e9b8:	429a      	cmp	r2, r3
 801e9ba:	d101      	bne.n	801e9c0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e9bc:	2301      	movs	r3, #1
 801e9be:	e000      	b.n	801e9c2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e9c0:	2300      	movs	r3, #0
  }
}
 801e9c2:	4618      	mov	r0, r3
 801e9c4:	3714      	adds	r7, #20
 801e9c6:	46bd      	mov	sp, r7
 801e9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9cc:	4770      	bx	lr
	...

0801e9d0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b084      	sub	sp, #16
 801e9d4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e9d6:	2300      	movs	r3, #0
 801e9d8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e9da:	4b12      	ldr	r3, [pc, #72]	; (801ea24 <ip_reass_tmr+0x54>)
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e9e0:	e018      	b.n	801ea14 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e9e2:	68fb      	ldr	r3, [r7, #12]
 801e9e4:	7fdb      	ldrb	r3, [r3, #31]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d00b      	beq.n	801ea02 <ip_reass_tmr+0x32>
      r->timer--;
 801e9ea:	68fb      	ldr	r3, [r7, #12]
 801e9ec:	7fdb      	ldrb	r3, [r3, #31]
 801e9ee:	3b01      	subs	r3, #1
 801e9f0:	b2da      	uxtb	r2, r3
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e9f6:	68fb      	ldr	r3, [r7, #12]
 801e9f8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e9fa:	68fb      	ldr	r3, [r7, #12]
 801e9fc:	681b      	ldr	r3, [r3, #0]
 801e9fe:	60fb      	str	r3, [r7, #12]
 801ea00:	e008      	b.n	801ea14 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ea06:	68fb      	ldr	r3, [r7, #12]
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ea0c:	68b9      	ldr	r1, [r7, #8]
 801ea0e:	6878      	ldr	r0, [r7, #4]
 801ea10:	f000 f80a 	bl	801ea28 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d1e3      	bne.n	801e9e2 <ip_reass_tmr+0x12>
    }
  }
}
 801ea1a:	bf00      	nop
 801ea1c:	bf00      	nop
 801ea1e:	3710      	adds	r7, #16
 801ea20:	46bd      	mov	sp, r7
 801ea22:	bd80      	pop	{r7, pc}
 801ea24:	2400ccd8 	.word	0x2400ccd8

0801ea28 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ea28:	b580      	push	{r7, lr}
 801ea2a:	b088      	sub	sp, #32
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	6078      	str	r0, [r7, #4]
 801ea30:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801ea32:	2300      	movs	r3, #0
 801ea34:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801ea36:	683a      	ldr	r2, [r7, #0]
 801ea38:	687b      	ldr	r3, [r7, #4]
 801ea3a:	429a      	cmp	r2, r3
 801ea3c:	d105      	bne.n	801ea4a <ip_reass_free_complete_datagram+0x22>
 801ea3e:	4b45      	ldr	r3, [pc, #276]	; (801eb54 <ip_reass_free_complete_datagram+0x12c>)
 801ea40:	22ab      	movs	r2, #171	; 0xab
 801ea42:	4945      	ldr	r1, [pc, #276]	; (801eb58 <ip_reass_free_complete_datagram+0x130>)
 801ea44:	4845      	ldr	r0, [pc, #276]	; (801eb5c <ip_reass_free_complete_datagram+0x134>)
 801ea46:	f001 fe8f 	bl	8020768 <iprintf>
  if (prev != NULL) {
 801ea4a:	683b      	ldr	r3, [r7, #0]
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d00a      	beq.n	801ea66 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801ea50:	683b      	ldr	r3, [r7, #0]
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	687a      	ldr	r2, [r7, #4]
 801ea56:	429a      	cmp	r2, r3
 801ea58:	d005      	beq.n	801ea66 <ip_reass_free_complete_datagram+0x3e>
 801ea5a:	4b3e      	ldr	r3, [pc, #248]	; (801eb54 <ip_reass_free_complete_datagram+0x12c>)
 801ea5c:	22ad      	movs	r2, #173	; 0xad
 801ea5e:	4940      	ldr	r1, [pc, #256]	; (801eb60 <ip_reass_free_complete_datagram+0x138>)
 801ea60:	483e      	ldr	r0, [pc, #248]	; (801eb5c <ip_reass_free_complete_datagram+0x134>)
 801ea62:	f001 fe81 	bl	8020768 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	685b      	ldr	r3, [r3, #4]
 801ea6a:	685b      	ldr	r3, [r3, #4]
 801ea6c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ea6e:	697b      	ldr	r3, [r7, #20]
 801ea70:	889b      	ldrh	r3, [r3, #4]
 801ea72:	b29b      	uxth	r3, r3
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	d12a      	bne.n	801eace <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	685b      	ldr	r3, [r3, #4]
 801ea7c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ea7e:	697b      	ldr	r3, [r7, #20]
 801ea80:	681a      	ldr	r2, [r3, #0]
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ea86:	69bb      	ldr	r3, [r7, #24]
 801ea88:	6858      	ldr	r0, [r3, #4]
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	3308      	adds	r3, #8
 801ea8e:	2214      	movs	r2, #20
 801ea90:	4619      	mov	r1, r3
 801ea92:	f001 fdbe 	bl	8020612 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ea96:	2101      	movs	r1, #1
 801ea98:	69b8      	ldr	r0, [r7, #24]
 801ea9a:	f7ff fc1f 	bl	801e2dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ea9e:	69b8      	ldr	r0, [r7, #24]
 801eaa0:	f7f6 fb5a 	bl	8015158 <pbuf_clen>
 801eaa4:	4603      	mov	r3, r0
 801eaa6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eaa8:	8bfa      	ldrh	r2, [r7, #30]
 801eaaa:	8a7b      	ldrh	r3, [r7, #18]
 801eaac:	4413      	add	r3, r2
 801eaae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eab2:	db05      	blt.n	801eac0 <ip_reass_free_complete_datagram+0x98>
 801eab4:	4b27      	ldr	r3, [pc, #156]	; (801eb54 <ip_reass_free_complete_datagram+0x12c>)
 801eab6:	22bc      	movs	r2, #188	; 0xbc
 801eab8:	492a      	ldr	r1, [pc, #168]	; (801eb64 <ip_reass_free_complete_datagram+0x13c>)
 801eaba:	4828      	ldr	r0, [pc, #160]	; (801eb5c <ip_reass_free_complete_datagram+0x134>)
 801eabc:	f001 fe54 	bl	8020768 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801eac0:	8bfa      	ldrh	r2, [r7, #30]
 801eac2:	8a7b      	ldrh	r3, [r7, #18]
 801eac4:	4413      	add	r3, r2
 801eac6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801eac8:	69b8      	ldr	r0, [r7, #24]
 801eaca:	f7f6 fab7 	bl	801503c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	685b      	ldr	r3, [r3, #4]
 801ead2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ead4:	e01f      	b.n	801eb16 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ead6:	69bb      	ldr	r3, [r7, #24]
 801ead8:	685b      	ldr	r3, [r3, #4]
 801eada:	617b      	str	r3, [r7, #20]
    pcur = p;
 801eadc:	69bb      	ldr	r3, [r7, #24]
 801eade:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801eae0:	697b      	ldr	r3, [r7, #20]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801eae6:	68f8      	ldr	r0, [r7, #12]
 801eae8:	f7f6 fb36 	bl	8015158 <pbuf_clen>
 801eaec:	4603      	mov	r3, r0
 801eaee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eaf0:	8bfa      	ldrh	r2, [r7, #30]
 801eaf2:	8a7b      	ldrh	r3, [r7, #18]
 801eaf4:	4413      	add	r3, r2
 801eaf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eafa:	db05      	blt.n	801eb08 <ip_reass_free_complete_datagram+0xe0>
 801eafc:	4b15      	ldr	r3, [pc, #84]	; (801eb54 <ip_reass_free_complete_datagram+0x12c>)
 801eafe:	22cc      	movs	r2, #204	; 0xcc
 801eb00:	4918      	ldr	r1, [pc, #96]	; (801eb64 <ip_reass_free_complete_datagram+0x13c>)
 801eb02:	4816      	ldr	r0, [pc, #88]	; (801eb5c <ip_reass_free_complete_datagram+0x134>)
 801eb04:	f001 fe30 	bl	8020768 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801eb08:	8bfa      	ldrh	r2, [r7, #30]
 801eb0a:	8a7b      	ldrh	r3, [r7, #18]
 801eb0c:	4413      	add	r3, r2
 801eb0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801eb10:	68f8      	ldr	r0, [r7, #12]
 801eb12:	f7f6 fa93 	bl	801503c <pbuf_free>
  while (p != NULL) {
 801eb16:	69bb      	ldr	r3, [r7, #24]
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	d1dc      	bne.n	801ead6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801eb1c:	6839      	ldr	r1, [r7, #0]
 801eb1e:	6878      	ldr	r0, [r7, #4]
 801eb20:	f000 f8c2 	bl	801eca8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801eb24:	4b10      	ldr	r3, [pc, #64]	; (801eb68 <ip_reass_free_complete_datagram+0x140>)
 801eb26:	881b      	ldrh	r3, [r3, #0]
 801eb28:	8bfa      	ldrh	r2, [r7, #30]
 801eb2a:	429a      	cmp	r2, r3
 801eb2c:	d905      	bls.n	801eb3a <ip_reass_free_complete_datagram+0x112>
 801eb2e:	4b09      	ldr	r3, [pc, #36]	; (801eb54 <ip_reass_free_complete_datagram+0x12c>)
 801eb30:	22d2      	movs	r2, #210	; 0xd2
 801eb32:	490e      	ldr	r1, [pc, #56]	; (801eb6c <ip_reass_free_complete_datagram+0x144>)
 801eb34:	4809      	ldr	r0, [pc, #36]	; (801eb5c <ip_reass_free_complete_datagram+0x134>)
 801eb36:	f001 fe17 	bl	8020768 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801eb3a:	4b0b      	ldr	r3, [pc, #44]	; (801eb68 <ip_reass_free_complete_datagram+0x140>)
 801eb3c:	881a      	ldrh	r2, [r3, #0]
 801eb3e:	8bfb      	ldrh	r3, [r7, #30]
 801eb40:	1ad3      	subs	r3, r2, r3
 801eb42:	b29a      	uxth	r2, r3
 801eb44:	4b08      	ldr	r3, [pc, #32]	; (801eb68 <ip_reass_free_complete_datagram+0x140>)
 801eb46:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801eb48:	8bfb      	ldrh	r3, [r7, #30]
}
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	3720      	adds	r7, #32
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	bd80      	pop	{r7, pc}
 801eb52:	bf00      	nop
 801eb54:	08024218 	.word	0x08024218
 801eb58:	08024254 	.word	0x08024254
 801eb5c:	08024260 	.word	0x08024260
 801eb60:	08024288 	.word	0x08024288
 801eb64:	0802429c 	.word	0x0802429c
 801eb68:	2400ccdc 	.word	0x2400ccdc
 801eb6c:	080242bc 	.word	0x080242bc

0801eb70 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801eb70:	b580      	push	{r7, lr}
 801eb72:	b08a      	sub	sp, #40	; 0x28
 801eb74:	af00      	add	r7, sp, #0
 801eb76:	6078      	str	r0, [r7, #4]
 801eb78:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801eb7e:	2300      	movs	r3, #0
 801eb80:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801eb82:	2300      	movs	r3, #0
 801eb84:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801eb86:	2300      	movs	r3, #0
 801eb88:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801eb8a:	2300      	movs	r3, #0
 801eb8c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801eb8e:	4b28      	ldr	r3, [pc, #160]	; (801ec30 <ip_reass_remove_oldest_datagram+0xc0>)
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801eb94:	e030      	b.n	801ebf8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb98:	695a      	ldr	r2, [r3, #20]
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	68db      	ldr	r3, [r3, #12]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	d10c      	bne.n	801ebbc <ip_reass_remove_oldest_datagram+0x4c>
 801eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba4:	699a      	ldr	r2, [r3, #24]
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	691b      	ldr	r3, [r3, #16]
 801ebaa:	429a      	cmp	r2, r3
 801ebac:	d106      	bne.n	801ebbc <ip_reass_remove_oldest_datagram+0x4c>
 801ebae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebb0:	899a      	ldrh	r2, [r3, #12]
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	889b      	ldrh	r3, [r3, #4]
 801ebb6:	b29b      	uxth	r3, r3
 801ebb8:	429a      	cmp	r2, r3
 801ebba:	d014      	beq.n	801ebe6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ebbc:	693b      	ldr	r3, [r7, #16]
 801ebbe:	3301      	adds	r3, #1
 801ebc0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ebc2:	6a3b      	ldr	r3, [r7, #32]
 801ebc4:	2b00      	cmp	r3, #0
 801ebc6:	d104      	bne.n	801ebd2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ebc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebca:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ebcc:	69fb      	ldr	r3, [r7, #28]
 801ebce:	61bb      	str	r3, [r7, #24]
 801ebd0:	e009      	b.n	801ebe6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ebd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebd4:	7fda      	ldrb	r2, [r3, #31]
 801ebd6:	6a3b      	ldr	r3, [r7, #32]
 801ebd8:	7fdb      	ldrb	r3, [r3, #31]
 801ebda:	429a      	cmp	r2, r3
 801ebdc:	d803      	bhi.n	801ebe6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ebde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebe0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ebe2:	69fb      	ldr	r3, [r7, #28]
 801ebe4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ebe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d001      	beq.n	801ebf2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ebee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d1cb      	bne.n	801eb96 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ebfe:	6a3b      	ldr	r3, [r7, #32]
 801ec00:	2b00      	cmp	r3, #0
 801ec02:	d008      	beq.n	801ec16 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ec04:	69b9      	ldr	r1, [r7, #24]
 801ec06:	6a38      	ldr	r0, [r7, #32]
 801ec08:	f7ff ff0e 	bl	801ea28 <ip_reass_free_complete_datagram>
 801ec0c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ec0e:	697a      	ldr	r2, [r7, #20]
 801ec10:	68fb      	ldr	r3, [r7, #12]
 801ec12:	4413      	add	r3, r2
 801ec14:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ec16:	697a      	ldr	r2, [r7, #20]
 801ec18:	683b      	ldr	r3, [r7, #0]
 801ec1a:	429a      	cmp	r2, r3
 801ec1c:	da02      	bge.n	801ec24 <ip_reass_remove_oldest_datagram+0xb4>
 801ec1e:	693b      	ldr	r3, [r7, #16]
 801ec20:	2b01      	cmp	r3, #1
 801ec22:	dcac      	bgt.n	801eb7e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ec24:	697b      	ldr	r3, [r7, #20]
}
 801ec26:	4618      	mov	r0, r3
 801ec28:	3728      	adds	r7, #40	; 0x28
 801ec2a:	46bd      	mov	sp, r7
 801ec2c:	bd80      	pop	{r7, pc}
 801ec2e:	bf00      	nop
 801ec30:	2400ccd8 	.word	0x2400ccd8

0801ec34 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ec34:	b580      	push	{r7, lr}
 801ec36:	b084      	sub	sp, #16
 801ec38:	af00      	add	r7, sp, #0
 801ec3a:	6078      	str	r0, [r7, #4]
 801ec3c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ec3e:	2004      	movs	r0, #4
 801ec40:	f7f5 fad6 	bl	80141f0 <memp_malloc>
 801ec44:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d110      	bne.n	801ec6e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ec4c:	6839      	ldr	r1, [r7, #0]
 801ec4e:	6878      	ldr	r0, [r7, #4]
 801ec50:	f7ff ff8e 	bl	801eb70 <ip_reass_remove_oldest_datagram>
 801ec54:	4602      	mov	r2, r0
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	dc03      	bgt.n	801ec64 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ec5c:	2004      	movs	r0, #4
 801ec5e:	f7f5 fac7 	bl	80141f0 <memp_malloc>
 801ec62:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d101      	bne.n	801ec6e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ec6a:	2300      	movs	r3, #0
 801ec6c:	e016      	b.n	801ec9c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ec6e:	2220      	movs	r2, #32
 801ec70:	2100      	movs	r1, #0
 801ec72:	68f8      	ldr	r0, [r7, #12]
 801ec74:	f001 fcdb 	bl	802062e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	220f      	movs	r2, #15
 801ec7c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ec7e:	4b09      	ldr	r3, [pc, #36]	; (801eca4 <ip_reass_enqueue_new_datagram+0x70>)
 801ec80:	681a      	ldr	r2, [r3, #0]
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ec86:	4a07      	ldr	r2, [pc, #28]	; (801eca4 <ip_reass_enqueue_new_datagram+0x70>)
 801ec88:	68fb      	ldr	r3, [r7, #12]
 801ec8a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ec8c:	68fb      	ldr	r3, [r7, #12]
 801ec8e:	3308      	adds	r3, #8
 801ec90:	2214      	movs	r2, #20
 801ec92:	6879      	ldr	r1, [r7, #4]
 801ec94:	4618      	mov	r0, r3
 801ec96:	f001 fcbc 	bl	8020612 <memcpy>
  return ipr;
 801ec9a:	68fb      	ldr	r3, [r7, #12]
}
 801ec9c:	4618      	mov	r0, r3
 801ec9e:	3710      	adds	r7, #16
 801eca0:	46bd      	mov	sp, r7
 801eca2:	bd80      	pop	{r7, pc}
 801eca4:	2400ccd8 	.word	0x2400ccd8

0801eca8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	b082      	sub	sp, #8
 801ecac:	af00      	add	r7, sp, #0
 801ecae:	6078      	str	r0, [r7, #4]
 801ecb0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801ecb2:	4b10      	ldr	r3, [pc, #64]	; (801ecf4 <ip_reass_dequeue_datagram+0x4c>)
 801ecb4:	681b      	ldr	r3, [r3, #0]
 801ecb6:	687a      	ldr	r2, [r7, #4]
 801ecb8:	429a      	cmp	r2, r3
 801ecba:	d104      	bne.n	801ecc6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	4a0c      	ldr	r2, [pc, #48]	; (801ecf4 <ip_reass_dequeue_datagram+0x4c>)
 801ecc2:	6013      	str	r3, [r2, #0]
 801ecc4:	e00d      	b.n	801ece2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801ecc6:	683b      	ldr	r3, [r7, #0]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	d106      	bne.n	801ecda <ip_reass_dequeue_datagram+0x32>
 801eccc:	4b0a      	ldr	r3, [pc, #40]	; (801ecf8 <ip_reass_dequeue_datagram+0x50>)
 801ecce:	f240 1245 	movw	r2, #325	; 0x145
 801ecd2:	490a      	ldr	r1, [pc, #40]	; (801ecfc <ip_reass_dequeue_datagram+0x54>)
 801ecd4:	480a      	ldr	r0, [pc, #40]	; (801ed00 <ip_reass_dequeue_datagram+0x58>)
 801ecd6:	f001 fd47 	bl	8020768 <iprintf>
    prev->next = ipr->next;
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	681a      	ldr	r2, [r3, #0]
 801ecde:	683b      	ldr	r3, [r7, #0]
 801ece0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ece2:	6879      	ldr	r1, [r7, #4]
 801ece4:	2004      	movs	r0, #4
 801ece6:	f7f5 faf9 	bl	80142dc <memp_free>
}
 801ecea:	bf00      	nop
 801ecec:	3708      	adds	r7, #8
 801ecee:	46bd      	mov	sp, r7
 801ecf0:	bd80      	pop	{r7, pc}
 801ecf2:	bf00      	nop
 801ecf4:	2400ccd8 	.word	0x2400ccd8
 801ecf8:	08024218 	.word	0x08024218
 801ecfc:	080242e0 	.word	0x080242e0
 801ed00:	08024260 	.word	0x08024260

0801ed04 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ed04:	b580      	push	{r7, lr}
 801ed06:	b08c      	sub	sp, #48	; 0x30
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	60f8      	str	r0, [r7, #12]
 801ed0c:	60b9      	str	r1, [r7, #8]
 801ed0e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ed10:	2300      	movs	r3, #0
 801ed12:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ed14:	2301      	movs	r3, #1
 801ed16:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ed18:	68bb      	ldr	r3, [r7, #8]
 801ed1a:	685b      	ldr	r3, [r3, #4]
 801ed1c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ed1e:	69fb      	ldr	r3, [r7, #28]
 801ed20:	885b      	ldrh	r3, [r3, #2]
 801ed22:	b29b      	uxth	r3, r3
 801ed24:	4618      	mov	r0, r3
 801ed26:	f7f4 fcd3 	bl	80136d0 <lwip_htons>
 801ed2a:	4603      	mov	r3, r0
 801ed2c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ed2e:	69fb      	ldr	r3, [r7, #28]
 801ed30:	781b      	ldrb	r3, [r3, #0]
 801ed32:	f003 030f 	and.w	r3, r3, #15
 801ed36:	b2db      	uxtb	r3, r3
 801ed38:	009b      	lsls	r3, r3, #2
 801ed3a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ed3c:	7e7b      	ldrb	r3, [r7, #25]
 801ed3e:	b29b      	uxth	r3, r3
 801ed40:	8b7a      	ldrh	r2, [r7, #26]
 801ed42:	429a      	cmp	r2, r3
 801ed44:	d202      	bcs.n	801ed4c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ed46:	f04f 33ff 	mov.w	r3, #4294967295
 801ed4a:	e135      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ed4c:	7e7b      	ldrb	r3, [r7, #25]
 801ed4e:	b29b      	uxth	r3, r3
 801ed50:	8b7a      	ldrh	r2, [r7, #26]
 801ed52:	1ad3      	subs	r3, r2, r3
 801ed54:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ed56:	69fb      	ldr	r3, [r7, #28]
 801ed58:	88db      	ldrh	r3, [r3, #6]
 801ed5a:	b29b      	uxth	r3, r3
 801ed5c:	4618      	mov	r0, r3
 801ed5e:	f7f4 fcb7 	bl	80136d0 <lwip_htons>
 801ed62:	4603      	mov	r3, r0
 801ed64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ed68:	b29b      	uxth	r3, r3
 801ed6a:	00db      	lsls	r3, r3, #3
 801ed6c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ed6e:	68bb      	ldr	r3, [r7, #8]
 801ed70:	685b      	ldr	r3, [r3, #4]
 801ed72:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed76:	2200      	movs	r2, #0
 801ed78:	701a      	strb	r2, [r3, #0]
 801ed7a:	2200      	movs	r2, #0
 801ed7c:	705a      	strb	r2, [r3, #1]
 801ed7e:	2200      	movs	r2, #0
 801ed80:	709a      	strb	r2, [r3, #2]
 801ed82:	2200      	movs	r2, #0
 801ed84:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ed86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed88:	8afa      	ldrh	r2, [r7, #22]
 801ed8a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ed8c:	8afa      	ldrh	r2, [r7, #22]
 801ed8e:	8b7b      	ldrh	r3, [r7, #26]
 801ed90:	4413      	add	r3, r2
 801ed92:	b29a      	uxth	r2, r3
 801ed94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed96:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ed9a:	88db      	ldrh	r3, [r3, #6]
 801ed9c:	b29b      	uxth	r3, r3
 801ed9e:	8afa      	ldrh	r2, [r7, #22]
 801eda0:	429a      	cmp	r2, r3
 801eda2:	d902      	bls.n	801edaa <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eda4:	f04f 33ff 	mov.w	r3, #4294967295
 801eda8:	e106      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	685b      	ldr	r3, [r3, #4]
 801edae:	627b      	str	r3, [r7, #36]	; 0x24
 801edb0:	e068      	b.n	801ee84 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801edb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801edb4:	685b      	ldr	r3, [r3, #4]
 801edb6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801edb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edba:	889b      	ldrh	r3, [r3, #4]
 801edbc:	b29a      	uxth	r2, r3
 801edbe:	693b      	ldr	r3, [r7, #16]
 801edc0:	889b      	ldrh	r3, [r3, #4]
 801edc2:	b29b      	uxth	r3, r3
 801edc4:	429a      	cmp	r2, r3
 801edc6:	d235      	bcs.n	801ee34 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801edc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801edcc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d020      	beq.n	801ee16 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801edd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801edd6:	889b      	ldrh	r3, [r3, #4]
 801edd8:	b29a      	uxth	r2, r3
 801edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eddc:	88db      	ldrh	r3, [r3, #6]
 801edde:	b29b      	uxth	r3, r3
 801ede0:	429a      	cmp	r2, r3
 801ede2:	d307      	bcc.n	801edf4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ede6:	88db      	ldrh	r3, [r3, #6]
 801ede8:	b29a      	uxth	r2, r3
 801edea:	693b      	ldr	r3, [r7, #16]
 801edec:	889b      	ldrh	r3, [r3, #4]
 801edee:	b29b      	uxth	r3, r3
 801edf0:	429a      	cmp	r2, r3
 801edf2:	d902      	bls.n	801edfa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801edf4:	f04f 33ff 	mov.w	r3, #4294967295
 801edf8:	e0de      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801edfc:	68ba      	ldr	r2, [r7, #8]
 801edfe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ee00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee02:	88db      	ldrh	r3, [r3, #6]
 801ee04:	b29a      	uxth	r2, r3
 801ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee08:	889b      	ldrh	r3, [r3, #4]
 801ee0a:	b29b      	uxth	r3, r3
 801ee0c:	429a      	cmp	r2, r3
 801ee0e:	d03d      	beq.n	801ee8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ee10:	2300      	movs	r3, #0
 801ee12:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ee14:	e03a      	b.n	801ee8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee18:	88db      	ldrh	r3, [r3, #6]
 801ee1a:	b29a      	uxth	r2, r3
 801ee1c:	693b      	ldr	r3, [r7, #16]
 801ee1e:	889b      	ldrh	r3, [r3, #4]
 801ee20:	b29b      	uxth	r3, r3
 801ee22:	429a      	cmp	r2, r3
 801ee24:	d902      	bls.n	801ee2c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee26:	f04f 33ff 	mov.w	r3, #4294967295
 801ee2a:	e0c5      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	68ba      	ldr	r2, [r7, #8]
 801ee30:	605a      	str	r2, [r3, #4]
      break;
 801ee32:	e02b      	b.n	801ee8c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee36:	889b      	ldrh	r3, [r3, #4]
 801ee38:	b29a      	uxth	r2, r3
 801ee3a:	693b      	ldr	r3, [r7, #16]
 801ee3c:	889b      	ldrh	r3, [r3, #4]
 801ee3e:	b29b      	uxth	r3, r3
 801ee40:	429a      	cmp	r2, r3
 801ee42:	d102      	bne.n	801ee4a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee44:	f04f 33ff 	mov.w	r3, #4294967295
 801ee48:	e0b6      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee4c:	889b      	ldrh	r3, [r3, #4]
 801ee4e:	b29a      	uxth	r2, r3
 801ee50:	693b      	ldr	r3, [r7, #16]
 801ee52:	88db      	ldrh	r3, [r3, #6]
 801ee54:	b29b      	uxth	r3, r3
 801ee56:	429a      	cmp	r2, r3
 801ee58:	d202      	bcs.n	801ee60 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ee5e:	e0ab      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d009      	beq.n	801ee7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ee66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee68:	88db      	ldrh	r3, [r3, #6]
 801ee6a:	b29a      	uxth	r2, r3
 801ee6c:	693b      	ldr	r3, [r7, #16]
 801ee6e:	889b      	ldrh	r3, [r3, #4]
 801ee70:	b29b      	uxth	r3, r3
 801ee72:	429a      	cmp	r2, r3
 801ee74:	d001      	beq.n	801ee7a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ee76:	2300      	movs	r3, #0
 801ee78:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ee7a:	693b      	ldr	r3, [r7, #16]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ee80:	693b      	ldr	r3, [r7, #16]
 801ee82:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee86:	2b00      	cmp	r3, #0
 801ee88:	d193      	bne.n	801edb2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ee8a:	e000      	b.n	801ee8e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ee8c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d12d      	bne.n	801eef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ee94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee96:	2b00      	cmp	r3, #0
 801ee98:	d01c      	beq.n	801eed4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ee9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ee9c:	88db      	ldrh	r3, [r3, #6]
 801ee9e:	b29a      	uxth	r2, r3
 801eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eea2:	889b      	ldrh	r3, [r3, #4]
 801eea4:	b29b      	uxth	r3, r3
 801eea6:	429a      	cmp	r2, r3
 801eea8:	d906      	bls.n	801eeb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801eeaa:	4b45      	ldr	r3, [pc, #276]	; (801efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801eeac:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801eeb0:	4944      	ldr	r1, [pc, #272]	; (801efc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801eeb2:	4845      	ldr	r0, [pc, #276]	; (801efc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801eeb4:	f001 fc58 	bl	8020768 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eeba:	68ba      	ldr	r2, [r7, #8]
 801eebc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801eebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eec0:	88db      	ldrh	r3, [r3, #6]
 801eec2:	b29a      	uxth	r2, r3
 801eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eec6:	889b      	ldrh	r3, [r3, #4]
 801eec8:	b29b      	uxth	r3, r3
 801eeca:	429a      	cmp	r2, r3
 801eecc:	d010      	beq.n	801eef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801eece:	2300      	movs	r3, #0
 801eed0:	623b      	str	r3, [r7, #32]
 801eed2:	e00d      	b.n	801eef0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801eed4:	68fb      	ldr	r3, [r7, #12]
 801eed6:	685b      	ldr	r3, [r3, #4]
 801eed8:	2b00      	cmp	r3, #0
 801eeda:	d006      	beq.n	801eeea <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801eedc:	4b38      	ldr	r3, [pc, #224]	; (801efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801eede:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801eee2:	493a      	ldr	r1, [pc, #232]	; (801efcc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801eee4:	4838      	ldr	r0, [pc, #224]	; (801efc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801eee6:	f001 fc3f 	bl	8020768 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	68ba      	ldr	r2, [r7, #8]
 801eeee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d105      	bne.n	801ef02 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	7f9b      	ldrb	r3, [r3, #30]
 801eefa:	f003 0301 	and.w	r3, r3, #1
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d059      	beq.n	801efb6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ef02:	6a3b      	ldr	r3, [r7, #32]
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d04f      	beq.n	801efa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	685b      	ldr	r3, [r3, #4]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d006      	beq.n	801ef1e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ef10:	68fb      	ldr	r3, [r7, #12]
 801ef12:	685b      	ldr	r3, [r3, #4]
 801ef14:	685b      	ldr	r3, [r3, #4]
 801ef16:	889b      	ldrh	r3, [r3, #4]
 801ef18:	b29b      	uxth	r3, r3
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d002      	beq.n	801ef24 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ef1e:	2300      	movs	r3, #0
 801ef20:	623b      	str	r3, [r7, #32]
 801ef22:	e041      	b.n	801efa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef26:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ef28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ef2e:	e012      	b.n	801ef56 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef32:	685b      	ldr	r3, [r3, #4]
 801ef34:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef38:	88db      	ldrh	r3, [r3, #6]
 801ef3a:	b29a      	uxth	r2, r3
 801ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef3e:	889b      	ldrh	r3, [r3, #4]
 801ef40:	b29b      	uxth	r3, r3
 801ef42:	429a      	cmp	r2, r3
 801ef44:	d002      	beq.n	801ef4c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ef46:	2300      	movs	r3, #0
 801ef48:	623b      	str	r3, [r7, #32]
            break;
 801ef4a:	e007      	b.n	801ef5c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef4e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ef50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef52:	681b      	ldr	r3, [r3, #0]
 801ef54:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d1e9      	bne.n	801ef30 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ef5c:	6a3b      	ldr	r3, [r7, #32]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d022      	beq.n	801efa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ef62:	68fb      	ldr	r3, [r7, #12]
 801ef64:	685b      	ldr	r3, [r3, #4]
 801ef66:	2b00      	cmp	r3, #0
 801ef68:	d106      	bne.n	801ef78 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ef6a:	4b15      	ldr	r3, [pc, #84]	; (801efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef6c:	f240 12df 	movw	r2, #479	; 0x1df
 801ef70:	4917      	ldr	r1, [pc, #92]	; (801efd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ef72:	4815      	ldr	r0, [pc, #84]	; (801efc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ef74:	f001 fbf8 	bl	8020768 <iprintf>
          LWIP_ASSERT("sanity check",
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	685b      	ldr	r3, [r3, #4]
 801ef7c:	685b      	ldr	r3, [r3, #4]
 801ef7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ef80:	429a      	cmp	r2, r3
 801ef82:	d106      	bne.n	801ef92 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ef84:	4b0e      	ldr	r3, [pc, #56]	; (801efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ef8a:	4911      	ldr	r1, [pc, #68]	; (801efd0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ef8c:	480e      	ldr	r0, [pc, #56]	; (801efc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ef8e:	f001 fbeb 	bl	8020768 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	2b00      	cmp	r3, #0
 801ef98:	d006      	beq.n	801efa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ef9a:	4b09      	ldr	r3, [pc, #36]	; (801efc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ef9c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801efa0:	490c      	ldr	r1, [pc, #48]	; (801efd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801efa2:	4809      	ldr	r0, [pc, #36]	; (801efc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801efa4:	f001 fbe0 	bl	8020768 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801efa8:	6a3b      	ldr	r3, [r7, #32]
 801efaa:	2b00      	cmp	r3, #0
 801efac:	bf14      	ite	ne
 801efae:	2301      	movne	r3, #1
 801efb0:	2300      	moveq	r3, #0
 801efb2:	b2db      	uxtb	r3, r3
 801efb4:	e000      	b.n	801efb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801efb6:	2300      	movs	r3, #0
}
 801efb8:	4618      	mov	r0, r3
 801efba:	3730      	adds	r7, #48	; 0x30
 801efbc:	46bd      	mov	sp, r7
 801efbe:	bd80      	pop	{r7, pc}
 801efc0:	08024218 	.word	0x08024218
 801efc4:	080242fc 	.word	0x080242fc
 801efc8:	08024260 	.word	0x08024260
 801efcc:	0802431c 	.word	0x0802431c
 801efd0:	08024354 	.word	0x08024354
 801efd4:	08024364 	.word	0x08024364

0801efd8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801efd8:	b580      	push	{r7, lr}
 801efda:	b08e      	sub	sp, #56	; 0x38
 801efdc:	af00      	add	r7, sp, #0
 801efde:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	685b      	ldr	r3, [r3, #4]
 801efe4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801efe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efe8:	781b      	ldrb	r3, [r3, #0]
 801efea:	f003 030f 	and.w	r3, r3, #15
 801efee:	b2db      	uxtb	r3, r3
 801eff0:	009b      	lsls	r3, r3, #2
 801eff2:	b2db      	uxtb	r3, r3
 801eff4:	2b14      	cmp	r3, #20
 801eff6:	f040 8171 	bne.w	801f2dc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801effa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801effc:	88db      	ldrh	r3, [r3, #6]
 801effe:	b29b      	uxth	r3, r3
 801f000:	4618      	mov	r0, r3
 801f002:	f7f4 fb65 	bl	80136d0 <lwip_htons>
 801f006:	4603      	mov	r3, r0
 801f008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	00db      	lsls	r3, r3, #3
 801f010:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f014:	885b      	ldrh	r3, [r3, #2]
 801f016:	b29b      	uxth	r3, r3
 801f018:	4618      	mov	r0, r3
 801f01a:	f7f4 fb59 	bl	80136d0 <lwip_htons>
 801f01e:	4603      	mov	r3, r0
 801f020:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f024:	781b      	ldrb	r3, [r3, #0]
 801f026:	f003 030f 	and.w	r3, r3, #15
 801f02a:	b2db      	uxtb	r3, r3
 801f02c:	009b      	lsls	r3, r3, #2
 801f02e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801f032:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f036:	b29b      	uxth	r3, r3
 801f038:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f03a:	429a      	cmp	r2, r3
 801f03c:	f0c0 8150 	bcc.w	801f2e0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f044:	b29b      	uxth	r3, r3
 801f046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f048:	1ad3      	subs	r3, r2, r3
 801f04a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f04c:	6878      	ldr	r0, [r7, #4]
 801f04e:	f7f6 f883 	bl	8015158 <pbuf_clen>
 801f052:	4603      	mov	r3, r0
 801f054:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f056:	4b8c      	ldr	r3, [pc, #560]	; (801f288 <ip4_reass+0x2b0>)
 801f058:	881b      	ldrh	r3, [r3, #0]
 801f05a:	461a      	mov	r2, r3
 801f05c:	8c3b      	ldrh	r3, [r7, #32]
 801f05e:	4413      	add	r3, r2
 801f060:	2b0a      	cmp	r3, #10
 801f062:	dd10      	ble.n	801f086 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f064:	8c3b      	ldrh	r3, [r7, #32]
 801f066:	4619      	mov	r1, r3
 801f068:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f06a:	f7ff fd81 	bl	801eb70 <ip_reass_remove_oldest_datagram>
 801f06e:	4603      	mov	r3, r0
 801f070:	2b00      	cmp	r3, #0
 801f072:	f000 8137 	beq.w	801f2e4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f076:	4b84      	ldr	r3, [pc, #528]	; (801f288 <ip4_reass+0x2b0>)
 801f078:	881b      	ldrh	r3, [r3, #0]
 801f07a:	461a      	mov	r2, r3
 801f07c:	8c3b      	ldrh	r3, [r7, #32]
 801f07e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f080:	2b0a      	cmp	r3, #10
 801f082:	f300 812f 	bgt.w	801f2e4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f086:	4b81      	ldr	r3, [pc, #516]	; (801f28c <ip4_reass+0x2b4>)
 801f088:	681b      	ldr	r3, [r3, #0]
 801f08a:	633b      	str	r3, [r7, #48]	; 0x30
 801f08c:	e015      	b.n	801f0ba <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f090:	695a      	ldr	r2, [r3, #20]
 801f092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f094:	68db      	ldr	r3, [r3, #12]
 801f096:	429a      	cmp	r2, r3
 801f098:	d10c      	bne.n	801f0b4 <ip4_reass+0xdc>
 801f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f09c:	699a      	ldr	r2, [r3, #24]
 801f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0a0:	691b      	ldr	r3, [r3, #16]
 801f0a2:	429a      	cmp	r2, r3
 801f0a4:	d106      	bne.n	801f0b4 <ip4_reass+0xdc>
 801f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0a8:	899a      	ldrh	r2, [r3, #12]
 801f0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0ac:	889b      	ldrh	r3, [r3, #4]
 801f0ae:	b29b      	uxth	r3, r3
 801f0b0:	429a      	cmp	r2, r3
 801f0b2:	d006      	beq.n	801f0c2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	633b      	str	r3, [r7, #48]	; 0x30
 801f0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d1e6      	bne.n	801f08e <ip4_reass+0xb6>
 801f0c0:	e000      	b.n	801f0c4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f0c2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d109      	bne.n	801f0de <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f0ca:	8c3b      	ldrh	r3, [r7, #32]
 801f0cc:	4619      	mov	r1, r3
 801f0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f0d0:	f7ff fdb0 	bl	801ec34 <ip_reass_enqueue_new_datagram>
 801f0d4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0d8:	2b00      	cmp	r3, #0
 801f0da:	d11c      	bne.n	801f116 <ip4_reass+0x13e>
      goto nullreturn;
 801f0dc:	e105      	b.n	801f2ea <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0e0:	88db      	ldrh	r3, [r3, #6]
 801f0e2:	b29b      	uxth	r3, r3
 801f0e4:	4618      	mov	r0, r3
 801f0e6:	f7f4 faf3 	bl	80136d0 <lwip_htons>
 801f0ea:	4603      	mov	r3, r0
 801f0ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f0f0:	2b00      	cmp	r3, #0
 801f0f2:	d110      	bne.n	801f116 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f0f6:	89db      	ldrh	r3, [r3, #14]
 801f0f8:	4618      	mov	r0, r3
 801f0fa:	f7f4 fae9 	bl	80136d0 <lwip_htons>
 801f0fe:	4603      	mov	r3, r0
 801f100:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f104:	2b00      	cmp	r3, #0
 801f106:	d006      	beq.n	801f116 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f10a:	3308      	adds	r3, #8
 801f10c:	2214      	movs	r2, #20
 801f10e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f110:	4618      	mov	r0, r3
 801f112:	f001 fa7e 	bl	8020612 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f118:	88db      	ldrh	r3, [r3, #6]
 801f11a:	b29b      	uxth	r3, r3
 801f11c:	f003 0320 	and.w	r3, r3, #32
 801f120:	2b00      	cmp	r3, #0
 801f122:	bf0c      	ite	eq
 801f124:	2301      	moveq	r3, #1
 801f126:	2300      	movne	r3, #0
 801f128:	b2db      	uxtb	r3, r3
 801f12a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f12c:	69fb      	ldr	r3, [r7, #28]
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d00e      	beq.n	801f150 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f132:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f136:	4413      	add	r3, r2
 801f138:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f13a:	8b7a      	ldrh	r2, [r7, #26]
 801f13c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f13e:	429a      	cmp	r2, r3
 801f140:	f0c0 80a0 	bcc.w	801f284 <ip4_reass+0x2ac>
 801f144:	8b7b      	ldrh	r3, [r7, #26]
 801f146:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f14a:	4293      	cmp	r3, r2
 801f14c:	f200 809a 	bhi.w	801f284 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f150:	69fa      	ldr	r2, [r7, #28]
 801f152:	6879      	ldr	r1, [r7, #4]
 801f154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f156:	f7ff fdd5 	bl	801ed04 <ip_reass_chain_frag_into_datagram_and_validate>
 801f15a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f15c:	697b      	ldr	r3, [r7, #20]
 801f15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f162:	f000 809b 	beq.w	801f29c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f166:	4b48      	ldr	r3, [pc, #288]	; (801f288 <ip4_reass+0x2b0>)
 801f168:	881a      	ldrh	r2, [r3, #0]
 801f16a:	8c3b      	ldrh	r3, [r7, #32]
 801f16c:	4413      	add	r3, r2
 801f16e:	b29a      	uxth	r2, r3
 801f170:	4b45      	ldr	r3, [pc, #276]	; (801f288 <ip4_reass+0x2b0>)
 801f172:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f174:	69fb      	ldr	r3, [r7, #28]
 801f176:	2b00      	cmp	r3, #0
 801f178:	d00d      	beq.n	801f196 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f17a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f17c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f17e:	4413      	add	r3, r2
 801f180:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f184:	8a7a      	ldrh	r2, [r7, #18]
 801f186:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f18a:	7f9b      	ldrb	r3, [r3, #30]
 801f18c:	f043 0301 	orr.w	r3, r3, #1
 801f190:	b2da      	uxtb	r2, r3
 801f192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f194:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f196:	697b      	ldr	r3, [r7, #20]
 801f198:	2b01      	cmp	r3, #1
 801f19a:	d171      	bne.n	801f280 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f19e:	8b9b      	ldrh	r3, [r3, #28]
 801f1a0:	3314      	adds	r3, #20
 801f1a2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1a6:	685b      	ldr	r3, [r3, #4]
 801f1a8:	685b      	ldr	r3, [r3, #4]
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1b0:	685b      	ldr	r3, [r3, #4]
 801f1b2:	685b      	ldr	r3, [r3, #4]
 801f1b4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1b8:	3308      	adds	r3, #8
 801f1ba:	2214      	movs	r2, #20
 801f1bc:	4619      	mov	r1, r3
 801f1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f1c0:	f001 fa27 	bl	8020612 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f1c4:	8a3b      	ldrh	r3, [r7, #16]
 801f1c6:	4618      	mov	r0, r3
 801f1c8:	f7f4 fa82 	bl	80136d0 <lwip_htons>
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	461a      	mov	r2, r3
 801f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1d2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1d6:	2200      	movs	r2, #0
 801f1d8:	719a      	strb	r2, [r3, #6]
 801f1da:	2200      	movs	r2, #0
 801f1dc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1e0:	2200      	movs	r2, #0
 801f1e2:	729a      	strb	r2, [r3, #10]
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1ea:	685b      	ldr	r3, [r3, #4]
 801f1ec:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f1ee:	e00d      	b.n	801f20c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1f2:	685b      	ldr	r3, [r3, #4]
 801f1f4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f1f6:	2114      	movs	r1, #20
 801f1f8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f1fa:	f7f5 fe99 	bl	8014f30 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f1fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f200:	6878      	ldr	r0, [r7, #4]
 801f202:	f7f5 ffe9 	bl	80151d8 <pbuf_cat>
      r = iprh->next_pbuf;
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801f20c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d1ee      	bne.n	801f1f0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f212:	4b1e      	ldr	r3, [pc, #120]	; (801f28c <ip4_reass+0x2b4>)
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f218:	429a      	cmp	r2, r3
 801f21a:	d102      	bne.n	801f222 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f21c:	2300      	movs	r3, #0
 801f21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f220:	e010      	b.n	801f244 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f222:	4b1a      	ldr	r3, [pc, #104]	; (801f28c <ip4_reass+0x2b4>)
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f228:	e007      	b.n	801f23a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f22c:	681b      	ldr	r3, [r3, #0]
 801f22e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f230:	429a      	cmp	r2, r3
 801f232:	d006      	beq.n	801f242 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d1f4      	bne.n	801f22a <ip4_reass+0x252>
 801f240:	e000      	b.n	801f244 <ip4_reass+0x26c>
          break;
 801f242:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f248:	f7ff fd2e 	bl	801eca8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f24c:	6878      	ldr	r0, [r7, #4]
 801f24e:	f7f5 ff83 	bl	8015158 <pbuf_clen>
 801f252:	4603      	mov	r3, r0
 801f254:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f256:	4b0c      	ldr	r3, [pc, #48]	; (801f288 <ip4_reass+0x2b0>)
 801f258:	881b      	ldrh	r3, [r3, #0]
 801f25a:	8c3a      	ldrh	r2, [r7, #32]
 801f25c:	429a      	cmp	r2, r3
 801f25e:	d906      	bls.n	801f26e <ip4_reass+0x296>
 801f260:	4b0b      	ldr	r3, [pc, #44]	; (801f290 <ip4_reass+0x2b8>)
 801f262:	f240 229b 	movw	r2, #667	; 0x29b
 801f266:	490b      	ldr	r1, [pc, #44]	; (801f294 <ip4_reass+0x2bc>)
 801f268:	480b      	ldr	r0, [pc, #44]	; (801f298 <ip4_reass+0x2c0>)
 801f26a:	f001 fa7d 	bl	8020768 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f26e:	4b06      	ldr	r3, [pc, #24]	; (801f288 <ip4_reass+0x2b0>)
 801f270:	881a      	ldrh	r2, [r3, #0]
 801f272:	8c3b      	ldrh	r3, [r7, #32]
 801f274:	1ad3      	subs	r3, r2, r3
 801f276:	b29a      	uxth	r2, r3
 801f278:	4b03      	ldr	r3, [pc, #12]	; (801f288 <ip4_reass+0x2b0>)
 801f27a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	e038      	b.n	801f2f2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f280:	2300      	movs	r3, #0
 801f282:	e036      	b.n	801f2f2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f284:	bf00      	nop
 801f286:	e00a      	b.n	801f29e <ip4_reass+0x2c6>
 801f288:	2400ccdc 	.word	0x2400ccdc
 801f28c:	2400ccd8 	.word	0x2400ccd8
 801f290:	08024218 	.word	0x08024218
 801f294:	08024388 	.word	0x08024388
 801f298:	08024260 	.word	0x08024260
    goto nullreturn_ipr;
 801f29c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d106      	bne.n	801f2b2 <ip4_reass+0x2da>
 801f2a4:	4b15      	ldr	r3, [pc, #84]	; (801f2fc <ip4_reass+0x324>)
 801f2a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801f2aa:	4915      	ldr	r1, [pc, #84]	; (801f300 <ip4_reass+0x328>)
 801f2ac:	4815      	ldr	r0, [pc, #84]	; (801f304 <ip4_reass+0x32c>)
 801f2ae:	f001 fa5b 	bl	8020768 <iprintf>
  if (ipr->p == NULL) {
 801f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2b4:	685b      	ldr	r3, [r3, #4]
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d116      	bne.n	801f2e8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f2ba:	4b13      	ldr	r3, [pc, #76]	; (801f308 <ip4_reass+0x330>)
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f2c0:	429a      	cmp	r2, r3
 801f2c2:	d006      	beq.n	801f2d2 <ip4_reass+0x2fa>
 801f2c4:	4b0d      	ldr	r3, [pc, #52]	; (801f2fc <ip4_reass+0x324>)
 801f2c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f2ca:	4910      	ldr	r1, [pc, #64]	; (801f30c <ip4_reass+0x334>)
 801f2cc:	480d      	ldr	r0, [pc, #52]	; (801f304 <ip4_reass+0x32c>)
 801f2ce:	f001 fa4b 	bl	8020768 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f2d2:	2100      	movs	r1, #0
 801f2d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f2d6:	f7ff fce7 	bl	801eca8 <ip_reass_dequeue_datagram>
 801f2da:	e006      	b.n	801f2ea <ip4_reass+0x312>
    goto nullreturn;
 801f2dc:	bf00      	nop
 801f2de:	e004      	b.n	801f2ea <ip4_reass+0x312>
    goto nullreturn;
 801f2e0:	bf00      	nop
 801f2e2:	e002      	b.n	801f2ea <ip4_reass+0x312>
      goto nullreturn;
 801f2e4:	bf00      	nop
 801f2e6:	e000      	b.n	801f2ea <ip4_reass+0x312>
  }

nullreturn:
 801f2e8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801f2ea:	6878      	ldr	r0, [r7, #4]
 801f2ec:	f7f5 fea6 	bl	801503c <pbuf_free>
  return NULL;
 801f2f0:	2300      	movs	r3, #0
}
 801f2f2:	4618      	mov	r0, r3
 801f2f4:	3738      	adds	r7, #56	; 0x38
 801f2f6:	46bd      	mov	sp, r7
 801f2f8:	bd80      	pop	{r7, pc}
 801f2fa:	bf00      	nop
 801f2fc:	08024218 	.word	0x08024218
 801f300:	080243a4 	.word	0x080243a4
 801f304:	08024260 	.word	0x08024260
 801f308:	2400ccd8 	.word	0x2400ccd8
 801f30c:	080243b0 	.word	0x080243b0

0801f310 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f310:	b580      	push	{r7, lr}
 801f312:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f314:	2005      	movs	r0, #5
 801f316:	f7f4 ff6b 	bl	80141f0 <memp_malloc>
 801f31a:	4603      	mov	r3, r0
}
 801f31c:	4618      	mov	r0, r3
 801f31e:	bd80      	pop	{r7, pc}

0801f320 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f320:	b580      	push	{r7, lr}
 801f322:	b082      	sub	sp, #8
 801f324:	af00      	add	r7, sp, #0
 801f326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d106      	bne.n	801f33c <ip_frag_free_pbuf_custom_ref+0x1c>
 801f32e:	4b07      	ldr	r3, [pc, #28]	; (801f34c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f330:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801f334:	4906      	ldr	r1, [pc, #24]	; (801f350 <ip_frag_free_pbuf_custom_ref+0x30>)
 801f336:	4807      	ldr	r0, [pc, #28]	; (801f354 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f338:	f001 fa16 	bl	8020768 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f33c:	6879      	ldr	r1, [r7, #4]
 801f33e:	2005      	movs	r0, #5
 801f340:	f7f4 ffcc 	bl	80142dc <memp_free>
}
 801f344:	bf00      	nop
 801f346:	3708      	adds	r7, #8
 801f348:	46bd      	mov	sp, r7
 801f34a:	bd80      	pop	{r7, pc}
 801f34c:	08024218 	.word	0x08024218
 801f350:	080243d0 	.word	0x080243d0
 801f354:	08024260 	.word	0x08024260

0801f358 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f358:	b580      	push	{r7, lr}
 801f35a:	b084      	sub	sp, #16
 801f35c:	af00      	add	r7, sp, #0
 801f35e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	2b00      	cmp	r3, #0
 801f368:	d106      	bne.n	801f378 <ipfrag_free_pbuf_custom+0x20>
 801f36a:	4b11      	ldr	r3, [pc, #68]	; (801f3b0 <ipfrag_free_pbuf_custom+0x58>)
 801f36c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801f370:	4910      	ldr	r1, [pc, #64]	; (801f3b4 <ipfrag_free_pbuf_custom+0x5c>)
 801f372:	4811      	ldr	r0, [pc, #68]	; (801f3b8 <ipfrag_free_pbuf_custom+0x60>)
 801f374:	f001 f9f8 	bl	8020768 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f378:	68fa      	ldr	r2, [r7, #12]
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	429a      	cmp	r2, r3
 801f37e:	d006      	beq.n	801f38e <ipfrag_free_pbuf_custom+0x36>
 801f380:	4b0b      	ldr	r3, [pc, #44]	; (801f3b0 <ipfrag_free_pbuf_custom+0x58>)
 801f382:	f240 22cf 	movw	r2, #719	; 0x2cf
 801f386:	490d      	ldr	r1, [pc, #52]	; (801f3bc <ipfrag_free_pbuf_custom+0x64>)
 801f388:	480b      	ldr	r0, [pc, #44]	; (801f3b8 <ipfrag_free_pbuf_custom+0x60>)
 801f38a:	f001 f9ed 	bl	8020768 <iprintf>
  if (pcr->original != NULL) {
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	695b      	ldr	r3, [r3, #20]
 801f392:	2b00      	cmp	r3, #0
 801f394:	d004      	beq.n	801f3a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	695b      	ldr	r3, [r3, #20]
 801f39a:	4618      	mov	r0, r3
 801f39c:	f7f5 fe4e 	bl	801503c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f3a0:	68f8      	ldr	r0, [r7, #12]
 801f3a2:	f7ff ffbd 	bl	801f320 <ip_frag_free_pbuf_custom_ref>
}
 801f3a6:	bf00      	nop
 801f3a8:	3710      	adds	r7, #16
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	bd80      	pop	{r7, pc}
 801f3ae:	bf00      	nop
 801f3b0:	08024218 	.word	0x08024218
 801f3b4:	080243dc 	.word	0x080243dc
 801f3b8:	08024260 	.word	0x08024260
 801f3bc:	080243e8 	.word	0x080243e8

0801f3c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f3c0:	b580      	push	{r7, lr}
 801f3c2:	b094      	sub	sp, #80	; 0x50
 801f3c4:	af02      	add	r7, sp, #8
 801f3c6:	60f8      	str	r0, [r7, #12]
 801f3c8:	60b9      	str	r1, [r7, #8]
 801f3ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f3cc:	2300      	movs	r3, #0
 801f3ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f3d2:	68bb      	ldr	r3, [r7, #8]
 801f3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f3d6:	3b14      	subs	r3, #20
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	da00      	bge.n	801f3de <ip4_frag+0x1e>
 801f3dc:	3307      	adds	r3, #7
 801f3de:	10db      	asrs	r3, r3, #3
 801f3e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f3e2:	2314      	movs	r3, #20
 801f3e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801f3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f3ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f3f2:	781b      	ldrb	r3, [r3, #0]
 801f3f4:	f003 030f 	and.w	r3, r3, #15
 801f3f8:	b2db      	uxtb	r3, r3
 801f3fa:	009b      	lsls	r3, r3, #2
 801f3fc:	b2db      	uxtb	r3, r3
 801f3fe:	2b14      	cmp	r3, #20
 801f400:	d002      	beq.n	801f408 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f402:	f06f 0305 	mvn.w	r3, #5
 801f406:	e110      	b.n	801f62a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	895b      	ldrh	r3, [r3, #10]
 801f40c:	2b13      	cmp	r3, #19
 801f40e:	d809      	bhi.n	801f424 <ip4_frag+0x64>
 801f410:	4b88      	ldr	r3, [pc, #544]	; (801f634 <ip4_frag+0x274>)
 801f412:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801f416:	4988      	ldr	r1, [pc, #544]	; (801f638 <ip4_frag+0x278>)
 801f418:	4888      	ldr	r0, [pc, #544]	; (801f63c <ip4_frag+0x27c>)
 801f41a:	f001 f9a5 	bl	8020768 <iprintf>
 801f41e:	f06f 0305 	mvn.w	r3, #5
 801f422:	e102      	b.n	801f62a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f426:	88db      	ldrh	r3, [r3, #6]
 801f428:	b29b      	uxth	r3, r3
 801f42a:	4618      	mov	r0, r3
 801f42c:	f7f4 f950 	bl	80136d0 <lwip_htons>
 801f430:	4603      	mov	r3, r0
 801f432:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801f434:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f43a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f43e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f444:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	891b      	ldrh	r3, [r3, #8]
 801f44a:	3b14      	subs	r3, #20
 801f44c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801f450:	e0e1      	b.n	801f616 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f452:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f454:	00db      	lsls	r3, r3, #3
 801f456:	b29b      	uxth	r3, r3
 801f458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f45c:	4293      	cmp	r3, r2
 801f45e:	bf28      	it	cs
 801f460:	4613      	movcs	r3, r2
 801f462:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f464:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f468:	2114      	movs	r1, #20
 801f46a:	200e      	movs	r0, #14
 801f46c:	f7f5 fb02 	bl	8014a74 <pbuf_alloc>
 801f470:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f474:	2b00      	cmp	r3, #0
 801f476:	f000 80d5 	beq.w	801f624 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f47c:	895b      	ldrh	r3, [r3, #10]
 801f47e:	2b13      	cmp	r3, #19
 801f480:	d806      	bhi.n	801f490 <ip4_frag+0xd0>
 801f482:	4b6c      	ldr	r3, [pc, #432]	; (801f634 <ip4_frag+0x274>)
 801f484:	f44f 7249 	mov.w	r2, #804	; 0x324
 801f488:	496d      	ldr	r1, [pc, #436]	; (801f640 <ip4_frag+0x280>)
 801f48a:	486c      	ldr	r0, [pc, #432]	; (801f63c <ip4_frag+0x27c>)
 801f48c:	f001 f96c 	bl	8020768 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f492:	685b      	ldr	r3, [r3, #4]
 801f494:	2214      	movs	r2, #20
 801f496:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f498:	4618      	mov	r0, r3
 801f49a:	f001 f8ba 	bl	8020612 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4a0:	685b      	ldr	r3, [r3, #4]
 801f4a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801f4a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f4a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801f4aa:	e064      	b.n	801f576 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	895a      	ldrh	r2, [r3, #10]
 801f4b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f4b2:	1ad3      	subs	r3, r2, r3
 801f4b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	895b      	ldrh	r3, [r3, #10]
 801f4ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f4bc:	429a      	cmp	r2, r3
 801f4be:	d906      	bls.n	801f4ce <ip4_frag+0x10e>
 801f4c0:	4b5c      	ldr	r3, [pc, #368]	; (801f634 <ip4_frag+0x274>)
 801f4c2:	f240 322d 	movw	r2, #813	; 0x32d
 801f4c6:	495f      	ldr	r1, [pc, #380]	; (801f644 <ip4_frag+0x284>)
 801f4c8:	485c      	ldr	r0, [pc, #368]	; (801f63c <ip4_frag+0x27c>)
 801f4ca:	f001 f94d 	bl	8020768 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f4ce:	8bfa      	ldrh	r2, [r7, #30]
 801f4d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f4d4:	4293      	cmp	r3, r2
 801f4d6:	bf28      	it	cs
 801f4d8:	4613      	movcs	r3, r2
 801f4da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f4de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f4e2:	2b00      	cmp	r3, #0
 801f4e4:	d105      	bne.n	801f4f2 <ip4_frag+0x132>
        poff = 0;
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	681b      	ldr	r3, [r3, #0]
 801f4ee:	60fb      	str	r3, [r7, #12]
        continue;
 801f4f0:	e041      	b.n	801f576 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f4f2:	f7ff ff0d 	bl	801f310 <ip_frag_alloc_pbuf_custom_ref>
 801f4f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f4f8:	69bb      	ldr	r3, [r7, #24]
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	d103      	bne.n	801f506 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f4fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f500:	f7f5 fd9c 	bl	801503c <pbuf_free>
        goto memerr;
 801f504:	e08f      	b.n	801f626 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f506:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f50c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f50e:	4413      	add	r3, r2
 801f510:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801f514:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801f518:	9201      	str	r2, [sp, #4]
 801f51a:	9300      	str	r3, [sp, #0]
 801f51c:	4603      	mov	r3, r0
 801f51e:	2241      	movs	r2, #65	; 0x41
 801f520:	2000      	movs	r0, #0
 801f522:	f7f5 fbd1 	bl	8014cc8 <pbuf_alloced_custom>
 801f526:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f528:	697b      	ldr	r3, [r7, #20]
 801f52a:	2b00      	cmp	r3, #0
 801f52c:	d106      	bne.n	801f53c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f52e:	69b8      	ldr	r0, [r7, #24]
 801f530:	f7ff fef6 	bl	801f320 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f536:	f7f5 fd81 	bl	801503c <pbuf_free>
        goto memerr;
 801f53a:	e074      	b.n	801f626 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f53c:	68f8      	ldr	r0, [r7, #12]
 801f53e:	f7f5 fe23 	bl	8015188 <pbuf_ref>
      pcr->original = p;
 801f542:	69bb      	ldr	r3, [r7, #24]
 801f544:	68fa      	ldr	r2, [r7, #12]
 801f546:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f548:	69bb      	ldr	r3, [r7, #24]
 801f54a:	4a3f      	ldr	r2, [pc, #252]	; (801f648 <ip4_frag+0x288>)
 801f54c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f54e:	6979      	ldr	r1, [r7, #20]
 801f550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f552:	f7f5 fe41 	bl	80151d8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f556:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801f55a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f55e:	1ad3      	subs	r3, r2, r3
 801f560:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801f564:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d004      	beq.n	801f576 <ip4_frag+0x1b6>
        poff = 0;
 801f56c:	2300      	movs	r3, #0
 801f56e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f576:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	d196      	bne.n	801f4ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f57e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f580:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f584:	4413      	add	r3, r2
 801f586:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f588:	68bb      	ldr	r3, [r7, #8]
 801f58a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f58c:	f1a3 0213 	sub.w	r2, r3, #19
 801f590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f594:	429a      	cmp	r2, r3
 801f596:	bfcc      	ite	gt
 801f598:	2301      	movgt	r3, #1
 801f59a:	2300      	movle	r3, #0
 801f59c:	b2db      	uxtb	r3, r3
 801f59e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f5a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f5a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f5a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801f5aa:	6a3b      	ldr	r3, [r7, #32]
 801f5ac:	2b00      	cmp	r3, #0
 801f5ae:	d002      	beq.n	801f5b6 <ip4_frag+0x1f6>
 801f5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5b2:	2b00      	cmp	r3, #0
 801f5b4:	d003      	beq.n	801f5be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f5b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f5b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801f5bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f5be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f5c0:	4618      	mov	r0, r3
 801f5c2:	f7f4 f885 	bl	80136d0 <lwip_htons>
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	461a      	mov	r2, r3
 801f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f5ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f5d0:	3314      	adds	r3, #20
 801f5d2:	b29b      	uxth	r3, r3
 801f5d4:	4618      	mov	r0, r3
 801f5d6:	f7f4 f87b 	bl	80136d0 <lwip_htons>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	461a      	mov	r2, r3
 801f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f5e4:	2200      	movs	r2, #0
 801f5e6:	729a      	strb	r2, [r3, #10]
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f5ec:	68bb      	ldr	r3, [r7, #8]
 801f5ee:	695b      	ldr	r3, [r3, #20]
 801f5f0:	687a      	ldr	r2, [r7, #4]
 801f5f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f5f4:	68b8      	ldr	r0, [r7, #8]
 801f5f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f5f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f5fa:	f7f5 fd1f 	bl	801503c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f5fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f602:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f604:	1ad3      	subs	r3, r2, r3
 801f606:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801f60a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801f60e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f610:	4413      	add	r3, r2
 801f612:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801f616:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	f47f af19 	bne.w	801f452 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f620:	2300      	movs	r3, #0
 801f622:	e002      	b.n	801f62a <ip4_frag+0x26a>
      goto memerr;
 801f624:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f626:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f62a:	4618      	mov	r0, r3
 801f62c:	3748      	adds	r7, #72	; 0x48
 801f62e:	46bd      	mov	sp, r7
 801f630:	bd80      	pop	{r7, pc}
 801f632:	bf00      	nop
 801f634:	08024218 	.word	0x08024218
 801f638:	080243f4 	.word	0x080243f4
 801f63c:	08024260 	.word	0x08024260
 801f640:	08024410 	.word	0x08024410
 801f644:	08024430 	.word	0x08024430
 801f648:	0801f359 	.word	0x0801f359

0801f64c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f64c:	b580      	push	{r7, lr}
 801f64e:	b086      	sub	sp, #24
 801f650:	af00      	add	r7, sp, #0
 801f652:	6078      	str	r0, [r7, #4]
 801f654:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801f656:	230e      	movs	r3, #14
 801f658:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	895b      	ldrh	r3, [r3, #10]
 801f65e:	2b0e      	cmp	r3, #14
 801f660:	d96e      	bls.n	801f740 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	7bdb      	ldrb	r3, [r3, #15]
 801f666:	2b00      	cmp	r3, #0
 801f668:	d106      	bne.n	801f678 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801f66a:	683b      	ldr	r3, [r7, #0]
 801f66c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f670:	3301      	adds	r3, #1
 801f672:	b2da      	uxtb	r2, r3
 801f674:	687b      	ldr	r3, [r7, #4]
 801f676:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	685b      	ldr	r3, [r3, #4]
 801f67c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f67e:	693b      	ldr	r3, [r7, #16]
 801f680:	7b1a      	ldrb	r2, [r3, #12]
 801f682:	7b5b      	ldrb	r3, [r3, #13]
 801f684:	021b      	lsls	r3, r3, #8
 801f686:	4313      	orrs	r3, r2
 801f688:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f68a:	693b      	ldr	r3, [r7, #16]
 801f68c:	781b      	ldrb	r3, [r3, #0]
 801f68e:	f003 0301 	and.w	r3, r3, #1
 801f692:	2b00      	cmp	r3, #0
 801f694:	d023      	beq.n	801f6de <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f696:	693b      	ldr	r3, [r7, #16]
 801f698:	781b      	ldrb	r3, [r3, #0]
 801f69a:	2b01      	cmp	r3, #1
 801f69c:	d10f      	bne.n	801f6be <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f69e:	693b      	ldr	r3, [r7, #16]
 801f6a0:	785b      	ldrb	r3, [r3, #1]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d11b      	bne.n	801f6de <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f6a6:	693b      	ldr	r3, [r7, #16]
 801f6a8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f6aa:	2b5e      	cmp	r3, #94	; 0x5e
 801f6ac:	d117      	bne.n	801f6de <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f6ae:	687b      	ldr	r3, [r7, #4]
 801f6b0:	7b5b      	ldrb	r3, [r3, #13]
 801f6b2:	f043 0310 	orr.w	r3, r3, #16
 801f6b6:	b2da      	uxtb	r2, r3
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	735a      	strb	r2, [r3, #13]
 801f6bc:	e00f      	b.n	801f6de <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f6be:	693b      	ldr	r3, [r7, #16]
 801f6c0:	2206      	movs	r2, #6
 801f6c2:	4928      	ldr	r1, [pc, #160]	; (801f764 <ethernet_input+0x118>)
 801f6c4:	4618      	mov	r0, r3
 801f6c6:	f000 ff94 	bl	80205f2 <memcmp>
 801f6ca:	4603      	mov	r3, r0
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d106      	bne.n	801f6de <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	7b5b      	ldrb	r3, [r3, #13]
 801f6d4:	f043 0308 	orr.w	r3, r3, #8
 801f6d8:	b2da      	uxtb	r2, r3
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f6de:	89fb      	ldrh	r3, [r7, #14]
 801f6e0:	2b08      	cmp	r3, #8
 801f6e2:	d003      	beq.n	801f6ec <ethernet_input+0xa0>
 801f6e4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801f6e8:	d014      	beq.n	801f714 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f6ea:	e032      	b.n	801f752 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f6ec:	683b      	ldr	r3, [r7, #0]
 801f6ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f6f2:	f003 0308 	and.w	r3, r3, #8
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d024      	beq.n	801f744 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f6fa:	8afb      	ldrh	r3, [r7, #22]
 801f6fc:	4619      	mov	r1, r3
 801f6fe:	6878      	ldr	r0, [r7, #4]
 801f700:	f7f5 fc16 	bl	8014f30 <pbuf_remove_header>
 801f704:	4603      	mov	r3, r0
 801f706:	2b00      	cmp	r3, #0
 801f708:	d11e      	bne.n	801f748 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801f70a:	6839      	ldr	r1, [r7, #0]
 801f70c:	6878      	ldr	r0, [r7, #4]
 801f70e:	f7fe ff03 	bl	801e518 <ip4_input>
      break;
 801f712:	e013      	b.n	801f73c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f714:	683b      	ldr	r3, [r7, #0]
 801f716:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f71a:	f003 0308 	and.w	r3, r3, #8
 801f71e:	2b00      	cmp	r3, #0
 801f720:	d014      	beq.n	801f74c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f722:	8afb      	ldrh	r3, [r7, #22]
 801f724:	4619      	mov	r1, r3
 801f726:	6878      	ldr	r0, [r7, #4]
 801f728:	f7f5 fc02 	bl	8014f30 <pbuf_remove_header>
 801f72c:	4603      	mov	r3, r0
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d10e      	bne.n	801f750 <ethernet_input+0x104>
        etharp_input(p, netif);
 801f732:	6839      	ldr	r1, [r7, #0]
 801f734:	6878      	ldr	r0, [r7, #4]
 801f736:	f7fe f879 	bl	801d82c <etharp_input>
      break;
 801f73a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f73c:	2300      	movs	r3, #0
 801f73e:	e00c      	b.n	801f75a <ethernet_input+0x10e>
    goto free_and_return;
 801f740:	bf00      	nop
 801f742:	e006      	b.n	801f752 <ethernet_input+0x106>
        goto free_and_return;
 801f744:	bf00      	nop
 801f746:	e004      	b.n	801f752 <ethernet_input+0x106>
        goto free_and_return;
 801f748:	bf00      	nop
 801f74a:	e002      	b.n	801f752 <ethernet_input+0x106>
        goto free_and_return;
 801f74c:	bf00      	nop
 801f74e:	e000      	b.n	801f752 <ethernet_input+0x106>
        goto free_and_return;
 801f750:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f752:	6878      	ldr	r0, [r7, #4]
 801f754:	f7f5 fc72 	bl	801503c <pbuf_free>
  return ERR_OK;
 801f758:	2300      	movs	r3, #0
}
 801f75a:	4618      	mov	r0, r3
 801f75c:	3718      	adds	r7, #24
 801f75e:	46bd      	mov	sp, r7
 801f760:	bd80      	pop	{r7, pc}
 801f762:	bf00      	nop
 801f764:	08024698 	.word	0x08024698

0801f768 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f768:	b580      	push	{r7, lr}
 801f76a:	b086      	sub	sp, #24
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	60f8      	str	r0, [r7, #12]
 801f770:	60b9      	str	r1, [r7, #8]
 801f772:	607a      	str	r2, [r7, #4]
 801f774:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f776:	8c3b      	ldrh	r3, [r7, #32]
 801f778:	4618      	mov	r0, r3
 801f77a:	f7f3 ffa9 	bl	80136d0 <lwip_htons>
 801f77e:	4603      	mov	r3, r0
 801f780:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f782:	210e      	movs	r1, #14
 801f784:	68b8      	ldr	r0, [r7, #8]
 801f786:	f7f5 fbc3 	bl	8014f10 <pbuf_add_header>
 801f78a:	4603      	mov	r3, r0
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d125      	bne.n	801f7dc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f790:	68bb      	ldr	r3, [r7, #8]
 801f792:	685b      	ldr	r3, [r3, #4]
 801f794:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f796:	693b      	ldr	r3, [r7, #16]
 801f798:	8afa      	ldrh	r2, [r7, #22]
 801f79a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f79c:	693b      	ldr	r3, [r7, #16]
 801f79e:	2206      	movs	r2, #6
 801f7a0:	6839      	ldr	r1, [r7, #0]
 801f7a2:	4618      	mov	r0, r3
 801f7a4:	f000 ff35 	bl	8020612 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f7a8:	693b      	ldr	r3, [r7, #16]
 801f7aa:	3306      	adds	r3, #6
 801f7ac:	2206      	movs	r2, #6
 801f7ae:	6879      	ldr	r1, [r7, #4]
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	f000 ff2e 	bl	8020612 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f7bc:	2b06      	cmp	r3, #6
 801f7be:	d006      	beq.n	801f7ce <ethernet_output+0x66>
 801f7c0:	4b0a      	ldr	r3, [pc, #40]	; (801f7ec <ethernet_output+0x84>)
 801f7c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 801f7c6:	490a      	ldr	r1, [pc, #40]	; (801f7f0 <ethernet_output+0x88>)
 801f7c8:	480a      	ldr	r0, [pc, #40]	; (801f7f4 <ethernet_output+0x8c>)
 801f7ca:	f000 ffcd 	bl	8020768 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f7ce:	68fb      	ldr	r3, [r7, #12]
 801f7d0:	699b      	ldr	r3, [r3, #24]
 801f7d2:	68b9      	ldr	r1, [r7, #8]
 801f7d4:	68f8      	ldr	r0, [r7, #12]
 801f7d6:	4798      	blx	r3
 801f7d8:	4603      	mov	r3, r0
 801f7da:	e002      	b.n	801f7e2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f7dc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f7de:	f06f 0301 	mvn.w	r3, #1
}
 801f7e2:	4618      	mov	r0, r3
 801f7e4:	3718      	adds	r7, #24
 801f7e6:	46bd      	mov	sp, r7
 801f7e8:	bd80      	pop	{r7, pc}
 801f7ea:	bf00      	nop
 801f7ec:	08024440 	.word	0x08024440
 801f7f0:	08024478 	.word	0x08024478
 801f7f4:	080244ac 	.word	0x080244ac

0801f7f8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f7f8:	b580      	push	{r7, lr}
 801f7fa:	b082      	sub	sp, #8
 801f7fc:	af00      	add	r7, sp, #0
 801f7fe:	6078      	str	r0, [r7, #4]
 801f800:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801f802:	683b      	ldr	r3, [r7, #0]
 801f804:	2200      	movs	r2, #0
 801f806:	2104      	movs	r1, #4
 801f808:	4618      	mov	r0, r3
 801f80a:	f7f0 fb15 	bl	800fe38 <osMessageQueueNew>
 801f80e:	4602      	mov	r2, r0
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d102      	bne.n	801f822 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801f81c:	f04f 33ff 	mov.w	r3, #4294967295
 801f820:	e000      	b.n	801f824 <sys_mbox_new+0x2c>

  return ERR_OK;
 801f822:	2300      	movs	r3, #0
}
 801f824:	4618      	mov	r0, r3
 801f826:	3708      	adds	r7, #8
 801f828:	46bd      	mov	sp, r7
 801f82a:	bd80      	pop	{r7, pc}

0801f82c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f82c:	b580      	push	{r7, lr}
 801f82e:	b084      	sub	sp, #16
 801f830:	af00      	add	r7, sp, #0
 801f832:	6078      	str	r0, [r7, #4]
 801f834:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	6818      	ldr	r0, [r3, #0]
 801f83a:	4639      	mov	r1, r7
 801f83c:	2300      	movs	r3, #0
 801f83e:	2200      	movs	r2, #0
 801f840:	f7f0 fb6e 	bl	800ff20 <osMessageQueuePut>
 801f844:	4603      	mov	r3, r0
 801f846:	2b00      	cmp	r3, #0
 801f848:	d102      	bne.n	801f850 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801f84a:	2300      	movs	r3, #0
 801f84c:	73fb      	strb	r3, [r7, #15]
 801f84e:	e001      	b.n	801f854 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f850:	23ff      	movs	r3, #255	; 0xff
 801f852:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f858:	4618      	mov	r0, r3
 801f85a:	3710      	adds	r7, #16
 801f85c:	46bd      	mov	sp, r7
 801f85e:	bd80      	pop	{r7, pc}

0801f860 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f860:	b580      	push	{r7, lr}
 801f862:	b086      	sub	sp, #24
 801f864:	af00      	add	r7, sp, #0
 801f866:	60f8      	str	r0, [r7, #12]
 801f868:	60b9      	str	r1, [r7, #8]
 801f86a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801f86c:	f7ef fff4 	bl	800f858 <osKernelGetTickCount>
 801f870:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	2b00      	cmp	r3, #0
 801f876:	d013      	beq.n	801f8a0 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	6818      	ldr	r0, [r3, #0]
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	2200      	movs	r2, #0
 801f880:	68b9      	ldr	r1, [r7, #8]
 801f882:	f7f0 fbad 	bl	800ffe0 <osMessageQueueGet>
 801f886:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801f888:	693b      	ldr	r3, [r7, #16]
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d105      	bne.n	801f89a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801f88e:	f7ef ffe3 	bl	800f858 <osKernelGetTickCount>
 801f892:	4602      	mov	r2, r0
 801f894:	697b      	ldr	r3, [r7, #20]
 801f896:	1ad3      	subs	r3, r2, r3
 801f898:	e00f      	b.n	801f8ba <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f89a:	f04f 33ff 	mov.w	r3, #4294967295
 801f89e:	e00c      	b.n	801f8ba <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801f8a0:	68fb      	ldr	r3, [r7, #12]
 801f8a2:	6818      	ldr	r0, [r3, #0]
 801f8a4:	f04f 33ff 	mov.w	r3, #4294967295
 801f8a8:	2200      	movs	r2, #0
 801f8aa:	68b9      	ldr	r1, [r7, #8]
 801f8ac:	f7f0 fb98 	bl	800ffe0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801f8b0:	f7ef ffd2 	bl	800f858 <osKernelGetTickCount>
 801f8b4:	4602      	mov	r2, r0
 801f8b6:	697b      	ldr	r3, [r7, #20]
 801f8b8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f8ba:	4618      	mov	r0, r3
 801f8bc:	3718      	adds	r7, #24
 801f8be:	46bd      	mov	sp, r7
 801f8c0:	bd80      	pop	{r7, pc}

0801f8c2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f8c2:	b480      	push	{r7}
 801f8c4:	b083      	sub	sp, #12
 801f8c6:	af00      	add	r7, sp, #0
 801f8c8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d101      	bne.n	801f8d6 <sys_mbox_valid+0x14>
    return 0;
 801f8d2:	2300      	movs	r3, #0
 801f8d4:	e000      	b.n	801f8d8 <sys_mbox_valid+0x16>
  else
    return 1;
 801f8d6:	2301      	movs	r3, #1
}
 801f8d8:	4618      	mov	r0, r3
 801f8da:	370c      	adds	r7, #12
 801f8dc:	46bd      	mov	sp, r7
 801f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8e2:	4770      	bx	lr

0801f8e4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801f8e4:	b580      	push	{r7, lr}
 801f8e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801f8e8:	2000      	movs	r0, #0
 801f8ea:	f7f0 f877 	bl	800f9dc <osMutexNew>
 801f8ee:	4603      	mov	r3, r0
 801f8f0:	4a01      	ldr	r2, [pc, #4]	; (801f8f8 <sys_init+0x14>)
 801f8f2:	6013      	str	r3, [r2, #0]
#endif
}
 801f8f4:	bf00      	nop
 801f8f6:	bd80      	pop	{r7, pc}
 801f8f8:	2400cce0 	.word	0x2400cce0

0801f8fc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801f8fc:	b580      	push	{r7, lr}
 801f8fe:	b082      	sub	sp, #8
 801f900:	af00      	add	r7, sp, #0
 801f902:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801f904:	2000      	movs	r0, #0
 801f906:	f7f0 f869 	bl	800f9dc <osMutexNew>
 801f90a:	4602      	mov	r2, r0
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	681b      	ldr	r3, [r3, #0]
 801f914:	2b00      	cmp	r3, #0
 801f916:	d102      	bne.n	801f91e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801f918:	f04f 33ff 	mov.w	r3, #4294967295
 801f91c:	e000      	b.n	801f920 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801f91e:	2300      	movs	r3, #0
}
 801f920:	4618      	mov	r0, r3
 801f922:	3708      	adds	r7, #8
 801f924:	46bd      	mov	sp, r7
 801f926:	bd80      	pop	{r7, pc}

0801f928 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801f928:	b580      	push	{r7, lr}
 801f92a:	b082      	sub	sp, #8
 801f92c:	af00      	add	r7, sp, #0
 801f92e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	681b      	ldr	r3, [r3, #0]
 801f934:	f04f 31ff 	mov.w	r1, #4294967295
 801f938:	4618      	mov	r0, r3
 801f93a:	f7f0 f8d5 	bl	800fae8 <osMutexAcquire>
#endif
}
 801f93e:	bf00      	nop
 801f940:	3708      	adds	r7, #8
 801f942:	46bd      	mov	sp, r7
 801f944:	bd80      	pop	{r7, pc}

0801f946 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801f946:	b580      	push	{r7, lr}
 801f948:	b082      	sub	sp, #8
 801f94a:	af00      	add	r7, sp, #0
 801f94c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	4618      	mov	r0, r3
 801f954:	f7f0 f913 	bl	800fb7e <osMutexRelease>
}
 801f958:	bf00      	nop
 801f95a:	3708      	adds	r7, #8
 801f95c:	46bd      	mov	sp, r7
 801f95e:	bd80      	pop	{r7, pc}

0801f960 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801f960:	b580      	push	{r7, lr}
 801f962:	b08e      	sub	sp, #56	; 0x38
 801f964:	af00      	add	r7, sp, #0
 801f966:	60f8      	str	r0, [r7, #12]
 801f968:	60b9      	str	r1, [r7, #8]
 801f96a:	607a      	str	r2, [r7, #4]
 801f96c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801f96e:	f107 0314 	add.w	r3, r7, #20
 801f972:	2224      	movs	r2, #36	; 0x24
 801f974:	2100      	movs	r1, #0
 801f976:	4618      	mov	r0, r3
 801f978:	f000 fe59 	bl	802062e <memset>
 801f97c:	68fb      	ldr	r3, [r7, #12]
 801f97e:	617b      	str	r3, [r7, #20]
 801f980:	683b      	ldr	r3, [r7, #0]
 801f982:	62bb      	str	r3, [r7, #40]	; 0x28
 801f984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f986:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801f988:	f107 0314 	add.w	r3, r7, #20
 801f98c:	461a      	mov	r2, r3
 801f98e:	6879      	ldr	r1, [r7, #4]
 801f990:	68b8      	ldr	r0, [r7, #8]
 801f992:	f7ef ff76 	bl	800f882 <osThreadNew>
 801f996:	4603      	mov	r3, r0
#endif
}
 801f998:	4618      	mov	r0, r3
 801f99a:	3738      	adds	r7, #56	; 0x38
 801f99c:	46bd      	mov	sp, r7
 801f99e:	bd80      	pop	{r7, pc}

0801f9a0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801f9a0:	b580      	push	{r7, lr}
 801f9a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801f9a4:	4b04      	ldr	r3, [pc, #16]	; (801f9b8 <sys_arch_protect+0x18>)
 801f9a6:	681b      	ldr	r3, [r3, #0]
 801f9a8:	f04f 31ff 	mov.w	r1, #4294967295
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7f0 f89b 	bl	800fae8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801f9b2:	2301      	movs	r3, #1
}
 801f9b4:	4618      	mov	r0, r3
 801f9b6:	bd80      	pop	{r7, pc}
 801f9b8:	2400cce0 	.word	0x2400cce0

0801f9bc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801f9bc:	b580      	push	{r7, lr}
 801f9be:	b082      	sub	sp, #8
 801f9c0:	af00      	add	r7, sp, #0
 801f9c2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801f9c4:	4b04      	ldr	r3, [pc, #16]	; (801f9d8 <sys_arch_unprotect+0x1c>)
 801f9c6:	681b      	ldr	r3, [r3, #0]
 801f9c8:	4618      	mov	r0, r3
 801f9ca:	f7f0 f8d8 	bl	800fb7e <osMutexRelease>
}
 801f9ce:	bf00      	nop
 801f9d0:	3708      	adds	r7, #8
 801f9d2:	46bd      	mov	sp, r7
 801f9d4:	bd80      	pop	{r7, pc}
 801f9d6:	bf00      	nop
 801f9d8:	2400cce0 	.word	0x2400cce0

0801f9dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801f9dc:	b580      	push	{r7, lr}
 801f9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801f9e0:	2201      	movs	r2, #1
 801f9e2:	4913      	ldr	r1, [pc, #76]	; (801fa30 <MX_USB_DEVICE_Init+0x54>)
 801f9e4:	4813      	ldr	r0, [pc, #76]	; (801fa34 <MX_USB_DEVICE_Init+0x58>)
 801f9e6:	f7ee fb33 	bl	800e050 <USBD_Init>
 801f9ea:	4603      	mov	r3, r0
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d001      	beq.n	801f9f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801f9f0:	f7e0 ffca 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801f9f4:	4910      	ldr	r1, [pc, #64]	; (801fa38 <MX_USB_DEVICE_Init+0x5c>)
 801f9f6:	480f      	ldr	r0, [pc, #60]	; (801fa34 <MX_USB_DEVICE_Init+0x58>)
 801f9f8:	f7ee fb5a 	bl	800e0b0 <USBD_RegisterClass>
 801f9fc:	4603      	mov	r3, r0
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d001      	beq.n	801fa06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801fa02:	f7e0 ffc1 	bl	8000988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801fa06:	490d      	ldr	r1, [pc, #52]	; (801fa3c <MX_USB_DEVICE_Init+0x60>)
 801fa08:	480a      	ldr	r0, [pc, #40]	; (801fa34 <MX_USB_DEVICE_Init+0x58>)
 801fa0a:	f7ee fa91 	bl	800df30 <USBD_CDC_RegisterInterface>
 801fa0e:	4603      	mov	r3, r0
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	d001      	beq.n	801fa18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801fa14:	f7e0 ffb8 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801fa18:	4806      	ldr	r0, [pc, #24]	; (801fa34 <MX_USB_DEVICE_Init+0x58>)
 801fa1a:	f7ee fb7f 	bl	800e11c <USBD_Start>
 801fa1e:	4603      	mov	r3, r0
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	d001      	beq.n	801fa28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801fa24:	f7e0 ffb0 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801fa28:	f7e5 fe30 	bl	800568c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801fa2c:	bf00      	nop
 801fa2e:	bd80      	pop	{r7, pc}
 801fa30:	240000d8 	.word	0x240000d8
 801fa34:	2400cce4 	.word	0x2400cce4
 801fa38:	24000030 	.word	0x24000030
 801fa3c:	240000c4 	.word	0x240000c4

0801fa40 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801fa40:	b580      	push	{r7, lr}
 801fa42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801fa44:	2200      	movs	r2, #0
 801fa46:	4905      	ldr	r1, [pc, #20]	; (801fa5c <CDC_Init_HS+0x1c>)
 801fa48:	4805      	ldr	r0, [pc, #20]	; (801fa60 <CDC_Init_HS+0x20>)
 801fa4a:	f7ee fa8b 	bl	800df64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801fa4e:	4905      	ldr	r1, [pc, #20]	; (801fa64 <CDC_Init_HS+0x24>)
 801fa50:	4803      	ldr	r0, [pc, #12]	; (801fa60 <CDC_Init_HS+0x20>)
 801fa52:	f7ee faa9 	bl	800dfa8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801fa56:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801fa58:	4618      	mov	r0, r3
 801fa5a:	bd80      	pop	{r7, pc}
 801fa5c:	2400d7c0 	.word	0x2400d7c0
 801fa60:	2400cce4 	.word	0x2400cce4
 801fa64:	2400cfc0 	.word	0x2400cfc0

0801fa68 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801fa68:	b480      	push	{r7}
 801fa6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801fa6c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801fa6e:	4618      	mov	r0, r3
 801fa70:	46bd      	mov	sp, r7
 801fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa76:	4770      	bx	lr

0801fa78 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801fa78:	b480      	push	{r7}
 801fa7a:	b083      	sub	sp, #12
 801fa7c:	af00      	add	r7, sp, #0
 801fa7e:	4603      	mov	r3, r0
 801fa80:	6039      	str	r1, [r7, #0]
 801fa82:	71fb      	strb	r3, [r7, #7]
 801fa84:	4613      	mov	r3, r2
 801fa86:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801fa88:	79fb      	ldrb	r3, [r7, #7]
 801fa8a:	2b23      	cmp	r3, #35	; 0x23
 801fa8c:	d84a      	bhi.n	801fb24 <CDC_Control_HS+0xac>
 801fa8e:	a201      	add	r2, pc, #4	; (adr r2, 801fa94 <CDC_Control_HS+0x1c>)
 801fa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa94:	0801fb25 	.word	0x0801fb25
 801fa98:	0801fb25 	.word	0x0801fb25
 801fa9c:	0801fb25 	.word	0x0801fb25
 801faa0:	0801fb25 	.word	0x0801fb25
 801faa4:	0801fb25 	.word	0x0801fb25
 801faa8:	0801fb25 	.word	0x0801fb25
 801faac:	0801fb25 	.word	0x0801fb25
 801fab0:	0801fb25 	.word	0x0801fb25
 801fab4:	0801fb25 	.word	0x0801fb25
 801fab8:	0801fb25 	.word	0x0801fb25
 801fabc:	0801fb25 	.word	0x0801fb25
 801fac0:	0801fb25 	.word	0x0801fb25
 801fac4:	0801fb25 	.word	0x0801fb25
 801fac8:	0801fb25 	.word	0x0801fb25
 801facc:	0801fb25 	.word	0x0801fb25
 801fad0:	0801fb25 	.word	0x0801fb25
 801fad4:	0801fb25 	.word	0x0801fb25
 801fad8:	0801fb25 	.word	0x0801fb25
 801fadc:	0801fb25 	.word	0x0801fb25
 801fae0:	0801fb25 	.word	0x0801fb25
 801fae4:	0801fb25 	.word	0x0801fb25
 801fae8:	0801fb25 	.word	0x0801fb25
 801faec:	0801fb25 	.word	0x0801fb25
 801faf0:	0801fb25 	.word	0x0801fb25
 801faf4:	0801fb25 	.word	0x0801fb25
 801faf8:	0801fb25 	.word	0x0801fb25
 801fafc:	0801fb25 	.word	0x0801fb25
 801fb00:	0801fb25 	.word	0x0801fb25
 801fb04:	0801fb25 	.word	0x0801fb25
 801fb08:	0801fb25 	.word	0x0801fb25
 801fb0c:	0801fb25 	.word	0x0801fb25
 801fb10:	0801fb25 	.word	0x0801fb25
 801fb14:	0801fb25 	.word	0x0801fb25
 801fb18:	0801fb25 	.word	0x0801fb25
 801fb1c:	0801fb25 	.word	0x0801fb25
 801fb20:	0801fb25 	.word	0x0801fb25
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801fb24:	bf00      	nop
  }

  return (USBD_OK);
 801fb26:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801fb28:	4618      	mov	r0, r3
 801fb2a:	370c      	adds	r7, #12
 801fb2c:	46bd      	mov	sp, r7
 801fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb32:	4770      	bx	lr

0801fb34 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801fb34:	b580      	push	{r7, lr}
 801fb36:	b082      	sub	sp, #8
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	6078      	str	r0, [r7, #4]
 801fb3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801fb3e:	6879      	ldr	r1, [r7, #4]
 801fb40:	4805      	ldr	r0, [pc, #20]	; (801fb58 <CDC_Receive_HS+0x24>)
 801fb42:	f7ee fa31 	bl	800dfa8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801fb46:	4804      	ldr	r0, [pc, #16]	; (801fb58 <CDC_Receive_HS+0x24>)
 801fb48:	f7ee fa4c 	bl	800dfe4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801fb4c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801fb4e:	4618      	mov	r0, r3
 801fb50:	3708      	adds	r7, #8
 801fb52:	46bd      	mov	sp, r7
 801fb54:	bd80      	pop	{r7, pc}
 801fb56:	bf00      	nop
 801fb58:	2400cce4 	.word	0x2400cce4

0801fb5c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801fb5c:	b480      	push	{r7}
 801fb5e:	b087      	sub	sp, #28
 801fb60:	af00      	add	r7, sp, #0
 801fb62:	60f8      	str	r0, [r7, #12]
 801fb64:	60b9      	str	r1, [r7, #8]
 801fb66:	4613      	mov	r3, r2
 801fb68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801fb6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801fb72:	4618      	mov	r0, r3
 801fb74:	371c      	adds	r7, #28
 801fb76:	46bd      	mov	sp, r7
 801fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb7c:	4770      	bx	lr
	...

0801fb80 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fb80:	b480      	push	{r7}
 801fb82:	b083      	sub	sp, #12
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	4603      	mov	r3, r0
 801fb88:	6039      	str	r1, [r7, #0]
 801fb8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801fb8c:	683b      	ldr	r3, [r7, #0]
 801fb8e:	2212      	movs	r2, #18
 801fb90:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801fb92:	4b03      	ldr	r3, [pc, #12]	; (801fba0 <USBD_HS_DeviceDescriptor+0x20>)
}
 801fb94:	4618      	mov	r0, r3
 801fb96:	370c      	adds	r7, #12
 801fb98:	46bd      	mov	sp, r7
 801fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb9e:	4770      	bx	lr
 801fba0:	240000f4 	.word	0x240000f4

0801fba4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fba4:	b480      	push	{r7}
 801fba6:	b083      	sub	sp, #12
 801fba8:	af00      	add	r7, sp, #0
 801fbaa:	4603      	mov	r3, r0
 801fbac:	6039      	str	r1, [r7, #0]
 801fbae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801fbb0:	683b      	ldr	r3, [r7, #0]
 801fbb2:	2204      	movs	r2, #4
 801fbb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801fbb6:	4b03      	ldr	r3, [pc, #12]	; (801fbc4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801fbb8:	4618      	mov	r0, r3
 801fbba:	370c      	adds	r7, #12
 801fbbc:	46bd      	mov	sp, r7
 801fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbc2:	4770      	bx	lr
 801fbc4:	24000108 	.word	0x24000108

0801fbc8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fbc8:	b580      	push	{r7, lr}
 801fbca:	b082      	sub	sp, #8
 801fbcc:	af00      	add	r7, sp, #0
 801fbce:	4603      	mov	r3, r0
 801fbd0:	6039      	str	r1, [r7, #0]
 801fbd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801fbd4:	79fb      	ldrb	r3, [r7, #7]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d105      	bne.n	801fbe6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801fbda:	683a      	ldr	r2, [r7, #0]
 801fbdc:	4907      	ldr	r1, [pc, #28]	; (801fbfc <USBD_HS_ProductStrDescriptor+0x34>)
 801fbde:	4808      	ldr	r0, [pc, #32]	; (801fc00 <USBD_HS_ProductStrDescriptor+0x38>)
 801fbe0:	f7ef fc4e 	bl	800f480 <USBD_GetString>
 801fbe4:	e004      	b.n	801fbf0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801fbe6:	683a      	ldr	r2, [r7, #0]
 801fbe8:	4904      	ldr	r1, [pc, #16]	; (801fbfc <USBD_HS_ProductStrDescriptor+0x34>)
 801fbea:	4805      	ldr	r0, [pc, #20]	; (801fc00 <USBD_HS_ProductStrDescriptor+0x38>)
 801fbec:	f7ef fc48 	bl	800f480 <USBD_GetString>
  }
  return USBD_StrDesc;
 801fbf0:	4b02      	ldr	r3, [pc, #8]	; (801fbfc <USBD_HS_ProductStrDescriptor+0x34>)
}
 801fbf2:	4618      	mov	r0, r3
 801fbf4:	3708      	adds	r7, #8
 801fbf6:	46bd      	mov	sp, r7
 801fbf8:	bd80      	pop	{r7, pc}
 801fbfa:	bf00      	nop
 801fbfc:	2400dfc0 	.word	0x2400dfc0
 801fc00:	080244d4 	.word	0x080244d4

0801fc04 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fc04:	b580      	push	{r7, lr}
 801fc06:	b082      	sub	sp, #8
 801fc08:	af00      	add	r7, sp, #0
 801fc0a:	4603      	mov	r3, r0
 801fc0c:	6039      	str	r1, [r7, #0]
 801fc0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801fc10:	683a      	ldr	r2, [r7, #0]
 801fc12:	4904      	ldr	r1, [pc, #16]	; (801fc24 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801fc14:	4804      	ldr	r0, [pc, #16]	; (801fc28 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801fc16:	f7ef fc33 	bl	800f480 <USBD_GetString>
  return USBD_StrDesc;
 801fc1a:	4b02      	ldr	r3, [pc, #8]	; (801fc24 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801fc1c:	4618      	mov	r0, r3
 801fc1e:	3708      	adds	r7, #8
 801fc20:	46bd      	mov	sp, r7
 801fc22:	bd80      	pop	{r7, pc}
 801fc24:	2400dfc0 	.word	0x2400dfc0
 801fc28:	080244ec 	.word	0x080244ec

0801fc2c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fc2c:	b580      	push	{r7, lr}
 801fc2e:	b082      	sub	sp, #8
 801fc30:	af00      	add	r7, sp, #0
 801fc32:	4603      	mov	r3, r0
 801fc34:	6039      	str	r1, [r7, #0]
 801fc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801fc38:	683b      	ldr	r3, [r7, #0]
 801fc3a:	221a      	movs	r2, #26
 801fc3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801fc3e:	f000 f843 	bl	801fcc8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801fc42:	4b02      	ldr	r3, [pc, #8]	; (801fc4c <USBD_HS_SerialStrDescriptor+0x20>)
}
 801fc44:	4618      	mov	r0, r3
 801fc46:	3708      	adds	r7, #8
 801fc48:	46bd      	mov	sp, r7
 801fc4a:	bd80      	pop	{r7, pc}
 801fc4c:	2400010c 	.word	0x2400010c

0801fc50 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b082      	sub	sp, #8
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	4603      	mov	r3, r0
 801fc58:	6039      	str	r1, [r7, #0]
 801fc5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801fc5c:	79fb      	ldrb	r3, [r7, #7]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d105      	bne.n	801fc6e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801fc62:	683a      	ldr	r2, [r7, #0]
 801fc64:	4907      	ldr	r1, [pc, #28]	; (801fc84 <USBD_HS_ConfigStrDescriptor+0x34>)
 801fc66:	4808      	ldr	r0, [pc, #32]	; (801fc88 <USBD_HS_ConfigStrDescriptor+0x38>)
 801fc68:	f7ef fc0a 	bl	800f480 <USBD_GetString>
 801fc6c:	e004      	b.n	801fc78 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801fc6e:	683a      	ldr	r2, [r7, #0]
 801fc70:	4904      	ldr	r1, [pc, #16]	; (801fc84 <USBD_HS_ConfigStrDescriptor+0x34>)
 801fc72:	4805      	ldr	r0, [pc, #20]	; (801fc88 <USBD_HS_ConfigStrDescriptor+0x38>)
 801fc74:	f7ef fc04 	bl	800f480 <USBD_GetString>
  }
  return USBD_StrDesc;
 801fc78:	4b02      	ldr	r3, [pc, #8]	; (801fc84 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801fc7a:	4618      	mov	r0, r3
 801fc7c:	3708      	adds	r7, #8
 801fc7e:	46bd      	mov	sp, r7
 801fc80:	bd80      	pop	{r7, pc}
 801fc82:	bf00      	nop
 801fc84:	2400dfc0 	.word	0x2400dfc0
 801fc88:	08024500 	.word	0x08024500

0801fc8c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801fc8c:	b580      	push	{r7, lr}
 801fc8e:	b082      	sub	sp, #8
 801fc90:	af00      	add	r7, sp, #0
 801fc92:	4603      	mov	r3, r0
 801fc94:	6039      	str	r1, [r7, #0]
 801fc96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801fc98:	79fb      	ldrb	r3, [r7, #7]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d105      	bne.n	801fcaa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801fc9e:	683a      	ldr	r2, [r7, #0]
 801fca0:	4907      	ldr	r1, [pc, #28]	; (801fcc0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801fca2:	4808      	ldr	r0, [pc, #32]	; (801fcc4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801fca4:	f7ef fbec 	bl	800f480 <USBD_GetString>
 801fca8:	e004      	b.n	801fcb4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801fcaa:	683a      	ldr	r2, [r7, #0]
 801fcac:	4904      	ldr	r1, [pc, #16]	; (801fcc0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801fcae:	4805      	ldr	r0, [pc, #20]	; (801fcc4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801fcb0:	f7ef fbe6 	bl	800f480 <USBD_GetString>
  }
  return USBD_StrDesc;
 801fcb4:	4b02      	ldr	r3, [pc, #8]	; (801fcc0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	3708      	adds	r7, #8
 801fcba:	46bd      	mov	sp, r7
 801fcbc:	bd80      	pop	{r7, pc}
 801fcbe:	bf00      	nop
 801fcc0:	2400dfc0 	.word	0x2400dfc0
 801fcc4:	0802450c 	.word	0x0802450c

0801fcc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801fcc8:	b580      	push	{r7, lr}
 801fcca:	b084      	sub	sp, #16
 801fccc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801fcce:	4b0f      	ldr	r3, [pc, #60]	; (801fd0c <Get_SerialNum+0x44>)
 801fcd0:	681b      	ldr	r3, [r3, #0]
 801fcd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801fcd4:	4b0e      	ldr	r3, [pc, #56]	; (801fd10 <Get_SerialNum+0x48>)
 801fcd6:	681b      	ldr	r3, [r3, #0]
 801fcd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801fcda:	4b0e      	ldr	r3, [pc, #56]	; (801fd14 <Get_SerialNum+0x4c>)
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801fce0:	68fa      	ldr	r2, [r7, #12]
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	4413      	add	r3, r2
 801fce6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801fce8:	68fb      	ldr	r3, [r7, #12]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d009      	beq.n	801fd02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801fcee:	2208      	movs	r2, #8
 801fcf0:	4909      	ldr	r1, [pc, #36]	; (801fd18 <Get_SerialNum+0x50>)
 801fcf2:	68f8      	ldr	r0, [r7, #12]
 801fcf4:	f000 f814 	bl	801fd20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801fcf8:	2204      	movs	r2, #4
 801fcfa:	4908      	ldr	r1, [pc, #32]	; (801fd1c <Get_SerialNum+0x54>)
 801fcfc:	68b8      	ldr	r0, [r7, #8]
 801fcfe:	f000 f80f 	bl	801fd20 <IntToUnicode>
  }
}
 801fd02:	bf00      	nop
 801fd04:	3710      	adds	r7, #16
 801fd06:	46bd      	mov	sp, r7
 801fd08:	bd80      	pop	{r7, pc}
 801fd0a:	bf00      	nop
 801fd0c:	1ff1e800 	.word	0x1ff1e800
 801fd10:	1ff1e804 	.word	0x1ff1e804
 801fd14:	1ff1e808 	.word	0x1ff1e808
 801fd18:	2400010e 	.word	0x2400010e
 801fd1c:	2400011e 	.word	0x2400011e

0801fd20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801fd20:	b480      	push	{r7}
 801fd22:	b087      	sub	sp, #28
 801fd24:	af00      	add	r7, sp, #0
 801fd26:	60f8      	str	r0, [r7, #12]
 801fd28:	60b9      	str	r1, [r7, #8]
 801fd2a:	4613      	mov	r3, r2
 801fd2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801fd2e:	2300      	movs	r3, #0
 801fd30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801fd32:	2300      	movs	r3, #0
 801fd34:	75fb      	strb	r3, [r7, #23]
 801fd36:	e027      	b.n	801fd88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801fd38:	68fb      	ldr	r3, [r7, #12]
 801fd3a:	0f1b      	lsrs	r3, r3, #28
 801fd3c:	2b09      	cmp	r3, #9
 801fd3e:	d80b      	bhi.n	801fd58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	0f1b      	lsrs	r3, r3, #28
 801fd44:	b2da      	uxtb	r2, r3
 801fd46:	7dfb      	ldrb	r3, [r7, #23]
 801fd48:	005b      	lsls	r3, r3, #1
 801fd4a:	4619      	mov	r1, r3
 801fd4c:	68bb      	ldr	r3, [r7, #8]
 801fd4e:	440b      	add	r3, r1
 801fd50:	3230      	adds	r2, #48	; 0x30
 801fd52:	b2d2      	uxtb	r2, r2
 801fd54:	701a      	strb	r2, [r3, #0]
 801fd56:	e00a      	b.n	801fd6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801fd58:	68fb      	ldr	r3, [r7, #12]
 801fd5a:	0f1b      	lsrs	r3, r3, #28
 801fd5c:	b2da      	uxtb	r2, r3
 801fd5e:	7dfb      	ldrb	r3, [r7, #23]
 801fd60:	005b      	lsls	r3, r3, #1
 801fd62:	4619      	mov	r1, r3
 801fd64:	68bb      	ldr	r3, [r7, #8]
 801fd66:	440b      	add	r3, r1
 801fd68:	3237      	adds	r2, #55	; 0x37
 801fd6a:	b2d2      	uxtb	r2, r2
 801fd6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801fd6e:	68fb      	ldr	r3, [r7, #12]
 801fd70:	011b      	lsls	r3, r3, #4
 801fd72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801fd74:	7dfb      	ldrb	r3, [r7, #23]
 801fd76:	005b      	lsls	r3, r3, #1
 801fd78:	3301      	adds	r3, #1
 801fd7a:	68ba      	ldr	r2, [r7, #8]
 801fd7c:	4413      	add	r3, r2
 801fd7e:	2200      	movs	r2, #0
 801fd80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801fd82:	7dfb      	ldrb	r3, [r7, #23]
 801fd84:	3301      	adds	r3, #1
 801fd86:	75fb      	strb	r3, [r7, #23]
 801fd88:	7dfa      	ldrb	r2, [r7, #23]
 801fd8a:	79fb      	ldrb	r3, [r7, #7]
 801fd8c:	429a      	cmp	r2, r3
 801fd8e:	d3d3      	bcc.n	801fd38 <IntToUnicode+0x18>
  }
}
 801fd90:	bf00      	nop
 801fd92:	bf00      	nop
 801fd94:	371c      	adds	r7, #28
 801fd96:	46bd      	mov	sp, r7
 801fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd9c:	4770      	bx	lr
	...

0801fda0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801fda0:	b580      	push	{r7, lr}
 801fda2:	b0b2      	sub	sp, #200	; 0xc8
 801fda4:	af00      	add	r7, sp, #0
 801fda6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801fda8:	f107 0310 	add.w	r3, r7, #16
 801fdac:	22b8      	movs	r2, #184	; 0xb8
 801fdae:	2100      	movs	r1, #0
 801fdb0:	4618      	mov	r0, r3
 801fdb2:	f000 fc3c 	bl	802062e <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	681b      	ldr	r3, [r3, #0]
 801fdba:	4a1a      	ldr	r2, [pc, #104]	; (801fe24 <HAL_PCD_MspInit+0x84>)
 801fdbc:	4293      	cmp	r3, r2
 801fdbe:	d12c      	bne.n	801fe1a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801fdc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801fdc4:	f04f 0300 	mov.w	r3, #0
 801fdc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801fdcc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801fdd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801fdd4:	f107 0310 	add.w	r3, r7, #16
 801fdd8:	4618      	mov	r0, r3
 801fdda:	f7e6 fbf9 	bl	80065d0 <HAL_RCCEx_PeriphCLKConfig>
 801fdde:	4603      	mov	r3, r0
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d001      	beq.n	801fde8 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801fde4:	f7e0 fdd0 	bl	8000988 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801fde8:	f7e5 fc50 	bl	800568c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801fdec:	4b0e      	ldr	r3, [pc, #56]	; (801fe28 <HAL_PCD_MspInit+0x88>)
 801fdee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801fdf2:	4a0d      	ldr	r2, [pc, #52]	; (801fe28 <HAL_PCD_MspInit+0x88>)
 801fdf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801fdf8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801fdfc:	4b0a      	ldr	r3, [pc, #40]	; (801fe28 <HAL_PCD_MspInit+0x88>)
 801fdfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801fe02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fe06:	60fb      	str	r3, [r7, #12]
 801fe08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 801fe0a:	2200      	movs	r2, #0
 801fe0c:	2105      	movs	r1, #5
 801fe0e:	204d      	movs	r0, #77	; 0x4d
 801fe10:	f7e1 fc28 	bl	8001664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801fe14:	204d      	movs	r0, #77	; 0x4d
 801fe16:	f7e1 fc3f 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801fe1a:	bf00      	nop
 801fe1c:	37c8      	adds	r7, #200	; 0xc8
 801fe1e:	46bd      	mov	sp, r7
 801fe20:	bd80      	pop	{r7, pc}
 801fe22:	bf00      	nop
 801fe24:	40040000 	.word	0x40040000
 801fe28:	58024400 	.word	0x58024400

0801fe2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fe2c:	b580      	push	{r7, lr}
 801fe2e:	b082      	sub	sp, #8
 801fe30:	af00      	add	r7, sp, #0
 801fe32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801fe34:	687b      	ldr	r3, [r7, #4]
 801fe36:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801fe40:	4619      	mov	r1, r3
 801fe42:	4610      	mov	r0, r2
 801fe44:	f7ee f9b7 	bl	800e1b6 <USBD_LL_SetupStage>
}
 801fe48:	bf00      	nop
 801fe4a:	3708      	adds	r7, #8
 801fe4c:	46bd      	mov	sp, r7
 801fe4e:	bd80      	pop	{r7, pc}

0801fe50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fe50:	b580      	push	{r7, lr}
 801fe52:	b082      	sub	sp, #8
 801fe54:	af00      	add	r7, sp, #0
 801fe56:	6078      	str	r0, [r7, #4]
 801fe58:	460b      	mov	r3, r1
 801fe5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801fe62:	78fa      	ldrb	r2, [r7, #3]
 801fe64:	6879      	ldr	r1, [r7, #4]
 801fe66:	4613      	mov	r3, r2
 801fe68:	00db      	lsls	r3, r3, #3
 801fe6a:	4413      	add	r3, r2
 801fe6c:	009b      	lsls	r3, r3, #2
 801fe6e:	440b      	add	r3, r1
 801fe70:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801fe74:	681a      	ldr	r2, [r3, #0]
 801fe76:	78fb      	ldrb	r3, [r7, #3]
 801fe78:	4619      	mov	r1, r3
 801fe7a:	f7ee f9f1 	bl	800e260 <USBD_LL_DataOutStage>
}
 801fe7e:	bf00      	nop
 801fe80:	3708      	adds	r7, #8
 801fe82:	46bd      	mov	sp, r7
 801fe84:	bd80      	pop	{r7, pc}

0801fe86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fe86:	b580      	push	{r7, lr}
 801fe88:	b082      	sub	sp, #8
 801fe8a:	af00      	add	r7, sp, #0
 801fe8c:	6078      	str	r0, [r7, #4]
 801fe8e:	460b      	mov	r3, r1
 801fe90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801fe98:	78fa      	ldrb	r2, [r7, #3]
 801fe9a:	6879      	ldr	r1, [r7, #4]
 801fe9c:	4613      	mov	r3, r2
 801fe9e:	00db      	lsls	r3, r3, #3
 801fea0:	4413      	add	r3, r2
 801fea2:	009b      	lsls	r3, r3, #2
 801fea4:	440b      	add	r3, r1
 801fea6:	3348      	adds	r3, #72	; 0x48
 801fea8:	681a      	ldr	r2, [r3, #0]
 801feaa:	78fb      	ldrb	r3, [r7, #3]
 801feac:	4619      	mov	r1, r3
 801feae:	f7ee fa8a 	bl	800e3c6 <USBD_LL_DataInStage>
}
 801feb2:	bf00      	nop
 801feb4:	3708      	adds	r7, #8
 801feb6:	46bd      	mov	sp, r7
 801feb8:	bd80      	pop	{r7, pc}

0801feba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801feba:	b580      	push	{r7, lr}
 801febc:	b082      	sub	sp, #8
 801febe:	af00      	add	r7, sp, #0
 801fec0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801fec8:	4618      	mov	r0, r3
 801feca:	f7ee fbc4 	bl	800e656 <USBD_LL_SOF>
}
 801fece:	bf00      	nop
 801fed0:	3708      	adds	r7, #8
 801fed2:	46bd      	mov	sp, r7
 801fed4:	bd80      	pop	{r7, pc}

0801fed6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fed6:	b580      	push	{r7, lr}
 801fed8:	b084      	sub	sp, #16
 801feda:	af00      	add	r7, sp, #0
 801fedc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801fede:	2301      	movs	r3, #1
 801fee0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	691b      	ldr	r3, [r3, #16]
 801fee6:	2b00      	cmp	r3, #0
 801fee8:	d102      	bne.n	801fef0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801feea:	2300      	movs	r3, #0
 801feec:	73fb      	strb	r3, [r7, #15]
 801feee:	e008      	b.n	801ff02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	691b      	ldr	r3, [r3, #16]
 801fef4:	2b02      	cmp	r3, #2
 801fef6:	d102      	bne.n	801fefe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801fef8:	2301      	movs	r3, #1
 801fefa:	73fb      	strb	r3, [r7, #15]
 801fefc:	e001      	b.n	801ff02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801fefe:	f7e0 fd43 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ff08:	7bfa      	ldrb	r2, [r7, #15]
 801ff0a:	4611      	mov	r1, r2
 801ff0c:	4618      	mov	r0, r3
 801ff0e:	f7ee fb5e 	bl	800e5ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ff18:	4618      	mov	r0, r3
 801ff1a:	f7ee fb06 	bl	800e52a <USBD_LL_Reset>
}
 801ff1e:	bf00      	nop
 801ff20:	3710      	adds	r7, #16
 801ff22:	46bd      	mov	sp, r7
 801ff24:	bd80      	pop	{r7, pc}
	...

0801ff28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ff28:	b580      	push	{r7, lr}
 801ff2a:	b082      	sub	sp, #8
 801ff2c:	af00      	add	r7, sp, #0
 801ff2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801ff30:	687b      	ldr	r3, [r7, #4]
 801ff32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ff36:	4618      	mov	r0, r3
 801ff38:	f7ee fb59 	bl	800e5ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	681b      	ldr	r3, [r3, #0]
 801ff40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	687a      	ldr	r2, [r7, #4]
 801ff48:	6812      	ldr	r2, [r2, #0]
 801ff4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801ff4e:	f043 0301 	orr.w	r3, r3, #1
 801ff52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	6a1b      	ldr	r3, [r3, #32]
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d005      	beq.n	801ff68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801ff5c:	4b04      	ldr	r3, [pc, #16]	; (801ff70 <HAL_PCD_SuspendCallback+0x48>)
 801ff5e:	691b      	ldr	r3, [r3, #16]
 801ff60:	4a03      	ldr	r2, [pc, #12]	; (801ff70 <HAL_PCD_SuspendCallback+0x48>)
 801ff62:	f043 0306 	orr.w	r3, r3, #6
 801ff66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801ff68:	bf00      	nop
 801ff6a:	3708      	adds	r7, #8
 801ff6c:	46bd      	mov	sp, r7
 801ff6e:	bd80      	pop	{r7, pc}
 801ff70:	e000ed00 	.word	0xe000ed00

0801ff74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ff74:	b580      	push	{r7, lr}
 801ff76:	b082      	sub	sp, #8
 801ff78:	af00      	add	r7, sp, #0
 801ff7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ff82:	4618      	mov	r0, r3
 801ff84:	f7ee fb4f 	bl	800e626 <USBD_LL_Resume>
}
 801ff88:	bf00      	nop
 801ff8a:	3708      	adds	r7, #8
 801ff8c:	46bd      	mov	sp, r7
 801ff8e:	bd80      	pop	{r7, pc}

0801ff90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ff90:	b580      	push	{r7, lr}
 801ff92:	b082      	sub	sp, #8
 801ff94:	af00      	add	r7, sp, #0
 801ff96:	6078      	str	r0, [r7, #4]
 801ff98:	460b      	mov	r3, r1
 801ff9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ffa2:	78fa      	ldrb	r2, [r7, #3]
 801ffa4:	4611      	mov	r1, r2
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	f7ee fba7 	bl	800e6fa <USBD_LL_IsoOUTIncomplete>
}
 801ffac:	bf00      	nop
 801ffae:	3708      	adds	r7, #8
 801ffb0:	46bd      	mov	sp, r7
 801ffb2:	bd80      	pop	{r7, pc}

0801ffb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ffb4:	b580      	push	{r7, lr}
 801ffb6:	b082      	sub	sp, #8
 801ffb8:	af00      	add	r7, sp, #0
 801ffba:	6078      	str	r0, [r7, #4]
 801ffbc:	460b      	mov	r3, r1
 801ffbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ffc6:	78fa      	ldrb	r2, [r7, #3]
 801ffc8:	4611      	mov	r1, r2
 801ffca:	4618      	mov	r0, r3
 801ffcc:	f7ee fb63 	bl	800e696 <USBD_LL_IsoINIncomplete>
}
 801ffd0:	bf00      	nop
 801ffd2:	3708      	adds	r7, #8
 801ffd4:	46bd      	mov	sp, r7
 801ffd6:	bd80      	pop	{r7, pc}

0801ffd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ffd8:	b580      	push	{r7, lr}
 801ffda:	b082      	sub	sp, #8
 801ffdc:	af00      	add	r7, sp, #0
 801ffde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801ffe6:	4618      	mov	r0, r3
 801ffe8:	f7ee fbb9 	bl	800e75e <USBD_LL_DevConnected>
}
 801ffec:	bf00      	nop
 801ffee:	3708      	adds	r7, #8
 801fff0:	46bd      	mov	sp, r7
 801fff2:	bd80      	pop	{r7, pc}

0801fff4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801fff4:	b580      	push	{r7, lr}
 801fff6:	b082      	sub	sp, #8
 801fff8:	af00      	add	r7, sp, #0
 801fffa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8020002:	4618      	mov	r0, r3
 8020004:	f7ee fbb6 	bl	800e774 <USBD_LL_DevDisconnected>
}
 8020008:	bf00      	nop
 802000a:	3708      	adds	r7, #8
 802000c:	46bd      	mov	sp, r7
 802000e:	bd80      	pop	{r7, pc}

08020010 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020010:	b580      	push	{r7, lr}
 8020012:	b082      	sub	sp, #8
 8020014:	af00      	add	r7, sp, #0
 8020016:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8020018:	687b      	ldr	r3, [r7, #4]
 802001a:	781b      	ldrb	r3, [r3, #0]
 802001c:	2b01      	cmp	r3, #1
 802001e:	d140      	bne.n	80200a2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8020020:	4a22      	ldr	r2, [pc, #136]	; (80200ac <USBD_LL_Init+0x9c>)
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	4a20      	ldr	r2, [pc, #128]	; (80200ac <USBD_LL_Init+0x9c>)
 802002c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8020030:	4b1e      	ldr	r3, [pc, #120]	; (80200ac <USBD_LL_Init+0x9c>)
 8020032:	4a1f      	ldr	r2, [pc, #124]	; (80200b0 <USBD_LL_Init+0xa0>)
 8020034:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8020036:	4b1d      	ldr	r3, [pc, #116]	; (80200ac <USBD_LL_Init+0x9c>)
 8020038:	2209      	movs	r2, #9
 802003a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 802003c:	4b1b      	ldr	r3, [pc, #108]	; (80200ac <USBD_LL_Init+0x9c>)
 802003e:	2202      	movs	r2, #2
 8020040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8020042:	4b1a      	ldr	r3, [pc, #104]	; (80200ac <USBD_LL_Init+0x9c>)
 8020044:	2200      	movs	r2, #0
 8020046:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8020048:	4b18      	ldr	r3, [pc, #96]	; (80200ac <USBD_LL_Init+0x9c>)
 802004a:	2202      	movs	r2, #2
 802004c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 802004e:	4b17      	ldr	r3, [pc, #92]	; (80200ac <USBD_LL_Init+0x9c>)
 8020050:	2200      	movs	r2, #0
 8020052:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8020054:	4b15      	ldr	r3, [pc, #84]	; (80200ac <USBD_LL_Init+0x9c>)
 8020056:	2200      	movs	r2, #0
 8020058:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 802005a:	4b14      	ldr	r3, [pc, #80]	; (80200ac <USBD_LL_Init+0x9c>)
 802005c:	2200      	movs	r2, #0
 802005e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8020060:	4b12      	ldr	r3, [pc, #72]	; (80200ac <USBD_LL_Init+0x9c>)
 8020062:	2200      	movs	r2, #0
 8020064:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8020066:	4b11      	ldr	r3, [pc, #68]	; (80200ac <USBD_LL_Init+0x9c>)
 8020068:	2200      	movs	r2, #0
 802006a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 802006c:	4b0f      	ldr	r3, [pc, #60]	; (80200ac <USBD_LL_Init+0x9c>)
 802006e:	2200      	movs	r2, #0
 8020070:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8020072:	480e      	ldr	r0, [pc, #56]	; (80200ac <USBD_LL_Init+0x9c>)
 8020074:	f7e4 f816 	bl	80040a4 <HAL_PCD_Init>
 8020078:	4603      	mov	r3, r0
 802007a:	2b00      	cmp	r3, #0
 802007c:	d001      	beq.n	8020082 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 802007e:	f7e0 fc83 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8020082:	f44f 7100 	mov.w	r1, #512	; 0x200
 8020086:	4809      	ldr	r0, [pc, #36]	; (80200ac <USBD_LL_Init+0x9c>)
 8020088:	f7e5 fa85 	bl	8005596 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 802008c:	2280      	movs	r2, #128	; 0x80
 802008e:	2100      	movs	r1, #0
 8020090:	4806      	ldr	r0, [pc, #24]	; (80200ac <USBD_LL_Init+0x9c>)
 8020092:	f7e5 fa39 	bl	8005508 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8020096:	f44f 72ba 	mov.w	r2, #372	; 0x174
 802009a:	2101      	movs	r1, #1
 802009c:	4803      	ldr	r0, [pc, #12]	; (80200ac <USBD_LL_Init+0x9c>)
 802009e:	f7e5 fa33 	bl	8005508 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80200a2:	2300      	movs	r3, #0
}
 80200a4:	4618      	mov	r0, r3
 80200a6:	3708      	adds	r7, #8
 80200a8:	46bd      	mov	sp, r7
 80200aa:	bd80      	pop	{r7, pc}
 80200ac:	2400e1c0 	.word	0x2400e1c0
 80200b0:	40040000 	.word	0x40040000

080200b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80200b4:	b580      	push	{r7, lr}
 80200b6:	b084      	sub	sp, #16
 80200b8:	af00      	add	r7, sp, #0
 80200ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80200bc:	2300      	movs	r3, #0
 80200be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80200c0:	2300      	movs	r3, #0
 80200c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80200ca:	4618      	mov	r0, r3
 80200cc:	f7e4 f90e 	bl	80042ec <HAL_PCD_Start>
 80200d0:	4603      	mov	r3, r0
 80200d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80200d4:	7bfb      	ldrb	r3, [r7, #15]
 80200d6:	4618      	mov	r0, r3
 80200d8:	f000 f942 	bl	8020360 <USBD_Get_USB_Status>
 80200dc:	4603      	mov	r3, r0
 80200de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80200e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80200e2:	4618      	mov	r0, r3
 80200e4:	3710      	adds	r7, #16
 80200e6:	46bd      	mov	sp, r7
 80200e8:	bd80      	pop	{r7, pc}

080200ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80200ea:	b580      	push	{r7, lr}
 80200ec:	b084      	sub	sp, #16
 80200ee:	af00      	add	r7, sp, #0
 80200f0:	6078      	str	r0, [r7, #4]
 80200f2:	4608      	mov	r0, r1
 80200f4:	4611      	mov	r1, r2
 80200f6:	461a      	mov	r2, r3
 80200f8:	4603      	mov	r3, r0
 80200fa:	70fb      	strb	r3, [r7, #3]
 80200fc:	460b      	mov	r3, r1
 80200fe:	70bb      	strb	r3, [r7, #2]
 8020100:	4613      	mov	r3, r2
 8020102:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020104:	2300      	movs	r3, #0
 8020106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020108:	2300      	movs	r3, #0
 802010a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8020112:	78bb      	ldrb	r3, [r7, #2]
 8020114:	883a      	ldrh	r2, [r7, #0]
 8020116:	78f9      	ldrb	r1, [r7, #3]
 8020118:	f7e4 fe0e 	bl	8004d38 <HAL_PCD_EP_Open>
 802011c:	4603      	mov	r3, r0
 802011e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020120:	7bfb      	ldrb	r3, [r7, #15]
 8020122:	4618      	mov	r0, r3
 8020124:	f000 f91c 	bl	8020360 <USBD_Get_USB_Status>
 8020128:	4603      	mov	r3, r0
 802012a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802012c:	7bbb      	ldrb	r3, [r7, #14]
}
 802012e:	4618      	mov	r0, r3
 8020130:	3710      	adds	r7, #16
 8020132:	46bd      	mov	sp, r7
 8020134:	bd80      	pop	{r7, pc}

08020136 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020136:	b580      	push	{r7, lr}
 8020138:	b084      	sub	sp, #16
 802013a:	af00      	add	r7, sp, #0
 802013c:	6078      	str	r0, [r7, #4]
 802013e:	460b      	mov	r3, r1
 8020140:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020142:	2300      	movs	r3, #0
 8020144:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020146:	2300      	movs	r3, #0
 8020148:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020150:	78fa      	ldrb	r2, [r7, #3]
 8020152:	4611      	mov	r1, r2
 8020154:	4618      	mov	r0, r3
 8020156:	f7e4 fe57 	bl	8004e08 <HAL_PCD_EP_Close>
 802015a:	4603      	mov	r3, r0
 802015c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802015e:	7bfb      	ldrb	r3, [r7, #15]
 8020160:	4618      	mov	r0, r3
 8020162:	f000 f8fd 	bl	8020360 <USBD_Get_USB_Status>
 8020166:	4603      	mov	r3, r0
 8020168:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802016a:	7bbb      	ldrb	r3, [r7, #14]
}
 802016c:	4618      	mov	r0, r3
 802016e:	3710      	adds	r7, #16
 8020170:	46bd      	mov	sp, r7
 8020172:	bd80      	pop	{r7, pc}

08020174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020174:	b580      	push	{r7, lr}
 8020176:	b084      	sub	sp, #16
 8020178:	af00      	add	r7, sp, #0
 802017a:	6078      	str	r0, [r7, #4]
 802017c:	460b      	mov	r3, r1
 802017e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020180:	2300      	movs	r3, #0
 8020182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020184:	2300      	movs	r3, #0
 8020186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802018e:	78fa      	ldrb	r2, [r7, #3]
 8020190:	4611      	mov	r1, r2
 8020192:	4618      	mov	r0, r3
 8020194:	f7e4 ff11 	bl	8004fba <HAL_PCD_EP_SetStall>
 8020198:	4603      	mov	r3, r0
 802019a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802019c:	7bfb      	ldrb	r3, [r7, #15]
 802019e:	4618      	mov	r0, r3
 80201a0:	f000 f8de 	bl	8020360 <USBD_Get_USB_Status>
 80201a4:	4603      	mov	r3, r0
 80201a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80201a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80201aa:	4618      	mov	r0, r3
 80201ac:	3710      	adds	r7, #16
 80201ae:	46bd      	mov	sp, r7
 80201b0:	bd80      	pop	{r7, pc}

080201b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80201b2:	b580      	push	{r7, lr}
 80201b4:	b084      	sub	sp, #16
 80201b6:	af00      	add	r7, sp, #0
 80201b8:	6078      	str	r0, [r7, #4]
 80201ba:	460b      	mov	r3, r1
 80201bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80201be:	2300      	movs	r3, #0
 80201c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80201c2:	2300      	movs	r3, #0
 80201c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80201cc:	78fa      	ldrb	r2, [r7, #3]
 80201ce:	4611      	mov	r1, r2
 80201d0:	4618      	mov	r0, r3
 80201d2:	f7e4 ff56 	bl	8005082 <HAL_PCD_EP_ClrStall>
 80201d6:	4603      	mov	r3, r0
 80201d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80201da:	7bfb      	ldrb	r3, [r7, #15]
 80201dc:	4618      	mov	r0, r3
 80201de:	f000 f8bf 	bl	8020360 <USBD_Get_USB_Status>
 80201e2:	4603      	mov	r3, r0
 80201e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80201e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80201e8:	4618      	mov	r0, r3
 80201ea:	3710      	adds	r7, #16
 80201ec:	46bd      	mov	sp, r7
 80201ee:	bd80      	pop	{r7, pc}

080201f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80201f0:	b480      	push	{r7}
 80201f2:	b085      	sub	sp, #20
 80201f4:	af00      	add	r7, sp, #0
 80201f6:	6078      	str	r0, [r7, #4]
 80201f8:	460b      	mov	r3, r1
 80201fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020202:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020208:	2b00      	cmp	r3, #0
 802020a:	da0b      	bge.n	8020224 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802020c:	78fb      	ldrb	r3, [r7, #3]
 802020e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8020212:	68f9      	ldr	r1, [r7, #12]
 8020214:	4613      	mov	r3, r2
 8020216:	00db      	lsls	r3, r3, #3
 8020218:	4413      	add	r3, r2
 802021a:	009b      	lsls	r3, r3, #2
 802021c:	440b      	add	r3, r1
 802021e:	333e      	adds	r3, #62	; 0x3e
 8020220:	781b      	ldrb	r3, [r3, #0]
 8020222:	e00b      	b.n	802023c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020224:	78fb      	ldrb	r3, [r7, #3]
 8020226:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 802022a:	68f9      	ldr	r1, [r7, #12]
 802022c:	4613      	mov	r3, r2
 802022e:	00db      	lsls	r3, r3, #3
 8020230:	4413      	add	r3, r2
 8020232:	009b      	lsls	r3, r3, #2
 8020234:	440b      	add	r3, r1
 8020236:	f203 237e 	addw	r3, r3, #638	; 0x27e
 802023a:	781b      	ldrb	r3, [r3, #0]
  }
}
 802023c:	4618      	mov	r0, r3
 802023e:	3714      	adds	r7, #20
 8020240:	46bd      	mov	sp, r7
 8020242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020246:	4770      	bx	lr

08020248 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020248:	b580      	push	{r7, lr}
 802024a:	b084      	sub	sp, #16
 802024c:	af00      	add	r7, sp, #0
 802024e:	6078      	str	r0, [r7, #4]
 8020250:	460b      	mov	r3, r1
 8020252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020254:	2300      	movs	r3, #0
 8020256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020258:	2300      	movs	r3, #0
 802025a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8020262:	78fa      	ldrb	r2, [r7, #3]
 8020264:	4611      	mov	r1, r2
 8020266:	4618      	mov	r0, r3
 8020268:	f7e4 fd41 	bl	8004cee <HAL_PCD_SetAddress>
 802026c:	4603      	mov	r3, r0
 802026e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020270:	7bfb      	ldrb	r3, [r7, #15]
 8020272:	4618      	mov	r0, r3
 8020274:	f000 f874 	bl	8020360 <USBD_Get_USB_Status>
 8020278:	4603      	mov	r3, r0
 802027a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802027c:	7bbb      	ldrb	r3, [r7, #14]
}
 802027e:	4618      	mov	r0, r3
 8020280:	3710      	adds	r7, #16
 8020282:	46bd      	mov	sp, r7
 8020284:	bd80      	pop	{r7, pc}

08020286 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020286:	b580      	push	{r7, lr}
 8020288:	b086      	sub	sp, #24
 802028a:	af00      	add	r7, sp, #0
 802028c:	60f8      	str	r0, [r7, #12]
 802028e:	607a      	str	r2, [r7, #4]
 8020290:	603b      	str	r3, [r7, #0]
 8020292:	460b      	mov	r3, r1
 8020294:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020296:	2300      	movs	r3, #0
 8020298:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802029a:	2300      	movs	r3, #0
 802029c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80202a4:	7af9      	ldrb	r1, [r7, #11]
 80202a6:	683b      	ldr	r3, [r7, #0]
 80202a8:	687a      	ldr	r2, [r7, #4]
 80202aa:	f7e4 fe4b 	bl	8004f44 <HAL_PCD_EP_Transmit>
 80202ae:	4603      	mov	r3, r0
 80202b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80202b2:	7dfb      	ldrb	r3, [r7, #23]
 80202b4:	4618      	mov	r0, r3
 80202b6:	f000 f853 	bl	8020360 <USBD_Get_USB_Status>
 80202ba:	4603      	mov	r3, r0
 80202bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80202be:	7dbb      	ldrb	r3, [r7, #22]
}
 80202c0:	4618      	mov	r0, r3
 80202c2:	3718      	adds	r7, #24
 80202c4:	46bd      	mov	sp, r7
 80202c6:	bd80      	pop	{r7, pc}

080202c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80202c8:	b580      	push	{r7, lr}
 80202ca:	b086      	sub	sp, #24
 80202cc:	af00      	add	r7, sp, #0
 80202ce:	60f8      	str	r0, [r7, #12]
 80202d0:	607a      	str	r2, [r7, #4]
 80202d2:	603b      	str	r3, [r7, #0]
 80202d4:	460b      	mov	r3, r1
 80202d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80202d8:	2300      	movs	r3, #0
 80202da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80202dc:	2300      	movs	r3, #0
 80202de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80202e0:	68fb      	ldr	r3, [r7, #12]
 80202e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80202e6:	7af9      	ldrb	r1, [r7, #11]
 80202e8:	683b      	ldr	r3, [r7, #0]
 80202ea:	687a      	ldr	r2, [r7, #4]
 80202ec:	f7e4 fdd6 	bl	8004e9c <HAL_PCD_EP_Receive>
 80202f0:	4603      	mov	r3, r0
 80202f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80202f4:	7dfb      	ldrb	r3, [r7, #23]
 80202f6:	4618      	mov	r0, r3
 80202f8:	f000 f832 	bl	8020360 <USBD_Get_USB_Status>
 80202fc:	4603      	mov	r3, r0
 80202fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020300:	7dbb      	ldrb	r3, [r7, #22]
}
 8020302:	4618      	mov	r0, r3
 8020304:	3718      	adds	r7, #24
 8020306:	46bd      	mov	sp, r7
 8020308:	bd80      	pop	{r7, pc}

0802030a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802030a:	b580      	push	{r7, lr}
 802030c:	b082      	sub	sp, #8
 802030e:	af00      	add	r7, sp, #0
 8020310:	6078      	str	r0, [r7, #4]
 8020312:	460b      	mov	r3, r1
 8020314:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020316:	687b      	ldr	r3, [r7, #4]
 8020318:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802031c:	78fa      	ldrb	r2, [r7, #3]
 802031e:	4611      	mov	r1, r2
 8020320:	4618      	mov	r0, r3
 8020322:	f7e4 fdf7 	bl	8004f14 <HAL_PCD_EP_GetRxCount>
 8020326:	4603      	mov	r3, r0
}
 8020328:	4618      	mov	r0, r3
 802032a:	3708      	adds	r7, #8
 802032c:	46bd      	mov	sp, r7
 802032e:	bd80      	pop	{r7, pc}

08020330 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8020330:	b480      	push	{r7}
 8020332:	b083      	sub	sp, #12
 8020334:	af00      	add	r7, sp, #0
 8020336:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8020338:	4b03      	ldr	r3, [pc, #12]	; (8020348 <USBD_static_malloc+0x18>)
}
 802033a:	4618      	mov	r0, r3
 802033c:	370c      	adds	r7, #12
 802033e:	46bd      	mov	sp, r7
 8020340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020344:	4770      	bx	lr
 8020346:	bf00      	nop
 8020348:	2400e6cc 	.word	0x2400e6cc

0802034c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 802034c:	b480      	push	{r7}
 802034e:	b083      	sub	sp, #12
 8020350:	af00      	add	r7, sp, #0
 8020352:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8020354:	bf00      	nop
 8020356:	370c      	adds	r7, #12
 8020358:	46bd      	mov	sp, r7
 802035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802035e:	4770      	bx	lr

08020360 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020360:	b480      	push	{r7}
 8020362:	b085      	sub	sp, #20
 8020364:	af00      	add	r7, sp, #0
 8020366:	4603      	mov	r3, r0
 8020368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802036a:	2300      	movs	r3, #0
 802036c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802036e:	79fb      	ldrb	r3, [r7, #7]
 8020370:	2b03      	cmp	r3, #3
 8020372:	d817      	bhi.n	80203a4 <USBD_Get_USB_Status+0x44>
 8020374:	a201      	add	r2, pc, #4	; (adr r2, 802037c <USBD_Get_USB_Status+0x1c>)
 8020376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802037a:	bf00      	nop
 802037c:	0802038d 	.word	0x0802038d
 8020380:	08020393 	.word	0x08020393
 8020384:	08020399 	.word	0x08020399
 8020388:	0802039f 	.word	0x0802039f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802038c:	2300      	movs	r3, #0
 802038e:	73fb      	strb	r3, [r7, #15]
    break;
 8020390:	e00b      	b.n	80203aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8020392:	2303      	movs	r3, #3
 8020394:	73fb      	strb	r3, [r7, #15]
    break;
 8020396:	e008      	b.n	80203aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8020398:	2301      	movs	r3, #1
 802039a:	73fb      	strb	r3, [r7, #15]
    break;
 802039c:	e005      	b.n	80203aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802039e:	2303      	movs	r3, #3
 80203a0:	73fb      	strb	r3, [r7, #15]
    break;
 80203a2:	e002      	b.n	80203aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80203a4:	2303      	movs	r3, #3
 80203a6:	73fb      	strb	r3, [r7, #15]
    break;
 80203a8:	bf00      	nop
  }
  return usb_status;
 80203aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80203ac:	4618      	mov	r0, r3
 80203ae:	3714      	adds	r7, #20
 80203b0:	46bd      	mov	sp, r7
 80203b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203b6:	4770      	bx	lr

080203b8 <std>:
 80203b8:	2300      	movs	r3, #0
 80203ba:	b510      	push	{r4, lr}
 80203bc:	4604      	mov	r4, r0
 80203be:	e9c0 3300 	strd	r3, r3, [r0]
 80203c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80203c6:	6083      	str	r3, [r0, #8]
 80203c8:	8181      	strh	r1, [r0, #12]
 80203ca:	6643      	str	r3, [r0, #100]	; 0x64
 80203cc:	81c2      	strh	r2, [r0, #14]
 80203ce:	6183      	str	r3, [r0, #24]
 80203d0:	4619      	mov	r1, r3
 80203d2:	2208      	movs	r2, #8
 80203d4:	305c      	adds	r0, #92	; 0x5c
 80203d6:	f000 f92a 	bl	802062e <memset>
 80203da:	4b05      	ldr	r3, [pc, #20]	; (80203f0 <std+0x38>)
 80203dc:	6263      	str	r3, [r4, #36]	; 0x24
 80203de:	4b05      	ldr	r3, [pc, #20]	; (80203f4 <std+0x3c>)
 80203e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80203e2:	4b05      	ldr	r3, [pc, #20]	; (80203f8 <std+0x40>)
 80203e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80203e6:	4b05      	ldr	r3, [pc, #20]	; (80203fc <std+0x44>)
 80203e8:	6224      	str	r4, [r4, #32]
 80203ea:	6323      	str	r3, [r4, #48]	; 0x30
 80203ec:	bd10      	pop	{r4, pc}
 80203ee:	bf00      	nop
 80203f0:	08020909 	.word	0x08020909
 80203f4:	0802092b 	.word	0x0802092b
 80203f8:	08020963 	.word	0x08020963
 80203fc:	08020987 	.word	0x08020987

08020400 <_cleanup_r>:
 8020400:	4901      	ldr	r1, [pc, #4]	; (8020408 <_cleanup_r+0x8>)
 8020402:	f000 b8af 	b.w	8020564 <_fwalk_reent>
 8020406:	bf00      	nop
 8020408:	08020b1d 	.word	0x08020b1d

0802040c <__sfmoreglue>:
 802040c:	b570      	push	{r4, r5, r6, lr}
 802040e:	2268      	movs	r2, #104	; 0x68
 8020410:	1e4d      	subs	r5, r1, #1
 8020412:	4355      	muls	r5, r2
 8020414:	460e      	mov	r6, r1
 8020416:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802041a:	f000 f931 	bl	8020680 <_malloc_r>
 802041e:	4604      	mov	r4, r0
 8020420:	b140      	cbz	r0, 8020434 <__sfmoreglue+0x28>
 8020422:	2100      	movs	r1, #0
 8020424:	e9c0 1600 	strd	r1, r6, [r0]
 8020428:	300c      	adds	r0, #12
 802042a:	60a0      	str	r0, [r4, #8]
 802042c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8020430:	f000 f8fd 	bl	802062e <memset>
 8020434:	4620      	mov	r0, r4
 8020436:	bd70      	pop	{r4, r5, r6, pc}

08020438 <__sfp_lock_acquire>:
 8020438:	4801      	ldr	r0, [pc, #4]	; (8020440 <__sfp_lock_acquire+0x8>)
 802043a:	f000 b8d8 	b.w	80205ee <__retarget_lock_acquire_recursive>
 802043e:	bf00      	nop
 8020440:	2400e8ed 	.word	0x2400e8ed

08020444 <__sfp_lock_release>:
 8020444:	4801      	ldr	r0, [pc, #4]	; (802044c <__sfp_lock_release+0x8>)
 8020446:	f000 b8d3 	b.w	80205f0 <__retarget_lock_release_recursive>
 802044a:	bf00      	nop
 802044c:	2400e8ed 	.word	0x2400e8ed

08020450 <__sinit_lock_acquire>:
 8020450:	4801      	ldr	r0, [pc, #4]	; (8020458 <__sinit_lock_acquire+0x8>)
 8020452:	f000 b8cc 	b.w	80205ee <__retarget_lock_acquire_recursive>
 8020456:	bf00      	nop
 8020458:	2400e8ee 	.word	0x2400e8ee

0802045c <__sinit_lock_release>:
 802045c:	4801      	ldr	r0, [pc, #4]	; (8020464 <__sinit_lock_release+0x8>)
 802045e:	f000 b8c7 	b.w	80205f0 <__retarget_lock_release_recursive>
 8020462:	bf00      	nop
 8020464:	2400e8ee 	.word	0x2400e8ee

08020468 <__sinit>:
 8020468:	b510      	push	{r4, lr}
 802046a:	4604      	mov	r4, r0
 802046c:	f7ff fff0 	bl	8020450 <__sinit_lock_acquire>
 8020470:	69a3      	ldr	r3, [r4, #24]
 8020472:	b11b      	cbz	r3, 802047c <__sinit+0x14>
 8020474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020478:	f7ff bff0 	b.w	802045c <__sinit_lock_release>
 802047c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020480:	6523      	str	r3, [r4, #80]	; 0x50
 8020482:	4b13      	ldr	r3, [pc, #76]	; (80204d0 <__sinit+0x68>)
 8020484:	4a13      	ldr	r2, [pc, #76]	; (80204d4 <__sinit+0x6c>)
 8020486:	681b      	ldr	r3, [r3, #0]
 8020488:	62a2      	str	r2, [r4, #40]	; 0x28
 802048a:	42a3      	cmp	r3, r4
 802048c:	bf04      	itt	eq
 802048e:	2301      	moveq	r3, #1
 8020490:	61a3      	streq	r3, [r4, #24]
 8020492:	4620      	mov	r0, r4
 8020494:	f000 f820 	bl	80204d8 <__sfp>
 8020498:	6060      	str	r0, [r4, #4]
 802049a:	4620      	mov	r0, r4
 802049c:	f000 f81c 	bl	80204d8 <__sfp>
 80204a0:	60a0      	str	r0, [r4, #8]
 80204a2:	4620      	mov	r0, r4
 80204a4:	f000 f818 	bl	80204d8 <__sfp>
 80204a8:	2200      	movs	r2, #0
 80204aa:	60e0      	str	r0, [r4, #12]
 80204ac:	2104      	movs	r1, #4
 80204ae:	6860      	ldr	r0, [r4, #4]
 80204b0:	f7ff ff82 	bl	80203b8 <std>
 80204b4:	68a0      	ldr	r0, [r4, #8]
 80204b6:	2201      	movs	r2, #1
 80204b8:	2109      	movs	r1, #9
 80204ba:	f7ff ff7d 	bl	80203b8 <std>
 80204be:	68e0      	ldr	r0, [r4, #12]
 80204c0:	2202      	movs	r2, #2
 80204c2:	2112      	movs	r1, #18
 80204c4:	f7ff ff78 	bl	80203b8 <std>
 80204c8:	2301      	movs	r3, #1
 80204ca:	61a3      	str	r3, [r4, #24]
 80204cc:	e7d2      	b.n	8020474 <__sinit+0xc>
 80204ce:	bf00      	nop
 80204d0:	08024708 	.word	0x08024708
 80204d4:	08020401 	.word	0x08020401

080204d8 <__sfp>:
 80204d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80204da:	4607      	mov	r7, r0
 80204dc:	f7ff ffac 	bl	8020438 <__sfp_lock_acquire>
 80204e0:	4b1e      	ldr	r3, [pc, #120]	; (802055c <__sfp+0x84>)
 80204e2:	681e      	ldr	r6, [r3, #0]
 80204e4:	69b3      	ldr	r3, [r6, #24]
 80204e6:	b913      	cbnz	r3, 80204ee <__sfp+0x16>
 80204e8:	4630      	mov	r0, r6
 80204ea:	f7ff ffbd 	bl	8020468 <__sinit>
 80204ee:	3648      	adds	r6, #72	; 0x48
 80204f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80204f4:	3b01      	subs	r3, #1
 80204f6:	d503      	bpl.n	8020500 <__sfp+0x28>
 80204f8:	6833      	ldr	r3, [r6, #0]
 80204fa:	b30b      	cbz	r3, 8020540 <__sfp+0x68>
 80204fc:	6836      	ldr	r6, [r6, #0]
 80204fe:	e7f7      	b.n	80204f0 <__sfp+0x18>
 8020500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020504:	b9d5      	cbnz	r5, 802053c <__sfp+0x64>
 8020506:	4b16      	ldr	r3, [pc, #88]	; (8020560 <__sfp+0x88>)
 8020508:	60e3      	str	r3, [r4, #12]
 802050a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802050e:	6665      	str	r5, [r4, #100]	; 0x64
 8020510:	f000 f86c 	bl	80205ec <__retarget_lock_init_recursive>
 8020514:	f7ff ff96 	bl	8020444 <__sfp_lock_release>
 8020518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802051c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8020520:	6025      	str	r5, [r4, #0]
 8020522:	61a5      	str	r5, [r4, #24]
 8020524:	2208      	movs	r2, #8
 8020526:	4629      	mov	r1, r5
 8020528:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802052c:	f000 f87f 	bl	802062e <memset>
 8020530:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8020534:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8020538:	4620      	mov	r0, r4
 802053a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802053c:	3468      	adds	r4, #104	; 0x68
 802053e:	e7d9      	b.n	80204f4 <__sfp+0x1c>
 8020540:	2104      	movs	r1, #4
 8020542:	4638      	mov	r0, r7
 8020544:	f7ff ff62 	bl	802040c <__sfmoreglue>
 8020548:	4604      	mov	r4, r0
 802054a:	6030      	str	r0, [r6, #0]
 802054c:	2800      	cmp	r0, #0
 802054e:	d1d5      	bne.n	80204fc <__sfp+0x24>
 8020550:	f7ff ff78 	bl	8020444 <__sfp_lock_release>
 8020554:	230c      	movs	r3, #12
 8020556:	603b      	str	r3, [r7, #0]
 8020558:	e7ee      	b.n	8020538 <__sfp+0x60>
 802055a:	bf00      	nop
 802055c:	08024708 	.word	0x08024708
 8020560:	ffff0001 	.word	0xffff0001

08020564 <_fwalk_reent>:
 8020564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020568:	4606      	mov	r6, r0
 802056a:	4688      	mov	r8, r1
 802056c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020570:	2700      	movs	r7, #0
 8020572:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020576:	f1b9 0901 	subs.w	r9, r9, #1
 802057a:	d505      	bpl.n	8020588 <_fwalk_reent+0x24>
 802057c:	6824      	ldr	r4, [r4, #0]
 802057e:	2c00      	cmp	r4, #0
 8020580:	d1f7      	bne.n	8020572 <_fwalk_reent+0xe>
 8020582:	4638      	mov	r0, r7
 8020584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020588:	89ab      	ldrh	r3, [r5, #12]
 802058a:	2b01      	cmp	r3, #1
 802058c:	d907      	bls.n	802059e <_fwalk_reent+0x3a>
 802058e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020592:	3301      	adds	r3, #1
 8020594:	d003      	beq.n	802059e <_fwalk_reent+0x3a>
 8020596:	4629      	mov	r1, r5
 8020598:	4630      	mov	r0, r6
 802059a:	47c0      	blx	r8
 802059c:	4307      	orrs	r7, r0
 802059e:	3568      	adds	r5, #104	; 0x68
 80205a0:	e7e9      	b.n	8020576 <_fwalk_reent+0x12>
	...

080205a4 <__libc_init_array>:
 80205a4:	b570      	push	{r4, r5, r6, lr}
 80205a6:	4d0d      	ldr	r5, [pc, #52]	; (80205dc <__libc_init_array+0x38>)
 80205a8:	4c0d      	ldr	r4, [pc, #52]	; (80205e0 <__libc_init_array+0x3c>)
 80205aa:	1b64      	subs	r4, r4, r5
 80205ac:	10a4      	asrs	r4, r4, #2
 80205ae:	2600      	movs	r6, #0
 80205b0:	42a6      	cmp	r6, r4
 80205b2:	d109      	bne.n	80205c8 <__libc_init_array+0x24>
 80205b4:	4d0b      	ldr	r5, [pc, #44]	; (80205e4 <__libc_init_array+0x40>)
 80205b6:	4c0c      	ldr	r4, [pc, #48]	; (80205e8 <__libc_init_array+0x44>)
 80205b8:	f001 f802 	bl	80215c0 <_init>
 80205bc:	1b64      	subs	r4, r4, r5
 80205be:	10a4      	asrs	r4, r4, #2
 80205c0:	2600      	movs	r6, #0
 80205c2:	42a6      	cmp	r6, r4
 80205c4:	d105      	bne.n	80205d2 <__libc_init_array+0x2e>
 80205c6:	bd70      	pop	{r4, r5, r6, pc}
 80205c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80205cc:	4798      	blx	r3
 80205ce:	3601      	adds	r6, #1
 80205d0:	e7ee      	b.n	80205b0 <__libc_init_array+0xc>
 80205d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80205d6:	4798      	blx	r3
 80205d8:	3601      	adds	r6, #1
 80205da:	e7f2      	b.n	80205c2 <__libc_init_array+0x1e>
 80205dc:	080247f0 	.word	0x080247f0
 80205e0:	080247f0 	.word	0x080247f0
 80205e4:	080247f0 	.word	0x080247f0
 80205e8:	080247f4 	.word	0x080247f4

080205ec <__retarget_lock_init_recursive>:
 80205ec:	4770      	bx	lr

080205ee <__retarget_lock_acquire_recursive>:
 80205ee:	4770      	bx	lr

080205f0 <__retarget_lock_release_recursive>:
 80205f0:	4770      	bx	lr

080205f2 <memcmp>:
 80205f2:	b510      	push	{r4, lr}
 80205f4:	3901      	subs	r1, #1
 80205f6:	4402      	add	r2, r0
 80205f8:	4290      	cmp	r0, r2
 80205fa:	d101      	bne.n	8020600 <memcmp+0xe>
 80205fc:	2000      	movs	r0, #0
 80205fe:	e005      	b.n	802060c <memcmp+0x1a>
 8020600:	7803      	ldrb	r3, [r0, #0]
 8020602:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020606:	42a3      	cmp	r3, r4
 8020608:	d001      	beq.n	802060e <memcmp+0x1c>
 802060a:	1b18      	subs	r0, r3, r4
 802060c:	bd10      	pop	{r4, pc}
 802060e:	3001      	adds	r0, #1
 8020610:	e7f2      	b.n	80205f8 <memcmp+0x6>

08020612 <memcpy>:
 8020612:	440a      	add	r2, r1
 8020614:	4291      	cmp	r1, r2
 8020616:	f100 33ff 	add.w	r3, r0, #4294967295
 802061a:	d100      	bne.n	802061e <memcpy+0xc>
 802061c:	4770      	bx	lr
 802061e:	b510      	push	{r4, lr}
 8020620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020628:	4291      	cmp	r1, r2
 802062a:	d1f9      	bne.n	8020620 <memcpy+0xe>
 802062c:	bd10      	pop	{r4, pc}

0802062e <memset>:
 802062e:	4402      	add	r2, r0
 8020630:	4603      	mov	r3, r0
 8020632:	4293      	cmp	r3, r2
 8020634:	d100      	bne.n	8020638 <memset+0xa>
 8020636:	4770      	bx	lr
 8020638:	f803 1b01 	strb.w	r1, [r3], #1
 802063c:	e7f9      	b.n	8020632 <memset+0x4>
	...

08020640 <sbrk_aligned>:
 8020640:	b570      	push	{r4, r5, r6, lr}
 8020642:	4e0e      	ldr	r6, [pc, #56]	; (802067c <sbrk_aligned+0x3c>)
 8020644:	460c      	mov	r4, r1
 8020646:	6831      	ldr	r1, [r6, #0]
 8020648:	4605      	mov	r5, r0
 802064a:	b911      	cbnz	r1, 8020652 <sbrk_aligned+0x12>
 802064c:	f000 f94c 	bl	80208e8 <_sbrk_r>
 8020650:	6030      	str	r0, [r6, #0]
 8020652:	4621      	mov	r1, r4
 8020654:	4628      	mov	r0, r5
 8020656:	f000 f947 	bl	80208e8 <_sbrk_r>
 802065a:	1c43      	adds	r3, r0, #1
 802065c:	d00a      	beq.n	8020674 <sbrk_aligned+0x34>
 802065e:	1cc4      	adds	r4, r0, #3
 8020660:	f024 0403 	bic.w	r4, r4, #3
 8020664:	42a0      	cmp	r0, r4
 8020666:	d007      	beq.n	8020678 <sbrk_aligned+0x38>
 8020668:	1a21      	subs	r1, r4, r0
 802066a:	4628      	mov	r0, r5
 802066c:	f000 f93c 	bl	80208e8 <_sbrk_r>
 8020670:	3001      	adds	r0, #1
 8020672:	d101      	bne.n	8020678 <sbrk_aligned+0x38>
 8020674:	f04f 34ff 	mov.w	r4, #4294967295
 8020678:	4620      	mov	r0, r4
 802067a:	bd70      	pop	{r4, r5, r6, pc}
 802067c:	2400e8f4 	.word	0x2400e8f4

08020680 <_malloc_r>:
 8020680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020684:	1ccd      	adds	r5, r1, #3
 8020686:	f025 0503 	bic.w	r5, r5, #3
 802068a:	3508      	adds	r5, #8
 802068c:	2d0c      	cmp	r5, #12
 802068e:	bf38      	it	cc
 8020690:	250c      	movcc	r5, #12
 8020692:	2d00      	cmp	r5, #0
 8020694:	4607      	mov	r7, r0
 8020696:	db01      	blt.n	802069c <_malloc_r+0x1c>
 8020698:	42a9      	cmp	r1, r5
 802069a:	d905      	bls.n	80206a8 <_malloc_r+0x28>
 802069c:	230c      	movs	r3, #12
 802069e:	603b      	str	r3, [r7, #0]
 80206a0:	2600      	movs	r6, #0
 80206a2:	4630      	mov	r0, r6
 80206a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206a8:	4e2e      	ldr	r6, [pc, #184]	; (8020764 <_malloc_r+0xe4>)
 80206aa:	f000 fa9f 	bl	8020bec <__malloc_lock>
 80206ae:	6833      	ldr	r3, [r6, #0]
 80206b0:	461c      	mov	r4, r3
 80206b2:	bb34      	cbnz	r4, 8020702 <_malloc_r+0x82>
 80206b4:	4629      	mov	r1, r5
 80206b6:	4638      	mov	r0, r7
 80206b8:	f7ff ffc2 	bl	8020640 <sbrk_aligned>
 80206bc:	1c43      	adds	r3, r0, #1
 80206be:	4604      	mov	r4, r0
 80206c0:	d14d      	bne.n	802075e <_malloc_r+0xde>
 80206c2:	6834      	ldr	r4, [r6, #0]
 80206c4:	4626      	mov	r6, r4
 80206c6:	2e00      	cmp	r6, #0
 80206c8:	d140      	bne.n	802074c <_malloc_r+0xcc>
 80206ca:	6823      	ldr	r3, [r4, #0]
 80206cc:	4631      	mov	r1, r6
 80206ce:	4638      	mov	r0, r7
 80206d0:	eb04 0803 	add.w	r8, r4, r3
 80206d4:	f000 f908 	bl	80208e8 <_sbrk_r>
 80206d8:	4580      	cmp	r8, r0
 80206da:	d13a      	bne.n	8020752 <_malloc_r+0xd2>
 80206dc:	6821      	ldr	r1, [r4, #0]
 80206de:	3503      	adds	r5, #3
 80206e0:	1a6d      	subs	r5, r5, r1
 80206e2:	f025 0503 	bic.w	r5, r5, #3
 80206e6:	3508      	adds	r5, #8
 80206e8:	2d0c      	cmp	r5, #12
 80206ea:	bf38      	it	cc
 80206ec:	250c      	movcc	r5, #12
 80206ee:	4629      	mov	r1, r5
 80206f0:	4638      	mov	r0, r7
 80206f2:	f7ff ffa5 	bl	8020640 <sbrk_aligned>
 80206f6:	3001      	adds	r0, #1
 80206f8:	d02b      	beq.n	8020752 <_malloc_r+0xd2>
 80206fa:	6823      	ldr	r3, [r4, #0]
 80206fc:	442b      	add	r3, r5
 80206fe:	6023      	str	r3, [r4, #0]
 8020700:	e00e      	b.n	8020720 <_malloc_r+0xa0>
 8020702:	6822      	ldr	r2, [r4, #0]
 8020704:	1b52      	subs	r2, r2, r5
 8020706:	d41e      	bmi.n	8020746 <_malloc_r+0xc6>
 8020708:	2a0b      	cmp	r2, #11
 802070a:	d916      	bls.n	802073a <_malloc_r+0xba>
 802070c:	1961      	adds	r1, r4, r5
 802070e:	42a3      	cmp	r3, r4
 8020710:	6025      	str	r5, [r4, #0]
 8020712:	bf18      	it	ne
 8020714:	6059      	strne	r1, [r3, #4]
 8020716:	6863      	ldr	r3, [r4, #4]
 8020718:	bf08      	it	eq
 802071a:	6031      	streq	r1, [r6, #0]
 802071c:	5162      	str	r2, [r4, r5]
 802071e:	604b      	str	r3, [r1, #4]
 8020720:	4638      	mov	r0, r7
 8020722:	f104 060b 	add.w	r6, r4, #11
 8020726:	f000 fa67 	bl	8020bf8 <__malloc_unlock>
 802072a:	f026 0607 	bic.w	r6, r6, #7
 802072e:	1d23      	adds	r3, r4, #4
 8020730:	1af2      	subs	r2, r6, r3
 8020732:	d0b6      	beq.n	80206a2 <_malloc_r+0x22>
 8020734:	1b9b      	subs	r3, r3, r6
 8020736:	50a3      	str	r3, [r4, r2]
 8020738:	e7b3      	b.n	80206a2 <_malloc_r+0x22>
 802073a:	6862      	ldr	r2, [r4, #4]
 802073c:	42a3      	cmp	r3, r4
 802073e:	bf0c      	ite	eq
 8020740:	6032      	streq	r2, [r6, #0]
 8020742:	605a      	strne	r2, [r3, #4]
 8020744:	e7ec      	b.n	8020720 <_malloc_r+0xa0>
 8020746:	4623      	mov	r3, r4
 8020748:	6864      	ldr	r4, [r4, #4]
 802074a:	e7b2      	b.n	80206b2 <_malloc_r+0x32>
 802074c:	4634      	mov	r4, r6
 802074e:	6876      	ldr	r6, [r6, #4]
 8020750:	e7b9      	b.n	80206c6 <_malloc_r+0x46>
 8020752:	230c      	movs	r3, #12
 8020754:	603b      	str	r3, [r7, #0]
 8020756:	4638      	mov	r0, r7
 8020758:	f000 fa4e 	bl	8020bf8 <__malloc_unlock>
 802075c:	e7a1      	b.n	80206a2 <_malloc_r+0x22>
 802075e:	6025      	str	r5, [r4, #0]
 8020760:	e7de      	b.n	8020720 <_malloc_r+0xa0>
 8020762:	bf00      	nop
 8020764:	2400e8f0 	.word	0x2400e8f0

08020768 <iprintf>:
 8020768:	b40f      	push	{r0, r1, r2, r3}
 802076a:	4b0a      	ldr	r3, [pc, #40]	; (8020794 <iprintf+0x2c>)
 802076c:	b513      	push	{r0, r1, r4, lr}
 802076e:	681c      	ldr	r4, [r3, #0]
 8020770:	b124      	cbz	r4, 802077c <iprintf+0x14>
 8020772:	69a3      	ldr	r3, [r4, #24]
 8020774:	b913      	cbnz	r3, 802077c <iprintf+0x14>
 8020776:	4620      	mov	r0, r4
 8020778:	f7ff fe76 	bl	8020468 <__sinit>
 802077c:	ab05      	add	r3, sp, #20
 802077e:	9a04      	ldr	r2, [sp, #16]
 8020780:	68a1      	ldr	r1, [r4, #8]
 8020782:	9301      	str	r3, [sp, #4]
 8020784:	4620      	mov	r0, r4
 8020786:	f000 fab3 	bl	8020cf0 <_vfiprintf_r>
 802078a:	b002      	add	sp, #8
 802078c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020790:	b004      	add	sp, #16
 8020792:	4770      	bx	lr
 8020794:	24000128 	.word	0x24000128

08020798 <rand>:
 8020798:	4b16      	ldr	r3, [pc, #88]	; (80207f4 <rand+0x5c>)
 802079a:	b510      	push	{r4, lr}
 802079c:	681c      	ldr	r4, [r3, #0]
 802079e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80207a0:	b9b3      	cbnz	r3, 80207d0 <rand+0x38>
 80207a2:	2018      	movs	r0, #24
 80207a4:	f000 fa1a 	bl	8020bdc <malloc>
 80207a8:	63a0      	str	r0, [r4, #56]	; 0x38
 80207aa:	b928      	cbnz	r0, 80207b8 <rand+0x20>
 80207ac:	4602      	mov	r2, r0
 80207ae:	4b12      	ldr	r3, [pc, #72]	; (80207f8 <rand+0x60>)
 80207b0:	4812      	ldr	r0, [pc, #72]	; (80207fc <rand+0x64>)
 80207b2:	214e      	movs	r1, #78	; 0x4e
 80207b4:	f000 f8fe 	bl	80209b4 <__assert_func>
 80207b8:	4a11      	ldr	r2, [pc, #68]	; (8020800 <rand+0x68>)
 80207ba:	4b12      	ldr	r3, [pc, #72]	; (8020804 <rand+0x6c>)
 80207bc:	e9c0 2300 	strd	r2, r3, [r0]
 80207c0:	4b11      	ldr	r3, [pc, #68]	; (8020808 <rand+0x70>)
 80207c2:	6083      	str	r3, [r0, #8]
 80207c4:	230b      	movs	r3, #11
 80207c6:	8183      	strh	r3, [r0, #12]
 80207c8:	2201      	movs	r2, #1
 80207ca:	2300      	movs	r3, #0
 80207cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80207d0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80207d2:	4a0e      	ldr	r2, [pc, #56]	; (802080c <rand+0x74>)
 80207d4:	6920      	ldr	r0, [r4, #16]
 80207d6:	6963      	ldr	r3, [r4, #20]
 80207d8:	490d      	ldr	r1, [pc, #52]	; (8020810 <rand+0x78>)
 80207da:	4342      	muls	r2, r0
 80207dc:	fb01 2203 	mla	r2, r1, r3, r2
 80207e0:	fba0 0101 	umull	r0, r1, r0, r1
 80207e4:	1c43      	adds	r3, r0, #1
 80207e6:	eb42 0001 	adc.w	r0, r2, r1
 80207ea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80207ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80207f2:	bd10      	pop	{r4, pc}
 80207f4:	24000128 	.word	0x24000128
 80207f8:	0802470c 	.word	0x0802470c
 80207fc:	08024723 	.word	0x08024723
 8020800:	abcd330e 	.word	0xabcd330e
 8020804:	e66d1234 	.word	0xe66d1234
 8020808:	0005deec 	.word	0x0005deec
 802080c:	5851f42d 	.word	0x5851f42d
 8020810:	4c957f2d 	.word	0x4c957f2d

08020814 <cleanup_glue>:
 8020814:	b538      	push	{r3, r4, r5, lr}
 8020816:	460c      	mov	r4, r1
 8020818:	6809      	ldr	r1, [r1, #0]
 802081a:	4605      	mov	r5, r0
 802081c:	b109      	cbz	r1, 8020822 <cleanup_glue+0xe>
 802081e:	f7ff fff9 	bl	8020814 <cleanup_glue>
 8020822:	4621      	mov	r1, r4
 8020824:	4628      	mov	r0, r5
 8020826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802082a:	f000 b9eb 	b.w	8020c04 <_free_r>
	...

08020830 <_reclaim_reent>:
 8020830:	4b2c      	ldr	r3, [pc, #176]	; (80208e4 <_reclaim_reent+0xb4>)
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	4283      	cmp	r3, r0
 8020836:	b570      	push	{r4, r5, r6, lr}
 8020838:	4604      	mov	r4, r0
 802083a:	d051      	beq.n	80208e0 <_reclaim_reent+0xb0>
 802083c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802083e:	b143      	cbz	r3, 8020852 <_reclaim_reent+0x22>
 8020840:	68db      	ldr	r3, [r3, #12]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d14a      	bne.n	80208dc <_reclaim_reent+0xac>
 8020846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020848:	6819      	ldr	r1, [r3, #0]
 802084a:	b111      	cbz	r1, 8020852 <_reclaim_reent+0x22>
 802084c:	4620      	mov	r0, r4
 802084e:	f000 f9d9 	bl	8020c04 <_free_r>
 8020852:	6961      	ldr	r1, [r4, #20]
 8020854:	b111      	cbz	r1, 802085c <_reclaim_reent+0x2c>
 8020856:	4620      	mov	r0, r4
 8020858:	f000 f9d4 	bl	8020c04 <_free_r>
 802085c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802085e:	b111      	cbz	r1, 8020866 <_reclaim_reent+0x36>
 8020860:	4620      	mov	r0, r4
 8020862:	f000 f9cf 	bl	8020c04 <_free_r>
 8020866:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8020868:	b111      	cbz	r1, 8020870 <_reclaim_reent+0x40>
 802086a:	4620      	mov	r0, r4
 802086c:	f000 f9ca 	bl	8020c04 <_free_r>
 8020870:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8020872:	b111      	cbz	r1, 802087a <_reclaim_reent+0x4a>
 8020874:	4620      	mov	r0, r4
 8020876:	f000 f9c5 	bl	8020c04 <_free_r>
 802087a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802087c:	b111      	cbz	r1, 8020884 <_reclaim_reent+0x54>
 802087e:	4620      	mov	r0, r4
 8020880:	f000 f9c0 	bl	8020c04 <_free_r>
 8020884:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8020886:	b111      	cbz	r1, 802088e <_reclaim_reent+0x5e>
 8020888:	4620      	mov	r0, r4
 802088a:	f000 f9bb 	bl	8020c04 <_free_r>
 802088e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8020890:	b111      	cbz	r1, 8020898 <_reclaim_reent+0x68>
 8020892:	4620      	mov	r0, r4
 8020894:	f000 f9b6 	bl	8020c04 <_free_r>
 8020898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802089a:	b111      	cbz	r1, 80208a2 <_reclaim_reent+0x72>
 802089c:	4620      	mov	r0, r4
 802089e:	f000 f9b1 	bl	8020c04 <_free_r>
 80208a2:	69a3      	ldr	r3, [r4, #24]
 80208a4:	b1e3      	cbz	r3, 80208e0 <_reclaim_reent+0xb0>
 80208a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80208a8:	4620      	mov	r0, r4
 80208aa:	4798      	blx	r3
 80208ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80208ae:	b1b9      	cbz	r1, 80208e0 <_reclaim_reent+0xb0>
 80208b0:	4620      	mov	r0, r4
 80208b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80208b6:	f7ff bfad 	b.w	8020814 <cleanup_glue>
 80208ba:	5949      	ldr	r1, [r1, r5]
 80208bc:	b941      	cbnz	r1, 80208d0 <_reclaim_reent+0xa0>
 80208be:	3504      	adds	r5, #4
 80208c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80208c2:	2d80      	cmp	r5, #128	; 0x80
 80208c4:	68d9      	ldr	r1, [r3, #12]
 80208c6:	d1f8      	bne.n	80208ba <_reclaim_reent+0x8a>
 80208c8:	4620      	mov	r0, r4
 80208ca:	f000 f99b 	bl	8020c04 <_free_r>
 80208ce:	e7ba      	b.n	8020846 <_reclaim_reent+0x16>
 80208d0:	680e      	ldr	r6, [r1, #0]
 80208d2:	4620      	mov	r0, r4
 80208d4:	f000 f996 	bl	8020c04 <_free_r>
 80208d8:	4631      	mov	r1, r6
 80208da:	e7ef      	b.n	80208bc <_reclaim_reent+0x8c>
 80208dc:	2500      	movs	r5, #0
 80208de:	e7ef      	b.n	80208c0 <_reclaim_reent+0x90>
 80208e0:	bd70      	pop	{r4, r5, r6, pc}
 80208e2:	bf00      	nop
 80208e4:	24000128 	.word	0x24000128

080208e8 <_sbrk_r>:
 80208e8:	b538      	push	{r3, r4, r5, lr}
 80208ea:	4d06      	ldr	r5, [pc, #24]	; (8020904 <_sbrk_r+0x1c>)
 80208ec:	2300      	movs	r3, #0
 80208ee:	4604      	mov	r4, r0
 80208f0:	4608      	mov	r0, r1
 80208f2:	602b      	str	r3, [r5, #0]
 80208f4:	f7e0 fb30 	bl	8000f58 <_sbrk>
 80208f8:	1c43      	adds	r3, r0, #1
 80208fa:	d102      	bne.n	8020902 <_sbrk_r+0x1a>
 80208fc:	682b      	ldr	r3, [r5, #0]
 80208fe:	b103      	cbz	r3, 8020902 <_sbrk_r+0x1a>
 8020900:	6023      	str	r3, [r4, #0]
 8020902:	bd38      	pop	{r3, r4, r5, pc}
 8020904:	2400e8f8 	.word	0x2400e8f8

08020908 <__sread>:
 8020908:	b510      	push	{r4, lr}
 802090a:	460c      	mov	r4, r1
 802090c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020910:	f000 fcb2 	bl	8021278 <_read_r>
 8020914:	2800      	cmp	r0, #0
 8020916:	bfab      	itete	ge
 8020918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802091a:	89a3      	ldrhlt	r3, [r4, #12]
 802091c:	181b      	addge	r3, r3, r0
 802091e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020922:	bfac      	ite	ge
 8020924:	6563      	strge	r3, [r4, #84]	; 0x54
 8020926:	81a3      	strhlt	r3, [r4, #12]
 8020928:	bd10      	pop	{r4, pc}

0802092a <__swrite>:
 802092a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802092e:	461f      	mov	r7, r3
 8020930:	898b      	ldrh	r3, [r1, #12]
 8020932:	05db      	lsls	r3, r3, #23
 8020934:	4605      	mov	r5, r0
 8020936:	460c      	mov	r4, r1
 8020938:	4616      	mov	r6, r2
 802093a:	d505      	bpl.n	8020948 <__swrite+0x1e>
 802093c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020940:	2302      	movs	r3, #2
 8020942:	2200      	movs	r2, #0
 8020944:	f000 f938 	bl	8020bb8 <_lseek_r>
 8020948:	89a3      	ldrh	r3, [r4, #12]
 802094a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802094e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020952:	81a3      	strh	r3, [r4, #12]
 8020954:	4632      	mov	r2, r6
 8020956:	463b      	mov	r3, r7
 8020958:	4628      	mov	r0, r5
 802095a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802095e:	f000 b817 	b.w	8020990 <_write_r>

08020962 <__sseek>:
 8020962:	b510      	push	{r4, lr}
 8020964:	460c      	mov	r4, r1
 8020966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802096a:	f000 f925 	bl	8020bb8 <_lseek_r>
 802096e:	1c43      	adds	r3, r0, #1
 8020970:	89a3      	ldrh	r3, [r4, #12]
 8020972:	bf15      	itete	ne
 8020974:	6560      	strne	r0, [r4, #84]	; 0x54
 8020976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802097a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802097e:	81a3      	strheq	r3, [r4, #12]
 8020980:	bf18      	it	ne
 8020982:	81a3      	strhne	r3, [r4, #12]
 8020984:	bd10      	pop	{r4, pc}

08020986 <__sclose>:
 8020986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802098a:	f000 b831 	b.w	80209f0 <_close_r>
	...

08020990 <_write_r>:
 8020990:	b538      	push	{r3, r4, r5, lr}
 8020992:	4d07      	ldr	r5, [pc, #28]	; (80209b0 <_write_r+0x20>)
 8020994:	4604      	mov	r4, r0
 8020996:	4608      	mov	r0, r1
 8020998:	4611      	mov	r1, r2
 802099a:	2200      	movs	r2, #0
 802099c:	602a      	str	r2, [r5, #0]
 802099e:	461a      	mov	r2, r3
 80209a0:	f7e0 fa89 	bl	8000eb6 <_write>
 80209a4:	1c43      	adds	r3, r0, #1
 80209a6:	d102      	bne.n	80209ae <_write_r+0x1e>
 80209a8:	682b      	ldr	r3, [r5, #0]
 80209aa:	b103      	cbz	r3, 80209ae <_write_r+0x1e>
 80209ac:	6023      	str	r3, [r4, #0]
 80209ae:	bd38      	pop	{r3, r4, r5, pc}
 80209b0:	2400e8f8 	.word	0x2400e8f8

080209b4 <__assert_func>:
 80209b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80209b6:	4614      	mov	r4, r2
 80209b8:	461a      	mov	r2, r3
 80209ba:	4b09      	ldr	r3, [pc, #36]	; (80209e0 <__assert_func+0x2c>)
 80209bc:	681b      	ldr	r3, [r3, #0]
 80209be:	4605      	mov	r5, r0
 80209c0:	68d8      	ldr	r0, [r3, #12]
 80209c2:	b14c      	cbz	r4, 80209d8 <__assert_func+0x24>
 80209c4:	4b07      	ldr	r3, [pc, #28]	; (80209e4 <__assert_func+0x30>)
 80209c6:	9100      	str	r1, [sp, #0]
 80209c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80209cc:	4906      	ldr	r1, [pc, #24]	; (80209e8 <__assert_func+0x34>)
 80209ce:	462b      	mov	r3, r5
 80209d0:	f000 f8e0 	bl	8020b94 <fiprintf>
 80209d4:	f000 fd22 	bl	802141c <abort>
 80209d8:	4b04      	ldr	r3, [pc, #16]	; (80209ec <__assert_func+0x38>)
 80209da:	461c      	mov	r4, r3
 80209dc:	e7f3      	b.n	80209c6 <__assert_func+0x12>
 80209de:	bf00      	nop
 80209e0:	24000128 	.word	0x24000128
 80209e4:	0802477e 	.word	0x0802477e
 80209e8:	0802478b 	.word	0x0802478b
 80209ec:	080247b9 	.word	0x080247b9

080209f0 <_close_r>:
 80209f0:	b538      	push	{r3, r4, r5, lr}
 80209f2:	4d06      	ldr	r5, [pc, #24]	; (8020a0c <_close_r+0x1c>)
 80209f4:	2300      	movs	r3, #0
 80209f6:	4604      	mov	r4, r0
 80209f8:	4608      	mov	r0, r1
 80209fa:	602b      	str	r3, [r5, #0]
 80209fc:	f7e0 fa77 	bl	8000eee <_close>
 8020a00:	1c43      	adds	r3, r0, #1
 8020a02:	d102      	bne.n	8020a0a <_close_r+0x1a>
 8020a04:	682b      	ldr	r3, [r5, #0]
 8020a06:	b103      	cbz	r3, 8020a0a <_close_r+0x1a>
 8020a08:	6023      	str	r3, [r4, #0]
 8020a0a:	bd38      	pop	{r3, r4, r5, pc}
 8020a0c:	2400e8f8 	.word	0x2400e8f8

08020a10 <__sflush_r>:
 8020a10:	898a      	ldrh	r2, [r1, #12]
 8020a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a16:	4605      	mov	r5, r0
 8020a18:	0710      	lsls	r0, r2, #28
 8020a1a:	460c      	mov	r4, r1
 8020a1c:	d458      	bmi.n	8020ad0 <__sflush_r+0xc0>
 8020a1e:	684b      	ldr	r3, [r1, #4]
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	dc05      	bgt.n	8020a30 <__sflush_r+0x20>
 8020a24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020a26:	2b00      	cmp	r3, #0
 8020a28:	dc02      	bgt.n	8020a30 <__sflush_r+0x20>
 8020a2a:	2000      	movs	r0, #0
 8020a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020a30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020a32:	2e00      	cmp	r6, #0
 8020a34:	d0f9      	beq.n	8020a2a <__sflush_r+0x1a>
 8020a36:	2300      	movs	r3, #0
 8020a38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020a3c:	682f      	ldr	r7, [r5, #0]
 8020a3e:	602b      	str	r3, [r5, #0]
 8020a40:	d032      	beq.n	8020aa8 <__sflush_r+0x98>
 8020a42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8020a44:	89a3      	ldrh	r3, [r4, #12]
 8020a46:	075a      	lsls	r2, r3, #29
 8020a48:	d505      	bpl.n	8020a56 <__sflush_r+0x46>
 8020a4a:	6863      	ldr	r3, [r4, #4]
 8020a4c:	1ac0      	subs	r0, r0, r3
 8020a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020a50:	b10b      	cbz	r3, 8020a56 <__sflush_r+0x46>
 8020a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020a54:	1ac0      	subs	r0, r0, r3
 8020a56:	2300      	movs	r3, #0
 8020a58:	4602      	mov	r2, r0
 8020a5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020a5c:	6a21      	ldr	r1, [r4, #32]
 8020a5e:	4628      	mov	r0, r5
 8020a60:	47b0      	blx	r6
 8020a62:	1c43      	adds	r3, r0, #1
 8020a64:	89a3      	ldrh	r3, [r4, #12]
 8020a66:	d106      	bne.n	8020a76 <__sflush_r+0x66>
 8020a68:	6829      	ldr	r1, [r5, #0]
 8020a6a:	291d      	cmp	r1, #29
 8020a6c:	d82c      	bhi.n	8020ac8 <__sflush_r+0xb8>
 8020a6e:	4a2a      	ldr	r2, [pc, #168]	; (8020b18 <__sflush_r+0x108>)
 8020a70:	40ca      	lsrs	r2, r1
 8020a72:	07d6      	lsls	r6, r2, #31
 8020a74:	d528      	bpl.n	8020ac8 <__sflush_r+0xb8>
 8020a76:	2200      	movs	r2, #0
 8020a78:	6062      	str	r2, [r4, #4]
 8020a7a:	04d9      	lsls	r1, r3, #19
 8020a7c:	6922      	ldr	r2, [r4, #16]
 8020a7e:	6022      	str	r2, [r4, #0]
 8020a80:	d504      	bpl.n	8020a8c <__sflush_r+0x7c>
 8020a82:	1c42      	adds	r2, r0, #1
 8020a84:	d101      	bne.n	8020a8a <__sflush_r+0x7a>
 8020a86:	682b      	ldr	r3, [r5, #0]
 8020a88:	b903      	cbnz	r3, 8020a8c <__sflush_r+0x7c>
 8020a8a:	6560      	str	r0, [r4, #84]	; 0x54
 8020a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020a8e:	602f      	str	r7, [r5, #0]
 8020a90:	2900      	cmp	r1, #0
 8020a92:	d0ca      	beq.n	8020a2a <__sflush_r+0x1a>
 8020a94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a98:	4299      	cmp	r1, r3
 8020a9a:	d002      	beq.n	8020aa2 <__sflush_r+0x92>
 8020a9c:	4628      	mov	r0, r5
 8020a9e:	f000 f8b1 	bl	8020c04 <_free_r>
 8020aa2:	2000      	movs	r0, #0
 8020aa4:	6360      	str	r0, [r4, #52]	; 0x34
 8020aa6:	e7c1      	b.n	8020a2c <__sflush_r+0x1c>
 8020aa8:	6a21      	ldr	r1, [r4, #32]
 8020aaa:	2301      	movs	r3, #1
 8020aac:	4628      	mov	r0, r5
 8020aae:	47b0      	blx	r6
 8020ab0:	1c41      	adds	r1, r0, #1
 8020ab2:	d1c7      	bne.n	8020a44 <__sflush_r+0x34>
 8020ab4:	682b      	ldr	r3, [r5, #0]
 8020ab6:	2b00      	cmp	r3, #0
 8020ab8:	d0c4      	beq.n	8020a44 <__sflush_r+0x34>
 8020aba:	2b1d      	cmp	r3, #29
 8020abc:	d001      	beq.n	8020ac2 <__sflush_r+0xb2>
 8020abe:	2b16      	cmp	r3, #22
 8020ac0:	d101      	bne.n	8020ac6 <__sflush_r+0xb6>
 8020ac2:	602f      	str	r7, [r5, #0]
 8020ac4:	e7b1      	b.n	8020a2a <__sflush_r+0x1a>
 8020ac6:	89a3      	ldrh	r3, [r4, #12]
 8020ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020acc:	81a3      	strh	r3, [r4, #12]
 8020ace:	e7ad      	b.n	8020a2c <__sflush_r+0x1c>
 8020ad0:	690f      	ldr	r7, [r1, #16]
 8020ad2:	2f00      	cmp	r7, #0
 8020ad4:	d0a9      	beq.n	8020a2a <__sflush_r+0x1a>
 8020ad6:	0793      	lsls	r3, r2, #30
 8020ad8:	680e      	ldr	r6, [r1, #0]
 8020ada:	bf08      	it	eq
 8020adc:	694b      	ldreq	r3, [r1, #20]
 8020ade:	600f      	str	r7, [r1, #0]
 8020ae0:	bf18      	it	ne
 8020ae2:	2300      	movne	r3, #0
 8020ae4:	eba6 0807 	sub.w	r8, r6, r7
 8020ae8:	608b      	str	r3, [r1, #8]
 8020aea:	f1b8 0f00 	cmp.w	r8, #0
 8020aee:	dd9c      	ble.n	8020a2a <__sflush_r+0x1a>
 8020af0:	6a21      	ldr	r1, [r4, #32]
 8020af2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8020af4:	4643      	mov	r3, r8
 8020af6:	463a      	mov	r2, r7
 8020af8:	4628      	mov	r0, r5
 8020afa:	47b0      	blx	r6
 8020afc:	2800      	cmp	r0, #0
 8020afe:	dc06      	bgt.n	8020b0e <__sflush_r+0xfe>
 8020b00:	89a3      	ldrh	r3, [r4, #12]
 8020b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020b06:	81a3      	strh	r3, [r4, #12]
 8020b08:	f04f 30ff 	mov.w	r0, #4294967295
 8020b0c:	e78e      	b.n	8020a2c <__sflush_r+0x1c>
 8020b0e:	4407      	add	r7, r0
 8020b10:	eba8 0800 	sub.w	r8, r8, r0
 8020b14:	e7e9      	b.n	8020aea <__sflush_r+0xda>
 8020b16:	bf00      	nop
 8020b18:	20400001 	.word	0x20400001

08020b1c <_fflush_r>:
 8020b1c:	b538      	push	{r3, r4, r5, lr}
 8020b1e:	690b      	ldr	r3, [r1, #16]
 8020b20:	4605      	mov	r5, r0
 8020b22:	460c      	mov	r4, r1
 8020b24:	b913      	cbnz	r3, 8020b2c <_fflush_r+0x10>
 8020b26:	2500      	movs	r5, #0
 8020b28:	4628      	mov	r0, r5
 8020b2a:	bd38      	pop	{r3, r4, r5, pc}
 8020b2c:	b118      	cbz	r0, 8020b36 <_fflush_r+0x1a>
 8020b2e:	6983      	ldr	r3, [r0, #24]
 8020b30:	b90b      	cbnz	r3, 8020b36 <_fflush_r+0x1a>
 8020b32:	f7ff fc99 	bl	8020468 <__sinit>
 8020b36:	4b14      	ldr	r3, [pc, #80]	; (8020b88 <_fflush_r+0x6c>)
 8020b38:	429c      	cmp	r4, r3
 8020b3a:	d11b      	bne.n	8020b74 <_fflush_r+0x58>
 8020b3c:	686c      	ldr	r4, [r5, #4]
 8020b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d0ef      	beq.n	8020b26 <_fflush_r+0xa>
 8020b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8020b48:	07d0      	lsls	r0, r2, #31
 8020b4a:	d404      	bmi.n	8020b56 <_fflush_r+0x3a>
 8020b4c:	0599      	lsls	r1, r3, #22
 8020b4e:	d402      	bmi.n	8020b56 <_fflush_r+0x3a>
 8020b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b52:	f7ff fd4c 	bl	80205ee <__retarget_lock_acquire_recursive>
 8020b56:	4628      	mov	r0, r5
 8020b58:	4621      	mov	r1, r4
 8020b5a:	f7ff ff59 	bl	8020a10 <__sflush_r>
 8020b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b60:	07da      	lsls	r2, r3, #31
 8020b62:	4605      	mov	r5, r0
 8020b64:	d4e0      	bmi.n	8020b28 <_fflush_r+0xc>
 8020b66:	89a3      	ldrh	r3, [r4, #12]
 8020b68:	059b      	lsls	r3, r3, #22
 8020b6a:	d4dd      	bmi.n	8020b28 <_fflush_r+0xc>
 8020b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b6e:	f7ff fd3f 	bl	80205f0 <__retarget_lock_release_recursive>
 8020b72:	e7d9      	b.n	8020b28 <_fflush_r+0xc>
 8020b74:	4b05      	ldr	r3, [pc, #20]	; (8020b8c <_fflush_r+0x70>)
 8020b76:	429c      	cmp	r4, r3
 8020b78:	d101      	bne.n	8020b7e <_fflush_r+0x62>
 8020b7a:	68ac      	ldr	r4, [r5, #8]
 8020b7c:	e7df      	b.n	8020b3e <_fflush_r+0x22>
 8020b7e:	4b04      	ldr	r3, [pc, #16]	; (8020b90 <_fflush_r+0x74>)
 8020b80:	429c      	cmp	r4, r3
 8020b82:	bf08      	it	eq
 8020b84:	68ec      	ldreq	r4, [r5, #12]
 8020b86:	e7da      	b.n	8020b3e <_fflush_r+0x22>
 8020b88:	080246c8 	.word	0x080246c8
 8020b8c:	080246e8 	.word	0x080246e8
 8020b90:	080246a8 	.word	0x080246a8

08020b94 <fiprintf>:
 8020b94:	b40e      	push	{r1, r2, r3}
 8020b96:	b503      	push	{r0, r1, lr}
 8020b98:	4601      	mov	r1, r0
 8020b9a:	ab03      	add	r3, sp, #12
 8020b9c:	4805      	ldr	r0, [pc, #20]	; (8020bb4 <fiprintf+0x20>)
 8020b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ba2:	6800      	ldr	r0, [r0, #0]
 8020ba4:	9301      	str	r3, [sp, #4]
 8020ba6:	f000 f8a3 	bl	8020cf0 <_vfiprintf_r>
 8020baa:	b002      	add	sp, #8
 8020bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8020bb0:	b003      	add	sp, #12
 8020bb2:	4770      	bx	lr
 8020bb4:	24000128 	.word	0x24000128

08020bb8 <_lseek_r>:
 8020bb8:	b538      	push	{r3, r4, r5, lr}
 8020bba:	4d07      	ldr	r5, [pc, #28]	; (8020bd8 <_lseek_r+0x20>)
 8020bbc:	4604      	mov	r4, r0
 8020bbe:	4608      	mov	r0, r1
 8020bc0:	4611      	mov	r1, r2
 8020bc2:	2200      	movs	r2, #0
 8020bc4:	602a      	str	r2, [r5, #0]
 8020bc6:	461a      	mov	r2, r3
 8020bc8:	f7e0 f9b8 	bl	8000f3c <_lseek>
 8020bcc:	1c43      	adds	r3, r0, #1
 8020bce:	d102      	bne.n	8020bd6 <_lseek_r+0x1e>
 8020bd0:	682b      	ldr	r3, [r5, #0]
 8020bd2:	b103      	cbz	r3, 8020bd6 <_lseek_r+0x1e>
 8020bd4:	6023      	str	r3, [r4, #0]
 8020bd6:	bd38      	pop	{r3, r4, r5, pc}
 8020bd8:	2400e8f8 	.word	0x2400e8f8

08020bdc <malloc>:
 8020bdc:	4b02      	ldr	r3, [pc, #8]	; (8020be8 <malloc+0xc>)
 8020bde:	4601      	mov	r1, r0
 8020be0:	6818      	ldr	r0, [r3, #0]
 8020be2:	f7ff bd4d 	b.w	8020680 <_malloc_r>
 8020be6:	bf00      	nop
 8020be8:	24000128 	.word	0x24000128

08020bec <__malloc_lock>:
 8020bec:	4801      	ldr	r0, [pc, #4]	; (8020bf4 <__malloc_lock+0x8>)
 8020bee:	f7ff bcfe 	b.w	80205ee <__retarget_lock_acquire_recursive>
 8020bf2:	bf00      	nop
 8020bf4:	2400e8ec 	.word	0x2400e8ec

08020bf8 <__malloc_unlock>:
 8020bf8:	4801      	ldr	r0, [pc, #4]	; (8020c00 <__malloc_unlock+0x8>)
 8020bfa:	f7ff bcf9 	b.w	80205f0 <__retarget_lock_release_recursive>
 8020bfe:	bf00      	nop
 8020c00:	2400e8ec 	.word	0x2400e8ec

08020c04 <_free_r>:
 8020c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c06:	2900      	cmp	r1, #0
 8020c08:	d044      	beq.n	8020c94 <_free_r+0x90>
 8020c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c0e:	9001      	str	r0, [sp, #4]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	f1a1 0404 	sub.w	r4, r1, #4
 8020c16:	bfb8      	it	lt
 8020c18:	18e4      	addlt	r4, r4, r3
 8020c1a:	f7ff ffe7 	bl	8020bec <__malloc_lock>
 8020c1e:	4a1e      	ldr	r2, [pc, #120]	; (8020c98 <_free_r+0x94>)
 8020c20:	9801      	ldr	r0, [sp, #4]
 8020c22:	6813      	ldr	r3, [r2, #0]
 8020c24:	b933      	cbnz	r3, 8020c34 <_free_r+0x30>
 8020c26:	6063      	str	r3, [r4, #4]
 8020c28:	6014      	str	r4, [r2, #0]
 8020c2a:	b003      	add	sp, #12
 8020c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020c30:	f7ff bfe2 	b.w	8020bf8 <__malloc_unlock>
 8020c34:	42a3      	cmp	r3, r4
 8020c36:	d908      	bls.n	8020c4a <_free_r+0x46>
 8020c38:	6825      	ldr	r5, [r4, #0]
 8020c3a:	1961      	adds	r1, r4, r5
 8020c3c:	428b      	cmp	r3, r1
 8020c3e:	bf01      	itttt	eq
 8020c40:	6819      	ldreq	r1, [r3, #0]
 8020c42:	685b      	ldreq	r3, [r3, #4]
 8020c44:	1949      	addeq	r1, r1, r5
 8020c46:	6021      	streq	r1, [r4, #0]
 8020c48:	e7ed      	b.n	8020c26 <_free_r+0x22>
 8020c4a:	461a      	mov	r2, r3
 8020c4c:	685b      	ldr	r3, [r3, #4]
 8020c4e:	b10b      	cbz	r3, 8020c54 <_free_r+0x50>
 8020c50:	42a3      	cmp	r3, r4
 8020c52:	d9fa      	bls.n	8020c4a <_free_r+0x46>
 8020c54:	6811      	ldr	r1, [r2, #0]
 8020c56:	1855      	adds	r5, r2, r1
 8020c58:	42a5      	cmp	r5, r4
 8020c5a:	d10b      	bne.n	8020c74 <_free_r+0x70>
 8020c5c:	6824      	ldr	r4, [r4, #0]
 8020c5e:	4421      	add	r1, r4
 8020c60:	1854      	adds	r4, r2, r1
 8020c62:	42a3      	cmp	r3, r4
 8020c64:	6011      	str	r1, [r2, #0]
 8020c66:	d1e0      	bne.n	8020c2a <_free_r+0x26>
 8020c68:	681c      	ldr	r4, [r3, #0]
 8020c6a:	685b      	ldr	r3, [r3, #4]
 8020c6c:	6053      	str	r3, [r2, #4]
 8020c6e:	4421      	add	r1, r4
 8020c70:	6011      	str	r1, [r2, #0]
 8020c72:	e7da      	b.n	8020c2a <_free_r+0x26>
 8020c74:	d902      	bls.n	8020c7c <_free_r+0x78>
 8020c76:	230c      	movs	r3, #12
 8020c78:	6003      	str	r3, [r0, #0]
 8020c7a:	e7d6      	b.n	8020c2a <_free_r+0x26>
 8020c7c:	6825      	ldr	r5, [r4, #0]
 8020c7e:	1961      	adds	r1, r4, r5
 8020c80:	428b      	cmp	r3, r1
 8020c82:	bf04      	itt	eq
 8020c84:	6819      	ldreq	r1, [r3, #0]
 8020c86:	685b      	ldreq	r3, [r3, #4]
 8020c88:	6063      	str	r3, [r4, #4]
 8020c8a:	bf04      	itt	eq
 8020c8c:	1949      	addeq	r1, r1, r5
 8020c8e:	6021      	streq	r1, [r4, #0]
 8020c90:	6054      	str	r4, [r2, #4]
 8020c92:	e7ca      	b.n	8020c2a <_free_r+0x26>
 8020c94:	b003      	add	sp, #12
 8020c96:	bd30      	pop	{r4, r5, pc}
 8020c98:	2400e8f0 	.word	0x2400e8f0

08020c9c <__sfputc_r>:
 8020c9c:	6893      	ldr	r3, [r2, #8]
 8020c9e:	3b01      	subs	r3, #1
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	b410      	push	{r4}
 8020ca4:	6093      	str	r3, [r2, #8]
 8020ca6:	da08      	bge.n	8020cba <__sfputc_r+0x1e>
 8020ca8:	6994      	ldr	r4, [r2, #24]
 8020caa:	42a3      	cmp	r3, r4
 8020cac:	db01      	blt.n	8020cb2 <__sfputc_r+0x16>
 8020cae:	290a      	cmp	r1, #10
 8020cb0:	d103      	bne.n	8020cba <__sfputc_r+0x1e>
 8020cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020cb6:	f000 baf1 	b.w	802129c <__swbuf_r>
 8020cba:	6813      	ldr	r3, [r2, #0]
 8020cbc:	1c58      	adds	r0, r3, #1
 8020cbe:	6010      	str	r0, [r2, #0]
 8020cc0:	7019      	strb	r1, [r3, #0]
 8020cc2:	4608      	mov	r0, r1
 8020cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020cc8:	4770      	bx	lr

08020cca <__sfputs_r>:
 8020cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020ccc:	4606      	mov	r6, r0
 8020cce:	460f      	mov	r7, r1
 8020cd0:	4614      	mov	r4, r2
 8020cd2:	18d5      	adds	r5, r2, r3
 8020cd4:	42ac      	cmp	r4, r5
 8020cd6:	d101      	bne.n	8020cdc <__sfputs_r+0x12>
 8020cd8:	2000      	movs	r0, #0
 8020cda:	e007      	b.n	8020cec <__sfputs_r+0x22>
 8020cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ce0:	463a      	mov	r2, r7
 8020ce2:	4630      	mov	r0, r6
 8020ce4:	f7ff ffda 	bl	8020c9c <__sfputc_r>
 8020ce8:	1c43      	adds	r3, r0, #1
 8020cea:	d1f3      	bne.n	8020cd4 <__sfputs_r+0xa>
 8020cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020cf0 <_vfiprintf_r>:
 8020cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020cf4:	460d      	mov	r5, r1
 8020cf6:	b09d      	sub	sp, #116	; 0x74
 8020cf8:	4614      	mov	r4, r2
 8020cfa:	4698      	mov	r8, r3
 8020cfc:	4606      	mov	r6, r0
 8020cfe:	b118      	cbz	r0, 8020d08 <_vfiprintf_r+0x18>
 8020d00:	6983      	ldr	r3, [r0, #24]
 8020d02:	b90b      	cbnz	r3, 8020d08 <_vfiprintf_r+0x18>
 8020d04:	f7ff fbb0 	bl	8020468 <__sinit>
 8020d08:	4b89      	ldr	r3, [pc, #548]	; (8020f30 <_vfiprintf_r+0x240>)
 8020d0a:	429d      	cmp	r5, r3
 8020d0c:	d11b      	bne.n	8020d46 <_vfiprintf_r+0x56>
 8020d0e:	6875      	ldr	r5, [r6, #4]
 8020d10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d12:	07d9      	lsls	r1, r3, #31
 8020d14:	d405      	bmi.n	8020d22 <_vfiprintf_r+0x32>
 8020d16:	89ab      	ldrh	r3, [r5, #12]
 8020d18:	059a      	lsls	r2, r3, #22
 8020d1a:	d402      	bmi.n	8020d22 <_vfiprintf_r+0x32>
 8020d1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d1e:	f7ff fc66 	bl	80205ee <__retarget_lock_acquire_recursive>
 8020d22:	89ab      	ldrh	r3, [r5, #12]
 8020d24:	071b      	lsls	r3, r3, #28
 8020d26:	d501      	bpl.n	8020d2c <_vfiprintf_r+0x3c>
 8020d28:	692b      	ldr	r3, [r5, #16]
 8020d2a:	b9eb      	cbnz	r3, 8020d68 <_vfiprintf_r+0x78>
 8020d2c:	4629      	mov	r1, r5
 8020d2e:	4630      	mov	r0, r6
 8020d30:	f000 fb06 	bl	8021340 <__swsetup_r>
 8020d34:	b1c0      	cbz	r0, 8020d68 <_vfiprintf_r+0x78>
 8020d36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020d38:	07dc      	lsls	r4, r3, #31
 8020d3a:	d50e      	bpl.n	8020d5a <_vfiprintf_r+0x6a>
 8020d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8020d40:	b01d      	add	sp, #116	; 0x74
 8020d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d46:	4b7b      	ldr	r3, [pc, #492]	; (8020f34 <_vfiprintf_r+0x244>)
 8020d48:	429d      	cmp	r5, r3
 8020d4a:	d101      	bne.n	8020d50 <_vfiprintf_r+0x60>
 8020d4c:	68b5      	ldr	r5, [r6, #8]
 8020d4e:	e7df      	b.n	8020d10 <_vfiprintf_r+0x20>
 8020d50:	4b79      	ldr	r3, [pc, #484]	; (8020f38 <_vfiprintf_r+0x248>)
 8020d52:	429d      	cmp	r5, r3
 8020d54:	bf08      	it	eq
 8020d56:	68f5      	ldreq	r5, [r6, #12]
 8020d58:	e7da      	b.n	8020d10 <_vfiprintf_r+0x20>
 8020d5a:	89ab      	ldrh	r3, [r5, #12]
 8020d5c:	0598      	lsls	r0, r3, #22
 8020d5e:	d4ed      	bmi.n	8020d3c <_vfiprintf_r+0x4c>
 8020d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020d62:	f7ff fc45 	bl	80205f0 <__retarget_lock_release_recursive>
 8020d66:	e7e9      	b.n	8020d3c <_vfiprintf_r+0x4c>
 8020d68:	2300      	movs	r3, #0
 8020d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8020d6c:	2320      	movs	r3, #32
 8020d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8020d76:	2330      	movs	r3, #48	; 0x30
 8020d78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8020f3c <_vfiprintf_r+0x24c>
 8020d7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020d80:	f04f 0901 	mov.w	r9, #1
 8020d84:	4623      	mov	r3, r4
 8020d86:	469a      	mov	sl, r3
 8020d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020d8c:	b10a      	cbz	r2, 8020d92 <_vfiprintf_r+0xa2>
 8020d8e:	2a25      	cmp	r2, #37	; 0x25
 8020d90:	d1f9      	bne.n	8020d86 <_vfiprintf_r+0x96>
 8020d92:	ebba 0b04 	subs.w	fp, sl, r4
 8020d96:	d00b      	beq.n	8020db0 <_vfiprintf_r+0xc0>
 8020d98:	465b      	mov	r3, fp
 8020d9a:	4622      	mov	r2, r4
 8020d9c:	4629      	mov	r1, r5
 8020d9e:	4630      	mov	r0, r6
 8020da0:	f7ff ff93 	bl	8020cca <__sfputs_r>
 8020da4:	3001      	adds	r0, #1
 8020da6:	f000 80aa 	beq.w	8020efe <_vfiprintf_r+0x20e>
 8020daa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dac:	445a      	add	r2, fp
 8020dae:	9209      	str	r2, [sp, #36]	; 0x24
 8020db0:	f89a 3000 	ldrb.w	r3, [sl]
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	f000 80a2 	beq.w	8020efe <_vfiprintf_r+0x20e>
 8020dba:	2300      	movs	r3, #0
 8020dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8020dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020dc4:	f10a 0a01 	add.w	sl, sl, #1
 8020dc8:	9304      	str	r3, [sp, #16]
 8020dca:	9307      	str	r3, [sp, #28]
 8020dcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020dd0:	931a      	str	r3, [sp, #104]	; 0x68
 8020dd2:	4654      	mov	r4, sl
 8020dd4:	2205      	movs	r2, #5
 8020dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020dda:	4858      	ldr	r0, [pc, #352]	; (8020f3c <_vfiprintf_r+0x24c>)
 8020ddc:	f7df fa98 	bl	8000310 <memchr>
 8020de0:	9a04      	ldr	r2, [sp, #16]
 8020de2:	b9d8      	cbnz	r0, 8020e1c <_vfiprintf_r+0x12c>
 8020de4:	06d1      	lsls	r1, r2, #27
 8020de6:	bf44      	itt	mi
 8020de8:	2320      	movmi	r3, #32
 8020dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020dee:	0713      	lsls	r3, r2, #28
 8020df0:	bf44      	itt	mi
 8020df2:	232b      	movmi	r3, #43	; 0x2b
 8020df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020df8:	f89a 3000 	ldrb.w	r3, [sl]
 8020dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8020dfe:	d015      	beq.n	8020e2c <_vfiprintf_r+0x13c>
 8020e00:	9a07      	ldr	r2, [sp, #28]
 8020e02:	4654      	mov	r4, sl
 8020e04:	2000      	movs	r0, #0
 8020e06:	f04f 0c0a 	mov.w	ip, #10
 8020e0a:	4621      	mov	r1, r4
 8020e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e10:	3b30      	subs	r3, #48	; 0x30
 8020e12:	2b09      	cmp	r3, #9
 8020e14:	d94e      	bls.n	8020eb4 <_vfiprintf_r+0x1c4>
 8020e16:	b1b0      	cbz	r0, 8020e46 <_vfiprintf_r+0x156>
 8020e18:	9207      	str	r2, [sp, #28]
 8020e1a:	e014      	b.n	8020e46 <_vfiprintf_r+0x156>
 8020e1c:	eba0 0308 	sub.w	r3, r0, r8
 8020e20:	fa09 f303 	lsl.w	r3, r9, r3
 8020e24:	4313      	orrs	r3, r2
 8020e26:	9304      	str	r3, [sp, #16]
 8020e28:	46a2      	mov	sl, r4
 8020e2a:	e7d2      	b.n	8020dd2 <_vfiprintf_r+0xe2>
 8020e2c:	9b03      	ldr	r3, [sp, #12]
 8020e2e:	1d19      	adds	r1, r3, #4
 8020e30:	681b      	ldr	r3, [r3, #0]
 8020e32:	9103      	str	r1, [sp, #12]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	bfbb      	ittet	lt
 8020e38:	425b      	neglt	r3, r3
 8020e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8020e3e:	9307      	strge	r3, [sp, #28]
 8020e40:	9307      	strlt	r3, [sp, #28]
 8020e42:	bfb8      	it	lt
 8020e44:	9204      	strlt	r2, [sp, #16]
 8020e46:	7823      	ldrb	r3, [r4, #0]
 8020e48:	2b2e      	cmp	r3, #46	; 0x2e
 8020e4a:	d10c      	bne.n	8020e66 <_vfiprintf_r+0x176>
 8020e4c:	7863      	ldrb	r3, [r4, #1]
 8020e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8020e50:	d135      	bne.n	8020ebe <_vfiprintf_r+0x1ce>
 8020e52:	9b03      	ldr	r3, [sp, #12]
 8020e54:	1d1a      	adds	r2, r3, #4
 8020e56:	681b      	ldr	r3, [r3, #0]
 8020e58:	9203      	str	r2, [sp, #12]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	bfb8      	it	lt
 8020e5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8020e62:	3402      	adds	r4, #2
 8020e64:	9305      	str	r3, [sp, #20]
 8020e66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8020f4c <_vfiprintf_r+0x25c>
 8020e6a:	7821      	ldrb	r1, [r4, #0]
 8020e6c:	2203      	movs	r2, #3
 8020e6e:	4650      	mov	r0, sl
 8020e70:	f7df fa4e 	bl	8000310 <memchr>
 8020e74:	b140      	cbz	r0, 8020e88 <_vfiprintf_r+0x198>
 8020e76:	2340      	movs	r3, #64	; 0x40
 8020e78:	eba0 000a 	sub.w	r0, r0, sl
 8020e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8020e80:	9b04      	ldr	r3, [sp, #16]
 8020e82:	4303      	orrs	r3, r0
 8020e84:	3401      	adds	r4, #1
 8020e86:	9304      	str	r3, [sp, #16]
 8020e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e8c:	482c      	ldr	r0, [pc, #176]	; (8020f40 <_vfiprintf_r+0x250>)
 8020e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020e92:	2206      	movs	r2, #6
 8020e94:	f7df fa3c 	bl	8000310 <memchr>
 8020e98:	2800      	cmp	r0, #0
 8020e9a:	d03f      	beq.n	8020f1c <_vfiprintf_r+0x22c>
 8020e9c:	4b29      	ldr	r3, [pc, #164]	; (8020f44 <_vfiprintf_r+0x254>)
 8020e9e:	bb1b      	cbnz	r3, 8020ee8 <_vfiprintf_r+0x1f8>
 8020ea0:	9b03      	ldr	r3, [sp, #12]
 8020ea2:	3307      	adds	r3, #7
 8020ea4:	f023 0307 	bic.w	r3, r3, #7
 8020ea8:	3308      	adds	r3, #8
 8020eaa:	9303      	str	r3, [sp, #12]
 8020eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eae:	443b      	add	r3, r7
 8020eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8020eb2:	e767      	b.n	8020d84 <_vfiprintf_r+0x94>
 8020eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8020eb8:	460c      	mov	r4, r1
 8020eba:	2001      	movs	r0, #1
 8020ebc:	e7a5      	b.n	8020e0a <_vfiprintf_r+0x11a>
 8020ebe:	2300      	movs	r3, #0
 8020ec0:	3401      	adds	r4, #1
 8020ec2:	9305      	str	r3, [sp, #20]
 8020ec4:	4619      	mov	r1, r3
 8020ec6:	f04f 0c0a 	mov.w	ip, #10
 8020eca:	4620      	mov	r0, r4
 8020ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ed0:	3a30      	subs	r2, #48	; 0x30
 8020ed2:	2a09      	cmp	r2, #9
 8020ed4:	d903      	bls.n	8020ede <_vfiprintf_r+0x1ee>
 8020ed6:	2b00      	cmp	r3, #0
 8020ed8:	d0c5      	beq.n	8020e66 <_vfiprintf_r+0x176>
 8020eda:	9105      	str	r1, [sp, #20]
 8020edc:	e7c3      	b.n	8020e66 <_vfiprintf_r+0x176>
 8020ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ee2:	4604      	mov	r4, r0
 8020ee4:	2301      	movs	r3, #1
 8020ee6:	e7f0      	b.n	8020eca <_vfiprintf_r+0x1da>
 8020ee8:	ab03      	add	r3, sp, #12
 8020eea:	9300      	str	r3, [sp, #0]
 8020eec:	462a      	mov	r2, r5
 8020eee:	4b16      	ldr	r3, [pc, #88]	; (8020f48 <_vfiprintf_r+0x258>)
 8020ef0:	a904      	add	r1, sp, #16
 8020ef2:	4630      	mov	r0, r6
 8020ef4:	f3af 8000 	nop.w
 8020ef8:	4607      	mov	r7, r0
 8020efa:	1c78      	adds	r0, r7, #1
 8020efc:	d1d6      	bne.n	8020eac <_vfiprintf_r+0x1bc>
 8020efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020f00:	07d9      	lsls	r1, r3, #31
 8020f02:	d405      	bmi.n	8020f10 <_vfiprintf_r+0x220>
 8020f04:	89ab      	ldrh	r3, [r5, #12]
 8020f06:	059a      	lsls	r2, r3, #22
 8020f08:	d402      	bmi.n	8020f10 <_vfiprintf_r+0x220>
 8020f0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020f0c:	f7ff fb70 	bl	80205f0 <__retarget_lock_release_recursive>
 8020f10:	89ab      	ldrh	r3, [r5, #12]
 8020f12:	065b      	lsls	r3, r3, #25
 8020f14:	f53f af12 	bmi.w	8020d3c <_vfiprintf_r+0x4c>
 8020f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f1a:	e711      	b.n	8020d40 <_vfiprintf_r+0x50>
 8020f1c:	ab03      	add	r3, sp, #12
 8020f1e:	9300      	str	r3, [sp, #0]
 8020f20:	462a      	mov	r2, r5
 8020f22:	4b09      	ldr	r3, [pc, #36]	; (8020f48 <_vfiprintf_r+0x258>)
 8020f24:	a904      	add	r1, sp, #16
 8020f26:	4630      	mov	r0, r6
 8020f28:	f000 f880 	bl	802102c <_printf_i>
 8020f2c:	e7e4      	b.n	8020ef8 <_vfiprintf_r+0x208>
 8020f2e:	bf00      	nop
 8020f30:	080246c8 	.word	0x080246c8
 8020f34:	080246e8 	.word	0x080246e8
 8020f38:	080246a8 	.word	0x080246a8
 8020f3c:	080247ba 	.word	0x080247ba
 8020f40:	080247c4 	.word	0x080247c4
 8020f44:	00000000 	.word	0x00000000
 8020f48:	08020ccb 	.word	0x08020ccb
 8020f4c:	080247c0 	.word	0x080247c0

08020f50 <_printf_common>:
 8020f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f54:	4616      	mov	r6, r2
 8020f56:	4699      	mov	r9, r3
 8020f58:	688a      	ldr	r2, [r1, #8]
 8020f5a:	690b      	ldr	r3, [r1, #16]
 8020f5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020f60:	4293      	cmp	r3, r2
 8020f62:	bfb8      	it	lt
 8020f64:	4613      	movlt	r3, r2
 8020f66:	6033      	str	r3, [r6, #0]
 8020f68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020f6c:	4607      	mov	r7, r0
 8020f6e:	460c      	mov	r4, r1
 8020f70:	b10a      	cbz	r2, 8020f76 <_printf_common+0x26>
 8020f72:	3301      	adds	r3, #1
 8020f74:	6033      	str	r3, [r6, #0]
 8020f76:	6823      	ldr	r3, [r4, #0]
 8020f78:	0699      	lsls	r1, r3, #26
 8020f7a:	bf42      	ittt	mi
 8020f7c:	6833      	ldrmi	r3, [r6, #0]
 8020f7e:	3302      	addmi	r3, #2
 8020f80:	6033      	strmi	r3, [r6, #0]
 8020f82:	6825      	ldr	r5, [r4, #0]
 8020f84:	f015 0506 	ands.w	r5, r5, #6
 8020f88:	d106      	bne.n	8020f98 <_printf_common+0x48>
 8020f8a:	f104 0a19 	add.w	sl, r4, #25
 8020f8e:	68e3      	ldr	r3, [r4, #12]
 8020f90:	6832      	ldr	r2, [r6, #0]
 8020f92:	1a9b      	subs	r3, r3, r2
 8020f94:	42ab      	cmp	r3, r5
 8020f96:	dc26      	bgt.n	8020fe6 <_printf_common+0x96>
 8020f98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020f9c:	1e13      	subs	r3, r2, #0
 8020f9e:	6822      	ldr	r2, [r4, #0]
 8020fa0:	bf18      	it	ne
 8020fa2:	2301      	movne	r3, #1
 8020fa4:	0692      	lsls	r2, r2, #26
 8020fa6:	d42b      	bmi.n	8021000 <_printf_common+0xb0>
 8020fa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020fac:	4649      	mov	r1, r9
 8020fae:	4638      	mov	r0, r7
 8020fb0:	47c0      	blx	r8
 8020fb2:	3001      	adds	r0, #1
 8020fb4:	d01e      	beq.n	8020ff4 <_printf_common+0xa4>
 8020fb6:	6823      	ldr	r3, [r4, #0]
 8020fb8:	68e5      	ldr	r5, [r4, #12]
 8020fba:	6832      	ldr	r2, [r6, #0]
 8020fbc:	f003 0306 	and.w	r3, r3, #6
 8020fc0:	2b04      	cmp	r3, #4
 8020fc2:	bf08      	it	eq
 8020fc4:	1aad      	subeq	r5, r5, r2
 8020fc6:	68a3      	ldr	r3, [r4, #8]
 8020fc8:	6922      	ldr	r2, [r4, #16]
 8020fca:	bf0c      	ite	eq
 8020fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020fd0:	2500      	movne	r5, #0
 8020fd2:	4293      	cmp	r3, r2
 8020fd4:	bfc4      	itt	gt
 8020fd6:	1a9b      	subgt	r3, r3, r2
 8020fd8:	18ed      	addgt	r5, r5, r3
 8020fda:	2600      	movs	r6, #0
 8020fdc:	341a      	adds	r4, #26
 8020fde:	42b5      	cmp	r5, r6
 8020fe0:	d11a      	bne.n	8021018 <_printf_common+0xc8>
 8020fe2:	2000      	movs	r0, #0
 8020fe4:	e008      	b.n	8020ff8 <_printf_common+0xa8>
 8020fe6:	2301      	movs	r3, #1
 8020fe8:	4652      	mov	r2, sl
 8020fea:	4649      	mov	r1, r9
 8020fec:	4638      	mov	r0, r7
 8020fee:	47c0      	blx	r8
 8020ff0:	3001      	adds	r0, #1
 8020ff2:	d103      	bne.n	8020ffc <_printf_common+0xac>
 8020ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8020ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ffc:	3501      	adds	r5, #1
 8020ffe:	e7c6      	b.n	8020f8e <_printf_common+0x3e>
 8021000:	18e1      	adds	r1, r4, r3
 8021002:	1c5a      	adds	r2, r3, #1
 8021004:	2030      	movs	r0, #48	; 0x30
 8021006:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802100a:	4422      	add	r2, r4
 802100c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8021010:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021014:	3302      	adds	r3, #2
 8021016:	e7c7      	b.n	8020fa8 <_printf_common+0x58>
 8021018:	2301      	movs	r3, #1
 802101a:	4622      	mov	r2, r4
 802101c:	4649      	mov	r1, r9
 802101e:	4638      	mov	r0, r7
 8021020:	47c0      	blx	r8
 8021022:	3001      	adds	r0, #1
 8021024:	d0e6      	beq.n	8020ff4 <_printf_common+0xa4>
 8021026:	3601      	adds	r6, #1
 8021028:	e7d9      	b.n	8020fde <_printf_common+0x8e>
	...

0802102c <_printf_i>:
 802102c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021030:	7e0f      	ldrb	r7, [r1, #24]
 8021032:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021034:	2f78      	cmp	r7, #120	; 0x78
 8021036:	4691      	mov	r9, r2
 8021038:	4680      	mov	r8, r0
 802103a:	460c      	mov	r4, r1
 802103c:	469a      	mov	sl, r3
 802103e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8021042:	d807      	bhi.n	8021054 <_printf_i+0x28>
 8021044:	2f62      	cmp	r7, #98	; 0x62
 8021046:	d80a      	bhi.n	802105e <_printf_i+0x32>
 8021048:	2f00      	cmp	r7, #0
 802104a:	f000 80d8 	beq.w	80211fe <_printf_i+0x1d2>
 802104e:	2f58      	cmp	r7, #88	; 0x58
 8021050:	f000 80a3 	beq.w	802119a <_printf_i+0x16e>
 8021054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8021058:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802105c:	e03a      	b.n	80210d4 <_printf_i+0xa8>
 802105e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8021062:	2b15      	cmp	r3, #21
 8021064:	d8f6      	bhi.n	8021054 <_printf_i+0x28>
 8021066:	a101      	add	r1, pc, #4	; (adr r1, 802106c <_printf_i+0x40>)
 8021068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802106c:	080210c5 	.word	0x080210c5
 8021070:	080210d9 	.word	0x080210d9
 8021074:	08021055 	.word	0x08021055
 8021078:	08021055 	.word	0x08021055
 802107c:	08021055 	.word	0x08021055
 8021080:	08021055 	.word	0x08021055
 8021084:	080210d9 	.word	0x080210d9
 8021088:	08021055 	.word	0x08021055
 802108c:	08021055 	.word	0x08021055
 8021090:	08021055 	.word	0x08021055
 8021094:	08021055 	.word	0x08021055
 8021098:	080211e5 	.word	0x080211e5
 802109c:	08021109 	.word	0x08021109
 80210a0:	080211c7 	.word	0x080211c7
 80210a4:	08021055 	.word	0x08021055
 80210a8:	08021055 	.word	0x08021055
 80210ac:	08021207 	.word	0x08021207
 80210b0:	08021055 	.word	0x08021055
 80210b4:	08021109 	.word	0x08021109
 80210b8:	08021055 	.word	0x08021055
 80210bc:	08021055 	.word	0x08021055
 80210c0:	080211cf 	.word	0x080211cf
 80210c4:	682b      	ldr	r3, [r5, #0]
 80210c6:	1d1a      	adds	r2, r3, #4
 80210c8:	681b      	ldr	r3, [r3, #0]
 80210ca:	602a      	str	r2, [r5, #0]
 80210cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80210d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80210d4:	2301      	movs	r3, #1
 80210d6:	e0a3      	b.n	8021220 <_printf_i+0x1f4>
 80210d8:	6820      	ldr	r0, [r4, #0]
 80210da:	6829      	ldr	r1, [r5, #0]
 80210dc:	0606      	lsls	r6, r0, #24
 80210de:	f101 0304 	add.w	r3, r1, #4
 80210e2:	d50a      	bpl.n	80210fa <_printf_i+0xce>
 80210e4:	680e      	ldr	r6, [r1, #0]
 80210e6:	602b      	str	r3, [r5, #0]
 80210e8:	2e00      	cmp	r6, #0
 80210ea:	da03      	bge.n	80210f4 <_printf_i+0xc8>
 80210ec:	232d      	movs	r3, #45	; 0x2d
 80210ee:	4276      	negs	r6, r6
 80210f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80210f4:	485e      	ldr	r0, [pc, #376]	; (8021270 <_printf_i+0x244>)
 80210f6:	230a      	movs	r3, #10
 80210f8:	e019      	b.n	802112e <_printf_i+0x102>
 80210fa:	680e      	ldr	r6, [r1, #0]
 80210fc:	602b      	str	r3, [r5, #0]
 80210fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021102:	bf18      	it	ne
 8021104:	b236      	sxthne	r6, r6
 8021106:	e7ef      	b.n	80210e8 <_printf_i+0xbc>
 8021108:	682b      	ldr	r3, [r5, #0]
 802110a:	6820      	ldr	r0, [r4, #0]
 802110c:	1d19      	adds	r1, r3, #4
 802110e:	6029      	str	r1, [r5, #0]
 8021110:	0601      	lsls	r1, r0, #24
 8021112:	d501      	bpl.n	8021118 <_printf_i+0xec>
 8021114:	681e      	ldr	r6, [r3, #0]
 8021116:	e002      	b.n	802111e <_printf_i+0xf2>
 8021118:	0646      	lsls	r6, r0, #25
 802111a:	d5fb      	bpl.n	8021114 <_printf_i+0xe8>
 802111c:	881e      	ldrh	r6, [r3, #0]
 802111e:	4854      	ldr	r0, [pc, #336]	; (8021270 <_printf_i+0x244>)
 8021120:	2f6f      	cmp	r7, #111	; 0x6f
 8021122:	bf0c      	ite	eq
 8021124:	2308      	moveq	r3, #8
 8021126:	230a      	movne	r3, #10
 8021128:	2100      	movs	r1, #0
 802112a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802112e:	6865      	ldr	r5, [r4, #4]
 8021130:	60a5      	str	r5, [r4, #8]
 8021132:	2d00      	cmp	r5, #0
 8021134:	bfa2      	ittt	ge
 8021136:	6821      	ldrge	r1, [r4, #0]
 8021138:	f021 0104 	bicge.w	r1, r1, #4
 802113c:	6021      	strge	r1, [r4, #0]
 802113e:	b90e      	cbnz	r6, 8021144 <_printf_i+0x118>
 8021140:	2d00      	cmp	r5, #0
 8021142:	d04d      	beq.n	80211e0 <_printf_i+0x1b4>
 8021144:	4615      	mov	r5, r2
 8021146:	fbb6 f1f3 	udiv	r1, r6, r3
 802114a:	fb03 6711 	mls	r7, r3, r1, r6
 802114e:	5dc7      	ldrb	r7, [r0, r7]
 8021150:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8021154:	4637      	mov	r7, r6
 8021156:	42bb      	cmp	r3, r7
 8021158:	460e      	mov	r6, r1
 802115a:	d9f4      	bls.n	8021146 <_printf_i+0x11a>
 802115c:	2b08      	cmp	r3, #8
 802115e:	d10b      	bne.n	8021178 <_printf_i+0x14c>
 8021160:	6823      	ldr	r3, [r4, #0]
 8021162:	07de      	lsls	r6, r3, #31
 8021164:	d508      	bpl.n	8021178 <_printf_i+0x14c>
 8021166:	6923      	ldr	r3, [r4, #16]
 8021168:	6861      	ldr	r1, [r4, #4]
 802116a:	4299      	cmp	r1, r3
 802116c:	bfde      	ittt	le
 802116e:	2330      	movle	r3, #48	; 0x30
 8021170:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021174:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021178:	1b52      	subs	r2, r2, r5
 802117a:	6122      	str	r2, [r4, #16]
 802117c:	f8cd a000 	str.w	sl, [sp]
 8021180:	464b      	mov	r3, r9
 8021182:	aa03      	add	r2, sp, #12
 8021184:	4621      	mov	r1, r4
 8021186:	4640      	mov	r0, r8
 8021188:	f7ff fee2 	bl	8020f50 <_printf_common>
 802118c:	3001      	adds	r0, #1
 802118e:	d14c      	bne.n	802122a <_printf_i+0x1fe>
 8021190:	f04f 30ff 	mov.w	r0, #4294967295
 8021194:	b004      	add	sp, #16
 8021196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802119a:	4835      	ldr	r0, [pc, #212]	; (8021270 <_printf_i+0x244>)
 802119c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80211a0:	6829      	ldr	r1, [r5, #0]
 80211a2:	6823      	ldr	r3, [r4, #0]
 80211a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80211a8:	6029      	str	r1, [r5, #0]
 80211aa:	061d      	lsls	r5, r3, #24
 80211ac:	d514      	bpl.n	80211d8 <_printf_i+0x1ac>
 80211ae:	07df      	lsls	r7, r3, #31
 80211b0:	bf44      	itt	mi
 80211b2:	f043 0320 	orrmi.w	r3, r3, #32
 80211b6:	6023      	strmi	r3, [r4, #0]
 80211b8:	b91e      	cbnz	r6, 80211c2 <_printf_i+0x196>
 80211ba:	6823      	ldr	r3, [r4, #0]
 80211bc:	f023 0320 	bic.w	r3, r3, #32
 80211c0:	6023      	str	r3, [r4, #0]
 80211c2:	2310      	movs	r3, #16
 80211c4:	e7b0      	b.n	8021128 <_printf_i+0xfc>
 80211c6:	6823      	ldr	r3, [r4, #0]
 80211c8:	f043 0320 	orr.w	r3, r3, #32
 80211cc:	6023      	str	r3, [r4, #0]
 80211ce:	2378      	movs	r3, #120	; 0x78
 80211d0:	4828      	ldr	r0, [pc, #160]	; (8021274 <_printf_i+0x248>)
 80211d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80211d6:	e7e3      	b.n	80211a0 <_printf_i+0x174>
 80211d8:	0659      	lsls	r1, r3, #25
 80211da:	bf48      	it	mi
 80211dc:	b2b6      	uxthmi	r6, r6
 80211de:	e7e6      	b.n	80211ae <_printf_i+0x182>
 80211e0:	4615      	mov	r5, r2
 80211e2:	e7bb      	b.n	802115c <_printf_i+0x130>
 80211e4:	682b      	ldr	r3, [r5, #0]
 80211e6:	6826      	ldr	r6, [r4, #0]
 80211e8:	6961      	ldr	r1, [r4, #20]
 80211ea:	1d18      	adds	r0, r3, #4
 80211ec:	6028      	str	r0, [r5, #0]
 80211ee:	0635      	lsls	r5, r6, #24
 80211f0:	681b      	ldr	r3, [r3, #0]
 80211f2:	d501      	bpl.n	80211f8 <_printf_i+0x1cc>
 80211f4:	6019      	str	r1, [r3, #0]
 80211f6:	e002      	b.n	80211fe <_printf_i+0x1d2>
 80211f8:	0670      	lsls	r0, r6, #25
 80211fa:	d5fb      	bpl.n	80211f4 <_printf_i+0x1c8>
 80211fc:	8019      	strh	r1, [r3, #0]
 80211fe:	2300      	movs	r3, #0
 8021200:	6123      	str	r3, [r4, #16]
 8021202:	4615      	mov	r5, r2
 8021204:	e7ba      	b.n	802117c <_printf_i+0x150>
 8021206:	682b      	ldr	r3, [r5, #0]
 8021208:	1d1a      	adds	r2, r3, #4
 802120a:	602a      	str	r2, [r5, #0]
 802120c:	681d      	ldr	r5, [r3, #0]
 802120e:	6862      	ldr	r2, [r4, #4]
 8021210:	2100      	movs	r1, #0
 8021212:	4628      	mov	r0, r5
 8021214:	f7df f87c 	bl	8000310 <memchr>
 8021218:	b108      	cbz	r0, 802121e <_printf_i+0x1f2>
 802121a:	1b40      	subs	r0, r0, r5
 802121c:	6060      	str	r0, [r4, #4]
 802121e:	6863      	ldr	r3, [r4, #4]
 8021220:	6123      	str	r3, [r4, #16]
 8021222:	2300      	movs	r3, #0
 8021224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021228:	e7a8      	b.n	802117c <_printf_i+0x150>
 802122a:	6923      	ldr	r3, [r4, #16]
 802122c:	462a      	mov	r2, r5
 802122e:	4649      	mov	r1, r9
 8021230:	4640      	mov	r0, r8
 8021232:	47d0      	blx	sl
 8021234:	3001      	adds	r0, #1
 8021236:	d0ab      	beq.n	8021190 <_printf_i+0x164>
 8021238:	6823      	ldr	r3, [r4, #0]
 802123a:	079b      	lsls	r3, r3, #30
 802123c:	d413      	bmi.n	8021266 <_printf_i+0x23a>
 802123e:	68e0      	ldr	r0, [r4, #12]
 8021240:	9b03      	ldr	r3, [sp, #12]
 8021242:	4298      	cmp	r0, r3
 8021244:	bfb8      	it	lt
 8021246:	4618      	movlt	r0, r3
 8021248:	e7a4      	b.n	8021194 <_printf_i+0x168>
 802124a:	2301      	movs	r3, #1
 802124c:	4632      	mov	r2, r6
 802124e:	4649      	mov	r1, r9
 8021250:	4640      	mov	r0, r8
 8021252:	47d0      	blx	sl
 8021254:	3001      	adds	r0, #1
 8021256:	d09b      	beq.n	8021190 <_printf_i+0x164>
 8021258:	3501      	adds	r5, #1
 802125a:	68e3      	ldr	r3, [r4, #12]
 802125c:	9903      	ldr	r1, [sp, #12]
 802125e:	1a5b      	subs	r3, r3, r1
 8021260:	42ab      	cmp	r3, r5
 8021262:	dcf2      	bgt.n	802124a <_printf_i+0x21e>
 8021264:	e7eb      	b.n	802123e <_printf_i+0x212>
 8021266:	2500      	movs	r5, #0
 8021268:	f104 0619 	add.w	r6, r4, #25
 802126c:	e7f5      	b.n	802125a <_printf_i+0x22e>
 802126e:	bf00      	nop
 8021270:	080247cb 	.word	0x080247cb
 8021274:	080247dc 	.word	0x080247dc

08021278 <_read_r>:
 8021278:	b538      	push	{r3, r4, r5, lr}
 802127a:	4d07      	ldr	r5, [pc, #28]	; (8021298 <_read_r+0x20>)
 802127c:	4604      	mov	r4, r0
 802127e:	4608      	mov	r0, r1
 8021280:	4611      	mov	r1, r2
 8021282:	2200      	movs	r2, #0
 8021284:	602a      	str	r2, [r5, #0]
 8021286:	461a      	mov	r2, r3
 8021288:	f7df fdf8 	bl	8000e7c <_read>
 802128c:	1c43      	adds	r3, r0, #1
 802128e:	d102      	bne.n	8021296 <_read_r+0x1e>
 8021290:	682b      	ldr	r3, [r5, #0]
 8021292:	b103      	cbz	r3, 8021296 <_read_r+0x1e>
 8021294:	6023      	str	r3, [r4, #0]
 8021296:	bd38      	pop	{r3, r4, r5, pc}
 8021298:	2400e8f8 	.word	0x2400e8f8

0802129c <__swbuf_r>:
 802129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802129e:	460e      	mov	r6, r1
 80212a0:	4614      	mov	r4, r2
 80212a2:	4605      	mov	r5, r0
 80212a4:	b118      	cbz	r0, 80212ae <__swbuf_r+0x12>
 80212a6:	6983      	ldr	r3, [r0, #24]
 80212a8:	b90b      	cbnz	r3, 80212ae <__swbuf_r+0x12>
 80212aa:	f7ff f8dd 	bl	8020468 <__sinit>
 80212ae:	4b21      	ldr	r3, [pc, #132]	; (8021334 <__swbuf_r+0x98>)
 80212b0:	429c      	cmp	r4, r3
 80212b2:	d12b      	bne.n	802130c <__swbuf_r+0x70>
 80212b4:	686c      	ldr	r4, [r5, #4]
 80212b6:	69a3      	ldr	r3, [r4, #24]
 80212b8:	60a3      	str	r3, [r4, #8]
 80212ba:	89a3      	ldrh	r3, [r4, #12]
 80212bc:	071a      	lsls	r2, r3, #28
 80212be:	d52f      	bpl.n	8021320 <__swbuf_r+0x84>
 80212c0:	6923      	ldr	r3, [r4, #16]
 80212c2:	b36b      	cbz	r3, 8021320 <__swbuf_r+0x84>
 80212c4:	6923      	ldr	r3, [r4, #16]
 80212c6:	6820      	ldr	r0, [r4, #0]
 80212c8:	1ac0      	subs	r0, r0, r3
 80212ca:	6963      	ldr	r3, [r4, #20]
 80212cc:	b2f6      	uxtb	r6, r6
 80212ce:	4283      	cmp	r3, r0
 80212d0:	4637      	mov	r7, r6
 80212d2:	dc04      	bgt.n	80212de <__swbuf_r+0x42>
 80212d4:	4621      	mov	r1, r4
 80212d6:	4628      	mov	r0, r5
 80212d8:	f7ff fc20 	bl	8020b1c <_fflush_r>
 80212dc:	bb30      	cbnz	r0, 802132c <__swbuf_r+0x90>
 80212de:	68a3      	ldr	r3, [r4, #8]
 80212e0:	3b01      	subs	r3, #1
 80212e2:	60a3      	str	r3, [r4, #8]
 80212e4:	6823      	ldr	r3, [r4, #0]
 80212e6:	1c5a      	adds	r2, r3, #1
 80212e8:	6022      	str	r2, [r4, #0]
 80212ea:	701e      	strb	r6, [r3, #0]
 80212ec:	6963      	ldr	r3, [r4, #20]
 80212ee:	3001      	adds	r0, #1
 80212f0:	4283      	cmp	r3, r0
 80212f2:	d004      	beq.n	80212fe <__swbuf_r+0x62>
 80212f4:	89a3      	ldrh	r3, [r4, #12]
 80212f6:	07db      	lsls	r3, r3, #31
 80212f8:	d506      	bpl.n	8021308 <__swbuf_r+0x6c>
 80212fa:	2e0a      	cmp	r6, #10
 80212fc:	d104      	bne.n	8021308 <__swbuf_r+0x6c>
 80212fe:	4621      	mov	r1, r4
 8021300:	4628      	mov	r0, r5
 8021302:	f7ff fc0b 	bl	8020b1c <_fflush_r>
 8021306:	b988      	cbnz	r0, 802132c <__swbuf_r+0x90>
 8021308:	4638      	mov	r0, r7
 802130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802130c:	4b0a      	ldr	r3, [pc, #40]	; (8021338 <__swbuf_r+0x9c>)
 802130e:	429c      	cmp	r4, r3
 8021310:	d101      	bne.n	8021316 <__swbuf_r+0x7a>
 8021312:	68ac      	ldr	r4, [r5, #8]
 8021314:	e7cf      	b.n	80212b6 <__swbuf_r+0x1a>
 8021316:	4b09      	ldr	r3, [pc, #36]	; (802133c <__swbuf_r+0xa0>)
 8021318:	429c      	cmp	r4, r3
 802131a:	bf08      	it	eq
 802131c:	68ec      	ldreq	r4, [r5, #12]
 802131e:	e7ca      	b.n	80212b6 <__swbuf_r+0x1a>
 8021320:	4621      	mov	r1, r4
 8021322:	4628      	mov	r0, r5
 8021324:	f000 f80c 	bl	8021340 <__swsetup_r>
 8021328:	2800      	cmp	r0, #0
 802132a:	d0cb      	beq.n	80212c4 <__swbuf_r+0x28>
 802132c:	f04f 37ff 	mov.w	r7, #4294967295
 8021330:	e7ea      	b.n	8021308 <__swbuf_r+0x6c>
 8021332:	bf00      	nop
 8021334:	080246c8 	.word	0x080246c8
 8021338:	080246e8 	.word	0x080246e8
 802133c:	080246a8 	.word	0x080246a8

08021340 <__swsetup_r>:
 8021340:	4b32      	ldr	r3, [pc, #200]	; (802140c <__swsetup_r+0xcc>)
 8021342:	b570      	push	{r4, r5, r6, lr}
 8021344:	681d      	ldr	r5, [r3, #0]
 8021346:	4606      	mov	r6, r0
 8021348:	460c      	mov	r4, r1
 802134a:	b125      	cbz	r5, 8021356 <__swsetup_r+0x16>
 802134c:	69ab      	ldr	r3, [r5, #24]
 802134e:	b913      	cbnz	r3, 8021356 <__swsetup_r+0x16>
 8021350:	4628      	mov	r0, r5
 8021352:	f7ff f889 	bl	8020468 <__sinit>
 8021356:	4b2e      	ldr	r3, [pc, #184]	; (8021410 <__swsetup_r+0xd0>)
 8021358:	429c      	cmp	r4, r3
 802135a:	d10f      	bne.n	802137c <__swsetup_r+0x3c>
 802135c:	686c      	ldr	r4, [r5, #4]
 802135e:	89a3      	ldrh	r3, [r4, #12]
 8021360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021364:	0719      	lsls	r1, r3, #28
 8021366:	d42c      	bmi.n	80213c2 <__swsetup_r+0x82>
 8021368:	06dd      	lsls	r5, r3, #27
 802136a:	d411      	bmi.n	8021390 <__swsetup_r+0x50>
 802136c:	2309      	movs	r3, #9
 802136e:	6033      	str	r3, [r6, #0]
 8021370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021374:	81a3      	strh	r3, [r4, #12]
 8021376:	f04f 30ff 	mov.w	r0, #4294967295
 802137a:	e03e      	b.n	80213fa <__swsetup_r+0xba>
 802137c:	4b25      	ldr	r3, [pc, #148]	; (8021414 <__swsetup_r+0xd4>)
 802137e:	429c      	cmp	r4, r3
 8021380:	d101      	bne.n	8021386 <__swsetup_r+0x46>
 8021382:	68ac      	ldr	r4, [r5, #8]
 8021384:	e7eb      	b.n	802135e <__swsetup_r+0x1e>
 8021386:	4b24      	ldr	r3, [pc, #144]	; (8021418 <__swsetup_r+0xd8>)
 8021388:	429c      	cmp	r4, r3
 802138a:	bf08      	it	eq
 802138c:	68ec      	ldreq	r4, [r5, #12]
 802138e:	e7e6      	b.n	802135e <__swsetup_r+0x1e>
 8021390:	0758      	lsls	r0, r3, #29
 8021392:	d512      	bpl.n	80213ba <__swsetup_r+0x7a>
 8021394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021396:	b141      	cbz	r1, 80213aa <__swsetup_r+0x6a>
 8021398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802139c:	4299      	cmp	r1, r3
 802139e:	d002      	beq.n	80213a6 <__swsetup_r+0x66>
 80213a0:	4630      	mov	r0, r6
 80213a2:	f7ff fc2f 	bl	8020c04 <_free_r>
 80213a6:	2300      	movs	r3, #0
 80213a8:	6363      	str	r3, [r4, #52]	; 0x34
 80213aa:	89a3      	ldrh	r3, [r4, #12]
 80213ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80213b0:	81a3      	strh	r3, [r4, #12]
 80213b2:	2300      	movs	r3, #0
 80213b4:	6063      	str	r3, [r4, #4]
 80213b6:	6923      	ldr	r3, [r4, #16]
 80213b8:	6023      	str	r3, [r4, #0]
 80213ba:	89a3      	ldrh	r3, [r4, #12]
 80213bc:	f043 0308 	orr.w	r3, r3, #8
 80213c0:	81a3      	strh	r3, [r4, #12]
 80213c2:	6923      	ldr	r3, [r4, #16]
 80213c4:	b94b      	cbnz	r3, 80213da <__swsetup_r+0x9a>
 80213c6:	89a3      	ldrh	r3, [r4, #12]
 80213c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80213cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80213d0:	d003      	beq.n	80213da <__swsetup_r+0x9a>
 80213d2:	4621      	mov	r1, r4
 80213d4:	4630      	mov	r0, r6
 80213d6:	f000 f84d 	bl	8021474 <__smakebuf_r>
 80213da:	89a0      	ldrh	r0, [r4, #12]
 80213dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80213e0:	f010 0301 	ands.w	r3, r0, #1
 80213e4:	d00a      	beq.n	80213fc <__swsetup_r+0xbc>
 80213e6:	2300      	movs	r3, #0
 80213e8:	60a3      	str	r3, [r4, #8]
 80213ea:	6963      	ldr	r3, [r4, #20]
 80213ec:	425b      	negs	r3, r3
 80213ee:	61a3      	str	r3, [r4, #24]
 80213f0:	6923      	ldr	r3, [r4, #16]
 80213f2:	b943      	cbnz	r3, 8021406 <__swsetup_r+0xc6>
 80213f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80213f8:	d1ba      	bne.n	8021370 <__swsetup_r+0x30>
 80213fa:	bd70      	pop	{r4, r5, r6, pc}
 80213fc:	0781      	lsls	r1, r0, #30
 80213fe:	bf58      	it	pl
 8021400:	6963      	ldrpl	r3, [r4, #20]
 8021402:	60a3      	str	r3, [r4, #8]
 8021404:	e7f4      	b.n	80213f0 <__swsetup_r+0xb0>
 8021406:	2000      	movs	r0, #0
 8021408:	e7f7      	b.n	80213fa <__swsetup_r+0xba>
 802140a:	bf00      	nop
 802140c:	24000128 	.word	0x24000128
 8021410:	080246c8 	.word	0x080246c8
 8021414:	080246e8 	.word	0x080246e8
 8021418:	080246a8 	.word	0x080246a8

0802141c <abort>:
 802141c:	b508      	push	{r3, lr}
 802141e:	2006      	movs	r0, #6
 8021420:	f000 f890 	bl	8021544 <raise>
 8021424:	2001      	movs	r0, #1
 8021426:	f7df fd1f 	bl	8000e68 <_exit>

0802142a <__swhatbuf_r>:
 802142a:	b570      	push	{r4, r5, r6, lr}
 802142c:	460e      	mov	r6, r1
 802142e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021432:	2900      	cmp	r1, #0
 8021434:	b096      	sub	sp, #88	; 0x58
 8021436:	4614      	mov	r4, r2
 8021438:	461d      	mov	r5, r3
 802143a:	da08      	bge.n	802144e <__swhatbuf_r+0x24>
 802143c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021440:	2200      	movs	r2, #0
 8021442:	602a      	str	r2, [r5, #0]
 8021444:	061a      	lsls	r2, r3, #24
 8021446:	d410      	bmi.n	802146a <__swhatbuf_r+0x40>
 8021448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802144c:	e00e      	b.n	802146c <__swhatbuf_r+0x42>
 802144e:	466a      	mov	r2, sp
 8021450:	f000 f894 	bl	802157c <_fstat_r>
 8021454:	2800      	cmp	r0, #0
 8021456:	dbf1      	blt.n	802143c <__swhatbuf_r+0x12>
 8021458:	9a01      	ldr	r2, [sp, #4]
 802145a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802145e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021462:	425a      	negs	r2, r3
 8021464:	415a      	adcs	r2, r3
 8021466:	602a      	str	r2, [r5, #0]
 8021468:	e7ee      	b.n	8021448 <__swhatbuf_r+0x1e>
 802146a:	2340      	movs	r3, #64	; 0x40
 802146c:	2000      	movs	r0, #0
 802146e:	6023      	str	r3, [r4, #0]
 8021470:	b016      	add	sp, #88	; 0x58
 8021472:	bd70      	pop	{r4, r5, r6, pc}

08021474 <__smakebuf_r>:
 8021474:	898b      	ldrh	r3, [r1, #12]
 8021476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021478:	079d      	lsls	r5, r3, #30
 802147a:	4606      	mov	r6, r0
 802147c:	460c      	mov	r4, r1
 802147e:	d507      	bpl.n	8021490 <__smakebuf_r+0x1c>
 8021480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021484:	6023      	str	r3, [r4, #0]
 8021486:	6123      	str	r3, [r4, #16]
 8021488:	2301      	movs	r3, #1
 802148a:	6163      	str	r3, [r4, #20]
 802148c:	b002      	add	sp, #8
 802148e:	bd70      	pop	{r4, r5, r6, pc}
 8021490:	ab01      	add	r3, sp, #4
 8021492:	466a      	mov	r2, sp
 8021494:	f7ff ffc9 	bl	802142a <__swhatbuf_r>
 8021498:	9900      	ldr	r1, [sp, #0]
 802149a:	4605      	mov	r5, r0
 802149c:	4630      	mov	r0, r6
 802149e:	f7ff f8ef 	bl	8020680 <_malloc_r>
 80214a2:	b948      	cbnz	r0, 80214b8 <__smakebuf_r+0x44>
 80214a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80214a8:	059a      	lsls	r2, r3, #22
 80214aa:	d4ef      	bmi.n	802148c <__smakebuf_r+0x18>
 80214ac:	f023 0303 	bic.w	r3, r3, #3
 80214b0:	f043 0302 	orr.w	r3, r3, #2
 80214b4:	81a3      	strh	r3, [r4, #12]
 80214b6:	e7e3      	b.n	8021480 <__smakebuf_r+0xc>
 80214b8:	4b0d      	ldr	r3, [pc, #52]	; (80214f0 <__smakebuf_r+0x7c>)
 80214ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80214bc:	89a3      	ldrh	r3, [r4, #12]
 80214be:	6020      	str	r0, [r4, #0]
 80214c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80214c4:	81a3      	strh	r3, [r4, #12]
 80214c6:	9b00      	ldr	r3, [sp, #0]
 80214c8:	6163      	str	r3, [r4, #20]
 80214ca:	9b01      	ldr	r3, [sp, #4]
 80214cc:	6120      	str	r0, [r4, #16]
 80214ce:	b15b      	cbz	r3, 80214e8 <__smakebuf_r+0x74>
 80214d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80214d4:	4630      	mov	r0, r6
 80214d6:	f000 f863 	bl	80215a0 <_isatty_r>
 80214da:	b128      	cbz	r0, 80214e8 <__smakebuf_r+0x74>
 80214dc:	89a3      	ldrh	r3, [r4, #12]
 80214de:	f023 0303 	bic.w	r3, r3, #3
 80214e2:	f043 0301 	orr.w	r3, r3, #1
 80214e6:	81a3      	strh	r3, [r4, #12]
 80214e8:	89a0      	ldrh	r0, [r4, #12]
 80214ea:	4305      	orrs	r5, r0
 80214ec:	81a5      	strh	r5, [r4, #12]
 80214ee:	e7cd      	b.n	802148c <__smakebuf_r+0x18>
 80214f0:	08020401 	.word	0x08020401

080214f4 <_raise_r>:
 80214f4:	291f      	cmp	r1, #31
 80214f6:	b538      	push	{r3, r4, r5, lr}
 80214f8:	4604      	mov	r4, r0
 80214fa:	460d      	mov	r5, r1
 80214fc:	d904      	bls.n	8021508 <_raise_r+0x14>
 80214fe:	2316      	movs	r3, #22
 8021500:	6003      	str	r3, [r0, #0]
 8021502:	f04f 30ff 	mov.w	r0, #4294967295
 8021506:	bd38      	pop	{r3, r4, r5, pc}
 8021508:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802150a:	b112      	cbz	r2, 8021512 <_raise_r+0x1e>
 802150c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021510:	b94b      	cbnz	r3, 8021526 <_raise_r+0x32>
 8021512:	4620      	mov	r0, r4
 8021514:	f000 f830 	bl	8021578 <_getpid_r>
 8021518:	462a      	mov	r2, r5
 802151a:	4601      	mov	r1, r0
 802151c:	4620      	mov	r0, r4
 802151e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021522:	f000 b817 	b.w	8021554 <_kill_r>
 8021526:	2b01      	cmp	r3, #1
 8021528:	d00a      	beq.n	8021540 <_raise_r+0x4c>
 802152a:	1c59      	adds	r1, r3, #1
 802152c:	d103      	bne.n	8021536 <_raise_r+0x42>
 802152e:	2316      	movs	r3, #22
 8021530:	6003      	str	r3, [r0, #0]
 8021532:	2001      	movs	r0, #1
 8021534:	e7e7      	b.n	8021506 <_raise_r+0x12>
 8021536:	2400      	movs	r4, #0
 8021538:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802153c:	4628      	mov	r0, r5
 802153e:	4798      	blx	r3
 8021540:	2000      	movs	r0, #0
 8021542:	e7e0      	b.n	8021506 <_raise_r+0x12>

08021544 <raise>:
 8021544:	4b02      	ldr	r3, [pc, #8]	; (8021550 <raise+0xc>)
 8021546:	4601      	mov	r1, r0
 8021548:	6818      	ldr	r0, [r3, #0]
 802154a:	f7ff bfd3 	b.w	80214f4 <_raise_r>
 802154e:	bf00      	nop
 8021550:	24000128 	.word	0x24000128

08021554 <_kill_r>:
 8021554:	b538      	push	{r3, r4, r5, lr}
 8021556:	4d07      	ldr	r5, [pc, #28]	; (8021574 <_kill_r+0x20>)
 8021558:	2300      	movs	r3, #0
 802155a:	4604      	mov	r4, r0
 802155c:	4608      	mov	r0, r1
 802155e:	4611      	mov	r1, r2
 8021560:	602b      	str	r3, [r5, #0]
 8021562:	f7df fc6f 	bl	8000e44 <_kill>
 8021566:	1c43      	adds	r3, r0, #1
 8021568:	d102      	bne.n	8021570 <_kill_r+0x1c>
 802156a:	682b      	ldr	r3, [r5, #0]
 802156c:	b103      	cbz	r3, 8021570 <_kill_r+0x1c>
 802156e:	6023      	str	r3, [r4, #0]
 8021570:	bd38      	pop	{r3, r4, r5, pc}
 8021572:	bf00      	nop
 8021574:	2400e8f8 	.word	0x2400e8f8

08021578 <_getpid_r>:
 8021578:	f7df bc5c 	b.w	8000e34 <_getpid>

0802157c <_fstat_r>:
 802157c:	b538      	push	{r3, r4, r5, lr}
 802157e:	4d07      	ldr	r5, [pc, #28]	; (802159c <_fstat_r+0x20>)
 8021580:	2300      	movs	r3, #0
 8021582:	4604      	mov	r4, r0
 8021584:	4608      	mov	r0, r1
 8021586:	4611      	mov	r1, r2
 8021588:	602b      	str	r3, [r5, #0]
 802158a:	f7df fcbc 	bl	8000f06 <_fstat>
 802158e:	1c43      	adds	r3, r0, #1
 8021590:	d102      	bne.n	8021598 <_fstat_r+0x1c>
 8021592:	682b      	ldr	r3, [r5, #0]
 8021594:	b103      	cbz	r3, 8021598 <_fstat_r+0x1c>
 8021596:	6023      	str	r3, [r4, #0]
 8021598:	bd38      	pop	{r3, r4, r5, pc}
 802159a:	bf00      	nop
 802159c:	2400e8f8 	.word	0x2400e8f8

080215a0 <_isatty_r>:
 80215a0:	b538      	push	{r3, r4, r5, lr}
 80215a2:	4d06      	ldr	r5, [pc, #24]	; (80215bc <_isatty_r+0x1c>)
 80215a4:	2300      	movs	r3, #0
 80215a6:	4604      	mov	r4, r0
 80215a8:	4608      	mov	r0, r1
 80215aa:	602b      	str	r3, [r5, #0]
 80215ac:	f7df fcbb 	bl	8000f26 <_isatty>
 80215b0:	1c43      	adds	r3, r0, #1
 80215b2:	d102      	bne.n	80215ba <_isatty_r+0x1a>
 80215b4:	682b      	ldr	r3, [r5, #0]
 80215b6:	b103      	cbz	r3, 80215ba <_isatty_r+0x1a>
 80215b8:	6023      	str	r3, [r4, #0]
 80215ba:	bd38      	pop	{r3, r4, r5, pc}
 80215bc:	2400e8f8 	.word	0x2400e8f8

080215c0 <_init>:
 80215c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215c2:	bf00      	nop
 80215c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80215c6:	bc08      	pop	{r3}
 80215c8:	469e      	mov	lr, r3
 80215ca:	4770      	bx	lr

080215cc <_fini>:
 80215cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215ce:	bf00      	nop
 80215d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80215d2:	bc08      	pop	{r3}
 80215d4:	469e      	mov	lr, r3
 80215d6:	4770      	bx	lr
